MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H10m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                10 de Março de 2016
Time:                06H10m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2FWPO8T "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2FWPO8T new;
MPRINT(EM_DIAGRAM):   run;
66586      %let EMEXCEPTIONSTRING=;
66587      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66588      * SCORE: BINNING;
MPRINT(EM_DIAGRAM):   * SCORE: BINNING;
66589      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66590      %let EM_ACTION = SCORE;
66591      %let syscc = 0;
66592      %macro main;
66593      
66594        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
66595        %include temp;
66596        filename temp;
66597      
66598        %setProperties;
66599      
66600        %if %upcase(&EM_ACTION) = CREATE %then %do;
66601          filename temp catalog 'sashelp.emmdfy.binning_create.source';
66602          %include temp;
66603          filename temp;
66604      
66605          %create;
66606        %end;
66607      
66608         %else
66609         %if %upcase(&EM_ACTION) = TRAIN %then %do;
66610      
66611             filename temp catalog 'sashelp.emmdfy.binning_train.source';
66612             %include temp;
66613             filename temp;
66614             %train;
66615         %end;
66616      
66617        %else
66618        %if %upcase(&EM_ACTION) = SCORE %then %do;
66619          filename temp catalog 'sashelp.emmdfy.binning_score.source';
66620          %include temp;
66621          filename temp;
66622      
66623          %score;
66624      
66625        %end;
66626      
66627        %else
66628        %if %upcase(&EM_ACTION) = REPORT %then %do;
66629      
66630             filename temp catalog 'sashelp.emmdfy.binning_report.source';
66631             %include temp;
66632             filename temp;
66633      
66634             %report;
66635         %end;
66636      
66637         %doendm:
66638      %mend main;
66639      
66640      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
66642     +%macro SetProperties;
66644     +     /* IGN options */
66645     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
66646     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
66647     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
66649     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
66650     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
66651     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
66652     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
66653     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
66654     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
66655     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
66656     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
66657     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
66658     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
66659     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
66660     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
66661     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
66662     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
66665     +%mend SetProperties;
66666     +%macro appendfiles(fileref1, fileref2);
66667     +     data _null_;
66668     +       length c $256;
66669     +       fid1=fopen("&fileref1",'A');
66670     +       fid2=fopen("&fileref2",'I');
66671     +       cval = finfo(fid2,'lrecl');
66672     +       put cval= fid1= fid2=;
66673     +       if (fid2 > 0) then
66674     +         do while(fread(fid2)=0);
66675     +           rc = fget(fid2,c,256);
66676     +           _msg_=sysmsg();
66677     +           /* put rc= c= _msg_=; */
66678     +           rc = fput(fid1,strip(c));
66679     +           rc = fwrite(fid1);
66680     +         end;
66681     +         _msg_=sysmsg();
66682     +         put _msg_=;
66683     +       rc = fclose(fid1);
66684     +       rc = fclose(fid2);
66685     +     run;
66686     +%mend appendfiles;
66688     +%macro buildOptScoreCode;
66690     +    %em_register(key=BINCODE, type=FOLDER);
66692     +    filename x catalog 'sashelp.emutil.em_deldir.source';
66693     +    %inc x;
66694     +    filename x;
66695     +    %delDir(folder=%nrbquote(&em_user_bincode));
66697     +    data _null_; length rc $200;
66698     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
66699     +    run;
66701     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
66703     +    %let dsid = %sysfunc(open(class_nosv));
66704     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
66705     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
66707     +    %let oldname=;
66708     +    %do %while(^%sysfunc(fetch(&dsid)));
66709     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
66710     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
66712     +        %if &name ne &oldname %then %do;
66713     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
66714     +             data _null_;
66715     +                length string $200 flag endflag 8;
66716     +                retain string flag endflag;
66717     +                set class_nosv end=eof;
66718     +                where DISPLAY_VAR ="&name";
66719     +                by _variable_ _group_;
66720     +                file _F1;
66721     +                index = kindex(_variable_, "BIN_");
66722     +                if index gt 0 then do;
66723     +                   if first._variable_ then do;
66724     +                      put ' ';
66725     +                      put "&EM_CODEBAR;";
66726     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
66727     +                      put string;
66728     +                      put "&EM_CODEBAR;";
66730     +                      if origLabel ne "" then do;
66731     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
66732     +                            put string;
66733     +                            string = tranwrd(origLabel,"'","''");
66734     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
66735     +                            put string;
66736     +                      end;
66737     +                      else do;
66738     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
66739     +                             put string;
66740     +                      end;
66742     +                      put ' ';
66744     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
66745     +                      put string;
66746     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
66747     +                      put string;
66748     +                      put "end;";
66749     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
66750     +                      put string;
66751     +                   end;
66752     +                   if first._group_ then do;
66753     +                      flag = 0;
66754     +                      endflag = 1;
66755     +                      if ^first._variable_ then do;
66756     +                         put "else";
66757     +                      end;
66758     +                      if LB ne . then do;
66759     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
66760     +                      end;
66761     +                      else do;
66762     +                         flag = 1;
66763     +                         string = "if";
66764     +                      end;
66765     +                   end;
66766     +                   if last._Group_ then do;
66767     +                      if UB ne . then do;
66768     +                        if flag ne 1 then do;
66769     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
66770     +                        end;
66771     +                        else do;
66772     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
66773     +                        end;
66774     +                      end;
66775     +                      else do;
66776     +                         if flag=1 then do;
66777     +                            string = strip(DISPLAY_VAR) ;
66778     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
66779     +                            endflag=0;
66780     +                            string="";
66781     +                         end;
66782     +                         else do;
66783     +                            string = strip(string)!!" then do;";
66784     +                         end;
66785     +                      end;
66786     +                      put string;
66787     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
66788     +                      put string;
66789     +                      if endflag eq 1 then do;
66790     +                        put "end;";
66791     +                      end;
66792     +                   end;
66793     +                   if last._variable_ then do;
66794     +                     string = "end;";
66795     +                     put string;
66796     +                   end;
66798     +                end;
66799     +                else do;
66800     +                   _split_value_ = tranwrd(_split_value_,"'","''");
66801     +                   if first._group_ then do;
66802     +                      flag=0;
66803     +                      if ^first._variable_ then
66804     +                         put 'else';
66805     +                      else do;
66806     +                         put ' ';
66807     +                         put "&EM_CODEBAR;";
66808     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
66809     +                         put string;
66810     +                         put "&EM_CODEBAR;";
66812     +                         if origLabel ne "" then do;
66813     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
66814     +                               put string;
66815     +                               string = tranwrd(origLabel,"'","''");
66816     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
66817     +                               put string;
66818     +                         end;
66819     +                         else do;
66820     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
66821     +                               put string;
66822     +                         end;
66824     +                         put ' ';
66826     +                         if format ne '' then do;
66827     +                            if first._variable_ then do;
66828     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
66829     +                               put string;
66830     +                               string = '%dmnormip(_UFormat);';
66831     +                               put string;
66833     +                               string ="if MISSING(_UFORMAT) then do;";
66834     +                               put string;
66835     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
66836     +                               put string;
66837     +                               put "end;";
66839     +                               string="else if NOT MISSING(_UFORMAT) then do;";
66840     +                               put string;
66842     +                            end;
66843     +                         end;
66844     +                         else do;
66845     +                            if type = 'N' then do;
66846     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
66847     +                              put string;
66848     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
66849     +                              put string;
66850     +                              put "end;";
66852     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
66853     +                              put string;
66854     +                            end;
66855     +                            else if type='C' then do;
66856     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
66857     +                              put string;
66858     +                              string = '%dmnormip(_UFormat);';
66859     +                              put string;
66861     +                              string ="if MISSING(_UFORMAT) then do;";
66862     +                              put string;
66863     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
66864     +                              put string;
66865     +                              put "end;";
66867     +                              string="else if NOT MISSING(_UFORMAT) then do;";
66868     +                              put string;
66869     +                              string = '%dmnormip(_UFormat);';
66870     +                              put string;
66871     +                           end;
66872     +                         end;
66873     +                      end;
66874     +                      if format ne '' OR type='C' then do;
66875     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
66876     +                      end;
66877     +                      else do;
66878     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
66879     +                      end;
66880     +                   end;
66881     +                   else do;
66882     +                      if flag ne 1 then do;
66883     +                       if format ne '' OR type='C' then do;
66884     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
66885     +                       end;
66886     +                       else do;
66887     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
66888     +                       end;
66889     +                         length = length(tempstring);
66891     +                         if length < 195 then do;
66892     +                            string = tempstring;
66893     +                         end;
66894     +                         else do;
66896     +                            string = strip(string);
66897     +                            put string;
66898     +                            string = ") then do;";
66899     +                            put string;
66901     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
66902     +                            put string;
66903     +                            put "end;";
66905     +                            put 'else';
66906     +                            if format ne '' OR type='C' then do;
66907     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
66908     +                            end;
66909     +                            else do;
66910     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
66911     +                            end;
66912     +                         end;
66913     +                      end;
66914     +                   end;
66916     +                   if last._group_ then do;
66917     +                      string = strip(string);
66918     +                      put string;
66920     +                      string = ") then do;";
66921     +                      put string;
66923     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
66924     +                      put string;
66925     +                      put "end;";
66926     +                   end;
66928     +                   if last._variable_ then do;
66929     +                     put "else do;";
66931     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
66932     +                     put string;
66934     +                     put "end;";
66935     +                     put "end;";
66936     +                   end;
66937     +                end;
66938     +             run;
66940     +             %let oldname = &name;
66941     +        %end;
66942     +    %end;
66943     +    %let dsid = %sysfunc(close(&dsid));
66945     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
66946     +    data _null_;
66947     +       file _F1;
66948     +       put "length _UFormat $200;";
66949     +       put "drop _UFormat;";
66950     +       put "_UFormat='';";
66951     +    run;
66952     +    filename _F1;
66954     +   %em_register(key=EMSCOREVAR, type=DATA);
66955     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
66956     +   proc datasets lib=&em_lib nolist;
66957     +      delete &scorevarDs;
66958     +   run;
66959     +   quit;
66961     +   %let filrf=mydir;
66962     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
66963     +   %let did=%sysfunc(dopen(&filrf));
66965     +   %if &did %then %do;  %PUT  did= &did;
66966     +       %let memcount=%sysfunc(dnum(&did));
66967     +       %if &memcount > 0 %then %do;
66968     +           data &em_user_emscorevar;
66969     +              length Name $32 formula $70 file $200;
66970     +              keep NAME Formula file;
66971     +              formula  = '';
66972     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
66973     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
66974     +               output;
66975     +           %end;
66976     +           %do i=1 %to &memcount;
66977     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
66978     +               %let newvar = %scan(&name, 1, .);
66979     +               %if "&newvar" ne "_ALL_" %then %do;
66980     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
66981     +                   output;
66982     +               %end;
66983     +           %end;
66985     +           run;
66986     +       %end;
66987     +       %let did = %sysfunc(dclose(&did));
66988     +  %end;
66990     +   %doendu:
66991     +%mend buildOptScoreCode;
66994     +%macro buildScoreCode(flowCode, publishCode);
66997     +  filename x "&flowCode";
66999     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
67000     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
67001     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
67003     +  data temp;
67004     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
67005     +    by display_var _Split_value_;
67006     +     if upcase(_Split_value_) ne 'MISSING';
67007     +   run;
67009     +   data temp_missing;
67010     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
67011     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
67012     +     by display_var _Split_value_;
67013     +     if upcase(_Split_value_) eq 'MISSING';
67014     +     keep _variable_ display_var missgrp;
67015     +   run;
67017     +   proc sort data=temp_missing; by display_var missgrp; run;
67019     +   data temp_missing;
67020     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
67021     +     by display_var missgrp;
67022     +     if ^_a then delete;
67023     +     keep _variable_ display_var missgrp ;
67024     +   run;
67026     +   data temp;
67027     +     merge temp temp_missing;
67028     +     by display_var;
67029     +     if display_Var eq '' then delete;
67030     +    run;
67032     +    /* pull in wtev values */
67033     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
67034     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
67035     +    proc sort data=temp;  by display_var _group_; run;
67037     +   data temp;
67038     +      merge temp tempcoarse(keep=display_var _group_  role) ;
67039     +      by display_var _group_;
67040     +    run;
67042     +    data temp;
67043     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
67044     +      by display_var;
67046     +      if _group_ = . then delete;
67047     +      if _variable_ = '' then delete;
67048     +    run;
67050     +    proc sort data=temp out=class;
67051     +       by _variable_ _group_ LB;
67052     +    run;
67054     +    data _null_;
67055     +      file X;
67057     +      put "length _UFormat $200;";
67058     +      put "drop _UFormat;";
67059     +      put "_UFormat='';";
67060     +    run;
67062     +    data class_nosv;
67063     +      set class;
67064     +      if upcase(role)="INPUT";
67065     +    run;
67067     +    data _null_;
67068     +       file X MOD;
67069     +       length string $200 flag endflag 8;
67070     +       retain string flag endflag;
67071     +       set class_nosv end=eof;
67072     +       by _variable_ _group_;
67074     +       index = kindex(_variable_, "BIN_");
67075     +       if index gt 0 then do;
67077     +         if first._variable_ then do;
67078     +            put ' ';
67079     +            put "&EM_CODEBAR;";
67080     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
67081     +            put string;
67082     +            put "&EM_CODEBAR;";
67085     +            if origLabel ne "" then do;
67086     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
67087     +              put string;
67088     +              string = tranwrd(origLabel,"'","''");
67089     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
67090     +              put string;
67091     +            end;
67092     +            else do;
67093     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
67094     +             put string;
67095     +            end;
67097     +            put ' ';
67099     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
67100     +            put string;
67101     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
67102     +            put string;
67103     +            put "end;";
67104     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
67105     +            put string;
67106     +          end;
67107     +           if first._group_ then do;
67108     +              flag = 0;
67109     +              endflag = 1;
67110     +              if ^first._variable_ then do;
67111     +                put "else";
67112     +              end;
67113     +              if LB ne . then do;
67114     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
67115     +              end;
67116     +              else do;
67117     +                 flag = 1;
67118     +                 string = "if";
67119     +              end;
67121     +           end;
67122     +           if last._Group_ then do;
67123     +              if UB ne . then do;
67124     +                if flag ne 1 then do;
67125     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
67126     +                end;
67127     +                else do;
67128     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
67129     +                end;
67130     +              end;
67131     +              else do;
67132     +                 if flag=1 then do;
67133     +                   string = strip(DISPLAY_VAR) ;
67134     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
67135     +                   endflag = 0;
67136     +                   string="";
67137     +                 end;
67138     +                 else do;
67139     +                   string = strip(string)!!" then do;";
67140     +                 end;
67141     +              end;
67142     +              put string;
67144     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
67145     +              put string;
67146     +              if endflag eq 1 then do;
67147     +                put "end;";
67148     +              end;
67149     +           end;
67150     +           if last._variable_ then do;
67151     +             string = "end;";
67152     +             put string;
67153     +           end;
67154     +       end;
67155     +       else do;
67156     +           _split_value_ = tranwrd(_split_value_,"'","''");
67157     +           if first._group_ then do;
67158     +              flag=0;
67159     +              if ^first._variable_ then
67160     +                 put 'else';
67161     +              else do;
67162     +                 put ' ';
67163     +                 put "&EM_CODEBAR;";
67164     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
67165     +                 put string;
67166     +                 put "&EM_CODEBAR;";
67168     +                 if origLabel ne "" then do;
67169     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
67170     +                   put string;
67171     +                   string = tranwrd(origLabel,"'","''");
67172     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
67173     +                   put string;
67174     +                 end;
67175     +                 else do;
67176     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
67177     +                   put string;
67178     +                 end;
67180     +                 put ' ';
67182     +                if format ne '' then do;
67183     +                  if first._variable_ then do;
67184     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
67185     +                    put string;
67186     +                    string = '%dmnormip(_UFormat);';
67187     +                    put string;
67189     +                     string ="if MISSING(_UFORMAT) then do;";
67190     +                     put string;
67191     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
67192     +                     put string;
67193     +                     put "end;";
67195     +                     string="else if NOT MISSING(_UFORMAT) then do;";
67196     +                     put string;
67198     +                  end;
67199     +                end;
67200     +                else do;
67201     +                     if type = 'N' then do;
67202     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
67203     +                       put string;
67204     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
67205     +                       put string;
67206     +                       put "end;";
67208     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
67209     +                       put string;
67211     +                     end;
67212     +                     else if type='C' then do;
67213     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
67214     +                        put string;
67215     +                        string = '%dmnormip(_UFormat);';
67216     +                        put string;
67218     +                        string ="if MISSING(_UFORMAT) then do;";
67219     +                        put string;
67220     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
67221     +                        put string;
67222     +                        put "end;";
67224     +                        string="else if NOT MISSING(_UFORMAT) then do;";
67225     +                        put string;
67226     +                        string = '%dmnormip(_UFormat);';
67227     +                        put string;
67228     +                    end;
67229     +                end;
67230     +              end;
67231     +              if format ne '' OR type='C' then do;
67232     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
67233     +              end;
67234     +              else do;
67235     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
67236     +              end;
67237     +           end;
67238     +           else do;
67239     +              if flag ne 1 then do;
67240     +                if format ne '' OR type='C' then do;
67241     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
67242     +                end;
67243     +                else do;
67244     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
67245     +                end;
67246     +                length = klength(tempstring);
67248     +                if length < 195 then do;
67249     +                   string = tempstring;
67250     +                end;
67251     +                else do;
67253     +                   string = strip(string);
67254     +                   put string;
67255     +                   string = ") then do;";
67256     +                   put string;
67258     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
67259     +                   put string;
67260     +                   put "end;";
67262     +                 /*  string = strip(string)||",'...';"; */
67264     +                   put 'else';
67265     +                   if format ne '' OR type='C' then do;
67266     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
67267     +                   end;
67268     +                   else do;
67269     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
67270     +                   end;
67273     +                end;
67274     +              end;
67275     +           end;
67277     +           if last._group_ then do;
67278     +              string = strip(string);
67279     +              put string;
67280     +              string = ") then do;";
67281     +              put string;
67283     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
67284     +              put string;
67285     +              put "end;";
67286     +           end;
67288     +           if last._variable_ then do;
67289     +             put "else do;";
67291     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
67292     +             put string;
67294     +             put "end;";
67295     +             put "end;";
67296     +           end;
67297     +         *end;
67298     +       end;
67299     +    run;
67301     +    /* generate PublishCode the same as flowscorecode */
67302     +    filename Y "&publishCode";
67304     +    /* if publishCode already exists, wipe it out first */
67305     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
67306     +      %let rc = %sysfunc(fdelete(Y));
67307     +    %end;
67309     +    %appendfiles(Y, X);
67311     +    filename X;
67312     +    filename Y;
67314     +    %buildOptScoreCode;
67316     +    proc datasets library=work nolist;
67317     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
67318     +    run;
67319     +    quit;
67321     +%mend buildScoreCode;
67323     +%macro buildMetaCode(DeltaCodeFile=);
67325     +   /* set variable roles based on New Role column in the Results table */
67326     +   data _null_;
67327     +      file &DeltaCodeFile;
67328     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
67329     +      %if &dsid %then %do;
67330     +        %let obs = %sysfunc(fetch(&dsid));
67331     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
67332     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
67333     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
67335     +        %do %while(&obs=0);
67336     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
67337     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
67338     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
67340     +          /* retrieve grp and woe names from varmappings dataset */
67341     +          %let choice = _VARIABLE_ = "&inputname";
67342     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
67343     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
67344     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
67345     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
67346     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
67348     +          put "if name = '&inputname' then role='REJECTED';";
67349     +          %if "&role" ne "DEFAULT" %then %do;
67350     +            put "if name = '&grpname' then role='&role';";
67351     +          %end;
67352     +          %else %do;
67353     +            put "if name = '&grpname' then role='&oldrole';";
67354     +          %end;
67355     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
67357     +          %let obs = %sysfunc(fetch(&dsid));
67358     +        %end;
67359     +      %end;
67360     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
67361     +   run;
67363     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
67364     +   data _null_;
67365     +      file &DeltaCodeFile MOD;
67367     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
67368     +      %if &sdsid %then %do;
67369     +        %let sobs = %sysfunc(fetch(&sdsid));
67370     +        %do %while(&sobs=0);
67371     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
67372     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
67373     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
67374     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
67376     +          %let checkgrp = GRP_&checkname;
67377     +          %let lenname = %length(&checkgrp);
67378     +          %if %eval(&lenname-32) > 0 %then %do;
67379     +            %let checkgrp = %substr(&checkgrp, 1, 32);
67380     +          %end;
67382     +          %let choice = _VARIABLE_ ="&checkname";
67383     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
67385     +          /* if var not found in varmappings, delete variables; */
67386     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
67387     +          %if &vdsid eq 0 %then %do;
67388     +            put 'if name="&displayvar" then delete;';
67389     +            %let dispgrp = GRP_&displayvar;
67390     +            put 'if name="&dispgrp" then delete;';
67391     +          %end;
67393     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
67394     +          %let sobs = %sysfunc(fetch(&sdsid));
67395     +        %end;
67396     +      %end;
67397     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
67398     +   run;
67400     +%mend buildMetaCode;
67402     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
67404     +   proc sort data=&coarse out=sortedcoarse nodupkey;
67405     +     by display_var;
67406     +   run;
67407     +   proc sort data=&varmappings nodupkey;
67408     +     by _variable_;
67409     +   run;
67410     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
67411     +     proc sort data=&resultstable; by display_var; run;
67412     +   %end;
67414     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
67415     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
67416     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
67417     +        &resultstable (keep = display_var _new_role_ )
67418     +     %end;
67419     +     ;
67420     +     by display_var;
67421     +     length _role_ _new_role_ $10;
67422     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
67423     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
67424     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
67425     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
67426     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
67427     +           ;
67429     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
67430     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
67431     +                _role_ = "Rejected";
67432     +             else _role_ = "Input";
67433     +           %end;
67434     +           %else %do;
67435     +             _role_ = "Input";
67436     +           %end;
67437     +           if _new_role_ eq "" then _new_role_="Default";
67438     +      if ^_a then do;
67439     +        _gini_ = 0;
67440     +        _role_ = 'Rejected';
67441     +        if _new_role_ eq "" then _new_role_="Default";
67442     +      end;
67443     +   run;
67444     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
67445     +     by NAME;
67446     +   run;
67447     +   data outlabel;
67448     +     set outlabel;
67449     +     if _label_ = '' then _label_ = _variable_;
67450     +   run;
67451     +   data &resultstable;
67452     +     merge &resultstable(in=_a_) outlabel;
67453     +     by display_Var;
67454     +     if _a_ then output;
67455     +   run;
67456     +   proc datasets library=work nolist;
67457     +     delete sortedcoarse outlabel;
67458     +   run;
67459     +   quit;
67460     +   proc sort data=&resultstable nodupkey;
67461     +      by DESCENDING
67462     +        _gini_ display_Var;
67463     +   run;
67464     +   data &resultstable;
67465     +     set &resultstable;
67467     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
67468     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
67469     +     giniOrder = _N_;
67470     +     _gini_ = round(_GINI_, .001);
67471     +     drop _variable_;
67472     +   run;
67474     +   proc print data=&resultstable label;
67475     +   run;
67477     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
67478     +   data &coarse;
67479     +     set &coarse;
67480     +     length role $10;
67481     +     %let dsid = %sysfunc(open(&resultstable));
67482     +     %if &dsid %then %do;
67483     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
67484     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
67485     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
67487     +       %let obs = %sysfunc(fetch(&dsid));
67488     +       %do %while(&obs=0);
67489     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
67490     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
67491     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
67493     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
67494     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
67495     +            giniOrder = &order;
67496     +            role = "&role";
67497     +          end;
67499     +          %let obs = %sysfunc(fetch(&dsid));
67500     +       %end;
67501     +     %end;
67502     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
67503     +   run;
67506     +%mend EM_GENERATE_RESULTSTABLE;
67508     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
67510     +    /* instantiate the zchar macro to be used in adding bin definition */
67511     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
67512     +    %inc _temp;
67513     +    filename _temp;
67515     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
67516     +      by _variable_ binFlag _group_ LB;
67517     +    run;
67519     +    data tempExport;
67520     +      set sortedFine;
67521     +      by _variable_ binFlag _group_;
67522     +      length _split_value_ $200;
67524     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
67525     +      if binFlag = 0 then do;
67526     +        index = kindex(_variable_, "BIN_");
67527     +        if index gt 0 then do;
67528     +          _LEVEL_ = "INTERVAL";
67529     +        end;
67530     +        _Split_value_ = _split_value_;
67531     +        output;
67532     +      end;
67533     +      else do;
67534     +         * if last._group_ then do;
67535     +          index = kindex(_variable_, "BIN_");
67536     +          if index gt 0 then do;
67537     +            _LEVEL_ = "INTERVAL";
67538     +          end;
67539     +          _Split_value_ = %zchar(UB);
67540     +          output;
67541     +         * end;
67542     +      end;
67544     +      rename display_Var = _variable_;
67545     +      keep display_var _level_ _group_ _split_value_ binFlag;
67546     +    run;
67548     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
67549     +       data &EXPORTGROUPING;
67550     +         set tempexport;
67551     +       run;
67552     +    %end;
67553     +    %else %do;
67554     +       /* determine if EXPORTGROUPING already exists */
67555     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
67556     +         data &EXPORTGROUPING;
67557     +            set &EXPORTGROUPING tempexport;
67558     +         run;
67559     +       %end;
67560     +       %else %do;
67561     +         data &EXPORTGROUPING;
67562     +            set tempexport;
67563     +         run;
67564     +       %end;
67565     +    %end;
67567     +    proc datasets lib=work nolist;
67568     +      delete sortedFine tempexport;
67569     +    run;
67570     +    quit;
67572     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_SCORE.SOURCE.
67578     +%macro buildMetaCode(DeltaCodeFile=);
67580     +   /* set variable roles based on New Role column in the Results table */
67581     +   data _null_;
67582     +      file &DeltaCodeFile;
67583     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
67584     +      %if &dsid %then %do;
67585     +        %let obs = %sysfunc(fetch(&dsid));
67586     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
67587     +        %let rnum = %sysfunc(VARNUM(&dsid, _Role_));
67589     +        %do %while(&obs=0);
67590     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
67591     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
67593     +          /* retrieve grp and woe names from varmappings dataset */
67594     +          %let choice = _VARIABLE_ = "&inputname";
67595     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
67596     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
67597     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
67598     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
67599     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
67601     +          put "if name = '&inputname' then role='REJECTED';";
67602     +          put "if name = '&grpname' then role='&role';";
67603     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
67605     +          %let obs = %sysfunc(fetch(&dsid));
67606     +        %end;
67607     +      %end;
67608     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
67609     +   run;
67611     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
67612     +   data _null_;
67613     +      file &DeltaCodeFile MOD;
67615     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
67616     +      %if &sdsid %then %do;
67617     +        %let sobs = %sysfunc(fetch(&sdsid));
67618     +        %do %while(&sobs=0);
67619     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
67620     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
67621     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
67622     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
67624     +          %let checkgrp = GRP_&checkname;
67625     +          %let lenname = %length(&checkgrp);
67626     +          %if %eval(&lenname-32) > 0 %then %do;
67627     +            %let checkgrp = %substr(&checkgrp, 1, 32);
67628     +          %end;
67630     +          %let choice = _VARIABLE_ ="&checkname";
67631     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
67633     +          /* if var not found in varmappings, delete variables; */
67634     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
67635     +          %if &vdsid eq 0 %then %do;
67636     +            put 'if name="&displayvar" then delete;';
67637     +            %let dispgrp = GRP_&displayvar;
67638     +            put 'if name="&dispgrp" then delete;';
67639     +          %end;
67641     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
67642     +          %let sobs = %sysfunc(fetch(&sdsid));
67643     +        %end;
67644     +      %end;
67645     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
67646     +   run;
67648     +%mend buildMetaCode;
67650     +%macro score;
67652     +   /* generate results table */
67653     +   %EM_GETNAME(key=COARSE, type=DATA);
67654     +   %EM_GETNAME(key=RESULTSTABLE, type=DATA);
67655     +   %EM_GETNAME(key=VARMAPPINGS, type=DATA);
67656     +   %EM_GETNAME(key=SPLITVALS, type=DATA);
67658     +   %EM_GENERATE_RESULTSTABLE(&EM_USER_COARSE, &EM_USER_RESULTSTABLE, &EM_USER_VARMAPPINGS);
67660     +   /* Generate Publish score code; same as flowscorecode */
67661     +   %EM_GETNAME(key=BINMAPPINGS, type=DATA);
67662     +   %buildScoreCode(&EM_FILE_EMFLOWSCORECODE, &EM_FILE_EMPUBLISHSCORECODE);
67664     +   filename deltaref "&EM_FILE_CDELTA_TRAIN";
67665     +   %buildMetaCode(DeltaCodeFile=deltaref);
67666     +   filename deltaref;
67668     +   /* generate results tables */
67669     +   %EM_REPORT(key=RESULTSTABLE, viewtype=DATA, block=MODEL, description=OUTPUTTABLE, autodisplay=Y);
67670     +   %EM_REPORT(key=RESULTSTABLE, viewtype=BAR, X=DISPLAY_VAR, Freq=_GINI_, TIPTEXT=_ROLE_, block=MODEL, description=STATPLOT, autodisplay=Y);
67672     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_COARSE out=sortedcoarse nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: 85 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDCOARSE has 22 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 22 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_RESULTSTABLE (Keep = display_var _gini_ _role_ _new_role_ procLevel);
MPRINT(EM_GENERATE_RESULTSTABLE):   merge sortedcoarse(in=_a) EMWS8.BINNING_VARMAPPINGS(rename=(_Variable_ = DISPLAY_VAR)) ;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   length _role_ _new_role_ $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   label display_var = "Variable" _gini_ = "Gini Statistic" _role_ = "Calculated Role" _new_role_ = "New Role" LEVEL = "Level" ;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _gini_ < 20.0 then _role_ = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   else _role_ = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   if ^_a then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = 0;
MPRINT(EM_GENERATE_RESULTSTABLE):   _role_ = 'Rejected';
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable LEVEL is uninitialized.
NOTE: There were 22 observations read from the data set WORK.SORTEDCOARSE.
NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_VariableSet out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
MPRINT(EM_GENERATE_RESULTSTABLE):   by NAME;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 25 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.OUTLABEL has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   set outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _label_ = '' then _label_ = _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable _variable_ is uninitialized.
NOTE: There were 25 observations read from the data set WORK.OUTLABEL.
NOTE: The data set WORK.OUTLABEL has 25 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   merge EMWS8.BINNING_RESULTSTABLE(in=_a_) outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _a_ then output;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_Var by input data sets. This may cause unexpected results.
NOTE: There were 22 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: There were 25 observations read from the data set WORK.OUTLABEL.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 22 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_RESULTSTABLE):   delete sortedcoarse outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Deleting WORK.SORTEDCOARSE (memtype=DATA).
NOTE: Deleting WORK.OUTLABEL (memtype=DATA).
MPRINT(EM_GENERATE_RESULTSTABLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_RESULTSTABLE nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by DESCENDING _gini_ display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 22 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS8.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering" LEVEL = "Level";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = _N_;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = round(_GINI_, .001);
MPRINT(EM_GENERATE_RESULTSTABLE):   drop _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 22 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc print data=EMWS8.BINNING_RESULTSTABLE label;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: The PROCEDURE PRINT printed page 49.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   length role $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Mnt" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 1;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "RMntFrq" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 2;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "RMntFrq_Exmpl2" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 3;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Frq" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 4;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Income" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 5;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Age" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 6;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Age_Exmpl2" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 7;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NetPurchase" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 8;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "CatPurchase" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 9;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Dependents" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 10;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Recomendation" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 11;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Marital_Status" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 12;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Education" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 13;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Clothes" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 14;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "SmallAppliances" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 15;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Toys" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 16;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "HouseKeeping" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 17;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Kitchen" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 18;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Rcn" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 19;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MonthsAsCustomer" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 20;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Gender" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 21;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "HigherEducation" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 22;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 107 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(BUILDSCORECODE):   filename x "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(BUILDSCORECODE):   by display_var _split_Value_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 107 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(BUILDSCORECODE):   by display_var bin;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_COARSE out=tempcoarse;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set WORK.TEMPCOARSE has 107 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge EMWS8.BINNING_SPLITVALS EMWS8.BINNING_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 85 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge EMWS8.BINNING_SPLITVALS(rename=(_GROUP_=MISSGRP)) EMWS8.BINNING_BINMAPPINGS(rename=( BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp_missing;
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 22 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP_MISSING has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   if ^_a then delete;
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp ;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 22 observations read from the data set WORK.TEMP_MISSING.
NOTE: There were 107 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP_MISSING has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp temp_missing;
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if display_Var eq '' then delete;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 85 observations read from the data set WORK.TEMP.
NOTE: There were 22 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP has 85 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=tempmappings;
MPRINT(BUILDSCORECODE):   by _variable_;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAPPINGS has 22 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.Part_CMeta_TRAIN out=tempcmeta;
MPRINT(BUILDSCORECODE):   by NAME;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 25 observations read from the data set EMWS8.PART_CMETA_TRAIN.
NOTE: The data set WORK.TEMPCMETA has 25 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 85 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 85 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempcoarse(keep=display_var _group_ role) ;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 85 observations read from the data set WORK.TEMP.
NOTE: There were 107 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP has 107 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if _group_ = . then delete;
MPRINT(BUILDSCORECODE):   if _variable_ = '' then delete;
MPRINT(BUILDSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable DISPLAY_VAR by input data sets. This may cause unexpected results.
NOTE: There were 107 observations read from the data set WORK.TEMP.
NOTE: There were 22 observations read from the data set WORK.TEMPMAPPINGS.
NOTE: There were 25 observations read from the data set WORK.TEMPCMETA.
NOTE: The data set WORK.TEMP has 85 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp out=class;
MPRINT(BUILDSCORECODE):   by _variable_ _group_ LB;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 85 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 85 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X;
MPRINT(BUILDSCORECODE):   put "length _UFormat $200;";
MPRINT(BUILDSCORECODE):   put "drop _UFormat;";
MPRINT(BUILDSCORECODE):   put "_UFormat='';";
MPRINT(BUILDSCORECODE):   run;

NOTE: The file X is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=05 de Março de 2016 11H26m,
      Create Time=05 de Março de 2016 11H26m

NOTE: 3 records were written to the file X.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data class_nosv;
MPRINT(BUILDSCORECODE):   set class;
MPRINT(BUILDSCORECODE):   if upcase(role)="INPUT";
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 85 observations read from the data set WORK.CLASS.
NOTE: The data set WORK.CLASS_NOSV has 42 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X MOD;
MPRINT(BUILDSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDSCORECODE):   retain string flag endflag;
MPRINT(BUILDSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDSCORECODE):   by _variable_ _group_;
MPRINT(BUILDSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDSCORECODE):   if index gt 0 then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag = 0;
MPRINT(BUILDSCORECODE):   endflag = 1;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if LB ne . then do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   flag = 1;
MPRINT(BUILDSCORECODE):   string = "if";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._Group_ then do;
MPRINT(BUILDSCORECODE):   if UB ne . then do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag=1 then do;
MPRINT(BUILDSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDSCORECODE):   endflag = 0;
MPRINT(BUILDSCORECODE):   string="";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "end;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag=0;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   if format ne '' then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if type = 'N' then do;
MPRINT(BUILDSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else if type='C' then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   length = klength(tempstring);
MPRINT(BUILDSCORECODE):   if length < 195 then do;
MPRINT(BUILDSCORECODE):   string = tempstring;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put 'else';
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._group_ then do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else do;";
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   *end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      476:46    541:23    593:67    608:50    686:46    910:46    969:46    1040:46   1219:46   1329:46   1365:46   
NOTE: The file X is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=53,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=05 de Março de 2016 11H26m

NOTE: 292 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 42 observations read from the data set WORK.CLASS_NOSV.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   filename Y "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMPUBLISHSCORE.sas";
MPRINT(APPENDFILES):   data _null_;
MPRINT(APPENDFILES):   length c $256;
MPRINT(APPENDFILES):   fid1=fopen("Y",'A');
MPRINT(APPENDFILES):   fid2=fopen("X",'I');
MPRINT(APPENDFILES):   cval = finfo(fid2,'lrecl');
MPRINT(APPENDFILES):   put cval= fid1= fid2=;
MPRINT(APPENDFILES):   if (fid2 > 0) then do while(fread(fid2)=0);
MPRINT(APPENDFILES):   rc = fget(fid2,c,256);
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   rc = fput(fid1,strip(c));
MPRINT(APPENDFILES):   rc = fwrite(fid1);
MPRINT(APPENDFILES):   end;
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   put _msg_=;
MPRINT(APPENDFILES):   rc = fclose(fid1);
MPRINT(APPENDFILES):   rc = fclose(fid2);
MPRINT(APPENDFILES):   run;

cval=256 fid1=1 fid2=2
_msg_=WARNING: End of file.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(BUILDSCORECODE):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("BINCODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "BINCODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
67673     +%macro delDir(folder=);
67674     +   %let filrf=mydir;
67675     +   %let rc=%sysfunc(filename(filrf,&folder));
67676     +   %let did=%sysfunc(dopen(&filrf));
67678     +   %if &did %then %do;
67679     +       %let memcount=%sysfunc(dnum(&did));
67680     +       %if &memcount > 0 %then %do;
67681     +           %do i=1 %to &memcount;
67682     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
67683     +               data _null_;
67684     +                  fname="_temp&i";
67685     +                  rc=filename(fname,"&folder&em_dsep.&name");
67686     +                  if rc = 0 and fexist(fname) then
67687     +                     rc=fdelete(fname);
67688     +                  rc=filename(fname);
67689     +               run;
67690     +           %end;
67691     +       %end;
67692     +       %let rc=%sysfunc(dclose(&did));
67693     +   %end;
67694     +   %let rc = %sysfunc(fdelete(&filrf));
67695     +   %let rc=%sysfunc(filename(filrf));
67696     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(BUILDOPTSCORECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Age.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp2";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Age_Exmpl2.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp3";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_CatPurchase.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp4";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Frq.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp5";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Income.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp6";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Mnt.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp7";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_NetPurchase.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp8";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp9";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq_Exmpl2.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp10";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Recomendation.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp11";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Dependents.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp12";
MPRINT(DELDIR):   rc=filename(fname,"E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\_ALL_.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length rc $200;
MPRINT(BUILDOPTSCORECODE):   rc = dcreate('BINCODE', "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING");
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Age.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Age";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      244:46    322:23    382:67    400:50    490:46    760:46    830:46    912:46    1124:46   1242:46   1284:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Age.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Age';
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Age_Exmpl2.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Age_Exmpl2";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1516:46   1594:23   1654:67   1672:50   1762:46   2032:46   2102:46   2184:46   2396:46   2514:46   2556:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Age_Exmpl2.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Age_Exmpl2';
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_CatPurchase.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="CatPurchase";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2788:46   2866:23   2926:67   2944:50   3034:46   3304:46   3374:46   3456:46   3668:46   3786:46   3828:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_CatPurchase.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 27 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='CatPurchase';
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Frq.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Frq";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
The SAS System

MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4060:46   4138:23   4198:67   4216:50   4306:46   4576:46   4646:46   4728:46   4940:46   5058:46   5100:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Frq.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 27 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Frq';
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Income.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Income";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5332:46   5410:23   5470:67   5488:50   5578:46   5848:46   5918:46   6000:46   6212:46   6330:46   6372:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Income.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 27 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Income';
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Mnt.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Mnt";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      6604:46   6682:23   6742:67   6760:50   6850:46   7120:46   7190:46   7272:46   7484:46   7602:46   7644:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Mnt.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 27 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Mnt';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_NetPurchase.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="NetPurchase";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7876:46   7954:23   8014:67   8032:50   8122:46   8392:46   8462:46   8544:46   8756:46   8874:46   8916:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_NetPurchase.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 27 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='NetPurchase';
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="RMntFrq";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      9148:46    9226:23    9286:67    9304:50    9394:46    9664:46    9734:46    9816:46    10028:46   10146:46   10188:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='RMntFrq';
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq_Exmpl2.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="RMntFrq_Exmpl2";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      10420:46   10498:23   10558:67   10576:50   10666:46   10936:46   11006:46   11088:46   11300:46   11418:46   11460:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq_Exmpl2.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='RMntFrq_Exmpl2';
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Recomendation.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Recomendation";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      11692:46   11770:23   11830:67   11848:50   11938:46   12208:46   12278:46   12360:46   12572:46   12690:46   12732:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Recomendation.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 27 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Recomendation';
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Dependents.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Dependents";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12964:46   13042:23   13102:67   13120:50   13210:46   13480:46   13550:46   13632:46   13844:46   13962:46   14004:46   
NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\GRP_Dependents.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 2 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Dependents';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   put "length _UFormat $200;";
MPRINT(BUILDOPTSCORECODE):   put "drop _UFormat;";
MPRINT(BUILDOPTSCORECODE):   put "_UFormat='';";
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The file _F1 is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINCODE\_ALL_.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=10 de Março de 2016 06H10m

NOTE: 3 records were written to the file _F1.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "BINNING_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   proc datasets lib=EMWS8 nolist;
MPRINT(BUILDOPTSCORECODE):   delete BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Deleting EMWS8.BINNING_EMSCOREVAR (memtype=DATA).
MPRINT(BUILDOPTSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.45 seconds
      cpu time            0.07 seconds
      

did= 1
MPRINT(BUILDOPTSCORECODE):   data EMWS8.BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   length Name $32 formula $70 file $200;
MPRINT(BUILDOPTSCORECODE):   keep NAME Formula file;
MPRINT(BUILDOPTSCORECODE):   formula = '';
MPRINT(BUILDOPTSCORECODE):   name='';
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Age";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Age.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Age_Exmpl2";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Age_Exmpl2.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_CatPurchase";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_CatPurchase.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Frq";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Frq.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Income";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Income.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Mnt";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Mnt.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_NetPurchase";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_NetPurchase.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_RMntFrq";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_RMntFrq.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_RMntFrq_Exmpl2";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_RMntFrq_Exmpl2.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Recomendation";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Recomendation.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Dependents";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Dependents.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The data set EMWS8.BINNING_EMSCOREVAR has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   proc datasets library=work nolist;
MPRINT(BUILDSCORECODE):   delete class class_nosv temp temp_missing tempmappings tempcmeta;
MPRINT(BUILDSCORECODE):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.CLASS_NOSV (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPINGS (memtype=DATA).
NOTE: Deleting WORK.TEMPCMETA (memtype=DATA).
MPRINT(BUILDSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas";
MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file deltaref;
MPRINT(BUILDMETACODE):   put "if name = 'Mnt' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Mnt' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Mnt' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'RMntFrq' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RMntFrq' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RMntFrq' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'RMntFrq_Exmpl2' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RMntFrq_Exmpl2' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RMntFrq_Exmpl2' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Frq' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Frq' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Frq' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Income' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Income' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Income' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Age' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Age' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Age' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Age_Exmpl2' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Age_Exmpl2' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Age_Exmpl2' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NetPurchase' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NetPurchase' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NetPurchase' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'CatPurchase' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_CatPurchase' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_CatPurchase' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Dependents' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Dependents' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Dependents' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Recomendation' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Recomendation' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Recomendation' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Marital_Status' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Marital_Status' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Marital_Status' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Education' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Education' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Education' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Clothes' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Clothes' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Clothes' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'SmallAppliances' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_SmallAppliances' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_SmallAppliances' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Toys' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Toys' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Toys' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'HouseKeeping' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_HouseKeeping' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_HouseKeeping' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Kitchen' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Kitchen' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Kitchen' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Rcn' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Rcn' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Rcn' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MonthsAsCustomer' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MonthsAsCustomer' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MonthsAsCustomer' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Gender' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Gender' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Gender' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'HigherEducation' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_HigherEducation' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_HigherEducation' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=03 de Março de 2016 08H23m

NOTE: 66 records were written to the file DELTAREF.
      The minimum record length was 37.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.04 seconds
      

MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file deltaref MOD;
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=3116,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=03 de Março de 2016 08H23m

NOTE: 0 records were written to the file DELTAREF.
NOTE: DATA statement used (Total process time):
      real time           1.29 seconds
      cpu time            0.32 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref;
NOTE: Fileref DELTAREF has been deassigned.
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "OUTPUTTABLE";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.28481697025001;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "STATPLOT";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_GINI_";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_ROLE_";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.62398350919782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67697      
67698      *------------------------------------------------------------*;
67699      * End SCORE: BINNING;
67700      *------------------------------------------------------------*;

67701      filename emflow "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67702      *------------------------------------------------------------*;
67703      * BINNING: Scoring DATA data;
67704      *------------------------------------------------------------*;
67705      data EMWS8.BINNING_TRAIN
67706      / view=EMWS8.BINNING_TRAIN
67707      ;
MPRINT(EM_DIAGRAM):   data EMWS8.BINNING_TRAIN / view=EMWS8.BINNING_TRAIN ;
67708      set EMWS8.Part_TRAIN
67709      ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_TRAIN ;
67710      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas.
67711     +length _UFormat $200;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
67712     +drop _UFormat;
MPRINT(EM_DIAGRAM):   drop _UFormat;
67713     +_UFormat='';
MPRINT(EM_DIAGRAM):   _UFormat='';
67714     +
67715     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67716     +* Variable: Age;
MPRINT(EM_DIAGRAM):   * Variable: Age;
67717     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67718     +LABEL GRP_Age = "Grouped: Age";
MPRINT(EM_DIAGRAM):   LABEL GRP_Age = "Grouped: Age";
67719     +
67720     +if MISSING(Age) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Age) then do;
67721     +GRP_Age = 1;
MPRINT(EM_DIAGRAM):   GRP_Age = 1;
67722     +end;
MPRINT(EM_DIAGRAM):   end;
67723     +else if NOT MISSING(Age) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Age) then do;
67724     +if Age < 36 then do;
MPRINT(EM_DIAGRAM):   if Age < 36 then do;
67725     +GRP_Age = 2;
MPRINT(EM_DIAGRAM):   GRP_Age = 2;
67726     +end;
MPRINT(EM_DIAGRAM):   end;
67727     +else
67728     +if 36 <= Age AND Age < 50 then do;
MPRINT(EM_DIAGRAM):   else if 36 <= Age AND Age < 50 then do;
67729     +GRP_Age = 3;
MPRINT(EM_DIAGRAM):   GRP_Age = 3;
67730     +end;
MPRINT(EM_DIAGRAM):   end;
67731     +else
67732     +if 50 <= Age AND Age < 64 then do;
MPRINT(EM_DIAGRAM):   else if 50 <= Age AND Age < 64 then do;
67733     +GRP_Age = 4;
MPRINT(EM_DIAGRAM):   GRP_Age = 4;
67734     +end;
MPRINT(EM_DIAGRAM):   end;
67735     +else
67736     +if 64 <= Age then do;
MPRINT(EM_DIAGRAM):   else if 64 <= Age then do;
67737     +GRP_Age = 5;
MPRINT(EM_DIAGRAM):   GRP_Age = 5;
67738     +end;
MPRINT(EM_DIAGRAM):   end;
67739     +end;
MPRINT(EM_DIAGRAM):   end;
67740     +
67741     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67742     +* Variable: Age_Exmpl2;
MPRINT(EM_DIAGRAM):   * Variable: Age_Exmpl2;
67743     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67744     +LABEL GRP_Age_Exmpl2 = "Grouped: Age_Exmpl2";
MPRINT(EM_DIAGRAM):   LABEL GRP_Age_Exmpl2 = "Grouped: Age_Exmpl2";
67745     +
67746     +if MISSING(Age_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Age_Exmpl2) then do;
67747     +GRP_Age_Exmpl2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 1;
67748     +end;
MPRINT(EM_DIAGRAM):   end;
67749     +else if NOT MISSING(Age_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Age_Exmpl2) then do;
67750     +if Age_Exmpl2 < 36 then do;
MPRINT(EM_DIAGRAM):   if Age_Exmpl2 < 36 then do;
67751     +GRP_Age_Exmpl2 = 2;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 2;
67752     +end;
MPRINT(EM_DIAGRAM):   end;
67753     +else
67754     +if 36 <= Age_Exmpl2 AND Age_Exmpl2 < 50 then do;
MPRINT(EM_DIAGRAM):   else if 36 <= Age_Exmpl2 AND Age_Exmpl2 < 50 then do;
67755     +GRP_Age_Exmpl2 = 3;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 3;
67756     +end;
MPRINT(EM_DIAGRAM):   end;
67757     +else
67758     +if 50 <= Age_Exmpl2 AND Age_Exmpl2 < 64 then do;
MPRINT(EM_DIAGRAM):   else if 50 <= Age_Exmpl2 AND Age_Exmpl2 < 64 then do;
67759     +GRP_Age_Exmpl2 = 4;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 4;
67760     +end;
MPRINT(EM_DIAGRAM):   end;
67761     +else
67762     +if 64 <= Age_Exmpl2 then do;
MPRINT(EM_DIAGRAM):   else if 64 <= Age_Exmpl2 then do;
67763     +GRP_Age_Exmpl2 = 5;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 5;
67764     +end;
MPRINT(EM_DIAGRAM):   end;
67765     +end;
MPRINT(EM_DIAGRAM):   end;
67766     +
67767     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67768     +* Variable: CatPurchase;
MPRINT(EM_DIAGRAM):   * Variable: CatPurchase;
67769     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67770     +LABEL GRP_CatPurchase =
67771     +'Grouped: CatPurchase';
MPRINT(EM_DIAGRAM):   LABEL GRP_CatPurchase = 'Grouped: CatPurchase';
67772     +
67773     +if MISSING(CatPurchase) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CatPurchase) then do;
67774     +GRP_CatPurchase = 1;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 1;
67775     +end;
MPRINT(EM_DIAGRAM):   end;
67776     +else if NOT MISSING(CatPurchase) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(CatPurchase) then do;
67777     +if CatPurchase < 43 then do;
MPRINT(EM_DIAGRAM):   if CatPurchase < 43 then do;
67778     +GRP_CatPurchase = 2;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 2;
67779     +end;
MPRINT(EM_DIAGRAM):   end;
67780     +else
67781     +if 43 <= CatPurchase AND CatPurchase < 55 then do;
MPRINT(EM_DIAGRAM):   else if 43 <= CatPurchase AND CatPurchase < 55 then do;
67782     +GRP_CatPurchase = 3;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 3;
67783     +end;
MPRINT(EM_DIAGRAM):   end;
67784     +else
67785     +if 55 <= CatPurchase AND CatPurchase < 73 then do;
MPRINT(EM_DIAGRAM):   else if 55 <= CatPurchase AND CatPurchase < 73 then do;
67786     +GRP_CatPurchase = 4;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 4;
67787     +end;
MPRINT(EM_DIAGRAM):   end;
67788     +else
67789     +if 73 <= CatPurchase then do;
MPRINT(EM_DIAGRAM):   else if 73 <= CatPurchase then do;
67790     +GRP_CatPurchase = 5;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 5;
67791     +end;
MPRINT(EM_DIAGRAM):   end;
67792     +end;
MPRINT(EM_DIAGRAM):   end;
67793     +
67794     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67795     +* Variable: Frq;
MPRINT(EM_DIAGRAM):   * Variable: Frq;
67796     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67797     +LABEL GRP_Frq =
67798     +'Grouped: Frq';
MPRINT(EM_DIAGRAM):   LABEL GRP_Frq = 'Grouped: Frq';
67799     +
67800     +if MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Frq) then do;
67801     +GRP_Frq = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq = 1;
67802     +end;
MPRINT(EM_DIAGRAM):   end;
67803     +else if NOT MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Frq) then do;
67804     +if Frq < 11 then do;
MPRINT(EM_DIAGRAM):   if Frq < 11 then do;
67805     +GRP_Frq = 2;
MPRINT(EM_DIAGRAM):   GRP_Frq = 2;
67806     +end;
MPRINT(EM_DIAGRAM):   end;
67807     +else
67808     +if 11 <= Frq AND Frq < 18 then do;
MPRINT(EM_DIAGRAM):   else if 11 <= Frq AND Frq < 18 then do;
67809     +GRP_Frq = 3;
MPRINT(EM_DIAGRAM):   GRP_Frq = 3;
67810     +end;
MPRINT(EM_DIAGRAM):   end;
67811     +else
67812     +if 18 <= Frq AND Frq < 28 then do;
MPRINT(EM_DIAGRAM):   else if 18 <= Frq AND Frq < 28 then do;
67813     +GRP_Frq = 4;
MPRINT(EM_DIAGRAM):   GRP_Frq = 4;
67814     +end;
MPRINT(EM_DIAGRAM):   end;
67815     +else
67816     +if 28 <= Frq then do;
MPRINT(EM_DIAGRAM):   else if 28 <= Frq then do;
67817     +GRP_Frq = 5;
MPRINT(EM_DIAGRAM):   GRP_Frq = 5;
67818     +end;
MPRINT(EM_DIAGRAM):   end;
67819     +end;
MPRINT(EM_DIAGRAM):   end;
67820     +
67821     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67822     +* Variable: Income;
MPRINT(EM_DIAGRAM):   * Variable: Income;
67823     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67824     +LABEL GRP_Income =
67825     +'Grouped: Income';
MPRINT(EM_DIAGRAM):   LABEL GRP_Income = 'Grouped: Income';
67826     +
67827     +if MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Income) then do;
67828     +GRP_Income = 1;
MPRINT(EM_DIAGRAM):   GRP_Income = 1;
67829     +end;
MPRINT(EM_DIAGRAM):   end;
67830     +else if NOT MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Income) then do;
67831     +if Income < 51921.45 then do;
MPRINT(EM_DIAGRAM):   if Income < 51921.45 then do;
67832     +GRP_Income = 2;
MPRINT(EM_DIAGRAM):   GRP_Income = 2;
67833     +end;
MPRINT(EM_DIAGRAM):   end;
67834     +else
67835     +if 51921.45 <= Income AND Income < 74868.15 then do;
MPRINT(EM_DIAGRAM):   else if 51921.45 <= Income AND Income < 74868.15 then do;
67836     +GRP_Income = 3;
MPRINT(EM_DIAGRAM):   GRP_Income = 3;
67837     +end;
MPRINT(EM_DIAGRAM):   end;
67838     +else
67839     +if 74868.15 <= Income AND Income < 97525.05 then do;
MPRINT(EM_DIAGRAM):   else if 74868.15 <= Income AND Income < 97525.05 then do;
67840     +GRP_Income = 4;
MPRINT(EM_DIAGRAM):   GRP_Income = 4;
67841     +end;
MPRINT(EM_DIAGRAM):   end;
67842     +else
67843     +if 97525.05 <= Income then do;
MPRINT(EM_DIAGRAM):   else if 97525.05 <= Income then do;
67844     +GRP_Income = 5;
MPRINT(EM_DIAGRAM):   GRP_Income = 5;
67845     +end;
MPRINT(EM_DIAGRAM):   end;
67846     +end;
MPRINT(EM_DIAGRAM):   end;
67847     +
67848     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67849     +* Variable: Mnt;
MPRINT(EM_DIAGRAM):   * Variable: Mnt;
67850     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67851     +LABEL GRP_Mnt =
67852     +'Grouped: Mnt';
MPRINT(EM_DIAGRAM):   LABEL GRP_Mnt = 'Grouped: Mnt';
67853     +
67854     +if MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Mnt) then do;
67855     +GRP_Mnt = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 1;
67856     +end;
MPRINT(EM_DIAGRAM):   end;
67857     +else if NOT MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Mnt) then do;
67858     +if Mnt < 67.6 then do;
MPRINT(EM_DIAGRAM):   if Mnt < 67.6 then do;
67859     +GRP_Mnt = 2;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 2;
67860     +end;
MPRINT(EM_DIAGRAM):   end;
67861     +else
67862     +if 67.6 <= Mnt AND Mnt < 407.68 then do;
MPRINT(EM_DIAGRAM):   else if 67.6 <= Mnt AND Mnt < 407.68 then do;
67863     +GRP_Mnt = 3;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 3;
67864     +end;
MPRINT(EM_DIAGRAM):   end;
67865     +else
67866     +if 407.68 <= Mnt AND Mnt < 1127.36 then do;
MPRINT(EM_DIAGRAM):   else if 407.68 <= Mnt AND Mnt < 1127.36 then do;
67867     +GRP_Mnt = 4;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 4;
67868     +end;
MPRINT(EM_DIAGRAM):   end;
67869     +else
67870     +if 1127.36 <= Mnt then do;
MPRINT(EM_DIAGRAM):   else if 1127.36 <= Mnt then do;
67871     +GRP_Mnt = 5;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 5;
67872     +end;
MPRINT(EM_DIAGRAM):   end;
67873     +end;
MPRINT(EM_DIAGRAM):   end;
67874     +
67875     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67876     +* Variable: NetPurchase;
MPRINT(EM_DIAGRAM):   * Variable: NetPurchase;
67877     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67878     +LABEL GRP_NetPurchase =
67879     +'Grouped: NetPurchase';
MPRINT(EM_DIAGRAM):   LABEL GRP_NetPurchase = 'Grouped: NetPurchase';
67880     +
67881     +if MISSING(NetPurchase) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NetPurchase) then do;
67882     +GRP_NetPurchase = 1;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 1;
67883     +end;
MPRINT(EM_DIAGRAM):   end;
67884     +else if NOT MISSING(NetPurchase) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NetPurchase) then do;
67885     +if NetPurchase < 27 then do;
MPRINT(EM_DIAGRAM):   if NetPurchase < 27 then do;
67886     +GRP_NetPurchase = 2;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 2;
67887     +end;
MPRINT(EM_DIAGRAM):   end;
67888     +else
67889     +if 27 <= NetPurchase AND NetPurchase < 45 then do;
MPRINT(EM_DIAGRAM):   else if 27 <= NetPurchase AND NetPurchase < 45 then do;
67890     +GRP_NetPurchase = 3;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 3;
67891     +end;
MPRINT(EM_DIAGRAM):   end;
67892     +else
67893     +if 45 <= NetPurchase AND NetPurchase < 57 then do;
MPRINT(EM_DIAGRAM):   else if 45 <= NetPurchase AND NetPurchase < 57 then do;
67894     +GRP_NetPurchase = 4;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 4;
67895     +end;
MPRINT(EM_DIAGRAM):   end;
67896     +else
67897     +if 57 <= NetPurchase then do;
MPRINT(EM_DIAGRAM):   else if 57 <= NetPurchase then do;
67898     +GRP_NetPurchase = 5;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 5;
67899     +end;
MPRINT(EM_DIAGRAM):   end;
67900     +end;
MPRINT(EM_DIAGRAM):   end;
67901     +
67902     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67903     +* Variable: RMntFrq;
MPRINT(EM_DIAGRAM):   * Variable: RMntFrq;
67904     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67905     +LABEL GRP_RMntFrq = "Grouped: RMntFrq";
MPRINT(EM_DIAGRAM):   LABEL GRP_RMntFrq = "Grouped: RMntFrq";
67906     +
67907     +if MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RMntFrq) then do;
67908     +GRP_RMntFrq = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 1;
67909     +end;
MPRINT(EM_DIAGRAM):   end;
67910     +else if NOT MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RMntFrq) then do;
67911     +if RMntFrq < 7 then do;
MPRINT(EM_DIAGRAM):   if RMntFrq < 7 then do;
67912     +GRP_RMntFrq = 2;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 2;
67913     +end;
MPRINT(EM_DIAGRAM):   end;
67914     +else
67915     +if 7 <= RMntFrq AND RMntFrq < 23.84 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= RMntFrq AND RMntFrq < 23.84 then do;
67916     +GRP_RMntFrq = 3;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 3;
67917     +end;
MPRINT(EM_DIAGRAM):   end;
67918     +else
67919     +if 23.84 <= RMntFrq AND RMntFrq < 40.38 then do;
MPRINT(EM_DIAGRAM):   else if 23.84 <= RMntFrq AND RMntFrq < 40.38 then do;
67920     +GRP_RMntFrq = 4;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 4;
67921     +end;
MPRINT(EM_DIAGRAM):   end;
67922     +else
67923     +if 40.38 <= RMntFrq then do;
MPRINT(EM_DIAGRAM):   else if 40.38 <= RMntFrq then do;
67924     +GRP_RMntFrq = 5;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 5;
67925     +end;
MPRINT(EM_DIAGRAM):   end;
67926     +end;
MPRINT(EM_DIAGRAM):   end;
67927     +
67928     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67929     +* Variable: RMntFrq_Exmpl2;
MPRINT(EM_DIAGRAM):   * Variable: RMntFrq_Exmpl2;
67930     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67931     +LABEL GRP_RMntFrq_Exmpl2 = "Grouped: RMntFrq_Exmpl2";
MPRINT(EM_DIAGRAM):   LABEL GRP_RMntFrq_Exmpl2 = "Grouped: RMntFrq_Exmpl2";
67932     +
67933     +if MISSING(RMntFrq_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RMntFrq_Exmpl2) then do;
67934     +GRP_RMntFrq_Exmpl2 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 1;
67935     +end;
MPRINT(EM_DIAGRAM):   end;
67936     +else if NOT MISSING(RMntFrq_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RMntFrq_Exmpl2) then do;
67937     +if RMntFrq_Exmpl2 < 7 then do;
MPRINT(EM_DIAGRAM):   if RMntFrq_Exmpl2 < 7 then do;
67938     +GRP_RMntFrq_Exmpl2 = 2;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 2;
67939     +end;
MPRINT(EM_DIAGRAM):   end;
67940     +else
67941     +if 7 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 23.84 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 23.84 then do;
67942     +GRP_RMntFrq_Exmpl2 = 3;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 3;
67943     +end;
MPRINT(EM_DIAGRAM):   end;
67944     +else
67945     +if 23.84 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 40.38 then do;
MPRINT(EM_DIAGRAM):   else if 23.84 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 40.38 then do;
67946     +GRP_RMntFrq_Exmpl2 = 4;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 4;
67947     +end;
MPRINT(EM_DIAGRAM):   end;
67948     +else
67949     +if 40.38 <= RMntFrq_Exmpl2 then do;
MPRINT(EM_DIAGRAM):   else if 40.38 <= RMntFrq_Exmpl2 then do;
67950     +GRP_RMntFrq_Exmpl2 = 5;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 5;
67951     +end;
MPRINT(EM_DIAGRAM):   end;
67952     +end;
MPRINT(EM_DIAGRAM):   end;
67953     +
67954     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67955     +* Variable: Recomendation;
MPRINT(EM_DIAGRAM):   * Variable: Recomendation;
67956     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67957     +LABEL GRP_Recomendation =
67958     +'Grouped: Recomendation';
MPRINT(EM_DIAGRAM):   LABEL GRP_Recomendation = 'Grouped: Recomendation';
67959     +
67960     +if MISSING(Recomendation) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Recomendation) then do;
67961     +GRP_Recomendation = 1;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 1;
67962     +end;
MPRINT(EM_DIAGRAM):   end;
67963     +else if NOT MISSING(Recomendation) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Recomendation) then do;
67964     +if Recomendation < 3 then do;
MPRINT(EM_DIAGRAM):   if Recomendation < 3 then do;
67965     +GRP_Recomendation = 2;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 2;
67966     +end;
MPRINT(EM_DIAGRAM):   end;
67967     +else
67968     +if 3 <= Recomendation AND Recomendation < 4 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= Recomendation AND Recomendation < 4 then do;
67969     +GRP_Recomendation = 3;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 3;
67970     +end;
MPRINT(EM_DIAGRAM):   end;
67971     +else
67972     +if 4 <= Recomendation AND Recomendation < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= Recomendation AND Recomendation < 5 then do;
67973     +GRP_Recomendation = 4;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 4;
67974     +end;
MPRINT(EM_DIAGRAM):   end;
67975     +else
67976     +if 5 <= Recomendation then do;
MPRINT(EM_DIAGRAM):   else if 5 <= Recomendation then do;
67977     +GRP_Recomendation = 5;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 5;
67978     +end;
MPRINT(EM_DIAGRAM):   end;
67979     +end;
MPRINT(EM_DIAGRAM):   end;
67980     +
67981     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67982     +* Variable: Dependents;
MPRINT(EM_DIAGRAM):   * Variable: Dependents;
67983     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67984     +LABEL GRP_Dependents =
67985     +'Grouped: Dependents';
MPRINT(EM_DIAGRAM):   LABEL GRP_Dependents = 'Grouped: Dependents';
67986     +
67987     +_UFormat = put(Dependents,BEST.);
MPRINT(EM_DIAGRAM):   _UFormat = put(Dependents,BEST.);
67988     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
67989     +if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
67990     +GRP_Dependents = 1;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 1;
67991     +end;
MPRINT(EM_DIAGRAM):   end;
67992     +else if NOT MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
67993     +if (_UFORMAT eq '1'
67994     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq '1' ) then do;
67995     +GRP_Dependents = 2;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 2;
67996     +end;
MPRINT(EM_DIAGRAM):   end;
67997     +else
67998     +if (_UFORMAT eq '0'
67999     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq '0' ) then do;
68000     +GRP_Dependents = 3;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 3;
68001     +end;
MPRINT(EM_DIAGRAM):   end;
68002     +else do;
MPRINT(EM_DIAGRAM):   else do;
68003     +GRP_Dependents = 1;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 1;
68004     +end;
MPRINT(EM_DIAGRAM):   end;
68005     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
68006      run;

NOTE: DATA STEP view saved on file EMWS8.BINNING_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
68007      quit;
68008      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
68009      filename emflow "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68010      *------------------------------------------------------------*;
68011      * BINNING: Scoring VALIDATE data;
68012      *------------------------------------------------------------*;
68013      data EMWS8.BINNING_VALIDATE
68014      / view=EMWS8.BINNING_VALIDATE
68015      ;
MPRINT(EM_DIAGRAM):   data EMWS8.BINNING_VALIDATE / view=EMWS8.BINNING_VALIDATE ;
68016      set EMWS8.Part_VALIDATE
68017      ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_VALIDATE ;
68018      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas.
68019     +length _UFormat $200;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
68020     +drop _UFormat;
MPRINT(EM_DIAGRAM):   drop _UFormat;
68021     +_UFormat='';
MPRINT(EM_DIAGRAM):   _UFormat='';
68022     +
68023     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68024     +* Variable: Age;
MPRINT(EM_DIAGRAM):   * Variable: Age;
68025     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68026     +LABEL GRP_Age = "Grouped: Age";
MPRINT(EM_DIAGRAM):   LABEL GRP_Age = "Grouped: Age";
68027     +
68028     +if MISSING(Age) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Age) then do;
68029     +GRP_Age = 1;
MPRINT(EM_DIAGRAM):   GRP_Age = 1;
68030     +end;
MPRINT(EM_DIAGRAM):   end;
68031     +else if NOT MISSING(Age) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Age) then do;
68032     +if Age < 36 then do;
MPRINT(EM_DIAGRAM):   if Age < 36 then do;
68033     +GRP_Age = 2;
MPRINT(EM_DIAGRAM):   GRP_Age = 2;
68034     +end;
MPRINT(EM_DIAGRAM):   end;
68035     +else
68036     +if 36 <= Age AND Age < 50 then do;
MPRINT(EM_DIAGRAM):   else if 36 <= Age AND Age < 50 then do;
68037     +GRP_Age = 3;
MPRINT(EM_DIAGRAM):   GRP_Age = 3;
68038     +end;
MPRINT(EM_DIAGRAM):   end;
68039     +else
68040     +if 50 <= Age AND Age < 64 then do;
MPRINT(EM_DIAGRAM):   else if 50 <= Age AND Age < 64 then do;
68041     +GRP_Age = 4;
MPRINT(EM_DIAGRAM):   GRP_Age = 4;
68042     +end;
MPRINT(EM_DIAGRAM):   end;
68043     +else
68044     +if 64 <= Age then do;
MPRINT(EM_DIAGRAM):   else if 64 <= Age then do;
68045     +GRP_Age = 5;
MPRINT(EM_DIAGRAM):   GRP_Age = 5;
68046     +end;
MPRINT(EM_DIAGRAM):   end;
68047     +end;
MPRINT(EM_DIAGRAM):   end;
68048     +
68049     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68050     +* Variable: Age_Exmpl2;
MPRINT(EM_DIAGRAM):   * Variable: Age_Exmpl2;
68051     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68052     +LABEL GRP_Age_Exmpl2 = "Grouped: Age_Exmpl2";
MPRINT(EM_DIAGRAM):   LABEL GRP_Age_Exmpl2 = "Grouped: Age_Exmpl2";
68053     +
68054     +if MISSING(Age_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Age_Exmpl2) then do;
68055     +GRP_Age_Exmpl2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 1;
68056     +end;
MPRINT(EM_DIAGRAM):   end;
68057     +else if NOT MISSING(Age_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Age_Exmpl2) then do;
68058     +if Age_Exmpl2 < 36 then do;
MPRINT(EM_DIAGRAM):   if Age_Exmpl2 < 36 then do;
68059     +GRP_Age_Exmpl2 = 2;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 2;
68060     +end;
MPRINT(EM_DIAGRAM):   end;
68061     +else
68062     +if 36 <= Age_Exmpl2 AND Age_Exmpl2 < 50 then do;
MPRINT(EM_DIAGRAM):   else if 36 <= Age_Exmpl2 AND Age_Exmpl2 < 50 then do;
68063     +GRP_Age_Exmpl2 = 3;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 3;
68064     +end;
MPRINT(EM_DIAGRAM):   end;
68065     +else
68066     +if 50 <= Age_Exmpl2 AND Age_Exmpl2 < 64 then do;
MPRINT(EM_DIAGRAM):   else if 50 <= Age_Exmpl2 AND Age_Exmpl2 < 64 then do;
68067     +GRP_Age_Exmpl2 = 4;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 4;
68068     +end;
MPRINT(EM_DIAGRAM):   end;
68069     +else
68070     +if 64 <= Age_Exmpl2 then do;
MPRINT(EM_DIAGRAM):   else if 64 <= Age_Exmpl2 then do;
68071     +GRP_Age_Exmpl2 = 5;
MPRINT(EM_DIAGRAM):   GRP_Age_Exmpl2 = 5;
68072     +end;
MPRINT(EM_DIAGRAM):   end;
68073     +end;
MPRINT(EM_DIAGRAM):   end;
68074     +
68075     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68076     +* Variable: CatPurchase;
MPRINT(EM_DIAGRAM):   * Variable: CatPurchase;
68077     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68078     +LABEL GRP_CatPurchase =
68079     +'Grouped: CatPurchase';
MPRINT(EM_DIAGRAM):   LABEL GRP_CatPurchase = 'Grouped: CatPurchase';
68080     +
68081     +if MISSING(CatPurchase) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CatPurchase) then do;
68082     +GRP_CatPurchase = 1;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 1;
68083     +end;
MPRINT(EM_DIAGRAM):   end;
68084     +else if NOT MISSING(CatPurchase) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(CatPurchase) then do;
68085     +if CatPurchase < 43 then do;
MPRINT(EM_DIAGRAM):   if CatPurchase < 43 then do;
68086     +GRP_CatPurchase = 2;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 2;
68087     +end;
MPRINT(EM_DIAGRAM):   end;
68088     +else
68089     +if 43 <= CatPurchase AND CatPurchase < 55 then do;
MPRINT(EM_DIAGRAM):   else if 43 <= CatPurchase AND CatPurchase < 55 then do;
68090     +GRP_CatPurchase = 3;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 3;
68091     +end;
MPRINT(EM_DIAGRAM):   end;
68092     +else
68093     +if 55 <= CatPurchase AND CatPurchase < 73 then do;
MPRINT(EM_DIAGRAM):   else if 55 <= CatPurchase AND CatPurchase < 73 then do;
68094     +GRP_CatPurchase = 4;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 4;
68095     +end;
MPRINT(EM_DIAGRAM):   end;
68096     +else
68097     +if 73 <= CatPurchase then do;
MPRINT(EM_DIAGRAM):   else if 73 <= CatPurchase then do;
68098     +GRP_CatPurchase = 5;
MPRINT(EM_DIAGRAM):   GRP_CatPurchase = 5;
68099     +end;
MPRINT(EM_DIAGRAM):   end;
68100     +end;
MPRINT(EM_DIAGRAM):   end;
68101     +
68102     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68103     +* Variable: Frq;
MPRINT(EM_DIAGRAM):   * Variable: Frq;
68104     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68105     +LABEL GRP_Frq =
68106     +'Grouped: Frq';
MPRINT(EM_DIAGRAM):   LABEL GRP_Frq = 'Grouped: Frq';
68107     +
68108     +if MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Frq) then do;
68109     +GRP_Frq = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq = 1;
68110     +end;
MPRINT(EM_DIAGRAM):   end;
68111     +else if NOT MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Frq) then do;
68112     +if Frq < 11 then do;
MPRINT(EM_DIAGRAM):   if Frq < 11 then do;
68113     +GRP_Frq = 2;
MPRINT(EM_DIAGRAM):   GRP_Frq = 2;
68114     +end;
MPRINT(EM_DIAGRAM):   end;
68115     +else
68116     +if 11 <= Frq AND Frq < 18 then do;
MPRINT(EM_DIAGRAM):   else if 11 <= Frq AND Frq < 18 then do;
68117     +GRP_Frq = 3;
MPRINT(EM_DIAGRAM):   GRP_Frq = 3;
68118     +end;
MPRINT(EM_DIAGRAM):   end;
68119     +else
68120     +if 18 <= Frq AND Frq < 28 then do;
MPRINT(EM_DIAGRAM):   else if 18 <= Frq AND Frq < 28 then do;
68121     +GRP_Frq = 4;
MPRINT(EM_DIAGRAM):   GRP_Frq = 4;
68122     +end;
MPRINT(EM_DIAGRAM):   end;
68123     +else
68124     +if 28 <= Frq then do;
MPRINT(EM_DIAGRAM):   else if 28 <= Frq then do;
68125     +GRP_Frq = 5;
MPRINT(EM_DIAGRAM):   GRP_Frq = 5;
68126     +end;
MPRINT(EM_DIAGRAM):   end;
68127     +end;
MPRINT(EM_DIAGRAM):   end;
68128     +
68129     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68130     +* Variable: Income;
MPRINT(EM_DIAGRAM):   * Variable: Income;
68131     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68132     +LABEL GRP_Income =
68133     +'Grouped: Income';
MPRINT(EM_DIAGRAM):   LABEL GRP_Income = 'Grouped: Income';
68134     +
68135     +if MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Income) then do;
68136     +GRP_Income = 1;
MPRINT(EM_DIAGRAM):   GRP_Income = 1;
68137     +end;
MPRINT(EM_DIAGRAM):   end;
68138     +else if NOT MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Income) then do;
68139     +if Income < 51921.45 then do;
MPRINT(EM_DIAGRAM):   if Income < 51921.45 then do;
68140     +GRP_Income = 2;
MPRINT(EM_DIAGRAM):   GRP_Income = 2;
68141     +end;
MPRINT(EM_DIAGRAM):   end;
68142     +else
68143     +if 51921.45 <= Income AND Income < 74868.15 then do;
MPRINT(EM_DIAGRAM):   else if 51921.45 <= Income AND Income < 74868.15 then do;
68144     +GRP_Income = 3;
MPRINT(EM_DIAGRAM):   GRP_Income = 3;
68145     +end;
MPRINT(EM_DIAGRAM):   end;
68146     +else
68147     +if 74868.15 <= Income AND Income < 97525.05 then do;
MPRINT(EM_DIAGRAM):   else if 74868.15 <= Income AND Income < 97525.05 then do;
68148     +GRP_Income = 4;
MPRINT(EM_DIAGRAM):   GRP_Income = 4;
68149     +end;
MPRINT(EM_DIAGRAM):   end;
68150     +else
68151     +if 97525.05 <= Income then do;
MPRINT(EM_DIAGRAM):   else if 97525.05 <= Income then do;
68152     +GRP_Income = 5;
MPRINT(EM_DIAGRAM):   GRP_Income = 5;
68153     +end;
MPRINT(EM_DIAGRAM):   end;
68154     +end;
MPRINT(EM_DIAGRAM):   end;
68155     +
68156     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68157     +* Variable: Mnt;
MPRINT(EM_DIAGRAM):   * Variable: Mnt;
68158     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68159     +LABEL GRP_Mnt =
68160     +'Grouped: Mnt';
MPRINT(EM_DIAGRAM):   LABEL GRP_Mnt = 'Grouped: Mnt';
68161     +
68162     +if MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Mnt) then do;
68163     +GRP_Mnt = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 1;
68164     +end;
MPRINT(EM_DIAGRAM):   end;
68165     +else if NOT MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Mnt) then do;
68166     +if Mnt < 67.6 then do;
MPRINT(EM_DIAGRAM):   if Mnt < 67.6 then do;
68167     +GRP_Mnt = 2;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 2;
68168     +end;
MPRINT(EM_DIAGRAM):   end;
68169     +else
68170     +if 67.6 <= Mnt AND Mnt < 407.68 then do;
MPRINT(EM_DIAGRAM):   else if 67.6 <= Mnt AND Mnt < 407.68 then do;
68171     +GRP_Mnt = 3;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 3;
68172     +end;
MPRINT(EM_DIAGRAM):   end;
68173     +else
68174     +if 407.68 <= Mnt AND Mnt < 1127.36 then do;
MPRINT(EM_DIAGRAM):   else if 407.68 <= Mnt AND Mnt < 1127.36 then do;
68175     +GRP_Mnt = 4;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 4;
68176     +end;
MPRINT(EM_DIAGRAM):   end;
68177     +else
68178     +if 1127.36 <= Mnt then do;
MPRINT(EM_DIAGRAM):   else if 1127.36 <= Mnt then do;
68179     +GRP_Mnt = 5;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 5;
68180     +end;
MPRINT(EM_DIAGRAM):   end;
68181     +end;
MPRINT(EM_DIAGRAM):   end;
68182     +
68183     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68184     +* Variable: NetPurchase;
MPRINT(EM_DIAGRAM):   * Variable: NetPurchase;
68185     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68186     +LABEL GRP_NetPurchase =
68187     +'Grouped: NetPurchase';
MPRINT(EM_DIAGRAM):   LABEL GRP_NetPurchase = 'Grouped: NetPurchase';
68188     +
68189     +if MISSING(NetPurchase) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NetPurchase) then do;
68190     +GRP_NetPurchase = 1;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 1;
68191     +end;
MPRINT(EM_DIAGRAM):   end;
68192     +else if NOT MISSING(NetPurchase) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NetPurchase) then do;
68193     +if NetPurchase < 27 then do;
MPRINT(EM_DIAGRAM):   if NetPurchase < 27 then do;
68194     +GRP_NetPurchase = 2;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 2;
68195     +end;
MPRINT(EM_DIAGRAM):   end;
68196     +else
68197     +if 27 <= NetPurchase AND NetPurchase < 45 then do;
MPRINT(EM_DIAGRAM):   else if 27 <= NetPurchase AND NetPurchase < 45 then do;
68198     +GRP_NetPurchase = 3;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 3;
68199     +end;
MPRINT(EM_DIAGRAM):   end;
68200     +else
68201     +if 45 <= NetPurchase AND NetPurchase < 57 then do;
MPRINT(EM_DIAGRAM):   else if 45 <= NetPurchase AND NetPurchase < 57 then do;
68202     +GRP_NetPurchase = 4;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 4;
68203     +end;
MPRINT(EM_DIAGRAM):   end;
68204     +else
68205     +if 57 <= NetPurchase then do;
MPRINT(EM_DIAGRAM):   else if 57 <= NetPurchase then do;
68206     +GRP_NetPurchase = 5;
MPRINT(EM_DIAGRAM):   GRP_NetPurchase = 5;
68207     +end;
MPRINT(EM_DIAGRAM):   end;
68208     +end;
MPRINT(EM_DIAGRAM):   end;
68209     +
68210     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68211     +* Variable: RMntFrq;
MPRINT(EM_DIAGRAM):   * Variable: RMntFrq;
68212     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68213     +LABEL GRP_RMntFrq = "Grouped: RMntFrq";
MPRINT(EM_DIAGRAM):   LABEL GRP_RMntFrq = "Grouped: RMntFrq";
68214     +
68215     +if MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RMntFrq) then do;
68216     +GRP_RMntFrq = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 1;
68217     +end;
MPRINT(EM_DIAGRAM):   end;
68218     +else if NOT MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RMntFrq) then do;
68219     +if RMntFrq < 7 then do;
MPRINT(EM_DIAGRAM):   if RMntFrq < 7 then do;
68220     +GRP_RMntFrq = 2;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 2;
68221     +end;
MPRINT(EM_DIAGRAM):   end;
68222     +else
68223     +if 7 <= RMntFrq AND RMntFrq < 23.84 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= RMntFrq AND RMntFrq < 23.84 then do;
68224     +GRP_RMntFrq = 3;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 3;
68225     +end;
MPRINT(EM_DIAGRAM):   end;
68226     +else
68227     +if 23.84 <= RMntFrq AND RMntFrq < 40.38 then do;
MPRINT(EM_DIAGRAM):   else if 23.84 <= RMntFrq AND RMntFrq < 40.38 then do;
68228     +GRP_RMntFrq = 4;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 4;
68229     +end;
MPRINT(EM_DIAGRAM):   end;
68230     +else
68231     +if 40.38 <= RMntFrq then do;
MPRINT(EM_DIAGRAM):   else if 40.38 <= RMntFrq then do;
68232     +GRP_RMntFrq = 5;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 5;
68233     +end;
MPRINT(EM_DIAGRAM):   end;
68234     +end;
MPRINT(EM_DIAGRAM):   end;
68235     +
68236     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68237     +* Variable: RMntFrq_Exmpl2;
MPRINT(EM_DIAGRAM):   * Variable: RMntFrq_Exmpl2;
68238     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68239     +LABEL GRP_RMntFrq_Exmpl2 = "Grouped: RMntFrq_Exmpl2";
MPRINT(EM_DIAGRAM):   LABEL GRP_RMntFrq_Exmpl2 = "Grouped: RMntFrq_Exmpl2";
68240     +
68241     +if MISSING(RMntFrq_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RMntFrq_Exmpl2) then do;
68242     +GRP_RMntFrq_Exmpl2 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 1;
68243     +end;
MPRINT(EM_DIAGRAM):   end;
68244     +else if NOT MISSING(RMntFrq_Exmpl2) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RMntFrq_Exmpl2) then do;
68245     +if RMntFrq_Exmpl2 < 7 then do;
MPRINT(EM_DIAGRAM):   if RMntFrq_Exmpl2 < 7 then do;
68246     +GRP_RMntFrq_Exmpl2 = 2;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 2;
68247     +end;
MPRINT(EM_DIAGRAM):   end;
68248     +else
68249     +if 7 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 23.84 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 23.84 then do;
68250     +GRP_RMntFrq_Exmpl2 = 3;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 3;
68251     +end;
MPRINT(EM_DIAGRAM):   end;
68252     +else
68253     +if 23.84 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 40.38 then do;
MPRINT(EM_DIAGRAM):   else if 23.84 <= RMntFrq_Exmpl2 AND RMntFrq_Exmpl2 < 40.38 then do;
68254     +GRP_RMntFrq_Exmpl2 = 4;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 4;
68255     +end;
MPRINT(EM_DIAGRAM):   end;
68256     +else
68257     +if 40.38 <= RMntFrq_Exmpl2 then do;
MPRINT(EM_DIAGRAM):   else if 40.38 <= RMntFrq_Exmpl2 then do;
68258     +GRP_RMntFrq_Exmpl2 = 5;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq_Exmpl2 = 5;
68259     +end;
MPRINT(EM_DIAGRAM):   end;
68260     +end;
MPRINT(EM_DIAGRAM):   end;
68261     +
68262     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68263     +* Variable: Recomendation;
MPRINT(EM_DIAGRAM):   * Variable: Recomendation;
68264     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68265     +LABEL GRP_Recomendation =
68266     +'Grouped: Recomendation';
MPRINT(EM_DIAGRAM):   LABEL GRP_Recomendation = 'Grouped: Recomendation';
68267     +
68268     +if MISSING(Recomendation) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Recomendation) then do;
68269     +GRP_Recomendation = 1;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 1;
68270     +end;
MPRINT(EM_DIAGRAM):   end;
68271     +else if NOT MISSING(Recomendation) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Recomendation) then do;
68272     +if Recomendation < 3 then do;
MPRINT(EM_DIAGRAM):   if Recomendation < 3 then do;
68273     +GRP_Recomendation = 2;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 2;
68274     +end;
MPRINT(EM_DIAGRAM):   end;
68275     +else
68276     +if 3 <= Recomendation AND Recomendation < 4 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= Recomendation AND Recomendation < 4 then do;
68277     +GRP_Recomendation = 3;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 3;
68278     +end;
MPRINT(EM_DIAGRAM):   end;
68279     +else
68280     +if 4 <= Recomendation AND Recomendation < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= Recomendation AND Recomendation < 5 then do;
68281     +GRP_Recomendation = 4;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 4;
68282     +end;
MPRINT(EM_DIAGRAM):   end;
68283     +else
68284     +if 5 <= Recomendation then do;
MPRINT(EM_DIAGRAM):   else if 5 <= Recomendation then do;
68285     +GRP_Recomendation = 5;
MPRINT(EM_DIAGRAM):   GRP_Recomendation = 5;
68286     +end;
MPRINT(EM_DIAGRAM):   end;
68287     +end;
MPRINT(EM_DIAGRAM):   end;
68288     +
68289     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68290     +* Variable: Dependents;
MPRINT(EM_DIAGRAM):   * Variable: Dependents;
68291     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68292     +LABEL GRP_Dependents =
68293     +'Grouped: Dependents';
MPRINT(EM_DIAGRAM):   LABEL GRP_Dependents = 'Grouped: Dependents';
68294     +
68295     +_UFormat = put(Dependents,BEST.);
MPRINT(EM_DIAGRAM):   _UFormat = put(Dependents,BEST.);
68296     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
68297     +if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
68298     +GRP_Dependents = 1;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 1;
68299     +end;
MPRINT(EM_DIAGRAM):   end;
68300     +else if NOT MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
68301     +if (_UFORMAT eq '1'
68302     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq '1' ) then do;
68303     +GRP_Dependents = 2;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 2;
68304     +end;
MPRINT(EM_DIAGRAM):   end;
68305     +else
68306     +if (_UFORMAT eq '0'
68307     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq '0' ) then do;
68308     +GRP_Dependents = 3;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 3;
68309     +end;
MPRINT(EM_DIAGRAM):   end;
68310     +else do;
MPRINT(EM_DIAGRAM):   else do;
68311     +GRP_Dependents = 1;
MPRINT(EM_DIAGRAM):   GRP_Dependents = 1;
68312     +end;
MPRINT(EM_DIAGRAM):   end;
68313     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
68314      run;

NOTE: DATA STEP view saved on file EMWS8.BINNING_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
68315      quit;
68316      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
68318      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
68319      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
68320      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 252 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

68321      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
68322      * BINNING: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * BINNING: Computing metadata for TRAIN data;
68323      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.BINNING_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.BINNING_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.BINNING_TRAIN out=WORK.M2D3OVGZ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2D3OVGZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2D3OVGZ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2D3OVGZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2D3OVGZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1YKMK3Q NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YKMK3Q;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YKMK3Q;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GXEV6Z(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YKMK3Q;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YKMK3Q;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YKMK3Q;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YKMK3Q;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YKMK3Q;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.BINNING_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "BINNING";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = 'Mnt' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Mnt' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Mnt' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'RMntFrq' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RMntFrq' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RMntFrq' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'RMntFrq_Exmpl2' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RMntFrq_Exmpl2' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RMntFrq_Exmpl2' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Frq' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Frq' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Frq' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Income' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Income' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Income' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Age' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Age' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Age' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Age_Exmpl2' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Age_Exmpl2' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Age_Exmpl2' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'NetPurchase' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NetPurchase' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NetPurchase' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'CatPurchase' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_CatPurchase' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_CatPurchase' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Dependents' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Dependents' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Dependents' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Recomendation' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Recomendation' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Recomendation' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Marital_Status' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Marital_Status' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Marital_Status' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Education' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Education' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Education' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Clothes' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Clothes' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Clothes' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'SmallAppliances' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_SmallAppliances' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_SmallAppliances' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Toys' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Toys' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Toys' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'HouseKeeping' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_HouseKeeping' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_HouseKeeping' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Kitchen' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Kitchen' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Kitchen' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Rcn' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Rcn' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Rcn' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MonthsAsCustomer' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MonthsAsCustomer' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MonthsAsCustomer' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Gender' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Gender' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Gender' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'HigherEducation' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_HigherEducation' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_HigherEducation' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
