MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.47 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                15.47 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3N3VHNI "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3N3VHNI new;
MPRINT(EM_DIAGRAM):   run;
35024      %let EMEXCEPTIONSTRING=;
35025      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35026      * SCORE: BINNING;
MPRINT(EM_DIAGRAM):   * SCORE: BINNING;
35027      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35028      %let EM_ACTION = SCORE;
35029      %let syscc = 0;
35030      %macro main;
35031      
35032        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
35033        %include temp;
35034        filename temp;
35035      
35036        %setProperties;
35037      
35038        %if %upcase(&EM_ACTION) = CREATE %then %do;
35039          filename temp catalog 'sashelp.emmdfy.binning_create.source';
35040          %include temp;
35041          filename temp;
35042      
35043          %create;
35044        %end;
35045      
35046         %else
35047         %if %upcase(&EM_ACTION) = TRAIN %then %do;
35048      
35049             filename temp catalog 'sashelp.emmdfy.binning_train.source';
35050             %include temp;
35051             filename temp;
35052             %train;
35053         %end;
35054      
35055        %else
35056        %if %upcase(&EM_ACTION) = SCORE %then %do;
35057          filename temp catalog 'sashelp.emmdfy.binning_score.source';
35058          %include temp;
35059          filename temp;
35060      
35061          %score;
35062      
35063        %end;
35064      
35065        %else
35066        %if %upcase(&EM_ACTION) = REPORT %then %do;
35067      
35068             filename temp catalog 'sashelp.emmdfy.binning_report.source';
35069             %include temp;
35070             filename temp;
35071      
35072             %report;
35073         %end;
35074      
35075         %doendm:
35076      %mend main;
35077      
35078      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
35080     +%macro SetProperties;
35082     +     /* IGN options */
35083     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
35084     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
35085     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
35087     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
35088     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
35089     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
35090     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
35091     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
35092     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
35093     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
35094     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
35095     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
35096     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
35097     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
35098     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
35099     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
35100     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
35103     +%mend SetProperties;
35104     +%macro appendfiles(fileref1, fileref2);
35105     +     data _null_;
35106     +       length c $256;
35107     +       fid1=fopen("&fileref1",'A');
35108     +       fid2=fopen("&fileref2",'I');
35109     +       cval = finfo(fid2,'lrecl');
35110     +       put cval= fid1= fid2=;
35111     +       if (fid2 > 0) then
35112     +         do while(fread(fid2)=0);
35113     +           rc = fget(fid2,c,256);
35114     +           _msg_=sysmsg();
35115     +           /* put rc= c= _msg_=; */
35116     +           rc = fput(fid1,strip(c));
35117     +           rc = fwrite(fid1);
35118     +         end;
35119     +         _msg_=sysmsg();
35120     +         put _msg_=;
35121     +       rc = fclose(fid1);
35122     +       rc = fclose(fid2);
35123     +     run;
35124     +%mend appendfiles;
35126     +%macro buildOptScoreCode;
35128     +    %em_register(key=BINCODE, type=FOLDER);
35130     +    filename x catalog 'sashelp.emutil.em_deldir.source';
35131     +    %inc x;
35132     +    filename x;
35133     +    %delDir(folder=%nrbquote(&em_user_bincode));
35135     +    data _null_; length rc $200;
35136     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
35137     +    run;
35139     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
35141     +    %let dsid = %sysfunc(open(class_nosv));
35142     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
35143     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
35145     +    %let oldname=;
35146     +    %do %while(^%sysfunc(fetch(&dsid)));
35147     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
35148     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
35150     +        %if &name ne &oldname %then %do;
35151     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
35152     +             data _null_;
35153     +                length string $200 flag endflag 8;
35154     +                retain string flag endflag;
35155     +                set class_nosv end=eof;
35156     +                where DISPLAY_VAR ="&name";
35157     +                by _variable_ _group_;
35158     +                file _F1;
35159     +                index = kindex(_variable_, "BIN_");
35160     +                if index gt 0 then do;
35161     +                   if first._variable_ then do;
35162     +                      put ' ';
35163     +                      put "&EM_CODEBAR;";
35164     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
35165     +                      put string;
35166     +                      put "&EM_CODEBAR;";
35168     +                      if origLabel ne "" then do;
35169     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
35170     +                            put string;
35171     +                            string = tranwrd(origLabel,"'","''");
35172     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
35173     +                            put string;
35174     +                      end;
35175     +                      else do;
35176     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
35177     +                             put string;
35178     +                      end;
35180     +                      put ' ';
35182     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35183     +                      put string;
35184     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35185     +                      put string;
35186     +                      put "end;";
35187     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35188     +                      put string;
35189     +                   end;
35190     +                   if first._group_ then do;
35191     +                      flag = 0;
35192     +                      endflag = 1;
35193     +                      if ^first._variable_ then do;
35194     +                         put "else";
35195     +                      end;
35196     +                      if LB ne . then do;
35197     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
35198     +                      end;
35199     +                      else do;
35200     +                         flag = 1;
35201     +                         string = "if";
35202     +                      end;
35203     +                   end;
35204     +                   if last._Group_ then do;
35205     +                      if UB ne . then do;
35206     +                        if flag ne 1 then do;
35207     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
35208     +                        end;
35209     +                        else do;
35210     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
35211     +                        end;
35212     +                      end;
35213     +                      else do;
35214     +                         if flag=1 then do;
35215     +                            string = strip(DISPLAY_VAR) ;
35216     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
35217     +                            endflag=0;
35218     +                            string="";
35219     +                         end;
35220     +                         else do;
35221     +                            string = strip(string)!!" then do;";
35222     +                         end;
35223     +                      end;
35224     +                      put string;
35225     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
35226     +                      put string;
35227     +                      if endflag eq 1 then do;
35228     +                        put "end;";
35229     +                      end;
35230     +                   end;
35231     +                   if last._variable_ then do;
35232     +                     string = "end;";
35233     +                     put string;
35234     +                   end;
35236     +                end;
35237     +                else do;
35238     +                   _split_value_ = tranwrd(_split_value_,"'","''");
35239     +                   if first._group_ then do;
35240     +                      flag=0;
35241     +                      if ^first._variable_ then
35242     +                         put 'else';
35243     +                      else do;
35244     +                         put ' ';
35245     +                         put "&EM_CODEBAR;";
35246     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
35247     +                         put string;
35248     +                         put "&EM_CODEBAR;";
35250     +                         if origLabel ne "" then do;
35251     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
35252     +                               put string;
35253     +                               string = tranwrd(origLabel,"'","''");
35254     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
35255     +                               put string;
35256     +                         end;
35257     +                         else do;
35258     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
35259     +                               put string;
35260     +                         end;
35262     +                         put ' ';
35264     +                         if format ne '' then do;
35265     +                            if first._variable_ then do;
35266     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
35267     +                               put string;
35268     +                               string = '%dmnormip(_UFormat);';
35269     +                               put string;
35271     +                               string ="if MISSING(_UFORMAT) then do;";
35272     +                               put string;
35273     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35274     +                               put string;
35275     +                               put "end;";
35277     +                               string="else if NOT MISSING(_UFORMAT) then do;";
35278     +                               put string;
35280     +                            end;
35281     +                         end;
35282     +                         else do;
35283     +                            if type = 'N' then do;
35284     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35285     +                              put string;
35286     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35287     +                              put string;
35288     +                              put "end;";
35290     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35291     +                              put string;
35292     +                            end;
35293     +                            else if type='C' then do;
35294     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
35295     +                              put string;
35296     +                              string = '%dmnormip(_UFormat);';
35297     +                              put string;
35299     +                              string ="if MISSING(_UFORMAT) then do;";
35300     +                              put string;
35301     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35302     +                              put string;
35303     +                              put "end;";
35305     +                              string="else if NOT MISSING(_UFORMAT) then do;";
35306     +                              put string;
35307     +                              string = '%dmnormip(_UFormat);';
35308     +                              put string;
35309     +                           end;
35310     +                         end;
35311     +                      end;
35312     +                      if format ne '' OR type='C' then do;
35313     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
35314     +                      end;
35315     +                      else do;
35316     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
35317     +                      end;
35318     +                   end;
35319     +                   else do;
35320     +                      if flag ne 1 then do;
35321     +                       if format ne '' OR type='C' then do;
35322     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
35323     +                       end;
35324     +                       else do;
35325     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
35326     +                       end;
35327     +                         length = length(tempstring);
35329     +                         if length < 195 then do;
35330     +                            string = tempstring;
35331     +                         end;
35332     +                         else do;
35334     +                            string = strip(string);
35335     +                            put string;
35336     +                            string = ") then do;";
35337     +                            put string;
35339     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
35340     +                            put string;
35341     +                            put "end;";
35343     +                            put 'else';
35344     +                            if format ne '' OR type='C' then do;
35345     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
35346     +                            end;
35347     +                            else do;
35348     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
35349     +                            end;
35350     +                         end;
35351     +                      end;
35352     +                   end;
35354     +                   if last._group_ then do;
35355     +                      string = strip(string);
35356     +                      put string;
35358     +                      string = ") then do;";
35359     +                      put string;
35361     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
35362     +                      put string;
35363     +                      put "end;";
35364     +                   end;
35366     +                   if last._variable_ then do;
35367     +                     put "else do;";
35369     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35370     +                     put string;
35372     +                     put "end;";
35373     +                     put "end;";
35374     +                   end;
35375     +                end;
35376     +             run;
35378     +             %let oldname = &name;
35379     +        %end;
35380     +    %end;
35381     +    %let dsid = %sysfunc(close(&dsid));
35383     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
35384     +    data _null_;
35385     +       file _F1;
35386     +       put "length _UFormat $200;";
35387     +       put "drop _UFormat;";
35388     +       put "_UFormat='';";
35389     +    run;
35390     +    filename _F1;
35392     +   %em_register(key=EMSCOREVAR, type=DATA);
35393     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
35394     +   proc datasets lib=&em_lib nolist;
35395     +      delete &scorevarDs;
35396     +   run;
35397     +   quit;
35399     +   %let filrf=mydir;
35400     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
35401     +   %let did=%sysfunc(dopen(&filrf));
35403     +   %if &did %then %do;  %PUT  did= &did;
35404     +       %let memcount=%sysfunc(dnum(&did));
35405     +       %if &memcount > 0 %then %do;
35406     +           data &em_user_emscorevar;
35407     +              length Name $32 formula $70 file $200;
35408     +              keep NAME Formula file;
35409     +              formula  = '';
35410     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
35411     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
35412     +               output;
35413     +           %end;
35414     +           %do i=1 %to &memcount;
35415     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
35416     +               %let newvar = %scan(&name, 1, .);
35417     +               %if "&newvar" ne "_ALL_" %then %do;
35418     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
35419     +                   output;
35420     +               %end;
35421     +           %end;
35423     +           run;
35424     +       %end;
35425     +       %let did = %sysfunc(dclose(&did));
35426     +  %end;
35428     +   %doendu:
35429     +%mend buildOptScoreCode;
35432     +%macro buildScoreCode(flowCode, publishCode);
35435     +  filename x "&flowCode";
35437     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
35438     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
35439     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
35441     +  data temp;
35442     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
35443     +    by display_var _Split_value_;
35444     +     if upcase(_Split_value_) ne 'MISSING';
35445     +   run;
35447     +   data temp_missing;
35448     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
35449     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
35450     +     by display_var _Split_value_;
35451     +     if upcase(_Split_value_) eq 'MISSING';
35452     +     keep _variable_ display_var missgrp;
35453     +   run;
35455     +   proc sort data=temp_missing; by display_var missgrp; run;
35457     +   data temp_missing;
35458     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
35459     +     by display_var missgrp;
35460     +     if ^_a then delete;
35461     +     keep _variable_ display_var missgrp ;
35462     +   run;
35464     +   data temp;
35465     +     merge temp temp_missing;
35466     +     by display_var;
35467     +     if display_Var eq '' then delete;
35468     +    run;
35470     +    /* pull in wtev values */
35471     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
35472     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
35473     +    proc sort data=temp;  by display_var _group_; run;
35475     +   data temp;
35476     +      merge temp tempcoarse(keep=display_var _group_  role) ;
35477     +      by display_var _group_;
35478     +    run;
35480     +    data temp;
35481     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
35482     +      by display_var;
35484     +      if _group_ = . then delete;
35485     +      if _variable_ = '' then delete;
35486     +    run;
35488     +    proc sort data=temp out=class;
35489     +       by _variable_ _group_ LB;
35490     +    run;
35492     +    data _null_;
35493     +      file X;
35495     +      put "length _UFormat $200;";
35496     +      put "drop _UFormat;";
35497     +      put "_UFormat='';";
35498     +    run;
35500     +    data class_nosv;
35501     +      set class;
35502     +      if upcase(role)="INPUT";
35503     +    run;
35505     +    data _null_;
35506     +       file X MOD;
35507     +       length string $200 flag endflag 8;
35508     +       retain string flag endflag;
35509     +       set class_nosv end=eof;
35510     +       by _variable_ _group_;
35512     +       index = kindex(_variable_, "BIN_");
35513     +       if index gt 0 then do;
35515     +         if first._variable_ then do;
35516     +            put ' ';
35517     +            put "&EM_CODEBAR;";
35518     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
35519     +            put string;
35520     +            put "&EM_CODEBAR;";
35523     +            if origLabel ne "" then do;
35524     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
35525     +              put string;
35526     +              string = tranwrd(origLabel,"'","''");
35527     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
35528     +              put string;
35529     +            end;
35530     +            else do;
35531     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
35532     +             put string;
35533     +            end;
35535     +            put ' ';
35537     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35538     +            put string;
35539     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35540     +            put string;
35541     +            put "end;";
35542     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35543     +            put string;
35544     +          end;
35545     +           if first._group_ then do;
35546     +              flag = 0;
35547     +              endflag = 1;
35548     +              if ^first._variable_ then do;
35549     +                put "else";
35550     +              end;
35551     +              if LB ne . then do;
35552     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
35553     +              end;
35554     +              else do;
35555     +                 flag = 1;
35556     +                 string = "if";
35557     +              end;
35559     +           end;
35560     +           if last._Group_ then do;
35561     +              if UB ne . then do;
35562     +                if flag ne 1 then do;
35563     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
35564     +                end;
35565     +                else do;
35566     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
35567     +                end;
35568     +              end;
35569     +              else do;
35570     +                 if flag=1 then do;
35571     +                   string = strip(DISPLAY_VAR) ;
35572     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
35573     +                   endflag = 0;
35574     +                   string="";
35575     +                 end;
35576     +                 else do;
35577     +                   string = strip(string)!!" then do;";
35578     +                 end;
35579     +              end;
35580     +              put string;
35582     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
35583     +              put string;
35584     +              if endflag eq 1 then do;
35585     +                put "end;";
35586     +              end;
35587     +           end;
35588     +           if last._variable_ then do;
35589     +             string = "end;";
35590     +             put string;
35591     +           end;
35592     +       end;
35593     +       else do;
35594     +           _split_value_ = tranwrd(_split_value_,"'","''");
35595     +           if first._group_ then do;
35596     +              flag=0;
35597     +              if ^first._variable_ then
35598     +                 put 'else';
35599     +              else do;
35600     +                 put ' ';
35601     +                 put "&EM_CODEBAR;";
35602     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
35603     +                 put string;
35604     +                 put "&EM_CODEBAR;";
35606     +                 if origLabel ne "" then do;
35607     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
35608     +                   put string;
35609     +                   string = tranwrd(origLabel,"'","''");
35610     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
35611     +                   put string;
35612     +                 end;
35613     +                 else do;
35614     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
35615     +                   put string;
35616     +                 end;
35618     +                 put ' ';
35620     +                if format ne '' then do;
35621     +                  if first._variable_ then do;
35622     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
35623     +                    put string;
35624     +                    string = '%dmnormip(_UFormat);';
35625     +                    put string;
35627     +                     string ="if MISSING(_UFORMAT) then do;";
35628     +                     put string;
35629     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35630     +                     put string;
35631     +                     put "end;";
35633     +                     string="else if NOT MISSING(_UFORMAT) then do;";
35634     +                     put string;
35636     +                  end;
35637     +                end;
35638     +                else do;
35639     +                     if type = 'N' then do;
35640     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35641     +                       put string;
35642     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35643     +                       put string;
35644     +                       put "end;";
35646     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
35647     +                       put string;
35649     +                     end;
35650     +                     else if type='C' then do;
35651     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
35652     +                        put string;
35653     +                        string = '%dmnormip(_UFormat);';
35654     +                        put string;
35656     +                        string ="if MISSING(_UFORMAT) then do;";
35657     +                        put string;
35658     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35659     +                        put string;
35660     +                        put "end;";
35662     +                        string="else if NOT MISSING(_UFORMAT) then do;";
35663     +                        put string;
35664     +                        string = '%dmnormip(_UFormat);';
35665     +                        put string;
35666     +                    end;
35667     +                end;
35668     +              end;
35669     +              if format ne '' OR type='C' then do;
35670     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
35671     +              end;
35672     +              else do;
35673     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
35674     +              end;
35675     +           end;
35676     +           else do;
35677     +              if flag ne 1 then do;
35678     +                if format ne '' OR type='C' then do;
35679     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
35680     +                end;
35681     +                else do;
35682     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
35683     +                end;
35684     +                length = klength(tempstring);
35686     +                if length < 195 then do;
35687     +                   string = tempstring;
35688     +                end;
35689     +                else do;
35691     +                   string = strip(string);
35692     +                   put string;
35693     +                   string = ") then do;";
35694     +                   put string;
35696     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
35697     +                   put string;
35698     +                   put "end;";
35700     +                 /*  string = strip(string)||",'...';"; */
35702     +                   put 'else';
35703     +                   if format ne '' OR type='C' then do;
35704     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
35705     +                   end;
35706     +                   else do;
35707     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
35708     +                   end;
35711     +                end;
35712     +              end;
35713     +           end;
35715     +           if last._group_ then do;
35716     +              string = strip(string);
35717     +              put string;
35718     +              string = ") then do;";
35719     +              put string;
35721     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
35722     +              put string;
35723     +              put "end;";
35724     +           end;
35726     +           if last._variable_ then do;
35727     +             put "else do;";
35729     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
35730     +             put string;
35732     +             put "end;";
35733     +             put "end;";
35734     +           end;
35735     +         *end;
35736     +       end;
35737     +    run;
35739     +    /* generate PublishCode the same as flowscorecode */
35740     +    filename Y "&publishCode";
35742     +    /* if publishCode already exists, wipe it out first */
35743     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
35744     +      %let rc = %sysfunc(fdelete(Y));
35745     +    %end;
35747     +    %appendfiles(Y, X);
35749     +    filename X;
35750     +    filename Y;
35752     +    %buildOptScoreCode;
35754     +    proc datasets library=work nolist;
35755     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
35756     +    run;
35757     +    quit;
35759     +%mend buildScoreCode;
35761     +%macro buildMetaCode(DeltaCodeFile=);
35763     +   /* set variable roles based on New Role column in the Results table */
35764     +   data _null_;
35765     +      file &DeltaCodeFile;
35766     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
35767     +      %if &dsid %then %do;
35768     +        %let obs = %sysfunc(fetch(&dsid));
35769     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
35770     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
35771     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
35773     +        %do %while(&obs=0);
35774     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
35775     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
35776     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
35778     +          /* retrieve grp and woe names from varmappings dataset */
35779     +          %let choice = _VARIABLE_ = "&inputname";
35780     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
35781     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
35782     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
35783     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
35784     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
35786     +          put "if name = '&inputname' then role='REJECTED';";
35787     +          %if "&role" ne "DEFAULT" %then %do;
35788     +            put "if name = '&grpname' then role='&role';";
35789     +          %end;
35790     +          %else %do;
35791     +            put "if name = '&grpname' then role='&oldrole';";
35792     +          %end;
35793     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
35795     +          %let obs = %sysfunc(fetch(&dsid));
35796     +        %end;
35797     +      %end;
35798     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
35799     +   run;
35801     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
35802     +   data _null_;
35803     +      file &DeltaCodeFile MOD;
35805     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
35806     +      %if &sdsid %then %do;
35807     +        %let sobs = %sysfunc(fetch(&sdsid));
35808     +        %do %while(&sobs=0);
35809     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
35810     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
35811     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
35812     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
35814     +          %let checkgrp = GRP_&checkname;
35815     +          %let lenname = %length(&checkgrp);
35816     +          %if %eval(&lenname-32) > 0 %then %do;
35817     +            %let checkgrp = %substr(&checkgrp, 1, 32);
35818     +          %end;
35820     +          %let choice = _VARIABLE_ ="&checkname";
35821     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
35823     +          /* if var not found in varmappings, delete variables; */
35824     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
35825     +          %if &vdsid eq 0 %then %do;
35826     +            put 'if name="&displayvar" then delete;';
35827     +            %let dispgrp = GRP_&displayvar;
35828     +            put 'if name="&dispgrp" then delete;';
35829     +          %end;
35831     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
35832     +          %let sobs = %sysfunc(fetch(&sdsid));
35833     +        %end;
35834     +      %end;
35835     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
35836     +   run;
35838     +%mend buildMetaCode;
35840     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
35842     +   proc sort data=&coarse out=sortedcoarse nodupkey;
35843     +     by display_var;
35844     +   run;
35845     +   proc sort data=&varmappings nodupkey;
35846     +     by _variable_;
35847     +   run;
35848     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
35849     +     proc sort data=&resultstable; by display_var; run;
35850     +   %end;
35852     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
35853     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
35854     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
35855     +        &resultstable (keep = display_var _new_role_ )
35856     +     %end;
35857     +     ;
35858     +     by display_var;
35859     +     length _role_ _new_role_ $10;
35860     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
35861     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
35862     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
35863     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
35864     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
35865     +           ;
35867     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
35868     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
35869     +                _role_ = "Rejected";
35870     +             else _role_ = "Input";
35871     +           %end;
35872     +           %else %do;
35873     +             _role_ = "Input";
35874     +           %end;
35875     +           if _new_role_ eq "" then _new_role_="Default";
35876     +      if ^_a then do;
35877     +        _gini_ = 0;
35878     +        _role_ = 'Rejected';
35879     +        if _new_role_ eq "" then _new_role_="Default";
35880     +      end;
35881     +   run;
35882     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
35883     +     by NAME;
35884     +   run;
35885     +   data outlabel;
35886     +     set outlabel;
35887     +     if _label_ = '' then _label_ = _variable_;
35888     +   run;
35889     +   data &resultstable;
35890     +     merge &resultstable(in=_a_) outlabel;
35891     +     by display_Var;
35892     +     if _a_ then output;
35893     +   run;
35894     +   proc datasets library=work nolist;
35895     +     delete sortedcoarse outlabel;
35896     +   run;
35897     +   quit;
35898     +   proc sort data=&resultstable nodupkey;
35899     +      by DESCENDING
35900     +        _gini_ display_Var;
35901     +   run;
35902     +   data &resultstable;
35903     +     set &resultstable;
35905     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
35906     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
35907     +     giniOrder = _N_;
35908     +     _gini_ = round(_GINI_, .001);
35909     +     drop _variable_;
35910     +   run;
35912     +   proc print data=&resultstable label;
35913     +   run;
35915     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
35916     +   data &coarse;
35917     +     set &coarse;
35918     +     length role $10;
35919     +     %let dsid = %sysfunc(open(&resultstable));
35920     +     %if &dsid %then %do;
35921     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
35922     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
35923     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
35925     +       %let obs = %sysfunc(fetch(&dsid));
35926     +       %do %while(&obs=0);
35927     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
35928     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
35929     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
35931     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
35932     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
35933     +            giniOrder = &order;
35934     +            role = "&role";
35935     +          end;
35937     +          %let obs = %sysfunc(fetch(&dsid));
35938     +       %end;
35939     +     %end;
35940     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
35941     +   run;
35944     +%mend EM_GENERATE_RESULTSTABLE;
35946     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
35948     +    /* instantiate the zchar macro to be used in adding bin definition */
35949     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
35950     +    %inc _temp;
35951     +    filename _temp;
35953     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
35954     +      by _variable_ binFlag _group_ LB;
35955     +    run;
35957     +    data tempExport;
35958     +      set sortedFine;
35959     +      by _variable_ binFlag _group_;
35960     +      length _split_value_ $200;
35962     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
35963     +      if binFlag = 0 then do;
35964     +        index = kindex(_variable_, "BIN_");
35965     +        if index gt 0 then do;
35966     +          _LEVEL_ = "INTERVAL";
35967     +        end;
35968     +        _Split_value_ = _split_value_;
35969     +        output;
35970     +      end;
35971     +      else do;
35972     +         * if last._group_ then do;
35973     +          index = kindex(_variable_, "BIN_");
35974     +          if index gt 0 then do;
35975     +            _LEVEL_ = "INTERVAL";
35976     +          end;
35977     +          _Split_value_ = %zchar(UB);
35978     +          output;
35979     +         * end;
35980     +      end;
35982     +      rename display_Var = _variable_;
35983     +      keep display_var _level_ _group_ _split_value_ binFlag;
35984     +    run;
35986     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
35987     +       data &EXPORTGROUPING;
35988     +         set tempexport;
35989     +       run;
35990     +    %end;
35991     +    %else %do;
35992     +       /* determine if EXPORTGROUPING already exists */
35993     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
35994     +         data &EXPORTGROUPING;
35995     +            set &EXPORTGROUPING tempexport;
35996     +         run;
35997     +       %end;
35998     +       %else %do;
35999     +         data &EXPORTGROUPING;
36000     +            set tempexport;
36001     +         run;
36002     +       %end;
36003     +    %end;
36005     +    proc datasets lib=work nolist;
36006     +      delete sortedFine tempexport;
36007     +    run;
36008     +    quit;
36010     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_SCORE.SOURCE.
36016     +%macro buildMetaCode(DeltaCodeFile=);
36018     +   /* set variable roles based on New Role column in the Results table */
36019     +   data _null_;
36020     +      file &DeltaCodeFile;
36021     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
36022     +      %if &dsid %then %do;
36023     +        %let obs = %sysfunc(fetch(&dsid));
36024     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
36025     +        %let rnum = %sysfunc(VARNUM(&dsid, _Role_));
36027     +        %do %while(&obs=0);
36028     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
36029     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
36031     +          /* retrieve grp and woe names from varmappings dataset */
36032     +          %let choice = _VARIABLE_ = "&inputname";
36033     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
36034     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
36035     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
36036     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
36037     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
36039     +          put "if name = '&inputname' then role='REJECTED';";
36040     +          put "if name = '&grpname' then role='&role';";
36041     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
36043     +          %let obs = %sysfunc(fetch(&dsid));
36044     +        %end;
36045     +      %end;
36046     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
36047     +   run;
36049     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
36050     +   data _null_;
36051     +      file &DeltaCodeFile MOD;
36053     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
36054     +      %if &sdsid %then %do;
36055     +        %let sobs = %sysfunc(fetch(&sdsid));
36056     +        %do %while(&sobs=0);
36057     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
36058     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
36059     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
36060     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
36062     +          %let checkgrp = GRP_&checkname;
36063     +          %let lenname = %length(&checkgrp);
36064     +          %if %eval(&lenname-32) > 0 %then %do;
36065     +            %let checkgrp = %substr(&checkgrp, 1, 32);
36066     +          %end;
36068     +          %let choice = _VARIABLE_ ="&checkname";
36069     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
36071     +          /* if var not found in varmappings, delete variables; */
36072     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
36073     +          %if &vdsid eq 0 %then %do;
36074     +            put 'if name="&displayvar" then delete;';
36075     +            %let dispgrp = GRP_&displayvar;
36076     +            put 'if name="&dispgrp" then delete;';
36077     +          %end;
36079     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
36080     +          %let sobs = %sysfunc(fetch(&sdsid));
36081     +        %end;
36082     +      %end;
36083     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
36084     +   run;
36086     +%mend buildMetaCode;
36088     +%macro score;
36090     +   /* generate results table */
36091     +   %EM_GETNAME(key=COARSE, type=DATA);
36092     +   %EM_GETNAME(key=RESULTSTABLE, type=DATA);
36093     +   %EM_GETNAME(key=VARMAPPINGS, type=DATA);
36094     +   %EM_GETNAME(key=SPLITVALS, type=DATA);
36096     +   %EM_GENERATE_RESULTSTABLE(&EM_USER_COARSE, &EM_USER_RESULTSTABLE, &EM_USER_VARMAPPINGS);
36098     +   /* Generate Publish score code; same as flowscorecode */
36099     +   %EM_GETNAME(key=BINMAPPINGS, type=DATA);
36100     +   %buildScoreCode(&EM_FILE_EMFLOWSCORECODE, &EM_FILE_EMPUBLISHSCORECODE);
36102     +   filename deltaref "&EM_FILE_CDELTA_TRAIN";
36103     +   %buildMetaCode(DeltaCodeFile=deltaref);
36104     +   filename deltaref;
36106     +   /* generate results tables */
36107     +   %EM_REPORT(key=RESULTSTABLE, viewtype=DATA, block=MODEL, description=OUTPUTTABLE, autodisplay=Y);
36108     +   %EM_REPORT(key=RESULTSTABLE, viewtype=BAR, X=DISPLAY_VAR, Freq=_GINI_, TIPTEXT=_ROLE_, block=MODEL, description=STATPLOT, autodisplay=Y);
36110     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_COARSE out=sortedcoarse nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: 219 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDCOARSE has 32 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_RESULTSTABLE (Keep = display_var _gini_ _role_ _new_role_ procLevel);
MPRINT(EM_GENERATE_RESULTSTABLE):   merge sortedcoarse(in=_a) EMWS8.BINNING_VARMAPPINGS(rename=(_Variable_ = DISPLAY_VAR)) ;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   length _role_ _new_role_ $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   label display_var = "Variable" _gini_ = "Gini Statistic" _role_ = "Calculated Role" _new_role_ = "New Role" LEVEL = "Level" ;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _gini_ < 20.0 then _role_ = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   else _role_ = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   if ^_a then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = 0;
MPRINT(EM_GENERATE_RESULTSTABLE):   _role_ = 'Rejected';
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable LEVEL is uninitialized.
NOTE: There were 32 observations read from the data set WORK.SORTEDCOARSE.
NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_VariableSet out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
MPRINT(EM_GENERATE_RESULTSTABLE):   by NAME;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.OUTLABEL has 36 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   set outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _label_ = '' then _label_ = _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable _variable_ is uninitialized.
NOTE: There were 36 observations read from the data set WORK.OUTLABEL.
NOTE: The data set WORK.OUTLABEL has 36 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   merge EMWS8.BINNING_RESULTSTABLE(in=_a_) outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _a_ then output;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_Var by input data sets. This may cause unexpected results.
NOTE: There were 32 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: There were 36 observations read from the data set WORK.OUTLABEL.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 32 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_RESULTSTABLE):   delete sortedcoarse outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Deleting WORK.SORTEDCOARSE (memtype=DATA).
NOTE: Deleting WORK.OUTLABEL (memtype=DATA).
MPRINT(EM_GENERATE_RESULTSTABLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS8.BINNING_RESULTSTABLE nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by DESCENDING _gini_ display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 32 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS8.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering" LEVEL = "Level";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = _N_;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = round(_GINI_, .001);
MPRINT(EM_GENERATE_RESULTSTABLE):   drop _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: The data set EMWS8.BINNING_RESULTSTABLE has 32 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc print data=EMWS8.BINNING_RESULTSTABLE label;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_RESULTSTABLE.
NOTE: The PROCEDURE PRINT printed page 44.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   length role $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "RFMstat" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 1;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Recency" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 2;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "AcceptedCmpTotal" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 3;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MntMeatProducts" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 4;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NumCatalogPurchases" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 5;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NumDistPurchases" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 6;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Mnt" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 7;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "RMntFrq" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 8;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Income" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 9;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Frq" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 10;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MntWines" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 11;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MntGoldProds" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 12;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MntFishProducts" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 13;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NumWebPurchases" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 14;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NumWebVisitsMonth" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 15;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MntSweetProducts" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 16;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "AcceptedCmp5" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 17;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NumDealsPurchases" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 18;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "AcceptedCmp3" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 19;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "AcceptedCmp1" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 20;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MntFruits" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 21;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Teenhome" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 22;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Marital_Status" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 23;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NumStorePurchases" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 24;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "AcceptedCmp4" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 25;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Age" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 26;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MonthsAsCustomer" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 27;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Education" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 28;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Kidhome" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 29;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "AcceptedCmp2" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 30;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "HigherEducationBinary" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 31;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "Complain" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 32;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 251 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(BUILDSCORECODE):   filename x "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(BUILDSCORECODE):   by display_var _split_Value_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 251 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(BUILDSCORECODE):   by display_var bin;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_COARSE out=tempcoarse;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set WORK.TEMPCOARSE has 251 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge EMWS8.BINNING_SPLITVALS EMWS8.BINNING_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 219 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge EMWS8.BINNING_SPLITVALS(rename=(_GROUP_=MISSGRP)) EMWS8.BINNING_BINMAPPINGS(rename=( BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp_missing;
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 32 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP_MISSING has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   if ^_a then delete;
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp ;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 32 observations read from the data set WORK.TEMP_MISSING.
NOTE: There were 251 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP_MISSING has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp temp_missing;
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if display_Var eq '' then delete;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 219 observations read from the data set WORK.TEMP.
NOTE: There were 32 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP has 219 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=tempmappings;
MPRINT(BUILDSCORECODE):   by _variable_;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAPPINGS has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS8.Part_CMeta_TRAIN out=tempcmeta;
MPRINT(BUILDSCORECODE):   by NAME;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 36 observations read from the data set EMWS8.PART_CMETA_TRAIN.
NOTE: The data set WORK.TEMPCMETA has 36 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 219 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 219 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempcoarse(keep=display_var _group_ role) ;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 219 observations read from the data set WORK.TEMP.
NOTE: There were 251 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP has 251 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if _group_ = . then delete;
MPRINT(BUILDSCORECODE):   if _variable_ = '' then delete;
MPRINT(BUILDSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable DISPLAY_VAR by input data sets. This may cause unexpected results.
NOTE: There were 251 observations read from the data set WORK.TEMP.
NOTE: There were 32 observations read from the data set WORK.TEMPMAPPINGS.
NOTE: There were 36 observations read from the data set WORK.TEMPCMETA.
NOTE: The data set WORK.TEMP has 219 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp out=class;
MPRINT(BUILDSCORECODE):   by _variable_ _group_ LB;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 219 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 219 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X;
MPRINT(BUILDSCORECODE):   put "length _UFormat $200;";
MPRINT(BUILDSCORECODE):   put "drop _UFormat;";
MPRINT(BUILDSCORECODE):   put "_UFormat='';";
MPRINT(BUILDSCORECODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 3 records were written to the file X.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data class_nosv;
MPRINT(BUILDSCORECODE):   set class;
MPRINT(BUILDSCORECODE):   if upcase(role)="INPUT";
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 219 observations read from the data set WORK.CLASS.
NOTE: The data set WORK.CLASS_NOSV has 148 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X MOD;
MPRINT(BUILDSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDSCORECODE):   retain string flag endflag;
MPRINT(BUILDSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDSCORECODE):   by _variable_ _group_;
MPRINT(BUILDSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDSCORECODE):   if index gt 0 then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag = 0;
MPRINT(BUILDSCORECODE):   endflag = 1;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if LB ne . then do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   flag = 1;
MPRINT(BUILDSCORECODE):   string = "if";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._Group_ then do;
MPRINT(BUILDSCORECODE):   if UB ne . then do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag=1 then do;
MPRINT(BUILDSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDSCORECODE):   endflag = 0;
MPRINT(BUILDSCORECODE):   string="";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "end;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag=0;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   if format ne '' then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if type = 'N' then do;
MPRINT(BUILDSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else if type='C' then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   length = klength(tempstring);
MPRINT(BUILDSCORECODE):   if length < 195 then do;
MPRINT(BUILDSCORECODE):   string = tempstring;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put 'else';
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._group_ then do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else do;";
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   *end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      476:46    541:23    593:67    608:50    686:46    910:46    969:46    1040:46   1219:46   1329:46   1365:46   
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=53,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 780 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 64.
NOTE: There were 148 observations read from the data set WORK.CLASS_NOSV.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   filename Y "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMPUBLISHSCORE.sas";
MPRINT(APPENDFILES):   data _null_;
MPRINT(APPENDFILES):   length c $256;
MPRINT(APPENDFILES):   fid1=fopen("Y",'A');
MPRINT(APPENDFILES):   fid2=fopen("X",'I');
MPRINT(APPENDFILES):   cval = finfo(fid2,'lrecl');
MPRINT(APPENDFILES):   put cval= fid1= fid2=;
MPRINT(APPENDFILES):   if (fid2 > 0) then do while(fread(fid2)=0);
MPRINT(APPENDFILES):   rc = fget(fid2,c,256);
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   rc = fput(fid1,strip(c));
MPRINT(APPENDFILES):   rc = fwrite(fid1);
MPRINT(APPENDFILES):   end;
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   put _msg_=;
MPRINT(APPENDFILES):   rc = fclose(fid1);
MPRINT(APPENDFILES):   rc = fclose(fid2);
MPRINT(APPENDFILES):   run;

cval=256 fid1=1 fid2=2
_msg_=WARNING: End of file.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(BUILDSCORECODE):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("BINCODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "BINCODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
36111     +%macro delDir(folder=);
36112     +   %let filrf=mydir;
36113     +   %let rc=%sysfunc(filename(filrf,&folder));
36114     +   %let did=%sysfunc(dopen(&filrf));
36116     +   %if &did %then %do;
36117     +       %let memcount=%sysfunc(dnum(&did));
36118     +       %if &memcount > 0 %then %do;
36119     +           %do i=1 %to &memcount;
36120     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
36121     +               data _null_;
36122     +                  fname="_temp&i";
36123     +                  rc=filename(fname,"&folder&em_dsep.&name");
36124     +                  if rc = 0 and fexist(fname) then
36125     +                     rc=fdelete(fname);
36126     +                  rc=filename(fname);
36127     +               run;
36128     +           %end;
36129     +       %end;
36130     +       %let rc=%sysfunc(dclose(&did));
36131     +   %end;
36132     +   %let rc = %sysfunc(fdelete(&filrf));
36133     +   %let rc=%sysfunc(filename(filrf));
36134     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(BUILDOPTSCORECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_AcceptedCmp5.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp2";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Frq.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp3";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Income.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp4";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Mnt.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp5";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntFishProducts.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp6";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntGoldProds.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp7";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntMeatProducts.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp8";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntWines.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp9";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumCatalogPurchases.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp10";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumDistPurchases.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp11";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumWebPurchases.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp12";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Recency.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp13";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_RFMstat.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp14";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp15";
MPRINT(DELDIR):   rc=filename(fname,"C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\_ALL_.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length rc $200;
MPRINT(BUILDOPTSCORECODE):   rc = dcreate('BINCODE', "C:\\predictive-models-project\Workspaces\EMWS8\BINNING");
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_AcceptedCmp5.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="AcceptedCmp5";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      244:46    322:23    382:67    400:50    490:46    760:46    830:46    912:46    1124:46   1242:46   1284:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_AcceptedCmp5.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 2 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='AcceptedCmp5';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_AcceptedCmpTotal.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="AcceptedCmpTotal";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1516:46   1594:23   1654:67   1672:50   1762:46   2032:46   2102:46   2184:46   2396:46   2514:46   2556:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_AcceptedCmpTotal.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 22 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 3 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='AcceptedCmpTotal';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Frq.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Frq";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2788:46   2866:23   2926:67   2944:50   3034:46   3304:46   3374:46   3456:46   3668:46   3786:46   3828:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Frq.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 50 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Frq';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Income.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Income";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4060:46   4138:23   4198:67   4216:50   4306:46   4576:46   4646:46   4728:46   4940:46   5058:46   5100:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Income.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 51 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Income';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Mnt.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Mnt";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5332:46   5410:23   5470:67   5488:50   5578:46   5848:46   5918:46   6000:46   6212:46   6330:46   6372:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Mnt.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 50 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Mnt';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntFishProducts.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="MntFishProducts";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      6604:46   6682:23   6742:67   6760:50   6850:46   7120:46   7190:46   7272:46   7484:46   7602:46   7644:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntFishProducts.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 51 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='MntFishProducts';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntGoldProds.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="MntGoldProds";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7876:46   7954:23   8014:67   8032:50   8122:46   8392:46   8462:46   8544:46   8756:46   8874:46   8916:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntGoldProds.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 51 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='MntGoldProds';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntMeatProducts.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="MntMeatProducts";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      9148:46    9226:23    9286:67    9304:50    9394:46    9664:46    9734:46    9816:46    10028:46   10146:46   10188:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntMeatProducts.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 51 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='MntMeatProducts';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntSweetProducts.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="MntSweetProducts";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      10420:46   10498:23   10558:67   10576:50   10666:46   10936:46   11006:46   11088:46   11300:46   11418:46   11460:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntSweetProducts.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 51 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='MntSweetProducts';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntWines.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="MntWines";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      11692:46   11770:23   11830:67   11848:50   11938:46   12208:46   12278:46   12360:46   12572:46   12690:46   12732:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_MntWines.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 51 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='MntWines';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumCatalogPurchases.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="NumCatalogPurchases";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12964:46   13042:23   13102:67   13120:50   13210:46   13480:46   13550:46   13632:46   13844:46   13962:46   14004:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumCatalogPurchases.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 39 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 64.
NOTE: There were 7 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='NumCatalogPurchases';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumDistPurchases.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="NumDistPurchases";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      14236:46   14314:23   14374:67   14392:50   14482:46   14752:46   14822:46   14904:46   15116:46   15234:46   15276:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumDistPurchases.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 50 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='NumDistPurchases';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumWebPurchases.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="NumWebPurchases";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15508:46   15586:23   15646:67   15664:50   15754:46   16024:46   16094:46   16176:46   16388:46   16506:46   16548:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumWebPurchases.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 43 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 8 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='NumWebPurchases';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumWebVisitsMonth.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="NumWebVisitsMonth";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      16780:46   16858:23   16918:67   16936:50   17026:46   17296:46   17366:46   17448:46   17660:46   17778:46   17820:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_NumWebVisitsMonth.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 43 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 8 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='NumWebVisitsMonth';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_RFMstat.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="RFMstat";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18052:46   18130:23   18190:67   18208:50   18298:46   18568:46   18638:46   18720:46   18932:46   19050:46   19092:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_RFMstat.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 50 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='RFMstat';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="RMntFrq";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      19324:46   19402:23   19462:67   19480:50   19570:46   19840:46   19910:46   19992:46   20204:46   20322:46   20364:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_RMntFrq.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 50 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='RMntFrq';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Recency.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $200 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="Recency";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFORMAT) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      20596:46   20674:23   20734:67   20752:50   20842:46   21112:46   21182:46   21264:46   21476:46   21594:46   21636:46   
NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\GRP_Recency.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 51 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='Recency';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   put "length _UFormat $200;";
MPRINT(BUILDOPTSCORECODE):   put "drop _UFormat;";
MPRINT(BUILDOPTSCORECODE):   put "_UFormat='';";
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The file _F1 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINCODE\_ALL_.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=28. April 2016 15.47 Uhr

NOTE: 3 records were written to the file _F1.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "BINNING_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   proc datasets lib=EMWS8 nolist;
MPRINT(BUILDOPTSCORECODE):   delete BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Deleting EMWS8.BINNING_EMSCOREVAR (memtype=DATA).
MPRINT(BUILDOPTSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.19 seconds
      cpu time            0.17 seconds
      

did= 1
MPRINT(BUILDOPTSCORECODE):   data EMWS8.BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   length Name $32 formula $70 file $200;
MPRINT(BUILDOPTSCORECODE):   keep NAME Formula file;
MPRINT(BUILDOPTSCORECODE):   formula = '';
MPRINT(BUILDOPTSCORECODE):   name='';
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_AcceptedCmp5";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_AcceptedCmp5.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_AcceptedCmpTotal";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_AcceptedCmpTotal.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Frq";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Frq.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Income";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Income.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Mnt";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Mnt.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_MntFishProducts";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_MntFishProducts.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_MntGoldProds";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_MntGoldProds.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_MntMeatProducts";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_MntMeatProducts.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_MntSweetProducts";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_MntSweetProducts.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_MntWines";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_MntWines.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_NumCatalogPurchases";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_NumCatalogPurchases.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_NumDistPurchases";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_NumDistPurchases.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_NumWebPurchases";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_NumWebPurchases.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_NumWebVisitsMonth";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_NumWebVisitsMonth.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_Recency";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_Recency.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_RFMstat";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_RFMstat.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_RMntFrq";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_RMntFrq.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The data set EMWS8.BINNING_EMSCOREVAR has 18 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   proc datasets library=work nolist;
MPRINT(BUILDSCORECODE):   delete class class_nosv temp temp_missing tempmappings tempcmeta;
MPRINT(BUILDSCORECODE):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.CLASS_NOSV (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPINGS (memtype=DATA).
NOTE: Deleting WORK.TEMPCMETA (memtype=DATA).
MPRINT(BUILDSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas";
MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file deltaref;
MPRINT(BUILDMETACODE):   put "if name = 'RFMstat' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RFMstat' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RFMstat' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Recency' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Recency' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Recency' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'AcceptedCmpTotal' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmpTotal' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmpTotal' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MntMeatProducts' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntMeatProducts' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntMeatProducts' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NumCatalogPurchases' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumCatalogPurchases' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumCatalogPurchases' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NumDistPurchases' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumDistPurchases' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumDistPurchases' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Mnt' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Mnt' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Mnt' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'RMntFrq' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RMntFrq' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_RMntFrq' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Income' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Income' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Income' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Frq' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Frq' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Frq' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MntWines' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntWines' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntWines' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MntGoldProds' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntGoldProds' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntGoldProds' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MntFishProducts' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntFishProducts' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntFishProducts' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NumWebPurchases' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumWebPurchases' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumWebPurchases' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NumWebVisitsMonth' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumWebVisitsMonth' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumWebVisitsMonth' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MntSweetProducts' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntSweetProducts' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntSweetProducts' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'AcceptedCmp5' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp5' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp5' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NumDealsPurchases' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumDealsPurchases' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumDealsPurchases' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'AcceptedCmp3' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp3' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp3' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'AcceptedCmp1' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp1' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp1' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MntFruits' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntFruits' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MntFruits' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Teenhome' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Teenhome' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Teenhome' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Marital_Status' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Marital_Status' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Marital_Status' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NumStorePurchases' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumStorePurchases' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NumStorePurchases' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'AcceptedCmp4' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp4' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp4' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Age' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Age' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Age' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MonthsAsCustomer' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MonthsAsCustomer' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MonthsAsCustomer' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Education' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Education' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Education' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Kidhome' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Kidhome' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Kidhome' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'AcceptedCmp2' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp2' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_AcceptedCmp2' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'HigherEducationBinary' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_HigherEducationBinary' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_HigherEducationBinary' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'Complain' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Complain' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_Complain' then level='NOMINAL';";
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 96 records were written to the file DELTAREF.
      The minimum record length was 37.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file deltaref MOD;
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=4774,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 0 records were written to the file DELTAREF.
NOTE: DATA statement used (Total process time):
      real time           0.66 seconds
      cpu time            0.60 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref;
NOTE: Fileref DELTAREF has been deassigned.
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "OUTPUTTABLE";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77592394490536;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "STATPLOT";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_GINI_";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_ROLE_";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.5490413650633;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36135      
36136      *------------------------------------------------------------*;
36137      * End SCORE: BINNING;
36138      *------------------------------------------------------------*;

36139      filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36140      *------------------------------------------------------------*;
36141      * BINNING: Scoring DATA data;
36142      *------------------------------------------------------------*;
36143      data EMWS8.BINNING_TRAIN
36144      / view=EMWS8.BINNING_TRAIN
36145      ;
MPRINT(EM_DIAGRAM):   data EMWS8.BINNING_TRAIN / view=EMWS8.BINNING_TRAIN ;
36146      set EMWS8.Part_TRAIN
36147      ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_TRAIN ;
36148      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas.
36149     +length _UFormat $200;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
36150     +drop _UFormat;
MPRINT(EM_DIAGRAM):   drop _UFormat;
36151     +_UFormat='';
MPRINT(EM_DIAGRAM):   _UFormat='';
36152     +
36153     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36154     +* Variable: AcceptedCmp5;
MPRINT(EM_DIAGRAM):   * Variable: AcceptedCmp5;
36155     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36156     +LABEL GRP_AcceptedCmp5 =
36157     +'Grouped: AcceptedCmp5';
MPRINT(EM_DIAGRAM):   LABEL GRP_AcceptedCmp5 = 'Grouped: AcceptedCmp5';
36158     +
36159     +_UFormat = put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _UFormat = put(AcceptedCmp5,BEST.);
36160     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
36161     +if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
36162     +GRP_AcceptedCmp5 = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 1;
36163     +end;
MPRINT(EM_DIAGRAM):   end;
36164     +else if NOT MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
36165     +if (_UFORMAT eq '0'
36166     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq '0' ) then do;
36167     +GRP_AcceptedCmp5 = 2;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 2;
36168     +end;
MPRINT(EM_DIAGRAM):   end;
36169     +else
36170     +if (_UFORMAT eq '1'
36171     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq '1' ) then do;
36172     +GRP_AcceptedCmp5 = 3;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 3;
36173     +end;
MPRINT(EM_DIAGRAM):   end;
36174     +else do;
MPRINT(EM_DIAGRAM):   else do;
36175     +GRP_AcceptedCmp5 = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 1;
36176     +end;
MPRINT(EM_DIAGRAM):   end;
36177     +end;
MPRINT(EM_DIAGRAM):   end;
36178     +
36179     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36180     +* Variable: AcceptedCmpTotal;
MPRINT(EM_DIAGRAM):   * Variable: AcceptedCmpTotal;
36181     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36182     +LABEL GRP_AcceptedCmpTotal = "Grouped: AcceptedCmpTotal";
MPRINT(EM_DIAGRAM):   LABEL GRP_AcceptedCmpTotal = "Grouped: AcceptedCmpTotal";
36183     +
36184     +if MISSING(AcceptedCmpTotal) then do;
MPRINT(EM_DIAGRAM):   if MISSING(AcceptedCmpTotal) then do;
36185     +GRP_AcceptedCmpTotal = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 1;
36186     +end;
MPRINT(EM_DIAGRAM):   end;
36187     +else if NOT MISSING(AcceptedCmpTotal) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(AcceptedCmpTotal) then do;
36188     +if AcceptedCmpTotal < 0 then do;
MPRINT(EM_DIAGRAM):   if AcceptedCmpTotal < 0 then do;
36189     +GRP_AcceptedCmpTotal = 2;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 2;
36190     +end;
MPRINT(EM_DIAGRAM):   end;
36191     +else
36192     +if 0 <= AcceptedCmpTotal AND AcceptedCmpTotal < 1 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= AcceptedCmpTotal AND AcceptedCmpTotal < 1 then do;
36193     +GRP_AcceptedCmpTotal = 3;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 3;
36194     +end;
MPRINT(EM_DIAGRAM):   end;
36195     +else
36196     +if 1 <= AcceptedCmpTotal then do;
MPRINT(EM_DIAGRAM):   else if 1 <= AcceptedCmpTotal then do;
36197     +GRP_AcceptedCmpTotal = 4;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 4;
36198     +end;
MPRINT(EM_DIAGRAM):   end;
36199     +end;
MPRINT(EM_DIAGRAM):   end;
36200     +
36201     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36202     +* Variable: Frq;
MPRINT(EM_DIAGRAM):   * Variable: Frq;
36203     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36204     +LABEL GRP_Frq = "Grouped: Frq";
MPRINT(EM_DIAGRAM):   LABEL GRP_Frq = "Grouped: Frq";
36205     +
36206     +if MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Frq) then do;
36207     +GRP_Frq = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq = 1;
36208     +end;
MPRINT(EM_DIAGRAM):   end;
36209     +else if NOT MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Frq) then do;
36210     +if Frq < 4 then do;
MPRINT(EM_DIAGRAM):   if Frq < 4 then do;
36211     +GRP_Frq = 2;
MPRINT(EM_DIAGRAM):   GRP_Frq = 2;
36212     +end;
MPRINT(EM_DIAGRAM):   end;
36213     +else
36214     +if 4 <= Frq AND Frq < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= Frq AND Frq < 5 then do;
36215     +GRP_Frq = 3;
MPRINT(EM_DIAGRAM):   GRP_Frq = 3;
36216     +end;
MPRINT(EM_DIAGRAM):   end;
36217     +else
36218     +if 5 <= Frq AND Frq < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= Frq AND Frq < 6 then do;
36219     +GRP_Frq = 4;
MPRINT(EM_DIAGRAM):   GRP_Frq = 4;
36220     +end;
MPRINT(EM_DIAGRAM):   end;
36221     +else
36222     +if 6 <= Frq AND Frq < 9 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= Frq AND Frq < 9 then do;
36223     +GRP_Frq = 5;
MPRINT(EM_DIAGRAM):   GRP_Frq = 5;
36224     +end;
MPRINT(EM_DIAGRAM):   end;
36225     +else
36226     +if 9 <= Frq AND Frq < 12 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= Frq AND Frq < 12 then do;
36227     +GRP_Frq = 6;
MPRINT(EM_DIAGRAM):   GRP_Frq = 6;
36228     +end;
MPRINT(EM_DIAGRAM):   end;
36229     +else
36230     +if 12 <= Frq AND Frq < 15 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= Frq AND Frq < 15 then do;
36231     +GRP_Frq = 7;
MPRINT(EM_DIAGRAM):   GRP_Frq = 7;
36232     +end;
MPRINT(EM_DIAGRAM):   end;
36233     +else
36234     +if 15 <= Frq AND Frq < 17 then do;
MPRINT(EM_DIAGRAM):   else if 15 <= Frq AND Frq < 17 then do;
36235     +GRP_Frq = 8;
MPRINT(EM_DIAGRAM):   GRP_Frq = 8;
36236     +end;
MPRINT(EM_DIAGRAM):   end;
36237     +else
36238     +if 17 <= Frq AND Frq < 20 then do;
MPRINT(EM_DIAGRAM):   else if 17 <= Frq AND Frq < 20 then do;
36239     +GRP_Frq = 9;
MPRINT(EM_DIAGRAM):   GRP_Frq = 9;
36240     +end;
MPRINT(EM_DIAGRAM):   end;
36241     +else
36242     +if 20 <= Frq AND Frq < 23 then do;
MPRINT(EM_DIAGRAM):   else if 20 <= Frq AND Frq < 23 then do;
36243     +GRP_Frq = 10;
MPRINT(EM_DIAGRAM):   GRP_Frq = 10;
36244     +end;
MPRINT(EM_DIAGRAM):   end;
36245     +else
36246     +if 23 <= Frq then do;
MPRINT(EM_DIAGRAM):   else if 23 <= Frq then do;
36247     +GRP_Frq = 11;
MPRINT(EM_DIAGRAM):   GRP_Frq = 11;
36248     +end;
MPRINT(EM_DIAGRAM):   end;
36249     +end;
MPRINT(EM_DIAGRAM):   end;
36250     +
36251     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36252     +* Variable: Income;
MPRINT(EM_DIAGRAM):   * Variable: Income;
36253     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36254     +LABEL GRP_Income =
36255     +'Grouped: Income';
MPRINT(EM_DIAGRAM):   LABEL GRP_Income = 'Grouped: Income';
36256     +
36257     +if MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Income) then do;
36258     +GRP_Income = 1;
MPRINT(EM_DIAGRAM):   GRP_Income = 1;
36259     +end;
MPRINT(EM_DIAGRAM):   end;
36260     +else if NOT MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Income) then do;
36261     +if Income < 23983 then do;
MPRINT(EM_DIAGRAM):   if Income < 23983 then do;
36262     +GRP_Income = 2;
MPRINT(EM_DIAGRAM):   GRP_Income = 2;
36263     +end;
MPRINT(EM_DIAGRAM):   end;
36264     +else
36265     +if 23983 <= Income AND Income < 31322 then do;
MPRINT(EM_DIAGRAM):   else if 23983 <= Income AND Income < 31322 then do;
36266     +GRP_Income = 3;
MPRINT(EM_DIAGRAM):   GRP_Income = 3;
36267     +end;
MPRINT(EM_DIAGRAM):   end;
36268     +else
36269     +if 31322 <= Income AND Income < 38157 then do;
MPRINT(EM_DIAGRAM):   else if 31322 <= Income AND Income < 38157 then do;
36270     +GRP_Income = 4;
MPRINT(EM_DIAGRAM):   GRP_Income = 4;
36271     +end;
MPRINT(EM_DIAGRAM):   end;
36272     +else
36273     +if 38157 <= Income AND Income < 44900 then do;
MPRINT(EM_DIAGRAM):   else if 38157 <= Income AND Income < 44900 then do;
36274     +GRP_Income = 5;
MPRINT(EM_DIAGRAM):   GRP_Income = 5;
36275     +end;
MPRINT(EM_DIAGRAM):   end;
36276     +else
36277     +if 44900 <= Income AND Income < 52157 then do;
MPRINT(EM_DIAGRAM):   else if 44900 <= Income AND Income < 52157 then do;
36278     +GRP_Income = 6;
MPRINT(EM_DIAGRAM):   GRP_Income = 6;
36279     +end;
MPRINT(EM_DIAGRAM):   end;
36280     +else
36281     +if 52157 <= Income AND Income < 59111 then do;
MPRINT(EM_DIAGRAM):   else if 52157 <= Income AND Income < 59111 then do;
36282     +GRP_Income = 7;
MPRINT(EM_DIAGRAM):   GRP_Income = 7;
36283     +end;
MPRINT(EM_DIAGRAM):   end;
36284     +else
36285     +if 59111 <= Income AND Income < 65808 then do;
MPRINT(EM_DIAGRAM):   else if 59111 <= Income AND Income < 65808 then do;
36286     +GRP_Income = 8;
MPRINT(EM_DIAGRAM):   GRP_Income = 8;
36287     +end;
MPRINT(EM_DIAGRAM):   end;
36288     +else
36289     +if 65808 <= Income AND Income < 72025 then do;
MPRINT(EM_DIAGRAM):   else if 65808 <= Income AND Income < 72025 then do;
36290     +GRP_Income = 9;
MPRINT(EM_DIAGRAM):   GRP_Income = 9;
36291     +end;
MPRINT(EM_DIAGRAM):   end;
36292     +else
36293     +if 72025 <= Income AND Income < 79470 then do;
MPRINT(EM_DIAGRAM):   else if 72025 <= Income AND Income < 79470 then do;
36294     +GRP_Income = 10;
MPRINT(EM_DIAGRAM):   GRP_Income = 10;
36295     +end;
MPRINT(EM_DIAGRAM):   end;
36296     +else
36297     +if 79470 <= Income then do;
MPRINT(EM_DIAGRAM):   else if 79470 <= Income then do;
36298     +GRP_Income = 11;
MPRINT(EM_DIAGRAM):   GRP_Income = 11;
36299     +end;
MPRINT(EM_DIAGRAM):   end;
36300     +end;
MPRINT(EM_DIAGRAM):   end;
36301     +
36302     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36303     +* Variable: Mnt;
MPRINT(EM_DIAGRAM):   * Variable: Mnt;
36304     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36305     +LABEL GRP_Mnt = "Grouped: Mnt";
MPRINT(EM_DIAGRAM):   LABEL GRP_Mnt = "Grouped: Mnt";
36306     +
36307     +if MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Mnt) then do;
36308     +GRP_Mnt = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 1;
36309     +end;
MPRINT(EM_DIAGRAM):   end;
36310     +else if NOT MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Mnt) then do;
36311     +if Mnt < 34 then do;
MPRINT(EM_DIAGRAM):   if Mnt < 34 then do;
36312     +GRP_Mnt = 2;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 2;
36313     +end;
MPRINT(EM_DIAGRAM):   end;
36314     +else
36315     +if 34 <= Mnt AND Mnt < 57 then do;
MPRINT(EM_DIAGRAM):   else if 34 <= Mnt AND Mnt < 57 then do;
36316     +GRP_Mnt = 3;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 3;
36317     +end;
MPRINT(EM_DIAGRAM):   end;
36318     +else
36319     +if 57 <= Mnt AND Mnt < 94 then do;
MPRINT(EM_DIAGRAM):   else if 57 <= Mnt AND Mnt < 94 then do;
36320     +GRP_Mnt = 4;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 4;
36321     +end;
MPRINT(EM_DIAGRAM):   end;
36322     +else
36323     +if 94 <= Mnt AND Mnt < 219 then do;
MPRINT(EM_DIAGRAM):   else if 94 <= Mnt AND Mnt < 219 then do;
36324     +GRP_Mnt = 5;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 5;
36325     +end;
MPRINT(EM_DIAGRAM):   end;
36326     +else
36327     +if 219 <= Mnt AND Mnt < 405.5 then do;
MPRINT(EM_DIAGRAM):   else if 219 <= Mnt AND Mnt < 405.5 then do;
36328     +GRP_Mnt = 6;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 6;
36329     +end;
MPRINT(EM_DIAGRAM):   end;
36330     +else
36331     +if 405.5 <= Mnt AND Mnt < 650 then do;
MPRINT(EM_DIAGRAM):   else if 405.5 <= Mnt AND Mnt < 650 then do;
36332     +GRP_Mnt = 7;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 7;
36333     +end;
MPRINT(EM_DIAGRAM):   end;
36334     +else
36335     +if 650 <= Mnt AND Mnt < 906 then do;
MPRINT(EM_DIAGRAM):   else if 650 <= Mnt AND Mnt < 906 then do;
36336     +GRP_Mnt = 8;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 8;
36337     +end;
MPRINT(EM_DIAGRAM):   end;
36338     +else
36339     +if 906 <= Mnt AND Mnt < 1215 then do;
MPRINT(EM_DIAGRAM):   else if 906 <= Mnt AND Mnt < 1215 then do;
36340     +GRP_Mnt = 9;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 9;
36341     +end;
MPRINT(EM_DIAGRAM):   end;
36342     +else
36343     +if 1215 <= Mnt AND Mnt < 1526 then do;
MPRINT(EM_DIAGRAM):   else if 1215 <= Mnt AND Mnt < 1526 then do;
36344     +GRP_Mnt = 10;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 10;
36345     +end;
MPRINT(EM_DIAGRAM):   end;
36346     +else
36347     +if 1526 <= Mnt then do;
MPRINT(EM_DIAGRAM):   else if 1526 <= Mnt then do;
36348     +GRP_Mnt = 11;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 11;
36349     +end;
MPRINT(EM_DIAGRAM):   end;
36350     +end;
MPRINT(EM_DIAGRAM):   end;
36351     +
36352     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36353     +* Variable: MntFishProducts;
MPRINT(EM_DIAGRAM):   * Variable: MntFishProducts;
36354     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36355     +LABEL GRP_MntFishProducts =
36356     +'Grouped: MntFishProducts';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntFishProducts = 'Grouped: MntFishProducts';
36357     +
36358     +if MISSING(MntFishProducts) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntFishProducts) then do;
36359     +GRP_MntFishProducts = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 1;
36360     +end;
MPRINT(EM_DIAGRAM):   end;
36361     +else if NOT MISSING(MntFishProducts) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntFishProducts) then do;
36362     +if MntFishProducts < 0 then do;
MPRINT(EM_DIAGRAM):   if MntFishProducts < 0 then do;
36363     +GRP_MntFishProducts = 2;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 2;
36364     +end;
MPRINT(EM_DIAGRAM):   end;
36365     +else
36366     +if 0 <= MntFishProducts AND MntFishProducts < 2 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= MntFishProducts AND MntFishProducts < 2 then do;
36367     +GRP_MntFishProducts = 3;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 3;
36368     +end;
MPRINT(EM_DIAGRAM):   end;
36369     +else
36370     +if 2 <= MntFishProducts AND MntFishProducts < 4 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= MntFishProducts AND MntFishProducts < 4 then do;
36371     +GRP_MntFishProducts = 4;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 4;
36372     +end;
MPRINT(EM_DIAGRAM):   end;
36373     +else
36374     +if 4 <= MntFishProducts AND MntFishProducts < 7 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= MntFishProducts AND MntFishProducts < 7 then do;
36375     +GRP_MntFishProducts = 5;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 5;
36376     +end;
MPRINT(EM_DIAGRAM):   end;
36377     +else
36378     +if 7 <= MntFishProducts AND MntFishProducts < 13 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= MntFishProducts AND MntFishProducts < 13 then do;
36379     +GRP_MntFishProducts = 6;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 6;
36380     +end;
MPRINT(EM_DIAGRAM):   end;
36381     +else
36382     +if 13 <= MntFishProducts AND MntFishProducts < 23 then do;
MPRINT(EM_DIAGRAM):   else if 13 <= MntFishProducts AND MntFishProducts < 23 then do;
36383     +GRP_MntFishProducts = 7;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 7;
36384     +end;
MPRINT(EM_DIAGRAM):   end;
36385     +else
36386     +if 23 <= MntFishProducts AND MntFishProducts < 37 then do;
MPRINT(EM_DIAGRAM):   else if 23 <= MntFishProducts AND MntFishProducts < 37 then do;
36387     +GRP_MntFishProducts = 8;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 8;
36388     +end;
MPRINT(EM_DIAGRAM):   end;
36389     +else
36390     +if 37 <= MntFishProducts AND MntFishProducts < 62 then do;
MPRINT(EM_DIAGRAM):   else if 37 <= MntFishProducts AND MntFishProducts < 62 then do;
36391     +GRP_MntFishProducts = 9;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 9;
36392     +end;
MPRINT(EM_DIAGRAM):   end;
36393     +else
36394     +if 62 <= MntFishProducts AND MntFishProducts < 116 then do;
MPRINT(EM_DIAGRAM):   else if 62 <= MntFishProducts AND MntFishProducts < 116 then do;
36395     +GRP_MntFishProducts = 10;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 10;
36396     +end;
MPRINT(EM_DIAGRAM):   end;
36397     +else
36398     +if 116 <= MntFishProducts then do;
MPRINT(EM_DIAGRAM):   else if 116 <= MntFishProducts then do;
36399     +GRP_MntFishProducts = 11;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 11;
36400     +end;
MPRINT(EM_DIAGRAM):   end;
36401     +end;
MPRINT(EM_DIAGRAM):   end;
36402     +
36403     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36404     +* Variable: MntGoldProds;
MPRINT(EM_DIAGRAM):   * Variable: MntGoldProds;
36405     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36406     +LABEL GRP_MntGoldProds =
36407     +'Grouped: MntGoldProds';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntGoldProds = 'Grouped: MntGoldProds';
36408     +
36409     +if MISSING(MntGoldProds) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntGoldProds) then do;
36410     +GRP_MntGoldProds = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 1;
36411     +end;
MPRINT(EM_DIAGRAM):   end;
36412     +else if NOT MISSING(MntGoldProds) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntGoldProds) then do;
36413     +if MntGoldProds < 3 then do;
MPRINT(EM_DIAGRAM):   if MntGoldProds < 3 then do;
36414     +GRP_MntGoldProds = 2;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 2;
36415     +end;
MPRINT(EM_DIAGRAM):   end;
36416     +else
36417     +if 3 <= MntGoldProds AND MntGoldProds < 7 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= MntGoldProds AND MntGoldProds < 7 then do;
36418     +GRP_MntGoldProds = 3;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 3;
36419     +end;
MPRINT(EM_DIAGRAM):   end;
36420     +else
36421     +if 7 <= MntGoldProds AND MntGoldProds < 12 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= MntGoldProds AND MntGoldProds < 12 then do;
36422     +GRP_MntGoldProds = 4;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 4;
36423     +end;
MPRINT(EM_DIAGRAM):   end;
36424     +else
36425     +if 12 <= MntGoldProds AND MntGoldProds < 17 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= MntGoldProds AND MntGoldProds < 17 then do;
36426     +GRP_MntGoldProds = 5;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 5;
36427     +end;
MPRINT(EM_DIAGRAM):   end;
36428     +else
36429     +if 17 <= MntGoldProds AND MntGoldProds < 25 then do;
MPRINT(EM_DIAGRAM):   else if 17 <= MntGoldProds AND MntGoldProds < 25 then do;
36430     +GRP_MntGoldProds = 6;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 6;
36431     +end;
MPRINT(EM_DIAGRAM):   end;
36432     +else
36433     +if 25 <= MntGoldProds AND MntGoldProds < 34 then do;
MPRINT(EM_DIAGRAM):   else if 25 <= MntGoldProds AND MntGoldProds < 34 then do;
36434     +GRP_MntGoldProds = 7;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 7;
36435     +end;
MPRINT(EM_DIAGRAM):   end;
36436     +else
36437     +if 34 <= MntGoldProds AND MntGoldProds < 48 then do;
MPRINT(EM_DIAGRAM):   else if 34 <= MntGoldProds AND MntGoldProds < 48 then do;
36438     +GRP_MntGoldProds = 8;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 8;
36439     +end;
MPRINT(EM_DIAGRAM):   end;
36440     +else
36441     +if 48 <= MntGoldProds AND MntGoldProds < 74 then do;
MPRINT(EM_DIAGRAM):   else if 48 <= MntGoldProds AND MntGoldProds < 74 then do;
36442     +GRP_MntGoldProds = 9;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 9;
36443     +end;
MPRINT(EM_DIAGRAM):   end;
36444     +else
36445     +if 74 <= MntGoldProds AND MntGoldProds < 116 then do;
MPRINT(EM_DIAGRAM):   else if 74 <= MntGoldProds AND MntGoldProds < 116 then do;
36446     +GRP_MntGoldProds = 10;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 10;
36447     +end;
MPRINT(EM_DIAGRAM):   end;
36448     +else
36449     +if 116 <= MntGoldProds then do;
MPRINT(EM_DIAGRAM):   else if 116 <= MntGoldProds then do;
36450     +GRP_MntGoldProds = 11;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 11;
36451     +end;
MPRINT(EM_DIAGRAM):   end;
36452     +end;
MPRINT(EM_DIAGRAM):   end;
36453     +
36454     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36455     +* Variable: MntMeatProducts;
MPRINT(EM_DIAGRAM):   * Variable: MntMeatProducts;
36456     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36457     +LABEL GRP_MntMeatProducts =
36458     +'Grouped: MntMeatProducts';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntMeatProducts = 'Grouped: MntMeatProducts';
36459     +
36460     +if MISSING(MntMeatProducts) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntMeatProducts) then do;
36461     +GRP_MntMeatProducts = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 1;
36462     +end;
MPRINT(EM_DIAGRAM):   end;
36463     +else if NOT MISSING(MntMeatProducts) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntMeatProducts) then do;
36464     +if MntMeatProducts < 7 then do;
MPRINT(EM_DIAGRAM):   if MntMeatProducts < 7 then do;
36465     +GRP_MntMeatProducts = 2;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 2;
36466     +end;
MPRINT(EM_DIAGRAM):   end;
36467     +else
36468     +if 7 <= MntMeatProducts AND MntMeatProducts < 12 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= MntMeatProducts AND MntMeatProducts < 12 then do;
36469     +GRP_MntMeatProducts = 3;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 3;
36470     +end;
MPRINT(EM_DIAGRAM):   end;
36471     +else
36472     +if 12 <= MntMeatProducts AND MntMeatProducts < 21 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= MntMeatProducts AND MntMeatProducts < 21 then do;
36473     +GRP_MntMeatProducts = 4;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 4;
36474     +end;
MPRINT(EM_DIAGRAM):   end;
36475     +else
36476     +if 21 <= MntMeatProducts AND MntMeatProducts < 38 then do;
MPRINT(EM_DIAGRAM):   else if 21 <= MntMeatProducts AND MntMeatProducts < 38 then do;
36477     +GRP_MntMeatProducts = 5;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 5;
36478     +end;
MPRINT(EM_DIAGRAM):   end;
36479     +else
36480     +if 38 <= MntMeatProducts AND MntMeatProducts < 72 then do;
MPRINT(EM_DIAGRAM):   else if 38 <= MntMeatProducts AND MntMeatProducts < 72 then do;
36481     +GRP_MntMeatProducts = 6;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 6;
36482     +end;
MPRINT(EM_DIAGRAM):   end;
36483     +else
36484     +if 72 <= MntMeatProducts AND MntMeatProducts < 116 then do;
MPRINT(EM_DIAGRAM):   else if 72 <= MntMeatProducts AND MntMeatProducts < 116 then do;
36485     +GRP_MntMeatProducts = 7;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 7;
36486     +end;
MPRINT(EM_DIAGRAM):   end;
36487     +else
36488     +if 116 <= MntMeatProducts AND MntMeatProducts < 186 then do;
MPRINT(EM_DIAGRAM):   else if 116 <= MntMeatProducts AND MntMeatProducts < 186 then do;
36489     +GRP_MntMeatProducts = 8;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 8;
36490     +end;
MPRINT(EM_DIAGRAM):   end;
36491     +else
36492     +if 186 <= MntMeatProducts AND MntMeatProducts < 309 then do;
MPRINT(EM_DIAGRAM):   else if 186 <= MntMeatProducts AND MntMeatProducts < 309 then do;
36493     +GRP_MntMeatProducts = 9;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 9;
36494     +end;
MPRINT(EM_DIAGRAM):   end;
36495     +else
36496     +if 309 <= MntMeatProducts AND MntMeatProducts < 518 then do;
MPRINT(EM_DIAGRAM):   else if 309 <= MntMeatProducts AND MntMeatProducts < 518 then do;
36497     +GRP_MntMeatProducts = 10;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 10;
36498     +end;
MPRINT(EM_DIAGRAM):   end;
36499     +else
36500     +if 518 <= MntMeatProducts then do;
MPRINT(EM_DIAGRAM):   else if 518 <= MntMeatProducts then do;
36501     +GRP_MntMeatProducts = 11;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 11;
36502     +end;
MPRINT(EM_DIAGRAM):   end;
36503     +end;
MPRINT(EM_DIAGRAM):   end;
36504     +
36505     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36506     +* Variable: MntSweetProducts;
MPRINT(EM_DIAGRAM):   * Variable: MntSweetProducts;
36507     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36508     +LABEL GRP_MntSweetProducts =
36509     +'Grouped: MntSweetProducts';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntSweetProducts = 'Grouped: MntSweetProducts';
36510     +
36511     +if MISSING(MntSweetProducts) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntSweetProducts) then do;
36512     +GRP_MntSweetProducts = 1;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 1;
36513     +end;
MPRINT(EM_DIAGRAM):   end;
36514     +else if NOT MISSING(MntSweetProducts) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntSweetProducts) then do;
36515     +if MntSweetProducts < 0 then do;
MPRINT(EM_DIAGRAM):   if MntSweetProducts < 0 then do;
36516     +GRP_MntSweetProducts = 2;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 2;
36517     +end;
MPRINT(EM_DIAGRAM):   end;
36518     +else
36519     +if 0 <= MntSweetProducts AND MntSweetProducts < 1 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= MntSweetProducts AND MntSweetProducts < 1 then do;
36520     +GRP_MntSweetProducts = 3;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 3;
36521     +end;
MPRINT(EM_DIAGRAM):   end;
36522     +else
36523     +if 1 <= MntSweetProducts AND MntSweetProducts < 3 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= MntSweetProducts AND MntSweetProducts < 3 then do;
36524     +GRP_MntSweetProducts = 4;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 4;
36525     +end;
MPRINT(EM_DIAGRAM):   end;
36526     +else
36527     +if 3 <= MntSweetProducts AND MntSweetProducts < 5 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= MntSweetProducts AND MntSweetProducts < 5 then do;
36528     +GRP_MntSweetProducts = 5;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 5;
36529     +end;
MPRINT(EM_DIAGRAM):   end;
36530     +else
36531     +if 5 <= MntSweetProducts AND MntSweetProducts < 9 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= MntSweetProducts AND MntSweetProducts < 9 then do;
36532     +GRP_MntSweetProducts = 6;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 6;
36533     +end;
MPRINT(EM_DIAGRAM):   end;
36534     +else
36535     +if 9 <= MntSweetProducts AND MntSweetProducts < 16 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= MntSweetProducts AND MntSweetProducts < 16 then do;
36536     +GRP_MntSweetProducts = 7;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 7;
36537     +end;
MPRINT(EM_DIAGRAM):   end;
36538     +else
36539     +if 16 <= MntSweetProducts AND MntSweetProducts < 27 then do;
MPRINT(EM_DIAGRAM):   else if 16 <= MntSweetProducts AND MntSweetProducts < 27 then do;
36540     +GRP_MntSweetProducts = 8;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 8;
36541     +end;
MPRINT(EM_DIAGRAM):   end;
36542     +else
36543     +if 27 <= MntSweetProducts AND MntSweetProducts < 46 then do;
MPRINT(EM_DIAGRAM):   else if 27 <= MntSweetProducts AND MntSweetProducts < 46 then do;
36544     +GRP_MntSweetProducts = 9;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 9;
36545     +end;
MPRINT(EM_DIAGRAM):   end;
36546     +else
36547     +if 46 <= MntSweetProducts AND MntSweetProducts < 84 then do;
MPRINT(EM_DIAGRAM):   else if 46 <= MntSweetProducts AND MntSweetProducts < 84 then do;
36548     +GRP_MntSweetProducts = 10;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 10;
36549     +end;
MPRINT(EM_DIAGRAM):   end;
36550     +else
36551     +if 84 <= MntSweetProducts then do;
MPRINT(EM_DIAGRAM):   else if 84 <= MntSweetProducts then do;
36552     +GRP_MntSweetProducts = 11;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 11;
36553     +end;
MPRINT(EM_DIAGRAM):   end;
36554     +end;
MPRINT(EM_DIAGRAM):   end;
36555     +
36556     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36557     +* Variable: MntWines;
MPRINT(EM_DIAGRAM):   * Variable: MntWines;
36558     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36559     +LABEL GRP_MntWines =
36560     +'Grouped: MntWines';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntWines = 'Grouped: MntWines';
36561     +
36562     +if MISSING(MntWines) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntWines) then do;
36563     +GRP_MntWines = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 1;
36564     +end;
MPRINT(EM_DIAGRAM):   end;
36565     +else if NOT MISSING(MntWines) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntWines) then do;
36566     +if MntWines < 6 then do;
MPRINT(EM_DIAGRAM):   if MntWines < 6 then do;
36567     +GRP_MntWines = 2;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 2;
36568     +end;
MPRINT(EM_DIAGRAM):   end;
36569     +else
36570     +if 6 <= MntWines AND MntWines < 16 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= MntWines AND MntWines < 16 then do;
36571     +GRP_MntWines = 3;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 3;
36572     +end;
MPRINT(EM_DIAGRAM):   end;
36573     +else
36574     +if 16 <= MntWines AND MntWines < 33 then do;
MPRINT(EM_DIAGRAM):   else if 16 <= MntWines AND MntWines < 33 then do;
36575     +GRP_MntWines = 4;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 4;
36576     +end;
MPRINT(EM_DIAGRAM):   end;
36577     +else
36578     +if 33 <= MntWines AND MntWines < 84 then do;
MPRINT(EM_DIAGRAM):   else if 33 <= MntWines AND MntWines < 84 then do;
36579     +GRP_MntWines = 5;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 5;
36580     +end;
MPRINT(EM_DIAGRAM):   end;
36581     +else
36582     +if 84 <= MntWines AND MntWines < 183.5 then do;
MPRINT(EM_DIAGRAM):   else if 84 <= MntWines AND MntWines < 183.5 then do;
36583     +GRP_MntWines = 6;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 6;
36584     +end;
MPRINT(EM_DIAGRAM):   end;
36585     +else
36586     +if 183.5 <= MntWines AND MntWines < 298 then do;
MPRINT(EM_DIAGRAM):   else if 183.5 <= MntWines AND MntWines < 298 then do;
36587     +GRP_MntWines = 7;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 7;
36588     +end;
MPRINT(EM_DIAGRAM):   end;
36589     +else
36590     +if 298 <= MntWines AND MntWines < 429 then do;
MPRINT(EM_DIAGRAM):   else if 298 <= MntWines AND MntWines < 429 then do;
36591     +GRP_MntWines = 8;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 8;
36592     +end;
MPRINT(EM_DIAGRAM):   end;
36593     +else
36594     +if 429 <= MntWines AND MntWines < 602 then do;
MPRINT(EM_DIAGRAM):   else if 429 <= MntWines AND MntWines < 602 then do;
36595     +GRP_MntWines = 9;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 9;
36596     +end;
MPRINT(EM_DIAGRAM):   end;
36597     +else
36598     +if 602 <= MntWines AND MntWines < 836 then do;
MPRINT(EM_DIAGRAM):   else if 602 <= MntWines AND MntWines < 836 then do;
36599     +GRP_MntWines = 10;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 10;
36600     +end;
MPRINT(EM_DIAGRAM):   end;
36601     +else
36602     +if 836 <= MntWines then do;
MPRINT(EM_DIAGRAM):   else if 836 <= MntWines then do;
36603     +GRP_MntWines = 11;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 11;
36604     +end;
MPRINT(EM_DIAGRAM):   end;
36605     +end;
MPRINT(EM_DIAGRAM):   end;
36606     +
36607     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36608     +* Variable: NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   * Variable: NumCatalogPurchases;
36609     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36610     +LABEL GRP_NumCatalogPurchases =
36611     +'Grouped: NumCatalogPurchases';
MPRINT(EM_DIAGRAM):   LABEL GRP_NumCatalogPurchases = 'Grouped: NumCatalogPurchases';
36612     +
36613     +if MISSING(NumCatalogPurchases) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumCatalogPurchases) then do;
36614     +GRP_NumCatalogPurchases = 1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 1;
36615     +end;
MPRINT(EM_DIAGRAM):   end;
36616     +else if NOT MISSING(NumCatalogPurchases) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumCatalogPurchases) then do;
36617     +if NumCatalogPurchases < 0 then do;
MPRINT(EM_DIAGRAM):   if NumCatalogPurchases < 0 then do;
36618     +GRP_NumCatalogPurchases = 2;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 2;
36619     +end;
MPRINT(EM_DIAGRAM):   end;
36620     +else
36621     +if 0 <= NumCatalogPurchases AND NumCatalogPurchases < 1 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= NumCatalogPurchases AND NumCatalogPurchases < 1 then do;
36622     +GRP_NumCatalogPurchases = 3;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 3;
36623     +end;
MPRINT(EM_DIAGRAM):   end;
36624     +else
36625     +if 1 <= NumCatalogPurchases AND NumCatalogPurchases < 2 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= NumCatalogPurchases AND NumCatalogPurchases < 2 then do;
36626     +GRP_NumCatalogPurchases = 4;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 4;
36627     +end;
MPRINT(EM_DIAGRAM):   end;
36628     +else
36629     +if 2 <= NumCatalogPurchases AND NumCatalogPurchases < 4 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumCatalogPurchases AND NumCatalogPurchases < 4 then do;
36630     +GRP_NumCatalogPurchases = 5;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 5;
36631     +end;
MPRINT(EM_DIAGRAM):   end;
36632     +else
36633     +if 4 <= NumCatalogPurchases AND NumCatalogPurchases < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= NumCatalogPurchases AND NumCatalogPurchases < 5 then do;
36634     +GRP_NumCatalogPurchases = 6;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 6;
36635     +end;
MPRINT(EM_DIAGRAM):   end;
36636     +else
36637     +if 5 <= NumCatalogPurchases AND NumCatalogPurchases < 7 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumCatalogPurchases AND NumCatalogPurchases < 7 then do;
36638     +GRP_NumCatalogPurchases = 7;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 7;
36639     +end;
MPRINT(EM_DIAGRAM):   end;
36640     +else
36641     +if 7 <= NumCatalogPurchases then do;
MPRINT(EM_DIAGRAM):   else if 7 <= NumCatalogPurchases then do;
36642     +GRP_NumCatalogPurchases = 8;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 8;
36643     +end;
MPRINT(EM_DIAGRAM):   end;
36644     +end;
MPRINT(EM_DIAGRAM):   end;
36645     +
36646     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36647     +* Variable: NumDistPurchases;
MPRINT(EM_DIAGRAM):   * Variable: NumDistPurchases;
36648     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36649     +LABEL GRP_NumDistPurchases = "Grouped: NumDistPurchases";
MPRINT(EM_DIAGRAM):   LABEL GRP_NumDistPurchases = "Grouped: NumDistPurchases";
36650     +
36651     +if MISSING(NumDistPurchases) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumDistPurchases) then do;
36652     +GRP_NumDistPurchases = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 1;
36653     +end;
MPRINT(EM_DIAGRAM):   end;
36654     +else if NOT MISSING(NumDistPurchases) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumDistPurchases) then do;
36655     +if NumDistPurchases < 1 then do;
MPRINT(EM_DIAGRAM):   if NumDistPurchases < 1 then do;
36656     +GRP_NumDistPurchases = 2;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 2;
36657     +end;
MPRINT(EM_DIAGRAM):   end;
36658     +else
36659     +if 1 <= NumDistPurchases AND NumDistPurchases < 2 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= NumDistPurchases AND NumDistPurchases < 2 then do;
36660     +GRP_NumDistPurchases = 3;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 3;
36661     +end;
MPRINT(EM_DIAGRAM):   end;
36662     +else
36663     +if 2 <= NumDistPurchases AND NumDistPurchases < 3 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumDistPurchases AND NumDistPurchases < 3 then do;
36664     +GRP_NumDistPurchases = 4;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 4;
36665     +end;
MPRINT(EM_DIAGRAM):   end;
36666     +else
36667     +if 3 <= NumDistPurchases AND NumDistPurchases < 5 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= NumDistPurchases AND NumDistPurchases < 5 then do;
36668     +GRP_NumDistPurchases = 5;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 5;
36669     +end;
MPRINT(EM_DIAGRAM):   end;
36670     +else
36671     +if 5 <= NumDistPurchases AND NumDistPurchases < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumDistPurchases AND NumDistPurchases < 6 then do;
36672     +GRP_NumDistPurchases = 6;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 6;
36673     +end;
MPRINT(EM_DIAGRAM):   end;
36674     +else
36675     +if 6 <= NumDistPurchases AND NumDistPurchases < 8 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= NumDistPurchases AND NumDistPurchases < 8 then do;
36676     +GRP_NumDistPurchases = 7;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 7;
36677     +end;
MPRINT(EM_DIAGRAM):   end;
36678     +else
36679     +if 8 <= NumDistPurchases AND NumDistPurchases < 9 then do;
MPRINT(EM_DIAGRAM):   else if 8 <= NumDistPurchases AND NumDistPurchases < 9 then do;
36680     +GRP_NumDistPurchases = 8;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 8;
36681     +end;
MPRINT(EM_DIAGRAM):   end;
36682     +else
36683     +if 9 <= NumDistPurchases AND NumDistPurchases < 11 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= NumDistPurchases AND NumDistPurchases < 11 then do;
36684     +GRP_NumDistPurchases = 9;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 9;
36685     +end;
MPRINT(EM_DIAGRAM):   end;
36686     +else
36687     +if 11 <= NumDistPurchases AND NumDistPurchases < 13 then do;
MPRINT(EM_DIAGRAM):   else if 11 <= NumDistPurchases AND NumDistPurchases < 13 then do;
36688     +GRP_NumDistPurchases = 10;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 10;
36689     +end;
MPRINT(EM_DIAGRAM):   end;
36690     +else
36691     +if 13 <= NumDistPurchases then do;
MPRINT(EM_DIAGRAM):   else if 13 <= NumDistPurchases then do;
36692     +GRP_NumDistPurchases = 11;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 11;
36693     +end;
MPRINT(EM_DIAGRAM):   end;
36694     +end;
MPRINT(EM_DIAGRAM):   end;
36695     +
36696     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36697     +* Variable: NumWebPurchases;
MPRINT(EM_DIAGRAM):   * Variable: NumWebPurchases;
36698     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36699     +LABEL GRP_NumWebPurchases =
36700     +'Grouped: NumWebPurchases';
MPRINT(EM_DIAGRAM):   LABEL GRP_NumWebPurchases = 'Grouped: NumWebPurchases';
36701     +
36702     +if MISSING(NumWebPurchases) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumWebPurchases) then do;
36703     +GRP_NumWebPurchases = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 1;
36704     +end;
MPRINT(EM_DIAGRAM):   end;
36705     +else if NOT MISSING(NumWebPurchases) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumWebPurchases) then do;
36706     +if NumWebPurchases < 1 then do;
MPRINT(EM_DIAGRAM):   if NumWebPurchases < 1 then do;
36707     +GRP_NumWebPurchases = 2;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 2;
36708     +end;
MPRINT(EM_DIAGRAM):   end;
36709     +else
36710     +if 1 <= NumWebPurchases AND NumWebPurchases < 2 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= NumWebPurchases AND NumWebPurchases < 2 then do;
36711     +GRP_NumWebPurchases = 3;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 3;
36712     +end;
MPRINT(EM_DIAGRAM):   end;
36713     +else
36714     +if 2 <= NumWebPurchases AND NumWebPurchases < 3 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumWebPurchases AND NumWebPurchases < 3 then do;
36715     +GRP_NumWebPurchases = 4;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 4;
36716     +end;
MPRINT(EM_DIAGRAM):   end;
36717     +else
36718     +if 3 <= NumWebPurchases AND NumWebPurchases < 4 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= NumWebPurchases AND NumWebPurchases < 4 then do;
36719     +GRP_NumWebPurchases = 5;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 5;
36720     +end;
MPRINT(EM_DIAGRAM):   end;
36721     +else
36722     +if 4 <= NumWebPurchases AND NumWebPurchases < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= NumWebPurchases AND NumWebPurchases < 5 then do;
36723     +GRP_NumWebPurchases = 6;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 6;
36724     +end;
MPRINT(EM_DIAGRAM):   end;
36725     +else
36726     +if 5 <= NumWebPurchases AND NumWebPurchases < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumWebPurchases AND NumWebPurchases < 6 then do;
36727     +GRP_NumWebPurchases = 7;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 7;
36728     +end;
MPRINT(EM_DIAGRAM):   end;
36729     +else
36730     +if 6 <= NumWebPurchases AND NumWebPurchases < 8 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= NumWebPurchases AND NumWebPurchases < 8 then do;
36731     +GRP_NumWebPurchases = 8;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 8;
36732     +end;
MPRINT(EM_DIAGRAM):   end;
36733     +else
36734     +if 8 <= NumWebPurchases then do;
MPRINT(EM_DIAGRAM):   else if 8 <= NumWebPurchases then do;
36735     +GRP_NumWebPurchases = 9;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 9;
36736     +end;
MPRINT(EM_DIAGRAM):   end;
36737     +end;
MPRINT(EM_DIAGRAM):   end;
36738     +
36739     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36740     +* Variable: NumWebVisitsMonth;
MPRINT(EM_DIAGRAM):   * Variable: NumWebVisitsMonth;
36741     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36742     +LABEL GRP_NumWebVisitsMonth =
36743     +'Grouped: NumWebVisitsMonth';
MPRINT(EM_DIAGRAM):   LABEL GRP_NumWebVisitsMonth = 'Grouped: NumWebVisitsMonth';
36744     +
36745     +if MISSING(NumWebVisitsMonth) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumWebVisitsMonth) then do;
36746     +GRP_NumWebVisitsMonth = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 1;
36747     +end;
MPRINT(EM_DIAGRAM):   end;
36748     +else if NOT MISSING(NumWebVisitsMonth) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumWebVisitsMonth) then do;
36749     +if NumWebVisitsMonth < 2 then do;
MPRINT(EM_DIAGRAM):   if NumWebVisitsMonth < 2 then do;
36750     +GRP_NumWebVisitsMonth = 2;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 2;
36751     +end;
MPRINT(EM_DIAGRAM):   end;
36752     +else
36753     +if 2 <= NumWebVisitsMonth AND NumWebVisitsMonth < 3 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumWebVisitsMonth AND NumWebVisitsMonth < 3 then do;
36754     +GRP_NumWebVisitsMonth = 3;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 3;
36755     +end;
MPRINT(EM_DIAGRAM):   end;
36756     +else
36757     +if 3 <= NumWebVisitsMonth AND NumWebVisitsMonth < 4 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= NumWebVisitsMonth AND NumWebVisitsMonth < 4 then do;
36758     +GRP_NumWebVisitsMonth = 4;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 4;
36759     +end;
MPRINT(EM_DIAGRAM):   end;
36760     +else
36761     +if 4 <= NumWebVisitsMonth AND NumWebVisitsMonth < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= NumWebVisitsMonth AND NumWebVisitsMonth < 5 then do;
36762     +GRP_NumWebVisitsMonth = 5;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 5;
36763     +end;
MPRINT(EM_DIAGRAM):   end;
36764     +else
36765     +if 5 <= NumWebVisitsMonth AND NumWebVisitsMonth < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumWebVisitsMonth AND NumWebVisitsMonth < 6 then do;
36766     +GRP_NumWebVisitsMonth = 6;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 6;
36767     +end;
MPRINT(EM_DIAGRAM):   end;
36768     +else
36769     +if 6 <= NumWebVisitsMonth AND NumWebVisitsMonth < 7 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= NumWebVisitsMonth AND NumWebVisitsMonth < 7 then do;
36770     +GRP_NumWebVisitsMonth = 7;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 7;
36771     +end;
MPRINT(EM_DIAGRAM):   end;
36772     +else
36773     +if 7 <= NumWebVisitsMonth AND NumWebVisitsMonth < 8 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= NumWebVisitsMonth AND NumWebVisitsMonth < 8 then do;
36774     +GRP_NumWebVisitsMonth = 8;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 8;
36775     +end;
MPRINT(EM_DIAGRAM):   end;
36776     +else
36777     +if 8 <= NumWebVisitsMonth then do;
MPRINT(EM_DIAGRAM):   else if 8 <= NumWebVisitsMonth then do;
36778     +GRP_NumWebVisitsMonth = 9;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 9;
36779     +end;
MPRINT(EM_DIAGRAM):   end;
36780     +end;
MPRINT(EM_DIAGRAM):   end;
36781     +
36782     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36783     +* Variable: RFMstat;
MPRINT(EM_DIAGRAM):   * Variable: RFMstat;
36784     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36785     +LABEL GRP_RFMstat = "Grouped: RFMstat";
MPRINT(EM_DIAGRAM):   LABEL GRP_RFMstat = "Grouped: RFMstat";
36786     +
36787     +if MISSING(RFMstat) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RFMstat) then do;
36788     +GRP_RFMstat = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 1;
36789     +end;
MPRINT(EM_DIAGRAM):   end;
36790     +else if NOT MISSING(RFMstat) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RFMstat) then do;
36791     +if RFMstat < 3 then do;
MPRINT(EM_DIAGRAM):   if RFMstat < 3 then do;
36792     +GRP_RFMstat = 2;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 2;
36793     +end;
MPRINT(EM_DIAGRAM):   end;
36794     +else
36795     +if 3 <= RFMstat AND RFMstat < 6.88 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= RFMstat AND RFMstat < 6.88 then do;
36796     +GRP_RFMstat = 3;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 3;
36797     +end;
MPRINT(EM_DIAGRAM):   end;
36798     +else
36799     +if 6.88 <= RFMstat AND RFMstat < 18.67 then do;
MPRINT(EM_DIAGRAM):   else if 6.88 <= RFMstat AND RFMstat < 18.67 then do;
36800     +GRP_RFMstat = 4;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 4;
36801     +end;
MPRINT(EM_DIAGRAM):   end;
36802     +else
36803     +if 18.67 <= RFMstat AND RFMstat < 52.5 then do;
MPRINT(EM_DIAGRAM):   else if 18.67 <= RFMstat AND RFMstat < 52.5 then do;
36804     +GRP_RFMstat = 5;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 5;
36805     +end;
MPRINT(EM_DIAGRAM):   end;
36806     +else
36807     +if 52.5 <= RFMstat AND RFMstat < 128.09 then do;
MPRINT(EM_DIAGRAM):   else if 52.5 <= RFMstat AND RFMstat < 128.09 then do;
36808     +GRP_RFMstat = 6;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 6;
36809     +end;
MPRINT(EM_DIAGRAM):   end;
36810     +else
36811     +if 128.09 <= RFMstat AND RFMstat < 234.14 then do;
MPRINT(EM_DIAGRAM):   else if 128.09 <= RFMstat AND RFMstat < 234.14 then do;
36812     +GRP_RFMstat = 7;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 7;
36813     +end;
MPRINT(EM_DIAGRAM):   end;
36814     +else
36815     +if 234.14 <= RFMstat AND RFMstat < 369.14 then do;
MPRINT(EM_DIAGRAM):   else if 234.14 <= RFMstat AND RFMstat < 369.14 then do;
36816     +GRP_RFMstat = 8;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 8;
36817     +end;
MPRINT(EM_DIAGRAM):   end;
36818     +else
36819     +if 369.14 <= RFMstat AND RFMstat < 571.29 then do;
MPRINT(EM_DIAGRAM):   else if 369.14 <= RFMstat AND RFMstat < 571.29 then do;
36820     +GRP_RFMstat = 9;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 9;
36821     +end;
MPRINT(EM_DIAGRAM):   end;
36822     +else
36823     +if 571.29 <= RFMstat AND RFMstat < 1073.68 then do;
MPRINT(EM_DIAGRAM):   else if 571.29 <= RFMstat AND RFMstat < 1073.68 then do;
36824     +GRP_RFMstat = 10;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 10;
36825     +end;
MPRINT(EM_DIAGRAM):   end;
36826     +else
36827     +if 1073.68 <= RFMstat then do;
MPRINT(EM_DIAGRAM):   else if 1073.68 <= RFMstat then do;
36828     +GRP_RFMstat = 11;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 11;
36829     +end;
MPRINT(EM_DIAGRAM):   end;
36830     +end;
MPRINT(EM_DIAGRAM):   end;
36831     +
36832     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36833     +* Variable: RMntFrq;
MPRINT(EM_DIAGRAM):   * Variable: RMntFrq;
36834     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36835     +LABEL GRP_RMntFrq = "Grouped: RMntFrq";
MPRINT(EM_DIAGRAM):   LABEL GRP_RMntFrq = "Grouped: RMntFrq";
36836     +
36837     +if MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RMntFrq) then do;
36838     +GRP_RMntFrq = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 1;
36839     +end;
MPRINT(EM_DIAGRAM):   end;
36840     +else if NOT MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RMntFrq) then do;
36841     +if RMntFrq < 7.83 then do;
MPRINT(EM_DIAGRAM):   if RMntFrq < 7.83 then do;
36842     +GRP_RMntFrq = 2;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 2;
36843     +end;
MPRINT(EM_DIAGRAM):   end;
36844     +else
36845     +if 7.83 <= RMntFrq AND RMntFrq < 11 then do;
MPRINT(EM_DIAGRAM):   else if 7.83 <= RMntFrq AND RMntFrq < 11 then do;
36846     +GRP_RMntFrq = 3;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 3;
36847     +end;
MPRINT(EM_DIAGRAM):   end;
36848     +else
36849     +if 11 <= RMntFrq AND RMntFrq < 15.83 then do;
MPRINT(EM_DIAGRAM):   else if 11 <= RMntFrq AND RMntFrq < 15.83 then do;
36850     +GRP_RMntFrq = 4;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 4;
36851     +end;
MPRINT(EM_DIAGRAM):   end;
36852     +else
36853     +if 15.83 <= RMntFrq AND RMntFrq < 23.77 then do;
MPRINT(EM_DIAGRAM):   else if 15.83 <= RMntFrq AND RMntFrq < 23.77 then do;
36854     +GRP_RMntFrq = 5;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 5;
36855     +end;
MPRINT(EM_DIAGRAM):   end;
36856     +else
36857     +if 23.77 <= RMntFrq AND RMntFrq < 30.4 then do;
MPRINT(EM_DIAGRAM):   else if 23.77 <= RMntFrq AND RMntFrq < 30.4 then do;
36858     +GRP_RMntFrq = 6;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 6;
36859     +end;
MPRINT(EM_DIAGRAM):   end;
36860     +else
36861     +if 30.4 <= RMntFrq AND RMntFrq < 36.55 then do;
MPRINT(EM_DIAGRAM):   else if 30.4 <= RMntFrq AND RMntFrq < 36.55 then do;
36862     +GRP_RMntFrq = 7;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 7;
36863     +end;
MPRINT(EM_DIAGRAM):   end;
36864     +else
36865     +if 36.55 <= RMntFrq AND RMntFrq < 43.06 then do;
MPRINT(EM_DIAGRAM):   else if 36.55 <= RMntFrq AND RMntFrq < 43.06 then do;
36866     +GRP_RMntFrq = 8;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 8;
36867     +end;
MPRINT(EM_DIAGRAM):   end;
36868     +else
36869     +if 43.06 <= RMntFrq AND RMntFrq < 68.73 then do;
MPRINT(EM_DIAGRAM):   else if 43.06 <= RMntFrq AND RMntFrq < 68.73 then do;
36870     +GRP_RMntFrq = 9;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 9;
36871     +end;
MPRINT(EM_DIAGRAM):   end;
36872     +else
36873     +if 68.73 <= RMntFrq AND RMntFrq < 75.83 then do;
MPRINT(EM_DIAGRAM):   else if 68.73 <= RMntFrq AND RMntFrq < 75.83 then do;
36874     +GRP_RMntFrq = 10;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 10;
36875     +end;
MPRINT(EM_DIAGRAM):   end;
36876     +else
36877     +if 75.83 <= RMntFrq then do;
MPRINT(EM_DIAGRAM):   else if 75.83 <= RMntFrq then do;
36878     +GRP_RMntFrq = 11;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 11;
36879     +end;
MPRINT(EM_DIAGRAM):   end;
36880     +end;
MPRINT(EM_DIAGRAM):   end;
36881     +
36882     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36883     +* Variable: Recency;
MPRINT(EM_DIAGRAM):   * Variable: Recency;
36884     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36885     +LABEL GRP_Recency =
36886     +'Grouped: Recency';
MPRINT(EM_DIAGRAM):   LABEL GRP_Recency = 'Grouped: Recency';
36887     +
36888     +if MISSING(Recency) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Recency) then do;
36889     +GRP_Recency = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency = 1;
36890     +end;
MPRINT(EM_DIAGRAM):   end;
36891     +else if NOT MISSING(Recency) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Recency) then do;
36892     +if Recency < 9 then do;
MPRINT(EM_DIAGRAM):   if Recency < 9 then do;
36893     +GRP_Recency = 2;
MPRINT(EM_DIAGRAM):   GRP_Recency = 2;
36894     +end;
MPRINT(EM_DIAGRAM):   end;
36895     +else
36896     +if 9 <= Recency AND Recency < 19 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= Recency AND Recency < 19 then do;
36897     +GRP_Recency = 3;
MPRINT(EM_DIAGRAM):   GRP_Recency = 3;
36898     +end;
MPRINT(EM_DIAGRAM):   end;
36899     +else
36900     +if 19 <= Recency AND Recency < 29 then do;
MPRINT(EM_DIAGRAM):   else if 19 <= Recency AND Recency < 29 then do;
36901     +GRP_Recency = 4;
MPRINT(EM_DIAGRAM):   GRP_Recency = 4;
36902     +end;
MPRINT(EM_DIAGRAM):   end;
36903     +else
36904     +if 29 <= Recency AND Recency < 38 then do;
MPRINT(EM_DIAGRAM):   else if 29 <= Recency AND Recency < 38 then do;
36905     +GRP_Recency = 5;
MPRINT(EM_DIAGRAM):   GRP_Recency = 5;
36906     +end;
MPRINT(EM_DIAGRAM):   end;
36907     +else
36908     +if 38 <= Recency AND Recency < 48 then do;
MPRINT(EM_DIAGRAM):   else if 38 <= Recency AND Recency < 48 then do;
36909     +GRP_Recency = 6;
MPRINT(EM_DIAGRAM):   GRP_Recency = 6;
36910     +end;
MPRINT(EM_DIAGRAM):   end;
36911     +else
36912     +if 48 <= Recency AND Recency < 58 then do;
MPRINT(EM_DIAGRAM):   else if 48 <= Recency AND Recency < 58 then do;
36913     +GRP_Recency = 7;
MPRINT(EM_DIAGRAM):   GRP_Recency = 7;
36914     +end;
MPRINT(EM_DIAGRAM):   end;
36915     +else
36916     +if 58 <= Recency AND Recency < 68 then do;
MPRINT(EM_DIAGRAM):   else if 58 <= Recency AND Recency < 68 then do;
36917     +GRP_Recency = 8;
MPRINT(EM_DIAGRAM):   GRP_Recency = 8;
36918     +end;
MPRINT(EM_DIAGRAM):   end;
36919     +else
36920     +if 68 <= Recency AND Recency < 79 then do;
MPRINT(EM_DIAGRAM):   else if 68 <= Recency AND Recency < 79 then do;
36921     +GRP_Recency = 9;
MPRINT(EM_DIAGRAM):   GRP_Recency = 9;
36922     +end;
MPRINT(EM_DIAGRAM):   end;
36923     +else
36924     +if 79 <= Recency AND Recency < 90 then do;
MPRINT(EM_DIAGRAM):   else if 79 <= Recency AND Recency < 90 then do;
36925     +GRP_Recency = 10;
MPRINT(EM_DIAGRAM):   GRP_Recency = 10;
36926     +end;
MPRINT(EM_DIAGRAM):   end;
36927     +else
36928     +if 90 <= Recency then do;
MPRINT(EM_DIAGRAM):   else if 90 <= Recency then do;
36929     +GRP_Recency = 11;
MPRINT(EM_DIAGRAM):   GRP_Recency = 11;
36930     +end;
MPRINT(EM_DIAGRAM):   end;
36931     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
36932      run;

NOTE: DATA STEP view saved on file EMWS8.BINNING_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
36933      quit;
36934      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
36935      filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36936      *------------------------------------------------------------*;
36937      * BINNING: Scoring VALIDATE data;
36938      *------------------------------------------------------------*;
36939      data EMWS8.BINNING_VALIDATE
36940      / view=EMWS8.BINNING_VALIDATE
36941      ;
MPRINT(EM_DIAGRAM):   data EMWS8.BINNING_VALIDATE / view=EMWS8.BINNING_VALIDATE ;
36942      set EMWS8.Part_VALIDATE
36943      ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_VALIDATE ;
36944      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMFLOWSCORE.sas.
36945     +length _UFormat $200;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
36946     +drop _UFormat;
MPRINT(EM_DIAGRAM):   drop _UFormat;
36947     +_UFormat='';
MPRINT(EM_DIAGRAM):   _UFormat='';
36948     +
36949     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36950     +* Variable: AcceptedCmp5;
MPRINT(EM_DIAGRAM):   * Variable: AcceptedCmp5;
36951     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36952     +LABEL GRP_AcceptedCmp5 =
36953     +'Grouped: AcceptedCmp5';
MPRINT(EM_DIAGRAM):   LABEL GRP_AcceptedCmp5 = 'Grouped: AcceptedCmp5';
36954     +
36955     +_UFormat = put(AcceptedCmp5,BEST.);
MPRINT(EM_DIAGRAM):   _UFormat = put(AcceptedCmp5,BEST.);
36956     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
36957     +if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
36958     +GRP_AcceptedCmp5 = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 1;
36959     +end;
MPRINT(EM_DIAGRAM):   end;
36960     +else if NOT MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
36961     +if (_UFORMAT eq '0'
36962     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq '0' ) then do;
36963     +GRP_AcceptedCmp5 = 2;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 2;
36964     +end;
MPRINT(EM_DIAGRAM):   end;
36965     +else
36966     +if (_UFORMAT eq '1'
36967     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq '1' ) then do;
36968     +GRP_AcceptedCmp5 = 3;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 3;
36969     +end;
MPRINT(EM_DIAGRAM):   end;
36970     +else do;
MPRINT(EM_DIAGRAM):   else do;
36971     +GRP_AcceptedCmp5 = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp5 = 1;
36972     +end;
MPRINT(EM_DIAGRAM):   end;
36973     +end;
MPRINT(EM_DIAGRAM):   end;
36974     +
36975     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36976     +* Variable: AcceptedCmpTotal;
MPRINT(EM_DIAGRAM):   * Variable: AcceptedCmpTotal;
36977     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36978     +LABEL GRP_AcceptedCmpTotal = "Grouped: AcceptedCmpTotal";
MPRINT(EM_DIAGRAM):   LABEL GRP_AcceptedCmpTotal = "Grouped: AcceptedCmpTotal";
36979     +
36980     +if MISSING(AcceptedCmpTotal) then do;
MPRINT(EM_DIAGRAM):   if MISSING(AcceptedCmpTotal) then do;
36981     +GRP_AcceptedCmpTotal = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 1;
36982     +end;
MPRINT(EM_DIAGRAM):   end;
36983     +else if NOT MISSING(AcceptedCmpTotal) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(AcceptedCmpTotal) then do;
36984     +if AcceptedCmpTotal < 0 then do;
MPRINT(EM_DIAGRAM):   if AcceptedCmpTotal < 0 then do;
36985     +GRP_AcceptedCmpTotal = 2;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 2;
36986     +end;
MPRINT(EM_DIAGRAM):   end;
36987     +else
36988     +if 0 <= AcceptedCmpTotal AND AcceptedCmpTotal < 1 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= AcceptedCmpTotal AND AcceptedCmpTotal < 1 then do;
36989     +GRP_AcceptedCmpTotal = 3;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 3;
36990     +end;
MPRINT(EM_DIAGRAM):   end;
36991     +else
36992     +if 1 <= AcceptedCmpTotal then do;
MPRINT(EM_DIAGRAM):   else if 1 <= AcceptedCmpTotal then do;
36993     +GRP_AcceptedCmpTotal = 4;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmpTotal = 4;
36994     +end;
MPRINT(EM_DIAGRAM):   end;
36995     +end;
MPRINT(EM_DIAGRAM):   end;
36996     +
36997     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36998     +* Variable: Frq;
MPRINT(EM_DIAGRAM):   * Variable: Frq;
36999     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37000     +LABEL GRP_Frq = "Grouped: Frq";
MPRINT(EM_DIAGRAM):   LABEL GRP_Frq = "Grouped: Frq";
37001     +
37002     +if MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Frq) then do;
37003     +GRP_Frq = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq = 1;
37004     +end;
MPRINT(EM_DIAGRAM):   end;
37005     +else if NOT MISSING(Frq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Frq) then do;
37006     +if Frq < 4 then do;
MPRINT(EM_DIAGRAM):   if Frq < 4 then do;
37007     +GRP_Frq = 2;
MPRINT(EM_DIAGRAM):   GRP_Frq = 2;
37008     +end;
MPRINT(EM_DIAGRAM):   end;
37009     +else
37010     +if 4 <= Frq AND Frq < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= Frq AND Frq < 5 then do;
37011     +GRP_Frq = 3;
MPRINT(EM_DIAGRAM):   GRP_Frq = 3;
37012     +end;
MPRINT(EM_DIAGRAM):   end;
37013     +else
37014     +if 5 <= Frq AND Frq < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= Frq AND Frq < 6 then do;
37015     +GRP_Frq = 4;
MPRINT(EM_DIAGRAM):   GRP_Frq = 4;
37016     +end;
MPRINT(EM_DIAGRAM):   end;
37017     +else
37018     +if 6 <= Frq AND Frq < 9 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= Frq AND Frq < 9 then do;
37019     +GRP_Frq = 5;
MPRINT(EM_DIAGRAM):   GRP_Frq = 5;
37020     +end;
MPRINT(EM_DIAGRAM):   end;
37021     +else
37022     +if 9 <= Frq AND Frq < 12 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= Frq AND Frq < 12 then do;
37023     +GRP_Frq = 6;
MPRINT(EM_DIAGRAM):   GRP_Frq = 6;
37024     +end;
MPRINT(EM_DIAGRAM):   end;
37025     +else
37026     +if 12 <= Frq AND Frq < 15 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= Frq AND Frq < 15 then do;
37027     +GRP_Frq = 7;
MPRINT(EM_DIAGRAM):   GRP_Frq = 7;
37028     +end;
MPRINT(EM_DIAGRAM):   end;
37029     +else
37030     +if 15 <= Frq AND Frq < 17 then do;
MPRINT(EM_DIAGRAM):   else if 15 <= Frq AND Frq < 17 then do;
37031     +GRP_Frq = 8;
MPRINT(EM_DIAGRAM):   GRP_Frq = 8;
37032     +end;
MPRINT(EM_DIAGRAM):   end;
37033     +else
37034     +if 17 <= Frq AND Frq < 20 then do;
MPRINT(EM_DIAGRAM):   else if 17 <= Frq AND Frq < 20 then do;
37035     +GRP_Frq = 9;
MPRINT(EM_DIAGRAM):   GRP_Frq = 9;
37036     +end;
MPRINT(EM_DIAGRAM):   end;
37037     +else
37038     +if 20 <= Frq AND Frq < 23 then do;
MPRINT(EM_DIAGRAM):   else if 20 <= Frq AND Frq < 23 then do;
37039     +GRP_Frq = 10;
MPRINT(EM_DIAGRAM):   GRP_Frq = 10;
37040     +end;
MPRINT(EM_DIAGRAM):   end;
37041     +else
37042     +if 23 <= Frq then do;
MPRINT(EM_DIAGRAM):   else if 23 <= Frq then do;
37043     +GRP_Frq = 11;
MPRINT(EM_DIAGRAM):   GRP_Frq = 11;
37044     +end;
MPRINT(EM_DIAGRAM):   end;
37045     +end;
MPRINT(EM_DIAGRAM):   end;
37046     +
37047     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37048     +* Variable: Income;
MPRINT(EM_DIAGRAM):   * Variable: Income;
37049     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37050     +LABEL GRP_Income =
37051     +'Grouped: Income';
MPRINT(EM_DIAGRAM):   LABEL GRP_Income = 'Grouped: Income';
37052     +
37053     +if MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Income) then do;
37054     +GRP_Income = 1;
MPRINT(EM_DIAGRAM):   GRP_Income = 1;
37055     +end;
MPRINT(EM_DIAGRAM):   end;
37056     +else if NOT MISSING(Income) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Income) then do;
37057     +if Income < 23983 then do;
MPRINT(EM_DIAGRAM):   if Income < 23983 then do;
37058     +GRP_Income = 2;
MPRINT(EM_DIAGRAM):   GRP_Income = 2;
37059     +end;
MPRINT(EM_DIAGRAM):   end;
37060     +else
37061     +if 23983 <= Income AND Income < 31322 then do;
MPRINT(EM_DIAGRAM):   else if 23983 <= Income AND Income < 31322 then do;
37062     +GRP_Income = 3;
MPRINT(EM_DIAGRAM):   GRP_Income = 3;
37063     +end;
MPRINT(EM_DIAGRAM):   end;
37064     +else
37065     +if 31322 <= Income AND Income < 38157 then do;
MPRINT(EM_DIAGRAM):   else if 31322 <= Income AND Income < 38157 then do;
37066     +GRP_Income = 4;
MPRINT(EM_DIAGRAM):   GRP_Income = 4;
37067     +end;
MPRINT(EM_DIAGRAM):   end;
37068     +else
37069     +if 38157 <= Income AND Income < 44900 then do;
MPRINT(EM_DIAGRAM):   else if 38157 <= Income AND Income < 44900 then do;
37070     +GRP_Income = 5;
MPRINT(EM_DIAGRAM):   GRP_Income = 5;
37071     +end;
MPRINT(EM_DIAGRAM):   end;
37072     +else
37073     +if 44900 <= Income AND Income < 52157 then do;
MPRINT(EM_DIAGRAM):   else if 44900 <= Income AND Income < 52157 then do;
37074     +GRP_Income = 6;
MPRINT(EM_DIAGRAM):   GRP_Income = 6;
37075     +end;
MPRINT(EM_DIAGRAM):   end;
37076     +else
37077     +if 52157 <= Income AND Income < 59111 then do;
MPRINT(EM_DIAGRAM):   else if 52157 <= Income AND Income < 59111 then do;
37078     +GRP_Income = 7;
MPRINT(EM_DIAGRAM):   GRP_Income = 7;
37079     +end;
MPRINT(EM_DIAGRAM):   end;
37080     +else
37081     +if 59111 <= Income AND Income < 65808 then do;
MPRINT(EM_DIAGRAM):   else if 59111 <= Income AND Income < 65808 then do;
37082     +GRP_Income = 8;
MPRINT(EM_DIAGRAM):   GRP_Income = 8;
37083     +end;
MPRINT(EM_DIAGRAM):   end;
37084     +else
37085     +if 65808 <= Income AND Income < 72025 then do;
MPRINT(EM_DIAGRAM):   else if 65808 <= Income AND Income < 72025 then do;
37086     +GRP_Income = 9;
MPRINT(EM_DIAGRAM):   GRP_Income = 9;
37087     +end;
MPRINT(EM_DIAGRAM):   end;
37088     +else
37089     +if 72025 <= Income AND Income < 79470 then do;
MPRINT(EM_DIAGRAM):   else if 72025 <= Income AND Income < 79470 then do;
37090     +GRP_Income = 10;
MPRINT(EM_DIAGRAM):   GRP_Income = 10;
37091     +end;
MPRINT(EM_DIAGRAM):   end;
37092     +else
37093     +if 79470 <= Income then do;
MPRINT(EM_DIAGRAM):   else if 79470 <= Income then do;
37094     +GRP_Income = 11;
MPRINT(EM_DIAGRAM):   GRP_Income = 11;
37095     +end;
MPRINT(EM_DIAGRAM):   end;
37096     +end;
MPRINT(EM_DIAGRAM):   end;
37097     +
37098     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37099     +* Variable: Mnt;
MPRINT(EM_DIAGRAM):   * Variable: Mnt;
37100     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37101     +LABEL GRP_Mnt = "Grouped: Mnt";
MPRINT(EM_DIAGRAM):   LABEL GRP_Mnt = "Grouped: Mnt";
37102     +
37103     +if MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Mnt) then do;
37104     +GRP_Mnt = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 1;
37105     +end;
MPRINT(EM_DIAGRAM):   end;
37106     +else if NOT MISSING(Mnt) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Mnt) then do;
37107     +if Mnt < 34 then do;
MPRINT(EM_DIAGRAM):   if Mnt < 34 then do;
37108     +GRP_Mnt = 2;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 2;
37109     +end;
MPRINT(EM_DIAGRAM):   end;
37110     +else
37111     +if 34 <= Mnt AND Mnt < 57 then do;
MPRINT(EM_DIAGRAM):   else if 34 <= Mnt AND Mnt < 57 then do;
37112     +GRP_Mnt = 3;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 3;
37113     +end;
MPRINT(EM_DIAGRAM):   end;
37114     +else
37115     +if 57 <= Mnt AND Mnt < 94 then do;
MPRINT(EM_DIAGRAM):   else if 57 <= Mnt AND Mnt < 94 then do;
37116     +GRP_Mnt = 4;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 4;
37117     +end;
MPRINT(EM_DIAGRAM):   end;
37118     +else
37119     +if 94 <= Mnt AND Mnt < 219 then do;
MPRINT(EM_DIAGRAM):   else if 94 <= Mnt AND Mnt < 219 then do;
37120     +GRP_Mnt = 5;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 5;
37121     +end;
MPRINT(EM_DIAGRAM):   end;
37122     +else
37123     +if 219 <= Mnt AND Mnt < 405.5 then do;
MPRINT(EM_DIAGRAM):   else if 219 <= Mnt AND Mnt < 405.5 then do;
37124     +GRP_Mnt = 6;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 6;
37125     +end;
MPRINT(EM_DIAGRAM):   end;
37126     +else
37127     +if 405.5 <= Mnt AND Mnt < 650 then do;
MPRINT(EM_DIAGRAM):   else if 405.5 <= Mnt AND Mnt < 650 then do;
37128     +GRP_Mnt = 7;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 7;
37129     +end;
MPRINT(EM_DIAGRAM):   end;
37130     +else
37131     +if 650 <= Mnt AND Mnt < 906 then do;
MPRINT(EM_DIAGRAM):   else if 650 <= Mnt AND Mnt < 906 then do;
37132     +GRP_Mnt = 8;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 8;
37133     +end;
MPRINT(EM_DIAGRAM):   end;
37134     +else
37135     +if 906 <= Mnt AND Mnt < 1215 then do;
MPRINT(EM_DIAGRAM):   else if 906 <= Mnt AND Mnt < 1215 then do;
37136     +GRP_Mnt = 9;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 9;
37137     +end;
MPRINT(EM_DIAGRAM):   end;
37138     +else
37139     +if 1215 <= Mnt AND Mnt < 1526 then do;
MPRINT(EM_DIAGRAM):   else if 1215 <= Mnt AND Mnt < 1526 then do;
37140     +GRP_Mnt = 10;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 10;
37141     +end;
MPRINT(EM_DIAGRAM):   end;
37142     +else
37143     +if 1526 <= Mnt then do;
MPRINT(EM_DIAGRAM):   else if 1526 <= Mnt then do;
37144     +GRP_Mnt = 11;
MPRINT(EM_DIAGRAM):   GRP_Mnt = 11;
37145     +end;
MPRINT(EM_DIAGRAM):   end;
37146     +end;
MPRINT(EM_DIAGRAM):   end;
37147     +
37148     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37149     +* Variable: MntFishProducts;
MPRINT(EM_DIAGRAM):   * Variable: MntFishProducts;
37150     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37151     +LABEL GRP_MntFishProducts =
37152     +'Grouped: MntFishProducts';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntFishProducts = 'Grouped: MntFishProducts';
37153     +
37154     +if MISSING(MntFishProducts) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntFishProducts) then do;
37155     +GRP_MntFishProducts = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 1;
37156     +end;
MPRINT(EM_DIAGRAM):   end;
37157     +else if NOT MISSING(MntFishProducts) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntFishProducts) then do;
37158     +if MntFishProducts < 0 then do;
MPRINT(EM_DIAGRAM):   if MntFishProducts < 0 then do;
37159     +GRP_MntFishProducts = 2;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 2;
37160     +end;
MPRINT(EM_DIAGRAM):   end;
37161     +else
37162     +if 0 <= MntFishProducts AND MntFishProducts < 2 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= MntFishProducts AND MntFishProducts < 2 then do;
37163     +GRP_MntFishProducts = 3;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 3;
37164     +end;
MPRINT(EM_DIAGRAM):   end;
37165     +else
37166     +if 2 <= MntFishProducts AND MntFishProducts < 4 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= MntFishProducts AND MntFishProducts < 4 then do;
37167     +GRP_MntFishProducts = 4;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 4;
37168     +end;
MPRINT(EM_DIAGRAM):   end;
37169     +else
37170     +if 4 <= MntFishProducts AND MntFishProducts < 7 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= MntFishProducts AND MntFishProducts < 7 then do;
37171     +GRP_MntFishProducts = 5;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 5;
37172     +end;
MPRINT(EM_DIAGRAM):   end;
37173     +else
37174     +if 7 <= MntFishProducts AND MntFishProducts < 13 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= MntFishProducts AND MntFishProducts < 13 then do;
37175     +GRP_MntFishProducts = 6;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 6;
37176     +end;
MPRINT(EM_DIAGRAM):   end;
37177     +else
37178     +if 13 <= MntFishProducts AND MntFishProducts < 23 then do;
MPRINT(EM_DIAGRAM):   else if 13 <= MntFishProducts AND MntFishProducts < 23 then do;
37179     +GRP_MntFishProducts = 7;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 7;
37180     +end;
MPRINT(EM_DIAGRAM):   end;
37181     +else
37182     +if 23 <= MntFishProducts AND MntFishProducts < 37 then do;
MPRINT(EM_DIAGRAM):   else if 23 <= MntFishProducts AND MntFishProducts < 37 then do;
37183     +GRP_MntFishProducts = 8;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 8;
37184     +end;
MPRINT(EM_DIAGRAM):   end;
37185     +else
37186     +if 37 <= MntFishProducts AND MntFishProducts < 62 then do;
MPRINT(EM_DIAGRAM):   else if 37 <= MntFishProducts AND MntFishProducts < 62 then do;
37187     +GRP_MntFishProducts = 9;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 9;
37188     +end;
MPRINT(EM_DIAGRAM):   end;
37189     +else
37190     +if 62 <= MntFishProducts AND MntFishProducts < 116 then do;
MPRINT(EM_DIAGRAM):   else if 62 <= MntFishProducts AND MntFishProducts < 116 then do;
37191     +GRP_MntFishProducts = 10;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 10;
37192     +end;
MPRINT(EM_DIAGRAM):   end;
37193     +else
37194     +if 116 <= MntFishProducts then do;
MPRINT(EM_DIAGRAM):   else if 116 <= MntFishProducts then do;
37195     +GRP_MntFishProducts = 11;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts = 11;
37196     +end;
MPRINT(EM_DIAGRAM):   end;
37197     +end;
MPRINT(EM_DIAGRAM):   end;
37198     +
37199     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37200     +* Variable: MntGoldProds;
MPRINT(EM_DIAGRAM):   * Variable: MntGoldProds;
37201     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37202     +LABEL GRP_MntGoldProds =
37203     +'Grouped: MntGoldProds';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntGoldProds = 'Grouped: MntGoldProds';
37204     +
37205     +if MISSING(MntGoldProds) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntGoldProds) then do;
37206     +GRP_MntGoldProds = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 1;
37207     +end;
MPRINT(EM_DIAGRAM):   end;
37208     +else if NOT MISSING(MntGoldProds) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntGoldProds) then do;
37209     +if MntGoldProds < 3 then do;
MPRINT(EM_DIAGRAM):   if MntGoldProds < 3 then do;
37210     +GRP_MntGoldProds = 2;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 2;
37211     +end;
MPRINT(EM_DIAGRAM):   end;
37212     +else
37213     +if 3 <= MntGoldProds AND MntGoldProds < 7 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= MntGoldProds AND MntGoldProds < 7 then do;
37214     +GRP_MntGoldProds = 3;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 3;
37215     +end;
MPRINT(EM_DIAGRAM):   end;
37216     +else
37217     +if 7 <= MntGoldProds AND MntGoldProds < 12 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= MntGoldProds AND MntGoldProds < 12 then do;
37218     +GRP_MntGoldProds = 4;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 4;
37219     +end;
MPRINT(EM_DIAGRAM):   end;
37220     +else
37221     +if 12 <= MntGoldProds AND MntGoldProds < 17 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= MntGoldProds AND MntGoldProds < 17 then do;
37222     +GRP_MntGoldProds = 5;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 5;
37223     +end;
MPRINT(EM_DIAGRAM):   end;
37224     +else
37225     +if 17 <= MntGoldProds AND MntGoldProds < 25 then do;
MPRINT(EM_DIAGRAM):   else if 17 <= MntGoldProds AND MntGoldProds < 25 then do;
37226     +GRP_MntGoldProds = 6;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 6;
37227     +end;
MPRINT(EM_DIAGRAM):   end;
37228     +else
37229     +if 25 <= MntGoldProds AND MntGoldProds < 34 then do;
MPRINT(EM_DIAGRAM):   else if 25 <= MntGoldProds AND MntGoldProds < 34 then do;
37230     +GRP_MntGoldProds = 7;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 7;
37231     +end;
MPRINT(EM_DIAGRAM):   end;
37232     +else
37233     +if 34 <= MntGoldProds AND MntGoldProds < 48 then do;
MPRINT(EM_DIAGRAM):   else if 34 <= MntGoldProds AND MntGoldProds < 48 then do;
37234     +GRP_MntGoldProds = 8;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 8;
37235     +end;
MPRINT(EM_DIAGRAM):   end;
37236     +else
37237     +if 48 <= MntGoldProds AND MntGoldProds < 74 then do;
MPRINT(EM_DIAGRAM):   else if 48 <= MntGoldProds AND MntGoldProds < 74 then do;
37238     +GRP_MntGoldProds = 9;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 9;
37239     +end;
MPRINT(EM_DIAGRAM):   end;
37240     +else
37241     +if 74 <= MntGoldProds AND MntGoldProds < 116 then do;
MPRINT(EM_DIAGRAM):   else if 74 <= MntGoldProds AND MntGoldProds < 116 then do;
37242     +GRP_MntGoldProds = 10;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 10;
37243     +end;
MPRINT(EM_DIAGRAM):   end;
37244     +else
37245     +if 116 <= MntGoldProds then do;
MPRINT(EM_DIAGRAM):   else if 116 <= MntGoldProds then do;
37246     +GRP_MntGoldProds = 11;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds = 11;
37247     +end;
MPRINT(EM_DIAGRAM):   end;
37248     +end;
MPRINT(EM_DIAGRAM):   end;
37249     +
37250     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37251     +* Variable: MntMeatProducts;
MPRINT(EM_DIAGRAM):   * Variable: MntMeatProducts;
37252     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37253     +LABEL GRP_MntMeatProducts =
37254     +'Grouped: MntMeatProducts';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntMeatProducts = 'Grouped: MntMeatProducts';
37255     +
37256     +if MISSING(MntMeatProducts) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntMeatProducts) then do;
37257     +GRP_MntMeatProducts = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 1;
37258     +end;
MPRINT(EM_DIAGRAM):   end;
37259     +else if NOT MISSING(MntMeatProducts) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntMeatProducts) then do;
37260     +if MntMeatProducts < 7 then do;
MPRINT(EM_DIAGRAM):   if MntMeatProducts < 7 then do;
37261     +GRP_MntMeatProducts = 2;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 2;
37262     +end;
MPRINT(EM_DIAGRAM):   end;
37263     +else
37264     +if 7 <= MntMeatProducts AND MntMeatProducts < 12 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= MntMeatProducts AND MntMeatProducts < 12 then do;
37265     +GRP_MntMeatProducts = 3;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 3;
37266     +end;
MPRINT(EM_DIAGRAM):   end;
37267     +else
37268     +if 12 <= MntMeatProducts AND MntMeatProducts < 21 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= MntMeatProducts AND MntMeatProducts < 21 then do;
37269     +GRP_MntMeatProducts = 4;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 4;
37270     +end;
MPRINT(EM_DIAGRAM):   end;
37271     +else
37272     +if 21 <= MntMeatProducts AND MntMeatProducts < 38 then do;
MPRINT(EM_DIAGRAM):   else if 21 <= MntMeatProducts AND MntMeatProducts < 38 then do;
37273     +GRP_MntMeatProducts = 5;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 5;
37274     +end;
MPRINT(EM_DIAGRAM):   end;
37275     +else
37276     +if 38 <= MntMeatProducts AND MntMeatProducts < 72 then do;
MPRINT(EM_DIAGRAM):   else if 38 <= MntMeatProducts AND MntMeatProducts < 72 then do;
37277     +GRP_MntMeatProducts = 6;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 6;
37278     +end;
MPRINT(EM_DIAGRAM):   end;
37279     +else
37280     +if 72 <= MntMeatProducts AND MntMeatProducts < 116 then do;
MPRINT(EM_DIAGRAM):   else if 72 <= MntMeatProducts AND MntMeatProducts < 116 then do;
37281     +GRP_MntMeatProducts = 7;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 7;
37282     +end;
MPRINT(EM_DIAGRAM):   end;
37283     +else
37284     +if 116 <= MntMeatProducts AND MntMeatProducts < 186 then do;
MPRINT(EM_DIAGRAM):   else if 116 <= MntMeatProducts AND MntMeatProducts < 186 then do;
37285     +GRP_MntMeatProducts = 8;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 8;
37286     +end;
MPRINT(EM_DIAGRAM):   end;
37287     +else
37288     +if 186 <= MntMeatProducts AND MntMeatProducts < 309 then do;
MPRINT(EM_DIAGRAM):   else if 186 <= MntMeatProducts AND MntMeatProducts < 309 then do;
37289     +GRP_MntMeatProducts = 9;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 9;
37290     +end;
MPRINT(EM_DIAGRAM):   end;
37291     +else
37292     +if 309 <= MntMeatProducts AND MntMeatProducts < 518 then do;
MPRINT(EM_DIAGRAM):   else if 309 <= MntMeatProducts AND MntMeatProducts < 518 then do;
37293     +GRP_MntMeatProducts = 10;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 10;
37294     +end;
MPRINT(EM_DIAGRAM):   end;
37295     +else
37296     +if 518 <= MntMeatProducts then do;
MPRINT(EM_DIAGRAM):   else if 518 <= MntMeatProducts then do;
37297     +GRP_MntMeatProducts = 11;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts = 11;
37298     +end;
MPRINT(EM_DIAGRAM):   end;
37299     +end;
MPRINT(EM_DIAGRAM):   end;
37300     +
37301     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37302     +* Variable: MntSweetProducts;
MPRINT(EM_DIAGRAM):   * Variable: MntSweetProducts;
37303     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37304     +LABEL GRP_MntSweetProducts =
37305     +'Grouped: MntSweetProducts';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntSweetProducts = 'Grouped: MntSweetProducts';
37306     +
37307     +if MISSING(MntSweetProducts) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntSweetProducts) then do;
37308     +GRP_MntSweetProducts = 1;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 1;
37309     +end;
MPRINT(EM_DIAGRAM):   end;
37310     +else if NOT MISSING(MntSweetProducts) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntSweetProducts) then do;
37311     +if MntSweetProducts < 0 then do;
MPRINT(EM_DIAGRAM):   if MntSweetProducts < 0 then do;
37312     +GRP_MntSweetProducts = 2;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 2;
37313     +end;
MPRINT(EM_DIAGRAM):   end;
37314     +else
37315     +if 0 <= MntSweetProducts AND MntSweetProducts < 1 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= MntSweetProducts AND MntSweetProducts < 1 then do;
37316     +GRP_MntSweetProducts = 3;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 3;
37317     +end;
MPRINT(EM_DIAGRAM):   end;
37318     +else
37319     +if 1 <= MntSweetProducts AND MntSweetProducts < 3 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= MntSweetProducts AND MntSweetProducts < 3 then do;
37320     +GRP_MntSweetProducts = 4;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 4;
37321     +end;
MPRINT(EM_DIAGRAM):   end;
37322     +else
37323     +if 3 <= MntSweetProducts AND MntSweetProducts < 5 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= MntSweetProducts AND MntSweetProducts < 5 then do;
37324     +GRP_MntSweetProducts = 5;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 5;
37325     +end;
MPRINT(EM_DIAGRAM):   end;
37326     +else
37327     +if 5 <= MntSweetProducts AND MntSweetProducts < 9 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= MntSweetProducts AND MntSweetProducts < 9 then do;
37328     +GRP_MntSweetProducts = 6;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 6;
37329     +end;
MPRINT(EM_DIAGRAM):   end;
37330     +else
37331     +if 9 <= MntSweetProducts AND MntSweetProducts < 16 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= MntSweetProducts AND MntSweetProducts < 16 then do;
37332     +GRP_MntSweetProducts = 7;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 7;
37333     +end;
MPRINT(EM_DIAGRAM):   end;
37334     +else
37335     +if 16 <= MntSweetProducts AND MntSweetProducts < 27 then do;
MPRINT(EM_DIAGRAM):   else if 16 <= MntSweetProducts AND MntSweetProducts < 27 then do;
37336     +GRP_MntSweetProducts = 8;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 8;
37337     +end;
MPRINT(EM_DIAGRAM):   end;
37338     +else
37339     +if 27 <= MntSweetProducts AND MntSweetProducts < 46 then do;
MPRINT(EM_DIAGRAM):   else if 27 <= MntSweetProducts AND MntSweetProducts < 46 then do;
37340     +GRP_MntSweetProducts = 9;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 9;
37341     +end;
MPRINT(EM_DIAGRAM):   end;
37342     +else
37343     +if 46 <= MntSweetProducts AND MntSweetProducts < 84 then do;
MPRINT(EM_DIAGRAM):   else if 46 <= MntSweetProducts AND MntSweetProducts < 84 then do;
37344     +GRP_MntSweetProducts = 10;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 10;
37345     +end;
MPRINT(EM_DIAGRAM):   end;
37346     +else
37347     +if 84 <= MntSweetProducts then do;
MPRINT(EM_DIAGRAM):   else if 84 <= MntSweetProducts then do;
37348     +GRP_MntSweetProducts = 11;
MPRINT(EM_DIAGRAM):   GRP_MntSweetProducts = 11;
37349     +end;
MPRINT(EM_DIAGRAM):   end;
37350     +end;
MPRINT(EM_DIAGRAM):   end;
37351     +
37352     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37353     +* Variable: MntWines;
MPRINT(EM_DIAGRAM):   * Variable: MntWines;
37354     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37355     +LABEL GRP_MntWines =
37356     +'Grouped: MntWines';
MPRINT(EM_DIAGRAM):   LABEL GRP_MntWines = 'Grouped: MntWines';
37357     +
37358     +if MISSING(MntWines) then do;
MPRINT(EM_DIAGRAM):   if MISSING(MntWines) then do;
37359     +GRP_MntWines = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 1;
37360     +end;
MPRINT(EM_DIAGRAM):   end;
37361     +else if NOT MISSING(MntWines) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(MntWines) then do;
37362     +if MntWines < 6 then do;
MPRINT(EM_DIAGRAM):   if MntWines < 6 then do;
37363     +GRP_MntWines = 2;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 2;
37364     +end;
MPRINT(EM_DIAGRAM):   end;
37365     +else
37366     +if 6 <= MntWines AND MntWines < 16 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= MntWines AND MntWines < 16 then do;
37367     +GRP_MntWines = 3;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 3;
37368     +end;
MPRINT(EM_DIAGRAM):   end;
37369     +else
37370     +if 16 <= MntWines AND MntWines < 33 then do;
MPRINT(EM_DIAGRAM):   else if 16 <= MntWines AND MntWines < 33 then do;
37371     +GRP_MntWines = 4;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 4;
37372     +end;
MPRINT(EM_DIAGRAM):   end;
37373     +else
37374     +if 33 <= MntWines AND MntWines < 84 then do;
MPRINT(EM_DIAGRAM):   else if 33 <= MntWines AND MntWines < 84 then do;
37375     +GRP_MntWines = 5;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 5;
37376     +end;
MPRINT(EM_DIAGRAM):   end;
37377     +else
37378     +if 84 <= MntWines AND MntWines < 183.5 then do;
MPRINT(EM_DIAGRAM):   else if 84 <= MntWines AND MntWines < 183.5 then do;
37379     +GRP_MntWines = 6;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 6;
37380     +end;
MPRINT(EM_DIAGRAM):   end;
37381     +else
37382     +if 183.5 <= MntWines AND MntWines < 298 then do;
MPRINT(EM_DIAGRAM):   else if 183.5 <= MntWines AND MntWines < 298 then do;
37383     +GRP_MntWines = 7;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 7;
37384     +end;
MPRINT(EM_DIAGRAM):   end;
37385     +else
37386     +if 298 <= MntWines AND MntWines < 429 then do;
MPRINT(EM_DIAGRAM):   else if 298 <= MntWines AND MntWines < 429 then do;
37387     +GRP_MntWines = 8;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 8;
37388     +end;
MPRINT(EM_DIAGRAM):   end;
37389     +else
37390     +if 429 <= MntWines AND MntWines < 602 then do;
MPRINT(EM_DIAGRAM):   else if 429 <= MntWines AND MntWines < 602 then do;
37391     +GRP_MntWines = 9;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 9;
37392     +end;
MPRINT(EM_DIAGRAM):   end;
37393     +else
37394     +if 602 <= MntWines AND MntWines < 836 then do;
MPRINT(EM_DIAGRAM):   else if 602 <= MntWines AND MntWines < 836 then do;
37395     +GRP_MntWines = 10;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 10;
37396     +end;
MPRINT(EM_DIAGRAM):   end;
37397     +else
37398     +if 836 <= MntWines then do;
MPRINT(EM_DIAGRAM):   else if 836 <= MntWines then do;
37399     +GRP_MntWines = 11;
MPRINT(EM_DIAGRAM):   GRP_MntWines = 11;
37400     +end;
MPRINT(EM_DIAGRAM):   end;
37401     +end;
MPRINT(EM_DIAGRAM):   end;
37402     +
37403     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37404     +* Variable: NumCatalogPurchases;
MPRINT(EM_DIAGRAM):   * Variable: NumCatalogPurchases;
37405     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37406     +LABEL GRP_NumCatalogPurchases =
37407     +'Grouped: NumCatalogPurchases';
MPRINT(EM_DIAGRAM):   LABEL GRP_NumCatalogPurchases = 'Grouped: NumCatalogPurchases';
37408     +
37409     +if MISSING(NumCatalogPurchases) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumCatalogPurchases) then do;
37410     +GRP_NumCatalogPurchases = 1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 1;
37411     +end;
MPRINT(EM_DIAGRAM):   end;
37412     +else if NOT MISSING(NumCatalogPurchases) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumCatalogPurchases) then do;
37413     +if NumCatalogPurchases < 0 then do;
MPRINT(EM_DIAGRAM):   if NumCatalogPurchases < 0 then do;
37414     +GRP_NumCatalogPurchases = 2;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 2;
37415     +end;
MPRINT(EM_DIAGRAM):   end;
37416     +else
37417     +if 0 <= NumCatalogPurchases AND NumCatalogPurchases < 1 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= NumCatalogPurchases AND NumCatalogPurchases < 1 then do;
37418     +GRP_NumCatalogPurchases = 3;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 3;
37419     +end;
MPRINT(EM_DIAGRAM):   end;
37420     +else
37421     +if 1 <= NumCatalogPurchases AND NumCatalogPurchases < 2 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= NumCatalogPurchases AND NumCatalogPurchases < 2 then do;
37422     +GRP_NumCatalogPurchases = 4;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 4;
37423     +end;
MPRINT(EM_DIAGRAM):   end;
37424     +else
37425     +if 2 <= NumCatalogPurchases AND NumCatalogPurchases < 4 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumCatalogPurchases AND NumCatalogPurchases < 4 then do;
37426     +GRP_NumCatalogPurchases = 5;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 5;
37427     +end;
MPRINT(EM_DIAGRAM):   end;
37428     +else
37429     +if 4 <= NumCatalogPurchases AND NumCatalogPurchases < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= NumCatalogPurchases AND NumCatalogPurchases < 5 then do;
37430     +GRP_NumCatalogPurchases = 6;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 6;
37431     +end;
MPRINT(EM_DIAGRAM):   end;
37432     +else
37433     +if 5 <= NumCatalogPurchases AND NumCatalogPurchases < 7 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumCatalogPurchases AND NumCatalogPurchases < 7 then do;
37434     +GRP_NumCatalogPurchases = 7;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 7;
37435     +end;
MPRINT(EM_DIAGRAM):   end;
37436     +else
37437     +if 7 <= NumCatalogPurchases then do;
MPRINT(EM_DIAGRAM):   else if 7 <= NumCatalogPurchases then do;
37438     +GRP_NumCatalogPurchases = 8;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases = 8;
37439     +end;
MPRINT(EM_DIAGRAM):   end;
37440     +end;
MPRINT(EM_DIAGRAM):   end;
37441     +
37442     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37443     +* Variable: NumDistPurchases;
MPRINT(EM_DIAGRAM):   * Variable: NumDistPurchases;
37444     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37445     +LABEL GRP_NumDistPurchases = "Grouped: NumDistPurchases";
MPRINT(EM_DIAGRAM):   LABEL GRP_NumDistPurchases = "Grouped: NumDistPurchases";
37446     +
37447     +if MISSING(NumDistPurchases) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumDistPurchases) then do;
37448     +GRP_NumDistPurchases = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 1;
37449     +end;
MPRINT(EM_DIAGRAM):   end;
37450     +else if NOT MISSING(NumDistPurchases) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumDistPurchases) then do;
37451     +if NumDistPurchases < 1 then do;
MPRINT(EM_DIAGRAM):   if NumDistPurchases < 1 then do;
37452     +GRP_NumDistPurchases = 2;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 2;
37453     +end;
MPRINT(EM_DIAGRAM):   end;
37454     +else
37455     +if 1 <= NumDistPurchases AND NumDistPurchases < 2 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= NumDistPurchases AND NumDistPurchases < 2 then do;
37456     +GRP_NumDistPurchases = 3;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 3;
37457     +end;
MPRINT(EM_DIAGRAM):   end;
37458     +else
37459     +if 2 <= NumDistPurchases AND NumDistPurchases < 3 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumDistPurchases AND NumDistPurchases < 3 then do;
37460     +GRP_NumDistPurchases = 4;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 4;
37461     +end;
MPRINT(EM_DIAGRAM):   end;
37462     +else
37463     +if 3 <= NumDistPurchases AND NumDistPurchases < 5 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= NumDistPurchases AND NumDistPurchases < 5 then do;
37464     +GRP_NumDistPurchases = 5;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 5;
37465     +end;
MPRINT(EM_DIAGRAM):   end;
37466     +else
37467     +if 5 <= NumDistPurchases AND NumDistPurchases < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumDistPurchases AND NumDistPurchases < 6 then do;
37468     +GRP_NumDistPurchases = 6;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 6;
37469     +end;
MPRINT(EM_DIAGRAM):   end;
37470     +else
37471     +if 6 <= NumDistPurchases AND NumDistPurchases < 8 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= NumDistPurchases AND NumDistPurchases < 8 then do;
37472     +GRP_NumDistPurchases = 7;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 7;
37473     +end;
MPRINT(EM_DIAGRAM):   end;
37474     +else
37475     +if 8 <= NumDistPurchases AND NumDistPurchases < 9 then do;
MPRINT(EM_DIAGRAM):   else if 8 <= NumDistPurchases AND NumDistPurchases < 9 then do;
37476     +GRP_NumDistPurchases = 8;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 8;
37477     +end;
MPRINT(EM_DIAGRAM):   end;
37478     +else
37479     +if 9 <= NumDistPurchases AND NumDistPurchases < 11 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= NumDistPurchases AND NumDistPurchases < 11 then do;
37480     +GRP_NumDistPurchases = 9;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 9;
37481     +end;
MPRINT(EM_DIAGRAM):   end;
37482     +else
37483     +if 11 <= NumDistPurchases AND NumDistPurchases < 13 then do;
MPRINT(EM_DIAGRAM):   else if 11 <= NumDistPurchases AND NumDistPurchases < 13 then do;
37484     +GRP_NumDistPurchases = 10;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 10;
37485     +end;
MPRINT(EM_DIAGRAM):   end;
37486     +else
37487     +if 13 <= NumDistPurchases then do;
MPRINT(EM_DIAGRAM):   else if 13 <= NumDistPurchases then do;
37488     +GRP_NumDistPurchases = 11;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases = 11;
37489     +end;
MPRINT(EM_DIAGRAM):   end;
37490     +end;
MPRINT(EM_DIAGRAM):   end;
37491     +
37492     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37493     +* Variable: NumWebPurchases;
MPRINT(EM_DIAGRAM):   * Variable: NumWebPurchases;
37494     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37495     +LABEL GRP_NumWebPurchases =
37496     +'Grouped: NumWebPurchases';
MPRINT(EM_DIAGRAM):   LABEL GRP_NumWebPurchases = 'Grouped: NumWebPurchases';
37497     +
37498     +if MISSING(NumWebPurchases) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumWebPurchases) then do;
37499     +GRP_NumWebPurchases = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 1;
37500     +end;
MPRINT(EM_DIAGRAM):   end;
37501     +else if NOT MISSING(NumWebPurchases) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumWebPurchases) then do;
37502     +if NumWebPurchases < 1 then do;
MPRINT(EM_DIAGRAM):   if NumWebPurchases < 1 then do;
37503     +GRP_NumWebPurchases = 2;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 2;
37504     +end;
MPRINT(EM_DIAGRAM):   end;
37505     +else
37506     +if 1 <= NumWebPurchases AND NumWebPurchases < 2 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= NumWebPurchases AND NumWebPurchases < 2 then do;
37507     +GRP_NumWebPurchases = 3;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 3;
37508     +end;
MPRINT(EM_DIAGRAM):   end;
37509     +else
37510     +if 2 <= NumWebPurchases AND NumWebPurchases < 3 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumWebPurchases AND NumWebPurchases < 3 then do;
37511     +GRP_NumWebPurchases = 4;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 4;
37512     +end;
MPRINT(EM_DIAGRAM):   end;
37513     +else
37514     +if 3 <= NumWebPurchases AND NumWebPurchases < 4 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= NumWebPurchases AND NumWebPurchases < 4 then do;
37515     +GRP_NumWebPurchases = 5;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 5;
37516     +end;
MPRINT(EM_DIAGRAM):   end;
37517     +else
37518     +if 4 <= NumWebPurchases AND NumWebPurchases < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= NumWebPurchases AND NumWebPurchases < 5 then do;
37519     +GRP_NumWebPurchases = 6;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 6;
37520     +end;
MPRINT(EM_DIAGRAM):   end;
37521     +else
37522     +if 5 <= NumWebPurchases AND NumWebPurchases < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumWebPurchases AND NumWebPurchases < 6 then do;
37523     +GRP_NumWebPurchases = 7;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 7;
37524     +end;
MPRINT(EM_DIAGRAM):   end;
37525     +else
37526     +if 6 <= NumWebPurchases AND NumWebPurchases < 8 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= NumWebPurchases AND NumWebPurchases < 8 then do;
37527     +GRP_NumWebPurchases = 8;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 8;
37528     +end;
MPRINT(EM_DIAGRAM):   end;
37529     +else
37530     +if 8 <= NumWebPurchases then do;
MPRINT(EM_DIAGRAM):   else if 8 <= NumWebPurchases then do;
37531     +GRP_NumWebPurchases = 9;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases = 9;
37532     +end;
MPRINT(EM_DIAGRAM):   end;
37533     +end;
MPRINT(EM_DIAGRAM):   end;
37534     +
37535     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37536     +* Variable: NumWebVisitsMonth;
MPRINT(EM_DIAGRAM):   * Variable: NumWebVisitsMonth;
37537     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37538     +LABEL GRP_NumWebVisitsMonth =
37539     +'Grouped: NumWebVisitsMonth';
MPRINT(EM_DIAGRAM):   LABEL GRP_NumWebVisitsMonth = 'Grouped: NumWebVisitsMonth';
37540     +
37541     +if MISSING(NumWebVisitsMonth) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NumWebVisitsMonth) then do;
37542     +GRP_NumWebVisitsMonth = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 1;
37543     +end;
MPRINT(EM_DIAGRAM):   end;
37544     +else if NOT MISSING(NumWebVisitsMonth) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NumWebVisitsMonth) then do;
37545     +if NumWebVisitsMonth < 2 then do;
MPRINT(EM_DIAGRAM):   if NumWebVisitsMonth < 2 then do;
37546     +GRP_NumWebVisitsMonth = 2;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 2;
37547     +end;
MPRINT(EM_DIAGRAM):   end;
37548     +else
37549     +if 2 <= NumWebVisitsMonth AND NumWebVisitsMonth < 3 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NumWebVisitsMonth AND NumWebVisitsMonth < 3 then do;
37550     +GRP_NumWebVisitsMonth = 3;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 3;
37551     +end;
MPRINT(EM_DIAGRAM):   end;
37552     +else
37553     +if 3 <= NumWebVisitsMonth AND NumWebVisitsMonth < 4 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= NumWebVisitsMonth AND NumWebVisitsMonth < 4 then do;
37554     +GRP_NumWebVisitsMonth = 4;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 4;
37555     +end;
MPRINT(EM_DIAGRAM):   end;
37556     +else
37557     +if 4 <= NumWebVisitsMonth AND NumWebVisitsMonth < 5 then do;
MPRINT(EM_DIAGRAM):   else if 4 <= NumWebVisitsMonth AND NumWebVisitsMonth < 5 then do;
37558     +GRP_NumWebVisitsMonth = 5;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 5;
37559     +end;
MPRINT(EM_DIAGRAM):   end;
37560     +else
37561     +if 5 <= NumWebVisitsMonth AND NumWebVisitsMonth < 6 then do;
MPRINT(EM_DIAGRAM):   else if 5 <= NumWebVisitsMonth AND NumWebVisitsMonth < 6 then do;
37562     +GRP_NumWebVisitsMonth = 6;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 6;
37563     +end;
MPRINT(EM_DIAGRAM):   end;
37564     +else
37565     +if 6 <= NumWebVisitsMonth AND NumWebVisitsMonth < 7 then do;
MPRINT(EM_DIAGRAM):   else if 6 <= NumWebVisitsMonth AND NumWebVisitsMonth < 7 then do;
37566     +GRP_NumWebVisitsMonth = 7;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 7;
37567     +end;
MPRINT(EM_DIAGRAM):   end;
37568     +else
37569     +if 7 <= NumWebVisitsMonth AND NumWebVisitsMonth < 8 then do;
MPRINT(EM_DIAGRAM):   else if 7 <= NumWebVisitsMonth AND NumWebVisitsMonth < 8 then do;
37570     +GRP_NumWebVisitsMonth = 8;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 8;
37571     +end;
MPRINT(EM_DIAGRAM):   end;
37572     +else
37573     +if 8 <= NumWebVisitsMonth then do;
MPRINT(EM_DIAGRAM):   else if 8 <= NumWebVisitsMonth then do;
37574     +GRP_NumWebVisitsMonth = 9;
MPRINT(EM_DIAGRAM):   GRP_NumWebVisitsMonth = 9;
37575     +end;
MPRINT(EM_DIAGRAM):   end;
37576     +end;
MPRINT(EM_DIAGRAM):   end;
37577     +
37578     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37579     +* Variable: RFMstat;
MPRINT(EM_DIAGRAM):   * Variable: RFMstat;
37580     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37581     +LABEL GRP_RFMstat = "Grouped: RFMstat";
MPRINT(EM_DIAGRAM):   LABEL GRP_RFMstat = "Grouped: RFMstat";
37582     +
37583     +if MISSING(RFMstat) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RFMstat) then do;
37584     +GRP_RFMstat = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 1;
37585     +end;
MPRINT(EM_DIAGRAM):   end;
37586     +else if NOT MISSING(RFMstat) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RFMstat) then do;
37587     +if RFMstat < 3 then do;
MPRINT(EM_DIAGRAM):   if RFMstat < 3 then do;
37588     +GRP_RFMstat = 2;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 2;
37589     +end;
MPRINT(EM_DIAGRAM):   end;
37590     +else
37591     +if 3 <= RFMstat AND RFMstat < 6.88 then do;
MPRINT(EM_DIAGRAM):   else if 3 <= RFMstat AND RFMstat < 6.88 then do;
37592     +GRP_RFMstat = 3;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 3;
37593     +end;
MPRINT(EM_DIAGRAM):   end;
37594     +else
37595     +if 6.88 <= RFMstat AND RFMstat < 18.67 then do;
MPRINT(EM_DIAGRAM):   else if 6.88 <= RFMstat AND RFMstat < 18.67 then do;
37596     +GRP_RFMstat = 4;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 4;
37597     +end;
MPRINT(EM_DIAGRAM):   end;
37598     +else
37599     +if 18.67 <= RFMstat AND RFMstat < 52.5 then do;
MPRINT(EM_DIAGRAM):   else if 18.67 <= RFMstat AND RFMstat < 52.5 then do;
37600     +GRP_RFMstat = 5;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 5;
37601     +end;
MPRINT(EM_DIAGRAM):   end;
37602     +else
37603     +if 52.5 <= RFMstat AND RFMstat < 128.09 then do;
MPRINT(EM_DIAGRAM):   else if 52.5 <= RFMstat AND RFMstat < 128.09 then do;
37604     +GRP_RFMstat = 6;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 6;
37605     +end;
MPRINT(EM_DIAGRAM):   end;
37606     +else
37607     +if 128.09 <= RFMstat AND RFMstat < 234.14 then do;
MPRINT(EM_DIAGRAM):   else if 128.09 <= RFMstat AND RFMstat < 234.14 then do;
37608     +GRP_RFMstat = 7;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 7;
37609     +end;
MPRINT(EM_DIAGRAM):   end;
37610     +else
37611     +if 234.14 <= RFMstat AND RFMstat < 369.14 then do;
MPRINT(EM_DIAGRAM):   else if 234.14 <= RFMstat AND RFMstat < 369.14 then do;
37612     +GRP_RFMstat = 8;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 8;
37613     +end;
MPRINT(EM_DIAGRAM):   end;
37614     +else
37615     +if 369.14 <= RFMstat AND RFMstat < 571.29 then do;
MPRINT(EM_DIAGRAM):   else if 369.14 <= RFMstat AND RFMstat < 571.29 then do;
37616     +GRP_RFMstat = 9;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 9;
37617     +end;
MPRINT(EM_DIAGRAM):   end;
37618     +else
37619     +if 571.29 <= RFMstat AND RFMstat < 1073.68 then do;
MPRINT(EM_DIAGRAM):   else if 571.29 <= RFMstat AND RFMstat < 1073.68 then do;
37620     +GRP_RFMstat = 10;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 10;
37621     +end;
MPRINT(EM_DIAGRAM):   end;
37622     +else
37623     +if 1073.68 <= RFMstat then do;
MPRINT(EM_DIAGRAM):   else if 1073.68 <= RFMstat then do;
37624     +GRP_RFMstat = 11;
MPRINT(EM_DIAGRAM):   GRP_RFMstat = 11;
37625     +end;
MPRINT(EM_DIAGRAM):   end;
37626     +end;
MPRINT(EM_DIAGRAM):   end;
37627     +
37628     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37629     +* Variable: RMntFrq;
MPRINT(EM_DIAGRAM):   * Variable: RMntFrq;
37630     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37631     +LABEL GRP_RMntFrq = "Grouped: RMntFrq";
MPRINT(EM_DIAGRAM):   LABEL GRP_RMntFrq = "Grouped: RMntFrq";
37632     +
37633     +if MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   if MISSING(RMntFrq) then do;
37634     +GRP_RMntFrq = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 1;
37635     +end;
MPRINT(EM_DIAGRAM):   end;
37636     +else if NOT MISSING(RMntFrq) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(RMntFrq) then do;
37637     +if RMntFrq < 7.83 then do;
MPRINT(EM_DIAGRAM):   if RMntFrq < 7.83 then do;
37638     +GRP_RMntFrq = 2;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 2;
37639     +end;
MPRINT(EM_DIAGRAM):   end;
37640     +else
37641     +if 7.83 <= RMntFrq AND RMntFrq < 11 then do;
MPRINT(EM_DIAGRAM):   else if 7.83 <= RMntFrq AND RMntFrq < 11 then do;
37642     +GRP_RMntFrq = 3;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 3;
37643     +end;
MPRINT(EM_DIAGRAM):   end;
37644     +else
37645     +if 11 <= RMntFrq AND RMntFrq < 15.83 then do;
MPRINT(EM_DIAGRAM):   else if 11 <= RMntFrq AND RMntFrq < 15.83 then do;
37646     +GRP_RMntFrq = 4;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 4;
37647     +end;
MPRINT(EM_DIAGRAM):   end;
37648     +else
37649     +if 15.83 <= RMntFrq AND RMntFrq < 23.77 then do;
MPRINT(EM_DIAGRAM):   else if 15.83 <= RMntFrq AND RMntFrq < 23.77 then do;
37650     +GRP_RMntFrq = 5;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 5;
37651     +end;
MPRINT(EM_DIAGRAM):   end;
37652     +else
37653     +if 23.77 <= RMntFrq AND RMntFrq < 30.4 then do;
MPRINT(EM_DIAGRAM):   else if 23.77 <= RMntFrq AND RMntFrq < 30.4 then do;
37654     +GRP_RMntFrq = 6;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 6;
37655     +end;
MPRINT(EM_DIAGRAM):   end;
37656     +else
37657     +if 30.4 <= RMntFrq AND RMntFrq < 36.55 then do;
MPRINT(EM_DIAGRAM):   else if 30.4 <= RMntFrq AND RMntFrq < 36.55 then do;
37658     +GRP_RMntFrq = 7;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 7;
37659     +end;
MPRINT(EM_DIAGRAM):   end;
37660     +else
37661     +if 36.55 <= RMntFrq AND RMntFrq < 43.06 then do;
MPRINT(EM_DIAGRAM):   else if 36.55 <= RMntFrq AND RMntFrq < 43.06 then do;
37662     +GRP_RMntFrq = 8;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 8;
37663     +end;
MPRINT(EM_DIAGRAM):   end;
37664     +else
37665     +if 43.06 <= RMntFrq AND RMntFrq < 68.73 then do;
MPRINT(EM_DIAGRAM):   else if 43.06 <= RMntFrq AND RMntFrq < 68.73 then do;
37666     +GRP_RMntFrq = 9;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 9;
37667     +end;
MPRINT(EM_DIAGRAM):   end;
37668     +else
37669     +if 68.73 <= RMntFrq AND RMntFrq < 75.83 then do;
MPRINT(EM_DIAGRAM):   else if 68.73 <= RMntFrq AND RMntFrq < 75.83 then do;
37670     +GRP_RMntFrq = 10;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 10;
37671     +end;
MPRINT(EM_DIAGRAM):   end;
37672     +else
37673     +if 75.83 <= RMntFrq then do;
MPRINT(EM_DIAGRAM):   else if 75.83 <= RMntFrq then do;
37674     +GRP_RMntFrq = 11;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq = 11;
37675     +end;
MPRINT(EM_DIAGRAM):   end;
37676     +end;
MPRINT(EM_DIAGRAM):   end;
37677     +
37678     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37679     +* Variable: Recency;
MPRINT(EM_DIAGRAM):   * Variable: Recency;
37680     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37681     +LABEL GRP_Recency =
37682     +'Grouped: Recency';
MPRINT(EM_DIAGRAM):   LABEL GRP_Recency = 'Grouped: Recency';
37683     +
37684     +if MISSING(Recency) then do;
MPRINT(EM_DIAGRAM):   if MISSING(Recency) then do;
37685     +GRP_Recency = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency = 1;
37686     +end;
MPRINT(EM_DIAGRAM):   end;
37687     +else if NOT MISSING(Recency) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(Recency) then do;
37688     +if Recency < 9 then do;
MPRINT(EM_DIAGRAM):   if Recency < 9 then do;
37689     +GRP_Recency = 2;
MPRINT(EM_DIAGRAM):   GRP_Recency = 2;
37690     +end;
MPRINT(EM_DIAGRAM):   end;
37691     +else
37692     +if 9 <= Recency AND Recency < 19 then do;
MPRINT(EM_DIAGRAM):   else if 9 <= Recency AND Recency < 19 then do;
37693     +GRP_Recency = 3;
MPRINT(EM_DIAGRAM):   GRP_Recency = 3;
37694     +end;
MPRINT(EM_DIAGRAM):   end;
37695     +else
37696     +if 19 <= Recency AND Recency < 29 then do;
MPRINT(EM_DIAGRAM):   else if 19 <= Recency AND Recency < 29 then do;
37697     +GRP_Recency = 4;
MPRINT(EM_DIAGRAM):   GRP_Recency = 4;
37698     +end;
MPRINT(EM_DIAGRAM):   end;
37699     +else
37700     +if 29 <= Recency AND Recency < 38 then do;
MPRINT(EM_DIAGRAM):   else if 29 <= Recency AND Recency < 38 then do;
37701     +GRP_Recency = 5;
MPRINT(EM_DIAGRAM):   GRP_Recency = 5;
37702     +end;
MPRINT(EM_DIAGRAM):   end;
37703     +else
37704     +if 38 <= Recency AND Recency < 48 then do;
MPRINT(EM_DIAGRAM):   else if 38 <= Recency AND Recency < 48 then do;
37705     +GRP_Recency = 6;
MPRINT(EM_DIAGRAM):   GRP_Recency = 6;
37706     +end;
MPRINT(EM_DIAGRAM):   end;
37707     +else
37708     +if 48 <= Recency AND Recency < 58 then do;
MPRINT(EM_DIAGRAM):   else if 48 <= Recency AND Recency < 58 then do;
37709     +GRP_Recency = 7;
MPRINT(EM_DIAGRAM):   GRP_Recency = 7;
37710     +end;
MPRINT(EM_DIAGRAM):   end;
37711     +else
37712     +if 58 <= Recency AND Recency < 68 then do;
MPRINT(EM_DIAGRAM):   else if 58 <= Recency AND Recency < 68 then do;
37713     +GRP_Recency = 8;
MPRINT(EM_DIAGRAM):   GRP_Recency = 8;
37714     +end;
MPRINT(EM_DIAGRAM):   end;
37715     +else
37716     +if 68 <= Recency AND Recency < 79 then do;
MPRINT(EM_DIAGRAM):   else if 68 <= Recency AND Recency < 79 then do;
37717     +GRP_Recency = 9;
MPRINT(EM_DIAGRAM):   GRP_Recency = 9;
37718     +end;
MPRINT(EM_DIAGRAM):   end;
37719     +else
37720     +if 79 <= Recency AND Recency < 90 then do;
MPRINT(EM_DIAGRAM):   else if 79 <= Recency AND Recency < 90 then do;
37721     +GRP_Recency = 10;
MPRINT(EM_DIAGRAM):   GRP_Recency = 10;
37722     +end;
MPRINT(EM_DIAGRAM):   end;
37723     +else
37724     +if 90 <= Recency then do;
MPRINT(EM_DIAGRAM):   else if 90 <= Recency then do;
37725     +GRP_Recency = 11;
MPRINT(EM_DIAGRAM):   GRP_Recency = 11;
37726     +end;
MPRINT(EM_DIAGRAM):   end;
37727     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
37728      run;

NOTE: DATA STEP view saved on file EMWS8.BINNING_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
37729      quit;
37730      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
37732      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
37733      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
37734      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 252 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

37735      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
37736      * BINNING: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * BINNING: Computing metadata for TRAIN data;
37737      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.BINNING_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.BINNING_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.BINNING_TRAIN out=WORK.M1MSOJON noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MSOJON;
The SAS System

MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MSOJON(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MSOJON;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MSOJON;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2FFB292 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FFB292;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FFB292;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M07CQI90(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FFB292;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FFB292;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FFB292;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FFB292;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FFB292;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.BINNING_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "BINNING";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = 'RFMstat' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RFMstat' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RFMstat' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Recency' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Recency' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Recency' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'AcceptedCmpTotal' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmpTotal' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmpTotal' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MntMeatProducts' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntMeatProducts' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntMeatProducts' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'NumCatalogPurchases' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumCatalogPurchases' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumCatalogPurchases' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'NumDistPurchases' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumDistPurchases' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumDistPurchases' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Mnt' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Mnt' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Mnt' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'RMntFrq' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RMntFrq' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_RMntFrq' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Income' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Income' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Income' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Frq' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Frq' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Frq' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MntWines' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntWines' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntWines' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MntGoldProds' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntGoldProds' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntGoldProds' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MntFishProducts' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntFishProducts' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntFishProducts' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'NumWebPurchases' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumWebPurchases' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumWebPurchases' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'NumWebVisitsMonth' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumWebVisitsMonth' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumWebVisitsMonth' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MntSweetProducts' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntSweetProducts' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntSweetProducts' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'AcceptedCmp5' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp5' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp5' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'NumDealsPurchases' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumDealsPurchases' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumDealsPurchases' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'AcceptedCmp3' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp3' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp3' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'AcceptedCmp1' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp1' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp1' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MntFruits' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntFruits' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MntFruits' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Teenhome' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Teenhome' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Teenhome' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Marital_Status' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Marital_Status' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Marital_Status' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'NumStorePurchases' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumStorePurchases' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NumStorePurchases' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'AcceptedCmp4' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp4' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp4' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Age' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Age' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Age' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'MonthsAsCustomer' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MonthsAsCustomer' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MonthsAsCustomer' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Education' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Education' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Education' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Kidhome' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Kidhome' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Kidhome' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'AcceptedCmp2' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp2' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_AcceptedCmp2' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'HigherEducationBinary' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_HigherEducationBinary' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_HigherEducationBinary' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   if name = 'Complain' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Complain' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_Complain' then level='NOMINAL';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
