MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H10m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                10 de Março de 2016
Time:                06H10m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3DUN6C4 "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3DUN6C4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H10m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H10m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
60989      proc freq data=EMWS8.BINNING_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.BINNING_VariableSet noprint;
60990      table ROLE*LEVEL/out=WORK.BINNINGMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BINNINGMETA;
60991      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 25 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.BINNINGMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

60992      proc print data=WORK.BINNINGMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BINNINGMETA label noobs;
60993      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
60994      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
60995      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60996      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
60997      run;

NOTE: There were 6 observations read from the data set WORK.BINNINGMETA.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

60998      title10;
MPRINT(EM_DIAGRAM):   title10;
60999      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61360      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
61361      * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
61362      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
61363      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

61364      %let EMEXCEPTIONSTRING=;
61365      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
61366      * TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   * TRAIN: BINNING;
61367      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61368      %let EM_ACTION = TRAIN;
61369      %let syscc = 0;
61370      %macro main;
61371      
61372        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
61373        %include temp;
61374        filename temp;
61375      
61376        %setProperties;
61377      
61378        %if %upcase(&EM_ACTION) = CREATE %then %do;
61379          filename temp catalog 'sashelp.emmdfy.binning_create.source';
61380          %include temp;
61381          filename temp;
61382      
61383          %create;
61384        %end;
61385      
61386         %else
61387         %if %upcase(&EM_ACTION) = TRAIN %then %do;
61388      
61389             filename temp catalog 'sashelp.emmdfy.binning_train.source';
61390             %include temp;
61391             filename temp;
61392             %train;
61393         %end;
61394      
61395        %else
61396        %if %upcase(&EM_ACTION) = SCORE %then %do;
61397          filename temp catalog 'sashelp.emmdfy.binning_score.source';
61398          %include temp;
61399          filename temp;
61400      
61401          %score;
61402      
61403        %end;
61404      
61405        %else
61406        %if %upcase(&EM_ACTION) = REPORT %then %do;
61407      
61408             filename temp catalog 'sashelp.emmdfy.binning_report.source';
61409             %include temp;
61410             filename temp;
61411      
61412             %report;
61413         %end;
61414      
61415         %doendm:
61416      %mend main;
61417      
61418      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
61420     +%macro SetProperties;
61422     +     /* IGN options */
61423     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
61424     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
61425     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
61427     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
61428     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
61429     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
61430     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
61431     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
61432     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
61433     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
61434     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
61435     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
61436     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
61437     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
61438     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
61439     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
61440     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
61443     +%mend SetProperties;
61444     +%macro appendfiles(fileref1, fileref2);
61445     +     data _null_;
61446     +       length c $256;
61447     +       fid1=fopen("&fileref1",'A');
61448     +       fid2=fopen("&fileref2",'I');
61449     +       cval = finfo(fid2,'lrecl');
61450     +       put cval= fid1= fid2=;
61451     +       if (fid2 > 0) then
61452     +         do while(fread(fid2)=0);
61453     +           rc = fget(fid2,c,256);
61454     +           _msg_=sysmsg();
61455     +           /* put rc= c= _msg_=; */
61456     +           rc = fput(fid1,strip(c));
61457     +           rc = fwrite(fid1);
61458     +         end;
61459     +         _msg_=sysmsg();
61460     +         put _msg_=;
61461     +       rc = fclose(fid1);
61462     +       rc = fclose(fid2);
61463     +     run;
61464     +%mend appendfiles;
61466     +%macro buildOptScoreCode;
61468     +    %em_register(key=BINCODE, type=FOLDER);
61470     +    filename x catalog 'sashelp.emutil.em_deldir.source';
61471     +    %inc x;
61472     +    filename x;
61473     +    %delDir(folder=%nrbquote(&em_user_bincode));
61475     +    data _null_; length rc $200;
61476     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
61477     +    run;
61479     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
61481     +    %let dsid = %sysfunc(open(class_nosv));
61482     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
61483     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
61485     +    %let oldname=;
61486     +    %do %while(^%sysfunc(fetch(&dsid)));
61487     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
61488     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
61490     +        %if &name ne &oldname %then %do;
61491     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
61492     +             data _null_;
61493     +                length string $200 flag endflag 8;
61494     +                retain string flag endflag;
61495     +                set class_nosv end=eof;
61496     +                where DISPLAY_VAR ="&name";
61497     +                by _variable_ _group_;
61498     +                file _F1;
61499     +                index = kindex(_variable_, "BIN_");
61500     +                if index gt 0 then do;
61501     +                   if first._variable_ then do;
61502     +                      put ' ';
61503     +                      put "&EM_CODEBAR;";
61504     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
61505     +                      put string;
61506     +                      put "&EM_CODEBAR;";
61508     +                      if origLabel ne "" then do;
61509     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
61510     +                            put string;
61511     +                            string = tranwrd(origLabel,"'","''");
61512     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
61513     +                            put string;
61514     +                      end;
61515     +                      else do;
61516     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
61517     +                             put string;
61518     +                      end;
61520     +                      put ' ';
61522     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61523     +                      put string;
61524     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61525     +                      put string;
61526     +                      put "end;";
61527     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61528     +                      put string;
61529     +                   end;
61530     +                   if first._group_ then do;
61531     +                      flag = 0;
61532     +                      endflag = 1;
61533     +                      if ^first._variable_ then do;
61534     +                         put "else";
61535     +                      end;
61536     +                      if LB ne . then do;
61537     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
61538     +                      end;
61539     +                      else do;
61540     +                         flag = 1;
61541     +                         string = "if";
61542     +                      end;
61543     +                   end;
61544     +                   if last._Group_ then do;
61545     +                      if UB ne . then do;
61546     +                        if flag ne 1 then do;
61547     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
61548     +                        end;
61549     +                        else do;
61550     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
61551     +                        end;
61552     +                      end;
61553     +                      else do;
61554     +                         if flag=1 then do;
61555     +                            string = strip(DISPLAY_VAR) ;
61556     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
61557     +                            endflag=0;
61558     +                            string="";
61559     +                         end;
61560     +                         else do;
61561     +                            string = strip(string)!!" then do;";
61562     +                         end;
61563     +                      end;
61564     +                      put string;
61565     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61566     +                      put string;
61567     +                      if endflag eq 1 then do;
61568     +                        put "end;";
61569     +                      end;
61570     +                   end;
61571     +                   if last._variable_ then do;
61572     +                     string = "end;";
61573     +                     put string;
61574     +                   end;
61576     +                end;
61577     +                else do;
61578     +                   _split_value_ = tranwrd(_split_value_,"'","''");
61579     +                   if first._group_ then do;
61580     +                      flag=0;
61581     +                      if ^first._variable_ then
61582     +                         put 'else';
61583     +                      else do;
61584     +                         put ' ';
61585     +                         put "&EM_CODEBAR;";
61586     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
61587     +                         put string;
61588     +                         put "&EM_CODEBAR;";
61590     +                         if origLabel ne "" then do;
61591     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
61592     +                               put string;
61593     +                               string = tranwrd(origLabel,"'","''");
61594     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
61595     +                               put string;
61596     +                         end;
61597     +                         else do;
61598     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
61599     +                               put string;
61600     +                         end;
61602     +                         put ' ';
61604     +                         if format ne '' then do;
61605     +                            if first._variable_ then do;
61606     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
61607     +                               put string;
61608     +                               string = '%dmnormip(_UFormat);';
61609     +                               put string;
61611     +                               string ="if MISSING(_UFORMAT) then do;";
61612     +                               put string;
61613     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61614     +                               put string;
61615     +                               put "end;";
61617     +                               string="else if NOT MISSING(_UFORMAT) then do;";
61618     +                               put string;
61620     +                            end;
61621     +                         end;
61622     +                         else do;
61623     +                            if type = 'N' then do;
61624     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61625     +                              put string;
61626     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61627     +                              put string;
61628     +                              put "end;";
61630     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61631     +                              put string;
61632     +                            end;
61633     +                            else if type='C' then do;
61634     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
61635     +                              put string;
61636     +                              string = '%dmnormip(_UFormat);';
61637     +                              put string;
61639     +                              string ="if MISSING(_UFORMAT) then do;";
61640     +                              put string;
61641     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61642     +                              put string;
61643     +                              put "end;";
61645     +                              string="else if NOT MISSING(_UFORMAT) then do;";
61646     +                              put string;
61647     +                              string = '%dmnormip(_UFormat);';
61648     +                              put string;
61649     +                           end;
61650     +                         end;
61651     +                      end;
61652     +                      if format ne '' OR type='C' then do;
61653     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
61654     +                      end;
61655     +                      else do;
61656     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61657     +                      end;
61658     +                   end;
61659     +                   else do;
61660     +                      if flag ne 1 then do;
61661     +                       if format ne '' OR type='C' then do;
61662     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
61663     +                       end;
61664     +                       else do;
61665     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61666     +                       end;
61667     +                         length = length(tempstring);
61669     +                         if length < 195 then do;
61670     +                            string = tempstring;
61671     +                         end;
61672     +                         else do;
61674     +                            string = strip(string);
61675     +                            put string;
61676     +                            string = ") then do;";
61677     +                            put string;
61679     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61680     +                            put string;
61681     +                            put "end;";
61683     +                            put 'else';
61684     +                            if format ne '' OR type='C' then do;
61685     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
61686     +                            end;
61687     +                            else do;
61688     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
61689     +                            end;
61690     +                         end;
61691     +                      end;
61692     +                   end;
61694     +                   if last._group_ then do;
61695     +                      string = strip(string);
61696     +                      put string;
61698     +                      string = ") then do;";
61699     +                      put string;
61701     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61702     +                      put string;
61703     +                      put "end;";
61704     +                   end;
61706     +                   if last._variable_ then do;
61707     +                     put "else do;";
61709     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61710     +                     put string;
61712     +                     put "end;";
61713     +                     put "end;";
61714     +                   end;
61715     +                end;
61716     +             run;
61718     +             %let oldname = &name;
61719     +        %end;
61720     +    %end;
61721     +    %let dsid = %sysfunc(close(&dsid));
61723     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
61724     +    data _null_;
61725     +       file _F1;
61726     +       put "length _UFormat $200;";
61727     +       put "drop _UFormat;";
61728     +       put "_UFormat='';";
61729     +    run;
61730     +    filename _F1;
61732     +   %em_register(key=EMSCOREVAR, type=DATA);
61733     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
61734     +   proc datasets lib=&em_lib nolist;
61735     +      delete &scorevarDs;
61736     +   run;
61737     +   quit;
61739     +   %let filrf=mydir;
61740     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
61741     +   %let did=%sysfunc(dopen(&filrf));
61743     +   %if &did %then %do;  %PUT  did= &did;
61744     +       %let memcount=%sysfunc(dnum(&did));
61745     +       %if &memcount > 0 %then %do;
61746     +           data &em_user_emscorevar;
61747     +              length Name $32 formula $70 file $200;
61748     +              keep NAME Formula file;
61749     +              formula  = '';
61750     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
61751     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
61752     +               output;
61753     +           %end;
61754     +           %do i=1 %to &memcount;
61755     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
61756     +               %let newvar = %scan(&name, 1, .);
61757     +               %if "&newvar" ne "_ALL_" %then %do;
61758     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
61759     +                   output;
61760     +               %end;
61761     +           %end;
61763     +           run;
61764     +       %end;
61765     +       %let did = %sysfunc(dclose(&did));
61766     +  %end;
61768     +   %doendu:
61769     +%mend buildOptScoreCode;
61772     +%macro buildScoreCode(flowCode, publishCode);
61775     +  filename x "&flowCode";
61777     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
61778     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
61779     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
61781     +  data temp;
61782     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
61783     +    by display_var _Split_value_;
61784     +     if upcase(_Split_value_) ne 'MISSING';
61785     +   run;
61787     +   data temp_missing;
61788     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
61789     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
61790     +     by display_var _Split_value_;
61791     +     if upcase(_Split_value_) eq 'MISSING';
61792     +     keep _variable_ display_var missgrp;
61793     +   run;
61795     +   proc sort data=temp_missing; by display_var missgrp; run;
61797     +   data temp_missing;
61798     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
61799     +     by display_var missgrp;
61800     +     if ^_a then delete;
61801     +     keep _variable_ display_var missgrp ;
61802     +   run;
61804     +   data temp;
61805     +     merge temp temp_missing;
61806     +     by display_var;
61807     +     if display_Var eq '' then delete;
61808     +    run;
61810     +    /* pull in wtev values */
61811     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
61812     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
61813     +    proc sort data=temp;  by display_var _group_; run;
61815     +   data temp;
61816     +      merge temp tempcoarse(keep=display_var _group_  role) ;
61817     +      by display_var _group_;
61818     +    run;
61820     +    data temp;
61821     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
61822     +      by display_var;
61824     +      if _group_ = . then delete;
61825     +      if _variable_ = '' then delete;
61826     +    run;
61828     +    proc sort data=temp out=class;
61829     +       by _variable_ _group_ LB;
61830     +    run;
61832     +    data _null_;
61833     +      file X;
61835     +      put "length _UFormat $200;";
61836     +      put "drop _UFormat;";
61837     +      put "_UFormat='';";
61838     +    run;
61840     +    data class_nosv;
61841     +      set class;
61842     +      if upcase(role)="INPUT";
61843     +    run;
61845     +    data _null_;
61846     +       file X MOD;
61847     +       length string $200 flag endflag 8;
61848     +       retain string flag endflag;
61849     +       set class_nosv end=eof;
61850     +       by _variable_ _group_;
61852     +       index = kindex(_variable_, "BIN_");
61853     +       if index gt 0 then do;
61855     +         if first._variable_ then do;
61856     +            put ' ';
61857     +            put "&EM_CODEBAR;";
61858     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
61859     +            put string;
61860     +            put "&EM_CODEBAR;";
61863     +            if origLabel ne "" then do;
61864     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
61865     +              put string;
61866     +              string = tranwrd(origLabel,"'","''");
61867     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
61868     +              put string;
61869     +            end;
61870     +            else do;
61871     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
61872     +             put string;
61873     +            end;
61875     +            put ' ';
61877     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61878     +            put string;
61879     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61880     +            put string;
61881     +            put "end;";
61882     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61883     +            put string;
61884     +          end;
61885     +           if first._group_ then do;
61886     +              flag = 0;
61887     +              endflag = 1;
61888     +              if ^first._variable_ then do;
61889     +                put "else";
61890     +              end;
61891     +              if LB ne . then do;
61892     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
61893     +              end;
61894     +              else do;
61895     +                 flag = 1;
61896     +                 string = "if";
61897     +              end;
61899     +           end;
61900     +           if last._Group_ then do;
61901     +              if UB ne . then do;
61902     +                if flag ne 1 then do;
61903     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
61904     +                end;
61905     +                else do;
61906     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
61907     +                end;
61908     +              end;
61909     +              else do;
61910     +                 if flag=1 then do;
61911     +                   string = strip(DISPLAY_VAR) ;
61912     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
61913     +                   endflag = 0;
61914     +                   string="";
61915     +                 end;
61916     +                 else do;
61917     +                   string = strip(string)!!" then do;";
61918     +                 end;
61919     +              end;
61920     +              put string;
61922     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61923     +              put string;
61924     +              if endflag eq 1 then do;
61925     +                put "end;";
61926     +              end;
61927     +           end;
61928     +           if last._variable_ then do;
61929     +             string = "end;";
61930     +             put string;
61931     +           end;
61932     +       end;
61933     +       else do;
61934     +           _split_value_ = tranwrd(_split_value_,"'","''");
61935     +           if first._group_ then do;
61936     +              flag=0;
61937     +              if ^first._variable_ then
61938     +                 put 'else';
61939     +              else do;
61940     +                 put ' ';
61941     +                 put "&EM_CODEBAR;";
61942     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
61943     +                 put string;
61944     +                 put "&EM_CODEBAR;";
61946     +                 if origLabel ne "" then do;
61947     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
61948     +                   put string;
61949     +                   string = tranwrd(origLabel,"'","''");
61950     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
61951     +                   put string;
61952     +                 end;
61953     +                 else do;
61954     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
61955     +                   put string;
61956     +                 end;
61958     +                 put ' ';
61960     +                if format ne '' then do;
61961     +                  if first._variable_ then do;
61962     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
61963     +                    put string;
61964     +                    string = '%dmnormip(_UFormat);';
61965     +                    put string;
61967     +                     string ="if MISSING(_UFORMAT) then do;";
61968     +                     put string;
61969     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61970     +                     put string;
61971     +                     put "end;";
61973     +                     string="else if NOT MISSING(_UFORMAT) then do;";
61974     +                     put string;
61976     +                  end;
61977     +                end;
61978     +                else do;
61979     +                     if type = 'N' then do;
61980     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61981     +                       put string;
61982     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61983     +                       put string;
61984     +                       put "end;";
61986     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61987     +                       put string;
61989     +                     end;
61990     +                     else if type='C' then do;
61991     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
61992     +                        put string;
61993     +                        string = '%dmnormip(_UFormat);';
61994     +                        put string;
61996     +                        string ="if MISSING(_UFORMAT) then do;";
61997     +                        put string;
61998     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61999     +                        put string;
62000     +                        put "end;";
62002     +                        string="else if NOT MISSING(_UFORMAT) then do;";
62003     +                        put string;
62004     +                        string = '%dmnormip(_UFormat);';
62005     +                        put string;
62006     +                    end;
62007     +                end;
62008     +              end;
62009     +              if format ne '' OR type='C' then do;
62010     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
62011     +              end;
62012     +              else do;
62013     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62014     +              end;
62015     +           end;
62016     +           else do;
62017     +              if flag ne 1 then do;
62018     +                if format ne '' OR type='C' then do;
62019     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
62020     +                end;
62021     +                else do;
62022     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62023     +                end;
62024     +                length = klength(tempstring);
62026     +                if length < 195 then do;
62027     +                   string = tempstring;
62028     +                end;
62029     +                else do;
62031     +                   string = strip(string);
62032     +                   put string;
62033     +                   string = ") then do;";
62034     +                   put string;
62036     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62037     +                   put string;
62038     +                   put "end;";
62040     +                 /*  string = strip(string)||",'...';"; */
62042     +                   put 'else';
62043     +                   if format ne '' OR type='C' then do;
62044     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
62045     +                   end;
62046     +                   else do;
62047     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62048     +                   end;
62051     +                end;
62052     +              end;
62053     +           end;
62055     +           if last._group_ then do;
62056     +              string = strip(string);
62057     +              put string;
62058     +              string = ") then do;";
62059     +              put string;
62061     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62062     +              put string;
62063     +              put "end;";
62064     +           end;
62066     +           if last._variable_ then do;
62067     +             put "else do;";
62069     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62070     +             put string;
62072     +             put "end;";
62073     +             put "end;";
62074     +           end;
62075     +         *end;
62076     +       end;
62077     +    run;
62079     +    /* generate PublishCode the same as flowscorecode */
62080     +    filename Y "&publishCode";
62082     +    /* if publishCode already exists, wipe it out first */
62083     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
62084     +      %let rc = %sysfunc(fdelete(Y));
62085     +    %end;
62087     +    %appendfiles(Y, X);
62089     +    filename X;
62090     +    filename Y;
62092     +    %buildOptScoreCode;
62094     +    proc datasets library=work nolist;
62095     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
62096     +    run;
62097     +    quit;
62099     +%mend buildScoreCode;
62101     +%macro buildMetaCode(DeltaCodeFile=);
62103     +   /* set variable roles based on New Role column in the Results table */
62104     +   data _null_;
62105     +      file &DeltaCodeFile;
62106     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
62107     +      %if &dsid %then %do;
62108     +        %let obs = %sysfunc(fetch(&dsid));
62109     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
62110     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
62111     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
62113     +        %do %while(&obs=0);
62114     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
62115     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
62116     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
62118     +          /* retrieve grp and woe names from varmappings dataset */
62119     +          %let choice = _VARIABLE_ = "&inputname";
62120     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
62121     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
62122     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
62123     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
62124     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
62126     +          put "if name = '&inputname' then role='REJECTED';";
62127     +          %if "&role" ne "DEFAULT" %then %do;
62128     +            put "if name = '&grpname' then role='&role';";
62129     +          %end;
62130     +          %else %do;
62131     +            put "if name = '&grpname' then role='&oldrole';";
62132     +          %end;
62133     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
62135     +          %let obs = %sysfunc(fetch(&dsid));
62136     +        %end;
62137     +      %end;
62138     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62139     +   run;
62141     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
62142     +   data _null_;
62143     +      file &DeltaCodeFile MOD;
62145     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
62146     +      %if &sdsid %then %do;
62147     +        %let sobs = %sysfunc(fetch(&sdsid));
62148     +        %do %while(&sobs=0);
62149     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
62150     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
62151     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
62152     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
62154     +          %let checkgrp = GRP_&checkname;
62155     +          %let lenname = %length(&checkgrp);
62156     +          %if %eval(&lenname-32) > 0 %then %do;
62157     +            %let checkgrp = %substr(&checkgrp, 1, 32);
62158     +          %end;
62160     +          %let choice = _VARIABLE_ ="&checkname";
62161     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
62163     +          /* if var not found in varmappings, delete variables; */
62164     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
62165     +          %if &vdsid eq 0 %then %do;
62166     +            put 'if name="&displayvar" then delete;';
62167     +            %let dispgrp = GRP_&displayvar;
62168     +            put 'if name="&dispgrp" then delete;';
62169     +          %end;
62171     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
62172     +          %let sobs = %sysfunc(fetch(&sdsid));
62173     +        %end;
62174     +      %end;
62175     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
62176     +   run;
62178     +%mend buildMetaCode;
62180     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
62182     +   proc sort data=&coarse out=sortedcoarse nodupkey;
62183     +     by display_var;
62184     +   run;
62185     +   proc sort data=&varmappings nodupkey;
62186     +     by _variable_;
62187     +   run;
62188     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
62189     +     proc sort data=&resultstable; by display_var; run;
62190     +   %end;
62192     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
62193     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
62194     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
62195     +        &resultstable (keep = display_var _new_role_ )
62196     +     %end;
62197     +     ;
62198     +     by display_var;
62199     +     length _role_ _new_role_ $10;
62200     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
62201     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
62202     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
62203     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
62204     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
62205     +           ;
62207     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
62208     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
62209     +                _role_ = "Rejected";
62210     +             else _role_ = "Input";
62211     +           %end;
62212     +           %else %do;
62213     +             _role_ = "Input";
62214     +           %end;
62215     +           if _new_role_ eq "" then _new_role_="Default";
62216     +      if ^_a then do;
62217     +        _gini_ = 0;
62218     +        _role_ = 'Rejected';
62219     +        if _new_role_ eq "" then _new_role_="Default";
62220     +      end;
62221     +   run;
62222     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
62223     +     by NAME;
62224     +   run;
62225     +   data outlabel;
62226     +     set outlabel;
62227     +     if _label_ = '' then _label_ = _variable_;
62228     +   run;
62229     +   data &resultstable;
62230     +     merge &resultstable(in=_a_) outlabel;
62231     +     by display_Var;
62232     +     if _a_ then output;
62233     +   run;
62234     +   proc datasets library=work nolist;
62235     +     delete sortedcoarse outlabel;
62236     +   run;
62237     +   quit;
62238     +   proc sort data=&resultstable nodupkey;
62239     +      by DESCENDING
62240     +        _gini_ display_Var;
62241     +   run;
62242     +   data &resultstable;
62243     +     set &resultstable;
62245     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
62246     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
62247     +     giniOrder = _N_;
62248     +     _gini_ = round(_GINI_, .001);
62249     +     drop _variable_;
62250     +   run;
62252     +   proc print data=&resultstable label;
62253     +   run;
62255     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
62256     +   data &coarse;
62257     +     set &coarse;
62258     +     length role $10;
62259     +     %let dsid = %sysfunc(open(&resultstable));
62260     +     %if &dsid %then %do;
62261     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
62262     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
62263     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
62265     +       %let obs = %sysfunc(fetch(&dsid));
62266     +       %do %while(&obs=0);
62267     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
62268     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
62269     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
62271     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
62272     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
62273     +            giniOrder = &order;
62274     +            role = "&role";
62275     +          end;
62277     +          %let obs = %sysfunc(fetch(&dsid));
62278     +       %end;
62279     +     %end;
62280     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62281     +   run;
62284     +%mend EM_GENERATE_RESULTSTABLE;
62286     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
62288     +    /* instantiate the zchar macro to be used in adding bin definition */
62289     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
62290     +    %inc _temp;
62291     +    filename _temp;
62293     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
62294     +      by _variable_ binFlag _group_ LB;
62295     +    run;
62297     +    data tempExport;
62298     +      set sortedFine;
62299     +      by _variable_ binFlag _group_;
62300     +      length _split_value_ $200;
62302     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
62303     +      if binFlag = 0 then do;
62304     +        index = kindex(_variable_, "BIN_");
62305     +        if index gt 0 then do;
62306     +          _LEVEL_ = "INTERVAL";
62307     +        end;
62308     +        _Split_value_ = _split_value_;
62309     +        output;
62310     +      end;
62311     +      else do;
62312     +         * if last._group_ then do;
62313     +          index = kindex(_variable_, "BIN_");
62314     +          if index gt 0 then do;
62315     +            _LEVEL_ = "INTERVAL";
62316     +          end;
62317     +          _Split_value_ = %zchar(UB);
62318     +          output;
62319     +         * end;
62320     +      end;
62322     +      rename display_Var = _variable_;
62323     +      keep display_var _level_ _group_ _split_value_ binFlag;
62324     +    run;
62326     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
62327     +       data &EXPORTGROUPING;
62328     +         set tempexport;
62329     +       run;
62330     +    %end;
62331     +    %else %do;
62332     +       /* determine if EXPORTGROUPING already exists */
62333     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
62334     +         data &EXPORTGROUPING;
62335     +            set &EXPORTGROUPING tempexport;
62336     +         run;
62337     +       %end;
62338     +       %else %do;
62339     +         data &EXPORTGROUPING;
62340     +            set tempexport;
62341     +         run;
62342     +       %end;
62343     +    %end;
62345     +    proc datasets lib=work nolist;
62346     +      delete sortedFine tempexport;
62347     +    run;
62348     +    quit;
62350     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_TRAIN.SOURCE.
62356     +%macro train;
62358     +   /* include training macros */
62359     +   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
62360     +   %include trtemp;
62361     +   filename trtemp;
62363     +   /* trick IGN into thinking it is a model node to build decmeta; further down, set %EM_MODEL ASSESS=N
62364     +   %let EM_TOOLTYPE = MODEL; */
62366     +   %if &EM_IMPORT_DATA eq %then %do;
62367     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN, 1;
62368     +       %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note , NOQUOTE));
62369     +       %put &em_codebar;
62370     +       %put &errmsg;
62371     +       %put &em_codebar;
62372     +       %goto doendm;
62373     +   %end;
62375     +   %if  &EM_NUM_TARGET ne 1 %then %do;
62376     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
62377     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, USE1TARGET_ERR  , NOQUOTE));
62379     +        %put &em_codebar;
62380     +        %put &errmsg;
62381     +        %put &em_codebar;
62382     +        %goto doendm;
62383     +   %end;
62385     +   %if  &EM_NUM_BINARY_TARGET ne 1 %then %do;
62386     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
62387     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, METADATA.USE1BINTARGET_ERR   , NOQUOTE));
62389     +        %put &em_codebar;
62390     +        %put &errmsg;
62391     +        %put &em_codebar;
62392     +        %goto doendm;
62393     +   %end;
62395     +   /* Initialize property macro variables */
62396     +   %SetProperties;
62398     +   /* retrieve target information */
62399     +   /* does decmeta exist?  If not, retrieve target information elsewhere */
62400     +   %global target_event;
62401     +   %let target_event=;
62402     +   %if "&EM_DEC_DECMETA" eq "" %then %do;
62403     +     /* retrieve type and format from variableset */
62404     +     %let eventorder = DESC;
62405     +     data temp;
62406     +       set &EM_DATA_VARIABLESET;
62407     +       where NAME ="%EM_BINARY_TARGET";
62408     +     run;
62409     +     %let dsid = %sysfunc(open(work.temp));
62410     +     %if &dsid %then %do;
62411     +       %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
62412     +       %let formatnum = %sysfunc(VARNUM(&dsid, FORMAT));
62413     +       %let ordernum  = %sysfunc(VARNUM(&dsid, ORDER));
62414     +       %let obs = %sysfunc(fetchobs(&dsid, 1));
62415     +       %let Target_type = %sysfunc(getvarc(&dsid, &typenum));
62416     +       %let Target_Format = %sysfunc(getvarc(&dsid, &formatnum));
62417     +       %let Target_Order  = %sysfunc(getvarc(&dsid, &ordernum));
62418     +       %if &TARGET_ORDER  = ASC %then %let eventorder = ASC;
62419     +          %else
62420     +       %if &TARGET_ORDER  = DESC %then %let eventorder = DESC;
62421     +          %else
62422     +       %if &TARGET_ORDER  = FMTASC %then %let eventorder = ASCFMT;
62423     +          %else
62424     +       %if &TARGET_ORDER  = FMTDESC %then %let eventorder = DESFMT;
62425     +     %end;
62426     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62428     +     /* retrieve target_event and Target_nonEvent values */
62429     +     proc dmdb data=&EM_IMPORT_DATA classout=EVENTOUT;
62430     +       target %EM_BINARY_TARGET;
62431     +       class  %EM_BINARY_TARGET(&eventorder);
62432     +     run;
62433     +     data _null_;
62434     +       dsid = open("EVENTOUT");
62435     +       if dsid>0 then do;
62436     +       levelnum = VARNUM(dsid, "LEVEL");
62437     +       if levelnum then do;
62438     +         if ^fetch(dsid) then
62439     +           call symput('TARGET_EVENT',   strip(getvarc(dsid, levelnum)));
62441     +         if ^fetch(dsid) then
62442     +           call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
62443     +       end;
62444     +       dsid=close(dsid);
62445     +       end;
62446     +     run;
62447     +     proc datasets library=work nolist;
62448     +        delete eventout;
62449     +     run;
62450     +     quit;
62451     +   %end;
62452     +   %else %do;
62454     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
62456     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
62457     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
62458     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
62460     +   %do %while(^ %sysfunc(fetch(&dsid)));
62461     +      %let Target_Event = %sysfunc(getvarc(&dsid, &vn_event));
62462     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
62463     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
62464     +   %end;
62465     +   %let dsid = %sysfunc(close(&dsid));
62467     +   %let dsid=%sysfunc(open(&EM_DEC_DECDATA));
62468     +     %let obs = %sysfunc(fetchobs(&dsid, 2));
62469     +     %let vn_nonevent = %sysfunc(varnum(&dsid, %EM_BINARY_TARGET));
62470     +     %let Target_NonEvent= %sysfunc(getvarc(&dsid, &vn_nonevent));
62471     +   %let dsid = %sysfunc(close(&dsid));
62472     +   %end;
62474     +   /* data sets */
62475     +   %EM_GETNAME(key=BINDATA,        type=DATA);
62476     +   %EM_GETNAME(key=SPLITVALS,      type=DATA);
62477     +   %EM_GETNAME(key=VARMAPPINGS,    type=DATA);
62478     +   %EM_GETNAME(key=BINMAPPINGS,    type=DATA);
62479     +   %EM_GETNAME(key=COARSE,          type=DATA);
62480     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
62481     +   %EM_GETNAME(key=RESULTSTABLE,   type=DATA);
62483     +   /* files */
62484     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);
62485     +   %EM_GETNAME(key=GROUPMAPPINGSCORECODE, type=FILE, extension=sas);
62487     +   /* if freeze eq Y and no finedetaildata exists, throw an exception */
62488     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
62489     +     %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) ne 1 %then %do;
62490     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOFINEDETAIL;
62491     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, nofinedetail_error , NOQUOTE));
62493     +        %put &em_codebar;
62494     +        %put &errmsg;
62495     +        %put &em_codebar;
62496     +        %goto doendm;
62497     +     %end;
62498     +   %end;
62500     +   %global useImport;
62501     +   %let useImport = 0;
62503     +   %EM_GETNAME(key=IMPORTSUBSET, type=DATA);
62505     +   %if %sysfunc(exist(&EM_USER_IMPORTSUBSET, DATA)) %then %do;
62506     +     proc datasets library=&EM_LIB nolist;
62507     +       delete &EM_NODEID._IMPORTSUBSET;
62508     +     run;
62509     +     quit;
62510     +   %end;
62512     +   /* if importGrouping=Y, verify that data and all vars exist and are of the correct type */
62513     +   %if &EM_PROPERTY_IMPORTGROUPING eq Y %then %do;
62515     +     /* if import eq Y and no importtable exists, throw an exception */
62516     +     %if %sysfunc(exist(&EM_PROPERTY_IMPORTDATA, DATA)) ne 1 %then %do;
62517     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOIMPORT;
62518     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, noimport_error , NOQUOTE));
62520     +        %put &em_codebar;
62521     +        %put &errmsg;
62522     +        %put &em_codebar;
62523     +        %goto doendm;
62524     +     %end;
62526     +      %let dsid = %sysfunc(open(&EM_PROPERTY_IMPORTDATA));
62527     +      %if &dsid %then %do;
62528     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
62529     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
62530     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
62531     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
62533     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
62534     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
62535     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
62536     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
62537     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
62538     +         %end;
62539     +      %end;
62540     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62542     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
62543     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
62545     +        /* generate subset of data that contains those vars also found in training data and add display_var information */
62546     +        proc sort data=&EM_PROPERTY_IMPORTDATA out=tempimport;
62547     +           by _VARIABLE_ ;
62548     +        run;
62550     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
62551     +          by NAME;
62552     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
62553     +        run;
62555     +        data &EM_USER_IMPORTSUBSET;
62556     +          merge tempimport(in=_a) tempvarset(in=_b);
62557     +          length display_Var $32;
62558     +          by _VARIABLE_;
62559     +          display_var = _Variable_;
62560     +          if _a and _b then output;
62561     +        run;
62563     +        proc datasets library=work nolist;
62564     +          delete tempimport tempvarset;
62565     +        run;
62566     +        quit;
62568     +        %end;
62569     +      %end;
62570     +   %end;
62572     +   /* set useImport flag if there are obs in the importSubset dataset */
62573     +   %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET));
62574     +   %if &dsid %then %do;
62575     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
62576     +     %if &nobs gt 0 %then %let useimport = 1;
62577     +   %end;
62578     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62580     +   %global useFreeze;
62581     +   %let useFreeze = 0;
62583     +   /* if Freeze=Y, verify that data and all vars exist and are of the correct type */
62584     +   %EM_GETNAME(key=FREEZESUBSET, type=DATA);
62586     +   %if %sysfunc(exist(&EM_USER_FREEZESUBSET, DATA)) %then %do;
62587     +     proc datasets library=&EM_LIB nolist;
62588     +       delete &EM_NODEID._FREEZESUBSET;
62589     +     run;
62590     +     quit;
62591     +   %end;
62593     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
62595     +      /* create freezesubset data to contain information on pre-binned data and raw values */
62596     +      %EM_GENERATE_EXPORTGROUP(&EM_USER_FREEZESUBSET, OVERWRITE);
62598     +      %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
62599     +      %if &dsid %then %do;
62600     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
62601     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
62602     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
62603     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
62605     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
62606     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
62607     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
62608     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
62609     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
62610     +         %end;
62611     +      %end;
62612     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62614     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
62615     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
62617     +        /* generate subset of data that contains those vars also found in training data */
62618     +        proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze;
62619     +           by _VARIABLE_ ;
62620     +        run;
62622     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
62623     +          by NAME;
62624     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
62625     +        run;
62627     +        data &EM_USER_FREEZESUBSET;
62628     +          merge tempfreeze(in=_a) tempvarset(in=_b);
62629     +          length display_Var $32;
62630     +          by _VARIABLE_;
62631     +          display_var = _Variable_;
62632     +          if _a and _b then output;
62633     +        run;
62635     +        proc datasets library=work nolist;
62636     +          delete tempfreeze tempvarset;
62637     +        run;
62638     +        quit;
62639     +        %end;
62640     +      %end;
62641     +   %end;
62643     +   /* set useFreeze flag if there are obs in the freezeSubset dataset */
62644     +   %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
62645     +   %if &dsid %then %do;
62646     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
62647     +     %if &nobs gt 0 %then %let useFreeze = 1;
62648     +   %end;
62649     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62651     +   /* if finedetail already exists, delete prior to re-run */
62652     +   %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) %then %do;
62653     +     proc datasets library=&EM_LIB nolist;
62654     +       delete &EM_NODEID._FINEDETAILDATA;
62655     +     run;
62656     +     quit;
62657     +   %end;
62659     +   data tempvarnames;
62660     +     set &EM_DATA_VARIABLESET;
62661     +     where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
62662     +     keep NAME LEVEL LABEL;
62663     +   run;
62665     +   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
62666     +     names NAME;
62667     +     prefix WOE_ GRP_ ;
62668     +   run;
62670     +   proc sort data=tempmapping; by name; run;
62671     +   proc sort data=tempvarnames; by name; run;
62672     +   data tempmapping;
62673     +     merge tempmapping tempvarnames;
62674     +     by NAME;
62675     +     rename LEVEL=procLevel;
62676     +   run;
62678     +   /* generate initial columns of mapping table by setting grpflag=0 */
62679     +   %EM_GENERATE_MAPPING_TABLE;
62681     +   proc datasets library=work nolist;
62682     +     delete tempImport tempScore;
62683     +   run;
62684     +   quit;
62686     +   /* delete splitvals dataset if this existed prior to run */
62687     +   %let nvars=0;
62688     +   %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
62689     +   %if &sdsid > 0 %then %do;
62690     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
62691     +   %end;
62692     +   %if &sdsid > 0 %then  %let sdsid=%sysfunc(close(&sdsid));
62694     +   %if &nvars > 0 %then %do;
62695     +      proc datasets library=&EM_LIB nolist;
62696     +        delete &EM_NODEID._SPLITVALS;
62697     +      run;
62698     +      quit;
62699     +   %end;
62701     +   %global classvars qclassvars;
62702     +   %let classvars=;
62703     +   %let qclassvars=;
62705     +   /* generate the intervalvars and classvars macros */
62706     +   %EM_PRE_BINNING(&EM_IMPORT_DATA);
62708     +   /* update varmappings with any changes to procLevel based on discretemid */
62709     +   data &EM_USER_VARMAPPINGS;
62710     +     set &EM_USER_VARMAPPINGS;
62711     +     /* procLevel column to indicate the level used by proc; this handles*/
62712     +     /* cases in which var is marked INTERVAL in metadat but treated as  */
62713     +     /* ordinal in prebinning because of # unique levels                 */
62714     +     %let dsid = %sysfunc(open(work._discretemid));
62715     +     %if &dsid %then %do;
62716     +       %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
62717     +       %let obs = %sysfunc(fetch(&dsid));
62718     +       %do %while(&obs=0);
62719     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
62720     +          if _variable_ = "&varname" then procLevel = "ORDINAL";
62721     +          %let obs = %sysfunc(fetch(&dsid));
62722     +       %end;
62723     +     %end;
62724     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62725     +     label procLevel =  "%sysfunc(sasmsg(sashelp.dmine, rpt_proclevel_vlabel , NOQUOTE))";
62726     +   run;
62728     +   /* generate Grp_xxx variables for interval inputs */
62729     +   %if &EM_PROPERTY_BINMETHOD eq QUANTILE %then %do;
62730     +     %EM_QUANTILE_BINNING(&EM_IMPORT_DATA, WORK.PCTILE, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
62732     +   %end;
62733     +   %else %do;
62734     +     %EM_EQUAL_SPACED_BINNING(&EM_IMPORT_DATA, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
62735     +   %end;
62737     +   /* generate GRP_XXX variables for nominal inputs */
62738     +   %EM_CLASSVARS_GROUP(&EM_PROPERTY_CLASSGROUPRARE);
62740     +   /* generate GRP_XXX variables for ordinal inputs */
62741     +   %EM_ORDVARS_GROUP;
62743     +   proc print data=&EM_USER_VARMAPPINGS label;
62744     +     var _VARIABLE_ _GRP_VARIABLE_ ;
62745     +   run;
62747     +   /* add _proc_var_ to varmappings data to know names of processed variables; could be original input, could be bin_xxx */
62748     +   proc sort data=&EM_USER_SPLITVALS out=tempsplitvals nodupkey;
62749     +     by _VARIABLE_;
62750     +   run;
62752     +   data &EM_USER_VARMAPPINGS;
62753     +     set &EM_USER_VARMAPPINGS;
62754     +     length _proc_var_ $32;
62755     +     %let dsid = %sysfunc(open(work.tempsplitvals));
62756     +     %if &dsid %then %do;
62757     +        %let obs = %sysfunc(fetch(&dsid));
62758     +        %do %while(&obs=0);
62759     +          %let dispnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
62760     +          %let dispvar = %sysfunc(getvarc(&dsid, &dispnum));
62761     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
62762     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
62764     +          if upcase(_VARIABLE_) = %upcase("&dispvar") then _proc_var_ = "&var";
62765     +          %let obs = %sysfunc(fetch(&dsid));
62766     +        %end;
62767     +     %end;
62768     +     if missing(_proc_var_) then _proc_var_=_variable_;
62769     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62770     +   run;
62772     +   proc datasets library=work nolist;
62773     +     delete sortedbin tempsplitvals;
62774     +   run;
62775     +   quit;
62777     +   /* calculate Fine Detail statistics for each input */
62778     +   %EM_FINE_DETAIL(&EM_USER_BINDATA, &EM_USER_VARMAPPINGS, &EM_USER_FINEDETAILDATA, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS);
62780     +   /* apply grouping and create grouped dataset */
62781     +   %EM_CREATE_GROUPING(&EM_USER_BINDATA, &EM_USER_FINEDETAILDATA, &EM_USER_COARSE);
62783     +   /* generate _label_ values in the COARSE dataset from the Scored data */
62784     +   filename Y "&EM_USER_GROUPMAPPINGSCORECODE";
62785     +   %EM_GENERATE_LABELVALUES(Y, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS, &EM_USER_COARSE);
62786     +   filename Y;
62788     +   /* set EM_MODEL ASSESS=N to prevent assessment reports from being generated */
62789     +   %EM_MODEL(Target= %EM_BINARY_TARGET, ASSESS=N);
62791     +   /* generate reports */
62792     +   %EM_REPORT(key=COARSE, viewtype=DATA, block=MODEL, description=EVENTRATESTAT, autodisplay=N, spk=N);
62795     +   %doendm:
62796     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
NOTE: %INCLUDE (level 1) file TRTEMP is file SASHELP.EMMDFY.BINNING_TRAINMACROS.SOURCE.
62798     +%macro EM_GENERATE_MAPPING_TABLE;
62800     +  %EM_GETNAME(key=VARMAPPINGS, type=DATA);
62801     +  data &EM_USER_VARMAPPINGS(keep=_variable_  _grp_variable_ procLevel label);
62802     +   length _variable_  _grp_variable_  $32 procLevel $8;
62803     +   set tempmapping;
62804     +   label _variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_inputvar_vlabel , NOQUOTE))"
62805     +         _grp_variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_grpvar_vlabel , NOQUOTE))";
62807     +         _variable_ = NAME;
62808     +         _grp_variable_ = GRP;
62809     + run;
62811     +%mend EM_GENERATE_MAPPING_TABLE;
62813     +%macro EM_PRE_BINNING(input);
62814     +    /* Determine which of our variables are interval  */
62815     +    %global intervalvars;
62816     +    %let intervalvars= ;
62817     +    data tempvariableset;
62818     +      set &EM_DATA_VARIABLESET;
62819     +      where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
62820     +    run;
62822     +    /* add all interval vars to the intervalvar macro */
62823     +    %let dsid = %sysfunc(open(work.tempvariableset));
62824     +    %if &dsid %then %do;
62825     +       %let varnum = %sysfunc(VARNUM(&dsid, NAME));
62826     +       %let obs = %sysfunc(fetch(&dsid));
62827     +       %do %while(&obs=0);
62828     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
62829     +          %let intervalvars = &intervalvars &varname;
62830     +          %let obs = %sysfunc(fetch(&dsid));
62831     +       %end;
62832     +    %end;
62833     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62835     +    /* Determine which variables marked as interval are true interval distributions; */
62836     +    /* intmid contains variables that are actually interval and should be binned; */
62837     +    /* discretemid contains variables that are actually discrete and should NOT be binned */
62838     +    %if &intervalvars ne %then %do;
62839     +      %let _maxlevel = %eval(&EM_PROPERTY_NUMBINS + 1);
62840     +      proc dmdb data=&input classout=_CLASSOUT maxlevel=&_maxlevel;
62841     +        class &intervalvars;
62842     +      run;
62843     +      proc freq data=_CLASSOUT order=DATA noprint;
62844     +         table NAME / OUT= _COUNT(where=(COUNT<&_maxlevel));
62845     +      run;
62847     +      %let _INTBINS=;
62848     +      data _null_;
62849     +        set _COUNT;
62850     +        call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
62851     +      run;
62853     +      proc sort data=_CLASSOUT;
62854     +        by NAME;
62855     +      run;
62856     +      proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
62857     +        var NRAW;
62858     +        by NAME;
62859     +      run;
62861     +      data _null_;
62862     +        dsid = open('_OUT');
62863     +        if dsid then do;
62864     +           call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
62865     +           csid = close(dsid);
62866     +        end;
62867     +      run;
62868     +      data _INTMID;
62869     +        set _OUT;
62870     +        keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
62871     +        %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
62872     +          if ^indexw("&_INTBINS", VARIABLE) then output;
62873     +        %end;
62874     +      run;
62876     +      %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
62877     +        data _DISCRETEMID;
62878     +          set _OUT;
62879     +          keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
62880     +          if indexw("&_INTBINS", VARIABLE) then output;
62881     +        run;
62882     +      %end;
62884     +      /* add vars from the _DISCRETEMID dataset to the classvars macro
62885     +      %let dsid = %sysfunc(open(WORK._DISCRETEMID));
62886     +      %if &dsid %then %do;
62887     +        %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
62888     +        %let obs = %sysfunc(fetch(&dsid));
62890     +        %do %while(&obs=0);
62891     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
62892     +          %let classvars = &classvars &var;
62893     +          %let qclassvars = &qclassvars "&var";
62894     +          %let obs = %sysfunc(fetch(&dsid));
62895     +        %end;
62896     +      %end;
62897     +      %if &dsid  %then %let dsid = %sysfunc(close(&dsid));
62898     +*/
62899     +    %end;
62900     +    %else %do;
62901     +      *data _INTMID;
62902     +      *run;
62904     +      *data _DISCRETEMID;
62905     +      *run;
62906     +    %end;
62908     +    /* if import grouping then remove interval vars in import data from _INTMID */
62909     +    %if &useImport eq 1 %then %do;
62911     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
62912     +        by _VARIABLE_;
62913     +      run;
62915     +      data &EM_USER_IMPORTSUBSET;
62916     +        length CODEVAR $32;
62917     +        set &EM_USER_IMPORTSUBSET;
62918     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
62919     +      run;
62921     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
62922     +        by _VARIABLE_;
62923     +      run;
62925     +      %let dsid = %sysfunc(open(work.tempsubset));
62926     +      %let nobs = 0;
62927     +      %if &dsid %then %do;
62928     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
62929     +      %end;
62930     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
62932     +      data tempsubset;
62933     +        set tempsubset;
62934     +        length  binVar suffix $32;
62935     +        array binnames{&nobs} $32 _temporary_;
62936     +        retain binVar binnames;
62937     +        by _VARIABLE_;
62939     +        binVar = 'BIN_'!!strip(CODEVAR);
62940     +        binVar = ksubstr(binVar, 1, 32);
62941     +        count = 1;
62943     +        do i=1 to _N_;
62944     +           do while(binvar eq binnames(i));
62945     +              suffix = strip(put(count,best.));
62946     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
62947     +              count + 1;
62948     +           end;
62949     +        end;
62950     +        binnames(_N_)= binvar;
62951     +        output;
62952     +        drop suffix count i;
62953     +     run;
62955     +     data &EM_USER_IMPORTSUBSET;
62956     +       set &EM_USER_IMPORTSUBSET;
62957     +       length binVar $32;
62959     +        %let dsid = %sysfunc(open(work.tempsubset));
62960     +        %if &dsid %then %do;
62961     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
62962     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
62963     +          %let obs = %sysfunc(fetch(&dsid));
62965     +          %do %while(&obs=0);
62966     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
62967     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
62969     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
62970     +            %let obs = %sysfunc(fetch(&dsid));
62971     +          %end;
62972     +        %end;
62973     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
62974     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
62975     +        if binVar ne "" then do;
62976     +          _LEVEL_ = "ORDINAL";
62977     +        end;
62979     +      run;
62981     +      %let idsidexists=0;
62982     +      %let idsid = %sysfunc(open(work._intmid));
62983     +      %if &idsid %then %do;
62984     +        %let idsidexists=1;
62985     +        %let idsid = %sysfunc(close(&idsid));
62986     +      %end;
62988     +      %if &idsidexists = 1 %then %do;
62989     +      data _INTMID;
62990     +        set _INTMID;
62992     +        %let dsid = %sysfunc(open(work.tempsubset));
62993     +        %if &dsid %then %do;
62994     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
62995     +          %let obs = %sysfunc(fetch(&dsid));
62997     +          %do %while(&obs=0);
62998     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
62999     +            if variable = "&codevar" then delete;
63000     +            %let obs = %sysfunc(fetch(&dsid));
63001     +          %end;
63002     +        %end;
63003     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63004     +      run;
63005     +      %end;
63007     +      proc datasets library=work nolist;
63008     +        delete tempsubset;
63009     +      run;
63010     +      quit;
63011     +    %end;
63013     +    /* if freeze then remove interval vars in import data from _INTMID */
63014     +    %if &useFreeze eq 1 %then %do;
63016     +      data &EM_USER_FREEZESUBSET;
63017     +        length CODEVAR $32;
63018     +        set &EM_USER_FREEZESUBSET;
63019     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
63020     +      run;
63022     +      proc sort data=&EM_USER_FREEZESUBSET out=tempsubset nodupkey;
63023     +        by _VARIABLE_;
63024     +      run;
63026     +      %let dsid = %sysfunc(open(work.tempsubset));
63027     +      %let nobs = 0;
63028     +      %if &dsid %then %do;
63029     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
63030     +      %end;
63031     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
63033     +      data tempsubset;
63034     +        set tempsubset;
63035     +        length  binVar suffix $32;
63036     +        array binnames{&nobs} $32 _temporary_;
63037     +        retain binVar binnames;
63038     +        by _VARIABLE_;
63040     +        binVar = 'BIN_'!!strip(CODEVAR);
63041     +        binVar = ksubstr(binVar, 1, 32);
63042     +        count = 1;
63044     +        do i=1 to _N_;
63045     +           do while(binvar eq binnames(i));
63046     +              suffix = strip(put(count,best.));
63047     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
63048     +              count + 1;
63049     +           end;
63050     +        end;
63051     +        binnames(_N_)= binvar;
63052     +        output;
63053     +        drop suffix count i;
63054     +     run;
63056     +     data &EM_USER_FREEZESUBSET;
63057     +       set &EM_USER_FREEZESUBSET;
63058     +       length binVar $32;
63060     +        %let dsid = %sysfunc(open(work.tempsubset));
63061     +        %if &dsid %then %do;
63062     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63063     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
63064     +          %let obs = %sysfunc(fetch(&dsid));
63066     +          %do %while(&obs=0);
63067     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
63068     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
63070     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
63071     +            %let obs = %sysfunc(fetch(&dsid));
63072     +          %end;
63073     +        %end;
63074     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63076     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
63077     +        if binVar ne "" then do;
63078     +          _LEVEL_ = "ORDINAL";
63079     +        end;
63081     +      run;
63083     +      %let idsidexists= 0;
63084     +      %let idsid = %sysfunc(open(work._intmid));
63085     +      %if &idsid %then %do;
63086     +        %let idsidexists=1;
63087     +        %let idsid = %sysfunc(close(&idsid));
63088     +      %end;
63089     +      %if &idsidexists eq 1 %then %do;
63090     +      data _INTMID;
63091     +        set _INTMID;
63093     +        %let dsid = %sysfunc(open(work.tempsubset));
63094     +        %if &dsid %then %do;
63095     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
63096     +          %let obs = %sysfunc(fetch(&dsid));
63098     +          %do %while(&obs=0);
63099     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
63100     +            if variable = "&codevar" then delete;
63101     +            %let obs = %sysfunc(fetch(&dsid));
63102     +          %end;
63103     +        %end;
63104     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63105     +      run;
63106     +      %end;
63108     +      proc datasets library=work nolist;
63109     +        delete tempsubset;
63110     +      run;
63111     +      quit;
63113     +    %end;
63115     +%mend EM_PRE_BINNING;
63117     +%macro EM_IMPORT_BINNING(binningCode);
63120     +   data tempintimport;
63121     +     set &EM_USER_IMPORTSUBSET;
63122     +     if binflag = 1;
63123     +   run;
63125     +   %let idsid = %sysfunc(open(work.tempintimport));
63126     +   %if &idsid %then %do;
63127     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
63128     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
63129     +   %end;
63130     +   %else %do;
63131     +     %let nvars = 0;
63132     +     %let nobs = 0;
63133     +   %end;
63134     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
63136     +   proc datasets library=work nolist;
63137     +     delete tempintimport;
63138     +   run;
63139     +   quit;
63141     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
63143     +      filename X "&binningCode";
63144     +      data _null_;
63145     +        FILE X MOD;
63146     +        %let bin_variables=;
63147     +        %let quote_bin_variables = ;
63148     +        %let choice = binflag = 1;
63149     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
63150     +        %if &dsid %then %do;
63151     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
63152     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
63153     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
63154     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingbins_note , NOQUOTE));
63156     +           put "&EM_CODEBAR;";
63157     +           put " &note; ";
63158     +           put "&EM_CODEBAR;";
63160     +           /* retrieve value for first obs */
63161     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
63162     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
63163     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
63165     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
63166     +           %let i = 1;
63167     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
63168     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
63169     +           %end;
63170     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
63171     +           put " ";
63172     +           put "if &oldname eq . then &binvalue = .;";
63174     +           /* cycle through special codes if they exist */
63175     +           %let index2 = %index(&oldname, SV_);
63176     +           %if &index2 gt 0 %then %do;
63177     +             %let choice = CODEVAR ="&oldname";
63178     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
63179     +             %if &cdsid %then %do;
63180     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
63181     +                %let cobs = %sysfunc(fetch(&cdsid));
63182     +                %do %while(&cobs=0);
63183     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
63184     +                    put "else if &oldname eq &code then &binvalue = &code;";
63185     +                   %let cobs = %sysfunc(fetch(&cdsid));
63186     +                %end;
63187     +             %end;
63188     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
63189     +           %end;
63190     +           put "else ";
63191     +           put "  if &oldname < &value then &binvalue=&i;";
63192     +           %let i= %eval(&i+1);
63194     +           %let obs = %sysfunc(fetch(&dsid));
63195     +           %do %while(&obs=0);
63196     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
63197     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
63198     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
63200     +              %if "&oldname" ne "&namevalue" %then %do;
63202     +                /* if variable has been re-coded for special codes, must include these values as well */
63203     +                put;
63204     +                put "if &namevalue eq . then &binvalue = .;";
63206     +                %let i=1;
63207     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
63208     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
63209     +                %end;
63210     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
63212     +                /* cycle through special codes if they exist */
63213     +                %let index2 = %index(&namevalue, SV_);
63214     +                %if &index2 gt 0 %then %do;
63215     +                  %let choice = CODEVAR ="&namevalue";
63216     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
63217     +                  %if &cdsid %then %do;
63218     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
63219     +                     %let cobs = %sysfunc(fetch(&cdsid));
63220     +                     %do %while(&cobs=0);
63221     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
63222     +                       put "else if &namevalue eq &code then &binvalue = &code;";
63223     +                       %let cobs = %sysfunc(fetch(&cdsid));
63224     +                     %end;
63225     +                  %end;
63226     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
63227     +                %end;
63228     +                put "else ";
63229     +                put "  if &namevalue < &value then &binvalue=&i;";
63230     +              %end;
63231     +              %else %do;
63232     +                put "else ";
63233     +                %if "&value" ne "." %then %do;
63234     +                  put "  if &namevalue < &value then &binvalue=&i;";
63235     +                %end;
63236     +                %else %do;
63237     +                  put "  &binvalue=&i;";
63238     +                %end;
63239     +              %end;
63240     +              %let i = %eval(&i + 1);
63241     +              %let obs = %sysfunc(fetch(&dsid));
63242     +              %let oldname = &namevalue;
63243     +              %let oldbinvalue = &binvalue;
63244     +           %end;
63245     +        %end;
63246     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
63248     +      run;
63249     +      filename X;
63250     +      /* generate BINMAPPINGS dataset */
63251     +      data TEMPBINMAPPINGS;
63252     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
63254     +        %let choice = binflag = 1;
63255     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
63256     +        %if &dsid %then %do;
63257     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63258     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
63259     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
63260     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
63261     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
63263     +           /* retrieve information from first obs */
63264     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
63265     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
63266     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
63267     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
63268     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar,5));
63269     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
63270     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
63271     +           %let i = 1;
63273     +           NAME = "&OLDCODEVAR";
63274     +           BIN_NAME = "&OLDBINVAR";
63275     +           GRP_NAME = "&OLDGRPVAR";
63276     +           BIN = "&i";
63277     +           GRP = "&oldgrpvalue";
63278     +           LB = . ;
63279     +           UB = &oldvalue;
63280     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
63281     +           DISPLAY_VAR = "&oldvar";
63282     +           output;
63284     +           %let i = 2;
63285     +           %let obs = %sysfunc(fetch(&dsid));
63286     +           %do %while(&obs=0);
63287     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
63288     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
63289     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
63290     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar,5));
63291     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
63292     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
63294     +             %if "&oldvar" ne "&var" %then %do;
63295     +              %let i = 1;
63296     +               %let oldvalue = .;
63297     +             %end;
63299     +             NAME = "&CODEVAR";
63300     +             BIN_NAME = "&BINVAR";
63301     +             GRP_NAME = "&GRPVAR";
63302     +             BIN = "&i";
63303     +             GRP = "&group";
63304     +             LB = &oldvalue ;
63305     +             UB = &value;
63306     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
63307     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
63308     +             %end;
63309     +             %else %do;
63310     +               %if "&oldvalue" eq "." %then %do;
63311     +                 EM_BIN_LABEL = "&var < &value" ;
63312     +               %end;
63313     +               %if "&value" eq "." %then %do;
63314     +                 EM_BIN_LABEL = "&oldvalue >= &var";
63315     +               %end;
63316     +             %end;
63317     +             DISPLAY_VAR = "&var";
63318     +             output;
63320     +             %let oldvar = &var;
63321     +             %let oldcodevar = &codevar;
63322     +             %let oldbinvar = &binvar;
63323     +             %let oldgrpvar = &grpvar;
63324     +             %let oldvalue   = &value;
63325     +             %let oldgrpvalue   = &group;
63326     +             %let i = %eval(&i + 1);
63327     +             %let obs = %sysfunc(fetch(&dsid));
63328     +           %end;
63329     +        %end;
63330     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
63331     +      run;
63333     +      data &EM_USER_BINMAPPINGS;
63334     +        set &EM_USER_BINMAPPINGS tempBinMappings;
63335     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
63336     +      run;
63338     +      /* update importsubset with bin values instead of raw values */
63339     +      data &EM_USER_IMPORTSUBSET;
63340     +        set &EM_USER_IMPORTSUBSET;
63342     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
63343     +        %if &dsid %then %do;
63344     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
63345     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
63346     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
63347     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
63348     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
63349     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
63351     +          %let oldvar = ;
63352     +          %let obs = %sysfunc(fetch(&dsid));
63353     +          %do %while(&obs=0);
63354     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
63355     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
63356     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
63357     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
63358     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
63359     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
63361     +            %if "&oldvar" eq "&displayvar" %then %do;
63362     +              else
63363     +            %end;
63364     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
63365     +               _SPLIT_VALUE_ = "&bin";
63366     +            end;
63367     +            %let oldvar = &displayvar;
63368     +            %let obs = %sysfunc(fetch(&dsid));
63369     +          %end;
63370     +        %end;
63371     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63372     +      run;
63374     +      proc sort data=&EM_USER_IMPORTSUBSET;
63375     +        by _VARIABLE_ _SPLIT_VALUE_;
63376     +      run;
63378     +      proc datasets library=work nolist;
63379     +        delete tempBinMappings;
63380     +      run;
63381     +      quit;
63382     +  %end;
63383     +%mend EM_IMPORT_BINNING;
63385     +%macro EM_FREEZE_BINNING(binningCode);
63387     +   data tempintfreeze;
63388     +     set &EM_USER_FREEZESUBSET;
63389     +     if binflag = 1;
63390     +   run;
63392     +   %let idsid = %sysfunc(open(work.tempintfreeze));
63393     +   %if &idsid %then %do;
63394     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
63395     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
63396     +   %end;
63397     +   %else %do;
63398     +     %let nvars = 0;
63399     +     %let nobs = 0;
63400     +   %end;
63401     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
63403     +   proc datasets library=work nolist;
63404     +     delete tempintimport;
63405     +   run;
63406     +   quit;
63408     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
63410     +      filename X "&binningCode";
63411     +      data _null_;
63412     +        FILE X MOD;
63414     +        %let bin_variables=.;
63415     +        %let quote_bin_variables=.;
63416     +        %let freeze_variables=;
63417     +        %let choice = binflag = 1;
63418     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
63419     +        %if &dsid %then %do;
63420     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
63421     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
63422     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
63423     +           %let vnum    = %sysfunc(VARNUM(&dsid, _variable_));
63425     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingfrozenbins_note , NOQUOTE));
63426     +           put "&EM_CODEBAR;";
63427     +           put "&note;";
63428     +           put "&EM_CODEBAR;";
63430     +           /* retrieve value for first obs */
63431     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
63432     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
63433     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
63434     +           %let variable = %sysfunc(getvarc(&dsid, &vnum));
63436     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
63437     +           %let i = 1;
63438     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
63439     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
63440     +           %end;
63441     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
63442     +           %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
63444     +           put " ";
63445     +           put "if &oldname eq . then &binvalue = .;";
63447     +           /* cycle through special codes if they exist */
63448     +           %let index2 = %index(&oldname, SV_);
63449     +           %if &index2 gt 0 %then %do;
63450     +             %let choice = CODEVAR ="&oldname";
63451     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
63452     +             %if &cdsid %then %do;
63453     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
63454     +                %let cobs = %sysfunc(fetch(&cdsid));
63455     +                %do %while(&cobs=0);
63456     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
63457     +                    put "else if &oldname eq &code then &binvalue = &code;";
63458     +                   %let cobs = %sysfunc(fetch(&cdsid));
63459     +                %end;
63460     +             %end;
63461     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
63462     +           %end;
63463     +           put "else ";
63464     +           put "  if &oldname < &value then &binvalue=&i;";
63465     +           %let i= %eval(&i+1);
63467     +           %let obs = %sysfunc(fetch(&dsid));
63468     +           %do %while(&obs=0);
63469     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
63470     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
63471     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
63472     +              %let variable = %sysfunc(getvarc(&dsid, &vnum));
63474     +              %if "&oldname" ne "&namevalue" %then %do;
63476     +                /* if variable has been re-coded for special codes, must include these values as well */
63477     +                put;
63478     +                put "if &namevalue eq . then &binvalue = .;";
63480     +                %let i=1;
63481     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
63482     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
63483     +                %end;
63484     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
63485     +                %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
63487     +                /* cycle through special codes if they exist */
63488     +                %let index2 = %index(&namevalue, SV_);
63489     +                %if &index2 gt 0 %then %do;
63490     +                  %let choice = CODEVAR ="&namevalue";
63491     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
63492     +                  %if &cdsid %then %do;
63493     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
63494     +                     %let cobs = %sysfunc(fetch(&cdsid));
63495     +                     %do %while(&cobs=0);
63496     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
63497     +                       put "else if &namevalue eq &code then &binvalue = &code;";
63498     +                       %let cobs = %sysfunc(fetch(&cdsid));
63499     +                     %end;
63500     +                  %end;
63501     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
63502     +                %end;
63503     +                put "else ";
63504     +                put "  if &namevalue < &value then &binvalue=&i;";
63505     +              %end;
63506     +              %else %do;
63507     +                put "else ";
63508     +                %if "&value" ne "." %then %do;
63509     +                  put "  if &namevalue < &value then &binvalue=&i;";
63510     +                %end;
63511     +                %else %do;
63512     +                  put " &binvalue=&i;";
63513     +                %end;
63514     +              %end;
63515     +              %let i = %eval(&i + 1);
63516     +              %let obs = %sysfunc(fetch(&dsid));
63517     +              %let oldname = &namevalue;
63518     +              %let oldbinvalue = &binvalue;
63519     +           %end;
63520     +        %end;
63521     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
63523     +      run;
63524     +      filename X;
63525     +      /* generate BINMAPPINGS dataset */
63526     +      data TEMPBINMAPPINGS;
63527     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
63529     +        %let choice = binflag = 1;
63530     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
63531     +        %if &dsid %then %do;
63532     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63533     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
63534     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
63535     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
63536     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
63538     +           /* retrieve information from first obs */
63539     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
63540     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
63541     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
63542     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
63543     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar, 5));
63544     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
63545     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
63546     +           %let i = 1;
63548     +           NAME = "&OLDCODEVAR";
63549     +           BIN_NAME = "&OLDBINVAR";
63550     +           GRP_NAME = "&OLDGRPVAR";
63551     +           BIN = "&i";
63552     +           GRP = "&oldgrpvalue";
63553     +           LB = . ;
63554     +           UB = &oldvalue;
63555     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
63556     +           DISPLAY_VAR = "&oldvar";
63557     +           output;
63559     +           %let i = 2;
63560     +           %let obs = %sysfunc(fetch(&dsid));
63561     +           %do %while(&obs=0);
63562     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
63563     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
63564     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
63565     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar, 5));
63566     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
63567     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
63569     +             %if "&oldvar" ne "&var" %then %do;
63571     +               %let i = 1;
63572     +               %let oldvalue = .;
63573     +             %end;
63575     +             NAME = "&CODEVAR";
63576     +             BIN_NAME = "&BINVAR";
63577     +             GRP_NAME = "&GRPVAR";
63578     +             BIN = "&i";
63579     +             GRP = "&group";
63580     +             LB = &oldvalue ;
63581     +             UB = &value;
63582     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
63583     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
63584     +             %end;
63585     +             %else %do;
63586     +               %if "&oldvalue" eq "." %then %do;
63587     +                 EM_BIN_LABEL = "&var < &value" ;
63588     +               %end;
63589     +               %if "&value" eq "." %then %do;
63590     +                 EM_BIN_LABEL = "&oldvalue >= &var";
63591     +               %end;
63592     +             %end;
63593     +             DISPLAY_VAR = "&var";
63594     +             output;
63596     +             %let oldvar = &var;
63597     +             %let oldcodevar = &codevar;
63598     +             %let oldbinvar = &binvar;
63599     +             %let oldgrpvar = &grpvar;
63600     +             %let oldvalue   = &value;
63601     +             %let oldgrpvalue = &group;
63602     +             %let i = %eval(&i + 1);
63603     +             %let obs = %sysfunc(fetch(&dsid));
63604     +           %end;
63605     +        %end;
63607     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
63608     +      run;
63610     +      /* remove obs from EM_USER_BINMAPPINGS that have vars also in tempBinMappings -- prevents duplicate entries */
63611     +      data &EM_USER_BINMAPPINGS;
63612     +        set &EM_USER_BINMAPPINGS;
63613     +        if NAME in (&FREEZE_VARIABLES) then delete;
63614     +      run;
63616     +      data &EM_USER_BINMAPPINGS;
63617     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
63619     +        set &EM_USER_BINMAPPINGS tempBinMappings;
63620     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
63621     +      run;
63623     +      /* update freezesubset with bin values instead of raw values */
63624     +      data &EM_USER_FREEZESUBSET;
63625     +        set &EM_USER_FREEZESUBSET;
63627     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
63628     +        %if &dsid %then %do;
63629     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
63630     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
63631     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
63632     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
63633     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
63634     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
63636     +          %let oldvar = ;
63637     +          %let obs = %sysfunc(fetch(&dsid));
63638     +          %do %while(&obs=0);
63639     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
63640     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
63641     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
63642     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
63643     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
63644     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
63646     +            %if "&oldvar" eq "&displayvar" %then %do;
63647     +              else
63648     +            %end;
63649     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
63650     +               _SPLIT_VALUE_ = "&bin";
63651     +            end;
63652     +            %let oldvar =&displayvar;
63653     +            %let obs = %sysfunc(fetch(&dsid));
63654     +          %end;
63655     +        %end;
63656     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63657     +      run;
63659     +      proc sort data=&EM_USER_FREEZESUBSET;
63660     +        by _VARIABLE_ _SPLIT_VALUE_;
63661     +      run;
63663     +      proc datasets library=work nolist;
63664     +        delete tempBinMappings;
63665     +      run;
63666     +      quit;
63667     +   %end;
63668     +%mend EM_FREEZE_BINNING;
63670     +%macro EM_EQUAL_SPACED_BINNING(input, bindata, binningCode);
63673     +/* initialize new bucket_binning macro */
63674     +filename temp catalog 'sashelp.emapps.bucket_binning.source';
63675     +%include temp;
63676     +filename temp;
63678     +/* create fileref for generation of binningCode */
63679     +filename X "&binningCode";
63681     +/* determine if there are inputs to be binned */
63682     +%let numbinvars = 0;
63683     +%let intdsid = %sysfunc(open(work._intmid));
63684     +%if &intdsid %then %do;
63685     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
63686     +%end;
63687     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
63688     +%if &numbinvars > 0 %then %do;
63691     +/* get data in format needed for quantile_binning macro */
63692     +data work.vartable;
63693     +  set work._intmid;
63694     +  level = "INTERVAL";
63695     +  role  = "INPUT";
63696     +  rename variable=name;
63697     +run;
63699     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
63700     +%if %EM_FREQ ne %then %do;
63701     +   data work.freq;
63702     +     name="%EM_FREQ";
63703     +     role="FREQ";
63704     +   run;
63706     +   data work.vartable;
63707     +     set work.vartable work.freq;
63708     +   run;
63709     +%end;
63711     +/* perform bucket binning of data */
63712     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
63713     +%em_apps_bucket_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
63715     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
63716     +%end;
63717     +%else %do;
63718     +  /* initialize binmappings table */
63719     +  data &EM_USER_BINMAPPINGS;
63720     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
63721     +  run;
63723     +  data _null_;
63724     +    FILE X;
63726     +    put "&EM_CODEBAR;";
63727     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
63728     +    put "* &note;";
63729     +    put "&EM_CODEBAR;";
63730     +  run;
63732     +%end;
63734     +/* assign display_var values to binmappings table as well as initial group values */
63735     +data &EM_USER_BINMAPPINGS;
63736     +  set &EM_USER_BINMAPPINGS;
63737     +  length display_var $32 grp $8;
63738     +  display_var = name;
63740     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
63741     +    GRP = BIN + 1;
63742     +  %end;
63743     +  %else %do;
63744     +    GRP = BIN;
63745     +  %end;
63746     +run;
63748     +/* de-assign fileref */
63749     +filename X;
63751     +    /* append to binning code those values that were included in the importSubset data */
63752     +    %if &useImport eq 1 %then %do;
63753     +      %EM_IMPORT_BINNING(&binningcode);
63754     +    %end;
63756     +    /* append to binning code those values that were included in the freezeSubset data */
63757     +    %if &useFreeze eq 1 %then %do;
63758     +      %EM_FREEZE_BINNING(&binningcode);
63759     +    %end;
63761     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
63762     +     by NAME;
63763     +     run;
63765     +     /* create grouping for missing level */
63766     +    data tempmissvalues;
63767     +    run;
63769     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
63770     +       data tempmissvalues;
63771     +         %if &useImport eq 1 %then %do;
63772     +           merge sortedmapping &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME));
63773     +         %end;
63774     +         %if &useFreeze eq 1 %then %do;
63775     +           merge sortedmapping &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME));
63776     +         %end;
63777     +         %else %do;
63778     +           set sortedmapping;
63779     +         %end;
63780     +         GRP="1";
63781     +         bin="Missing";
63782     +         _split_value_ = "Missing";
63783     +         %if &useImport eq 1 %then %do;
63784     +            if _a then delete;
63785     +         %end;
63786     +         %if &useFreeze eq 1 %then %do;
63787     +            if _b then delete;
63788     +         %end;
63790     +       run;
63791     +    %end;
63793     +    /* create binData from binningCode */
63794     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
63795     +      by NAME;
63796     +    run;
63798     +    filename X "&binningCode";
63799     +    data &bindata;
63800     +      set &input;
63801     +      %inc X;
63802     +    run;
63804     +    filename X;
63806     +    /* create splitvals dataset */
63807     +    data tempsplitvals;
63808     +      set &EM_USER_BINMAPPINGS
63809     +        %let tdsid = %sysfunc(open(work.tempmissvalues));
63810     +        %if &tdsid %then %do;
63811     +          tempmissvalues
63812     +        %end;
63813     +        %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
63814     +      ;
63815     +      length newgroup _group_ 8 _level_ $8;
63816     +      newgroup =.;
63817     +      _LEVEL_ = 'ORDINAL';
63818     +      _Group_ = grp;
63819     +      rename NAME=DISPLAY_VAR BIN=_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
63820     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_;
63821     +    run;
63823     +    data tempsplitvals;
63824     +      set tempsplitvals;
63825     +      _order_ = _N_;
63826     +    run;
63828     +    /* determine if EM_USER_SPLITVALS already exists */
63829     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
63830     +    %if &sdsid > 0 %then %do;
63831     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
63832     +      %if &nvars > 0 %then %do;
63833     +        proc sql;
63834     +          reset noprint;
63835     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
63836     +        quit;
63837     +      %end;
63838     +      %else %let nobs=0;
63839     +    %end;
63840     +    %else %do;
63841     +       %let nobs=0;
63842     +       %let nvars=0;
63843     +    %end;
63844     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
63846     +    /* if useIMport=1 also include import definitions here as well */
63847     +    %if &useImport eq 1 %then %do;
63848     +      data tempImport;
63849     +        set &EM_USER_IMPORTSUBSET;
63850     +        _variable_ = binVar;
63851     +      run;
63852     +    %end;
63854     +    /* if useFreeze=1 also include import definitions here as well */
63855     +    %if &useFreeze eq 1 %then %do;
63856     +      data tempFreeze;
63857     +        length display_var $32;
63858     +        set &EM_USER_FREEZESUBSET;
63859     +        display_var = _variable_;
63860     +        _variable_ = binVar;
63861     +      run;
63862     +    %end;
63865     +    data &EM_USER_SPLITVALS;
63866     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
63867     +        set &EM_USER_SPLITVALS tempsplitvals
63868     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
63869     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
63870     +        %end;
63871     +        %if &useFreeze eq 1 %then %do;
63872     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
The SAS System

63873     +        %end;
63874     +        ;
63875     +      %end;
63876     +      %else %do;
63877     +        set tempsplitvals
63878     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
63879     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
63880     +        %end;
63881     +        %if &useFreeze eq 1 %then %do;
63882     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
63883     +        %end;
63884     +        ;
63885     +      %end;
63886     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _ORDER_;
63887     +    run;
63889     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
63890     +    data tempvariableset;
63891     +      set &EM_DATA_VARIABLESET;
63892     +      where TYPE = 'C';
63893     +    run;
63895     +    /* add all interval vars that aren't special codes to the intervalvar macro */
63896     +    %let dsid = %sysfunc(open(work.tempvariableset));
63897     +    %if &dsid %then %do;
63898     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
63899     +      %let obs = %sysfunc(fetch(&dsid));
63900     +      %do %while(&obs=0);
63901     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
63902     +        %let classvars = &classvars &varname;
63903     +        %let qclassvars = &qclassvars "&varname";
63904     +        %let obs = %sysfunc(fetch(&dsid));
63905     +      %end;
63906     +    %end;
63907     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63909     +    %if &classvars ne %then %do;
63910     +      proc dmdb data =&bindata classout=_classout nonorm;
63911     +        class &classvars;
63912     +      run;
63914     +      proc dmdb data=&bindata classout=_classout2;
63915     +       class &classvars;
63916     +      run;
63918     +      proc sort data=_classout; by NAME CRAW; run;
63919     +      proc sort data=_classout2; by NAME CRAW; run;
63921     +      data _classout;
63922     +        length _variable_ $32;
63923     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
63924     +        _split_value_ = trim(left(_split_value_));
63925     +        LEVEL = trim(left(LEVEL));
63926     +        by NAME CRAW;
63927     +       _variable_ = NAME;
63928     +      run;
63930     +      proc sort data=_classout; by _variable_ _split_value_; run;
63931     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
63933     +      data &EM_USER_SPLITVALS;
63934     +        length _norm_level_ $200 _split_value_ $200;
63935     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
63936     +        by _variable_ _split_value_;
63937     +        LEVEL = trim(left(LEVEL));
63938     +        _norm_level_ = trim(left(_norm_level_));
63939     +        _split_value_ = trim(left(_split_value_));
63940     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
63941     +        drop NAME FREQUENCY TYPE CRAW NRAW;
63942     +      run;
63944     +      proc datasets library=work nolist;
63945     +        delete _classout _classout2;
63946     +      run;
63947     +      quit;
63948     +    %end;
63949     +    data &EM_USER_SPLITVALS;
63950     +      set &EM_USER_SPLITVALS;
63951     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
63952     +    run;
63954     +    proc sort data=&EM_USER_SPLITVALS;
63955     +      by DISPLAY_VAR _Group_;
63956     +    run;
63958     +   proc datasets library=work nolist;
63959     +     delete tempBinMappings temp_binmappings tempBinNames tempsplitvals sortedmapping tempmissvalues
63960     +      %if &useImport eq 1 %then %do;
63961     +        tempImport
63962     +      %end;
63963     +      %if &useFreeze eq 1 %then %do;
63964     +        tempFreeze
63965     +      %end;
63966     +     ;
63967     +   run;
63968     +   quit;
63970     +%mend;
63972     +%macro EM_QUANTILE_BINNING(input, pctdata, bindata, binningCode);
63974     +/* initialize new quantile_binning macro */
63975     +filename temp catalog 'sashelp.emapps.quantile_binning.source';
63976     +%include temp;
63977     +filename temp;
63979     +/* generate fileref for quantile_binning macro */
63980     +filename X "&binningCode";
63982     +/* determine if there are inputs to be binned */
63983     +%let numbinvars = 0;
63984     +%let intdsid = %sysfunc(open(work._intmid));
63985     +%if &intdsid %then %do;
63986     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
63987     +%end;
63988     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
63989     +%if &numbinvars > 0 %then %do;
63991     +/* get data in format needed for quantile_binning macro */
63992     +data work.vartable;
63993     +  set work._intmid;
63994     +  level = "INTERVAL";
63995     +  role  = "INPUT";
63996     +  rename variable=name;
63997     +run;
63999     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
64000     +%if %EM_FREQ ne %then %do;
64001     +   data work.freq;
64002     +     name="%EM_FREQ";
64003     +     role="FREQ";
64004     +   run;
64006     +   data work.vartable;
64007     +     set work.vartable work.freq;
64008     +   run;
64009     +%end;
64012     +/* perform quantile binning of data */
64013     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
64014     +%em_apps_quantile_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
64016     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
64017     +%end;
64018     +%else %do;
64019     +  /* initialize binmappings table */
64020     +  data &EM_USER_BINMAPPINGS;
64021     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
64022     +  run;
64024     +  data _null_;
64025     +    FILE X;
64027     +    put "&EM_CODEBAR;";
64028     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
64029     +    put "* &note;";
64030     +    put "&EM_CODEBAR;";
64031     +  run;
64033     +%end;
64035     +/* assign display_var values to binmappings table as well as initial group values */
64036     +data &EM_USER_BINMAPPINGS;
64037     +  set &EM_USER_BINMAPPINGS;
64038     +  length display_var $32 grp $8;
64039     +  display_var = name;
64041     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64042     +    GRP = BIN + 1;
64043     +  %end;
64044     +  %else %do;
64045     +    GRP = BIN;
64046     +  %end;
64047     +run;
64049     +/* de-assign fileref */
64050     +filename X;
64052     +    /* append to binning code those values that were included in the importSubset data */
64053     +    %if &useImport eq 1 %then %do;
64054     +      %EM_IMPORT_BINNING(&binningcode);
64055     +    %end;
64057     +    /* append to binning code those values that were included in the freezeSubset data */
64058     +    %if &useFreeze eq 1 %then %do;
64059     +      %EM_FREEZE_BINNING(&binningcode);
64060     +    %end;
64062     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
64063     +      by NAME;
64064     +    run;
64066     +    /* create grouping for missing level */
64067     +    data tempmissvalues;
64068     +    run;
64070     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64071     +       data tempmissvalues;
64072     +         %if ((&useImport eq 1) OR (&useFreeze eq 1)) %then %do;
64073     +           merge sortedmapping
64074     +           %if &useImport eq 1 %then %do;
64075     +              &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME))
64076     +           %end;
64077     +           %if &useFreeze eq 1 %then %do;
64078     +             &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME))
64079     +           %end;
64080     +           ;
64081     +         %end;
64082     +         %else %do;
64083     +           set sortedmapping;
64084     +         %end;
64085     +         GRP="1";
64086     +         bin="Missing";
64087     +         _split_value_ = "Missing";
64088     +         %if &useImport eq 1 %then %do;
64089     +            if _a then delete;
64090     +         %end;
64091     +         %if &useFreeze eq 1 %then %do;
64092     +            if _b then delete;
64093     +         %end;
64095     +       run;
64096     +    %end;
64099     +    /* create binData from binningCode */
64100     +    filename X "&binningCode";
64102     +    data &bindata;
64103     +      set &input;
64104     +      %inc X;
64105     +    run;
64107     +    filename X;
64109     +    /* create splitvals dataset */
64110     +    data tempsplitvals;
64111     +      set &EM_USER_BINMAPPINGS tempmissvalues;
64112     +      length newgroup _group_ _order_ 8 _level_ $8;
64113     +      newgroup =.;
64114     +      _LEVEL_ = 'ORDINAL';
64115     +      _Group_ = grp;
64116     +      rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
64117     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
64118     +    run;
64120     +    data tempsplitvals;
64121     +      set tempsplitvals;
64122     +      _order_ = _N_;
64123     +    run;
64125     +    /* determine if EM_USER_SPLITVALS already exists */
64126     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
64127     +    %if &sdsid > 0 %then %do;
64128     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
64129     +      %if &nvars > 0 %then %do;
64130     +        proc sql;
64131     +          reset noprint;
64132     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
64133     +        quit;
64134     +      %end;
64135     +      %else %let nobs=0;
64136     +    %end;
64137     +    %else %do;
64138     +       %let nobs=0;
64139     +       %let nvars=0;
64140     +    %end;
64141     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
64143     +    /* if useIMport=1 also include import definitions here as well */
64144     +    %if &useImport eq 1 %then %do;
64145     +      data tempImport;
64146     +        set &EM_USER_IMPORTSUBSET;
64147     +        _variable_ = binVar;
64148     +      run;
64149     +    %end;
64151     +    /* if useFreeze=1 also include frozen definitions here as well */
64152     +    %if &useFreeze eq 1 %then %do;
64153     +      data tempFreeze;
64154     +        length display_var $32;
64155     +        set &EM_USER_FreezeSUBSET;
64156     +        display_var = _variable_;
64157     +        _variable_ = binVar;
64158     +      run;
64159     +    %end;
64161     +    data &EM_USER_SPLITVALS;
64162     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
64163     +        set &EM_USER_SPLITVALS tempsplitvals
64164     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
64165     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
64166     +        %end;
64167     +        %if &useFreeze eq 1 %then %do;
64168     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
64169     +        %end;
64170     +        ;
64171     +      %end;
64172     +      %else %do;
64173     +        set tempsplitvals
64174     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
64175     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
64176     +        %end;
64177     +        %if &useFreeze eq 1 %then %do;
64178     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
64179     +        %end;
64180     +        ;
64181     +      %end;
64182     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
64183     +    run;
64185     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
64186     +    data tempvariableset;
64187     +      set &EM_DATA_VARIABLESET;
64188     +      where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
64189     +    run;
64191     +    /* add all interval vars that aren't special codes to the intervalvar macro */
64192     +    %let dsid = %sysfunc(open(work.tempvariableset));
64193     +    %if &dsid %then %do;
64194     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
64195     +      %let obs = %sysfunc(fetch(&dsid));
64196     +      %do %while(&obs=0);
64197     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
64198     +        %let classvars = &classvars &varname;
64199     +        %let qclassvars = &qclassvars "&varname";
64200     +        %let obs = %sysfunc(fetch(&dsid));
64201     +      %end;
64202     +    %end;
64203     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64205     +    %if &classvars ne %then %do;
64206     +      proc dmdb data =&bindata classout=_classout nonorm;
64207     +        class &classvars;
64208     +      run;
64210     +      proc dmdb data=&bindata classout=_classout2;
64211     +       class &classvars;
64212     +      run;
64214     +      proc sort data=_classout; by NAME CRAW; run;
64215     +      proc sort data=_classout2; by NAME CRAW; run;
64217     +      data _classout;
64218     +        length _variable_ $32;
64219     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
64220     +        by NAME CRAW;
64221     +       _variable_ = NAME;
64222     +      run;
64224     +      proc sort data=_classout; by _variable_ _split_value_; run;
64225     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
64227     +      data &EM_USER_SPLITVALS;
64228     +        length _norm_level_ $200 _split_value_ $200;
64229     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
64230     +        by _variable_ _split_value_;
64231     +        LEVEL = trim(left(LEVEL));
64232     +        _split_value_ = trim(left(_split_value_));
64233     +        _norm_level_ = trim(left(_norm_level_));
64234     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
64235     +        drop NAME FREQUENCY TYPE CRAW NRAW;
64236     +      run;
64238     +      proc datasets library=work nolist;
64239     +        delete _classout _classout2;
64240     +      run;
64241     +      quit;
64242     +    %end;
64244     +    data &EM_USER_SPLITVALS;
64245     +      set &EM_USER_SPLITVALS;
64246     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
64247     +    run;
64250     +    proc sort data=&EM_USER_SPLITVALS;
64251     +      by DISPLAY_VAR _Group_;
64252     +    run;
64254     +    proc datasets library=work nolist;
64255     +      delete sortedmapping tempsplitvals tempmissvalues
64256     +      %if &useImport eq 1 %then %do;
64257     +        tempImport
64258     +      %end;
64259     +      %if &useFreeze eq 1 %then %do;
64260     +        tempFreeze
64261     +      %end;
64262     +      ;
64263     +    run;
64264     +    quit;
64265     +/*
64266     +%end;
64267     +%else %do;
64268     +    data &bindata;
64269     +      set &input;
64270     +    run;
64271     +%end;
64272     +*/
64273     +%mend EM_QUANTILE_BINNING;
64275     +%macro EM_ORDVARS_GROUP;
64277     +   /* retrieve all ordinal variables from the incoming dataset */
64278     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
64279     +     by NAME;
64280     +     where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
64281     +   run;
64283     +   /* add all vars marked as interval that are actually class vars to this data */
64284     +   %let nobs = 0;
64285     +   %let dsid = %sysfunc(open(WORK._DISCRETEMID));
64286     +   %if &dsid %then %do;
64287     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
64288     +     %if &nobs gt 0 %then %do;
64290     +     data tempvars;
64291     +       set &EM_DATA_VARIABLESET;
64292     +       if NAME in (
64293     +         %let obs = %sysfunc(fetch(&dsid));
64294     +         %do %while(&obs=0);
64295     +           %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
64296     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
64297     +           "&varname"
64298     +           %let obs = %sysfunc(fetch(&dsid));
64299     +         %end;
64300     +        );
64301     +     run;
64302     +     data tempvariableset;
64303     +       set tempvariableset tempvars;
64304     +     run;
64305     +     %end;
64306     +   %end;
64307     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64309     +   %if &useImport eq 1 %then %do;
64310     +     /* remove all variables from tempvariableset that are included in the importsubset */
64311     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
64312     +       by _VARIABLE_ ;
64313     +     run;
64314     +     proc sort data=tempvariableset; by NAME; run;
64316     +     data tempvariableset;
64317     +       merge tempimport(in=_a) tempvariableset(in=_b);
64318     +       by NAME;
64319     +       if ^_a then output;
64320     +     run;
64321     +   %end;
64323     +   %if &useFreeze eq 1 %then %do;
64324     +     /* remove all variables from tempvariableset that are included in the freezesubset */
64325     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
64326     +       by _VARIABLE_ ;
64327     +     run;
64328     +     proc sort data=tempvariableset; by NAME; run;
64330     +     data tempvariableset;
64331     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
64332     +       by NAME;
64333     +       if ^_a then output;
64334     +     run;
64335     +   %end;
64337     +   /* get dataset of distinct values for the ordinal variable */
64338     +   %let nobs = 0;
64339     +   %let dsid = %sysfunc(open(WORK.tempvariableset));
64340     +   %if &dsid %then %do;
64341     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
64342     +     %if &nobs gt 0 %then %do;
64343     +         %let obs = %sysfunc(fetch(&dsid));
64344     +         %do %while(&obs=0);
64345     +           %let varnum = %sysfunc(VARNUM(&dsid, NAME));
64346     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
64347     +           %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
64348     +           %let input_type = %sysfunc(getvarc(&dsid, &typenum));
64349     +           %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
64350     +           %let input_fmt = %sysfunc(getvarc(&dsid, &fmtnum));
64351     +           %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
64352     +           %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
64353     +           %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
64355     +           data temp;
64356     +             set &EM_USER_BINDATA(keep=&varname);
64357     +             %if &input_fmt ne %then %do;
64358     +               %dmnormcp(put(&varname, &input_fmt), _norm);
64359     +             %end;
64360     +             %else %do;
64361     +               %dmnormcp(&varname, _norm);
64362     +             %end;
64363     +             keep &varname _norm;
64364     +           run;
64366     +          proc dmdb data=temp classout=_classout2;
64367     +           class _norm;
64368     +         run;
64369     +         proc sort data=_classout2; by LEVEL; run;
64371     +         /* re-order numeric inputs based on non-normalized values */
64372     +         %if &input_type eq N %then %do;
64373     +           proc sort data=temp nodupkey; by _norm; run;
64374     +           data varvals;
64375     +             merge temp _classout2(rename=(LEVEL=_norm));
64376     +             by _norm;
64377     +             if craw='' and _norm ne '.' then delete;
64378     +             keep &varname _norm nraw craw;
64379     +           run;
64381     +           proc sort data=varvals; by &varname; run;
64382     +         %end;
64383     +         %else %do;
64384     +           data varvals;
64385     +              set _classout2(rename=(LEVEL=_norm));
64386     +              if _norm='' then delete;
64387     +              if _norm='.' then delete;
64388     +              keep _norm;
64389     +           run;
64390     +         %end;
64391     +         data varvals;
64392     +           set varvals;
64393     +           if &varname="." then delete;
64394     +           if upcase(&varname) = "MISSING" then delete;
64395     +         run;
64397     +          /* generate Splitvals Data */
64398     +          data tempsplitvals;
64399     +            length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ _order_ 8 _level_ $8 _norm_level_ $200 ;
64401     +            %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64402     +              DISPLAY_VAR="&varname";
64403     +              _VARIABLE_ ="&varname";
64404     +              newgroup   =.;
64405     +              _group_    =1;
64406     +              _Split_Value_="Missing";
64407     +              _level_    ="ORDINAL";
64408     +              output;
64409     +              %let group=2;
64410     +            %end;
64411     +            %else %let group=1;
64413     +            %let vdsid = %sysfunc(open(WORK.VARVALS));
64414     +            %if &vdsid %then %do;
64415     +            %let namenum = %sysfunc(VARNUM(&vdsid, _norm));
64416     +            /*%let group = 2;*/
64417     +            %let vobs = %sysfunc(fetch(&vdsid));
64418     +            %do %while(&vobs=0);
64419     +                %let nameval = %bquote(%upcase(%sysfunc(getvarc(&vdsid, &namenum))));
64421     +                DISPLAY_VAR   = "&varname";
64422     +                _variable_    = "&varname";
64423     +                newgroup      = .;
64424     +                _group_       = &group;
64425     +                _split_value_ = "&nameval";
64426     +                _level_       = 'ORDINAL';
64427     +                output;
64429     +              %let group = %eval(&group + 1);
64430     +              %let vobs = %sysfunc(fetch(&vdsid));
64431     +            %end;
64432     +            %if &vdsid %then %let vdsid = %sysfunc(close(&vdsid));
64433     +          run;
64435     +          /* determine if EM_USER_SPLITVALS already exists */
64436     +          %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
64437     +          %if &sdsid > 0 %then %do;
64438     +            %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
64439     +            %if &nvars > 0 %then %do;
64440     +               proc sql;
64441     +                reset noprint;
64442     +                select count(*) into :nobs from &EM_USER_SPLITVALS;
64443     +               quit;
64444     +            %end;
64445     +            %else %let nobs=0;
64446     +            %end;
64447     +            %else %do;
64448     +              %let nobs=0;
64449     +              %let nvars=0;
64450     +            %end;
64451     +          %end;
64452     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
64454     +          /* if tempsplitvals doesn't exist; create empty data set */
64455     +          %let sdsid = %sysfunc(open(work.tempsplitvals));
64456     +          %if &sdsid <= 0 %then %do;
64457     +            data tempsplitvals;
64458     +              length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ 8 _level_ $8 ;
64459     +            run;
64460     +          %end;
64461     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
64463     +          data tempsplitvals;
64464     +            set tempsplitvals;
64465     +            _order_ = _N_;
64466     +          run;
64468     +          %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
64469     +             proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
64470     +             proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
64471     +          %end;
64473     +          data &EM_USER_SPLITVALS;
64474     +           %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
64475     +             merge &EM_USER_SPLITVALS tempsplitvals;
64476     +             by _variable_ _split_value_;
64477     +           %end;
64478     +           %else %do;
64479     +             set tempsplitvals;
64480     +           %end;
64481     +           if display_var eq "" then delete;
64482     +           if _norm_level_ eq "" then _norm_level_ = _split_value_;
64483     +           keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_ _order_;
64484     +         run;
64486     +           %let obs = %sysfunc(fetch(&dsid));
64487     +         %end;
64488     +     %end;
64489     +   %end;
64490     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64492     +   proc sort data=&EM_USER_SPLITVALS;
64493     +      by DISPLAY_VAR _Group_;
64494     +   run;
64496     +   /* delete temporary datasets */
64497     +   proc datasets library= work nolist;
64498     +     delete tempsplitvals varvals tempvariableset tempvars
64499     +     ;
64500     +   run;
64501     +   quit;
64502     +%mend EM_ORDVARS_GROUP;
64505     +%macro EM_CLASSVARS_GROUP(groupRare);
64507     +   /* retrieve all class variables from the incoming dataset */
64508     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
64509     +     by NAME;
64510     +     where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
64511     +   run;
64513     +   %if &useImport eq 1 %then %do;
64514     +     /* remove all variables from tempvariableset that are included in the importsubset */
64515     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
64516     +       by _VARIABLE_ ;
64517     +     run;
64518     +     proc sort data=tempvariableset; by NAME; run;
64520     +     data tempvariableset;
64521     +       merge tempimport(in=_a) tempvariableset(in=_b);
64522     +       by NAME;
64523     +       if ^_a then output;
64524     +     run;
64525     +   %end;
64527     +   %if &useFreeze eq 1 %then %do;
64528     +     /* remove all variables from tempvariableset that are included in the freezesubset */
64529     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
64530     +       by _VARIABLE_ ;
64531     +     run;
64532     +     proc sort data=tempvariableset; by NAME; run;
64534     +     data tempvariableset;
64535     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
64536     +       by NAME;
64537     +       if ^_a then output;
64538     +     run;
64539     +   %end;
64541     +   /* run dmdb to retrieve list of all class levels and counts */
64542     +   %let dsid = %sysfunc(open(work.tempvariableset));
64543     +   %let nobs = 0;
64544     +   %if &dsid %then %do;
64545     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
64547     +   %end;
64549     +   %if &nobs gt 0 %then %do;
64550     +     proc dmdb data=&EM_IMPORT_DATA classout=tempclassout;
64551     +       class
64553     +        %let namenum = %sysfunc(VARNUM(&dsid, NAME));
64554     +        %let obs = %sysfunc(fetch(&dsid));
64555     +        %do %while(&obs=0);
64556     +           %let name = %sysfunc(getvarc(&dsid, &namenum));
64557     +           &name
64558     +           %let obs = %sysfunc(fetch(&dsid));
64559     +        %end;
64560     +     ;
64562     +     %if %EM_FREQ ne %then %do;
64563     +        freq %EM_FREQ;
64564     +     %end;
64565     +    run;
64566     +   %end;
64567     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64569     +   %let dsid = %sysfunc(open(work.tempclassout));
64570     +   %let nobs = 0;
64571     +   %if &dsid %then %do;
64572     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
64573     +     %let dsid = %sysfunc(close(&dsid));
64574     +   %end;
64576     +   %if &nobs gt 0 %then %do;
64577     +    data tempclassout;
64578     +       set tempclassout;
64579     +       if LEVEL='MISSING' then level='Missing';
64580     +    run;
64582     +    proc sort data=tempclassout nodupkey;
64583     +      by NAME descending FREQUENCY LEVEL;
64584     +    run;
64586     +    data tempds(keep=NAME NOBS);
64587     +      retain NOBS;
64588     +      set tempclassout;
64589     +      by NAME;
64590     +      if first.NAME then
64591     +        NOBS = frequency;
64592     +      else
64593     +        NOBS=NOBS+frequency;
64594     +      if last.name then do;
64595     +        output;
64596     +      end;
64597     +    run;
64599     +    data tempds;
64600     +      merge tempclassout
64601     +      tempds;
64602     +      by NAME;
64603     +      if ((LEVEL ne '') AND (LEVEL ne "."));
64604     +      %if &groupRare eq Y %then %do;
64605     +        PCT = 100 * (FREQUENCY/NOBS);
64606     +        if PCT < &EM_PROPERTY_GROUPCUTOFF then flag=1;
64607     +        else flag=0;
64608     +      %end;
64609     +      %else %do;
64610     +        flag = 0;
64611     +      %end;
64612     +    run;
64614     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64615     +      data tempmissvalues;
64616     +        length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
64618     +      %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
64619     +      %if &dsid %then %do;
64620     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
64621     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
64622     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
64623     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
64624     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
64625     +        %let obs = %sysfunc(fetch(&dsid));
64627     +        %do %while(&obs=0);
64628     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
64629     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
64630     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
64631     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
64633     +          NAME="&var";
64634     +          LEVEL="Missing";
64635     +          _LEVEL_="&varlvl";
64636     +          _group_ = 1;
64637     +          output;
64639     +          %let obs = %sysfunc(fetch(&dsid));
64640     +        %end;
64641     +      %end;
64642     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64643     +      run;
64644     +    %end;
64646     +    /* generate Splitvals Data */
64647     +    data tempsplitvals;
64648     +      length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
64650     +      set tempclassout
64651     +      %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64652     +         tempmissvalues
64653     +      %end;
64654     +      ;
64655     +      if ((level ne '') AND (level ne '.'));
64657     +     %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
64658     +     %if &dsid %then %do;
64659     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
64660     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
64661     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
64662     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
64663     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
64664     +        %let obs = %sysfunc(fetch(&dsid));
64666     +        %do %while(&obs=0);
64667     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
64668     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
64669     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
64670     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
64672     +          if NAME = "&var" then do;
64673     +            _LEVEL_ = "&varlvl";
64675     +          /* cycle through levels, assigning group values;              */
64676     +          /* flag=1 indicates to put value in "_OTHER_" group;          */
64677     +          /* flag=0 indicates that value shoudld be in group of its own */
64678     +          %let choice = ((NAME="&Var") and (FLAG=0));
64679     +          %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64680     +            %let group=2;
64681     +          %end;
64682     +          %else %do;
64683     +            %let group = 1;
64684     +          %end;
64685     +          %let fdsid = %sysfunc(open(work.tempds(where=(&choice))));
64686     +          %if &fdsid %then %do;
64688     +            %let lvlnum = %sysfunc(VARNUM(&fdsid, LEVEL));
64689     +            %let fobs = %sysfunc(fetch(&Fdsid));
64690     +            %let fflag = 0;
64691     +            %do %while(&fobs=0);
64692     +              %let fflag = 1;
64693     +              %let temp = %nrbquote(%sysfunc(getvarc(&fdsid, &lvlnum)));
64694     +              %let level = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
64695     +              %let level = %nrbquote(%sysfunc(strip(&level)));
64696     +              %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64697     +                %if &group eq 2 %then %do;
64698     +                   if LEVEL = "&level" then _GROUP_ = &group;
64699     +                %end;
64700     +                %else %do;
64701     +                   else if LEVEL = "&level" then _GROUP_ = &group;
64702     +                %end;
64703     +              %end;
64704     +              %else %do;
64705     +                %if &group eq 1 %then %do;
64706     +                   if LEVEL = "&level" then _GROUP_ = &group;
64707     +                %end;
64708     +                %else %do;
64709     +                   else if LEVEL = "&level" then _GROUP_ = &group;
64710     +                %end;
64711     +              %end;
64713     +              %let group = %eval(&group + 1);
64714     +              %let fobs = %sysfunc(fetch(&fdsid));
64715     +            %end;
64717     +          %end;
64718     +          %if &fflag eq 1 %then %do;
64719     +            else if LEVEL ^='Missing' then _GROUP_ = &group;
64720     +          %end;
64721     +          end;
64723     +          %if &fdsid %then %let fdsid = %sysfunc(close(&fdsid));
64724     +          %let obs = %sysfunc(fetch(&dsid));
64725     +        %end;
64726     +     %end;
64727     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64728     +     _VARIABLE_ = NAME;
64729     +     newgroup = .;
64730     +     rename NAME = DISPLAY_VAR
64731     +            LEVEL = _SPLIT_VALUE_;
64732     +     keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
64733     +    run;
64734     +  %end;
64735     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64737     +    /* determine if EM_USER_SPLITVALS already exists */
64738     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
64739     +    %if &sdsid > 0 %then %do;
64740     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
64741     +      %if &nvars > 0 %then %do;
64742     +        proc sql;
64743     +          reset noprint;
64744     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
64745     +        quit;
64746     +      %end;
64747     +      %else %let nobs=0;
64748     +    %end;
64749     +    %else %do;
64750     +       %let nobs=0;
64751     +       %let nvars=0;
64752     +    %end;
64753     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
64755     +   /* if tempsplitvals doesn't exist; create empty data set */
64756     +    %let sdsid = %sysfunc(open(work.tempsplitvals));
64757     +    %if &sdsid <= 0 %then %do;
64758     +      data tempsplitvals;
64759     +        length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
64760     +      run;
64761     +    %end;
64762     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
64764     +    %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
64765     +      proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
64766     +      proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
64767     +    %end;
64769     +    /* if useIMport=1 also include import definitions here as well */
64770     +    %if &useImport eq 1 %then %do;
64771     +      proc sort data=&EM_USER_IMPORTSUBSET; by _variable_ _split_value_; run;
64772     +    %end;
64773     +    %if &useFreeze eq 1 %then %do;
64774     +      proc sort data=&EM_USER_FREEZESUBSET; by _variable_ _split_value_; run;
64775     +    %end;
64776     +    data &EM_USER_SPLITVALS;
64777     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
64778     +        merge &EM_USER_SPLITVALS tempsplitvals
64779     +        %if &useImport eq 1 %then %do;
64780     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
64781     +        %end;
64782     +        %if &useFreeze eq 1 %then %do;
64783     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
64784     +        %end;
64786     +        ;
64787     +        by _variable_ _split_value_
64788     +        ;
64789     +      %end;
64790     +      %else %do;
64791     +        set tempsplitvals
64792     +        %if &useImport eq 1 %then %do;
64793     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
64794     +        %end;
64795     +        %if &useFreeze eq 1 %then %do;
64796     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
64797     +        %end;
64798     +        ;
64799     +      %end;
64800     +      if display_var eq "" then delete;
64801     +      if _norm_level_ eq "" then _norm_level_ = _split_value_;
64802     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
64803     +    run;
64805     +    proc sort data=&EM_USER_SPLITVALS;
64806     +      by DISPLAY_VAR _Group_;
64807     +    run;
64809     +   /* delete temporary datasets */
64810     +   proc datasets library= work nolist;
64811     +     delete tempsplitvals tempds tempclassout tempvariableset tempvars
64812     +     %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64813     +       tempmissvalues
64814     +     %end;
64815     +     ;
64816     +   run;
64817     +   quit;
64818     +%mend EM_CLASSVARS_GROUP;
64821     +%macro EM_SUMMARIZE_TABLE(data, inputData, outData, varname=);
64823     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
64825     +  data temptrain ;
64826     +    set &data;
64827     +  run;
64829     +  /* normalize all values prior to calculating counts */
64830     +  filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
64831     +  %include _temp;
64832     +  filename _temp;
64833     +  filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
64834     +  %include _temp;
64835     +  filename _temp;
64837     +  proc sort data=&EM_USER_VARMAPPINGS
64838     +  %if &varname ne %then %do;
64839     +    (where=(_variable_="&varname"))
64840     +  %end;
64841     +  out=tempmap; by _variable_; run;
64843     +  data _cmeta;
64844     +    merge tempvarset tempmap(in=_a rename=(_variable_=name ));
64845     +    by name;
64846     +    if ((_a) or (role="TARGET"));
64847     +    if role="INPUT" then name=_proc_var_;
64848     +    if role="TARGET" then role="INPUT";
64849     +    level = procLevel;
64850     +    index = kindex(name, "BIN_");
64851     +    if index gt 0 then do;
64852     +     level="ORDINAL";
64853     +     format = "";
64854     +    end;
64855     +    drop index;
64856     +  run;
64858     +  %em_PreNormalizeClassVars(incmeta=_cmeta, outcmeta=_cmetatmp);
64859     +  %em_NormalizeClassVars(indata=work.temptrain, cmeta=_cmetatmp, encodedTarget=N, outdata=_tmp_train);
64861     +  proc sort data=&inputData out=sortedmap; by _proc_var_; run;
64863     +  data _null_;
64864     +    set sortedmap end=eof;
64865     +    by _proc_var_;
64866     +    if _n_=1 then do;
64867     +      call execute("ods output CrossTabFreqs=crosstabfreq ;");
64868     +      call execute("proc freq data=_tmp_train order=formatted addnames;");
64869     +      call execute("tables ("||_proc_var_);
64870     +    end;
64871     +    else do;
64872     +      call execute(_proc_var_);
64873     +    end;
64874     +    if eof then do;
64875     +      call execute(") * %EM_BINARY_TARGET/ missing;");
64876     +      %if %EM_FREQ ne %then %do;
64877     +        call execute("weight %EM_FREQ;");
64878     +      %end;
64879     +      call execute("run;");
64880     +      call execute("ods output close;");
64881     +    end;
64882     +  run;
64884     +  data _null_;
64885     +    set sortedmap end=eof;
64886     +    by _proc_var_;
64887     +    if _n_=1 then do;
64888     +      call execute("data crosstabs;");
64889     +      call execute("  length _variable_ _split_value_  $200 ;");
64890     +      call execute("  set crosstabfreq(where=(_type_='11'));");
64891     +      call execute("  _variable_= RowVariable;");
64892     +    end;
64894     +    call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
64895     +    call execute("  _split_value_="||_proc_var_||";");
64896     +    call execute("end;");
64898     +    if eof then do;
64899     +      call execute("keep _variable_ _split_value_ %EM_BINARY_TARGET Frequency Percent display_var;");
64900     +      call execute("run;");
64901     +    end;
64902     +  run;
64904     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
64906     +  data crosstabs;
64907     +    length display_var $32;
64908     +    merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
64909     +    by _variable_;
64910     +  run;
64912     +  proc sort data=crosstabs; by display_var _split_value_; run;
64913     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
64915     +  data crosstabs;
64916     +    merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
64917     +    by display_var;
64918     +    index = kindex(_variable_, "BIN_");
64919     +    if index gt 0 then do;
64920     +     level="ORDINAL";
64921     +     format = "";
64922     +    end;
64923     +    _temp = %EM_BINARY_TARGET;
64924     +    /*
64925     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
64926     +      %if &target_format ne %then %do;
64927     +        %if &target_type eq C %then %do;
64928     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
64929     +        %end;
64930     +        %else %do;
64931     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
64932     +        %end;
64933     +      %end;
64934     +      %else %do;
64935     +        %dmnormcp(%EM_BINARY_TARGET, _temp);
64936     +      %end;
64937     +    %end;
64938     +    %else %do;
64939     +      _temp = %EM_BINARY_TARGET;
64940     +    %end;
64941     +*/
64943     +    drop index;
64944     +  run;
64946     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
64948     +  data &outdata;
64949     +    length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate  8 type $1 valfmt $20 ;
64951     +    retain eventCount noneventCount ;
64952     +    set crosstabs;
64953     +    by  _variable_ _split_value_;
64955     +    if first._split_value_ then do;
64956     +     total=0;
64957     +     eventcount=0;
64958     +     noneventcount=0;
64959     +    end;
64961     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
64962     +      %if &target_format ne %then %do;
64963     +        if upcase(strip(_temp))="&target_event" then
64964     +          eventCount=Frequency;
64965     +      %end;
64966     +      %else %do;
64967     +         if upcase(strip(_temp)) ="&target_event" then
64968     +          eventCount=Frequency;
64969     +      %end;
64970     +    %end;
64971     +    %else %do;
64972     +      if _temp=&target_event then
64973     +        eventCount=Frequency;
64974     +    %end;
64975     +    else
64976     +      noneventCount=Frequency;
64978     +    if last._split_value_ then do;
64979     +      total = eventCount + noneventCount;
64981     +      if total ne 0 then do;
64982     +        eventRate = eventCount / total;
64983     +        nonEventRate = nonEventCount / total;
64984     +      end;
64985     +      else do;
64986     +        eventRate = 0;
64987     +        nonEventRate = 0;
64988     +      end;
64991     +     output;
64992     +    end;
64993     +    valfmt = format;
64995     +    drop _temp Frequency percent;
64996     +   run;
64998     +%mend EM_SUMMARIZE_TABLE;
65001     +%macro EM_FINE_DETAIL(bindata, varmappings, fineDetailData, splitVals, binMappings, interactiveFlag=0);
65003     +   proc freq data=&bindata noprint;
65004     +     table %EM_BINARY_TARGET / missing out=temptargetB;
65005     +     %if %EM_FREQ ne %then %do;
65006     +       weight %EM_FREQ;
65007     +     %end;
65008     +   run;
65010     +   %let tdsid = %sysfunc(open(work.temptargetB));
65011     +   %if &tdsid %then %do;
65012     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
65013     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
65015     +      %let temp = %nrbquote(%sysfunc(strip(&target_event)));
65016     +      %let target_event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65017     +      %let temp = %nrbquote(%sysfunc(strip(&target_nonevent)));
65018     +      %let target_nonevent = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65021     +      %let obs = %sysfunc(fetch(&tdsid));
65022     +      %do %while(&obs = 0);
65023     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
65024     +           %if &target_type eq C %then %do;
65025     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
65026     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65027     +           %end;
65028     +           %else
65029     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
65031     +           %if &target_format ne %then %do;
65032     +              %if &target_type eq C %then %do;
65033     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
65034     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65035     +              %end;
65036     +              %else
65037     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
65038     +           %end;
65039     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
65040     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
65042     +           %if "&tarvalue" eq "&target_event" %then %do;
65043     +             %let totalevent = &count;
65044     +           %end;
65045     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
65046     +              %let totalnonevent= &count;
65047     +           %end;
65048     +         %end;
65049     +         %else %do;
65050     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
65051     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
65053     +           %if &tarvalue eq &target_event %then %do;
65054     +             %let totalevent = &count;
65055     +           %end;
65056     +           %else %if &tarvalue eq &target_nonevent %then %do;
65057     +              %let totalnonevent= &count;
65058     +           %end;
65059     +         %end;
65060     +         %let obs = %sysfunc(fetch(&tdsid));
65061     +      %end;
65062     +   %end;
65063     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
65065     +   proc datasets lib=work nolist;
65066     +      delete temptargetB;
65067     +   run;
65068     +   quit;
65070     +   %if &interactiveFlag eq 0 %then %do;
65071     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData);
65072     +   %end;
65073     +   %else %do;
65074     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData, varname=&wherevar);
65075     +   %end;
65078     +   data &fineDetailData;
65079     +     length display_var $32 newgroup numsplitval 8;
65080     +     set &fineDetailData;
65082     +     display_var = _variable_;
65084     +     index = kindex(display_var, "BIN_");
65085     +     if index gt 0 then do;
65086     +       display_var = ksubstr(display_var, 5);
65087     +     end;
65089     +     index2 = kindex(display_var, "SV_");
65090     +     if index2 gt 0 then do;
65091     +       display_var = ksubstr(display_var, 4);
65092     +     end;
65094     +     /* re-code missing values to "Missing" */
65095     +     if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
65096     +     _index_ = _N_;
65097     +     newgroup = .;
65098     +     drop index index2 ;
65099     +   run;
65101     +   /* add group information to fineDetailData; */
65102     +   /* add label information for binned variables to fineDetailData*/
65104     +   proc sort data=&fineDetailData; by _variable_ _split_value_; run;
65106     +   data tmpsplitvals;
65107     +     set &splitvals;
65108     +     _norm_level_ = upcase(_norm_level_);
65109     +     if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
65110     +    * drop _split_value_;
65111     +   run;
65113     +   proc sort data=tmpsplitvals out=sortedsplit; by _variable_ _split_value_; run;
65114     +   proc datasets library=work nolist;
65115     +     delete tmpsplitvals;
65116     +   run;
65117     +   quit;
65119     +   proc sort data=&BINMAPPINGS out=sortedbin; by BIN_NAME BIN; run;
65121     +   data &fineDetailData;
65122     +      merge &fineDetailData(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
65123     +      by _variable_ _split_value_;
65124     +      if _a then do;
65125     +        binFlag = 1;
65126     +        VALUE=EM_BIN_LABEL;
65127     +      end;
65128     +      else do;
65129     +        binFlag = 0;
65130     +        *VALUE=strip(display_var)!!"="!!strip(_split_value_);
65131     +        VALUE=strip(_split_value_);
65133     +      end;
65135     +      if ((eventCount=.) or (nonEventCount=.)) then do;
65136     +        eventCount=0;
65137     +        nonEventCount=0;
65138     +        total = 0;
65139     +        eventRate= 0;
65140     +        nonEventRate = 0;
65141     +      end;
65143     +      eventCount = round(eventCount, .001);
65144     +      nonEventCount = round(nonEventCount, .001);
65145     +      total= round(total, .001);
65146     +      eventRate = round(eventRate, .001);
65147     +      nonEventRate = round(nonEventRate, .001);
65149     +     if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then
65150     +         numsplitval = _split_value_;
65151     +     else if ((type='N') AND (valfmt ne "")) then
65152     +        numsplitval = _order_;
65153     +     else numsplitval=.;
65155     +      if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
65156     +      if _a and ^_b then delete;
65157     +      if _c and ^_b then delete;
65158     +      drop NAME EM_BIN_LABEL valfmt;
65159     +   run;
65161     +   /* for class variables that have values falling into the "other" category, set _LEVEL_ and _GROUP_ based on Missing level */
65162     +   data &fineDetailData;
65163     +     set &fineDetailData;
65165     +     %let choice = _LEVEL_ ne "INTERVAL" and _SPLIT_VALUE_ eq "Missing";
65166     +     %let dsid = %sysfunc(open(&splitvals(where=(&choice))));
65167     +     %if &dsid %then %do;
65168     +       %let dnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
65169     +       %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
65170     +       %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
65172     +       %let obs = %sysfunc(fetch(&dsid));
65173     +       %do %while(&obs=0);
65174     +         %let dispvar = %sysfunc(getvarc(&dsid, &dnum));
65175     +         %let lvl     = %sysfunc(getvarc(&dsid, &lvlnum));
65176     +         %let group   = %sysfunc(getvarn(&dsid, &grpnum));
65178     +         if DISPLAY_VAR = "&dispvar" then do;
65179     +           if _LEVEL_ = "" then _LEVEL_ ="&lvl";
65180     +           if _GROUP_ = . then _GROUP_ = &group;
65181     +         end;
65183     +         %let obs = %sysfunc(fetch(&dsid));
65184     +       %end;
65185     +     %end;
65186     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65187     +     if _GROUP_ = . then delete;
65188     +    * if binFlag=1 and UB=LB then delete;
65189     +    * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
65190     +   run;
65192     +   proc sort data=&fineDetailData;
65193     +     by DISPLAY_VAR _index_;
65194     +   run;
65196     +   proc datasets lib=work nolist;
65197     +     delete sortedsplit sortedbin
65198     +     ;
65199     +   run;
65200     +   quit;
65201     +%mend EM_FINE_DETAIL;
65203     +%macro EM_CREATE_GROUPING(bindata, fineDetailData, coarse);
65205     +   proc freq data=&bindata noprint;
65206     +     table %EM_BINARY_TARGET / missing out=temptargetC;
65207     +     %if %EM_FREQ ne %then %do;weight %EM_FREQ;
65208     +     %end;
65209     +   run;
65211     +   %let tdsid = %sysfunc(open(work.temptargetC));
65212     +   %if &tdsid %then %do;
65213     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
65214     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
65216     +      %let obs = %sysfunc(fetch(&tdsid));
65217     +      %do %while(&obs = 0);
65218     +        /* %if &target_type eq C or &target_format ne %then %do; */
65219     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
65220     +           %if &target_type eq C %then %do;
65221     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
65222     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65223     +           %end;
65224     +           %else
65225     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
65227     +           %if &target_format ne %then %do;
65228     +              %if &target_type eq C %then %do;
65229     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
65230     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65231     +              %end;
65232     +              %else
65233     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
65234     +           %end;
65235     +           %let tarvalue =%nrbquote(%upcase(&tarvalue));
65236     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
65238     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
65239     +           %let target_event = %nrbquote(%sysfunc(strip(&target_event)));
65240     +           %let target_nonevent = %nrbquote(%sysfunc(strip(&target_nonevent)));
65242     +           %if "&tarvalue" eq "&target_event" %then %do;
65243     +             %let totalevent = &count;
65244     +           %end;
65245     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
65246     +              %let totalnonevent= &count;
65247     +           %end;
65248     +         %end;
65249     +         %else %do;
65250     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
65251     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
65253     +           %if &tarvalue eq &target_event %then %do;
65254     +             %let totalevent = &count;
65255     +           %end;
65256     +           %else %if &tarvalue eq &target_nonevent %then %do;
65257     +              %let totalnonevent= &count;
65258     +           %end;
65259     +         %end;
65260     +         %let obs = %sysfunc(fetch(&tdsid));
65261     +      %end;
65262     +   %end;
65263     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
65265     +   proc datasets lib=work nolist;
65266     +      delete temptargetC;
65267     +   run;
65268     +   quit;
65270     +   proc means data=&FINEDETAILDATA noprint;
65271     +      var eventCount nonEventCount;
65272     +      class _variable_  _group_;
65273     +      output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
65274     +   run;
65276     +   proc sort data=summ(drop=_type_ _freq_);
65277     +     by _variable_ _group_;
65278     +   run;
65280     +   data gini(keep=_variable_ eventCount nonEventCount groupresprate)
65281     +        tempcoarse(keep=_variable_  _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
65282     +        set summ;
65283     +        format groupresprate 6.2;
65284     +        format groupnonresprate 6.2;
65285     +        by _variable_ ;
65286     +        if _group_=. then do;
65287     +        end;
65288     +        else do;
65289     +           respper = eventCount / &totalEvent;
65290     +           nrespper = nonEventCount / &totalNonEvent;
65292     +           if ((nonEventCount = 0) AND (eventCount = 0)) then do;
65293     +                groupresprate=0;
65294     +                groupNonresprate = 0;
65295     +                eventRate = 0;
65296     +                nonEventRate = 0;
65297     +           end;
65298     +           else do;
65299     +               groupresprate = eventCount / (eventCount + nonEventCount) * 100;
65300     +               groupNonRespRate = 100 - groupRespRate;
65301     +               eventRate = eventCount / &totalEvent * 100;
65302     +               nonEventRate = nonEventCount / &totalNonEvent * 100;
65303     +            end;
65305     +           output gini tempcoarse;
65307     +        end;
65308     +   run;
65309     +   proc sort data=gini;
65310     +      by _variable_ descending groupresprate;
65311     +   run;
65313     +   data gini(keep= _variable_ _gini_);
65314     +     retain between within cumresp cumnresp;
65315     +     set gini(keep=_variable_  eventCount nonEventCount);
65316     +     by _variable_;
65317     +     if first._variable_ then do;
65318     +       between  = 0;
65319     +       within   = 0;
65320     +       cumresp  = 0;
65321     +       cumnresp = 0;
65322     +     end;
65323     +     between + 2 * cumnresp * eventCount;
65324     +     within + nonEventCount * eventCount;
65325     +     cumresp + eventCount;
65326     +     cumnresp + nonEventCount;
65327     +     if last._variable_ then do;
65328     +       if ^(cumnresp=0 or cumresp=0) then do;
65329     +         _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
65330     +         output;
65331     +       end;
65332     +     end;
65333     +   run;
65335     +   data tempdisplayvar;
65336     +      set &EM_USER_VARMAPPINGS;
65337     +      rename _variable_ = display_var
65338     +      _proc_var_ = _variable_;
65339     +   keep _variable_ _proc_var_ label;
65340     +   run;
65341     +   proc sort data=tempdisplayvar; by _variable_; run;
65343     +   data  &COARSE;
65344     +     length display_Var $32 label _label_ $200 role $10 _group_ 8;
65345     +     merge tempdisplayvar tempcoarse gini ;
65346     +     by _variable_;
65347     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
65348     +           eventRate   = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventrate_vlabel , NOQUOTE))"
65349     +           nonEventRate = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventrate_vlabel , NOQUOTE))"
65350     +           _group_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel , NOQUOTE))"
65351     +           role       = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel , NOQUOTE))"
65352     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_gini_vlabel  , NOQUOTE))"
65353     +           eventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventcount_vlabel  , NOQUOTE))"
65354     +           noneventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventcount_vlabel  , NOQUOTE))"
65355     +           groupresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupresprate_vlabel  , NOQUOTE))"
65356     +           groupnonresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupnonresprate_vlabel  , NOQUOTE))"
65357     +           ;
65359     +    eventCount = round(eventCount, .001);
65360     +    nonEventCount = round(nonEventCount, .001);
65361     +    groupRespRate = round(groupRespRate, .001);
65363     +     drop _variable_ index index2 respper nrespper;
65364     +   run;
65366     +   proc datasets library=work nolist;
65367     +     delete  tempcoarse gini             ;
65369     +   run;
65370     +   quit;
65372     +%mend EM_CREATE_GROUPING;
65376     +%macro EM_GENERATE_LABELVALUES(filename, splitvals, binmappings, coarse);
65378     +         data _null_;
65379     +            FILE &filename;
65380     +            put " length _LABEL_ $200;";
65381     +            put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
65382     +         run;
65384     +         proc sort data=&SPLITVALS out=work.sortedsplitval; by display_var _split_Value_; run;
65385     +         proc sort data=&BINMAPPINGS; by display_var bin; run;
65387     +         data temp;
65388     +           merge work.sortedsplitval(in=_a) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
65389     +           by Display_Var _Split_value_;
65390     +           if upcase(_Split_value_) ne 'MISSING';
65391     +           if _a then output;
65392     +           if display_var eq '' then delete;
65393     +         run;
65395     +         data temp_missing;
65396     +           merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
65397     +           by Display_Var _Split_value_;
65398     +           if upcase(_Split_value_) eq 'MISSING';
65399     +           if _a then output;
65400     +           keep _variable_ display_var missgrp;
65401     +         run;
65403     +         proc sort data=temp out=class;
65404     +            by _variable_ _group_ LB;
65405     +         run;
65407     +         data _null_;
65409     +            file &filename MOD;
65410     +            length string $200 flag 8;
65411     +            retain string flag;
65412     +            set class end=eof;
65413     +            by _variable_  _group_;
65415     +            index = kindex(_variable_, "BIN_");
65416     +            if index gt 0 then do;
65417     +              if first._group_ then do;
65418     +                flag = 0;
65419     +                if ^first._variable_ then
65420     +                    put 'else';
65421     +                 else
65422     +                    put ' ';
65424     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
65425     +                          !!strip(put(_GROUP_,best12.))!!' then do;';
65426     +                 put string;
65428     +                 if LB ne . then do;
65429     +                   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
65430     +                    string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
65431     +                 end;
65432     +                 else do;
65433     +                    flag = 1;
65434     +                    *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
65435     +                    string = " _LABEL_='"!!strip(DISPLAY_VAR);
65436     +                 end;
65438     +              end;
65439     +              if last._Group_ then do;
65440     +                 if UB ne . then do;
65441     +                    string = strip(string)!!'< '!!strip(UB)!!"';";
65442     +                 end;
65443     +                 else do;
65444     +                    if flag=1 then do;
65445     +                      string = strip(string)!!"';";
65446     +                     /* string = strip(string)!!'='!!strip(_split_Value_)!!"';";*/
65447     +                    end;
65448     +                    else do;
65449     +                      string = strip(string)!!"';";
65450     +                    end;
65451     +                 end;
65452     +                 put string;
65454     +                 string= " UB="!!strip(UB)!!";";
65455     +                 put string;
65456     +                 put "end;";
65459     +              end;
65460     +            end;
65461     +            else do;
65462     +              _split_value_ = tranwrd(_split_value_,"'","''");
65463     +              if first._group_ then do;
65464     +                 flag = 0;
65465     +                 if ^first._variable_ then
65466     +                    put 'else';
65467     +                 else
65468     +                    put ' ';
65469     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
65470     +                          !!strip(put(_GROUP_,best12.))!!' then';
65471     +                 put string;
65472     +                 string = "_LABEL_='"!!strip(_split_value_);
65473     +              end;
65474     +              else do;
65475     +                 if flag ne 1 then do;
65476     +                   tempstring = strip(string)!!', '!!strip(_split_value_);
65477     +                   length = length(tempstring);
65479     +                   if length < 195 then do;
65480     +                      string = tempstring;
65481     +                   end;
65482     +                   else do;
65483     +                      string = strip(string)||",...";
65484     +                      flag=1;
65485     +                   end;
65486     +                 end;
65487     +              end;
65489     +              if last._group_ then do;
65490     +                 string = strip(string)!!"';";
65491     +                 put string;
65492     +              end;
65493     +            end;
65494     +         run;
65496     +         data &COARSE;
65497     +           set &COARSE;
65498     +          /* %inc Y; */
65499     +           %inc &filename;
65500     +         run;
65501     +         *filename Y;
65503     +         /* add missing to appropriate label - based on temp_missing data */
65504     +         data &COARSE;
65505     +           set &COARSE;
65507     +           %let dsid = %sysfunc(open(work.temp_missing));
65508     +           %if &dsid %then %do;
65509     +              %let varnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
65510     +              %let grpnum = %sysfunc(VARNUM(&dsid, MISSGRP));
65512     +              %let obs = %sysfunc(fetch(&dsid));
65513     +              %do %while(&obs=0);
65514     +                 %let var = %sysfunc(getvarc(&dsid, &varnum));
65515     +                 %let grp = %sysfunc(getvarn(&dsid, &grpnum));
65517     +                 if DISPLAY_VAR = "&var" and _GROUP_ = &grp then do;
65518     +                   if _LABEL_ eq '' then do;
65519     +                     _LABEL_ = "Missing";
65520     +                   end;
65521     +                   else do;
65522     +                     _LABEL_ = strip(_LABEL_)!!", Missing";
65523     +                   end;
65524     +                 end;
65525     +                 %let obs = %sysfunc(fetch(&dsid));
65526     +              %end;
65527     +           %end;
65528     +           %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65529     +         run;
65531     +         proc datasets library=work nolist;
65532     +           delete class temp temp_missing;
65533     +         run;
65534     +         quit;
65536     +%mend EM_GENERATE_LABELVALUES;
65538     +%macro calcValidationCoarse(input, output, varmappings, resultsTable);
65541     +%mend calcValidationCoarse;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename trtemp;
NOTE: Fileref TRTEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data temp;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where NAME =
MPRINT(TRAIN):  "DepVar";
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE NAME='DepVar';
NOTE: The data set WORK.TEMP has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc dmdb data=EMWS8.Part_TRAIN classout=EVENTOUT;
MPRINT(TRAIN):   target
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  (DESC);
MPRINT(TRAIN):   run;

NOTE: Records processed = 1631   Memory used = 511K.
NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.EVENTOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   dsid = open("EVENTOUT");
MPRINT(TRAIN):   if dsid>0 then do;
MPRINT(TRAIN):   levelnum = VARNUM(dsid, "LEVEL");
MPRINT(TRAIN):   if levelnum then do;
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_EVENT', strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   dsid=close(dsid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete eventout;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK.EVENTOUT (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_FINEDETAILDATA;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_FINEDETAILDATA (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.40 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data tempvarnames;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
MPRINT(TRAIN):   keep NAME LEVEL LABEL;
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK.TEMPVARNAMES has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
MPRINT(TRAIN):   names NAME;
MPRINT(TRAIN):   prefix WOE_ GRP_ ;
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 22 observations and 3 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempmapping;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempvarnames;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPVARNAMES has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data tempmapping;
MPRINT(TRAIN):   merge tempmapping tempvarnames;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   rename LEVEL=procLevel;
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set WORK.TEMPMAPPING.
NOTE: There were 22 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_MAPPING_TABLE):  ;
MPRINT(EM_GENERATE_MAPPING_TABLE):   data EMWS8.BINNING_VARMAPPINGS(keep=_variable_ _grp_variable_ procLevel label);
MPRINT(EM_GENERATE_MAPPING_TABLE):   length _variable_ _grp_variable_ $32 procLevel $8;
MPRINT(EM_GENERATE_MAPPING_TABLE):   set tempmapping;
MPRINT(EM_GENERATE_MAPPING_TABLE):   label _variable_ = "Input Variable" _grp_variable_ = "Group Variable";
MPRINT(EM_GENERATE_MAPPING_TABLE):   _variable_ = NAME;
MPRINT(EM_GENERATE_MAPPING_TABLE):   _grp_variable_ = GRP;
MPRINT(EM_GENERATE_MAPPING_TABLE):   run;

NOTE: There were 22 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 22 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete tempImport tempScore;
MPRINT(TRAIN):   run;

NOTE: The file WORK.TEMPIMPORT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSCORE (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_SPLITVALS;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_SPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.39 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_PRE_BINNING):   data tempvariableset;
MPRINT(EM_PRE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_PRE_BINNING):   where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 18 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 18 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   proc dmdb data=EMWS8.Part_TRAIN classout=_CLASSOUT maxlevel=5;
MPRINT(EM_PRE_BINNING):   class Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income Kitchen Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation SmallAppliances Toys;
MPRINT(EM_PRE_BINNING):   run;

NOTE: Records processed = 1631   Memory used = 511K.
NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK._CLASSOUT has 87 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc freq data=_CLASSOUT order=DATA noprint;
MPRINT(EM_PRE_BINNING):   table NAME / OUT= _COUNT(where=(COUNT<5));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 87 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 1 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   set _COUNT;
MPRINT(EM_PRE_BINNING):   call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 1 observations read from the data set WORK._COUNT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc sort data=_CLASSOUT;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 87 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 87 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(EM_PRE_BINNING):   var NRAW;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 87 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._OUT has 18 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   dsid = open('_OUT');
MPRINT(EM_PRE_BINNING):   if dsid then do;
MPRINT(EM_PRE_BINNING):   call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(EM_PRE_BINNING):   csid = close(dsid);
MPRINT(EM_PRE_BINNING):   end;
MPRINT(EM_PRE_BINNING):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _INTMID;
MPRINT(EM_PRE_BINNING):   set _OUT;
MPRINT(EM_PRE_BINNING):   keep VARIABLE _MIDPOINT1--_MIDPOINT5 ;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 18 observations read from the data set WORK._OUT.
NOTE: The data set WORK._INTMID has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   label procLevel = "Level for Interactive";
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 22 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename temp catalog 'sashelp.emapps.quantile_binning.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMAPPS.QUANTILE_BINNING.SOURCE.
65546     +%macro em_apps_quantile_binning(input, vartable, numbins, binmappings, binningCode, codeMappings=, precision=0.01, dropOriginal=N);
65548     +  /* initialize binmappings table */
65549     +  data &BINMAPPINGS;
65550     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
65551     +  run;
65553     +  /* process only INTERVAL INPUTS */
65554     +  data tempvars;
65555     +    set &vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
65556     +  run;
65558     +  /* retrieve the name of interval inputs to bin */
65559     +  filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
65560     +  %include tempopen;
65561     +  filename tempopen;
65563     +  %let intvars = ;
65564     +  %global num_intvars;
65565     +  %let num_intvars = 0;
65566     +  %em_varmacro(name=intvars, metadata=tempvars, key=NAME, nummacro=num_intvars);
65568     +  /* retrieve the name of frequency variable if it exists */
65569     +  %let em_bin_freq = ;
65570     +  %let choice = ROLE="FREQ";
65571     +  %let fdsid = %sysfunc(open(&vartable(where=(&choice))));
65572     +  %if &fdsid %then %do;
65573     +    %let fvarnum = %sysfunc(VARNUM(&fdsid, NAME));
65574     +    %let fobs = %sysfunc(fetch(&fdsid));
65575     +    %do %while(&fobs=0);
65576     +       %let em_bin_freq = %sysfunc(getvarc(&fdsid, &fvarnum));
65577     +       %let fobs = %sysfunc(fetch(&fdsid));
65578     +    %end;
65579     +  %end;
65580     +  %if &fdsid >0 %then %let fdsid = %sysfunc(close(&fdsid));
65582     +  /* process all inputs */
65583     +  %if &num_intvars > 0 %then %do;
65585     +    /* Computing quantile binning of interval inputs */
65586     +    %let numbin = %eval(&NUMBINS - 1);
65587     +    %let optstr=;
65588     +    %do i=1 %to &numbin;
65589     +       %let optstr = &optstr %eval(&i*100/&&NUMBINS);
65590     +    %end;
65592     +    data tempInt / view = tempInt;
65593     +      set &input(keep= %intvars
65594     +      %if &em_bin_freq ne %then %do;
65595     +        &em_bin_freq
65596     +      %end;
65597     +      );
65598     +    run;
65600     +    proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=&optstr;
65601     +       var %intvars;
65602     +       %if &em_bin_freq ne %then %do;
65603     +          freq &em_bin_freq;
65604     +       %end;
65605     +    run;
65607     +    proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
65608     +    run;
65610     +    /* generate unique BIN_xxx names for all inputs processed */
65611     +    proc dmdb data=tempvars outtable=tempmapping nameserver;
65612     +     names NAME;
65613     +     prefix BIN_ ;
65614     +    run;
65616     +    proc sort data=tempmapping(keep=NAME bin); by NAME; run;
65617     +    proc sort data=work.pctdata; by _NAME_; run;
65618     +    %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
65619     +      proc sort data=&codemappings nodupkey out=tempcodemappings(keep= codeVar variable) ; by codeVar; run;
65620     +    %end;
65622     +    data tempbins;
65623     +      length display_var $32;
65624     +      merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar))
65625     +      %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
65626     +         tempcodemappings(rename=(codeVar=_name_ variable=display_var))
65627     +      %end;
65628     +      ;
65629     +      by _NAME_;
65630     +      if _a;
65631     +      if missing(display_var) then display_var = _NAME_;
65632     +    run;
65634     +    /* generate BINMAPPINGS dataset and binningCode file*/
65635     +    data _null_;
65636     +      FILE &binningCode;
65637     +      set tempbins end=eof;
65638     +      length string $200;
65639     +      by _NAME_;
65641     +      if _n_=1 then do;
65642     +        put "&EM_CODEBAR;";
65643     +        %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
65644     +        put "* &note;";
65645     +        put "&EM_CODEBAR;";
65647     +        call execute(" data &BINMAPPINGS; ");
65648     +        call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
65649     +      end;
65651     +      %do i=1 %to %eval(&numbins-1);
65652     +       %if &i eq 1 %then %do;
65653     +         %let colname = COL&i;
65654     +         %let binvalnum = 1;
65655     +         LB = .;
65656     +         UB = round(&colname, &precision);
65657     +         bin=&binvalnum;
65659     +         call execute("name='"||strip(_NAME_)||"'; ");
65660     +         call execute("bin_name='"||strip(binVar)||"'; ");
65661     +         call execute("bin='"||strip(bin)||"';");
65662     +         call execute("LB=.;");
65663     +         call execute("UB="||UB||";");
65664     +         call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
65665     +         call execute("output;");
65667     +         string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
65669     +         put string;
65670     +         string = "else do;";
65671     +         put string;
65673     +         string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
65674     +         put string;
65677     +       %end;
65678     +       %else %do;
65679     +         %let colname = COL&i;
65680     +         %let lbnum = %sysevalf(&i-1);
65681     +         %let lbcol = COL&lbnum;
65682     +         UB = round(&colname, &precision);
65683     +         LB = round(&lbcol, &precision);
65684     +         if UB ne LB then do;
65685     +           bin=bin+1;
65687     +           call execute("name='"||strip(_NAME_)||"'; ");
65688     +           call execute("bin_name='"||strip(binVar)||"'; ");
65689     +           call execute("bin='"||strip(bin)||"';");
65690     +           call execute("LB="||LB||";");
65691     +           call execute("UB="||UB||";");
65692     +           call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
65693     +           call execute("output;");
65695     +           string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
65696     +           put string;
65698     +         end;
65699     +       %end;
65700     +      %end;
65701     +      %let binvalnum = %sysevalf(&binvalnum + 1);
65702     +      bin=bin+1;
65703     +      LB = round(&colname, &precision);
65704     +      UB = .;
65706     +      call execute("name='"||strip(_NAME_)||"'; ");
65707     +      call execute("bin_name = '"||strip(binVar)||"'; ");
65708     +      call execute("bin='"||strip(bin)||"';");
65709     +      call execute("UB=.;");
65710     +      call execute("LB="||LB||";");
65711     +      call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
65712     +      call execute("output;");
65714     +      string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
65715     +      put string;
65716     +      string="end;";
65717     +      put string;
65719     +      if eof then do;
65720     +        call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
65721     +        call execute("  if LB=UB then delete;");
65722     +        call execute("run;");
65723     +      end;
65725     +    run;
65727     +    /* drop original inputs */
65728     +    %if &dropOriginal=Y %then %do;
65729     +      data _null_;
65730     +        set work.tempvars end=eof;
65731     +        FILE &binningCode MOD;
65732     +        length string $200;
65734     +        if _n_=1 then do;
65735     +          put "drop";
65736     +        end;
65737     +        string = " "||strip(name);
65738     +        put string;
65740     +        if eof then do;
65741     +          put ";";
65742     +        end;
65743     +      run;
65744     +    %end;
65746     +    proc datasets library=work nolist;
65747     +      delete pctdata tempmapping tempbins tempInt;
65748     +    run;
65749     +    quit;
65750     +  %end;
65752     +  proc datasets library=work nolist;
65753     +    delete tempvars;
65754     +  run;
65755     +  quit;
65757     +%mend em_apps_quantile_binning;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   filename X "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data work.vartable;
MPRINT(EM_QUANTILE_BINNING):   set work._intmid;
MPRINT(EM_QUANTILE_BINNING):   level = "INTERVAL";
MPRINT(EM_QUANTILE_BINNING):   role = "INPUT";
MPRINT(EM_QUANTILE_BINNING):   rename variable=name;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 18 observations read from the data set WORK._INTMID.
NOTE: The data set WORK.VARTABLE has 18 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Variable NAME is uninitialized.
NOTE: Variable BIN_NAME is uninitialized.
NOTE: Variable LB is uninitialized.
NOTE: Variable UB is uninitialized.
NOTE: Variable BIN is uninitialized.
NOTE: Variable EM_BIN_LABEL is uninitialized.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 18 observations read from the data set WORK.VARTABLE.
      WHERE (ROLE='INPUT') and (LEVEL='INTERVAL');
NOTE: The data set WORK.TEMPVARS has 18 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file TEMPOPEN is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
65761     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
65762     +   filename macFile catalog 'work.emutil.macro.source';
65763     +   %let _METAOBS = 0;
65765     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
65766     +                   or (&metadata eq ) %then %do;
65767     +       %goto doend;
65768     +   %end;
65769     +   data _null_;
65770     +      length _STRING_ $80;
65771     +      retain _STRING_;
65772     +      set &metadata end=eof;
65773     +      file macFile;
65774     +      %if %nrbquote(&where) ne %then %do;
65775     +          %let whereClause = where (%nrbquote(&where));
65776     +          %unquote(&whereClause);
65777     +      %end;
65778     +      if _N_=1 then do;
65779     +         string = "%"!!"macro &name;";
65780     +         put string;
65781     +      end;
65782     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
65783     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
65784     +         if eof then do;
65785     +            put _STRING_;
65786     +            string = "%"!!"mend &name;";
65787     +            put string;
65788     +            %if (&nummacro ne ) %then %do;
65789     +                string = strip(put(_N_, best.));
65790     +                put "%" "global &nummacro;";
65791     +                put "%" "let &nummacro = " string ";";
65792     +                call symput('_METAOBS', string);
65793     +            %end;
65794     +         end;
65795     +      end;
65796     +      else do;
65797     +         put _STRING_;
65798     +         _string_ = TRIM(&key);
65799     +         if eof then do;
65800     +            put _STRING_;
65801     +            string = "%"!!"mend &name;";
65802     +            put string;
65803     +        end;
65804     +      end;
65805     +      if eof then do;
65806     +         string = strip(put(_N_, best.));
65807     +         call symput('_METAOBS', string);
65808     +         %if (&nummacro ne ) %then %do;
65809     +             put "%" "global &nummacro;";
65810     +             put "%" "let &nummacro = " string ";";
65811     +         %end;
65812     +      end;
65813     +   run;
65815     +   %doend:
65816     +   %if ^&_METAOBS %then %do;
65817     +       data _null_;
65818     +          file macFile;
65819     +          put "%" "macro &name;";
65820     +          put "%" "mend &name;";
65821     +          %if (&nummacro ne ) %then %do;
65822     +              put "%" "global &nummacro;";
65823     +              put "%" "let &nummacro = 0;";
65824     +          %end;
65825     +      run;
65826     +   %end;
65827     +   %inc macFile;
65828     +   filename macFile;
65829     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen;
NOTE: Fileref TEMPOPEN has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempvars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Quinta-feira, 10 de Março de 2016 06H10m,
      Last Modified=Quinta-feira, 10 de Março de 2016 06H10m,
      Filename=C:\Users\VM-SAS\AppData\Local\Temp\SAS Temporary Files\_TD1700_VM-SAS-PC_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 9 records were written to the file MACFILE.
      The minimum record length was 14.
      The maximum record length was 74.
NOTE: There were 18 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
65830     +%macro intvars;
65831     +Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income
65832     +Kitchen Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn
65833     +Recomendation SmallAppliances Toys
65834     +%mend intvars;
65835     +%global num_intvars;
65836     +%let num_intvars = 18 ;
65837     +%global num_intvars;
65838     +%let num_intvars = 18 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempInt / view = tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   set EMWS8.Part_TRAIN(keep
MPRINT(EM_APPS_QUANTILE_BINNING):  = Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income Kitchen Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation SmallAppliances Toys );
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: DATA STEP view saved on file WORK.TEMPINT.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=25 50 75;
MPRINT(EM_APPS_QUANTILE_BINNING):   var
MPRINT(INTVARS):   Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income Kitchen Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation SmallAppliances Toys
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: View WORK.TEMPINT.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.12 seconds
      
NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 1631 observations read from the data set WORK.TEMPINT.
NOTE: The data set WORK.PCTDATA has 11 observations and 19 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.17 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 3 observations read from the data set WORK.PCTDATA.
      WHERE _type_=:'P';
NOTE: The data set WORK.PCTDATA has 18 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc dmdb data=tempvars outtable=tempmapping nameserver;
MPRINT(EM_APPS_QUANTILE_BINNING):   names NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   prefix BIN_ ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 18 observations read from the data set WORK.TEMPVARS.
NOTE: The data set WORK.TEMPMAPPING has 18 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=tempmapping(keep=NAME bin);
MPRINT(EM_APPS_QUANTILE_BINNING):   by NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 18 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 18 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 18 observations read from the data set WORK.PCTDATA.
NOTE: The data set WORK.PCTDATA has 18 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempbins;
MPRINT(EM_APPS_QUANTILE_BINNING):   length display_var $32;
MPRINT(EM_APPS_QUANTILE_BINNING):   merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar)) ;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _a;
MPRINT(EM_APPS_QUANTILE_BINNING):   if missing(display_var) then display_var = _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: There were 18 observations read from the data set WORK.PCTDATA.
NOTE: There were 18 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPBINS has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X;
MPRINT(EM_APPS_QUANTILE_BINNING):   set tempbins end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "* Generating Bins for interval variables;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute(" data EMWS8.BINNING_BINMAPPINGS; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "else do;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name = '"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string="end;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if LB=UB then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("run;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      298:29   308:21   313:65   350:46   350:87   391:29   396:21   401:21   406:38   406:84   419:51   419:92   468:29   473:21   478:21   483:38   483:84   496:51   496:92   540:29   550:21   555:66   568:52   568:93   
NOTE: The file X is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=03 de Março de 2016 08H28m

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 36;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age < 36';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 36;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 50;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='36 <= Age < 50';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 50;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 64;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='50 <= Age < 64';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 64;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age >= 64';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 36;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age_Exmpl2 < 36';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 36;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 50;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='36 <= Age_Exmpl2 < 50';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 50;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 64;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='50 <= Age_Exmpl2 < 64';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Age_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 64;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age_Exmpl2 >= 64';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 43;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='CatPurchase < 43';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 43;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 55;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='43 <= CatPurchase < 55';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 55;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='55 <= CatPurchase < 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_CatPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='CatPurchase >= 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Clothes < 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 53;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='35 <= Clothes < 53';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 53;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 70;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='53 <= Clothes < 70';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Clothes';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 70;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Clothes >= 70';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq < 11';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='11 <= Frq < 18';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 28;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='18 <= Frq < 28';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 28;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq >= 28';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='HigherEducation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_HigherEducation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='HigherEducation < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='HigherEducation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_HigherEducation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= HigherEducation < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='HigherEducation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_HigherEducation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='HigherEducation >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='HouseKeeping < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= HouseKeeping < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= HouseKeeping < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_HouseKeeping';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='HouseKeeping >= 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 51921.45;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income < 51921.45';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 51921.45;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 74868.15;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='51921.45 <= Income < 74868.15';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 74868.15;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 97525.05;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='74868.15 <= Income < 97525.05';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 97525.05;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income >= 97525.05';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kitchen < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= Kitchen < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= Kitchen < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Kitchen';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kitchen >= 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 67.6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt < 67.6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 67.6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 407.68;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='67.6 <= Mnt < 407.68';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 407.68;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1127.36;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='407.68 <= Mnt < 1127.36';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1127.36;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt >= 1127.36';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 67;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer < 67';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 67;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 80;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='67 <= MonthsAsCustomer < 80';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 80;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 95;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='80 <= MonthsAsCustomer < 95';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 95;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer >= 95';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NetPurchase < 27';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 45;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='27 <= NetPurchase < 45';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 45;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='45 <= NetPurchase < 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NetPurchase';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NetPurchase >= 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 23.84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7 <= RMntFrq < 23.84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 23.84;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 40.38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='23.84 <= RMntFrq < 40.38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 40.38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq >= 40.38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq_Exmpl2 < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 23.84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7 <= RMntFrq_Exmpl2 < 23.84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 23.84;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 40.38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='23.84 <= RMntFrq_Exmpl2 < 40.38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RMntFrq_Exmpl2';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 40.38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq_Exmpl2 >= 40.38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 28;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Rcn < 28';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 28;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 53;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='28 <= Rcn < 53';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 53;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 78;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='53 <= Rcn < 78';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Rcn';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 78;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Rcn >= 78';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recomendation < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= Recomendation < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= Recomendation < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Recomendation';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recomendation >= 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 19;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='SmallAppliances < 19';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 19;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='19 <= SmallAppliances < 27';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 37;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='27 <= SmallAppliances < 37';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_SmallAppliances';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 37;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='SmallAppliances >= 37';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Toys < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= Toys < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= Toys < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Toys';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Toys >= 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   if NAME='' and BIN_NAME='' and BIN='' then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   if LB=UB then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
NOTE: 128 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 63.
NOTE: There were 18 observations read from the data set WORK.TEMPBINS.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         +  data EMWS8.BINNING_BINMAPPINGS;
2         +    length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):  32 LB UB EM_BIN_LABEL BIN200
3         + name='Age';
4         + bin_name='BIN_Age';
5         + bin='1';
6         + LB=.;
7         + UB=          36;
8         + EM_BIN_LABEL='Age < 36';
9         + output;
10        + name='Age';
11        + bin_name='BIN_Age';
12        + bin='2';
13        + LB=          36;
14        + UB=          50;
15        + EM_BIN_LABEL='36 <= Age < 50';
16        + output;
17        + name='Age';
18        + bin_name='BIN_Age';
19        + bin='3';
20        + LB=          50;
21        + UB=          64;
22        + EM_BIN_LABEL='50 <= Age < 64';
23        + output;
24        + name='Age';
25        + bin_name = 'BIN_Age';
26        + bin='4';
27        + UB=.;
28        + LB=          64;
29        + EM_BIN_LABEL='Age >= 64';
30        + output;
31        + name='Age_Exmpl2';
32        + bin_name='BIN_Age_Exmpl2';
33        + bin='1';
34        + LB=.;
35        + UB=          36;
36        + EM_BIN_LABEL='Age_Exmpl2 < 36';
37        + output;
38        + name='Age_Exmpl2';
39        + bin_name='BIN_Age_Exmpl2';
40        + bin='2';
41        + LB=          36;
42        + UB=          50;
43        + EM_BIN_LABEL='36 <= Age_Exmpl2 < 50';
44        + output;
45        + name='Age_Exmpl2';
46        + bin_name='BIN_Age_Exmpl2';
47        + bin='3';
48        + LB=          50;
49        + UB=          64;
50        + EM_BIN_LABEL='50 <= Age_Exmpl2 < 64';
51        + output;
52        + name='Age_Exmpl2';
53        + bin_name = 'BIN_Age_Exmpl2';
54        + bin='4';
55        + UB=.;
56        + LB=          64;
57        + EM_BIN_LABEL='Age_Exmpl2 >= 64';
58        + output;
59        + name='CatPurchase';
60        + bin_name='BIN_CatPurchase';
61        + bin='1';
62        + LB=.;
63        + UB=          43;
64        + EM_BIN_LABEL='CatPurchase < 43';
65        + output;
66        + name='CatPurchase';
67        + bin_name='BIN_CatPurchase';
68        + bin='2';
69        + LB=          43;
70        + UB=          55;
71        + EM_BIN_LABEL='43 <= CatPurchase < 55';
72        + output;
73        + name='CatPurchase';
74        + bin_name='BIN_CatPurchase';
75        + bin='3';
76        + LB=          55;
77        + UB=          73;
78        + EM_BIN_LABEL='55 <= CatPurchase < 73';
79        + output;
80        + name='CatPurchase';
81        + bin_name = 'BIN_CatPurchase';
82        + bin='4';
83        + UB=.;
84        + LB=          73;
85        + EM_BIN_LABEL='CatPurchase >= 73';
86        + output;
87        + name='Clothes';
88        + bin_name='BIN_Clothes';
89        + bin='1';
90        + LB=.;
91        + UB=          35;
92        + EM_BIN_LABEL='Clothes < 35';
93        + output;
94        + name='Clothes';
95        + bin_name='BIN_Clothes';
96        + bin='2';
97        + LB=          35;
98        + UB=          53;
99        + EM_BIN_LABEL='35 <= Clothes < 53';
100       + output;
101       + name='Clothes';
102       + bin_name='BIN_Clothes';
103       + bin='3';
104       + LB=          53;
105       + UB=          70;
106       + EM_BIN_LABEL='53 <= Clothes < 70';
107       + output;
108       + name='Clothes';
109       + bin_name = 'BIN_Clothes';
110       + bin='4';
111       + UB=.;
112       + LB=          70;
113       + EM_BIN_LABEL='Clothes >= 70';
114       + output;
115       + name='Frq';
116       + bin_name='BIN_Frq';
117       + bin='1';
118       + LB=.;
119       + UB=          11;
120       + EM_BIN_LABEL='Frq < 11';
121       + output;
122       + name='Frq';
123       + bin_name='BIN_Frq';
124       + bin='2';
125       + LB=          11;
126       + UB=          18;
127       + EM_BIN_LABEL='11 <= Frq < 18';
128       + output;
129       + name='Frq';
130       + bin_name='BIN_Frq';
131       + bin='3';
132       + LB=          18;
133       + UB=          28;
134       + EM_BIN_LABEL='18 <= Frq < 28';
135       + output;
136       + name='Frq';
137       + bin_name = 'BIN_Frq';
138       + bin='4';
139       + UB=.;
140       + LB=          28;
141       + EM_BIN_LABEL='Frq >= 28';
142       + output;
143       + name='HigherEducation';
144       + bin_name='BIN_HigherEducation';
145       + bin='1';
146       + LB=.;
147       + UB=           0;
148       + EM_BIN_LABEL='HigherEducation < 0';
149       + output;
150       + name='HigherEducation';
151       + bin_name='BIN_HigherEducation';
152       + bin='2';
153       + LB=           0;
154       + UB=           1;
155       + EM_BIN_LABEL='0 <= HigherEducation < 1';
156       + output;
157       + name='HigherEducation';
158       + bin_name = 'BIN_HigherEducation';
159       + bin='3';
160       + UB=.;
161       + LB=           1;
162       + EM_BIN_LABEL='HigherEducation >= 1';
163       + output;
164       + name='HouseKeeping';
165       + bin_name='BIN_HouseKeeping';
166       + bin='1';
167       + LB=.;
168       + UB=           1;
169       + EM_BIN_LABEL='HouseKeeping < 1';
170       + output;
171       + name='HouseKeeping';
172       + bin_name='BIN_HouseKeeping';
173       + bin='2';
174       + LB=           1;
175       + UB=           4;
176       + EM_BIN_LABEL='1 <= HouseKeeping < 4';
177       + output;
178       + name='HouseKeeping';
179       + bin_name='BIN_HouseKeeping';
180       + bin='3';
181       + LB=           4;
182       + UB=           9;
183       + EM_BIN_LABEL='4 <= HouseKeeping < 9';
184       + output;
185       + name='HouseKeeping';
186       + bin_name = 'BIN_HouseKeeping';
187       + bin='4';
188       + UB=.;
189       + LB=           9;
190       + EM_BIN_LABEL='HouseKeeping >= 9';
191       + output;
192       + name='Income';
193       + bin_name='BIN_Income';
194       + bin='1';
195       + LB=.;
196       + UB=    51921.45;
197       + EM_BIN_LABEL='Income < 51921.45';
198       + output;
199       + name='Income';
200       + bin_name='BIN_Income';
201       + bin='2';
202       + LB=    51921.45;
203       + UB=    74868.15;
204       + EM_BIN_LABEL='51921.45 <= Income < 74868.15';
205       + output;
206       + name='Income';
207       + bin_name='BIN_Income';
208       + bin='3';
209       + LB=    74868.15;
210       + UB=    97525.05;
211       + EM_BIN_LABEL='74868.15 <= Income < 97525.05';
212       + output;
213       + name='Income';
214       + bin_name = 'BIN_Income';
215       + bin='4';
216       + UB=.;
217       + LB=    97525.05;
218       + EM_BIN_LABEL='Income >= 97525.05';
219       + output;
220       + name='Kitchen';
221       + bin_name='BIN_Kitchen';
222       + bin='1';
223       + LB=.;
224       + UB=           2;
225       + EM_BIN_LABEL='Kitchen < 2';
226       + output;
227       + name='Kitchen';
228       + bin_name='BIN_Kitchen';
229       + bin='2';
230       + LB=           2;
231       + UB=           4;
232       + EM_BIN_LABEL='2 <= Kitchen < 4';
233       + output;
234       + name='Kitchen';
235       + bin_name='BIN_Kitchen';
236       + bin='3';
237       + LB=           4;
238       + UB=           9;
239       + EM_BIN_LABEL='4 <= Kitchen < 9';
240       + output;
241       + name='Kitchen';
242       + bin_name = 'BIN_Kitchen';
243       + bin='4';
244       + UB=.;
245       + LB=           9;
246       + EM_BIN_LABEL='Kitchen >= 9';
247       + output;
248       + name='Mnt';
249       + bin_name='BIN_Mnt';
250       + bin='1';
251       + LB=.;
252       + UB=        67.6;
253       + EM_BIN_LABEL='Mnt < 67.6';
254       + output;
255       + name='Mnt';
256       + bin_name='BIN_Mnt';
257       + bin='2';
258       + LB=        67.6;
259       + UB=      407.68;
260       + EM_BIN_LABEL='67.6 <= Mnt < 407.68';
261       + output;
262       + name='Mnt';
263       + bin_name='BIN_Mnt';
264       + bin='3';
265       + LB=      407.68;
266       + UB=     1127.36;
267       + EM_BIN_LABEL='407.68 <= Mnt < 1127.36';
268       + output;
269       + name='Mnt';
270       + bin_name = 'BIN_Mnt';
271       + bin='4';
272       + UB=.;
273       + LB=     1127.36;
274       + EM_BIN_LABEL='Mnt >= 1127.36';
275       + output;
276       + name='MonthsAsCustomer';
277       + bin_name='BIN_MonthsAsCustomer';
278       + bin='1';
279       + LB=.;
280       + UB=          67;
281       + EM_BIN_LABEL='MonthsAsCustomer < 67';
282       + output;
283       + name='MonthsAsCustomer';
284       + bin_name='BIN_MonthsAsCustomer';
285       + bin='2';
286       + LB=          67;
287       + UB=          80;
288       + EM_BIN_LABEL='67 <= MonthsAsCustomer < 80';
289       + output;
290       + name='MonthsAsCustomer';
291       + bin_name='BIN_MonthsAsCustomer';
292       + bin='3';
293       + LB=          80;
294       + UB=          95;
295       + EM_BIN_LABEL='80 <= MonthsAsCustomer < 95';
296       + output;
297       + name='MonthsAsCustomer';
298       + bin_name = 'BIN_MonthsAsCustomer';
299       + bin='4';
300       + UB=.;
301       + LB=          95;
302       + EM_BIN_LABEL='MonthsAsCustomer >= 95';
303       + output;
304       + name='NetPurchase';
305       + bin_name='BIN_NetPurchase';
306       + bin='1';
307       + LB=.;
308       + UB=          27;
309       + EM_BIN_LABEL='NetPurchase < 27';
310       + output;
311       + name='NetPurchase';
312       + bin_name='BIN_NetPurchase';
313       + bin='2';
314       + LB=          27;
315       + UB=          45;
316       + EM_BIN_LABEL='27 <= NetPurchase < 45';
317       + output;
318       + name='NetPurchase';
319       + bin_name='BIN_NetPurchase';
320       + bin='3';
321       + LB=          45;
322       + UB=          57;
323       + EM_BIN_LABEL='45 <= NetPurchase < 57';
324       + output;
325       + name='NetPurchase';
326       + bin_name = 'BIN_NetPurchase';
327       + bin='4';
328       + UB=.;
329       + LB=          57;
330       + EM_BIN_LABEL='NetPurchase >= 57';
331       + output;
332       + name='RMntFrq';
333       + bin_name='BIN_RMntFrq';
334       + bin='1';
335       + LB=.;
336       + UB=           7;
337       + EM_BIN_LABEL='RMntFrq < 7';
338       + output;
339       + name='RMntFrq';
340       + bin_name='BIN_RMntFrq';
341       + bin='2';
342       + LB=           7;
343       + UB=       23.84;
344       + EM_BIN_LABEL='7 <= RMntFrq < 23.84';
345       + output;
346       + name='RMntFrq';
347       + bin_name='BIN_RMntFrq';
348       + bin='3';
349       + LB=       23.84;
350       + UB=       40.38;
351       + EM_BIN_LABEL='23.84 <= RMntFrq < 40.38';
352       + output;
353       + name='RMntFrq';
354       + bin_name = 'BIN_RMntFrq';
355       + bin='4';
356       + UB=.;
357       + LB=       40.38;
358       + EM_BIN_LABEL='RMntFrq >= 40.38';
359       + output;
360       + name='RMntFrq_Exmpl2';
361       + bin_name='BIN_RMntFrq_Exmpl2';
362       + bin='1';
363       + LB=.;
364       + UB=           7;
365       + EM_BIN_LABEL='RMntFrq_Exmpl2 < 7';
366       + output;
367       + name='RMntFrq_Exmpl2';
368       + bin_name='BIN_RMntFrq_Exmpl2';
369       + bin='2';
370       + LB=           7;
371       + UB=       23.84;
372       + EM_BIN_LABEL='7 <= RMntFrq_Exmpl2 < 23.84';
373       + output;
374       + name='RMntFrq_Exmpl2';
375       + bin_name='BIN_RMntFrq_Exmpl2';
376       + bin='3';
377       + LB=       23.84;
378       + UB=       40.38;
379       + EM_BIN_LABEL='23.84 <= RMntFrq_Exmpl2 < 40.38';
380       + output;
381       + name='RMntFrq_Exmpl2';
382       + bin_name = 'BIN_RMntFrq_Exmpl2';
383       + bin='4';
384       + UB=.;
385       + LB=       40.38;
386       + EM_BIN_LABEL='RMntFrq_Exmpl2 >= 40.38';
387       + output;
388       + name='Rcn';
389       + bin_name='BIN_Rcn';
390       + bin='1';
391       + LB=.;
392       + UB=          28;
393       + EM_BIN_LABEL='Rcn < 28';
394       + output;
395       + name='Rcn';
396       + bin_name='BIN_Rcn';
397       + bin='2';
398       + LB=          28;
399       + UB=          53;
400       + EM_BIN_LABEL='28 <= Rcn < 53';
401       + output;
402       + name='Rcn';
403       + bin_name='BIN_Rcn';
404       + bin='3';
405       + LB=          53;
406       + UB=          78;
407       + EM_BIN_LABEL='53 <= Rcn < 78';
408       + output;
409       + name='Rcn';
410       + bin_name = 'BIN_Rcn';
411       + bin='4';
412       + UB=.;
413       + LB=          78;
414       + EM_BIN_LABEL='Rcn >= 78';
415       + output;
416       + name='Recomendation';
417       + bin_name='BIN_Recomendation';
418       + bin='1';
419       + LB=.;
420       + UB=           3;
421       + EM_BIN_LABEL='Recomendation < 3';
422       + output;
423       + name='Recomendation';
424       + bin_name='BIN_Recomendation';
425       + bin='2';
426       + LB=           3;
427       + UB=           4;
428       + EM_BIN_LABEL='3 <= Recomendation < 4';
429       + output;
430       + name='Recomendation';
431       + bin_name='BIN_Recomendation';
432       + bin='3';
433       + LB=           4;
434       + UB=           5;
435       + EM_BIN_LABEL='4 <= Recomendation < 5';
436       + output;
437       + name='Recomendation';
438       + bin_name = 'BIN_Recomendation';
439       + bin='4';
440       + UB=.;
441       + LB=           5;
442       + EM_BIN_LABEL='Recomendation >= 5';
443       + output;
444       + name='SmallAppliances';
445       + bin_name='BIN_SmallAppliances';
446       + bin='1';
447       + LB=.;
448       + UB=          19;
449       + EM_BIN_LABEL='SmallAppliances < 19';
450       + output;
451       + name='SmallAppliances';
452       + bin_name='BIN_SmallAppliances';
453       + bin='2';
454       + LB=          19;
455       + UB=          27;
456       + EM_BIN_LABEL='19 <= SmallAppliances < 27';
457       + output;
458       + name='SmallAppliances';
459       + bin_name='BIN_SmallAppliances';
460       + bin='3';
461       + LB=          27;
462       + UB=          37;
463       + EM_BIN_LABEL='27 <= SmallAppliances < 37';
464       + output;
465       + name='SmallAppliances';
466       + bin_name = 'BIN_SmallAppliances';
467       + bin='4';
468       + UB=.;
469       + LB=          37;
470       + EM_BIN_LABEL='SmallAppliances >= 37';
471       + output;
472       + name='Toys';
473       + bin_name='BIN_Toys';
474       + bin='1';
475       + LB=.;
476       + UB=           1;
477       + EM_BIN_LABEL='Toys < 1';
478       + output;
479       + name='Toys';
480       + bin_name='BIN_Toys';
481       + bin='2';
482       + LB=           1;
483       + UB=           4;
484       + EM_BIN_LABEL='1 <= Toys < 4';
485       + output;
486       + name='Toys';
487       + bin_name='BIN_Toys';
488       + bin='3';
489       + LB=           4;
490       + UB=           9;
491       + EM_BIN_LABEL='4 <= Toys < 9';
492       + output;
493       + name='Toys';
494       + bin_name = 'BIN_Toys';
495       + bin='4';
496       + UB=.;
497       + LB=           9;
498       + EM_BIN_LABEL='Toys >= 9';
499       + output;
500       +   if NAME='' and BIN_NAME='' and BIN='' then delete;
501       +   if LB=UB then delete;
502       + run;

NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 71 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.tempvars end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X MOD;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "drop";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = " "||strip(name);
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put ";";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file X is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=4416,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=03 de Março de 2016 08H28m

NOTE: 20 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 16.
NOTE: There were 18 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete pctdata tempmapping tempbins tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file WORK.TEMPINT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PCTDATA (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPBINS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.TEMPVARS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   by name lb;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 71 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   length display_var $32 grp $8;
MPRINT(EM_QUANTILE_BINNING):   display_var = name;
MPRINT(EM_QUANTILE_BINNING):   GRP = BIN + 1;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      102:7   
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      102:11   
NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 71 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedmapping nodupkey;
MPRINT(EM_QUANTILE_BINNING):   by NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: 53 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDMAPPING has 18 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 1 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   set sortedmapping;
MPRINT(EM_QUANTILE_BINNING):   GRP="1";
MPRINT(EM_QUANTILE_BINNING):   bin="Missing";
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = "Missing";
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 18 observations read from the data set WORK.SORTEDMAPPING.
NOTE: The data set WORK.TEMPMISSVALUES has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINDATA;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.Part_TRAIN;
NOTE: %INCLUDE (level 1) file X is file E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\BINNINGCODE.sas.
65839     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
65840     +* Generating Bins for interval variables;
MPRINT(EM_QUANTILE_BINNING):   * Generating Bins for interval variables;
65841     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
65842     +if Age eq . then BIN_Age= .;
MPRINT(EM_QUANTILE_BINNING):   if Age eq . then BIN_Age= .;
65843     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65844     +if Age < 36 then BIN_Age=1;
MPRINT(EM_QUANTILE_BINNING):   if Age < 36 then BIN_Age=1;
65845     +else if Age < 50 then BIN_Age=2;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 50 then BIN_Age=2;
65846     +else if Age < 64 then BIN_Age=3;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 64 then BIN_Age=3;
65847     +else if Age >= 64 then BIN_Age=4;
MPRINT(EM_QUANTILE_BINNING):   else if Age >= 64 then BIN_Age=4;
65848     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65849     +if Age_Exmpl2 eq . then BIN_Age_Exmpl2= .;
MPRINT(EM_QUANTILE_BINNING):   if Age_Exmpl2 eq . then BIN_Age_Exmpl2= .;
65850     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65851     +if Age_Exmpl2 < 36 then BIN_Age_Exmpl2=1;
MPRINT(EM_QUANTILE_BINNING):   if Age_Exmpl2 < 36 then BIN_Age_Exmpl2=1;
65852     +else if Age_Exmpl2 < 50 then BIN_Age_Exmpl2=2;
MPRINT(EM_QUANTILE_BINNING):   else if Age_Exmpl2 < 50 then BIN_Age_Exmpl2=2;
65853     +else if Age_Exmpl2 < 64 then BIN_Age_Exmpl2=3;
MPRINT(EM_QUANTILE_BINNING):   else if Age_Exmpl2 < 64 then BIN_Age_Exmpl2=3;
65854     +else if Age_Exmpl2 >= 64 then BIN_Age_Exmpl2=4;
MPRINT(EM_QUANTILE_BINNING):   else if Age_Exmpl2 >= 64 then BIN_Age_Exmpl2=4;
65855     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65856     +if CatPurchase eq . then BIN_CatPurchase= .;
MPRINT(EM_QUANTILE_BINNING):   if CatPurchase eq . then BIN_CatPurchase= .;
65857     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65858     +if CatPurchase < 43 then BIN_CatPurchase=1;
MPRINT(EM_QUANTILE_BINNING):   if CatPurchase < 43 then BIN_CatPurchase=1;
65859     +else if CatPurchase < 55 then BIN_CatPurchase=2;
MPRINT(EM_QUANTILE_BINNING):   else if CatPurchase < 55 then BIN_CatPurchase=2;
65860     +else if CatPurchase < 73 then BIN_CatPurchase=3;
MPRINT(EM_QUANTILE_BINNING):   else if CatPurchase < 73 then BIN_CatPurchase=3;
65861     +else if CatPurchase >= 73 then BIN_CatPurchase=4;
MPRINT(EM_QUANTILE_BINNING):   else if CatPurchase >= 73 then BIN_CatPurchase=4;
65862     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65863     +if Clothes eq . then BIN_Clothes= .;
MPRINT(EM_QUANTILE_BINNING):   if Clothes eq . then BIN_Clothes= .;
65864     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65865     +if Clothes < 35 then BIN_Clothes=1;
MPRINT(EM_QUANTILE_BINNING):   if Clothes < 35 then BIN_Clothes=1;
65866     +else if Clothes < 53 then BIN_Clothes=2;
MPRINT(EM_QUANTILE_BINNING):   else if Clothes < 53 then BIN_Clothes=2;
65867     +else if Clothes < 70 then BIN_Clothes=3;
MPRINT(EM_QUANTILE_BINNING):   else if Clothes < 70 then BIN_Clothes=3;
65868     +else if Clothes >= 70 then BIN_Clothes=4;
MPRINT(EM_QUANTILE_BINNING):   else if Clothes >= 70 then BIN_Clothes=4;
65869     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65870     +if Frq eq . then BIN_Frq= .;
MPRINT(EM_QUANTILE_BINNING):   if Frq eq . then BIN_Frq= .;
65871     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65872     +if Frq < 11 then BIN_Frq=1;
MPRINT(EM_QUANTILE_BINNING):   if Frq < 11 then BIN_Frq=1;
65873     +else if Frq < 18 then BIN_Frq=2;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 18 then BIN_Frq=2;
65874     +else if Frq < 28 then BIN_Frq=3;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 28 then BIN_Frq=3;
65875     +else if Frq >= 28 then BIN_Frq=4;
MPRINT(EM_QUANTILE_BINNING):   else if Frq >= 28 then BIN_Frq=4;
65876     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65877     +if HigherEducation eq . then BIN_HigherEducation= .;
MPRINT(EM_QUANTILE_BINNING):   if HigherEducation eq . then BIN_HigherEducation= .;
65878     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65879     +if HigherEducation < 0 then BIN_HigherEducation=1;
MPRINT(EM_QUANTILE_BINNING):   if HigherEducation < 0 then BIN_HigherEducation=1;
65880     +else if HigherEducation < 1 then BIN_HigherEducation=2;
MPRINT(EM_QUANTILE_BINNING):   else if HigherEducation < 1 then BIN_HigherEducation=2;
65881     +else if HigherEducation >= 1 then BIN_HigherEducation=3;
MPRINT(EM_QUANTILE_BINNING):   else if HigherEducation >= 1 then BIN_HigherEducation=3;
65882     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65883     +if HouseKeeping eq . then BIN_HouseKeeping= .;
MPRINT(EM_QUANTILE_BINNING):   if HouseKeeping eq . then BIN_HouseKeeping= .;
65884     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65885     +if HouseKeeping < 1 then BIN_HouseKeeping=1;
MPRINT(EM_QUANTILE_BINNING):   if HouseKeeping < 1 then BIN_HouseKeeping=1;
65886     +else if HouseKeeping < 4 then BIN_HouseKeeping=2;
MPRINT(EM_QUANTILE_BINNING):   else if HouseKeeping < 4 then BIN_HouseKeeping=2;
65887     +else if HouseKeeping < 9 then BIN_HouseKeeping=3;
MPRINT(EM_QUANTILE_BINNING):   else if HouseKeeping < 9 then BIN_HouseKeeping=3;
65888     +else if HouseKeeping >= 9 then BIN_HouseKeeping=4;
MPRINT(EM_QUANTILE_BINNING):   else if HouseKeeping >= 9 then BIN_HouseKeeping=4;
65889     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65890     +if Income eq . then BIN_Income= .;
MPRINT(EM_QUANTILE_BINNING):   if Income eq . then BIN_Income= .;
65891     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65892     +if Income < 51921.45 then BIN_Income=1;
MPRINT(EM_QUANTILE_BINNING):   if Income < 51921.45 then BIN_Income=1;
65893     +else if Income < 74868.15 then BIN_Income=2;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 74868.15 then BIN_Income=2;
65894     +else if Income < 97525.05 then BIN_Income=3;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 97525.05 then BIN_Income=3;
65895     +else if Income >= 97525.05 then BIN_Income=4;
MPRINT(EM_QUANTILE_BINNING):   else if Income >= 97525.05 then BIN_Income=4;
65896     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65897     +if Kitchen eq . then BIN_Kitchen= .;
MPRINT(EM_QUANTILE_BINNING):   if Kitchen eq . then BIN_Kitchen= .;
65898     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65899     +if Kitchen < 2 then BIN_Kitchen=1;
MPRINT(EM_QUANTILE_BINNING):   if Kitchen < 2 then BIN_Kitchen=1;
65900     +else if Kitchen < 4 then BIN_Kitchen=2;
MPRINT(EM_QUANTILE_BINNING):   else if Kitchen < 4 then BIN_Kitchen=2;
65901     +else if Kitchen < 9 then BIN_Kitchen=3;
MPRINT(EM_QUANTILE_BINNING):   else if Kitchen < 9 then BIN_Kitchen=3;
65902     +else if Kitchen >= 9 then BIN_Kitchen=4;
MPRINT(EM_QUANTILE_BINNING):   else if Kitchen >= 9 then BIN_Kitchen=4;
65903     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65904     +if Mnt eq . then BIN_Mnt= .;
MPRINT(EM_QUANTILE_BINNING):   if Mnt eq . then BIN_Mnt= .;
65905     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65906     +if Mnt < 67.6 then BIN_Mnt=1;
MPRINT(EM_QUANTILE_BINNING):   if Mnt < 67.6 then BIN_Mnt=1;
65907     +else if Mnt < 407.68 then BIN_Mnt=2;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 407.68 then BIN_Mnt=2;
65908     +else if Mnt < 1127.36 then BIN_Mnt=3;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 1127.36 then BIN_Mnt=3;
65909     +else if Mnt >= 1127.36 then BIN_Mnt=4;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt >= 1127.36 then BIN_Mnt=4;
65910     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65911     +if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
65912     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65913     +if MonthsAsCustomer < 67 then BIN_MonthsAsCustomer=1;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer < 67 then BIN_MonthsAsCustomer=1;
65914     +else if MonthsAsCustomer < 80 then BIN_MonthsAsCustomer=2;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 80 then BIN_MonthsAsCustomer=2;
65915     +else if MonthsAsCustomer < 95 then BIN_MonthsAsCustomer=3;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 95 then BIN_MonthsAsCustomer=3;
65916     +else if MonthsAsCustomer >= 95 then BIN_MonthsAsCustomer=4;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer >= 95 then BIN_MonthsAsCustomer=4;
65917     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65918     +if NetPurchase eq . then BIN_NetPurchase= .;
MPRINT(EM_QUANTILE_BINNING):   if NetPurchase eq . then BIN_NetPurchase= .;
65919     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65920     +if NetPurchase < 27 then BIN_NetPurchase=1;
MPRINT(EM_QUANTILE_BINNING):   if NetPurchase < 27 then BIN_NetPurchase=1;
65921     +else if NetPurchase < 45 then BIN_NetPurchase=2;
MPRINT(EM_QUANTILE_BINNING):   else if NetPurchase < 45 then BIN_NetPurchase=2;
65922     +else if NetPurchase < 57 then BIN_NetPurchase=3;
MPRINT(EM_QUANTILE_BINNING):   else if NetPurchase < 57 then BIN_NetPurchase=3;
65923     +else if NetPurchase >= 57 then BIN_NetPurchase=4;
MPRINT(EM_QUANTILE_BINNING):   else if NetPurchase >= 57 then BIN_NetPurchase=4;
65924     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65925     +if RMntFrq eq . then BIN_RMntFrq= .;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq eq . then BIN_RMntFrq= .;
65926     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65927     +if RMntFrq < 7 then BIN_RMntFrq=1;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq < 7 then BIN_RMntFrq=1;
65928     +else if RMntFrq < 23.84 then BIN_RMntFrq=2;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 23.84 then BIN_RMntFrq=2;
65929     +else if RMntFrq < 40.38 then BIN_RMntFrq=3;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 40.38 then BIN_RMntFrq=3;
65930     +else if RMntFrq >= 40.38 then BIN_RMntFrq=4;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq >= 40.38 then BIN_RMntFrq=4;
65931     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65932     +if RMntFrq_Exmpl2 eq . then BIN_RMntFrq_Exmpl2= .;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq_Exmpl2 eq . then BIN_RMntFrq_Exmpl2= .;
65933     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65934     +if RMntFrq_Exmpl2 < 7 then BIN_RMntFrq_Exmpl2=1;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq_Exmpl2 < 7 then BIN_RMntFrq_Exmpl2=1;
65935     +else if RMntFrq_Exmpl2 < 23.84 then BIN_RMntFrq_Exmpl2=2;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq_Exmpl2 < 23.84 then BIN_RMntFrq_Exmpl2=2;
65936     +else if RMntFrq_Exmpl2 < 40.38 then BIN_RMntFrq_Exmpl2=3;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq_Exmpl2 < 40.38 then BIN_RMntFrq_Exmpl2=3;
65937     +else if RMntFrq_Exmpl2 >= 40.38 then BIN_RMntFrq_Exmpl2=4;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq_Exmpl2 >= 40.38 then BIN_RMntFrq_Exmpl2=4;
65938     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65939     +if Rcn eq . then BIN_Rcn= .;
MPRINT(EM_QUANTILE_BINNING):   if Rcn eq . then BIN_Rcn= .;
65940     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65941     +if Rcn < 28 then BIN_Rcn=1;
MPRINT(EM_QUANTILE_BINNING):   if Rcn < 28 then BIN_Rcn=1;
65942     +else if Rcn < 53 then BIN_Rcn=2;
MPRINT(EM_QUANTILE_BINNING):   else if Rcn < 53 then BIN_Rcn=2;
65943     +else if Rcn < 78 then BIN_Rcn=3;
MPRINT(EM_QUANTILE_BINNING):   else if Rcn < 78 then BIN_Rcn=3;
65944     +else if Rcn >= 78 then BIN_Rcn=4;
MPRINT(EM_QUANTILE_BINNING):   else if Rcn >= 78 then BIN_Rcn=4;
65945     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65946     +if Recomendation eq . then BIN_Recomendation= .;
MPRINT(EM_QUANTILE_BINNING):   if Recomendation eq . then BIN_Recomendation= .;
65947     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65948     +if Recomendation < 3 then BIN_Recomendation=1;
MPRINT(EM_QUANTILE_BINNING):   if Recomendation < 3 then BIN_Recomendation=1;
65949     +else if Recomendation < 4 then BIN_Recomendation=2;
MPRINT(EM_QUANTILE_BINNING):   else if Recomendation < 4 then BIN_Recomendation=2;
65950     +else if Recomendation < 5 then BIN_Recomendation=3;
MPRINT(EM_QUANTILE_BINNING):   else if Recomendation < 5 then BIN_Recomendation=3;
65951     +else if Recomendation >= 5 then BIN_Recomendation=4;
MPRINT(EM_QUANTILE_BINNING):   else if Recomendation >= 5 then BIN_Recomendation=4;
65952     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65953     +if SmallAppliances eq . then BIN_SmallAppliances= .;
MPRINT(EM_QUANTILE_BINNING):   if SmallAppliances eq . then BIN_SmallAppliances= .;
65954     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65955     +if SmallAppliances < 19 then BIN_SmallAppliances=1;
MPRINT(EM_QUANTILE_BINNING):   if SmallAppliances < 19 then BIN_SmallAppliances=1;
65956     +else if SmallAppliances < 27 then BIN_SmallAppliances=2;
MPRINT(EM_QUANTILE_BINNING):   else if SmallAppliances < 27 then BIN_SmallAppliances=2;
65957     +else if SmallAppliances < 37 then BIN_SmallAppliances=3;
MPRINT(EM_QUANTILE_BINNING):   else if SmallAppliances < 37 then BIN_SmallAppliances=3;
65958     +else if SmallAppliances >= 37 then BIN_SmallAppliances=4;
MPRINT(EM_QUANTILE_BINNING):   else if SmallAppliances >= 37 then BIN_SmallAppliances=4;
65959     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65960     +if Toys eq . then BIN_Toys= .;
MPRINT(EM_QUANTILE_BINNING):   if Toys eq . then BIN_Toys= .;
65961     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
65962     +if Toys < 1 then BIN_Toys=1;
MPRINT(EM_QUANTILE_BINNING):   if Toys < 1 then BIN_Toys=1;
65963     +else if Toys < 4 then BIN_Toys=2;
MPRINT(EM_QUANTILE_BINNING):   else if Toys < 4 then BIN_Toys=2;
65964     +else if Toys < 9 then BIN_Toys=3;
MPRINT(EM_QUANTILE_BINNING):   else if Toys < 9 then BIN_Toys=3;
65965     +else if Toys >= 9 then BIN_Toys=4;
MPRINT(EM_QUANTILE_BINNING):   else if Toys >= 9 then BIN_Toys=4;
65966     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
65967     +drop
65968     +Age
65969     +Age_Exmpl2
65970     +CatPurchase
65971     +Clothes
65972     +Frq
65973     +HigherEducation
65974     +HouseKeeping
65975     +Income
65976     +Kitchen
65977     +Mnt
65978     +MonthsAsCustomer
65979     +NetPurchase
65980     +RMntFrq
65981     +RMntFrq_Exmpl2
65982     +Rcn
65983     +Recomendation
65984     +SmallAppliances
65985     +Toys
65986     +;
MPRINT(EM_QUANTILE_BINNING):   drop Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income Kitchen Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation SmallAppliances Toys ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.BINNING_BINDATA has 1631 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   length newgroup _group_ _order_ 8 _level_ $8;
MPRINT(EM_QUANTILE_BINNING):   newgroup =.;
MPRINT(EM_QUANTILE_BINNING):   _LEVEL_ = 'ORDINAL';
MPRINT(EM_QUANTILE_BINNING):   _Group_ = grp;
MPRINT(EM_QUANTILE_BINNING):   rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
MPRINT(EM_QUANTILE_BINNING):   keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      264:11   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: There were 18 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 89 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   _order_ = _N_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 89 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set WORK.TEMPSPLITVALS has 89 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals ;
MPRINT(EM_QUANTILE_BINNING):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 89 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 89 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempvariableset;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_QUANTILE_BINNING):   where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 3 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') and (TYPE='C') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data =EMWS8.BINNING_BINDATA classout=_classout nonorm;
MPRINT(EM_QUANTILE_BINNING):   class Education Gender Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 1631   Memory used = 511K.
NOTE: There were 1631 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT has 12 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data=EMWS8.BINNING_BINDATA classout=_classout2;
MPRINT(EM_QUANTILE_BINNING):   class Education Gender Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 1631   Memory used = 511K.
NOTE: There were 1631 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT2 has 12 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 12 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout2;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 12 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT2 has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data _classout;
MPRINT(EM_QUANTILE_BINNING):   length _variable_ $32;
MPRINT(EM_QUANTILE_BINNING):   merge _classout _classout2 (rename=(LEVEL=_split_value_));
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   _variable_ = NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 12 observations read from the data set WORK._CLASSOUT.
NOTE: There were 12 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT has 12 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 12 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 12 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 89 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 89 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   length _norm_level_ $200 _split_value_ $200;
MPRINT(EM_QUANTILE_BINNING):   merge EMWS8.BINNING_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   LEVEL = trim(left(LEVEL));
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = trim(left(_split_value_));
MPRINT(EM_QUANTILE_BINNING):   _norm_level_ = trim(left(_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   drop NAME FREQUENCY TYPE CRAW NRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      478:19   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      478:9   
NOTE: There were 89 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 12 observations read from the data set WORK._CLASSOUT.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 101 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete _classout _classout2;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT2 (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 101 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 101 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by DISPLAY_VAR _Group_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 101 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 101 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete sortedmapping tempsplitvals tempmissvalues ;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.SORTEDMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 4 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE LEVEL in ('BINARY', 'NOMINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 4 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc dmdb data=EMWS8.Part_TRAIN classout=tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   class Dependents Education Gender Marital_Status ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Records processed = 1631   Memory used = 511K.
NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.TEMPCLASSOUT has 14 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL='MISSING' then level='Missing';
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 14 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPCLASSOUT has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=tempclassout nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by NAME descending FREQUENCY LEVEL;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 14 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPCLASSOUT has 14 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds(keep=NAME NOBS);
MPRINT(EM_CLASSVARS_GROUP):   retain NOBS;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if first.NAME then NOBS = frequency;
MPRINT(EM_CLASSVARS_GROUP):   else NOBS=NOBS+frequency;
MPRINT(EM_CLASSVARS_GROUP):   if last.name then do;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 14 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPDS has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds;
MPRINT(EM_CLASSVARS_GROUP):   merge tempclassout tempds;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if ((LEVEL ne '') AND (LEVEL ne "."));
MPRINT(EM_CLASSVARS_GROUP):   PCT = 100 * (FREQUENCY/NOBS);
MPRINT(EM_CLASSVARS_GROUP):   if PCT < 0.5 then flag=1;
MPRINT(EM_CLASSVARS_GROUP):   else flag=0;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 14 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 4 observations read from the data set WORK.TEMPDS.
NOTE: The data set WORK.TEMPDS has 14 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempmissvalues;
MPRINT(EM_CLASSVARS_GROUP):   length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Dependents";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Education";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Gender";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Marital_Status";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempsplitvals;
MPRINT(EM_CLASSVARS_GROUP):   length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   if ((level ne '') AND (level ne '.'));
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Dependents" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "1" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "0" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Education" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "GRADUATION" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "2N CYCLE" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "MASTER" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "BASIC" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "PHD" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Gender" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "F" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "M" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Marital_Status" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "MARRIED" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "TOGETHER" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "SINGLE" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "DIVORCED" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "WIDOW" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   _VARIABLE_ = NAME;
MPRINT(EM_CLASSVARS_GROUP):   newgroup = .;
MPRINT(EM_CLASSVARS_GROUP):   rename NAME = DISPLAY_VAR LEVEL = _SPLIT_VALUE_;
MPRINT(EM_CLASSVARS_GROUP):   keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Variable _Split_value_ is uninitialized.
NOTE: There were 14 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 4 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sql;
MPRINT(EM_CLASSVARS_GROUP):   reset noprint;
MPRINT(EM_CLASSVARS_GROUP):   select count(*) into :nobs from EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 101 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 101 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = tempsplitvals nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_Value_ _group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 18 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 18 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   merge EMWS8.BINNING_SPLITVALS tempsplitvals ;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_ ;
MPRINT(EM_CLASSVARS_GROUP):   if display_var eq "" then delete;
MPRINT(EM_CLASSVARS_GROUP):   if _norm_level_ eq "" then _norm_level_ = _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 101 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 18 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 107 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 107 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_CLASSVARS_GROUP):   delete tempsplitvals tempds tempclassout tempvariableset tempvars tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPDS (memtype=DATA).
NOTE: Deleting WORK.TEMPCLASSOUT (memtype=DATA).
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_CLASSVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_ORDVARS_GROUP):   by NAME;
MPRINT(EM_ORDVARS_GROUP):   where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='ORDINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_ORDVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_ORDVARS_GROUP):   delete tempsplitvals varvals tempvariableset tempvars ;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: The file WORK.TEMPSPLITVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.VARVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
MPRINT(EM_ORDVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc print data=EMWS8.BINNING_VARMAPPINGS label;
MPRINT(TRAIN):   var _VARIABLE_ _GRP_VARIABLE_ ;
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.BINNING_SPLITVALS out=tempsplitvals nodupkey;
MPRINT(TRAIN):   by _VARIABLE_;
MPRINT(TRAIN):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: 85 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 22 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   length _proc_var_ $32;
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "AGE" then _proc_var_ = "BIN_Age";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "AGE_EXMPL2" then _proc_var_ = "BIN_Age_Exmpl2";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "CATPURCHASE" then _proc_var_ = "BIN_CatPurchase";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "CLOTHES" then _proc_var_ = "BIN_Clothes";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "FRQ" then _proc_var_ = "BIN_Frq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "HIGHEREDUCATION" then _proc_var_ = "BIN_HigherEducation";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "HOUSEKEEPING" then _proc_var_ = "BIN_HouseKeeping";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "INCOME" then _proc_var_ = "BIN_Income";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "KITCHEN" then _proc_var_ = "BIN_Kitchen";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNT" then _proc_var_ = "BIN_Mnt";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MONTHSASCUSTOMER" then _proc_var_ = "BIN_MonthsAsCustomer";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NETPURCHASE" then _proc_var_ = "BIN_NetPurchase";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RMNTFRQ" then _proc_var_ = "BIN_RMntFrq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RMNTFRQ_EXMPL2" then _proc_var_ = "BIN_RMntFrq_Exmpl2";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RCN" then _proc_var_ = "BIN_Rcn";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RECOMENDATION" then _proc_var_ = "BIN_Recomendation";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "SMALLAPPLIANCES" then _proc_var_ = "BIN_SmallAppliances";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "TOYS" then _proc_var_ = "BIN_Toys";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "DEPENDENTS" then _proc_var_ = "Dependents";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "EDUCATION" then _proc_var_ = "Education";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "GENDER" then _proc_var_ = "Gender";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MARITAL_STATUS" then _proc_var_ = "Marital_Status";
MPRINT(TRAIN):   if missing(_proc_var_) then _proc_var_=_variable_;
MPRINT(TRAIN):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete sortedbin tempsplitvals;
MPRINT(TRAIN):   run;

NOTE: The file WORK.SORTEDBIN (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_FINE_DETAIL):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_FINE_DETAIL):   / missing out=temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 1631 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETB has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TEMPTARGETB (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 25 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 25 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data temptrain ;
MPRINT(EM_SUMMARIZE_TABLE):   set EMWS8.BINNING_BINDATA;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 1631 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTRAIN has 1631 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_PRENORMALIZECLASSVARS.SOURCE.
65987     +%macro em_PreNormalizeClassVars(incmeta=, outcmeta=);
65989     +   data &outcmeta(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
65990     +      length INDEXVAR $32; retain _index 0;
65991     +      set &incmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
65992     +      if strip(LEVEL) eq 'INTERVAL' then delete;
65993     +      else do;
65994     +         _index+1;
65995     +         INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
65996     +      end;
65997     +   run;
65998     +%mend em_PreNormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_NORMALIZECLASSVARS.SOURCE.
65999     +%macro em_NormalizeClassVars(indata=,
66000     +                          cmeta=,
66001     +                          encodedTarget=N,
66002     +                          target=,
66003     +                          targetEvent=,
66004     +                          targetNonEvent=,
66005     +                          outdata=);
66006     + %let dsid = %sysfunc(open(&cmeta));
66007     + %let vn_name =%sysfunc(varnum(&dsid, NAME));
66008     + %let vn_indexvar =%sysfunc(varnum(&dsid, INDEXVAR));
66009     + %let vn_format =%sysfunc(varnum(&dsid, FORMAT));
66010     + %let vn_type =%sysfunc(varnum(&dsid, TYPE));
66012     + data &outdata/view=&outdata;
66013     +      length _normedvar32 $32.;
66014     +      set &indata( rename = (
66015     +      %let k = 1;
66016     +      %do %while(^%sysfunc(fetch(&dsid)));
66017     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
66018     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
66019     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
66020     +          &_name = &_indexvar
66021     +          %let k = %eval(&k+1);
66022     +      %end;
66023     +      ));
66024     +      drop  _normedvar32;
66026     +      %let rc=%sysfunc(rewind(&dsid));
66027     +      %let k = 1;
66028     +      %do %while(^%sysfunc(fetch(&dsid)));
66029     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
66030     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
66031     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
66032     +          %let _type     = %sysfunc(getvarc(&dsid, &vn_type));
66033     +          %if &_format ne %then %do;
66034     +              _normedvar32 = put(&_indexvar, &_format);
66035     +          %end;
66036     +          %else %do;
66037     +              %if &_type = N %then %do;
66038     +                  _normedvar32 = put(&_indexvar, Best12.);
66039     +              %end;
66040     +              %else %do;
66041     +                  _normedvar32 = put(&_indexvar, $32.);
66042     +              %end;
66043     +          %end;
66044     +          %DMNORMIP(_normedvar32);
66045     +          &_name = _normedvar32;
66046     +          drop &_indexvar;
66047     +          %let k = %eval(&k+1);
66048     +      %end;
66049     +      %let dsid = %sysfunc(close(&dsid));
66051     +      %if &encodedTarget = Y %then %do;
66052     +          %let qtargetEvent = %sysfunc(quote(&targetEvent));
66053     +          %let qtargetNonEvent = %sysfunc(quote(&targetNonEvent));
66054     +          if upcase(strip(&target)) = &qtargetEvent then _EncodedTarget_ =1;
66055     +          else if upcase(strip(&target)) = &qtargetNonEvent then _EncodedTarget_ = 0;
66056     +      %end;
66057     + run;
66059     +%mend em_NormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=tempmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAP has 22 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _cmeta;
MPRINT(EM_SUMMARIZE_TABLE):   merge tempvarset tempmap(in=_a rename=(_variable_=name ));
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   if ((_a) or (role="TARGET"));
MPRINT(EM_SUMMARIZE_TABLE):   if role="INPUT" then name=_proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if role="TARGET" then role="INPUT";
MPRINT(EM_SUMMARIZE_TABLE):   level = procLevel;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(name, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      110:9   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      115:4   
NOTE: There were 25 observations read from the data set WORK.TEMPVARSET.
NOTE: There were 22 observations read from the data set WORK.TEMPMAP.
NOTE: The data set WORK._CMETA has 23 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRENORMALIZECLASSVARS):   data _cmetatmp(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
MPRINT(EM_PRENORMALIZECLASSVARS):   length INDEXVAR $32;
MPRINT(EM_PRENORMALIZECLASSVARS):   retain _index 0;
MPRINT(EM_PRENORMALIZECLASSVARS):   set _cmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRENORMALIZECLASSVARS):   if strip(LEVEL) eq 'INTERVAL' then delete;
MPRINT(EM_PRENORMALIZECLASSVARS):   else do;
MPRINT(EM_PRENORMALIZECLASSVARS):   _index+1;
MPRINT(EM_PRENORMALIZECLASSVARS):   INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
MPRINT(EM_PRENORMALIZECLASSVARS):   end;
MPRINT(EM_PRENORMALIZECLASSVARS):   run;

NOTE: There were 23 observations read from the data set WORK._CMETA.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK._CMETATMP has 23 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_NORMALIZECLASSVARS):   data _tmp_train/view=_tmp_train;
MPRINT(EM_NORMALIZECLASSVARS):   length _normedvar32 $32.;
MPRINT(EM_NORMALIZECLASSVARS):   set work.temptrain( rename = ( BIN_Age = _INDEXVAR1 BIN_Age_Exmpl2 = _INDEXVAR2 BIN_CatPurchase = _INDEXVAR3 BIN_Clothes = _INDEXVAR4 DepVar = _INDEXVAR5 Dependents = _INDEXVAR6 Education = _INDEXVAR7 BIN_Frq = _INDEXVAR8 
Gender = _INDEXVAR9 BIN_HigherEducation = _INDEXVAR10 BIN_HouseKeeping = _INDEXVAR11 BIN_Income = _INDEXVAR12 BIN_Kitchen = _INDEXVAR13 Marital_Status = _INDEXVAR14 BIN_Mnt = _INDEXVAR15 BIN_MonthsAsCustomer = _INDEXVAR16 BIN_NetPurchase = _INDEXVAR17 
BIN_RMntFrq = _INDEXVAR18 BIN_RMntFrq_Exmpl2 = _INDEXVAR19 BIN_Rcn = _INDEXVAR20 BIN_Recomendation = _INDEXVAR21 BIN_SmallAppliances = _INDEXVAR22 BIN_Toys = _INDEXVAR23 ));
MPRINT(EM_NORMALIZECLASSVARS):   drop _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR1, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Age = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR1;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR2, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Age_Exmpl2 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR2;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR3, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_CatPurchase = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR3;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR4, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Clothes = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR4;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR5, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   DepVar = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR5;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR6, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Dependents = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR6;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR7, $10.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Education = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR7;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR8, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Frq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR8;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR9, $1.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Gender = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR9;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR10, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_HigherEducation = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR10;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR11, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_HouseKeeping = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR11;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR12, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Income = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR12;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR13, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Kitchen = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR13;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR14, $12.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Marital_Status = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR14;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR15, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Mnt = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR15;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR16, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MonthsAsCustomer = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR16;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR17, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NetPurchase = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR17;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR18, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RMntFrq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR18;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR19, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RMntFrq_Exmpl2 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR19;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR20, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Rcn = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR20;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR21, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Recomendation = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR21;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR22, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_SmallAppliances = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR22;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR23, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Toys = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR23;
MPRINT(EM_NORMALIZECLASSVARS):   run;

NOTE: DATA STEP view saved on file WORK._TMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=sortedmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.SORTEDMAP has 22 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output CrossTabFreqs=crosstabfreq ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("proc freq data=_tmp_train order=formatted addnames;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("tables ("||_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  ") * DepVar/ missing;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output close;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   proc freq data=_tmp_train order=formatted addnames;
MPRINT(EM_SUMMARIZE_TABLE):   ) * DepVar/ missing;
MPRINT(EM_SUMMARIZE_TABLE):   run;
MPRINT(EM_SUMMARIZE_TABLE):   ods output close;
NOTE: There were 22 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   CrossTabFreqs ;
2         + proc freq data=_tmp_train order=formatted addnames;
3         + tables (BIN_Age
4         + BIN_Age_Exmpl2
5         + BIN_CatPurchase
6         + BIN_Clothes
7         + BIN_Frq
8         + BIN_HigherEducation
9         + BIN_HouseKeeping
10        + BIN_Income
11        + BIN_Kitchen
12        + BIN_Mnt
13        + BIN_MonthsAsCustomer
14        + BIN_NetPurchase
15        + BIN_RMntFrq
16        + BIN_RMntFrq_Exmpl2
17        + BIN_Rcn
18        + BIN_Recomendation
19        + BIN_SmallAppliances
20        + BIN_Toys
21        + Dependents
22        + Education
23        + Gender
24        + Marital_Status
25        + ) * DepVar/ missing;
26        + run;

NOTE: View WORK._TMP_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.07 seconds
      
NOTE: There were 1631 observations read from the data set WORK.TEMPTRAIN.
NOTE: The data set WORK.CROSSTABFREQ has 318 observations and 33 variables.
NOTE: There were 1631 observations read from the data set WORK._TMP_TRAIN.
NOTE: The PROCEDURE FREQ printed pages 27-48.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.25 seconds
      cpu time            0.09 seconds
      

27        + ods output close;
MPRINT(EM_SUMMARIZE_TABLE):   close
MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("data crosstabs;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  length _variable_ _split_value_  $200 ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  set crosstabfreq(where=(_type_='11'));");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _variable_= RowVariable;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _split_value_="||_proc_var_||";");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("end;");
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  "keep _variable_ _split_value_ DepVar Frequency Percent display_var;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabfreq(where=(_type_='11'));
MPRINT(EM_SUMMARIZE_TABLE):   _variable_= RowVariable;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Age' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Age ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Age_Exmpl2' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Age_Exmpl2 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_CatPurchase' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_CatPurchase ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Clothes' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Clothes ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Frq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Frq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_HigherEducation' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_HigherEducation ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_HouseKeeping' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_HouseKeeping ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Income' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Income ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Kitchen' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Kitchen ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Mnt' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Mnt ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MonthsAsCustomer ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NetPurchase' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NetPurchase ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RMntFrq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RMntFrq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RMntFrq_Exmpl2' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RMntFrq_Exmpl2 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Rcn' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Rcn ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Recomendation' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Recomendation ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_SmallAppliances' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_SmallAppliances ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Toys' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Toys ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Dependents' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Dependents ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Education' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Education ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Gender' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Gender ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Marital_Status' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Marital_Status ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   keep _variable_ _split_value_ DepVar Frequency Percent display_var;
MPRINT(EM_SUMMARIZE_TABLE):   run;
NOTE: There were 22 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data crosstabs;
2         +   length _variable_ _split_value_  $200 ;
MPRINT(EM_SUMMARIZE_TABLE):  200
3         +   set crosstabfreq(where=(_type_='11'));
4         +   _variable_= RowVariable;
5         + if strip(RowVariable) = 'BIN_Age' then do;
6         +   _split_value_=BIN_Age                         ;
7         + end;
8         + if strip(RowVariable) = 'BIN_Age_Exmpl2' then do;
9         +   _split_value_=BIN_Age_Exmpl2                  ;
10        + end;
11        + if strip(RowVariable) = 'BIN_CatPurchase' then do;
12        +   _split_value_=BIN_CatPurchase                 ;
13        + end;
14        + if strip(RowVariable) = 'BIN_Clothes' then do;
15        +   _split_value_=BIN_Clothes                     ;
16        + end;
17        + if strip(RowVariable) = 'BIN_Frq' then do;
18        +   _split_value_=BIN_Frq                         ;
19        + end;
20        + if strip(RowVariable) = 'BIN_HigherEducation' then do;
21        +   _split_value_=BIN_HigherEducation             ;
22        + end;
23        + if strip(RowVariable) = 'BIN_HouseKeeping' then do;
24        +   _split_value_=BIN_HouseKeeping                ;
25        + end;
26        + if strip(RowVariable) = 'BIN_Income' then do;
27        +   _split_value_=BIN_Income                      ;
28        + end;
29        + if strip(RowVariable) = 'BIN_Kitchen' then do;
30        +   _split_value_=BIN_Kitchen                     ;
31        + end;
32        + if strip(RowVariable) = 'BIN_Mnt' then do;
33        +   _split_value_=BIN_Mnt                         ;
34        + end;
35        + if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
36        +   _split_value_=BIN_MonthsAsCustomer            ;
37        + end;
38        + if strip(RowVariable) = 'BIN_NetPurchase' then do;
39        +   _split_value_=BIN_NetPurchase                 ;
40        + end;
41        + if strip(RowVariable) = 'BIN_RMntFrq' then do;
42        +   _split_value_=BIN_RMntFrq                     ;
43        + end;
44        + if strip(RowVariable) = 'BIN_RMntFrq_Exmpl2' then do;
45        +   _split_value_=BIN_RMntFrq_Exmpl2              ;
46        + end;
47        + if strip(RowVariable) = 'BIN_Rcn' then do;
48        +   _split_value_=BIN_Rcn                         ;
49        + end;
50        + if strip(RowVariable) = 'BIN_Recomendation' then do;
51        +   _split_value_=BIN_Recomendation               ;
52        + end;
53        + if strip(RowVariable) = 'BIN_SmallAppliances' then do;
54        +   _split_value_=BIN_SmallAppliances             ;
55        + end;
56        + if strip(RowVariable) = 'BIN_Toys' then do;
57        +   _split_value_=BIN_Toys                        ;
58        + end;
59        + if strip(RowVariable) = 'Dependents' then do;
60        +   _split_value_=Dependents                      ;
61        + end;
62        + if strip(RowVariable) = 'Education' then do;
63        +   _split_value_=Education                       ;
64        + end;
65        + if strip(RowVariable) = 'Gender' then do;
66        +   _split_value_=Gender                          ;
67        + end;
68        + if strip(RowVariable) = 'Marital_Status' then do;
69        +   _split_value_=Marital_Status                  ;
70        + end;
71        + keep _variable_ _split_value_ DepVar Frequency Percent display_var;
72        + run;

WARNING: The variable display_var in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 168 observations read from the data set WORK.CROSSTABFREQ.
      WHERE _type_='11';
NOTE: The data set WORK.CROSSTABS has 168 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 168 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 168 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length display_var $32;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 168 observations read from the data set WORK.CROSSTABS.
NOTE: There were 22 observations read from the data set WORK.SORTEDMAP.
NOTE: The data set WORK.CROSSTABS has 168 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by display_var _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 168 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 168 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 25 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 25 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
MPRINT(EM_SUMMARIZE_TABLE):   by display_var;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(_variable_, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   _temp =
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_var by input data sets. This may cause unexpected results.
NOTE: There were 168 observations read from the data set WORK.CROSSTABS.
NOTE: There were 25 observations read from the data set WORK.TEMPVARSET.
NOTE: The data set WORK.CROSSTABS has 171 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 171 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 171 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate 8 type $1 valfmt $20 ;
MPRINT(EM_SUMMARIZE_TABLE):   retain eventCount noneventCount ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   if first._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total=0;
MPRINT(EM_SUMMARIZE_TABLE):   eventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   noneventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if upcase(strip(_temp))="1" then eventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   else noneventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   if last._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total = eventCount + noneventCount;
MPRINT(EM_SUMMARIZE_TABLE):   if total ne 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = eventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = nonEventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   output;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   valfmt = format;
MPRINT(EM_SUMMARIZE_TABLE):   drop _temp Frequency percent;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 553:20   1 at 565:24   1 at 570:30   
NOTE: There were 171 observations read from the data set WORK.CROSSTABS.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 85 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):  ;
MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   length display_var $32 newgroup numsplitval 8;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   display_var = _variable_;
MPRINT(EM_FINE_DETAIL):   index = kindex(display_var, "BIN_");
MPRINT(EM_FINE_DETAIL):   if index gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 5);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   index2 = kindex(display_var, "SV_");
MPRINT(EM_FINE_DETAIL):   if index2 gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 4);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
MPRINT(EM_FINE_DETAIL):   _index_ = _N_;
MPRINT(EM_FINE_DETAIL):   newgroup = .;
MPRINT(EM_FINE_DETAIL):   drop index index2 ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Variable numsplitval is uninitialized.
NOTE: There were 85 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 85 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 85 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 85 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_FINE_DETAIL):   _norm_level_ = upcase(_norm_level_);
MPRINT(EM_FINE_DETAIL):   if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
MPRINT(EM_FINE_DETAIL):   * drop _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.TMPSPLITVALS has 107 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=tmpsplitvals out=sortedsplit;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 107 observations read from the data set WORK.TMPSPLITVALS.
NOTE: The data set WORK.SORTEDSPLIT has 107 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets library=work nolist;
MPRINT(EM_FINE_DETAIL):   delete tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TMPSPLITVALS (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedbin;
MPRINT(EM_FINE_DETAIL):   by BIN_NAME BIN;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.SORTEDBIN has 71 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   merge EMWS8.BINNING_FINEDETAILDATA(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   if _a then do;
MPRINT(EM_FINE_DETAIL):   binFlag = 1;
MPRINT(EM_FINE_DETAIL):   VALUE=EM_BIN_LABEL;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   else do;
MPRINT(EM_FINE_DETAIL):   binFlag = 0;
MPRINT(EM_FINE_DETAIL):   *VALUE=strip(display_var)!!"="!!strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   VALUE=strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((eventCount=.) or (nonEventCount=.)) then do;
MPRINT(EM_FINE_DETAIL):   eventCount=0;
MPRINT(EM_FINE_DETAIL):   nonEventCount=0;
MPRINT(EM_FINE_DETAIL):   total = 0;
MPRINT(EM_FINE_DETAIL):   eventRate= 0;
MPRINT(EM_FINE_DETAIL):   nonEventRate = 0;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   eventCount = round(eventCount, .001);
MPRINT(EM_FINE_DETAIL):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_FINE_DETAIL):   total= round(total, .001);
MPRINT(EM_FINE_DETAIL):   eventRate = round(eventRate, .001);
MPRINT(EM_FINE_DETAIL):   nonEventRate = round(nonEventRate, .001);
MPRINT(EM_FINE_DETAIL):   if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then numsplitval = _split_value_;
MPRINT(EM_FINE_DETAIL):   else if ((type='N') AND (valfmt ne "")) then numsplitval = _order_;
MPRINT(EM_FINE_DETAIL):   else numsplitval=.;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
MPRINT(EM_FINE_DETAIL):   if _a and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   if _c and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   drop NAME EM_BIN_LABEL valfmt;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      439:15   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 85 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: There were 107 observations read from the data set WORK.SORTEDSPLIT.
NOTE: There were 71 observations read from the data set WORK.SORTEDBIN.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 107 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Age" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Age_Exmpl2" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "CatPurchase" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Clothes" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Dependents" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Education" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Frq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Gender" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "HigherEducation" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "HouseKeeping" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Income" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Kitchen" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Marital_Status" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Mnt" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MonthsAsCustomer" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NetPurchase" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RMntFrq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RMntFrq_Exmpl2" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Rcn" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Recomendation" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "SmallAppliances" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Toys" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then delete;
MPRINT(EM_FINE_DETAIL):   * if binFlag=1 and UB=LB then delete;
MPRINT(EM_FINE_DETAIL):   * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 107 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by DISPLAY_VAR _index_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 107 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete sortedsplit sortedbin ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.SORTEDSPLIT (memtype=DATA).
NOTE: Deleting WORK.SORTEDBIN (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CREATE_GROUPING):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_CREATE_GROUPING):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_CREATE_GROUPING):   / missing out=temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 1631 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETC has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets lib=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPTARGETC (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc means data=EMWS8.BINNING_FINEDETAILDATA noprint;
MPRINT(EM_CREATE_GROUPING):   var eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   class _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set WORK.SUMM has 129 observations and 6 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=summ(drop=_type_ _freq_);
MPRINT(EM_CREATE_GROUPING):   by _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 129 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 129 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep=_variable_ eventCount nonEventCount groupresprate) tempcoarse(keep=_variable_ _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
MPRINT(EM_CREATE_GROUPING):   set summ;
MPRINT(EM_CREATE_GROUPING):   format groupresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   format groupnonresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   by _variable_ ;
MPRINT(EM_CREATE_GROUPING):   if _group_=. then do;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   respper = eventCount / 114;
MPRINT(EM_CREATE_GROUPING):   nrespper = nonEventCount / 1517;
MPRINT(EM_CREATE_GROUPING):   if ((nonEventCount = 0) AND (eventCount = 0)) then do;
MPRINT(EM_CREATE_GROUPING):   groupresprate=0;
MPRINT(EM_CREATE_GROUPING):   groupNonresprate = 0;
MPRINT(EM_CREATE_GROUPING):   eventRate = 0;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   groupresprate = eventCount / (eventCount + nonEventCount) * 100;
MPRINT(EM_CREATE_GROUPING):   groupNonRespRate = 100 - groupRespRate;
MPRINT(EM_CREATE_GROUPING):   eventRate = eventCount / 114 * 100;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = nonEventCount / 1517 * 100;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   output gini tempcoarse;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 129 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.GINI has 107 observations and 4 variables.
NOTE: The data set WORK.TEMPCOARSE has 107 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=gini;
MPRINT(EM_CREATE_GROUPING):   by _variable_ descending groupresprate;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 107 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 107 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep= _variable_ _gini_);
MPRINT(EM_CREATE_GROUPING):   retain between within cumresp cumnresp;
MPRINT(EM_CREATE_GROUPING):   set gini(keep=_variable_ eventCount nonEventCount);
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   if first._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   between = 0;
MPRINT(EM_CREATE_GROUPING):   within = 0;
MPRINT(EM_CREATE_GROUPING):   cumresp = 0;
MPRINT(EM_CREATE_GROUPING):   cumnresp = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   between + 2 * cumnresp * eventCount;
MPRINT(EM_CREATE_GROUPING):   within + nonEventCount * eventCount;
MPRINT(EM_CREATE_GROUPING):   cumresp + eventCount;
MPRINT(EM_CREATE_GROUPING):   cumnresp + nonEventCount;
MPRINT(EM_CREATE_GROUPING):   if last._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   if ^(cumnresp=0 or cumresp=0) then do;
MPRINT(EM_CREATE_GROUPING):   _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
MPRINT(EM_CREATE_GROUPING):   output;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 107 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 22 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(EM_CREATE_GROUPING):   rename _variable_ = display_var _proc_var_ = _variable_;
MPRINT(EM_CREATE_GROUPING):   keep _variable_ _proc_var_ label;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 22 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPDISPLAYVAR has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 22 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: The data set WORK.TEMPDISPLAYVAR has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data EMWS8.BINNING_COARSE;
MPRINT(EM_CREATE_GROUPING):   length display_Var $32 label _label_ $200 role $10 _group_ 8;
MPRINT(EM_CREATE_GROUPING):   merge tempdisplayvar tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   label display_var = "Variable" eventRate = "Event Rate" nonEventRate = "Non-Event Rate" _group_ = "Group" role = "Role" _gini_ = "Gini Coefficient" eventcount = "Event Count" noneventcount = "Non-Event Count" groupresprate = 
"Group Event Rate" groupnonresprate = "Group Non-Event Rate" ;
MPRINT(EM_CREATE_GROUPING):   eventCount = round(eventCount, .001);
MPRINT(EM_CREATE_GROUPING):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_CREATE_GROUPING):   groupRespRate = round(groupRespRate, .001);
MPRINT(EM_CREATE_GROUPING):   drop _variable_ index index2 respper nrespper;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Variable _label_ is uninitialized.
NOTE: Variable role is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _variable_ by input data sets. This may cause unexpected results.
WARNING: The variable index in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable index2 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 22 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: There were 107 observations read from the data set WORK.TEMPCOARSE.
NOTE: There were 22 observations read from the data set WORK.GINI.
NOTE: The data set EMWS8.BINNING_COARSE has 107 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets library=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPCOARSE (memtype=DATA).
NOTE: Deleting WORK.GINI (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas";
MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   FILE Y;
MPRINT(EM_GENERATE_LABELVALUES):   put " length _LABEL_ $200;";
MPRINT(EM_GENERATE_LABELVALUES):   put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: The file Y is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=03 de Março de 2016 08H28m

NOTE: 2 records were written to the file Y.
      The minimum record length was 21.
      The maximum record length was 83.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_SPLITVALS out=work.sortedsplitval;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var _split_Value_;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.SORTEDSPLITVAL has 107 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var bin;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 71 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   if display_var eq '' then delete;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 107 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 85 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   keep _variable_ display_var missgrp;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 107 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 71 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=temp out=class;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_ LB;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 85 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 85 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   file Y MOD;
MPRINT(EM_GENERATE_LABELVALUES):   length string $200 flag 8;
MPRINT(EM_GENERATE_LABELVALUES):   retain string flag;
MPRINT(EM_GENERATE_LABELVALUES):   set class end=eof;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_;
MPRINT(EM_GENERATE_LABELVALUES):   index = kindex(_variable_, "BIN_");
MPRINT(EM_GENERATE_LABELVALUES):   if index gt 0 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then do;';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   if LB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 1;
MPRINT(EM_GENERATE_LABELVALUES):   *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._Group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   if UB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!'< '!!strip(UB)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag=1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string= " UB="!!strip(UB)!!";";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   put "end;";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string = "_LABEL_='"!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag ne 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   tempstring = strip(string)!!', '!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   length = length(tempstring);
MPRINT(EM_GENERATE_LABELVALUES):   if length < 195 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = tempstring;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)||",...";
MPRINT(EM_GENERATE_LABELVALUES):   flag=1;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      243:30   295:37   355:23   
NOTE: The file Y is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=108,
      Last Modified=10 de Março de 2016 06H10m,
      Create Time=03 de Março de 2016 08H28m

NOTE: 397 records were written to the file Y.
      The minimum record length was 1.
      The maximum record length was 58.
NOTE: There were 85 observations read from the data set WORK.CLASS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
NOTE: %INCLUDE (level 1) file Y is file E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas.
66060     + length _LABEL_ $200;
MPRINT(EM_GENERATE_LABELVALUES):   length _LABEL_ $200;
66061     + label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";
MPRINT(EM_GENERATE_LABELVALUES):   label _LABEL_= "Group Values";
66062     +
66063     +if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
66064     +_LABEL_='Age< 36';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Age< 36';
66065     +UB=36;
MPRINT(EM_GENERATE_LABELVALUES):   UB=36;
66066     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66067     +else
66068     +if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
66069     +_LABEL_='36<= Age< 50';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='36<= Age< 50';
66070     +UB=50;
MPRINT(EM_GENERATE_LABELVALUES):   UB=50;
66071     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66072     +else
66073     +if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
66074     +_LABEL_='50<= Age< 64';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='50<= Age< 64';
66075     +UB=64;
MPRINT(EM_GENERATE_LABELVALUES):   UB=64;
66076     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66077     +else
66078     +if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
66079     +_LABEL_='64<= Age';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='64<= Age';
66080     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66081     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66082     +
66083     +if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 2 then do;
66084     +_LABEL_='Age_Exmpl2< 36';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Age_Exmpl2< 36';
66085     +UB=36;
MPRINT(EM_GENERATE_LABELVALUES):   UB=36;
66086     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66087     +else
66088     +if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 3 then do;
66089     +_LABEL_='36<= Age_Exmpl2< 50';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='36<= Age_Exmpl2< 50';
66090     +UB=50;
MPRINT(EM_GENERATE_LABELVALUES):   UB=50;
66091     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66092     +else
66093     +if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 4 then do;
66094     +_LABEL_='50<= Age_Exmpl2< 64';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='50<= Age_Exmpl2< 64';
66095     +UB=64;
MPRINT(EM_GENERATE_LABELVALUES):   UB=64;
66096     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66097     +else
66098     +if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age_Exmpl2' and _GROUP_ = 5 then do;
66099     +_LABEL_='64<= Age_Exmpl2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='64<= Age_Exmpl2';
66100     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66101     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66102     +
66103     +if DISPLAY_VAR='CatPurchase' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='CatPurchase' and _GROUP_ = 2 then do;
66104     +_LABEL_='CatPurchase< 43';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='CatPurchase< 43';
66105     +UB=43;
MPRINT(EM_GENERATE_LABELVALUES):   UB=43;
66106     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66107     +else
66108     +if DISPLAY_VAR='CatPurchase' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='CatPurchase' and _GROUP_ = 3 then do;
66109     +_LABEL_='43<= CatPurchase< 55';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='43<= CatPurchase< 55';
66110     +UB=55;
MPRINT(EM_GENERATE_LABELVALUES):   UB=55;
66111     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66112     +else
66113     +if DISPLAY_VAR='CatPurchase' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='CatPurchase' and _GROUP_ = 4 then do;
66114     +_LABEL_='55<= CatPurchase< 73';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='55<= CatPurchase< 73';
66115     +UB=73;
MPRINT(EM_GENERATE_LABELVALUES):   UB=73;
66116     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66117     +else
66118     +if DISPLAY_VAR='CatPurchase' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='CatPurchase' and _GROUP_ = 5 then do;
66119     +_LABEL_='73<= CatPurchase';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='73<= CatPurchase';
66120     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66121     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66122     +
66123     +if DISPLAY_VAR='Clothes' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Clothes' and _GROUP_ = 2 then do;
66124     +_LABEL_='Clothes< 35';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Clothes< 35';
66125     +UB=35;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35;
66126     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66127     +else
66128     +if DISPLAY_VAR='Clothes' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Clothes' and _GROUP_ = 3 then do;
66129     +_LABEL_='35<= Clothes< 53';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35<= Clothes< 53';
66130     +UB=53;
MPRINT(EM_GENERATE_LABELVALUES):   UB=53;
66131     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66132     +else
66133     +if DISPLAY_VAR='Clothes' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Clothes' and _GROUP_ = 4 then do;
66134     +_LABEL_='53<= Clothes< 70';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='53<= Clothes< 70';
66135     +UB=70;
MPRINT(EM_GENERATE_LABELVALUES):   UB=70;
66136     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66137     +else
66138     +if DISPLAY_VAR='Clothes' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Clothes' and _GROUP_ = 5 then do;
66139     +_LABEL_='70<= Clothes';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='70<= Clothes';
66140     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66141     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66142     +
66143     +if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
66144     +_LABEL_='Frq< 11';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Frq< 11';
66145     +UB=11;
MPRINT(EM_GENERATE_LABELVALUES):   UB=11;
66146     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66147     +else
66148     +if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
66149     +_LABEL_='11<= Frq< 18';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='11<= Frq< 18';
66150     +UB=18;
MPRINT(EM_GENERATE_LABELVALUES):   UB=18;
66151     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66152     +else
66153     +if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
66154     +_LABEL_='18<= Frq< 28';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='18<= Frq< 28';
66155     +UB=28;
MPRINT(EM_GENERATE_LABELVALUES):   UB=28;
66156     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66157     +else
66158     +if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
66159     +_LABEL_='28<= Frq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='28<= Frq';
66160     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66161     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66162     +
66163     +if DISPLAY_VAR='HigherEducation' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='HigherEducation' and _GROUP_ = 2 then do;
66164     +_LABEL_='HigherEducation< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='HigherEducation< 0';
66165     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
66166     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66167     +else
66168     +if DISPLAY_VAR='HigherEducation' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HigherEducation' and _GROUP_ = 3 then do;
66169     +_LABEL_='0<= HigherEducation< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= HigherEducation< 1';
66170     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
66171     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66172     +else
66173     +if DISPLAY_VAR='HigherEducation' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HigherEducation' and _GROUP_ = 4 then do;
66174     +_LABEL_='1<= HigherEducation';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= HigherEducation';
66175     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66176     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66177     +
66178     +if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 2 then do;
66179     +_LABEL_='HouseKeeping< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='HouseKeeping< 1';
66180     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
66181     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66182     +else
66183     +if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 3 then do;
66184     +_LABEL_='1<= HouseKeeping< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= HouseKeeping< 4';
66185     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
66186     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66187     +else
66188     +if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 4 then do;
66189     +_LABEL_='4<= HouseKeeping< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= HouseKeeping< 9';
66190     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
66191     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66192     +else
66193     +if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HouseKeeping' and _GROUP_ = 5 then do;
66194     +_LABEL_='9<= HouseKeeping';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= HouseKeeping';
66195     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66196     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66197     +
66198     +if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
66199     +_LABEL_='Income< 51921.45';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Income< 51921.45';
66200     +UB=51921.45;
MPRINT(EM_GENERATE_LABELVALUES):   UB=51921.45;
66201     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66202     +else
66203     +if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
66204     +_LABEL_='51921.45<= Income< 74868.15';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='51921.45<= Income< 74868.15';
66205     +UB=74868.15;
MPRINT(EM_GENERATE_LABELVALUES):   UB=74868.15;
66206     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66207     +else
66208     +if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
66209     +_LABEL_='74868.15<= Income< 97525.05';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='74868.15<= Income< 97525.05';
66210     +UB=97525.05;
MPRINT(EM_GENERATE_LABELVALUES):   UB=97525.05;
66211     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66212     +else
66213     +if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
66214     +_LABEL_='97525.05<= Income';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='97525.05<= Income';
66215     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66216     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66217     +
66218     +if DISPLAY_VAR='Kitchen' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Kitchen' and _GROUP_ = 2 then do;
66219     +_LABEL_='Kitchen< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Kitchen< 2';
66220     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
66221     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66222     +else
66223     +if DISPLAY_VAR='Kitchen' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kitchen' and _GROUP_ = 3 then do;
66224     +_LABEL_='2<= Kitchen< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= Kitchen< 4';
66225     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
66226     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66227     +else
66228     +if DISPLAY_VAR='Kitchen' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kitchen' and _GROUP_ = 4 then do;
66229     +_LABEL_='4<= Kitchen< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= Kitchen< 9';
66230     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
66231     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66232     +else
66233     +if DISPLAY_VAR='Kitchen' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kitchen' and _GROUP_ = 5 then do;
66234     +_LABEL_='9<= Kitchen';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= Kitchen';
66235     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66236     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66237     +
66238     +if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
66239     +_LABEL_='Mnt< 67.6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Mnt< 67.6';
66240     +UB=67.6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=67.6;
66241     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66242     +else
66243     +if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
66244     +_LABEL_='67.6<= Mnt< 407.68';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='67.6<= Mnt< 407.68';
66245     +UB=407.68;
MPRINT(EM_GENERATE_LABELVALUES):   UB=407.68;
66246     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66247     +else
66248     +if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
66249     +_LABEL_='407.68<= Mnt< 1127.36';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='407.68<= Mnt< 1127.36';
66250     +UB=1127.36;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1127.36;
66251     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66252     +else
66253     +if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
66254     +_LABEL_='1127.36<= Mnt';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1127.36<= Mnt';
66255     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66256     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66257     +
66258     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
66259     +_LABEL_='MonthsAsCustomer< 67';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MonthsAsCustomer< 67';
66260     +UB=67;
MPRINT(EM_GENERATE_LABELVALUES):   UB=67;
66261     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66262     +else
66263     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
66264     +_LABEL_='67<= MonthsAsCustomer< 80';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='67<= MonthsAsCustomer< 80';
66265     +UB=80;
MPRINT(EM_GENERATE_LABELVALUES):   UB=80;
66266     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66267     +else
66268     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
66269     +_LABEL_='80<= MonthsAsCustomer< 95';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='80<= MonthsAsCustomer< 95';
66270     +UB=95;
MPRINT(EM_GENERATE_LABELVALUES):   UB=95;
66271     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66272     +else
66273     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
66274     +_LABEL_='95<= MonthsAsCustomer';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='95<= MonthsAsCustomer';
66275     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66276     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66277     +
66278     +if DISPLAY_VAR='NetPurchase' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NetPurchase' and _GROUP_ = 2 then do;
66279     +_LABEL_='NetPurchase< 27';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NetPurchase< 27';
66280     +UB=27;
MPRINT(EM_GENERATE_LABELVALUES):   UB=27;
66281     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66282     +else
66283     +if DISPLAY_VAR='NetPurchase' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NetPurchase' and _GROUP_ = 3 then do;
66284     +_LABEL_='27<= NetPurchase< 45';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='27<= NetPurchase< 45';
66285     +UB=45;
MPRINT(EM_GENERATE_LABELVALUES):   UB=45;
66286     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66287     +else
66288     +if DISPLAY_VAR='NetPurchase' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NetPurchase' and _GROUP_ = 4 then do;
66289     +_LABEL_='45<= NetPurchase< 57';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='45<= NetPurchase< 57';
66290     +UB=57;
MPRINT(EM_GENERATE_LABELVALUES):   UB=57;
66291     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66292     +else
66293     +if DISPLAY_VAR='NetPurchase' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NetPurchase' and _GROUP_ = 5 then do;
66294     +_LABEL_='57<= NetPurchase';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='57<= NetPurchase';
66295     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66296     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66297     +
66298     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
66299     +_LABEL_='RMntFrq< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RMntFrq< 7';
66300     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
66301     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66302     +else
66303     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
66304     +_LABEL_='7<= RMntFrq< 23.84';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= RMntFrq< 23.84';
66305     +UB=23.84;
MPRINT(EM_GENERATE_LABELVALUES):   UB=23.84;
66306     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66307     +else
66308     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
66309     +_LABEL_='23.84<= RMntFrq< 40.38';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='23.84<= RMntFrq< 40.38';
66310     +UB=40.38;
MPRINT(EM_GENERATE_LABELVALUES):   UB=40.38;
66311     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66312     +else
66313     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
66314     +_LABEL_='40.38<= RMntFrq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='40.38<= RMntFrq';
66315     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66316     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66317     +
66318     +if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 2 then do;
66319     +_LABEL_='RMntFrq_Exmpl2< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RMntFrq_Exmpl2< 7';
66320     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
66321     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66322     +else
66323     +if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 3 then do;
66324     +_LABEL_='7<= RMntFrq_Exmpl2< 23.84';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= RMntFrq_Exmpl2< 23.84';
66325     +UB=23.84;
MPRINT(EM_GENERATE_LABELVALUES):   UB=23.84;
66326     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66327     +else
66328     +if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 4 then do;
66329     +_LABEL_='23.84<= RMntFrq_Exmpl2< 40.38';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='23.84<= RMntFrq_Exmpl2< 40.38';
66330     +UB=40.38;
MPRINT(EM_GENERATE_LABELVALUES):   UB=40.38;
66331     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66332     +else
66333     +if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq_Exmpl2' and _GROUP_ = 5 then do;
66334     +_LABEL_='40.38<= RMntFrq_Exmpl2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='40.38<= RMntFrq_Exmpl2';
66335     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66336     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66337     +
66338     +if DISPLAY_VAR='Rcn' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Rcn' and _GROUP_ = 2 then do;
66339     +_LABEL_='Rcn< 28';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Rcn< 28';
66340     +UB=28;
MPRINT(EM_GENERATE_LABELVALUES):   UB=28;
66341     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66342     +else
66343     +if DISPLAY_VAR='Rcn' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Rcn' and _GROUP_ = 3 then do;
66344     +_LABEL_='28<= Rcn< 53';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='28<= Rcn< 53';
66345     +UB=53;
MPRINT(EM_GENERATE_LABELVALUES):   UB=53;
66346     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66347     +else
66348     +if DISPLAY_VAR='Rcn' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Rcn' and _GROUP_ = 4 then do;
66349     +_LABEL_='53<= Rcn< 78';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='53<= Rcn< 78';
66350     +UB=78;
MPRINT(EM_GENERATE_LABELVALUES):   UB=78;
66351     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66352     +else
66353     +if DISPLAY_VAR='Rcn' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Rcn' and _GROUP_ = 5 then do;
66354     +_LABEL_='78<= Rcn';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='78<= Rcn';
66355     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66356     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66357     +
66358     +if DISPLAY_VAR='Recomendation' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Recomendation' and _GROUP_ = 2 then do;
66359     +_LABEL_='Recomendation< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Recomendation< 3';
66360     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
66361     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66362     +else
66363     +if DISPLAY_VAR='Recomendation' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recomendation' and _GROUP_ = 3 then do;
66364     +_LABEL_='3<= Recomendation< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= Recomendation< 4';
66365     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
66366     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66367     +else
66368     +if DISPLAY_VAR='Recomendation' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recomendation' and _GROUP_ = 4 then do;
66369     +_LABEL_='4<= Recomendation< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= Recomendation< 5';
66370     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
66371     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66372     +else
66373     +if DISPLAY_VAR='Recomendation' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recomendation' and _GROUP_ = 5 then do;
66374     +_LABEL_='5<= Recomendation';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= Recomendation';
66375     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66376     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66377     +
66378     +if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 2 then do;
66379     +_LABEL_='SmallAppliances< 19';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='SmallAppliances< 19';
66380     +UB=19;
MPRINT(EM_GENERATE_LABELVALUES):   UB=19;
66381     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66382     +else
66383     +if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 3 then do;
66384     +_LABEL_='19<= SmallAppliances< 27';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='19<= SmallAppliances< 27';
66385     +UB=27;
MPRINT(EM_GENERATE_LABELVALUES):   UB=27;
66386     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66387     +else
66388     +if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 4 then do;
66389     +_LABEL_='27<= SmallAppliances< 37';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='27<= SmallAppliances< 37';
66390     +UB=37;
MPRINT(EM_GENERATE_LABELVALUES):   UB=37;
66391     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66392     +else
66393     +if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='SmallAppliances' and _GROUP_ = 5 then do;
66394     +_LABEL_='37<= SmallAppliances';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='37<= SmallAppliances';
66395     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66396     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66397     +
66398     +if DISPLAY_VAR='Toys' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Toys' and _GROUP_ = 2 then do;
66399     +_LABEL_='Toys< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Toys< 1';
66400     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
66401     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66402     +else
66403     +if DISPLAY_VAR='Toys' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Toys' and _GROUP_ = 3 then do;
66404     +_LABEL_='1<= Toys< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Toys< 4';
66405     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
66406     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66407     +else
66408     +if DISPLAY_VAR='Toys' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Toys' and _GROUP_ = 4 then do;
66409     +_LABEL_='4<= Toys< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= Toys< 9';
66410     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
66411     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66412     +else
66413     +if DISPLAY_VAR='Toys' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Toys' and _GROUP_ = 5 then do;
66414     +_LABEL_='9<= Toys';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= Toys';
66415     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
66416     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
66417     +
66418     +if DISPLAY_VAR='Dependents' and _GROUP_ = 2 then
66419     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Dependents' and _GROUP_ = 2 then _LABEL_='1';
66420     +else
66421     +if DISPLAY_VAR='Dependents' and _GROUP_ = 3 then
66422     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Dependents' and _GROUP_ = 3 then _LABEL_='0';
66423     +
66424     +if DISPLAY_VAR='Education' and _GROUP_ = 2 then
66425     +_LABEL_='GRADUATION';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Education' and _GROUP_ = 2 then _LABEL_='GRADUATION';
66426     +else
66427     +if DISPLAY_VAR='Education' and _GROUP_ = 3 then
66428     +_LABEL_='2N CYCLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 3 then _LABEL_='2N CYCLE';
66429     +else
66430     +if DISPLAY_VAR='Education' and _GROUP_ = 4 then
66431     +_LABEL_='MASTER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 4 then _LABEL_='MASTER';
66432     +else
66433     +if DISPLAY_VAR='Education' and _GROUP_ = 5 then
66434     +_LABEL_='BASIC';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 5 then _LABEL_='BASIC';
66435     +else
66436     +if DISPLAY_VAR='Education' and _GROUP_ = 6 then
66437     +_LABEL_='PHD';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 6 then _LABEL_='PHD';
66438     +
66439     +if DISPLAY_VAR='Gender' and _GROUP_ = 2 then
66440     +_LABEL_='F';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Gender' and _GROUP_ = 2 then _LABEL_='F';
66441     +else
66442     +if DISPLAY_VAR='Gender' and _GROUP_ = 3 then
66443     +_LABEL_='M';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Gender' and _GROUP_ = 3 then _LABEL_='M';
66444     +
66445     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then
66446     +_LABEL_='MARRIED';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then _LABEL_='MARRIED';
66447     +else
66448     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then
66449     +_LABEL_='TOGETHER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then _LABEL_='TOGETHER';
66450     +else
66451     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then
66452     +_LABEL_='SINGLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then _LABEL_='SINGLE';
66453     +else
66454     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then
66455     +_LABEL_='DIVORCED';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then _LABEL_='DIVORCED';
66456     +else
66457     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then
66458     +_LABEL_='WIDOW';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then _LABEL_='WIDOW';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 107 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   *filename Y;
MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Age" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Age_Exmpl2" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "CatPurchase" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Clothes" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Dependents" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Education" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Frq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Gender" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "HigherEducation" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "HouseKeeping" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Income" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Kitchen" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Marital_Status" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Mnt" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MonthsAsCustomer" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NetPurchase" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RMntFrq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RMntFrq_Exmpl2" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Rcn" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Recomendation" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "SmallAppliances" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Toys" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 107 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 107 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_LABELVALUES):   delete class temp temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
MPRINT(EM_GENERATE_LABELVALUES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATESTAT";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20910363095305;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66459      
66460      *------------------------------------------------------------*;
66461      * End TRAIN: BINNING;
66462      *------------------------------------------------------------*;

66463      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66464      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
66465      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66466      ;
MPRINT(EM_DIAGRAM):   ;
66467      ;
MPRINT(EM_DIAGRAM):   ;
66468      ;
MPRINT(EM_DIAGRAM):   ;
66469      ;
MPRINT(EM_DIAGRAM):   ;
66470      quit;
MPRINT(EM_DIAGRAM):   quit;
66471      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66472      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
66473      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66474      /*; *"; *'; */
66475      ;
MPRINT(EM_DIAGRAM):   ;
66476      run;
MPRINT(EM_DIAGRAM):   run;
66477      quit;
MPRINT(EM_DIAGRAM):   quit;
66478      /* Reset EM Options */
66479      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
66480      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
66481      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
66482      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
66483      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
66484      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
