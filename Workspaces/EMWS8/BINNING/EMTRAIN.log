MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.10 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16. April 2016
Time:                20.10 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3JANCWE "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3JANCWE new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.10 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.10 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
61840      proc freq data=EMWS8.BINNING_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.BINNING_VariableSet noprint;
61841      table ROLE*LEVEL/out=WORK.BINNINGMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BINNINGMETA;
61842      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.BINNINGMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

61843      proc print data=WORK.BINNINGMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BINNINGMETA label noobs;
61844      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
61845      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
61846      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
61847      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
61848      run;

NOTE: There were 6 observations read from the data set WORK.BINNINGMETA.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

61849      title10;
MPRINT(EM_DIAGRAM):   title10;
61850      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62221      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62222      * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
62223      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
62224      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

62225      %let EMEXCEPTIONSTRING=;
62226      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62227      * TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   * TRAIN: BINNING;
62228      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62229      %let EM_ACTION = TRAIN;
62230      %let syscc = 0;
62231      %macro main;
62232      
62233        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
62234        %include temp;
62235        filename temp;
62236      
62237        %setProperties;
62238      
62239        %if %upcase(&EM_ACTION) = CREATE %then %do;
62240          filename temp catalog 'sashelp.emmdfy.binning_create.source';
62241          %include temp;
62242          filename temp;
62243      
62244          %create;
62245        %end;
62246      
62247         %else
62248         %if %upcase(&EM_ACTION) = TRAIN %then %do;
62249      
62250             filename temp catalog 'sashelp.emmdfy.binning_train.source';
62251             %include temp;
62252             filename temp;
62253             %train;
62254         %end;
62255      
62256        %else
62257        %if %upcase(&EM_ACTION) = SCORE %then %do;
62258          filename temp catalog 'sashelp.emmdfy.binning_score.source';
62259          %include temp;
62260          filename temp;
62261      
62262          %score;
62263      
62264        %end;
62265      
62266        %else
62267        %if %upcase(&EM_ACTION) = REPORT %then %do;
62268      
62269             filename temp catalog 'sashelp.emmdfy.binning_report.source';
62270             %include temp;
62271             filename temp;
62272      
62273             %report;
62274         %end;
62275      
62276         %doendm:
62277      %mend main;
62278      
62279      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
62281     +%macro SetProperties;
62283     +     /* IGN options */
62284     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
62285     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
62286     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
62288     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
62289     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
62290     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
62291     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
62292     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
62293     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
62294     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
62295     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
62296     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
62297     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
62298     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
62299     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
62300     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
62301     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
62304     +%mend SetProperties;
62305     +%macro appendfiles(fileref1, fileref2);
62306     +     data _null_;
62307     +       length c $256;
62308     +       fid1=fopen("&fileref1",'A');
62309     +       fid2=fopen("&fileref2",'I');
62310     +       cval = finfo(fid2,'lrecl');
62311     +       put cval= fid1= fid2=;
62312     +       if (fid2 > 0) then
62313     +         do while(fread(fid2)=0);
62314     +           rc = fget(fid2,c,256);
62315     +           _msg_=sysmsg();
62316     +           /* put rc= c= _msg_=; */
62317     +           rc = fput(fid1,strip(c));
62318     +           rc = fwrite(fid1);
62319     +         end;
62320     +         _msg_=sysmsg();
62321     +         put _msg_=;
62322     +       rc = fclose(fid1);
62323     +       rc = fclose(fid2);
62324     +     run;
62325     +%mend appendfiles;
62327     +%macro buildOptScoreCode;
62329     +    %em_register(key=BINCODE, type=FOLDER);
62331     +    filename x catalog 'sashelp.emutil.em_deldir.source';
62332     +    %inc x;
62333     +    filename x;
62334     +    %delDir(folder=%nrbquote(&em_user_bincode));
62336     +    data _null_; length rc $200;
62337     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
62338     +    run;
62340     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
62342     +    %let dsid = %sysfunc(open(class_nosv));
62343     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
62344     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
62346     +    %let oldname=;
62347     +    %do %while(^%sysfunc(fetch(&dsid)));
62348     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
62349     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
62351     +        %if &name ne &oldname %then %do;
62352     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
62353     +             data _null_;
62354     +                length string $200 flag endflag 8;
62355     +                retain string flag endflag;
62356     +                set class_nosv end=eof;
62357     +                where DISPLAY_VAR ="&name";
62358     +                by _variable_ _group_;
62359     +                file _F1;
62360     +                index = kindex(_variable_, "BIN_");
62361     +                if index gt 0 then do;
62362     +                   if first._variable_ then do;
62363     +                      put ' ';
62364     +                      put "&EM_CODEBAR;";
62365     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
62366     +                      put string;
62367     +                      put "&EM_CODEBAR;";
62369     +                      if origLabel ne "" then do;
62370     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
62371     +                            put string;
62372     +                            string = tranwrd(origLabel,"'","''");
62373     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
62374     +                            put string;
62375     +                      end;
62376     +                      else do;
62377     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
62378     +                             put string;
62379     +                      end;
62381     +                      put ' ';
62383     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62384     +                      put string;
62385     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62386     +                      put string;
62387     +                      put "end;";
62388     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62389     +                      put string;
62390     +                   end;
62391     +                   if first._group_ then do;
62392     +                      flag = 0;
62393     +                      endflag = 1;
62394     +                      if ^first._variable_ then do;
62395     +                         put "else";
62396     +                      end;
62397     +                      if LB ne . then do;
62398     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
62399     +                      end;
62400     +                      else do;
62401     +                         flag = 1;
62402     +                         string = "if";
62403     +                      end;
62404     +                   end;
62405     +                   if last._Group_ then do;
62406     +                      if UB ne . then do;
62407     +                        if flag ne 1 then do;
62408     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
62409     +                        end;
62410     +                        else do;
62411     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
62412     +                        end;
62413     +                      end;
62414     +                      else do;
62415     +                         if flag=1 then do;
62416     +                            string = strip(DISPLAY_VAR) ;
62417     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
62418     +                            endflag=0;
62419     +                            string="";
62420     +                         end;
62421     +                         else do;
62422     +                            string = strip(string)!!" then do;";
62423     +                         end;
62424     +                      end;
62425     +                      put string;
62426     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62427     +                      put string;
62428     +                      if endflag eq 1 then do;
62429     +                        put "end;";
62430     +                      end;
62431     +                   end;
62432     +                   if last._variable_ then do;
62433     +                     string = "end;";
62434     +                     put string;
62435     +                   end;
62437     +                end;
62438     +                else do;
62439     +                   _split_value_ = tranwrd(_split_value_,"'","''");
62440     +                   if first._group_ then do;
62441     +                      flag=0;
62442     +                      if ^first._variable_ then
62443     +                         put 'else';
62444     +                      else do;
62445     +                         put ' ';
62446     +                         put "&EM_CODEBAR;";
62447     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
62448     +                         put string;
62449     +                         put "&EM_CODEBAR;";
62451     +                         if origLabel ne "" then do;
62452     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
62453     +                               put string;
62454     +                               string = tranwrd(origLabel,"'","''");
62455     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
62456     +                               put string;
62457     +                         end;
62458     +                         else do;
62459     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
62460     +                               put string;
62461     +                         end;
62463     +                         put ' ';
62465     +                         if format ne '' then do;
62466     +                            if first._variable_ then do;
62467     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
62468     +                               put string;
62469     +                               string = '%dmnormip(_UFormat);';
62470     +                               put string;
62472     +                               string ="if MISSING(_UFORMAT) then do;";
62473     +                               put string;
62474     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62475     +                               put string;
62476     +                               put "end;";
62478     +                               string="else if NOT MISSING(_UFORMAT) then do;";
62479     +                               put string;
62481     +                            end;
62482     +                         end;
62483     +                         else do;
62484     +                            if type = 'N' then do;
62485     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62486     +                              put string;
62487     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62488     +                              put string;
62489     +                              put "end;";
62491     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62492     +                              put string;
62493     +                            end;
62494     +                            else if type='C' then do;
62495     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
62496     +                              put string;
62497     +                              string = '%dmnormip(_UFormat);';
62498     +                              put string;
62500     +                              string ="if MISSING(_UFORMAT) then do;";
62501     +                              put string;
62502     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62503     +                              put string;
62504     +                              put "end;";
62506     +                              string="else if NOT MISSING(_UFORMAT) then do;";
62507     +                              put string;
62508     +                              string = '%dmnormip(_UFormat);';
62509     +                              put string;
62510     +                           end;
62511     +                         end;
62512     +                      end;
62513     +                      if format ne '' OR type='C' then do;
62514     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
62515     +                      end;
62516     +                      else do;
62517     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62518     +                      end;
62519     +                   end;
62520     +                   else do;
62521     +                      if flag ne 1 then do;
62522     +                       if format ne '' OR type='C' then do;
62523     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
62524     +                       end;
62525     +                       else do;
62526     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62527     +                       end;
62528     +                         length = length(tempstring);
62530     +                         if length < 195 then do;
62531     +                            string = tempstring;
62532     +                         end;
62533     +                         else do;
62535     +                            string = strip(string);
62536     +                            put string;
62537     +                            string = ") then do;";
62538     +                            put string;
62540     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62541     +                            put string;
62542     +                            put "end;";
62544     +                            put 'else';
62545     +                            if format ne '' OR type='C' then do;
62546     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
62547     +                            end;
62548     +                            else do;
62549     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
62550     +                            end;
62551     +                         end;
62552     +                      end;
62553     +                   end;
62555     +                   if last._group_ then do;
62556     +                      string = strip(string);
62557     +                      put string;
62559     +                      string = ") then do;";
62560     +                      put string;
62562     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62563     +                      put string;
62564     +                      put "end;";
62565     +                   end;
62567     +                   if last._variable_ then do;
62568     +                     put "else do;";
62570     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62571     +                     put string;
62573     +                     put "end;";
62574     +                     put "end;";
62575     +                   end;
62576     +                end;
62577     +             run;
62579     +             %let oldname = &name;
62580     +        %end;
62581     +    %end;
62582     +    %let dsid = %sysfunc(close(&dsid));
62584     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
62585     +    data _null_;
62586     +       file _F1;
62587     +       put "length _UFormat $200;";
62588     +       put "drop _UFormat;";
62589     +       put "_UFormat='';";
62590     +    run;
62591     +    filename _F1;
62593     +   %em_register(key=EMSCOREVAR, type=DATA);
62594     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
62595     +   proc datasets lib=&em_lib nolist;
62596     +      delete &scorevarDs;
62597     +   run;
62598     +   quit;
62600     +   %let filrf=mydir;
62601     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
62602     +   %let did=%sysfunc(dopen(&filrf));
62604     +   %if &did %then %do;  %PUT  did= &did;
62605     +       %let memcount=%sysfunc(dnum(&did));
62606     +       %if &memcount > 0 %then %do;
62607     +           data &em_user_emscorevar;
62608     +              length Name $32 formula $70 file $200;
62609     +              keep NAME Formula file;
62610     +              formula  = '';
62611     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
62612     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
62613     +               output;
62614     +           %end;
62615     +           %do i=1 %to &memcount;
62616     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
62617     +               %let newvar = %scan(&name, 1, .);
62618     +               %if "&newvar" ne "_ALL_" %then %do;
62619     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
62620     +                   output;
62621     +               %end;
62622     +           %end;
62624     +           run;
62625     +       %end;
62626     +       %let did = %sysfunc(dclose(&did));
62627     +  %end;
62629     +   %doendu:
62630     +%mend buildOptScoreCode;
62633     +%macro buildScoreCode(flowCode, publishCode);
62636     +  filename x "&flowCode";
62638     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
62639     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
62640     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
62642     +  data temp;
62643     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
62644     +    by display_var _Split_value_;
62645     +     if upcase(_Split_value_) ne 'MISSING';
62646     +   run;
62648     +   data temp_missing;
62649     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
62650     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
62651     +     by display_var _Split_value_;
62652     +     if upcase(_Split_value_) eq 'MISSING';
62653     +     keep _variable_ display_var missgrp;
62654     +   run;
62656     +   proc sort data=temp_missing; by display_var missgrp; run;
62658     +   data temp_missing;
62659     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
62660     +     by display_var missgrp;
62661     +     if ^_a then delete;
62662     +     keep _variable_ display_var missgrp ;
62663     +   run;
62665     +   data temp;
62666     +     merge temp temp_missing;
62667     +     by display_var;
62668     +     if display_Var eq '' then delete;
62669     +    run;
62671     +    /* pull in wtev values */
62672     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
62673     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
62674     +    proc sort data=temp;  by display_var _group_; run;
62676     +   data temp;
62677     +      merge temp tempcoarse(keep=display_var _group_  role) ;
62678     +      by display_var _group_;
62679     +    run;
62681     +    data temp;
62682     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
62683     +      by display_var;
62685     +      if _group_ = . then delete;
62686     +      if _variable_ = '' then delete;
62687     +    run;
62689     +    proc sort data=temp out=class;
62690     +       by _variable_ _group_ LB;
62691     +    run;
62693     +    data _null_;
62694     +      file X;
62696     +      put "length _UFormat $200;";
62697     +      put "drop _UFormat;";
62698     +      put "_UFormat='';";
62699     +    run;
62701     +    data class_nosv;
62702     +      set class;
62703     +      if upcase(role)="INPUT";
62704     +    run;
62706     +    data _null_;
62707     +       file X MOD;
62708     +       length string $200 flag endflag 8;
62709     +       retain string flag endflag;
62710     +       set class_nosv end=eof;
62711     +       by _variable_ _group_;
62713     +       index = kindex(_variable_, "BIN_");
62714     +       if index gt 0 then do;
62716     +         if first._variable_ then do;
62717     +            put ' ';
62718     +            put "&EM_CODEBAR;";
62719     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
62720     +            put string;
62721     +            put "&EM_CODEBAR;";
62724     +            if origLabel ne "" then do;
62725     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
62726     +              put string;
62727     +              string = tranwrd(origLabel,"'","''");
62728     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
62729     +              put string;
62730     +            end;
62731     +            else do;
62732     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
62733     +             put string;
62734     +            end;
62736     +            put ' ';
62738     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62739     +            put string;
62740     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62741     +            put string;
62742     +            put "end;";
62743     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62744     +            put string;
62745     +          end;
62746     +           if first._group_ then do;
62747     +              flag = 0;
62748     +              endflag = 1;
62749     +              if ^first._variable_ then do;
62750     +                put "else";
62751     +              end;
62752     +              if LB ne . then do;
62753     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
62754     +              end;
62755     +              else do;
62756     +                 flag = 1;
62757     +                 string = "if";
62758     +              end;
62760     +           end;
62761     +           if last._Group_ then do;
62762     +              if UB ne . then do;
62763     +                if flag ne 1 then do;
62764     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
62765     +                end;
62766     +                else do;
62767     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
62768     +                end;
62769     +              end;
62770     +              else do;
62771     +                 if flag=1 then do;
62772     +                   string = strip(DISPLAY_VAR) ;
62773     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
62774     +                   endflag = 0;
62775     +                   string="";
62776     +                 end;
62777     +                 else do;
62778     +                   string = strip(string)!!" then do;";
62779     +                 end;
62780     +              end;
62781     +              put string;
62783     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62784     +              put string;
62785     +              if endflag eq 1 then do;
62786     +                put "end;";
62787     +              end;
62788     +           end;
62789     +           if last._variable_ then do;
62790     +             string = "end;";
62791     +             put string;
62792     +           end;
62793     +       end;
62794     +       else do;
62795     +           _split_value_ = tranwrd(_split_value_,"'","''");
62796     +           if first._group_ then do;
62797     +              flag=0;
62798     +              if ^first._variable_ then
62799     +                 put 'else';
62800     +              else do;
62801     +                 put ' ';
62802     +                 put "&EM_CODEBAR;";
62803     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
62804     +                 put string;
62805     +                 put "&EM_CODEBAR;";
62807     +                 if origLabel ne "" then do;
62808     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
62809     +                   put string;
62810     +                   string = tranwrd(origLabel,"'","''");
62811     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
62812     +                   put string;
62813     +                 end;
62814     +                 else do;
62815     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
62816     +                   put string;
62817     +                 end;
62819     +                 put ' ';
62821     +                if format ne '' then do;
62822     +                  if first._variable_ then do;
62823     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
62824     +                    put string;
62825     +                    string = '%dmnormip(_UFormat);';
62826     +                    put string;
62828     +                     string ="if MISSING(_UFORMAT) then do;";
62829     +                     put string;
62830     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62831     +                     put string;
62832     +                     put "end;";
62834     +                     string="else if NOT MISSING(_UFORMAT) then do;";
62835     +                     put string;
62837     +                  end;
62838     +                end;
62839     +                else do;
62840     +                     if type = 'N' then do;
62841     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62842     +                       put string;
62843     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62844     +                       put string;
62845     +                       put "end;";
62847     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
62848     +                       put string;
62850     +                     end;
62851     +                     else if type='C' then do;
62852     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
62853     +                        put string;
62854     +                        string = '%dmnormip(_UFormat);';
62855     +                        put string;
62857     +                        string ="if MISSING(_UFORMAT) then do;";
62858     +                        put string;
62859     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62860     +                        put string;
62861     +                        put "end;";
62863     +                        string="else if NOT MISSING(_UFORMAT) then do;";
62864     +                        put string;
62865     +                        string = '%dmnormip(_UFormat);';
62866     +                        put string;
62867     +                    end;
62868     +                end;
62869     +              end;
62870     +              if format ne '' OR type='C' then do;
62871     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
62872     +              end;
62873     +              else do;
62874     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62875     +              end;
62876     +           end;
62877     +           else do;
62878     +              if flag ne 1 then do;
62879     +                if format ne '' OR type='C' then do;
62880     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
62881     +                end;
62882     +                else do;
62883     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62884     +                end;
62885     +                length = klength(tempstring);
62887     +                if length < 195 then do;
62888     +                   string = tempstring;
62889     +                end;
62890     +                else do;
62892     +                   string = strip(string);
62893     +                   put string;
62894     +                   string = ") then do;";
62895     +                   put string;
62897     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62898     +                   put string;
62899     +                   put "end;";
62901     +                 /*  string = strip(string)||",'...';"; */
62903     +                   put 'else';
62904     +                   if format ne '' OR type='C' then do;
62905     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
62906     +                   end;
62907     +                   else do;
62908     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
62909     +                   end;
62912     +                end;
62913     +              end;
62914     +           end;
62916     +           if last._group_ then do;
62917     +              string = strip(string);
62918     +              put string;
62919     +              string = ") then do;";
62920     +              put string;
62922     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
62923     +              put string;
62924     +              put "end;";
62925     +           end;
62927     +           if last._variable_ then do;
62928     +             put "else do;";
62930     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
62931     +             put string;
62933     +             put "end;";
62934     +             put "end;";
62935     +           end;
62936     +         *end;
62937     +       end;
62938     +    run;
62940     +    /* generate PublishCode the same as flowscorecode */
62941     +    filename Y "&publishCode";
62943     +    /* if publishCode already exists, wipe it out first */
62944     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
62945     +      %let rc = %sysfunc(fdelete(Y));
62946     +    %end;
62948     +    %appendfiles(Y, X);
62950     +    filename X;
62951     +    filename Y;
62953     +    %buildOptScoreCode;
62955     +    proc datasets library=work nolist;
62956     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
62957     +    run;
62958     +    quit;
62960     +%mend buildScoreCode;
62962     +%macro buildMetaCode(DeltaCodeFile=);
62964     +   /* set variable roles based on New Role column in the Results table */
62965     +   data _null_;
62966     +      file &DeltaCodeFile;
62967     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
62968     +      %if &dsid %then %do;
62969     +        %let obs = %sysfunc(fetch(&dsid));
62970     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
62971     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
62972     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
62974     +        %do %while(&obs=0);
62975     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
62976     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
62977     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
62979     +          /* retrieve grp and woe names from varmappings dataset */
62980     +          %let choice = _VARIABLE_ = "&inputname";
62981     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
62982     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
62983     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
62984     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
62985     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
62987     +          put "if name = '&inputname' then role='REJECTED';";
62988     +          %if "&role" ne "DEFAULT" %then %do;
62989     +            put "if name = '&grpname' then role='&role';";
62990     +          %end;
62991     +          %else %do;
62992     +            put "if name = '&grpname' then role='&oldrole';";
62993     +          %end;
62994     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
62996     +          %let obs = %sysfunc(fetch(&dsid));
62997     +        %end;
62998     +      %end;
62999     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63000     +   run;
63002     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
63003     +   data _null_;
63004     +      file &DeltaCodeFile MOD;
63006     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
63007     +      %if &sdsid %then %do;
63008     +        %let sobs = %sysfunc(fetch(&sdsid));
63009     +        %do %while(&sobs=0);
63010     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
63011     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
63012     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
63013     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
63015     +          %let checkgrp = GRP_&checkname;
63016     +          %let lenname = %length(&checkgrp);
63017     +          %if %eval(&lenname-32) > 0 %then %do;
63018     +            %let checkgrp = %substr(&checkgrp, 1, 32);
63019     +          %end;
63021     +          %let choice = _VARIABLE_ ="&checkname";
63022     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
63024     +          /* if var not found in varmappings, delete variables; */
63025     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
63026     +          %if &vdsid eq 0 %then %do;
63027     +            put 'if name="&displayvar" then delete;';
63028     +            %let dispgrp = GRP_&displayvar;
63029     +            put 'if name="&dispgrp" then delete;';
63030     +          %end;
63032     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
63033     +          %let sobs = %sysfunc(fetch(&sdsid));
63034     +        %end;
63035     +      %end;
63036     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
63037     +   run;
63039     +%mend buildMetaCode;
63041     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
63043     +   proc sort data=&coarse out=sortedcoarse nodupkey;
63044     +     by display_var;
63045     +   run;
63046     +   proc sort data=&varmappings nodupkey;
63047     +     by _variable_;
63048     +   run;
63049     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
63050     +     proc sort data=&resultstable; by display_var; run;
63051     +   %end;
63053     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
63054     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
63055     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
63056     +        &resultstable (keep = display_var _new_role_ )
63057     +     %end;
63058     +     ;
63059     +     by display_var;
63060     +     length _role_ _new_role_ $10;
63061     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
63062     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
63063     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
63064     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
63065     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
63066     +           ;
63068     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
63069     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
63070     +                _role_ = "Rejected";
63071     +             else _role_ = "Input";
63072     +           %end;
63073     +           %else %do;
63074     +             _role_ = "Input";
63075     +           %end;
63076     +           if _new_role_ eq "" then _new_role_="Default";
63077     +      if ^_a then do;
63078     +        _gini_ = 0;
63079     +        _role_ = 'Rejected';
63080     +        if _new_role_ eq "" then _new_role_="Default";
63081     +      end;
63082     +   run;
63083     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
63084     +     by NAME;
63085     +   run;
63086     +   data outlabel;
63087     +     set outlabel;
63088     +     if _label_ = '' then _label_ = _variable_;
63089     +   run;
63090     +   data &resultstable;
63091     +     merge &resultstable(in=_a_) outlabel;
63092     +     by display_Var;
63093     +     if _a_ then output;
63094     +   run;
The SAS System

63095     +   proc datasets library=work nolist;
63096     +     delete sortedcoarse outlabel;
63097     +   run;
63098     +   quit;
63099     +   proc sort data=&resultstable nodupkey;
63100     +      by DESCENDING
63101     +        _gini_ display_Var;
63102     +   run;
63103     +   data &resultstable;
63104     +     set &resultstable;
63106     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
63107     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
63108     +     giniOrder = _N_;
63109     +     _gini_ = round(_GINI_, .001);
63110     +     drop _variable_;
63111     +   run;
63113     +   proc print data=&resultstable label;
63114     +   run;
63116     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
63117     +   data &coarse;
63118     +     set &coarse;
63119     +     length role $10;
63120     +     %let dsid = %sysfunc(open(&resultstable));
63121     +     %if &dsid %then %do;
63122     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
63123     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
63124     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
63126     +       %let obs = %sysfunc(fetch(&dsid));
63127     +       %do %while(&obs=0);
63128     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
63129     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
63130     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
63132     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
63133     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
63134     +            giniOrder = &order;
63135     +            role = "&role";
63136     +          end;
63138     +          %let obs = %sysfunc(fetch(&dsid));
63139     +       %end;
63140     +     %end;
63141     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63142     +   run;
63145     +%mend EM_GENERATE_RESULTSTABLE;
63147     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
63149     +    /* instantiate the zchar macro to be used in adding bin definition */
63150     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
63151     +    %inc _temp;
63152     +    filename _temp;
63154     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
63155     +      by _variable_ binFlag _group_ LB;
63156     +    run;
63158     +    data tempExport;
63159     +      set sortedFine;
63160     +      by _variable_ binFlag _group_;
63161     +      length _split_value_ $200;
63163     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
63164     +      if binFlag = 0 then do;
63165     +        index = kindex(_variable_, "BIN_");
63166     +        if index gt 0 then do;
63167     +          _LEVEL_ = "INTERVAL";
63168     +        end;
63169     +        _Split_value_ = _split_value_;
63170     +        output;
63171     +      end;
63172     +      else do;
63173     +         * if last._group_ then do;
63174     +          index = kindex(_variable_, "BIN_");
63175     +          if index gt 0 then do;
63176     +            _LEVEL_ = "INTERVAL";
63177     +          end;
63178     +          _Split_value_ = %zchar(UB);
63179     +          output;
63180     +         * end;
63181     +      end;
63183     +      rename display_Var = _variable_;
63184     +      keep display_var _level_ _group_ _split_value_ binFlag;
63185     +    run;
63187     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
63188     +       data &EXPORTGROUPING;
63189     +         set tempexport;
63190     +       run;
63191     +    %end;
63192     +    %else %do;
63193     +       /* determine if EXPORTGROUPING already exists */
63194     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
63195     +         data &EXPORTGROUPING;
63196     +            set &EXPORTGROUPING tempexport;
63197     +         run;
63198     +       %end;
63199     +       %else %do;
63200     +         data &EXPORTGROUPING;
63201     +            set tempexport;
63202     +         run;
63203     +       %end;
63204     +    %end;
63206     +    proc datasets lib=work nolist;
63207     +      delete sortedFine tempexport;
63208     +    run;
63209     +    quit;
63211     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_TRAIN.SOURCE.
63217     +%macro train;
63219     +   /* include training macros */
63220     +   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
63221     +   %include trtemp;
63222     +   filename trtemp;
63224     +   /* trick IGN into thinking it is a model node to build decmeta; further down, set %EM_MODEL ASSESS=N
63225     +   %let EM_TOOLTYPE = MODEL; */
63227     +   %if &EM_IMPORT_DATA eq %then %do;
63228     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN, 1;
63229     +       %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note , NOQUOTE));
63230     +       %put &em_codebar;
63231     +       %put &errmsg;
63232     +       %put &em_codebar;
63233     +       %goto doendm;
63234     +   %end;
63236     +   %if  &EM_NUM_TARGET ne 1 %then %do;
63237     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
63238     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, USE1TARGET_ERR  , NOQUOTE));
63240     +        %put &em_codebar;
63241     +        %put &errmsg;
63242     +        %put &em_codebar;
63243     +        %goto doendm;
63244     +   %end;
63246     +   %if  &EM_NUM_BINARY_TARGET ne 1 %then %do;
63247     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
63248     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, METADATA.USE1BINTARGET_ERR   , NOQUOTE));
63250     +        %put &em_codebar;
63251     +        %put &errmsg;
63252     +        %put &em_codebar;
63253     +        %goto doendm;
63254     +   %end;
63256     +   /* Initialize property macro variables */
63257     +   %SetProperties;
63259     +   /* retrieve target information */
63260     +   /* does decmeta exist?  If not, retrieve target information elsewhere */
63261     +   %global target_event;
63262     +   %let target_event=;
63263     +   %if "&EM_DEC_DECMETA" eq "" %then %do;
63264     +     /* retrieve type and format from variableset */
63265     +     %let eventorder = DESC;
63266     +     data temp;
63267     +       set &EM_DATA_VARIABLESET;
63268     +       where NAME ="%EM_BINARY_TARGET";
63269     +     run;
63270     +     %let dsid = %sysfunc(open(work.temp));
63271     +     %if &dsid %then %do;
63272     +       %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
63273     +       %let formatnum = %sysfunc(VARNUM(&dsid, FORMAT));
63274     +       %let ordernum  = %sysfunc(VARNUM(&dsid, ORDER));
63275     +       %let obs = %sysfunc(fetchobs(&dsid, 1));
63276     +       %let Target_type = %sysfunc(getvarc(&dsid, &typenum));
63277     +       %let Target_Format = %sysfunc(getvarc(&dsid, &formatnum));
63278     +       %let Target_Order  = %sysfunc(getvarc(&dsid, &ordernum));
63279     +       %if &TARGET_ORDER  = ASC %then %let eventorder = ASC;
63280     +          %else
63281     +       %if &TARGET_ORDER  = DESC %then %let eventorder = DESC;
63282     +          %else
63283     +       %if &TARGET_ORDER  = FMTASC %then %let eventorder = ASCFMT;
63284     +          %else
63285     +       %if &TARGET_ORDER  = FMTDESC %then %let eventorder = DESFMT;
63286     +     %end;
63287     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63289     +     /* retrieve target_event and Target_nonEvent values */
63290     +     proc dmdb data=&EM_IMPORT_DATA classout=EVENTOUT;
63291     +       target %EM_BINARY_TARGET;
63292     +       class  %EM_BINARY_TARGET(&eventorder);
63293     +     run;
63294     +     data _null_;
63295     +       dsid = open("EVENTOUT");
63296     +       if dsid>0 then do;
63297     +       levelnum = VARNUM(dsid, "LEVEL");
63298     +       if levelnum then do;
63299     +         if ^fetch(dsid) then
63300     +           call symput('TARGET_EVENT',   strip(getvarc(dsid, levelnum)));
63302     +         if ^fetch(dsid) then
63303     +           call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
63304     +       end;
63305     +       dsid=close(dsid);
63306     +       end;
63307     +     run;
63308     +     proc datasets library=work nolist;
63309     +        delete eventout;
63310     +     run;
63311     +     quit;
63312     +   %end;
63313     +   %else %do;
63315     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
63317     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
63318     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
63319     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
63321     +   %do %while(^ %sysfunc(fetch(&dsid)));
63322     +      %let Target_Event = %sysfunc(getvarc(&dsid, &vn_event));
63323     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
63324     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
63325     +   %end;
63326     +   %let dsid = %sysfunc(close(&dsid));
63328     +   %let dsid=%sysfunc(open(&EM_DEC_DECDATA));
63329     +     %let obs = %sysfunc(fetchobs(&dsid, 2));
63330     +     %let vn_nonevent = %sysfunc(varnum(&dsid, %EM_BINARY_TARGET));
63331     +     %let Target_NonEvent= %sysfunc(getvarc(&dsid, &vn_nonevent));
63332     +   %let dsid = %sysfunc(close(&dsid));
63333     +   %end;
63335     +   /* data sets */
63336     +   %EM_GETNAME(key=BINDATA,        type=DATA);
63337     +   %EM_GETNAME(key=SPLITVALS,      type=DATA);
63338     +   %EM_GETNAME(key=VARMAPPINGS,    type=DATA);
63339     +   %EM_GETNAME(key=BINMAPPINGS,    type=DATA);
63340     +   %EM_GETNAME(key=COARSE,          type=DATA);
63341     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
63342     +   %EM_GETNAME(key=RESULTSTABLE,   type=DATA);
63344     +   /* files */
63345     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);
63346     +   %EM_GETNAME(key=GROUPMAPPINGSCORECODE, type=FILE, extension=sas);
63348     +   /* if freeze eq Y and no finedetaildata exists, throw an exception */
63349     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
63350     +     %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) ne 1 %then %do;
63351     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOFINEDETAIL;
63352     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, nofinedetail_error , NOQUOTE));
63354     +        %put &em_codebar;
63355     +        %put &errmsg;
63356     +        %put &em_codebar;
63357     +        %goto doendm;
63358     +     %end;
63359     +   %end;
63361     +   %global useImport;
63362     +   %let useImport = 0;
63364     +   %EM_GETNAME(key=IMPORTSUBSET, type=DATA);
63366     +   %if %sysfunc(exist(&EM_USER_IMPORTSUBSET, DATA)) %then %do;
63367     +     proc datasets library=&EM_LIB nolist;
63368     +       delete &EM_NODEID._IMPORTSUBSET;
63369     +     run;
63370     +     quit;
63371     +   %end;
63373     +   /* if importGrouping=Y, verify that data and all vars exist and are of the correct type */
63374     +   %if &EM_PROPERTY_IMPORTGROUPING eq Y %then %do;
63376     +     /* if import eq Y and no importtable exists, throw an exception */
63377     +     %if %sysfunc(exist(&EM_PROPERTY_IMPORTDATA, DATA)) ne 1 %then %do;
63378     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOIMPORT;
63379     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, noimport_error , NOQUOTE));
63381     +        %put &em_codebar;
63382     +        %put &errmsg;
63383     +        %put &em_codebar;
63384     +        %goto doendm;
63385     +     %end;
63387     +      %let dsid = %sysfunc(open(&EM_PROPERTY_IMPORTDATA));
63388     +      %if &dsid %then %do;
63389     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63390     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
63391     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
63392     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
63394     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
63395     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
63396     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
63397     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
63398     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
63399     +         %end;
63400     +      %end;
63401     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63403     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
63404     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
63406     +        /* generate subset of data that contains those vars also found in training data and add display_var information */
63407     +        proc sort data=&EM_PROPERTY_IMPORTDATA out=tempimport;
63408     +           by _VARIABLE_ ;
63409     +        run;
63411     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
63412     +          by NAME;
63413     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
63414     +        run;
63416     +        data &EM_USER_IMPORTSUBSET;
63417     +          merge tempimport(in=_a) tempvarset(in=_b);
63418     +          length display_Var $32;
63419     +          by _VARIABLE_;
63420     +          display_var = _Variable_;
63421     +          if _a and _b then output;
63422     +        run;
63424     +        proc datasets library=work nolist;
63425     +          delete tempimport tempvarset;
63426     +        run;
63427     +        quit;
63429     +        %end;
63430     +      %end;
63431     +   %end;
63433     +   /* set useImport flag if there are obs in the importSubset dataset */
63434     +   %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET));
63435     +   %if &dsid %then %do;
63436     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
63437     +     %if &nobs gt 0 %then %let useimport = 1;
63438     +   %end;
63439     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63441     +   %global useFreeze;
63442     +   %let useFreeze = 0;
63444     +   /* if Freeze=Y, verify that data and all vars exist and are of the correct type */
63445     +   %EM_GETNAME(key=FREEZESUBSET, type=DATA);
63447     +   %if %sysfunc(exist(&EM_USER_FREEZESUBSET, DATA)) %then %do;
63448     +     proc datasets library=&EM_LIB nolist;
63449     +       delete &EM_NODEID._FREEZESUBSET;
63450     +     run;
63451     +     quit;
63452     +   %end;
63454     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
63456     +      /* create freezesubset data to contain information on pre-binned data and raw values */
63457     +      %EM_GENERATE_EXPORTGROUP(&EM_USER_FREEZESUBSET, OVERWRITE);
63459     +      %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
63460     +      %if &dsid %then %do;
63461     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63462     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
63463     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
63464     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
63466     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
63467     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
63468     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
63469     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
63470     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
63471     +         %end;
63472     +      %end;
63473     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63475     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
63476     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
63478     +        /* generate subset of data that contains those vars also found in training data */
63479     +        proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze;
63480     +           by _VARIABLE_ ;
63481     +        run;
63483     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
63484     +          by NAME;
63485     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
63486     +        run;
63488     +        data &EM_USER_FREEZESUBSET;
63489     +          merge tempfreeze(in=_a) tempvarset(in=_b);
63490     +          length display_Var $32;
63491     +          by _VARIABLE_;
63492     +          display_var = _Variable_;
63493     +          if _a and _b then output;
63494     +        run;
63496     +        proc datasets library=work nolist;
63497     +          delete tempfreeze tempvarset;
63498     +        run;
63499     +        quit;
63500     +        %end;
63501     +      %end;
63502     +   %end;
63504     +   /* set useFreeze flag if there are obs in the freezeSubset dataset */
63505     +   %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
63506     +   %if &dsid %then %do;
63507     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
63508     +     %if &nobs gt 0 %then %let useFreeze = 1;
63509     +   %end;
63510     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63512     +   /* if finedetail already exists, delete prior to re-run */
63513     +   %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) %then %do;
63514     +     proc datasets library=&EM_LIB nolist;
63515     +       delete &EM_NODEID._FINEDETAILDATA;
63516     +     run;
63517     +     quit;
63518     +   %end;
63520     +   data tempvarnames;
63521     +     set &EM_DATA_VARIABLESET;
63522     +     where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
63523     +     keep NAME LEVEL LABEL;
63524     +   run;
63526     +   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
63527     +     names NAME;
63528     +     prefix WOE_ GRP_ ;
63529     +   run;
63531     +   proc sort data=tempmapping; by name; run;
63532     +   proc sort data=tempvarnames; by name; run;
63533     +   data tempmapping;
63534     +     merge tempmapping tempvarnames;
63535     +     by NAME;
63536     +     rename LEVEL=procLevel;
63537     +   run;
63539     +   /* generate initial columns of mapping table by setting grpflag=0 */
63540     +   %EM_GENERATE_MAPPING_TABLE;
63542     +   proc datasets library=work nolist;
63543     +     delete tempImport tempScore;
63544     +   run;
63545     +   quit;
63547     +   /* delete splitvals dataset if this existed prior to run */
63548     +   %let nvars=0;
63549     +   %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
63550     +   %if &sdsid > 0 %then %do;
63551     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
63552     +   %end;
63553     +   %if &sdsid > 0 %then  %let sdsid=%sysfunc(close(&sdsid));
63555     +   %if &nvars > 0 %then %do;
63556     +      proc datasets library=&EM_LIB nolist;
63557     +        delete &EM_NODEID._SPLITVALS;
63558     +      run;
63559     +      quit;
63560     +   %end;
63562     +   %global classvars qclassvars;
63563     +   %let classvars=;
63564     +   %let qclassvars=;
63566     +   /* generate the intervalvars and classvars macros */
63567     +   %EM_PRE_BINNING(&EM_IMPORT_DATA);
63569     +   /* update varmappings with any changes to procLevel based on discretemid */
63570     +   data &EM_USER_VARMAPPINGS;
63571     +     set &EM_USER_VARMAPPINGS;
63572     +     /* procLevel column to indicate the level used by proc; this handles*/
63573     +     /* cases in which var is marked INTERVAL in metadat but treated as  */
63574     +     /* ordinal in prebinning because of # unique levels                 */
63575     +     %let dsid = %sysfunc(open(work._discretemid));
63576     +     %if &dsid %then %do;
63577     +       %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
63578     +       %let obs = %sysfunc(fetch(&dsid));
63579     +       %do %while(&obs=0);
63580     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
63581     +          if _variable_ = "&varname" then procLevel = "ORDINAL";
63582     +          %let obs = %sysfunc(fetch(&dsid));
63583     +       %end;
63584     +     %end;
63585     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63586     +     label procLevel =  "%sysfunc(sasmsg(sashelp.dmine, rpt_proclevel_vlabel , NOQUOTE))";
63587     +   run;
63589     +   /* generate Grp_xxx variables for interval inputs */
63590     +   %if &EM_PROPERTY_BINMETHOD eq QUANTILE %then %do;
63591     +     %EM_QUANTILE_BINNING(&EM_IMPORT_DATA, WORK.PCTILE, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
63593     +   %end;
63594     +   %else %do;
63595     +     %EM_EQUAL_SPACED_BINNING(&EM_IMPORT_DATA, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
63596     +   %end;
63598     +   /* generate GRP_XXX variables for nominal inputs */
63599     +   %EM_CLASSVARS_GROUP(&EM_PROPERTY_CLASSGROUPRARE);
63601     +   /* generate GRP_XXX variables for ordinal inputs */
63602     +   %EM_ORDVARS_GROUP;
63604     +   proc print data=&EM_USER_VARMAPPINGS label;
63605     +     var _VARIABLE_ _GRP_VARIABLE_ ;
63606     +   run;
63608     +   /* add _proc_var_ to varmappings data to know names of processed variables; could be original input, could be bin_xxx */
63609     +   proc sort data=&EM_USER_SPLITVALS out=tempsplitvals nodupkey;
63610     +     by _VARIABLE_;
63611     +   run;
63613     +   data &EM_USER_VARMAPPINGS;
63614     +     set &EM_USER_VARMAPPINGS;
63615     +     length _proc_var_ $32;
63616     +     %let dsid = %sysfunc(open(work.tempsplitvals));
63617     +     %if &dsid %then %do;
63618     +        %let obs = %sysfunc(fetch(&dsid));
63619     +        %do %while(&obs=0);
63620     +          %let dispnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
63621     +          %let dispvar = %sysfunc(getvarc(&dsid, &dispnum));
63622     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63623     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
63625     +          if upcase(_VARIABLE_) = %upcase("&dispvar") then _proc_var_ = "&var";
63626     +          %let obs = %sysfunc(fetch(&dsid));
63627     +        %end;
63628     +     %end;
63629     +     if missing(_proc_var_) then _proc_var_=_variable_;
63630     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63631     +   run;
63633     +   proc datasets library=work nolist;
63634     +     delete sortedbin tempsplitvals;
63635     +   run;
63636     +   quit;
63638     +   /* calculate Fine Detail statistics for each input */
63639     +   %EM_FINE_DETAIL(&EM_USER_BINDATA, &EM_USER_VARMAPPINGS, &EM_USER_FINEDETAILDATA, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS);
63641     +   /* apply grouping and create grouped dataset */
63642     +   %EM_CREATE_GROUPING(&EM_USER_BINDATA, &EM_USER_FINEDETAILDATA, &EM_USER_COARSE);
63644     +   /* generate _label_ values in the COARSE dataset from the Scored data */
63645     +   filename Y "&EM_USER_GROUPMAPPINGSCORECODE";
63646     +   %EM_GENERATE_LABELVALUES(Y, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS, &EM_USER_COARSE);
63647     +   filename Y;
63649     +   /* set EM_MODEL ASSESS=N to prevent assessment reports from being generated */
63650     +   %EM_MODEL(Target= %EM_BINARY_TARGET, ASSESS=N);
63652     +   /* generate reports */
63653     +   %EM_REPORT(key=COARSE, viewtype=DATA, block=MODEL, description=EVENTRATESTAT, autodisplay=N, spk=N);
63656     +   %doendm:
63657     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
NOTE: %INCLUDE (level 1) file TRTEMP is file SASHELP.EMMDFY.BINNING_TRAINMACROS.SOURCE.
63659     +%macro EM_GENERATE_MAPPING_TABLE;
63661     +  %EM_GETNAME(key=VARMAPPINGS, type=DATA);
63662     +  data &EM_USER_VARMAPPINGS(keep=_variable_  _grp_variable_ procLevel label);
63663     +   length _variable_  _grp_variable_  $32 procLevel $8;
63664     +   set tempmapping;
63665     +   label _variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_inputvar_vlabel , NOQUOTE))"
63666     +         _grp_variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_grpvar_vlabel , NOQUOTE))";
63668     +         _variable_ = NAME;
63669     +         _grp_variable_ = GRP;
63670     + run;
63672     +%mend EM_GENERATE_MAPPING_TABLE;
63674     +%macro EM_PRE_BINNING(input);
63675     +    /* Determine which of our variables are interval  */
63676     +    %global intervalvars;
63677     +    %let intervalvars= ;
63678     +    data tempvariableset;
63679     +      set &EM_DATA_VARIABLESET;
63680     +      where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
63681     +    run;
63683     +    /* add all interval vars to the intervalvar macro */
63684     +    %let dsid = %sysfunc(open(work.tempvariableset));
63685     +    %if &dsid %then %do;
63686     +       %let varnum = %sysfunc(VARNUM(&dsid, NAME));
63687     +       %let obs = %sysfunc(fetch(&dsid));
63688     +       %do %while(&obs=0);
63689     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
63690     +          %let intervalvars = &intervalvars &varname;
63691     +          %let obs = %sysfunc(fetch(&dsid));
63692     +       %end;
63693     +    %end;
63694     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63696     +    /* Determine which variables marked as interval are true interval distributions; */
63697     +    /* intmid contains variables that are actually interval and should be binned; */
63698     +    /* discretemid contains variables that are actually discrete and should NOT be binned */
63699     +    %if &intervalvars ne %then %do;
63700     +      %let _maxlevel = %eval(&EM_PROPERTY_NUMBINS + 1);
63701     +      proc dmdb data=&input classout=_CLASSOUT maxlevel=&_maxlevel;
63702     +        class &intervalvars;
63703     +      run;
63704     +      proc freq data=_CLASSOUT order=DATA noprint;
63705     +         table NAME / OUT= _COUNT(where=(COUNT<&_maxlevel));
63706     +      run;
63708     +      %let _INTBINS=;
63709     +      data _null_;
63710     +        set _COUNT;
63711     +        call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
63712     +      run;
63714     +      proc sort data=_CLASSOUT;
63715     +        by NAME;
63716     +      run;
63717     +      proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
63718     +        var NRAW;
63719     +        by NAME;
63720     +      run;
63722     +      data _null_;
63723     +        dsid = open('_OUT');
63724     +        if dsid then do;
63725     +           call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
63726     +           csid = close(dsid);
63727     +        end;
63728     +      run;
63729     +      data _INTMID;
63730     +        set _OUT;
63731     +        keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
63732     +        %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
63733     +          if ^indexw("&_INTBINS", VARIABLE) then output;
63734     +        %end;
63735     +      run;
63737     +      %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
63738     +        data _DISCRETEMID;
63739     +          set _OUT;
63740     +          keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
63741     +          if indexw("&_INTBINS", VARIABLE) then output;
63742     +        run;
63743     +      %end;
63745     +      /* add vars from the _DISCRETEMID dataset to the classvars macro
63746     +      %let dsid = %sysfunc(open(WORK._DISCRETEMID));
63747     +      %if &dsid %then %do;
63748     +        %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
63749     +        %let obs = %sysfunc(fetch(&dsid));
63751     +        %do %while(&obs=0);
63752     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
63753     +          %let classvars = &classvars &var;
63754     +          %let qclassvars = &qclassvars "&var";
63755     +          %let obs = %sysfunc(fetch(&dsid));
63756     +        %end;
63757     +      %end;
63758     +      %if &dsid  %then %let dsid = %sysfunc(close(&dsid));
63759     +*/
63760     +    %end;
63761     +    %else %do;
63762     +      *data _INTMID;
63763     +      *run;
63765     +      *data _DISCRETEMID;
63766     +      *run;
63767     +    %end;
63769     +    /* if import grouping then remove interval vars in import data from _INTMID */
63770     +    %if &useImport eq 1 %then %do;
63772     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
63773     +        by _VARIABLE_;
63774     +      run;
63776     +      data &EM_USER_IMPORTSUBSET;
63777     +        length CODEVAR $32;
63778     +        set &EM_USER_IMPORTSUBSET;
63779     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
63780     +      run;
63782     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
63783     +        by _VARIABLE_;
63784     +      run;
63786     +      %let dsid = %sysfunc(open(work.tempsubset));
63787     +      %let nobs = 0;
63788     +      %if &dsid %then %do;
63789     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
63790     +      %end;
63791     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
63793     +      data tempsubset;
63794     +        set tempsubset;
63795     +        length  binVar suffix $32;
63796     +        array binnames{&nobs} $32 _temporary_;
63797     +        retain binVar binnames;
63798     +        by _VARIABLE_;
63800     +        binVar = 'BIN_'!!strip(CODEVAR);
63801     +        binVar = ksubstr(binVar, 1, 32);
63802     +        count = 1;
63804     +        do i=1 to _N_;
63805     +           do while(binvar eq binnames(i));
63806     +              suffix = strip(put(count,best.));
63807     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
63808     +              count + 1;
63809     +           end;
63810     +        end;
63811     +        binnames(_N_)= binvar;
63812     +        output;
63813     +        drop suffix count i;
63814     +     run;
63816     +     data &EM_USER_IMPORTSUBSET;
63817     +       set &EM_USER_IMPORTSUBSET;
63818     +       length binVar $32;
63820     +        %let dsid = %sysfunc(open(work.tempsubset));
63821     +        %if &dsid %then %do;
63822     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63823     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
63824     +          %let obs = %sysfunc(fetch(&dsid));
63826     +          %do %while(&obs=0);
63827     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
63828     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
63830     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
63831     +            %let obs = %sysfunc(fetch(&dsid));
63832     +          %end;
63833     +        %end;
63834     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63835     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
63836     +        if binVar ne "" then do;
63837     +          _LEVEL_ = "ORDINAL";
63838     +        end;
63840     +      run;
63842     +      %let idsidexists=0;
63843     +      %let idsid = %sysfunc(open(work._intmid));
63844     +      %if &idsid %then %do;
63845     +        %let idsidexists=1;
63846     +        %let idsid = %sysfunc(close(&idsid));
63847     +      %end;
63849     +      %if &idsidexists = 1 %then %do;
63850     +      data _INTMID;
63851     +        set _INTMID;
63853     +        %let dsid = %sysfunc(open(work.tempsubset));
63854     +        %if &dsid %then %do;
63855     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
63856     +          %let obs = %sysfunc(fetch(&dsid));
63858     +          %do %while(&obs=0);
63859     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
63860     +            if variable = "&codevar" then delete;
63861     +            %let obs = %sysfunc(fetch(&dsid));
63862     +          %end;
63863     +        %end;
63864     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63865     +      run;
63866     +      %end;
63868     +      proc datasets library=work nolist;
63869     +        delete tempsubset;
63870     +      run;
63871     +      quit;
63872     +    %end;
63874     +    /* if freeze then remove interval vars in import data from _INTMID */
63875     +    %if &useFreeze eq 1 %then %do;
63877     +      data &EM_USER_FREEZESUBSET;
63878     +        length CODEVAR $32;
63879     +        set &EM_USER_FREEZESUBSET;
63880     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
63881     +      run;
63883     +      proc sort data=&EM_USER_FREEZESUBSET out=tempsubset nodupkey;
63884     +        by _VARIABLE_;
63885     +      run;
63887     +      %let dsid = %sysfunc(open(work.tempsubset));
63888     +      %let nobs = 0;
63889     +      %if &dsid %then %do;
63890     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
63891     +      %end;
63892     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
63894     +      data tempsubset;
63895     +        set tempsubset;
63896     +        length  binVar suffix $32;
63897     +        array binnames{&nobs} $32 _temporary_;
63898     +        retain binVar binnames;
63899     +        by _VARIABLE_;
63901     +        binVar = 'BIN_'!!strip(CODEVAR);
63902     +        binVar = ksubstr(binVar, 1, 32);
63903     +        count = 1;
63905     +        do i=1 to _N_;
63906     +           do while(binvar eq binnames(i));
63907     +              suffix = strip(put(count,best.));
63908     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
63909     +              count + 1;
63910     +           end;
63911     +        end;
63912     +        binnames(_N_)= binvar;
63913     +        output;
63914     +        drop suffix count i;
63915     +     run;
63917     +     data &EM_USER_FREEZESUBSET;
63918     +       set &EM_USER_FREEZESUBSET;
63919     +       length binVar $32;
63921     +        %let dsid = %sysfunc(open(work.tempsubset));
63922     +        %if &dsid %then %do;
63923     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
63924     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
63925     +          %let obs = %sysfunc(fetch(&dsid));
63927     +          %do %while(&obs=0);
63928     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
63929     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
63931     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
63932     +            %let obs = %sysfunc(fetch(&dsid));
63933     +          %end;
63934     +        %end;
63935     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63937     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
63938     +        if binVar ne "" then do;
63939     +          _LEVEL_ = "ORDINAL";
63940     +        end;
63942     +      run;
63944     +      %let idsidexists= 0;
63945     +      %let idsid = %sysfunc(open(work._intmid));
63946     +      %if &idsid %then %do;
63947     +        %let idsidexists=1;
63948     +        %let idsid = %sysfunc(close(&idsid));
63949     +      %end;
63950     +      %if &idsidexists eq 1 %then %do;
63951     +      data _INTMID;
63952     +        set _INTMID;
63954     +        %let dsid = %sysfunc(open(work.tempsubset));
63955     +        %if &dsid %then %do;
63956     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
63957     +          %let obs = %sysfunc(fetch(&dsid));
63959     +          %do %while(&obs=0);
63960     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
63961     +            if variable = "&codevar" then delete;
63962     +            %let obs = %sysfunc(fetch(&dsid));
63963     +          %end;
63964     +        %end;
63965     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
63966     +      run;
63967     +      %end;
63969     +      proc datasets library=work nolist;
63970     +        delete tempsubset;
63971     +      run;
63972     +      quit;
63974     +    %end;
63976     +%mend EM_PRE_BINNING;
63978     +%macro EM_IMPORT_BINNING(binningCode);
63981     +   data tempintimport;
63982     +     set &EM_USER_IMPORTSUBSET;
63983     +     if binflag = 1;
63984     +   run;
63986     +   %let idsid = %sysfunc(open(work.tempintimport));
63987     +   %if &idsid %then %do;
63988     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
63989     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
63990     +   %end;
63991     +   %else %do;
63992     +     %let nvars = 0;
63993     +     %let nobs = 0;
63994     +   %end;
63995     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
63997     +   proc datasets library=work nolist;
63998     +     delete tempintimport;
63999     +   run;
64000     +   quit;
64002     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
64004     +      filename X "&binningCode";
64005     +      data _null_;
64006     +        FILE X MOD;
64007     +        %let bin_variables=;
64008     +        %let quote_bin_variables = ;
64009     +        %let choice = binflag = 1;
64010     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
64011     +        %if &dsid %then %do;
64012     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
64013     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
64014     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
64015     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingbins_note , NOQUOTE));
64017     +           put "&EM_CODEBAR;";
64018     +           put " &note; ";
64019     +           put "&EM_CODEBAR;";
64021     +           /* retrieve value for first obs */
64022     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
64023     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
64024     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
64026     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
64027     +           %let i = 1;
64028     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
64029     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
64030     +           %end;
64031     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
64032     +           put " ";
64033     +           put "if &oldname eq . then &binvalue = .;";
64035     +           /* cycle through special codes if they exist */
64036     +           %let index2 = %index(&oldname, SV_);
64037     +           %if &index2 gt 0 %then %do;
64038     +             %let choice = CODEVAR ="&oldname";
64039     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
64040     +             %if &cdsid %then %do;
64041     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
64042     +                %let cobs = %sysfunc(fetch(&cdsid));
64043     +                %do %while(&cobs=0);
64044     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
64045     +                    put "else if &oldname eq &code then &binvalue = &code;";
64046     +                   %let cobs = %sysfunc(fetch(&cdsid));
64047     +                %end;
64048     +             %end;
64049     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
64050     +           %end;
64051     +           put "else ";
64052     +           put "  if &oldname < &value then &binvalue=&i;";
64053     +           %let i= %eval(&i+1);
64055     +           %let obs = %sysfunc(fetch(&dsid));
64056     +           %do %while(&obs=0);
64057     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
64058     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
64059     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
64061     +              %if "&oldname" ne "&namevalue" %then %do;
64063     +                /* if variable has been re-coded for special codes, must include these values as well */
64064     +                put;
64065     +                put "if &namevalue eq . then &binvalue = .;";
64067     +                %let i=1;
64068     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
64069     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
64070     +                %end;
64071     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
64073     +                /* cycle through special codes if they exist */
64074     +                %let index2 = %index(&namevalue, SV_);
64075     +                %if &index2 gt 0 %then %do;
64076     +                  %let choice = CODEVAR ="&namevalue";
64077     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
64078     +                  %if &cdsid %then %do;
64079     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
64080     +                     %let cobs = %sysfunc(fetch(&cdsid));
64081     +                     %do %while(&cobs=0);
64082     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
64083     +                       put "else if &namevalue eq &code then &binvalue = &code;";
64084     +                       %let cobs = %sysfunc(fetch(&cdsid));
64085     +                     %end;
64086     +                  %end;
64087     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
64088     +                %end;
64089     +                put "else ";
64090     +                put "  if &namevalue < &value then &binvalue=&i;";
64091     +              %end;
64092     +              %else %do;
64093     +                put "else ";
64094     +                %if "&value" ne "." %then %do;
64095     +                  put "  if &namevalue < &value then &binvalue=&i;";
64096     +                %end;
64097     +                %else %do;
64098     +                  put "  &binvalue=&i;";
64099     +                %end;
64100     +              %end;
64101     +              %let i = %eval(&i + 1);
64102     +              %let obs = %sysfunc(fetch(&dsid));
64103     +              %let oldname = &namevalue;
64104     +              %let oldbinvalue = &binvalue;
64105     +           %end;
64106     +        %end;
64107     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
64109     +      run;
64110     +      filename X;
64111     +      /* generate BINMAPPINGS dataset */
64112     +      data TEMPBINMAPPINGS;
64113     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
64115     +        %let choice = binflag = 1;
64116     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
64117     +        %if &dsid %then %do;
64118     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
64119     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
64120     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
64121     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
64122     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
64124     +           /* retrieve information from first obs */
64125     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
64126     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
64127     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
64128     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
64129     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar,5));
64130     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
64131     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
64132     +           %let i = 1;
64134     +           NAME = "&OLDCODEVAR";
64135     +           BIN_NAME = "&OLDBINVAR";
64136     +           GRP_NAME = "&OLDGRPVAR";
64137     +           BIN = "&i";
64138     +           GRP = "&oldgrpvalue";
64139     +           LB = . ;
64140     +           UB = &oldvalue;
64141     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
64142     +           DISPLAY_VAR = "&oldvar";
64143     +           output;
64145     +           %let i = 2;
64146     +           %let obs = %sysfunc(fetch(&dsid));
64147     +           %do %while(&obs=0);
64148     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
64149     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
64150     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
64151     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar,5));
64152     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
64153     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
64155     +             %if "&oldvar" ne "&var" %then %do;
64156     +              %let i = 1;
64157     +               %let oldvalue = .;
64158     +             %end;
64160     +             NAME = "&CODEVAR";
64161     +             BIN_NAME = "&BINVAR";
64162     +             GRP_NAME = "&GRPVAR";
64163     +             BIN = "&i";
64164     +             GRP = "&group";
64165     +             LB = &oldvalue ;
64166     +             UB = &value;
64167     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
64168     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
64169     +             %end;
64170     +             %else %do;
64171     +               %if "&oldvalue" eq "." %then %do;
64172     +                 EM_BIN_LABEL = "&var < &value" ;
64173     +               %end;
64174     +               %if "&value" eq "." %then %do;
64175     +                 EM_BIN_LABEL = "&oldvalue >= &var";
64176     +               %end;
64177     +             %end;
64178     +             DISPLAY_VAR = "&var";
64179     +             output;
64181     +             %let oldvar = &var;
64182     +             %let oldcodevar = &codevar;
64183     +             %let oldbinvar = &binvar;
64184     +             %let oldgrpvar = &grpvar;
64185     +             %let oldvalue   = &value;
64186     +             %let oldgrpvalue   = &group;
64187     +             %let i = %eval(&i + 1);
64188     +             %let obs = %sysfunc(fetch(&dsid));
64189     +           %end;
64190     +        %end;
64191     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
64192     +      run;
64194     +      data &EM_USER_BINMAPPINGS;
64195     +        set &EM_USER_BINMAPPINGS tempBinMappings;
64196     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
64197     +      run;
64199     +      /* update importsubset with bin values instead of raw values */
64200     +      data &EM_USER_IMPORTSUBSET;
64201     +        set &EM_USER_IMPORTSUBSET;
64203     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
64204     +        %if &dsid %then %do;
64205     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
64206     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
64207     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
64208     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
64209     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
64210     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
64212     +          %let oldvar = ;
64213     +          %let obs = %sysfunc(fetch(&dsid));
64214     +          %do %while(&obs=0);
64215     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
64216     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
64217     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
64218     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
64219     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
64220     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
64222     +            %if "&oldvar" eq "&displayvar" %then %do;
64223     +              else
64224     +            %end;
64225     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
64226     +               _SPLIT_VALUE_ = "&bin";
64227     +            end;
64228     +            %let oldvar = &displayvar;
64229     +            %let obs = %sysfunc(fetch(&dsid));
64230     +          %end;
64231     +        %end;
64232     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64233     +      run;
64235     +      proc sort data=&EM_USER_IMPORTSUBSET;
64236     +        by _VARIABLE_ _SPLIT_VALUE_;
64237     +      run;
64239     +      proc datasets library=work nolist;
64240     +        delete tempBinMappings;
64241     +      run;
64242     +      quit;
64243     +  %end;
64244     +%mend EM_IMPORT_BINNING;
64246     +%macro EM_FREEZE_BINNING(binningCode);
64248     +   data tempintfreeze;
64249     +     set &EM_USER_FREEZESUBSET;
64250     +     if binflag = 1;
64251     +   run;
64253     +   %let idsid = %sysfunc(open(work.tempintfreeze));
64254     +   %if &idsid %then %do;
64255     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
64256     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
64257     +   %end;
64258     +   %else %do;
64259     +     %let nvars = 0;
64260     +     %let nobs = 0;
64261     +   %end;
64262     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
64264     +   proc datasets library=work nolist;
64265     +     delete tempintimport;
64266     +   run;
64267     +   quit;
64269     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
64271     +      filename X "&binningCode";
64272     +      data _null_;
64273     +        FILE X MOD;
64275     +        %let bin_variables=.;
64276     +        %let quote_bin_variables=.;
64277     +        %let freeze_variables=;
64278     +        %let choice = binflag = 1;
64279     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
64280     +        %if &dsid %then %do;
64281     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
64282     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
64283     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
64284     +           %let vnum    = %sysfunc(VARNUM(&dsid, _variable_));
64286     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingfrozenbins_note , NOQUOTE));
64287     +           put "&EM_CODEBAR;";
64288     +           put "&note;";
64289     +           put "&EM_CODEBAR;";
64291     +           /* retrieve value for first obs */
64292     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
64293     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
64294     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
64295     +           %let variable = %sysfunc(getvarc(&dsid, &vnum));
64297     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
64298     +           %let i = 1;
64299     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
64300     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
64301     +           %end;
64302     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
64303     +           %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
64305     +           put " ";
64306     +           put "if &oldname eq . then &binvalue = .;";
64308     +           /* cycle through special codes if they exist */
64309     +           %let index2 = %index(&oldname, SV_);
64310     +           %if &index2 gt 0 %then %do;
64311     +             %let choice = CODEVAR ="&oldname";
64312     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
64313     +             %if &cdsid %then %do;
64314     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
64315     +                %let cobs = %sysfunc(fetch(&cdsid));
64316     +                %do %while(&cobs=0);
64317     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
64318     +                    put "else if &oldname eq &code then &binvalue = &code;";
64319     +                   %let cobs = %sysfunc(fetch(&cdsid));
64320     +                %end;
64321     +             %end;
64322     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
64323     +           %end;
64324     +           put "else ";
64325     +           put "  if &oldname < &value then &binvalue=&i;";
64326     +           %let i= %eval(&i+1);
64328     +           %let obs = %sysfunc(fetch(&dsid));
64329     +           %do %while(&obs=0);
64330     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
64331     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
64332     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
64333     +              %let variable = %sysfunc(getvarc(&dsid, &vnum));
64335     +              %if "&oldname" ne "&namevalue" %then %do;
64337     +                /* if variable has been re-coded for special codes, must include these values as well */
64338     +                put;
64339     +                put "if &namevalue eq . then &binvalue = .;";
64341     +                %let i=1;
64342     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
64343     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
64344     +                %end;
64345     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
64346     +                %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
64348     +                /* cycle through special codes if they exist */
64349     +                %let index2 = %index(&namevalue, SV_);
64350     +                %if &index2 gt 0 %then %do;
64351     +                  %let choice = CODEVAR ="&namevalue";
64352     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
64353     +                  %if &cdsid %then %do;
64354     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
64355     +                     %let cobs = %sysfunc(fetch(&cdsid));
64356     +                     %do %while(&cobs=0);
64357     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
64358     +                       put "else if &namevalue eq &code then &binvalue = &code;";
64359     +                       %let cobs = %sysfunc(fetch(&cdsid));
64360     +                     %end;
64361     +                  %end;
64362     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
64363     +                %end;
64364     +                put "else ";
64365     +                put "  if &namevalue < &value then &binvalue=&i;";
64366     +              %end;
64367     +              %else %do;
64368     +                put "else ";
64369     +                %if "&value" ne "." %then %do;
64370     +                  put "  if &namevalue < &value then &binvalue=&i;";
64371     +                %end;
64372     +                %else %do;
64373     +                  put " &binvalue=&i;";
64374     +                %end;
64375     +              %end;
64376     +              %let i = %eval(&i + 1);
64377     +              %let obs = %sysfunc(fetch(&dsid));
64378     +              %let oldname = &namevalue;
64379     +              %let oldbinvalue = &binvalue;
64380     +           %end;
64381     +        %end;
64382     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
64384     +      run;
64385     +      filename X;
64386     +      /* generate BINMAPPINGS dataset */
64387     +      data TEMPBINMAPPINGS;
64388     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
64390     +        %let choice = binflag = 1;
64391     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
64392     +        %if &dsid %then %do;
64393     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
64394     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
64395     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
64396     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
64397     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
64399     +           /* retrieve information from first obs */
64400     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
64401     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
64402     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
64403     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
64404     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar, 5));
64405     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
64406     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
64407     +           %let i = 1;
64409     +           NAME = "&OLDCODEVAR";
64410     +           BIN_NAME = "&OLDBINVAR";
64411     +           GRP_NAME = "&OLDGRPVAR";
64412     +           BIN = "&i";
64413     +           GRP = "&oldgrpvalue";
64414     +           LB = . ;
64415     +           UB = &oldvalue;
64416     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
64417     +           DISPLAY_VAR = "&oldvar";
64418     +           output;
64420     +           %let i = 2;
64421     +           %let obs = %sysfunc(fetch(&dsid));
64422     +           %do %while(&obs=0);
64423     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
64424     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
64425     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
64426     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar, 5));
64427     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
64428     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
64430     +             %if "&oldvar" ne "&var" %then %do;
64432     +               %let i = 1;
64433     +               %let oldvalue = .;
64434     +             %end;
64436     +             NAME = "&CODEVAR";
64437     +             BIN_NAME = "&BINVAR";
64438     +             GRP_NAME = "&GRPVAR";
64439     +             BIN = "&i";
64440     +             GRP = "&group";
64441     +             LB = &oldvalue ;
64442     +             UB = &value;
64443     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
64444     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
64445     +             %end;
64446     +             %else %do;
64447     +               %if "&oldvalue" eq "." %then %do;
64448     +                 EM_BIN_LABEL = "&var < &value" ;
64449     +               %end;
64450     +               %if "&value" eq "." %then %do;
64451     +                 EM_BIN_LABEL = "&oldvalue >= &var";
64452     +               %end;
64453     +             %end;
64454     +             DISPLAY_VAR = "&var";
64455     +             output;
64457     +             %let oldvar = &var;
64458     +             %let oldcodevar = &codevar;
64459     +             %let oldbinvar = &binvar;
64460     +             %let oldgrpvar = &grpvar;
64461     +             %let oldvalue   = &value;
64462     +             %let oldgrpvalue = &group;
64463     +             %let i = %eval(&i + 1);
64464     +             %let obs = %sysfunc(fetch(&dsid));
64465     +           %end;
64466     +        %end;
64468     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
64469     +      run;
64471     +      /* remove obs from EM_USER_BINMAPPINGS that have vars also in tempBinMappings -- prevents duplicate entries */
64472     +      data &EM_USER_BINMAPPINGS;
64473     +        set &EM_USER_BINMAPPINGS;
64474     +        if NAME in (&FREEZE_VARIABLES) then delete;
64475     +      run;
64477     +      data &EM_USER_BINMAPPINGS;
64478     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
64480     +        set &EM_USER_BINMAPPINGS tempBinMappings;
64481     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
64482     +      run;
64484     +      /* update freezesubset with bin values instead of raw values */
64485     +      data &EM_USER_FREEZESUBSET;
64486     +        set &EM_USER_FREEZESUBSET;
64488     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
64489     +        %if &dsid %then %do;
64490     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
64491     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
64492     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
64493     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
64494     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
64495     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
64497     +          %let oldvar = ;
64498     +          %let obs = %sysfunc(fetch(&dsid));
64499     +          %do %while(&obs=0);
64500     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
64501     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
64502     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
64503     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
64504     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
64505     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
64507     +            %if "&oldvar" eq "&displayvar" %then %do;
64508     +              else
64509     +            %end;
64510     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
64511     +               _SPLIT_VALUE_ = "&bin";
64512     +            end;
64513     +            %let oldvar =&displayvar;
64514     +            %let obs = %sysfunc(fetch(&dsid));
64515     +          %end;
64516     +        %end;
64517     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64518     +      run;
64520     +      proc sort data=&EM_USER_FREEZESUBSET;
64521     +        by _VARIABLE_ _SPLIT_VALUE_;
64522     +      run;
64524     +      proc datasets library=work nolist;
64525     +        delete tempBinMappings;
64526     +      run;
64527     +      quit;
64528     +   %end;
64529     +%mend EM_FREEZE_BINNING;
64531     +%macro EM_EQUAL_SPACED_BINNING(input, bindata, binningCode);
64534     +/* initialize new bucket_binning macro */
64535     +filename temp catalog 'sashelp.emapps.bucket_binning.source';
64536     +%include temp;
64537     +filename temp;
64539     +/* create fileref for generation of binningCode */
64540     +filename X "&binningCode";
64542     +/* determine if there are inputs to be binned */
64543     +%let numbinvars = 0;
64544     +%let intdsid = %sysfunc(open(work._intmid));
64545     +%if &intdsid %then %do;
64546     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
64547     +%end;
64548     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
64549     +%if &numbinvars > 0 %then %do;
64552     +/* get data in format needed for quantile_binning macro */
64553     +data work.vartable;
64554     +  set work._intmid;
64555     +  level = "INTERVAL";
64556     +  role  = "INPUT";
64557     +  rename variable=name;
64558     +run;
64560     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
64561     +%if %EM_FREQ ne %then %do;
64562     +   data work.freq;
64563     +     name="%EM_FREQ";
64564     +     role="FREQ";
64565     +   run;
64567     +   data work.vartable;
64568     +     set work.vartable work.freq;
64569     +   run;
64570     +%end;
64572     +/* perform bucket binning of data */
64573     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
64574     +%em_apps_bucket_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
64576     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
64577     +%end;
64578     +%else %do;
64579     +  /* initialize binmappings table */
64580     +  data &EM_USER_BINMAPPINGS;
64581     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
64582     +  run;
64584     +  data _null_;
64585     +    FILE X;
64587     +    put "&EM_CODEBAR;";
64588     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
64589     +    put "* &note;";
64590     +    put "&EM_CODEBAR;";
64591     +  run;
64593     +%end;
64595     +/* assign display_var values to binmappings table as well as initial group values */
64596     +data &EM_USER_BINMAPPINGS;
64597     +  set &EM_USER_BINMAPPINGS;
64598     +  length display_var $32 grp $8;
64599     +  display_var = name;
64601     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64602     +    GRP = BIN + 1;
64603     +  %end;
64604     +  %else %do;
64605     +    GRP = BIN;
64606     +  %end;
64607     +run;
64609     +/* de-assign fileref */
64610     +filename X;
64612     +    /* append to binning code those values that were included in the importSubset data */
64613     +    %if &useImport eq 1 %then %do;
64614     +      %EM_IMPORT_BINNING(&binningcode);
64615     +    %end;
64617     +    /* append to binning code those values that were included in the freezeSubset data */
64618     +    %if &useFreeze eq 1 %then %do;
64619     +      %EM_FREEZE_BINNING(&binningcode);
64620     +    %end;
64622     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
64623     +     by NAME;
64624     +     run;
64626     +     /* create grouping for missing level */
64627     +    data tempmissvalues;
64628     +    run;
64630     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64631     +       data tempmissvalues;
64632     +         %if &useImport eq 1 %then %do;
64633     +           merge sortedmapping &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME));
64634     +         %end;
64635     +         %if &useFreeze eq 1 %then %do;
64636     +           merge sortedmapping &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME));
64637     +         %end;
64638     +         %else %do;
64639     +           set sortedmapping;
64640     +         %end;
64641     +         GRP="1";
64642     +         bin="Missing";
64643     +         _split_value_ = "Missing";
64644     +         %if &useImport eq 1 %then %do;
64645     +            if _a then delete;
64646     +         %end;
64647     +         %if &useFreeze eq 1 %then %do;
64648     +            if _b then delete;
64649     +         %end;
64651     +       run;
64652     +    %end;
64654     +    /* create binData from binningCode */
64655     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
64656     +      by NAME;
64657     +    run;
64659     +    filename X "&binningCode";
64660     +    data &bindata;
64661     +      set &input;
64662     +      %inc X;
64663     +    run;
64665     +    filename X;
64667     +    /* create splitvals dataset */
64668     +    data tempsplitvals;
64669     +      set &EM_USER_BINMAPPINGS
64670     +        %let tdsid = %sysfunc(open(work.tempmissvalues));
64671     +        %if &tdsid %then %do;
64672     +          tempmissvalues
64673     +        %end;
64674     +        %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
64675     +      ;
64676     +      length newgroup _group_ 8 _level_ $8;
64677     +      newgroup =.;
64678     +      _LEVEL_ = 'ORDINAL';
64679     +      _Group_ = grp;
64680     +      rename NAME=DISPLAY_VAR BIN=_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
64681     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_;
64682     +    run;
64684     +    data tempsplitvals;
64685     +      set tempsplitvals;
64686     +      _order_ = _N_;
64687     +    run;
64689     +    /* determine if EM_USER_SPLITVALS already exists */
64690     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
64691     +    %if &sdsid > 0 %then %do;
64692     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
64693     +      %if &nvars > 0 %then %do;
64694     +        proc sql;
64695     +          reset noprint;
64696     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
64697     +        quit;
64698     +      %end;
64699     +      %else %let nobs=0;
64700     +    %end;
64701     +    %else %do;
64702     +       %let nobs=0;
64703     +       %let nvars=0;
64704     +    %end;
64705     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
64707     +    /* if useIMport=1 also include import definitions here as well */
64708     +    %if &useImport eq 1 %then %do;
64709     +      data tempImport;
64710     +        set &EM_USER_IMPORTSUBSET;
64711     +        _variable_ = binVar;
64712     +      run;
64713     +    %end;
64715     +    /* if useFreeze=1 also include import definitions here as well */
64716     +    %if &useFreeze eq 1 %then %do;
64717     +      data tempFreeze;
64718     +        length display_var $32;
64719     +        set &EM_USER_FREEZESUBSET;
64720     +        display_var = _variable_;
64721     +        _variable_ = binVar;
64722     +      run;
64723     +    %end;
64726     +    data &EM_USER_SPLITVALS;
64727     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
64728     +        set &EM_USER_SPLITVALS tempsplitvals
64729     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
64730     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
64731     +        %end;
64732     +        %if &useFreeze eq 1 %then %do;
64733     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
64734     +        %end;
64735     +        ;
64736     +      %end;
64737     +      %else %do;
64738     +        set tempsplitvals
64739     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
64740     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
64741     +        %end;
64742     +        %if &useFreeze eq 1 %then %do;
64743     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
64744     +        %end;
64745     +        ;
64746     +      %end;
64747     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _ORDER_;
64748     +    run;
64750     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
64751     +    data tempvariableset;
64752     +      set &EM_DATA_VARIABLESET;
64753     +      where TYPE = 'C';
64754     +    run;
64756     +    /* add all interval vars that aren't special codes to the intervalvar macro */
64757     +    %let dsid = %sysfunc(open(work.tempvariableset));
64758     +    %if &dsid %then %do;
64759     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
64760     +      %let obs = %sysfunc(fetch(&dsid));
64761     +      %do %while(&obs=0);
64762     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
64763     +        %let classvars = &classvars &varname;
64764     +        %let qclassvars = &qclassvars "&varname";
64765     +        %let obs = %sysfunc(fetch(&dsid));
64766     +      %end;
64767     +    %end;
64768     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64770     +    %if &classvars ne %then %do;
64771     +      proc dmdb data =&bindata classout=_classout nonorm;
64772     +        class &classvars;
64773     +      run;
64775     +      proc dmdb data=&bindata classout=_classout2;
64776     +       class &classvars;
64777     +      run;
64779     +      proc sort data=_classout; by NAME CRAW; run;
64780     +      proc sort data=_classout2; by NAME CRAW; run;
64782     +      data _classout;
64783     +        length _variable_ $32;
64784     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
64785     +        _split_value_ = trim(left(_split_value_));
64786     +        LEVEL = trim(left(LEVEL));
64787     +        by NAME CRAW;
64788     +       _variable_ = NAME;
64789     +      run;
64791     +      proc sort data=_classout; by _variable_ _split_value_; run;
64792     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
64794     +      data &EM_USER_SPLITVALS;
64795     +        length _norm_level_ $200 _split_value_ $200;
64796     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
64797     +        by _variable_ _split_value_;
64798     +        LEVEL = trim(left(LEVEL));
64799     +        _norm_level_ = trim(left(_norm_level_));
64800     +        _split_value_ = trim(left(_split_value_));
64801     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
64802     +        drop NAME FREQUENCY TYPE CRAW NRAW;
64803     +      run;
64805     +      proc datasets library=work nolist;
64806     +        delete _classout _classout2;
64807     +      run;
64808     +      quit;
64809     +    %end;
64810     +    data &EM_USER_SPLITVALS;
64811     +      set &EM_USER_SPLITVALS;
64812     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
64813     +    run;
64815     +    proc sort data=&EM_USER_SPLITVALS;
64816     +      by DISPLAY_VAR _Group_;
64817     +    run;
64819     +   proc datasets library=work nolist;
64820     +     delete tempBinMappings temp_binmappings tempBinNames tempsplitvals sortedmapping tempmissvalues
64821     +      %if &useImport eq 1 %then %do;
64822     +        tempImport
64823     +      %end;
64824     +      %if &useFreeze eq 1 %then %do;
64825     +        tempFreeze
64826     +      %end;
64827     +     ;
64828     +   run;
64829     +   quit;
64831     +%mend;
64833     +%macro EM_QUANTILE_BINNING(input, pctdata, bindata, binningCode);
64835     +/* initialize new quantile_binning macro */
64836     +filename temp catalog 'sashelp.emapps.quantile_binning.source';
64837     +%include temp;
64838     +filename temp;
64840     +/* generate fileref for quantile_binning macro */
64841     +filename X "&binningCode";
64843     +/* determine if there are inputs to be binned */
64844     +%let numbinvars = 0;
64845     +%let intdsid = %sysfunc(open(work._intmid));
64846     +%if &intdsid %then %do;
64847     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
64848     +%end;
64849     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
64850     +%if &numbinvars > 0 %then %do;
64852     +/* get data in format needed for quantile_binning macro */
64853     +data work.vartable;
64854     +  set work._intmid;
64855     +  level = "INTERVAL";
64856     +  role  = "INPUT";
64857     +  rename variable=name;
64858     +run;
64860     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
64861     +%if %EM_FREQ ne %then %do;
64862     +   data work.freq;
64863     +     name="%EM_FREQ";
64864     +     role="FREQ";
64865     +   run;
64867     +   data work.vartable;
64868     +     set work.vartable work.freq;
64869     +   run;
64870     +%end;
64873     +/* perform quantile binning of data */
64874     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
64875     +%em_apps_quantile_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
64877     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
64878     +%end;
64879     +%else %do;
64880     +  /* initialize binmappings table */
64881     +  data &EM_USER_BINMAPPINGS;
64882     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
64883     +  run;
64885     +  data _null_;
64886     +    FILE X;
64888     +    put "&EM_CODEBAR;";
64889     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
64890     +    put "* &note;";
64891     +    put "&EM_CODEBAR;";
64892     +  run;
64894     +%end;
64896     +/* assign display_var values to binmappings table as well as initial group values */
64897     +data &EM_USER_BINMAPPINGS;
64898     +  set &EM_USER_BINMAPPINGS;
64899     +  length display_var $32 grp $8;
64900     +  display_var = name;
64902     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64903     +    GRP = BIN + 1;
64904     +  %end;
64905     +  %else %do;
64906     +    GRP = BIN;
64907     +  %end;
64908     +run;
64910     +/* de-assign fileref */
64911     +filename X;
64913     +    /* append to binning code those values that were included in the importSubset data */
64914     +    %if &useImport eq 1 %then %do;
64915     +      %EM_IMPORT_BINNING(&binningcode);
64916     +    %end;
64918     +    /* append to binning code those values that were included in the freezeSubset data */
64919     +    %if &useFreeze eq 1 %then %do;
64920     +      %EM_FREEZE_BINNING(&binningcode);
64921     +    %end;
64923     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
64924     +      by NAME;
64925     +    run;
64927     +    /* create grouping for missing level */
64928     +    data tempmissvalues;
64929     +    run;
64931     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
64932     +       data tempmissvalues;
64933     +         %if ((&useImport eq 1) OR (&useFreeze eq 1)) %then %do;
64934     +           merge sortedmapping
64935     +           %if &useImport eq 1 %then %do;
64936     +              &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME))
64937     +           %end;
64938     +           %if &useFreeze eq 1 %then %do;
64939     +             &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME))
64940     +           %end;
64941     +           ;
64942     +         %end;
64943     +         %else %do;
64944     +           set sortedmapping;
64945     +         %end;
64946     +         GRP="1";
64947     +         bin="Missing";
64948     +         _split_value_ = "Missing";
64949     +         %if &useImport eq 1 %then %do;
64950     +            if _a then delete;
64951     +         %end;
64952     +         %if &useFreeze eq 1 %then %do;
64953     +            if _b then delete;
64954     +         %end;
64956     +       run;
64957     +    %end;
64960     +    /* create binData from binningCode */
64961     +    filename X "&binningCode";
64963     +    data &bindata;
64964     +      set &input;
64965     +      %inc X;
64966     +    run;
64968     +    filename X;
64970     +    /* create splitvals dataset */
64971     +    data tempsplitvals;
64972     +      set &EM_USER_BINMAPPINGS tempmissvalues;
64973     +      length newgroup _group_ _order_ 8 _level_ $8;
64974     +      newgroup =.;
64975     +      _LEVEL_ = 'ORDINAL';
64976     +      _Group_ = grp;
64977     +      rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
64978     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
64979     +    run;
64981     +    data tempsplitvals;
64982     +      set tempsplitvals;
64983     +      _order_ = _N_;
64984     +    run;
64986     +    /* determine if EM_USER_SPLITVALS already exists */
64987     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
64988     +    %if &sdsid > 0 %then %do;
64989     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
64990     +      %if &nvars > 0 %then %do;
64991     +        proc sql;
64992     +          reset noprint;
64993     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
64994     +        quit;
64995     +      %end;
64996     +      %else %let nobs=0;
64997     +    %end;
64998     +    %else %do;
64999     +       %let nobs=0;
65000     +       %let nvars=0;
65001     +    %end;
65002     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
65004     +    /* if useIMport=1 also include import definitions here as well */
65005     +    %if &useImport eq 1 %then %do;
65006     +      data tempImport;
65007     +        set &EM_USER_IMPORTSUBSET;
65008     +        _variable_ = binVar;
65009     +      run;
65010     +    %end;
65012     +    /* if useFreeze=1 also include frozen definitions here as well */
65013     +    %if &useFreeze eq 1 %then %do;
65014     +      data tempFreeze;
65015     +        length display_var $32;
65016     +        set &EM_USER_FreezeSUBSET;
65017     +        display_var = _variable_;
65018     +        _variable_ = binVar;
65019     +      run;
65020     +    %end;
65022     +    data &EM_USER_SPLITVALS;
65023     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
65024     +        set &EM_USER_SPLITVALS tempsplitvals
65025     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
65026     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
65027     +        %end;
65028     +        %if &useFreeze eq 1 %then %do;
65029     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
65030     +        %end;
65031     +        ;
65032     +      %end;
65033     +      %else %do;
65034     +        set tempsplitvals
65035     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
65036     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
65037     +        %end;
65038     +        %if &useFreeze eq 1 %then %do;
65039     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
65040     +        %end;
65041     +        ;
65042     +      %end;
65043     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
65044     +    run;
65046     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
65047     +    data tempvariableset;
65048     +      set &EM_DATA_VARIABLESET;
65049     +      where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
65050     +    run;
65052     +    /* add all interval vars that aren't special codes to the intervalvar macro */
65053     +    %let dsid = %sysfunc(open(work.tempvariableset));
65054     +    %if &dsid %then %do;
65055     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
65056     +      %let obs = %sysfunc(fetch(&dsid));
65057     +      %do %while(&obs=0);
65058     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
65059     +        %let classvars = &classvars &varname;
65060     +        %let qclassvars = &qclassvars "&varname";
65061     +        %let obs = %sysfunc(fetch(&dsid));
65062     +      %end;
65063     +    %end;
65064     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65066     +    %if &classvars ne %then %do;
65067     +      proc dmdb data =&bindata classout=_classout nonorm;
65068     +        class &classvars;
65069     +      run;
65071     +      proc dmdb data=&bindata classout=_classout2;
65072     +       class &classvars;
65073     +      run;
65075     +      proc sort data=_classout; by NAME CRAW; run;
65076     +      proc sort data=_classout2; by NAME CRAW; run;
65078     +      data _classout;
65079     +        length _variable_ $32;
65080     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
65081     +        by NAME CRAW;
65082     +       _variable_ = NAME;
65083     +      run;
65085     +      proc sort data=_classout; by _variable_ _split_value_; run;
65086     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
65088     +      data &EM_USER_SPLITVALS;
65089     +        length _norm_level_ $200 _split_value_ $200;
65090     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
65091     +        by _variable_ _split_value_;
65092     +        LEVEL = trim(left(LEVEL));
65093     +        _split_value_ = trim(left(_split_value_));
65094     +        _norm_level_ = trim(left(_norm_level_));
65095     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
65096     +        drop NAME FREQUENCY TYPE CRAW NRAW;
65097     +      run;
65099     +      proc datasets library=work nolist;
65100     +        delete _classout _classout2;
65101     +      run;
65102     +      quit;
65103     +    %end;
65105     +    data &EM_USER_SPLITVALS;
65106     +      set &EM_USER_SPLITVALS;
65107     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
65108     +    run;
65111     +    proc sort data=&EM_USER_SPLITVALS;
65112     +      by DISPLAY_VAR _Group_;
65113     +    run;
65115     +    proc datasets library=work nolist;
65116     +      delete sortedmapping tempsplitvals tempmissvalues
65117     +      %if &useImport eq 1 %then %do;
65118     +        tempImport
65119     +      %end;
65120     +      %if &useFreeze eq 1 %then %do;
65121     +        tempFreeze
65122     +      %end;
65123     +      ;
65124     +    run;
65125     +    quit;
65126     +/*
65127     +%end;
65128     +%else %do;
65129     +    data &bindata;
65130     +      set &input;
65131     +    run;
65132     +%end;
65133     +*/
65134     +%mend EM_QUANTILE_BINNING;
65136     +%macro EM_ORDVARS_GROUP;
65138     +   /* retrieve all ordinal variables from the incoming dataset */
65139     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
65140     +     by NAME;
65141     +     where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
65142     +   run;
65144     +   /* add all vars marked as interval that are actually class vars to this data */
65145     +   %let nobs = 0;
65146     +   %let dsid = %sysfunc(open(WORK._DISCRETEMID));
65147     +   %if &dsid %then %do;
65148     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
65149     +     %if &nobs gt 0 %then %do;
65151     +     data tempvars;
65152     +       set &EM_DATA_VARIABLESET;
65153     +       if NAME in (
65154     +         %let obs = %sysfunc(fetch(&dsid));
65155     +         %do %while(&obs=0);
65156     +           %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
65157     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
65158     +           "&varname"
65159     +           %let obs = %sysfunc(fetch(&dsid));
65160     +         %end;
65161     +        );
65162     +     run;
65163     +     data tempvariableset;
65164     +       set tempvariableset tempvars;
65165     +     run;
65166     +     %end;
65167     +   %end;
65168     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65170     +   %if &useImport eq 1 %then %do;
65171     +     /* remove all variables from tempvariableset that are included in the importsubset */
65172     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
65173     +       by _VARIABLE_ ;
65174     +     run;
65175     +     proc sort data=tempvariableset; by NAME; run;
65177     +     data tempvariableset;
65178     +       merge tempimport(in=_a) tempvariableset(in=_b);
65179     +       by NAME;
65180     +       if ^_a then output;
65181     +     run;
65182     +   %end;
65184     +   %if &useFreeze eq 1 %then %do;
65185     +     /* remove all variables from tempvariableset that are included in the freezesubset */
65186     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
65187     +       by _VARIABLE_ ;
65188     +     run;
65189     +     proc sort data=tempvariableset; by NAME; run;
65191     +     data tempvariableset;
65192     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
65193     +       by NAME;
65194     +       if ^_a then output;
65195     +     run;
65196     +   %end;
65198     +   /* get dataset of distinct values for the ordinal variable */
65199     +   %let nobs = 0;
65200     +   %let dsid = %sysfunc(open(WORK.tempvariableset));
65201     +   %if &dsid %then %do;
65202     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
65203     +     %if &nobs gt 0 %then %do;
65204     +         %let obs = %sysfunc(fetch(&dsid));
65205     +         %do %while(&obs=0);
65206     +           %let varnum = %sysfunc(VARNUM(&dsid, NAME));
65207     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
65208     +           %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
65209     +           %let input_type = %sysfunc(getvarc(&dsid, &typenum));
65210     +           %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
65211     +           %let input_fmt = %sysfunc(getvarc(&dsid, &fmtnum));
65212     +           %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
65213     +           %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
65214     +           %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
65216     +           data temp;
65217     +             set &EM_USER_BINDATA(keep=&varname);
65218     +             %if &input_fmt ne %then %do;
65219     +               %dmnormcp(put(&varname, &input_fmt), _norm);
65220     +             %end;
65221     +             %else %do;
65222     +               %dmnormcp(&varname, _norm);
65223     +             %end;
65224     +             keep &varname _norm;
65225     +           run;
65227     +          proc dmdb data=temp classout=_classout2;
65228     +           class _norm;
65229     +         run;
65230     +         proc sort data=_classout2; by LEVEL; run;
65232     +         /* re-order numeric inputs based on non-normalized values */
65233     +         %if &input_type eq N %then %do;
65234     +           proc sort data=temp nodupkey; by _norm; run;
65235     +           data varvals;
65236     +             merge temp _classout2(rename=(LEVEL=_norm));
65237     +             by _norm;
65238     +             if craw='' and _norm ne '.' then delete;
65239     +             keep &varname _norm nraw craw;
65240     +           run;
65242     +           proc sort data=varvals; by &varname; run;
65243     +         %end;
65244     +         %else %do;
65245     +           data varvals;
65246     +              set _classout2(rename=(LEVEL=_norm));
65247     +              if _norm='' then delete;
65248     +              if _norm='.' then delete;
65249     +              keep _norm;
65250     +           run;
65251     +         %end;
65252     +         data varvals;
65253     +           set varvals;
65254     +           if &varname="." then delete;
65255     +           if upcase(&varname) = "MISSING" then delete;
65256     +         run;
65258     +          /* generate Splitvals Data */
65259     +          data tempsplitvals;
65260     +            length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ _order_ 8 _level_ $8 _norm_level_ $200 ;
65262     +            %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
65263     +              DISPLAY_VAR="&varname";
65264     +              _VARIABLE_ ="&varname";
65265     +              newgroup   =.;
65266     +              _group_    =1;
65267     +              _Split_Value_="Missing";
65268     +              _level_    ="ORDINAL";
65269     +              output;
65270     +              %let group=2;
65271     +            %end;
65272     +            %else %let group=1;
65274     +            %let vdsid = %sysfunc(open(WORK.VARVALS));
65275     +            %if &vdsid %then %do;
65276     +            %let namenum = %sysfunc(VARNUM(&vdsid, _norm));
65277     +            /*%let group = 2;*/
65278     +            %let vobs = %sysfunc(fetch(&vdsid));
65279     +            %do %while(&vobs=0);
65280     +                %let nameval = %bquote(%upcase(%sysfunc(getvarc(&vdsid, &namenum))));
65282     +                DISPLAY_VAR   = "&varname";
65283     +                _variable_    = "&varname";
65284     +                newgroup      = .;
65285     +                _group_       = &group;
65286     +                _split_value_ = "&nameval";
65287     +                _level_       = 'ORDINAL';
65288     +                output;
65290     +              %let group = %eval(&group + 1);
65291     +              %let vobs = %sysfunc(fetch(&vdsid));
65292     +            %end;
65293     +            %if &vdsid %then %let vdsid = %sysfunc(close(&vdsid));
65294     +          run;
65296     +          /* determine if EM_USER_SPLITVALS already exists */
65297     +          %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
65298     +          %if &sdsid > 0 %then %do;
65299     +            %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
65300     +            %if &nvars > 0 %then %do;
65301     +               proc sql;
65302     +                reset noprint;
65303     +                select count(*) into :nobs from &EM_USER_SPLITVALS;
65304     +               quit;
65305     +            %end;
65306     +            %else %let nobs=0;
65307     +            %end;
65308     +            %else %do;
65309     +              %let nobs=0;
65310     +              %let nvars=0;
65311     +            %end;
65312     +          %end;
65313     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
65315     +          /* if tempsplitvals doesn't exist; create empty data set */
65316     +          %let sdsid = %sysfunc(open(work.tempsplitvals));
65317     +          %if &sdsid <= 0 %then %do;
65318     +            data tempsplitvals;
65319     +              length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ 8 _level_ $8 ;
65320     +            run;
65321     +          %end;
65322     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
65324     +          data tempsplitvals;
65325     +            set tempsplitvals;
65326     +            _order_ = _N_;
65327     +          run;
65329     +          %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
65330     +             proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
65331     +             proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
65332     +          %end;
65334     +          data &EM_USER_SPLITVALS;
65335     +           %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
65336     +             merge &EM_USER_SPLITVALS tempsplitvals;
65337     +             by _variable_ _split_value_;
65338     +           %end;
65339     +           %else %do;
65340     +             set tempsplitvals;
65341     +           %end;
65342     +           if display_var eq "" then delete;
65343     +           if _norm_level_ eq "" then _norm_level_ = _split_value_;
65344     +           keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_ _order_;
65345     +         run;
65347     +           %let obs = %sysfunc(fetch(&dsid));
65348     +         %end;
65349     +     %end;
65350     +   %end;
65351     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65353     +   proc sort data=&EM_USER_SPLITVALS;
65354     +      by DISPLAY_VAR _Group_;
65355     +   run;
65357     +   /* delete temporary datasets */
65358     +   proc datasets library= work nolist;
65359     +     delete tempsplitvals varvals tempvariableset tempvars
65360     +     ;
65361     +   run;
65362     +   quit;
65363     +%mend EM_ORDVARS_GROUP;
65366     +%macro EM_CLASSVARS_GROUP(groupRare);
65368     +   /* retrieve all class variables from the incoming dataset */
65369     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
65370     +     by NAME;
65371     +     where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
65372     +   run;
65374     +   %if &useImport eq 1 %then %do;
65375     +     /* remove all variables from tempvariableset that are included in the importsubset */
65376     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
65377     +       by _VARIABLE_ ;
65378     +     run;
65379     +     proc sort data=tempvariableset; by NAME; run;
65381     +     data tempvariableset;
65382     +       merge tempimport(in=_a) tempvariableset(in=_b);
65383     +       by NAME;
65384     +       if ^_a then output;
65385     +     run;
65386     +   %end;
65388     +   %if &useFreeze eq 1 %then %do;
65389     +     /* remove all variables from tempvariableset that are included in the freezesubset */
65390     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
65391     +       by _VARIABLE_ ;
65392     +     run;
65393     +     proc sort data=tempvariableset; by NAME; run;
65395     +     data tempvariableset;
65396     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
65397     +       by NAME;
65398     +       if ^_a then output;
65399     +     run;
65400     +   %end;
65402     +   /* run dmdb to retrieve list of all class levels and counts */
65403     +   %let dsid = %sysfunc(open(work.tempvariableset));
65404     +   %let nobs = 0;
65405     +   %if &dsid %then %do;
65406     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
65408     +   %end;
65410     +   %if &nobs gt 0 %then %do;
65411     +     proc dmdb data=&EM_IMPORT_DATA classout=tempclassout;
65412     +       class
65414     +        %let namenum = %sysfunc(VARNUM(&dsid, NAME));
65415     +        %let obs = %sysfunc(fetch(&dsid));
65416     +        %do %while(&obs=0);
65417     +           %let name = %sysfunc(getvarc(&dsid, &namenum));
65418     +           &name
65419     +           %let obs = %sysfunc(fetch(&dsid));
65420     +        %end;
65421     +     ;
65423     +     %if %EM_FREQ ne %then %do;
65424     +        freq %EM_FREQ;
65425     +     %end;
65426     +    run;
65427     +   %end;
65428     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65430     +   %let dsid = %sysfunc(open(work.tempclassout));
65431     +   %let nobs = 0;
65432     +   %if &dsid %then %do;
65433     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
65434     +     %let dsid = %sysfunc(close(&dsid));
65435     +   %end;
65437     +   %if &nobs gt 0 %then %do;
65438     +    data tempclassout;
65439     +       set tempclassout;
65440     +       if LEVEL='MISSING' then level='Missing';
65441     +    run;
65443     +    proc sort data=tempclassout nodupkey;
65444     +      by NAME descending FREQUENCY LEVEL;
65445     +    run;
65447     +    data tempds(keep=NAME NOBS);
65448     +      retain NOBS;
65449     +      set tempclassout;
65450     +      by NAME;
65451     +      if first.NAME then
65452     +        NOBS = frequency;
65453     +      else
65454     +        NOBS=NOBS+frequency;
65455     +      if last.name then do;
65456     +        output;
65457     +      end;
65458     +    run;
65460     +    data tempds;
65461     +      merge tempclassout
65462     +      tempds;
65463     +      by NAME;
65464     +      if ((LEVEL ne '') AND (LEVEL ne "."));
65465     +      %if &groupRare eq Y %then %do;
65466     +        PCT = 100 * (FREQUENCY/NOBS);
65467     +        if PCT < &EM_PROPERTY_GROUPCUTOFF then flag=1;
65468     +        else flag=0;
65469     +      %end;
65470     +      %else %do;
65471     +        flag = 0;
65472     +      %end;
65473     +    run;
65475     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
65476     +      data tempmissvalues;
65477     +        length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
65479     +      %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
65480     +      %if &dsid %then %do;
65481     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
65482     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
65483     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
65484     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
65485     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
65486     +        %let obs = %sysfunc(fetch(&dsid));
65488     +        %do %while(&obs=0);
65489     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
65490     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
65491     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
65492     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
65494     +          NAME="&var";
65495     +          LEVEL="Missing";
65496     +          _LEVEL_="&varlvl";
65497     +          _group_ = 1;
65498     +          output;
65500     +          %let obs = %sysfunc(fetch(&dsid));
65501     +        %end;
65502     +      %end;
65503     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65504     +      run;
65505     +    %end;
65507     +    /* generate Splitvals Data */
65508     +    data tempsplitvals;
65509     +      length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
65511     +      set tempclassout
65512     +      %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
65513     +         tempmissvalues
65514     +      %end;
65515     +      ;
65516     +      if ((level ne '') AND (level ne '.'));
65518     +     %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
65519     +     %if &dsid %then %do;
65520     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
65521     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
65522     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
65523     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
65524     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
65525     +        %let obs = %sysfunc(fetch(&dsid));
65527     +        %do %while(&obs=0);
65528     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
65529     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
65530     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
65531     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
65533     +          if NAME = "&var" then do;
65534     +            _LEVEL_ = "&varlvl";
65536     +          /* cycle through levels, assigning group values;              */
65537     +          /* flag=1 indicates to put value in "_OTHER_" group;          */
65538     +          /* flag=0 indicates that value shoudld be in group of its own */
65539     +          %let choice = ((NAME="&Var") and (FLAG=0));
65540     +          %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
65541     +            %let group=2;
65542     +          %end;
65543     +          %else %do;
65544     +            %let group = 1;
65545     +          %end;
65546     +          %let fdsid = %sysfunc(open(work.tempds(where=(&choice))));
65547     +          %if &fdsid %then %do;
65549     +            %let lvlnum = %sysfunc(VARNUM(&fdsid, LEVEL));
65550     +            %let fobs = %sysfunc(fetch(&Fdsid));
65551     +            %let fflag = 0;
65552     +            %do %while(&fobs=0);
65553     +              %let fflag = 1;
65554     +              %let temp = %nrbquote(%sysfunc(getvarc(&fdsid, &lvlnum)));
65555     +              %let level = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65556     +              %let level = %nrbquote(%sysfunc(strip(&level)));
65557     +              %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
65558     +                %if &group eq 2 %then %do;
65559     +                   if LEVEL = "&level" then _GROUP_ = &group;
65560     +                %end;
65561     +                %else %do;
65562     +                   else if LEVEL = "&level" then _GROUP_ = &group;
65563     +                %end;
65564     +              %end;
65565     +              %else %do;
65566     +                %if &group eq 1 %then %do;
65567     +                   if LEVEL = "&level" then _GROUP_ = &group;
65568     +                %end;
65569     +                %else %do;
65570     +                   else if LEVEL = "&level" then _GROUP_ = &group;
65571     +                %end;
65572     +              %end;
65574     +              %let group = %eval(&group + 1);
65575     +              %let fobs = %sysfunc(fetch(&fdsid));
65576     +            %end;
65578     +          %end;
65579     +          %if &fflag eq 1 %then %do;
65580     +            else if LEVEL ^='Missing' then _GROUP_ = &group;
65581     +          %end;
65582     +          end;
65584     +          %if &fdsid %then %let fdsid = %sysfunc(close(&fdsid));
65585     +          %let obs = %sysfunc(fetch(&dsid));
65586     +        %end;
65587     +     %end;
65588     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65589     +     _VARIABLE_ = NAME;
65590     +     newgroup = .;
65591     +     rename NAME = DISPLAY_VAR
65592     +            LEVEL = _SPLIT_VALUE_;
65593     +     keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
65594     +    run;
65595     +  %end;
65596     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
65598     +    /* determine if EM_USER_SPLITVALS already exists */
65599     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
65600     +    %if &sdsid > 0 %then %do;
65601     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
65602     +      %if &nvars > 0 %then %do;
65603     +        proc sql;
65604     +          reset noprint;
65605     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
65606     +        quit;
65607     +      %end;
65608     +      %else %let nobs=0;
65609     +    %end;
65610     +    %else %do;
65611     +       %let nobs=0;
65612     +       %let nvars=0;
65613     +    %end;
65614     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
65616     +   /* if tempsplitvals doesn't exist; create empty data set */
65617     +    %let sdsid = %sysfunc(open(work.tempsplitvals));
65618     +    %if &sdsid <= 0 %then %do;
65619     +      data tempsplitvals;
65620     +        length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
65621     +      run;
65622     +    %end;
65623     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
65625     +    %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
65626     +      proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
65627     +      proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
65628     +    %end;
65630     +    /* if useIMport=1 also include import definitions here as well */
65631     +    %if &useImport eq 1 %then %do;
65632     +      proc sort data=&EM_USER_IMPORTSUBSET; by _variable_ _split_value_; run;
65633     +    %end;
65634     +    %if &useFreeze eq 1 %then %do;
65635     +      proc sort data=&EM_USER_FREEZESUBSET; by _variable_ _split_value_; run;
65636     +    %end;
65637     +    data &EM_USER_SPLITVALS;
65638     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
65639     +        merge &EM_USER_SPLITVALS tempsplitvals
65640     +        %if &useImport eq 1 %then %do;
65641     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
65642     +        %end;
65643     +        %if &useFreeze eq 1 %then %do;
65644     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
65645     +        %end;
65647     +        ;
65648     +        by _variable_ _split_value_
65649     +        ;
65650     +      %end;
65651     +      %else %do;
65652     +        set tempsplitvals
65653     +        %if &useImport eq 1 %then %do;
65654     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
65655     +        %end;
65656     +        %if &useFreeze eq 1 %then %do;
65657     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
65658     +        %end;
65659     +        ;
65660     +      %end;
65661     +      if display_var eq "" then delete;
65662     +      if _norm_level_ eq "" then _norm_level_ = _split_value_;
65663     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
65664     +    run;
65666     +    proc sort data=&EM_USER_SPLITVALS;
65667     +      by DISPLAY_VAR _Group_;
65668     +    run;
65670     +   /* delete temporary datasets */
65671     +   proc datasets library= work nolist;
65672     +     delete tempsplitvals tempds tempclassout tempvariableset tempvars
65673     +     %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
65674     +       tempmissvalues
65675     +     %end;
65676     +     ;
65677     +   run;
65678     +   quit;
65679     +%mend EM_CLASSVARS_GROUP;
65682     +%macro EM_SUMMARIZE_TABLE(data, inputData, outData, varname=);
65684     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
65686     +  data temptrain ;
65687     +    set &data;
65688     +  run;
65690     +  /* normalize all values prior to calculating counts */
65691     +  filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
65692     +  %include _temp;
65693     +  filename _temp;
65694     +  filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
65695     +  %include _temp;
65696     +  filename _temp;
65698     +  proc sort data=&EM_USER_VARMAPPINGS
65699     +  %if &varname ne %then %do;
65700     +    (where=(_variable_="&varname"))
65701     +  %end;
65702     +  out=tempmap; by _variable_; run;
65704     +  data _cmeta;
65705     +    merge tempvarset tempmap(in=_a rename=(_variable_=name ));
65706     +    by name;
65707     +    if ((_a) or (role="TARGET"));
65708     +    if role="INPUT" then name=_proc_var_;
65709     +    if role="TARGET" then role="INPUT";
65710     +    level = procLevel;
65711     +    index = kindex(name, "BIN_");
65712     +    if index gt 0 then do;
65713     +     level="ORDINAL";
65714     +     format = "";
65715     +    end;
65716     +    drop index;
65717     +  run;
65719     +  %em_PreNormalizeClassVars(incmeta=_cmeta, outcmeta=_cmetatmp);
65720     +  %em_NormalizeClassVars(indata=work.temptrain, cmeta=_cmetatmp, encodedTarget=N, outdata=_tmp_train);
65722     +  proc sort data=&inputData out=sortedmap; by _proc_var_; run;
65724     +  data _null_;
65725     +    set sortedmap end=eof;
65726     +    by _proc_var_;
65727     +    if _n_=1 then do;
65728     +      call execute("ods output CrossTabFreqs=crosstabfreq ;");
65729     +      call execute("proc freq data=_tmp_train order=formatted addnames;");
65730     +      call execute("tables ("||_proc_var_);
65731     +    end;
65732     +    else do;
65733     +      call execute(_proc_var_);
65734     +    end;
65735     +    if eof then do;
65736     +      call execute(") * %EM_BINARY_TARGET/ missing;");
65737     +      %if %EM_FREQ ne %then %do;
65738     +        call execute("weight %EM_FREQ;");
65739     +      %end;
65740     +      call execute("run;");
65741     +      call execute("ods output close;");
65742     +    end;
65743     +  run;
65745     +  data _null_;
65746     +    set sortedmap end=eof;
65747     +    by _proc_var_;
65748     +    if _n_=1 then do;
65749     +      call execute("data crosstabs;");
65750     +      call execute("  length _variable_ _split_value_  $200 ;");
65751     +      call execute("  set crosstabfreq(where=(_type_='11'));");
65752     +      call execute("  _variable_= RowVariable;");
65753     +    end;
65755     +    call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
65756     +    call execute("  _split_value_="||_proc_var_||";");
65757     +    call execute("end;");
65759     +    if eof then do;
65760     +      call execute("keep _variable_ _split_value_ %EM_BINARY_TARGET Frequency Percent display_var;");
65761     +      call execute("run;");
65762     +    end;
65763     +  run;
65765     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
65767     +  data crosstabs;
65768     +    length display_var $32;
65769     +    merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
65770     +    by _variable_;
65771     +  run;
65773     +  proc sort data=crosstabs; by display_var _split_value_; run;
65774     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
65776     +  data crosstabs;
65777     +    merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
65778     +    by display_var;
65779     +    index = kindex(_variable_, "BIN_");
65780     +    if index gt 0 then do;
65781     +     level="ORDINAL";
65782     +     format = "";
65783     +    end;
65784     +    _temp = %EM_BINARY_TARGET;
65785     +    /*
65786     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
65787     +      %if &target_format ne %then %do;
65788     +        %if &target_type eq C %then %do;
65789     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
65790     +        %end;
65791     +        %else %do;
65792     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
65793     +        %end;
65794     +      %end;
65795     +      %else %do;
65796     +        %dmnormcp(%EM_BINARY_TARGET, _temp);
65797     +      %end;
65798     +    %end;
65799     +    %else %do;
65800     +      _temp = %EM_BINARY_TARGET;
65801     +    %end;
65802     +*/
65804     +    drop index;
65805     +  run;
65807     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
65809     +  data &outdata;
65810     +    length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate  8 type $1 valfmt $20 ;
65812     +    retain eventCount noneventCount ;
65813     +    set crosstabs;
65814     +    by  _variable_ _split_value_;
65816     +    if first._split_value_ then do;
65817     +     total=0;
65818     +     eventcount=0;
65819     +     noneventcount=0;
65820     +    end;
65822     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
65823     +      %if &target_format ne %then %do;
65824     +        if upcase(strip(_temp))="&target_event" then
65825     +          eventCount=Frequency;
65826     +      %end;
65827     +      %else %do;
65828     +         if upcase(strip(_temp)) ="&target_event" then
65829     +          eventCount=Frequency;
65830     +      %end;
65831     +    %end;
65832     +    %else %do;
65833     +      if _temp=&target_event then
65834     +        eventCount=Frequency;
65835     +    %end;
65836     +    else
65837     +      noneventCount=Frequency;
65839     +    if last._split_value_ then do;
65840     +      total = eventCount + noneventCount;
65842     +      if total ne 0 then do;
65843     +        eventRate = eventCount / total;
65844     +        nonEventRate = nonEventCount / total;
65845     +      end;
65846     +      else do;
65847     +        eventRate = 0;
65848     +        nonEventRate = 0;
65849     +      end;
65852     +     output;
65853     +    end;
65854     +    valfmt = format;
65856     +    drop _temp Frequency percent;
65857     +   run;
65859     +%mend EM_SUMMARIZE_TABLE;
65862     +%macro EM_FINE_DETAIL(bindata, varmappings, fineDetailData, splitVals, binMappings, interactiveFlag=0);
65864     +   proc freq data=&bindata noprint;
65865     +     table %EM_BINARY_TARGET / missing out=temptargetB;
65866     +     %if %EM_FREQ ne %then %do;
65867     +       weight %EM_FREQ;
65868     +     %end;
65869     +   run;
65871     +   %let tdsid = %sysfunc(open(work.temptargetB));
65872     +   %if &tdsid %then %do;
65873     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
65874     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
65876     +      %let temp = %nrbquote(%sysfunc(strip(&target_event)));
65877     +      %let target_event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65878     +      %let temp = %nrbquote(%sysfunc(strip(&target_nonevent)));
65879     +      %let target_nonevent = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65882     +      %let obs = %sysfunc(fetch(&tdsid));
65883     +      %do %while(&obs = 0);
65884     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
65885     +           %if &target_type eq C %then %do;
65886     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
65887     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65888     +           %end;
65889     +           %else
65890     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
65892     +           %if &target_format ne %then %do;
65893     +              %if &target_type eq C %then %do;
65894     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
65895     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
65896     +              %end;
65897     +              %else
65898     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
65899     +           %end;
65900     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
65901     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
65903     +           %if "&tarvalue" eq "&target_event" %then %do;
65904     +             %let totalevent = &count;
65905     +           %end;
65906     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
65907     +              %let totalnonevent= &count;
65908     +           %end;
65909     +         %end;
65910     +         %else %do;
65911     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
65912     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
65914     +           %if &tarvalue eq &target_event %then %do;
65915     +             %let totalevent = &count;
65916     +           %end;
65917     +           %else %if &tarvalue eq &target_nonevent %then %do;
65918     +              %let totalnonevent= &count;
65919     +           %end;
65920     +         %end;
65921     +         %let obs = %sysfunc(fetch(&tdsid));
65922     +      %end;
65923     +   %end;
65924     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
65926     +   proc datasets lib=work nolist;
65927     +      delete temptargetB;
65928     +   run;
65929     +   quit;
65931     +   %if &interactiveFlag eq 0 %then %do;
65932     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData);
65933     +   %end;
65934     +   %else %do;
65935     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData, varname=&wherevar);
65936     +   %end;
65939     +   data &fineDetailData;
65940     +     length display_var $32 newgroup numsplitval 8;
65941     +     set &fineDetailData;
65943     +     display_var = _variable_;
65945     +     index = kindex(display_var, "BIN_");
65946     +     if index gt 0 then do;
65947     +       display_var = ksubstr(display_var, 5);
65948     +     end;
65950     +     index2 = kindex(display_var, "SV_");
65951     +     if index2 gt 0 then do;
65952     +       display_var = ksubstr(display_var, 4);
65953     +     end;
65955     +     /* re-code missing values to "Missing" */
65956     +     if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
65957     +     _index_ = _N_;
65958     +     newgroup = .;
65959     +     drop index index2 ;
65960     +   run;
65962     +   /* add group information to fineDetailData; */
65963     +   /* add label information for binned variables to fineDetailData*/
65965     +   proc sort data=&fineDetailData; by _variable_ _split_value_; run;
65967     +   data tmpsplitvals;
65968     +     set &splitvals;
65969     +     _norm_level_ = upcase(_norm_level_);
65970     +     if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
65971     +    * drop _split_value_;
65972     +   run;
65974     +   proc sort data=tmpsplitvals out=sortedsplit; by _variable_ _split_value_; run;
65975     +   proc datasets library=work nolist;
65976     +     delete tmpsplitvals;
65977     +   run;
65978     +   quit;
65980     +   proc sort data=&BINMAPPINGS out=sortedbin; by BIN_NAME BIN; run;
65982     +   data &fineDetailData;
65983     +      merge &fineDetailData(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
65984     +      by _variable_ _split_value_;
65985     +      if _a then do;
65986     +        binFlag = 1;
65987     +        VALUE=EM_BIN_LABEL;
65988     +      end;
65989     +      else do;
65990     +        binFlag = 0;
65991     +        *VALUE=strip(display_var)!!"="!!strip(_split_value_);
65992     +        VALUE=strip(_split_value_);
65994     +      end;
65996     +      if ((eventCount=.) or (nonEventCount=.)) then do;
65997     +        eventCount=0;
65998     +        nonEventCount=0;
65999     +        total = 0;
66000     +        eventRate= 0;
66001     +        nonEventRate = 0;
66002     +      end;
66004     +      eventCount = round(eventCount, .001);
66005     +      nonEventCount = round(nonEventCount, .001);
66006     +      total= round(total, .001);
66007     +      eventRate = round(eventRate, .001);
66008     +      nonEventRate = round(nonEventRate, .001);
66010     +     if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then
66011     +         numsplitval = _split_value_;
66012     +     else if ((type='N') AND (valfmt ne "")) then
66013     +        numsplitval = _order_;
66014     +     else numsplitval=.;
66016     +      if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
66017     +      if _a and ^_b then delete;
66018     +      if _c and ^_b then delete;
66019     +      drop NAME EM_BIN_LABEL valfmt;
66020     +   run;
66022     +   /* for class variables that have values falling into the "other" category, set _LEVEL_ and _GROUP_ based on Missing level */
66023     +   data &fineDetailData;
66024     +     set &fineDetailData;
66026     +     %let choice = _LEVEL_ ne "INTERVAL" and _SPLIT_VALUE_ eq "Missing";
66027     +     %let dsid = %sysfunc(open(&splitvals(where=(&choice))));
66028     +     %if &dsid %then %do;
66029     +       %let dnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
66030     +       %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
66031     +       %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
66033     +       %let obs = %sysfunc(fetch(&dsid));
66034     +       %do %while(&obs=0);
66035     +         %let dispvar = %sysfunc(getvarc(&dsid, &dnum));
66036     +         %let lvl     = %sysfunc(getvarc(&dsid, &lvlnum));
66037     +         %let group   = %sysfunc(getvarn(&dsid, &grpnum));
66039     +         if DISPLAY_VAR = "&dispvar" then do;
66040     +           if _LEVEL_ = "" then _LEVEL_ ="&lvl";
66041     +           if _GROUP_ = . then _GROUP_ = &group;
66042     +         end;
66044     +         %let obs = %sysfunc(fetch(&dsid));
66045     +       %end;
66046     +     %end;
66047     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
66048     +     if _GROUP_ = . then delete;
66049     +    * if binFlag=1 and UB=LB then delete;
66050     +    * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
66051     +   run;
66053     +   proc sort data=&fineDetailData;
66054     +     by DISPLAY_VAR _index_;
66055     +   run;
66057     +   proc datasets lib=work nolist;
66058     +     delete sortedsplit sortedbin
66059     +     ;
66060     +   run;
66061     +   quit;
66062     +%mend EM_FINE_DETAIL;
66064     +%macro EM_CREATE_GROUPING(bindata, fineDetailData, coarse);
66066     +   proc freq data=&bindata noprint;
66067     +     table %EM_BINARY_TARGET / missing out=temptargetC;
66068     +     %if %EM_FREQ ne %then %do;weight %EM_FREQ;
66069     +     %end;
66070     +   run;
66072     +   %let tdsid = %sysfunc(open(work.temptargetC));
66073     +   %if &tdsid %then %do;
66074     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
66075     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
66077     +      %let obs = %sysfunc(fetch(&tdsid));
66078     +      %do %while(&obs = 0);
66079     +        /* %if &target_type eq C or &target_format ne %then %do; */
66080     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
66081     +           %if &target_type eq C %then %do;
66082     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
66083     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
66084     +           %end;
66085     +           %else
66086     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
66088     +           %if &target_format ne %then %do;
66089     +              %if &target_type eq C %then %do;
66090     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
66091     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
66092     +              %end;
66093     +              %else
66094     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
66095     +           %end;
66096     +           %let tarvalue =%nrbquote(%upcase(&tarvalue));
66097     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
66099     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
66100     +           %let target_event = %nrbquote(%sysfunc(strip(&target_event)));
66101     +           %let target_nonevent = %nrbquote(%sysfunc(strip(&target_nonevent)));
66103     +           %if "&tarvalue" eq "&target_event" %then %do;
66104     +             %let totalevent = &count;
66105     +           %end;
66106     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
66107     +              %let totalnonevent= &count;
66108     +           %end;
66109     +         %end;
66110     +         %else %do;
66111     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
66112     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
66114     +           %if &tarvalue eq &target_event %then %do;
66115     +             %let totalevent = &count;
66116     +           %end;
66117     +           %else %if &tarvalue eq &target_nonevent %then %do;
66118     +              %let totalnonevent= &count;
66119     +           %end;
66120     +         %end;
66121     +         %let obs = %sysfunc(fetch(&tdsid));
66122     +      %end;
66123     +   %end;
66124     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
66126     +   proc datasets lib=work nolist;
66127     +      delete temptargetC;
66128     +   run;
66129     +   quit;
66131     +   proc means data=&FINEDETAILDATA noprint;
66132     +      var eventCount nonEventCount;
66133     +      class _variable_  _group_;
66134     +      output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
66135     +   run;
66137     +   proc sort data=summ(drop=_type_ _freq_);
66138     +     by _variable_ _group_;
66139     +   run;
66141     +   data gini(keep=_variable_ eventCount nonEventCount groupresprate)
66142     +        tempcoarse(keep=_variable_  _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
66143     +        set summ;
66144     +        format groupresprate 6.2;
66145     +        format groupnonresprate 6.2;
66146     +        by _variable_ ;
66147     +        if _group_=. then do;
66148     +        end;
66149     +        else do;
66150     +           respper = eventCount / &totalEvent;
66151     +           nrespper = nonEventCount / &totalNonEvent;
66153     +           if ((nonEventCount = 0) AND (eventCount = 0)) then do;
66154     +                groupresprate=0;
66155     +                groupNonresprate = 0;
66156     +                eventRate = 0;
66157     +                nonEventRate = 0;
66158     +           end;
66159     +           else do;
66160     +               groupresprate = eventCount / (eventCount + nonEventCount) * 100;
66161     +               groupNonRespRate = 100 - groupRespRate;
66162     +               eventRate = eventCount / &totalEvent * 100;
66163     +               nonEventRate = nonEventCount / &totalNonEvent * 100;
66164     +            end;
66166     +           output gini tempcoarse;
66168     +        end;
66169     +   run;
66170     +   proc sort data=gini;
66171     +      by _variable_ descending groupresprate;
66172     +   run;
66174     +   data gini(keep= _variable_ _gini_);
66175     +     retain between within cumresp cumnresp;
66176     +     set gini(keep=_variable_  eventCount nonEventCount);
66177     +     by _variable_;
66178     +     if first._variable_ then do;
66179     +       between  = 0;
66180     +       within   = 0;
66181     +       cumresp  = 0;
66182     +       cumnresp = 0;
66183     +     end;
66184     +     between + 2 * cumnresp * eventCount;
66185     +     within + nonEventCount * eventCount;
66186     +     cumresp + eventCount;
66187     +     cumnresp + nonEventCount;
66188     +     if last._variable_ then do;
66189     +       if ^(cumnresp=0 or cumresp=0) then do;
66190     +         _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
66191     +         output;
66192     +       end;
66193     +     end;
66194     +   run;
66196     +   data tempdisplayvar;
66197     +      set &EM_USER_VARMAPPINGS;
66198     +      rename _variable_ = display_var
66199     +      _proc_var_ = _variable_;
66200     +   keep _variable_ _proc_var_ label;
66201     +   run;
66202     +   proc sort data=tempdisplayvar; by _variable_; run;
66204     +   data  &COARSE;
66205     +     length display_Var $32 label _label_ $200 role $10 _group_ 8;
66206     +     merge tempdisplayvar tempcoarse gini ;
66207     +     by _variable_;
66208     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
66209     +           eventRate   = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventrate_vlabel , NOQUOTE))"
66210     +           nonEventRate = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventrate_vlabel , NOQUOTE))"
66211     +           _group_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel , NOQUOTE))"
66212     +           role       = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel , NOQUOTE))"
66213     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_gini_vlabel  , NOQUOTE))"
66214     +           eventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventcount_vlabel  , NOQUOTE))"
66215     +           noneventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventcount_vlabel  , NOQUOTE))"
66216     +           groupresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupresprate_vlabel  , NOQUOTE))"
66217     +           groupnonresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupnonresprate_vlabel  , NOQUOTE))"
66218     +           ;
66220     +    eventCount = round(eventCount, .001);
66221     +    nonEventCount = round(nonEventCount, .001);
66222     +    groupRespRate = round(groupRespRate, .001);
66224     +     drop _variable_ index index2 respper nrespper;
66225     +   run;
66227     +   proc datasets library=work nolist;
66228     +     delete  tempcoarse gini             ;
66230     +   run;
66231     +   quit;
66233     +%mend EM_CREATE_GROUPING;
66237     +%macro EM_GENERATE_LABELVALUES(filename, splitvals, binmappings, coarse);
66239     +         data _null_;
66240     +            FILE &filename;
66241     +            put " length _LABEL_ $200;";
66242     +            put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
66243     +         run;
66245     +         proc sort data=&SPLITVALS out=work.sortedsplitval; by display_var _split_Value_; run;
66246     +         proc sort data=&BINMAPPINGS; by display_var bin; run;
66248     +         data temp;
66249     +           merge work.sortedsplitval(in=_a) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
66250     +           by Display_Var _Split_value_;
66251     +           if upcase(_Split_value_) ne 'MISSING';
66252     +           if _a then output;
66253     +           if display_var eq '' then delete;
66254     +         run;
66256     +         data temp_missing;
66257     +           merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
66258     +           by Display_Var _Split_value_;
66259     +           if upcase(_Split_value_) eq 'MISSING';
66260     +           if _a then output;
66261     +           keep _variable_ display_var missgrp;
66262     +         run;
66264     +         proc sort data=temp out=class;
66265     +            by _variable_ _group_ LB;
66266     +         run;
66268     +         data _null_;
66270     +            file &filename MOD;
66271     +            length string $200 flag 8;
66272     +            retain string flag;
66273     +            set class end=eof;
66274     +            by _variable_  _group_;
66276     +            index = kindex(_variable_, "BIN_");
66277     +            if index gt 0 then do;
66278     +              if first._group_ then do;
66279     +                flag = 0;
66280     +                if ^first._variable_ then
66281     +                    put 'else';
66282     +                 else
66283     +                    put ' ';
66285     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
66286     +                          !!strip(put(_GROUP_,best12.))!!' then do;';
66287     +                 put string;
66289     +                 if LB ne . then do;
66290     +                   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
66291     +                    string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
66292     +                 end;
66293     +                 else do;
66294     +                    flag = 1;
66295     +                    *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
66296     +                    string = " _LABEL_='"!!strip(DISPLAY_VAR);
66297     +                 end;
66299     +              end;
66300     +              if last._Group_ then do;
66301     +                 if UB ne . then do;
66302     +                    string = strip(string)!!'< '!!strip(UB)!!"';";
66303     +                 end;
66304     +                 else do;
66305     +                    if flag=1 then do;
66306     +                      string = strip(string)!!"';";
66307     +                     /* string = strip(string)!!'='!!strip(_split_Value_)!!"';";*/
66308     +                    end;
66309     +                    else do;
66310     +                      string = strip(string)!!"';";
66311     +                    end;
66312     +                 end;
66313     +                 put string;
66315     +                 string= " UB="!!strip(UB)!!";";
66316     +                 put string;
66317     +                 put "end;";
66320     +              end;
66321     +            end;
66322     +            else do;
66323     +              _split_value_ = tranwrd(_split_value_,"'","''");
66324     +              if first._group_ then do;
66325     +                 flag = 0;
66326     +                 if ^first._variable_ then
66327     +                    put 'else';
66328     +                 else
66329     +                    put ' ';
66330     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
66331     +                          !!strip(put(_GROUP_,best12.))!!' then';
66332     +                 put string;
66333     +                 string = "_LABEL_='"!!strip(_split_value_);
66334     +              end;
66335     +              else do;
66336     +                 if flag ne 1 then do;
66337     +                   tempstring = strip(string)!!', '!!strip(_split_value_);
66338     +                   length = length(tempstring);
66340     +                   if length < 195 then do;
66341     +                      string = tempstring;
66342     +                   end;
66343     +                   else do;
66344     +                      string = strip(string)||",...";
66345     +                      flag=1;
66346     +                   end;
66347     +                 end;
66348     +              end;
66350     +              if last._group_ then do;
66351     +                 string = strip(string)!!"';";
66352     +                 put string;
66353     +              end;
66354     +            end;
66355     +         run;
66357     +         data &COARSE;
66358     +           set &COARSE;
66359     +          /* %inc Y; */
66360     +           %inc &filename;
66361     +         run;
66362     +         *filename Y;
66364     +         /* add missing to appropriate label - based on temp_missing data */
66365     +         data &COARSE;
66366     +           set &COARSE;
66368     +           %let dsid = %sysfunc(open(work.temp_missing));
66369     +           %if &dsid %then %do;
66370     +              %let varnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
66371     +              %let grpnum = %sysfunc(VARNUM(&dsid, MISSGRP));
66373     +              %let obs = %sysfunc(fetch(&dsid));
66374     +              %do %while(&obs=0);
66375     +                 %let var = %sysfunc(getvarc(&dsid, &varnum));
66376     +                 %let grp = %sysfunc(getvarn(&dsid, &grpnum));
66378     +                 if DISPLAY_VAR = "&var" and _GROUP_ = &grp then do;
66379     +                   if _LABEL_ eq '' then do;
66380     +                     _LABEL_ = "Missing";
66381     +                   end;
66382     +                   else do;
66383     +                     _LABEL_ = strip(_LABEL_)!!", Missing";
66384     +                   end;
66385     +                 end;
66386     +                 %let obs = %sysfunc(fetch(&dsid));
66387     +              %end;
66388     +           %end;
66389     +           %if &dsid %then %let dsid = %sysfunc(close(&dsid));
66390     +         run;
66392     +         proc datasets library=work nolist;
66393     +           delete class temp temp_missing;
66394     +         run;
66395     +         quit;
66397     +%mend EM_GENERATE_LABELVALUES;
66399     +%macro calcValidationCoarse(input, output, varmappings, resultsTable);
66402     +%mend calcValidationCoarse;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename trtemp;
NOTE: Fileref TRTEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data temp;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where NAME =
MPRINT(TRAIN):  "DepVar";
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE NAME='DepVar';
NOTE: The data set WORK.TEMP has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc dmdb data=EMWS8.Part_TRAIN classout=EVENTOUT;
MPRINT(TRAIN):   target
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  (DESC);
MPRINT(TRAIN):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.EVENTOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   dsid = open("EVENTOUT");
MPRINT(TRAIN):   if dsid>0 then do;
MPRINT(TRAIN):   levelnum = VARNUM(dsid, "LEVEL");
MPRINT(TRAIN):   if levelnum then do;
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_EVENT', strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   dsid=close(dsid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete eventout;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK.EVENTOUT (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_FINEDETAILDATA;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_FINEDETAILDATA (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):   data tempvarnames;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
MPRINT(TRAIN):   keep NAME LEVEL LABEL;
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK.TEMPVARNAMES has 33 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
MPRINT(TRAIN):   names NAME;
MPRINT(TRAIN):   prefix WOE_ GRP_ ;
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 33 observations and 3 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempmapping;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 33 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=tempvarnames;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPVARNAMES has 33 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data tempmapping;
MPRINT(TRAIN):   merge tempmapping tempvarnames;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   rename LEVEL=procLevel;
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPMAPPING.
NOTE: There were 33 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 33 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_MAPPING_TABLE):  ;
MPRINT(EM_GENERATE_MAPPING_TABLE):   data EMWS8.BINNING_VARMAPPINGS(keep=_variable_ _grp_variable_ procLevel label);
MPRINT(EM_GENERATE_MAPPING_TABLE):   length _variable_ _grp_variable_ $32 procLevel $8;
MPRINT(EM_GENERATE_MAPPING_TABLE):   set tempmapping;
MPRINT(EM_GENERATE_MAPPING_TABLE):   label _variable_ = "Input Variable" _grp_variable_ = "Group Variable";
MPRINT(EM_GENERATE_MAPPING_TABLE):   _variable_ = NAME;
MPRINT(EM_GENERATE_MAPPING_TABLE):   _grp_variable_ = GRP;
MPRINT(EM_GENERATE_MAPPING_TABLE):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 33 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete tempImport tempScore;
MPRINT(TRAIN):   run;

NOTE: The file WORK.TEMPIMPORT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSCORE (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_SPLITVALS;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_SPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   data tempvariableset;
MPRINT(EM_PRE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_PRE_BINNING):   where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 24 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 24 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   proc dmdb data=EMWS8.Part_TRAIN classout=_CLASSOUT maxlevel=5;
MPRINT(EM_PRE_BINNING):   class AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth;
MPRINT(EM_PRE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK._CLASSOUT has 116 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   proc freq data=_CLASSOUT order=DATA noprint;
MPRINT(EM_PRE_BINNING):   table NAME / OUT= _COUNT(where=(COUNT<5));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 116 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   set _COUNT;
MPRINT(EM_PRE_BINNING):   call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc sort data=_CLASSOUT;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 116 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 116 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(EM_PRE_BINNING):   var NRAW;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 116 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._OUT has 24 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   dsid = open('_OUT');
MPRINT(EM_PRE_BINNING):   if dsid then do;
MPRINT(EM_PRE_BINNING):   call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(EM_PRE_BINNING):   csid = close(dsid);
MPRINT(EM_PRE_BINNING):   end;
MPRINT(EM_PRE_BINNING):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _INTMID;
MPRINT(EM_PRE_BINNING):   set _OUT;
MPRINT(EM_PRE_BINNING):   keep VARIABLE _MIDPOINT1--_MIDPOINT5 ;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 24 observations read from the data set WORK._OUT.
NOTE: The data set WORK._INTMID has 24 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   label procLevel = "Level for Interactive";
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 33 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename temp catalog 'sashelp.emapps.quantile_binning.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMAPPS.QUANTILE_BINNING.SOURCE.
66407     +%macro em_apps_quantile_binning(input, vartable, numbins, binmappings, binningCode, codeMappings=, precision=0.01, dropOriginal=N);
66409     +  /* initialize binmappings table */
66410     +  data &BINMAPPINGS;
66411     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
66412     +  run;
66414     +  /* process only INTERVAL INPUTS */
66415     +  data tempvars;
66416     +    set &vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
66417     +  run;
66419     +  /* retrieve the name of interval inputs to bin */
66420     +  filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
66421     +  %include tempopen;
66422     +  filename tempopen;
66424     +  %let intvars = ;
66425     +  %global num_intvars;
66426     +  %let num_intvars = 0;
66427     +  %em_varmacro(name=intvars, metadata=tempvars, key=NAME, nummacro=num_intvars);
66429     +  /* retrieve the name of frequency variable if it exists */
66430     +  %let em_bin_freq = ;
66431     +  %let choice = ROLE="FREQ";
66432     +  %let fdsid = %sysfunc(open(&vartable(where=(&choice))));
66433     +  %if &fdsid %then %do;
66434     +    %let fvarnum = %sysfunc(VARNUM(&fdsid, NAME));
66435     +    %let fobs = %sysfunc(fetch(&fdsid));
66436     +    %do %while(&fobs=0);
66437     +       %let em_bin_freq = %sysfunc(getvarc(&fdsid, &fvarnum));
66438     +       %let fobs = %sysfunc(fetch(&fdsid));
66439     +    %end;
66440     +  %end;
66441     +  %if &fdsid >0 %then %let fdsid = %sysfunc(close(&fdsid));
66443     +  /* process all inputs */
66444     +  %if &num_intvars > 0 %then %do;
66446     +    /* Computing quantile binning of interval inputs */
66447     +    %let numbin = %eval(&NUMBINS - 1);
66448     +    %let optstr=;
66449     +    %do i=1 %to &numbin;
66450     +       %let optstr = &optstr %eval(&i*100/&&NUMBINS);
66451     +    %end;
66453     +    data tempInt / view = tempInt;
66454     +      set &input(keep= %intvars
66455     +      %if &em_bin_freq ne %then %do;
66456     +        &em_bin_freq
66457     +      %end;
66458     +      );
66459     +    run;
66461     +    proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=&optstr;
66462     +       var %intvars;
66463     +       %if &em_bin_freq ne %then %do;
66464     +          freq &em_bin_freq;
66465     +       %end;
66466     +    run;
66468     +    proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
66469     +    run;
66471     +    /* generate unique BIN_xxx names for all inputs processed */
66472     +    proc dmdb data=tempvars outtable=tempmapping nameserver;
66473     +     names NAME;
66474     +     prefix BIN_ ;
66475     +    run;
66477     +    proc sort data=tempmapping(keep=NAME bin); by NAME; run;
66478     +    proc sort data=work.pctdata; by _NAME_; run;
66479     +    %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
66480     +      proc sort data=&codemappings nodupkey out=tempcodemappings(keep= codeVar variable) ; by codeVar; run;
66481     +    %end;
66483     +    data tempbins;
66484     +      length display_var $32;
66485     +      merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar))
66486     +      %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
66487     +         tempcodemappings(rename=(codeVar=_name_ variable=display_var))
66488     +      %end;
66489     +      ;
66490     +      by _NAME_;
66491     +      if _a;
66492     +      if missing(display_var) then display_var = _NAME_;
66493     +    run;
66495     +    /* generate BINMAPPINGS dataset and binningCode file*/
66496     +    data _null_;
66497     +      FILE &binningCode;
66498     +      set tempbins end=eof;
66499     +      length string $200;
66500     +      by _NAME_;
66502     +      if _n_=1 then do;
66503     +        put "&EM_CODEBAR;";
66504     +        %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
66505     +        put "* &note;";
66506     +        put "&EM_CODEBAR;";
66508     +        call execute(" data &BINMAPPINGS; ");
66509     +        call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
66510     +      end;
66512     +      %do i=1 %to %eval(&numbins-1);
66513     +       %if &i eq 1 %then %do;
66514     +         %let colname = COL&i;
66515     +         %let binvalnum = 1;
66516     +         LB = .;
66517     +         UB = round(&colname, &precision);
66518     +         bin=&binvalnum;
66520     +         call execute("name='"||strip(_NAME_)||"'; ");
66521     +         call execute("bin_name='"||strip(binVar)||"'; ");
66522     +         call execute("bin='"||strip(bin)||"';");
66523     +         call execute("LB=.;");
66524     +         call execute("UB="||UB||";");
66525     +         call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
66526     +         call execute("output;");
66528     +         string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
66530     +         put string;
66531     +         string = "else do;";
66532     +         put string;
66534     +         string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
66535     +         put string;
66538     +       %end;
66539     +       %else %do;
66540     +         %let colname = COL&i;
66541     +         %let lbnum = %sysevalf(&i-1);
66542     +         %let lbcol = COL&lbnum;
66543     +         UB = round(&colname, &precision);
66544     +         LB = round(&lbcol, &precision);
66545     +         if UB ne LB then do;
66546     +           bin=bin+1;
66548     +           call execute("name='"||strip(_NAME_)||"'; ");
66549     +           call execute("bin_name='"||strip(binVar)||"'; ");
66550     +           call execute("bin='"||strip(bin)||"';");
66551     +           call execute("LB="||LB||";");
66552     +           call execute("UB="||UB||";");
66553     +           call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
66554     +           call execute("output;");
66556     +           string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
66557     +           put string;
66559     +         end;
66560     +       %end;
66561     +      %end;
66562     +      %let binvalnum = %sysevalf(&binvalnum + 1);
66563     +      bin=bin+1;
66564     +      LB = round(&colname, &precision);
66565     +      UB = .;
66567     +      call execute("name='"||strip(_NAME_)||"'; ");
66568     +      call execute("bin_name = '"||strip(binVar)||"'; ");
66569     +      call execute("bin='"||strip(bin)||"';");
66570     +      call execute("UB=.;");
66571     +      call execute("LB="||LB||";");
66572     +      call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
66573     +      call execute("output;");
66575     +      string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
66576     +      put string;
66577     +      string="end;";
66578     +      put string;
66580     +      if eof then do;
66581     +        call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
66582     +        call execute("  if LB=UB then delete;");
66583     +        call execute("run;");
66584     +      end;
66586     +    run;
66588     +    /* drop original inputs */
66589     +    %if &dropOriginal=Y %then %do;
66590     +      data _null_;
66591     +        set work.tempvars end=eof;
66592     +        FILE &binningCode MOD;
66593     +        length string $200;
66595     +        if _n_=1 then do;
66596     +          put "drop";
66597     +        end;
66598     +        string = " "||strip(name);
66599     +        put string;
66601     +        if eof then do;
66602     +          put ";";
66603     +        end;
66604     +      run;
66605     +    %end;
66607     +    proc datasets library=work nolist;
66608     +      delete pctdata tempmapping tempbins tempInt;
66609     +    run;
66610     +    quit;
66611     +  %end;
66613     +  proc datasets library=work nolist;
66614     +    delete tempvars;
66615     +  run;
66616     +  quit;
66618     +%mend em_apps_quantile_binning;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data work.vartable;
MPRINT(EM_QUANTILE_BINNING):   set work._intmid;
MPRINT(EM_QUANTILE_BINNING):   level = "INTERVAL";
MPRINT(EM_QUANTILE_BINNING):   role = "INPUT";
MPRINT(EM_QUANTILE_BINNING):   rename variable=name;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 24 observations read from the data set WORK._INTMID.
NOTE: The data set WORK.VARTABLE has 24 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Variable NAME is uninitialized.
NOTE: Variable BIN_NAME is uninitialized.
NOTE: Variable LB is uninitialized.
NOTE: Variable UB is uninitialized.
NOTE: Variable BIN is uninitialized.
NOTE: Variable EM_BIN_LABEL is uninitialized.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 24 observations read from the data set WORK.VARTABLE.
      WHERE (ROLE='INPUT') and (LEVEL='INTERVAL');
NOTE: The data set WORK.TEMPVARS has 24 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file TEMPOPEN is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
66622     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
66623     +   filename macFile catalog 'work.emutil.macro.source';
66624     +   %let _METAOBS = 0;
66626     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
66627     +                   or (&metadata eq ) %then %do;
66628     +       %goto doend;
66629     +   %end;
66630     +   data _null_;
66631     +      length _STRING_ $80;
66632     +      retain _STRING_;
66633     +      set &metadata end=eof;
66634     +      file macFile;
66635     +      %if %nrbquote(&where) ne %then %do;
66636     +          %let whereClause = where (%nrbquote(&where));
66637     +          %unquote(&whereClause);
66638     +      %end;
66639     +      if _N_=1 then do;
66640     +         string = "%"!!"macro &name;";
66641     +         put string;
66642     +      end;
66643     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
66644     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
66645     +         if eof then do;
66646     +            put _STRING_;
66647     +            string = "%"!!"mend &name;";
66648     +            put string;
66649     +            %if (&nummacro ne ) %then %do;
66650     +                string = strip(put(_N_, best.));
66651     +                put "%" "global &nummacro;";
66652     +                put "%" "let &nummacro = " string ";";
66653     +                call symput('_METAOBS', string);
66654     +            %end;
66655     +         end;
66656     +      end;
66657     +      else do;
66658     +         put _STRING_;
66659     +         _string_ = TRIM(&key);
66660     +         if eof then do;
66661     +            put _STRING_;
66662     +            string = "%"!!"mend &name;";
66663     +            put string;
66664     +        end;
66665     +      end;
66666     +      if eof then do;
66667     +         string = strip(put(_N_, best.));
66668     +         call symput('_METAOBS', string);
66669     +         %if (&nummacro ne ) %then %do;
66670     +             put "%" "global &nummacro;";
66671     +             put "%" "let &nummacro = " string ";";
66672     +         %end;
66673     +      end;
66674     +   run;
66676     +   %doend:
66677     +   %if ^&_METAOBS %then %do;
66678     +       data _null_;
66679     +          file macFile;
66680     +          put "%" "macro &name;";
66681     +          put "%" "mend &name;";
66682     +          %if (&nummacro ne ) %then %do;
66683     +              put "%" "global &nummacro;";
66684     +              put "%" "let &nummacro = 0;";
66685     +          %end;
66686     +      run;
66687     +   %end;
66688     +   %inc macFile;
66689     +   filename macFile;
66690     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen;
NOTE: Fileref TEMPOPEN has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempvars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Samstag, 16. April 2016 20.10 Uhr,
      Last Modified=Samstag, 16. April 2016 20.10 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD40764_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 14.
      The maximum record length was 77.
NOTE: There were 24 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
66691     +%macro intvars;
66692     +AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
66693     +MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
66694     +NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
66695     +NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth
66696     +%mend intvars;
66697     +%global num_intvars;
66698     +%let num_intvars = 24 ;
66699     +%global num_intvars;
66700     +%let num_intvars = 24 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempInt / view = tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   set EMWS8.Part_TRAIN(keep
MPRINT(EM_APPS_QUANTILE_BINNING):  = AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth );
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: DATA STEP view saved on file WORK.TEMPINT.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=25 50 75;
MPRINT(EM_APPS_QUANTILE_BINNING):   var
MPRINT(INTVARS):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases 
NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: View WORK.TEMPINT.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.TEMPINT.
NOTE: The data set WORK.PCTDATA has 11 observations and 25 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 3 observations read from the data set WORK.PCTDATA.
      WHERE _type_=:'P';
NOTE: The data set WORK.PCTDATA has 24 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc dmdb data=tempvars outtable=tempmapping nameserver;
MPRINT(EM_APPS_QUANTILE_BINNING):   names NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   prefix BIN_ ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPVARS.
NOTE: The data set WORK.TEMPMAPPING has 24 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=tempmapping(keep=NAME bin);
MPRINT(EM_APPS_QUANTILE_BINNING):   by NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 24 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 24 observations read from the data set WORK.PCTDATA.
NOTE: The data set WORK.PCTDATA has 24 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempbins;
MPRINT(EM_APPS_QUANTILE_BINNING):   length display_var $32;
MPRINT(EM_APPS_QUANTILE_BINNING):   merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar)) ;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _a;
MPRINT(EM_APPS_QUANTILE_BINNING):   if missing(display_var) then display_var = _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: There were 24 observations read from the data set WORK.PCTDATA.
NOTE: There were 24 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPBINS has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X;
MPRINT(EM_APPS_QUANTILE_BINNING):   set tempbins end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "* Generating Bins for interval variables;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute(" data EMWS8.BINNING_BINMAPPINGS; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "else do;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name = '"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string="end;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if LB=UB then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("run;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      298:29   308:21   313:65   350:46   350:87   391:29   396:21   401:21   406:38   406:84   419:51   419:92   468:29   473:21   478:21   483:38   483:84   496:51   496:92   540:29   550:21   555:66   568:52   568:93   
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=16. April 2016 20.10 Uhr,
      Create Time=03. April 2016 17.12 Uhr

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal >= 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age < 38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='38 <= Age < 46';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='46 <= Age < 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age >= 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= Frq < 12';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='12 <= Frq < 18';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq >= 18';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35268;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income < 35268';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35268;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='35268 <= Income < 52157';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 69486;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='52157 <= Income < 69486';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 69486;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income >= 69486';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Kidhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt < 72';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72 <= Mnt < 405.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1064;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='405.5 <= Mnt < 1064';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1064;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt >= 1064';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= MntFishProducts < 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 47;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='13 <= MntFishProducts < 47';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 47;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts >= 47';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= MntFruits < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntFruits < 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits >= 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntGoldProds < 25';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='25 <= MntGoldProds < 59';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds >= 59';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts < 17';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='17 <= MntMeatProducts < 72';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 246;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72 <= MntMeatProducts < 246';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 246;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts >= 246';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= MntSweetProducts < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntSweetProducts < 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts >= 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines < 24';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='24 <= MntWines < 183.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 508;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='183.5 <= MntWines < 508';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 508;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines >= 508';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 69;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer < 69';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 69;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 83;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='69 <= MonthsAsCustomer < 83';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 83;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 98;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='83 <= MonthsAsCustomer < 98';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 98;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer >= 98';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= NumCatalogPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases >= 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases >= 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumDistPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 10;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumDistPurchases < 10';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 10;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases >= 10';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumStorePurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumStorePurchases < 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases >= 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumWebPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= NumWebPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases >= 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumWebVisitsMonth < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth >= 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 10.34;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat < 10.34';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 10.34;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='10.34 <= RFMstat < 128.09';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 455.22;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='128.09 <= RFMstat < 455.22';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 455.22;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat >= 455.22';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13.25;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq < 13.25';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13.25;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='13.25 <= RMntFrq < 30.4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52.86;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='30.4 <= RMntFrq < 52.86';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52.86;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq >= 52.86';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency < 24';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='24 <= Recency < 48';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='48 <= Recency < 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency >= 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Teenhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1959;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Year_Birth < 1959';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1959;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1970;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1959 <= Year_Birth < 1970';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1970;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1978;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1970 <= Year_Birth < 1978';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Year_Birth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1978;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Year_Birth >= 1978';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   if NAME='' and BIN_NAME='' and BIN='' then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   if LB=UB then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
NOTE: 167 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 64.
NOTE: There were 24 observations read from the data set WORK.TEMPBINS.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1         +  data EMWS8.BINNING_BINMAPPINGS;
2         +    length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):  32 LB UB EM_BIN_LABEL BIN200
3         + name='AcceptedCmpTotal';
4         + bin_name='BIN_AcceptedCmpTotal';
5         + bin='1';
6         + LB=.;
7         + UB=           0;
8         + EM_BIN_LABEL='AcceptedCmpTotal < 0';
9         + output;
10        + name='AcceptedCmpTotal';
11        + bin_name = 'BIN_AcceptedCmpTotal';
12        + bin='2';
13        + UB=.;
14        + LB=           0;
15        + EM_BIN_LABEL='AcceptedCmpTotal >= 0';
16        + output;
17        + name='Age';
18        + bin_name='BIN_Age';
19        + bin='1';
20        + LB=.;
21        + UB=          38;
22        + EM_BIN_LABEL='Age < 38';
23        + output;
24        + name='Age';
25        + bin_name='BIN_Age';
26        + bin='2';
27        + LB=          38;
28        + UB=          46;
29        + EM_BIN_LABEL='38 <= Age < 46';
30        + output;
31        + name='Age';
32        + bin_name='BIN_Age';
33        + bin='3';
34        + LB=          46;
35        + UB=          57;
36        + EM_BIN_LABEL='46 <= Age < 57';
37        + output;
38        + name='Age';
39        + bin_name = 'BIN_Age';
40        + bin='4';
41        + UB=.;
42        + LB=          57;
43        + EM_BIN_LABEL='Age >= 57';
44        + output;
45        + name='Frq';
46        + bin_name='BIN_Frq';
47        + bin='1';
48        + LB=.;
49        + UB=           6;
50        + EM_BIN_LABEL='Frq < 6';
51        + output;
52        + name='Frq';
53        + bin_name='BIN_Frq';
54        + bin='2';
55        + LB=           6;
56        + UB=          12;
57        + EM_BIN_LABEL='6 <= Frq < 12';
58        + output;
59        + name='Frq';
60        + bin_name='BIN_Frq';
61        + bin='3';
62        + LB=          12;
63        + UB=          18;
64        + EM_BIN_LABEL='12 <= Frq < 18';
65        + output;
66        + name='Frq';
67        + bin_name = 'BIN_Frq';
68        + bin='4';
69        + UB=.;
70        + LB=          18;
71        + EM_BIN_LABEL='Frq >= 18';
72        + output;
73        + name='Income';
74        + bin_name='BIN_Income';
75        + bin='1';
76        + LB=.;
77        + UB=       35268;
78        + EM_BIN_LABEL='Income < 35268';
79        + output;
80        + name='Income';
81        + bin_name='BIN_Income';
82        + bin='2';
83        + LB=       35268;
84        + UB=       52157;
85        + EM_BIN_LABEL='35268 <= Income < 52157';
86        + output;
87        + name='Income';
88        + bin_name='BIN_Income';
89        + bin='3';
90        + LB=       52157;
91        + UB=       69486;
92        + EM_BIN_LABEL='52157 <= Income < 69486';
93        + output;
94        + name='Income';
95        + bin_name = 'BIN_Income';
96        + bin='4';
97        + UB=.;
98        + LB=       69486;
99        + EM_BIN_LABEL='Income >= 69486';
100       + output;
101       + name='Kidhome';
102       + bin_name='BIN_Kidhome';
103       + bin='1';
104       + LB=.;
105       + UB=           0;
106       + EM_BIN_LABEL='Kidhome < 0';
107       + output;
108       + name='Kidhome';
109       + bin_name='BIN_Kidhome';
110       + bin='2';
111       + LB=           0;
112       + UB=           1;
113       + EM_BIN_LABEL='0 <= Kidhome < 1';
114       + output;
115       + name='Kidhome';
116       + bin_name = 'BIN_Kidhome';
117       + bin='3';
118       + UB=.;
119       + LB=           1;
120       + EM_BIN_LABEL='Kidhome >= 1';
121       + output;
122       + name='Mnt';
123       + bin_name='BIN_Mnt';
124       + bin='1';
125       + LB=.;
126       + UB=          72;
127       + EM_BIN_LABEL='Mnt < 72';
128       + output;
129       + name='Mnt';
130       + bin_name='BIN_Mnt';
131       + bin='2';
132       + LB=          72;
133       + UB=       405.5;
134       + EM_BIN_LABEL='72 <= Mnt < 405.5';
135       + output;
136       + name='Mnt';
137       + bin_name='BIN_Mnt';
138       + bin='3';
139       + LB=       405.5;
140       + UB=        1064;
141       + EM_BIN_LABEL='405.5 <= Mnt < 1064';
142       + output;
143       + name='Mnt';
144       + bin_name = 'BIN_Mnt';
145       + bin='4';
146       + UB=.;
147       + LB=        1064;
148       + EM_BIN_LABEL='Mnt >= 1064';
149       + output;
150       + name='MntFishProducts';
151       + bin_name='BIN_MntFishProducts';
152       + bin='1';
153       + LB=.;
154       + UB=           3;
155       + EM_BIN_LABEL='MntFishProducts < 3';
156       + output;
157       + name='MntFishProducts';
158       + bin_name='BIN_MntFishProducts';
159       + bin='2';
160       + LB=           3;
161       + UB=          13;
162       + EM_BIN_LABEL='3 <= MntFishProducts < 13';
163       + output;
164       + name='MntFishProducts';
165       + bin_name='BIN_MntFishProducts';
166       + bin='3';
167       + LB=          13;
168       + UB=          47;
169       + EM_BIN_LABEL='13 <= MntFishProducts < 47';
170       + output;
171       + name='MntFishProducts';
172       + bin_name = 'BIN_MntFishProducts';
173       + bin='4';
174       + UB=.;
175       + LB=          47;
176       + EM_BIN_LABEL='MntFishProducts >= 47';
177       + output;
178       + name='MntFruits';
179       + bin_name='BIN_MntFruits';
180       + bin='1';
181       + LB=.;
182       + UB=           2;
183       + EM_BIN_LABEL='MntFruits < 2';
184       + output;
185       + name='MntFruits';
186       + bin_name='BIN_MntFruits';
187       + bin='2';
188       + LB=           2;
189       + UB=           9;
190       + EM_BIN_LABEL='2 <= MntFruits < 9';
191       + output;
192       + name='MntFruits';
193       + bin_name='BIN_MntFruits';
194       + bin='3';
195       + LB=           9;
196       + UB=          35;
197       + EM_BIN_LABEL='9 <= MntFruits < 35';
198       + output;
199       + name='MntFruits';
200       + bin_name = 'BIN_MntFruits';
201       + bin='4';
202       + UB=.;
203       + LB=          35;
204       + EM_BIN_LABEL='MntFruits >= 35';
205       + output;
206       + name='MntGoldProds';
207       + bin_name='BIN_MntGoldProds';
208       + bin='1';
209       + LB=.;
210       + UB=           9;
211       + EM_BIN_LABEL='MntGoldProds < 9';
212       + output;
213       + name='MntGoldProds';
214       + bin_name='BIN_MntGoldProds';
215       + bin='2';
216       + LB=           9;
217       + UB=          25;
218       + EM_BIN_LABEL='9 <= MntGoldProds < 25';
219       + output;
220       + name='MntGoldProds';
221       + bin_name='BIN_MntGoldProds';
222       + bin='3';
223       + LB=          25;
224       + UB=          59;
225       + EM_BIN_LABEL='25 <= MntGoldProds < 59';
226       + output;
227       + name='MntGoldProds';
228       + bin_name = 'BIN_MntGoldProds';
229       + bin='4';
230       + UB=.;
231       + LB=          59;
232       + EM_BIN_LABEL='MntGoldProds >= 59';
233       + output;
234       + name='MntMeatProducts';
235       + bin_name='BIN_MntMeatProducts';
236       + bin='1';
237       + LB=.;
238       + UB=          17;
239       + EM_BIN_LABEL='MntMeatProducts < 17';
240       + output;
241       + name='MntMeatProducts';
242       + bin_name='BIN_MntMeatProducts';
243       + bin='2';
244       + LB=          17;
245       + UB=          72;
246       + EM_BIN_LABEL='17 <= MntMeatProducts < 72';
247       + output;
248       + name='MntMeatProducts';
249       + bin_name='BIN_MntMeatProducts';
250       + bin='3';
251       + LB=          72;
252       + UB=         246;
253       + EM_BIN_LABEL='72 <= MntMeatProducts < 246';
254       + output;
255       + name='MntMeatProducts';
256       + bin_name = 'BIN_MntMeatProducts';
257       + bin='4';
258       + UB=.;
259       + LB=         246;
260       + EM_BIN_LABEL='MntMeatProducts >= 246';
261       + output;
262       + name='MntSweetProducts';
263       + bin_name='BIN_MntSweetProducts';
264       + bin='1';
265       + LB=.;
266       + UB=           2;
267       + EM_BIN_LABEL='MntSweetProducts < 2';
268       + output;
269       + name='MntSweetProducts';
270       + bin_name='BIN_MntSweetProducts';
271       + bin='2';
272       + LB=           2;
273       + UB=           9;
274       + EM_BIN_LABEL='2 <= MntSweetProducts < 9';
275       + output;
276       + name='MntSweetProducts';
277       + bin_name='BIN_MntSweetProducts';
278       + bin='3';
279       + LB=           9;
280       + UB=          35;
281       + EM_BIN_LABEL='9 <= MntSweetProducts < 35';
282       + output;
283       + name='MntSweetProducts';
284       + bin_name = 'BIN_MntSweetProducts';
285       + bin='4';
286       + UB=.;
287       + LB=          35;
288       + EM_BIN_LABEL='MntSweetProducts >= 35';
289       + output;
290       + name='MntWines';
291       + bin_name='BIN_MntWines';
292       + bin='1';
293       + LB=.;
294       + UB=          24;
295       + EM_BIN_LABEL='MntWines < 24';
296       + output;
297       + name='MntWines';
298       + bin_name='BIN_MntWines';
299       + bin='2';
300       + LB=          24;
301       + UB=       183.5;
302       + EM_BIN_LABEL='24 <= MntWines < 183.5';
303       + output;
304       + name='MntWines';
305       + bin_name='BIN_MntWines';
306       + bin='3';
307       + LB=       183.5;
308       + UB=         508;
309       + EM_BIN_LABEL='183.5 <= MntWines < 508';
310       + output;
311       + name='MntWines';
312       + bin_name = 'BIN_MntWines';
313       + bin='4';
314       + UB=.;
315       + LB=         508;
316       + EM_BIN_LABEL='MntWines >= 508';
317       + output;
318       + name='MonthsAsCustomer';
319       + bin_name='BIN_MonthsAsCustomer';
320       + bin='1';
321       + LB=.;
322       + UB=          69;
323       + EM_BIN_LABEL='MonthsAsCustomer < 69';
324       + output;
325       + name='MonthsAsCustomer';
326       + bin_name='BIN_MonthsAsCustomer';
327       + bin='2';
328       + LB=          69;
329       + UB=          83;
330       + EM_BIN_LABEL='69 <= MonthsAsCustomer < 83';
331       + output;
332       + name='MonthsAsCustomer';
333       + bin_name='BIN_MonthsAsCustomer';
334       + bin='3';
335       + LB=          83;
336       + UB=          98;
337       + EM_BIN_LABEL='83 <= MonthsAsCustomer < 98';
338       + output;
339       + name='MonthsAsCustomer';
340       + bin_name = 'BIN_MonthsAsCustomer';
341       + bin='4';
342       + UB=.;
343       + LB=          98;
344       + EM_BIN_LABEL='MonthsAsCustomer >= 98';
345       + output;
346       + name='NumCatalogPurchases';
347       + bin_name='BIN_NumCatalogPurchases';
348       + bin='1';
349       + LB=.;
350       + UB=           0;
351       + EM_BIN_LABEL='NumCatalogPurchases < 0';
352       + output;
353       + name='NumCatalogPurchases';
354       + bin_name='BIN_NumCatalogPurchases';
355       + bin='2';
356       + LB=           0;
357       + UB=           2;
358       + EM_BIN_LABEL='0 <= NumCatalogPurchases < 2';
359       + output;
360       + name='NumCatalogPurchases';
361       + bin_name='BIN_NumCatalogPurchases';
362       + bin='3';
363       + LB=           2;
364       + UB=           4;
365       + EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
366       + output;
367       + name='NumCatalogPurchases';
368       + bin_name = 'BIN_NumCatalogPurchases';
369       + bin='4';
370       + UB=.;
371       + LB=           4;
372       + EM_BIN_LABEL='NumCatalogPurchases >= 4';
373       + output;
374       + name='NumDealsPurchases';
375       + bin_name='BIN_NumDealsPurchases';
376       + bin='1';
377       + LB=.;
378       + UB=           1;
379       + EM_BIN_LABEL='NumDealsPurchases < 1';
380       + output;
381       + name='NumDealsPurchases';
382       + bin_name='BIN_NumDealsPurchases';
383       + bin='2';
384       + LB=           1;
385       + UB=           2;
386       + EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
387       + output;
388       + name='NumDealsPurchases';
389       + bin_name='BIN_NumDealsPurchases';
390       + bin='3';
391       + LB=           2;
392       + UB=           3;
393       + EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
394       + output;
395       + name='NumDealsPurchases';
396       + bin_name = 'BIN_NumDealsPurchases';
397       + bin='4';
398       + UB=.;
399       + LB=           3;
400       + EM_BIN_LABEL='NumDealsPurchases >= 3';
401       + output;
402       + name='NumDistPurchases';
403       + bin_name='BIN_NumDistPurchases';
404       + bin='1';
405       + LB=.;
406       + UB=           3;
407       + EM_BIN_LABEL='NumDistPurchases < 3';
408       + output;
409       + name='NumDistPurchases';
410       + bin_name='BIN_NumDistPurchases';
411       + bin='2';
412       + LB=           3;
413       + UB=           6;
414       + EM_BIN_LABEL='3 <= NumDistPurchases < 6';
415       + output;
416       + name='NumDistPurchases';
417       + bin_name='BIN_NumDistPurchases';
418       + bin='3';
419       + LB=           6;
420       + UB=          10;
421       + EM_BIN_LABEL='6 <= NumDistPurchases < 10';
422       + output;
423       + name='NumDistPurchases';
424       + bin_name = 'BIN_NumDistPurchases';
425       + bin='4';
426       + UB=.;
427       + LB=          10;
428       + EM_BIN_LABEL='NumDistPurchases >= 10';
429       + output;
430       + name='NumStorePurchases';
431       + bin_name='BIN_NumStorePurchases';
432       + bin='1';
433       + LB=.;
434       + UB=           3;
435       + EM_BIN_LABEL='NumStorePurchases < 3';
436       + output;
437       + name='NumStorePurchases';
438       + bin_name='BIN_NumStorePurchases';
439       + bin='2';
440       + LB=           3;
441       + UB=           5;
442       + EM_BIN_LABEL='3 <= NumStorePurchases < 5';
443       + output;
444       + name='NumStorePurchases';
445       + bin_name='BIN_NumStorePurchases';
446       + bin='3';
447       + LB=           5;
448       + UB=           8;
449       + EM_BIN_LABEL='5 <= NumStorePurchases < 8';
450       + output;
451       + name='NumStorePurchases';
452       + bin_name = 'BIN_NumStorePurchases';
453       + bin='4';
454       + UB=.;
455       + LB=           8;
456       + EM_BIN_LABEL='NumStorePurchases >= 8';
457       + output;
458       + name='NumWebPurchases';
459       + bin_name='BIN_NumWebPurchases';
460       + bin='1';
461       + LB=.;
462       + UB=           2;
463       + EM_BIN_LABEL='NumWebPurchases < 2';
464       + output;
465       + name='NumWebPurchases';
466       + bin_name='BIN_NumWebPurchases';
467       + bin='2';
468       + LB=           2;
469       + UB=           4;
470       + EM_BIN_LABEL='2 <= NumWebPurchases < 4';
471       + output;
472       + name='NumWebPurchases';
473       + bin_name='BIN_NumWebPurchases';
474       + bin='3';
475       + LB=           4;
476       + UB=           6;
477       + EM_BIN_LABEL='4 <= NumWebPurchases < 6';
478       + output;
479       + name='NumWebPurchases';
480       + bin_name = 'BIN_NumWebPurchases';
481       + bin='4';
482       + UB=.;
483       + LB=           6;
484       + EM_BIN_LABEL='NumWebPurchases >= 6';
485       + output;
486       + name='NumWebVisitsMonth';
487       + bin_name='BIN_NumWebVisitsMonth';
488       + bin='1';
489       + LB=.;
490       + UB=           3;
491       + EM_BIN_LABEL='NumWebVisitsMonth < 3';
492       + output;
493       + name='NumWebVisitsMonth';
494       + bin_name='BIN_NumWebVisitsMonth';
495       + bin='2';
496       + LB=           3;
497       + UB=           6;
498       + EM_BIN_LABEL='3 <= NumWebVisitsMonth < 6';
499       + output;
500       + name='NumWebVisitsMonth';
501       + bin_name='BIN_NumWebVisitsMonth';
502       + bin='3';
503       + LB=           6;
504       + UB=           7;
505       + EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
506       + output;
507       + name='NumWebVisitsMonth';
508       + bin_name = 'BIN_NumWebVisitsMonth';
509       + bin='4';
510       + UB=.;
511       + LB=           7;
512       + EM_BIN_LABEL='NumWebVisitsMonth >= 7';
513       + output;
514       + name='RFMstat';
515       + bin_name='BIN_RFMstat';
516       + bin='1';
517       + LB=.;
518       + UB=       10.34;
519       + EM_BIN_LABEL='RFMstat < 10.34';
520       + output;
521       + name='RFMstat';
522       + bin_name='BIN_RFMstat';
523       + bin='2';
524       + LB=       10.34;
525       + UB=      128.09;
526       + EM_BIN_LABEL='10.34 <= RFMstat < 128.09';
527       + output;
528       + name='RFMstat';
529       + bin_name='BIN_RFMstat';
530       + bin='3';
531       + LB=      128.09;
532       + UB=      455.22;
533       + EM_BIN_LABEL='128.09 <= RFMstat < 455.22';
534       + output;
535       + name='RFMstat';
536       + bin_name = 'BIN_RFMstat';
537       + bin='4';
538       + UB=.;
539       + LB=      455.22;
540       + EM_BIN_LABEL='RFMstat >= 455.22';
541       + output;
542       + name='RMntFrq';
543       + bin_name='BIN_RMntFrq';
544       + bin='1';
545       + LB=.;
546       + UB=       13.25;
547       + EM_BIN_LABEL='RMntFrq < 13.25';
548       + output;
549       + name='RMntFrq';
550       + bin_name='BIN_RMntFrq';
551       + bin='2';
552       + LB=       13.25;
553       + UB=        30.4;
554       + EM_BIN_LABEL='13.25 <= RMntFrq < 30.4';
555       + output;
556       + name='RMntFrq';
557       + bin_name='BIN_RMntFrq';
558       + bin='3';
559       + LB=        30.4;
560       + UB=       52.86;
561       + EM_BIN_LABEL='30.4 <= RMntFrq < 52.86';
562       + output;
563       + name='RMntFrq';
564       + bin_name = 'BIN_RMntFrq';
565       + bin='4';
566       + UB=.;
567       + LB=       52.86;
568       + EM_BIN_LABEL='RMntFrq >= 52.86';
569       + output;
570       + name='Recency';
571       + bin_name='BIN_Recency';
572       + bin='1';
573       + LB=.;
574       + UB=          24;
575       + EM_BIN_LABEL='Recency < 24';
576       + output;
577       + name='Recency';
578       + bin_name='BIN_Recency';
579       + bin='2';
580       + LB=          24;
581       + UB=          48;
582       + EM_BIN_LABEL='24 <= Recency < 48';
583       + output;
584       + name='Recency';
585       + bin_name='BIN_Recency';
586       + bin='3';
587       + LB=          48;
588       + UB=          73;
589       + EM_BIN_LABEL='48 <= Recency < 73';
590       + output;
591       + name='Recency';
592       + bin_name = 'BIN_Recency';
593       + bin='4';
594       + UB=.;
595       + LB=          73;
596       + EM_BIN_LABEL='Recency >= 73';
597       + output;
598       + name='Teenhome';
599       + bin_name='BIN_Teenhome';
600       + bin='1';
601       + LB=.;
602       + UB=           0;
603       + EM_BIN_LABEL='Teenhome < 0';
604       + output;
605       + name='Teenhome';
606       + bin_name='BIN_Teenhome';
607       + bin='2';
608       + LB=           0;
609       + UB=           1;
610       + EM_BIN_LABEL='0 <= Teenhome < 1';
611       + output;
612       + name='Teenhome';
613       + bin_name = 'BIN_Teenhome';
614       + bin='3';
615       + UB=.;
616       + LB=           1;
617       + EM_BIN_LABEL='Teenhome >= 1';
618       + output;
619       + name='Year_Birth';
620       + bin_name='BIN_Year_Birth';
621       + bin='1';
622       + LB=.;
623       + UB=        1959;
624       + EM_BIN_LABEL='Year_Birth < 1959';
625       + output;
626       + name='Year_Birth';
627       + bin_name='BIN_Year_Birth';
628       + bin='2';
629       + LB=        1959;
630       + UB=        1970;
631       + EM_BIN_LABEL='1959 <= Year_Birth < 1970';
632       + output;
633       + name='Year_Birth';
634       + bin_name='BIN_Year_Birth';
635       + bin='3';
636       + LB=        1970;
637       + UB=        1978;
638       + EM_BIN_LABEL='1970 <= Year_Birth < 1978';
639       + output;
640       + name='Year_Birth';
641       + bin_name = 'BIN_Year_Birth';
642       + bin='4';
643       + UB=.;
644       + LB=        1978;
645       + EM_BIN_LABEL='Year_Birth >= 1978';
646       + output;
647       +   if NAME='' and BIN_NAME='' and BIN='' then delete;
648       +   if LB=UB then delete;
649       + run;

NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.tempvars end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X MOD;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "drop";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = " "||strip(name);
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put ";";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=6232,
      Last Modified=16. April 2016 20.10 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 26 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 19.
NOTE: There were 24 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete pctdata tempmapping tempbins tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file WORK.TEMPINT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PCTDATA (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPBINS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.TEMPVARS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   by name lb;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 92 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   length display_var $32 grp $8;
MPRINT(EM_QUANTILE_BINNING):   display_var = name;
MPRINT(EM_QUANTILE_BINNING):   GRP = BIN + 1;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      102:7   
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      102:11   
NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 92 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedmapping nodupkey;
MPRINT(EM_QUANTILE_BINNING):   by NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: 68 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDMAPPING has 24 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 1 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   set sortedmapping;
MPRINT(EM_QUANTILE_BINNING):   GRP="1";
MPRINT(EM_QUANTILE_BINNING):   bin="Missing";
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = "Missing";
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 24 observations read from the data set WORK.SORTEDMAPPING.
NOTE: The data set WORK.TEMPMISSVALUES has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINDATA;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.Part_TRAIN;
NOTE: %INCLUDE (level 1) file X is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas.
66701     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
66702     +* Generating Bins for interval variables;
MPRINT(EM_QUANTILE_BINNING):   * Generating Bins for interval variables;
66703     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
66704     +if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
66705     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66706     +if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
66707     +else if AcceptedCmpTotal >= 0 then BIN_AcceptedCmpTotal=2;
MPRINT(EM_QUANTILE_BINNING):   else if AcceptedCmpTotal >= 0 then BIN_AcceptedCmpTotal=2;
66708     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66709     +if Age eq . then BIN_Age= .;
MPRINT(EM_QUANTILE_BINNING):   if Age eq . then BIN_Age= .;
66710     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66711     +if Age < 38 then BIN_Age=1;
MPRINT(EM_QUANTILE_BINNING):   if Age < 38 then BIN_Age=1;
66712     +else if Age < 46 then BIN_Age=2;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 46 then BIN_Age=2;
66713     +else if Age < 57 then BIN_Age=3;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 57 then BIN_Age=3;
66714     +else if Age >= 57 then BIN_Age=4;
MPRINT(EM_QUANTILE_BINNING):   else if Age >= 57 then BIN_Age=4;
66715     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66716     +if Frq eq . then BIN_Frq= .;
MPRINT(EM_QUANTILE_BINNING):   if Frq eq . then BIN_Frq= .;
66717     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66718     +if Frq < 6 then BIN_Frq=1;
MPRINT(EM_QUANTILE_BINNING):   if Frq < 6 then BIN_Frq=1;
66719     +else if Frq < 12 then BIN_Frq=2;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 12 then BIN_Frq=2;
66720     +else if Frq < 18 then BIN_Frq=3;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 18 then BIN_Frq=3;
66721     +else if Frq >= 18 then BIN_Frq=4;
MPRINT(EM_QUANTILE_BINNING):   else if Frq >= 18 then BIN_Frq=4;
66722     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66723     +if Income eq . then BIN_Income= .;
MPRINT(EM_QUANTILE_BINNING):   if Income eq . then BIN_Income= .;
66724     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66725     +if Income < 35268 then BIN_Income=1;
MPRINT(EM_QUANTILE_BINNING):   if Income < 35268 then BIN_Income=1;
66726     +else if Income < 52157 then BIN_Income=2;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 52157 then BIN_Income=2;
66727     +else if Income < 69486 then BIN_Income=3;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 69486 then BIN_Income=3;
66728     +else if Income >= 69486 then BIN_Income=4;
MPRINT(EM_QUANTILE_BINNING):   else if Income >= 69486 then BIN_Income=4;
66729     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66730     +if Kidhome eq . then BIN_Kidhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome eq . then BIN_Kidhome= .;
66731     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66732     +if Kidhome < 0 then BIN_Kidhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome < 0 then BIN_Kidhome=1;
66733     +else if Kidhome < 1 then BIN_Kidhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome < 1 then BIN_Kidhome=2;
66734     +else if Kidhome >= 1 then BIN_Kidhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome >= 1 then BIN_Kidhome=3;
66735     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66736     +if Mnt eq . then BIN_Mnt= .;
MPRINT(EM_QUANTILE_BINNING):   if Mnt eq . then BIN_Mnt= .;
66737     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66738     +if Mnt < 72 then BIN_Mnt=1;
MPRINT(EM_QUANTILE_BINNING):   if Mnt < 72 then BIN_Mnt=1;
66739     +else if Mnt < 405.5 then BIN_Mnt=2;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 405.5 then BIN_Mnt=2;
66740     +else if Mnt < 1064 then BIN_Mnt=3;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 1064 then BIN_Mnt=3;
66741     +else if Mnt >= 1064 then BIN_Mnt=4;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt >= 1064 then BIN_Mnt=4;
66742     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66743     +if MntFishProducts eq . then BIN_MntFishProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts eq . then BIN_MntFishProducts= .;
66744     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66745     +if MntFishProducts < 3 then BIN_MntFishProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts < 3 then BIN_MntFishProducts=1;
66746     +else if MntFishProducts < 13 then BIN_MntFishProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 13 then BIN_MntFishProducts=2;
66747     +else if MntFishProducts < 47 then BIN_MntFishProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 47 then BIN_MntFishProducts=3;
66748     +else if MntFishProducts >= 47 then BIN_MntFishProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts >= 47 then BIN_MntFishProducts=4;
66749     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66750     +if MntFruits eq . then BIN_MntFruits= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits eq . then BIN_MntFruits= .;
66751     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66752     +if MntFruits < 2 then BIN_MntFruits=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits < 2 then BIN_MntFruits=1;
66753     +else if MntFruits < 9 then BIN_MntFruits=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 9 then BIN_MntFruits=2;
66754     +else if MntFruits < 35 then BIN_MntFruits=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 35 then BIN_MntFruits=3;
66755     +else if MntFruits >= 35 then BIN_MntFruits=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits >= 35 then BIN_MntFruits=4;
66756     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66757     +if MntGoldProds eq . then BIN_MntGoldProds= .;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds eq . then BIN_MntGoldProds= .;
66758     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66759     +if MntGoldProds < 9 then BIN_MntGoldProds=1;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds < 9 then BIN_MntGoldProds=1;
66760     +else if MntGoldProds < 25 then BIN_MntGoldProds=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 25 then BIN_MntGoldProds=2;
66761     +else if MntGoldProds < 59 then BIN_MntGoldProds=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 59 then BIN_MntGoldProds=3;
66762     +else if MntGoldProds >= 59 then BIN_MntGoldProds=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds >= 59 then BIN_MntGoldProds=4;
66763     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66764     +if MntMeatProducts eq . then BIN_MntMeatProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts eq . then BIN_MntMeatProducts= .;
66765     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66766     +if MntMeatProducts < 17 then BIN_MntMeatProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts < 17 then BIN_MntMeatProducts=1;
66767     +else if MntMeatProducts < 72 then BIN_MntMeatProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 72 then BIN_MntMeatProducts=2;
66768     +else if MntMeatProducts < 246 then BIN_MntMeatProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 246 then BIN_MntMeatProducts=3;
66769     +else if MntMeatProducts >= 246 then BIN_MntMeatProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts >= 246 then BIN_MntMeatProducts=4;
66770     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66771     +if MntSweetProducts eq . then BIN_MntSweetProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts eq . then BIN_MntSweetProducts= .;
66772     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66773     +if MntSweetProducts < 2 then BIN_MntSweetProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts < 2 then BIN_MntSweetProducts=1;
66774     +else if MntSweetProducts < 9 then BIN_MntSweetProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 9 then BIN_MntSweetProducts=2;
66775     +else if MntSweetProducts < 35 then BIN_MntSweetProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 35 then BIN_MntSweetProducts=3;
66776     +else if MntSweetProducts >= 35 then BIN_MntSweetProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts >= 35 then BIN_MntSweetProducts=4;
66777     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66778     +if MntWines eq . then BIN_MntWines= .;
MPRINT(EM_QUANTILE_BINNING):   if MntWines eq . then BIN_MntWines= .;
66779     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66780     +if MntWines < 24 then BIN_MntWines=1;
MPRINT(EM_QUANTILE_BINNING):   if MntWines < 24 then BIN_MntWines=1;
66781     +else if MntWines < 183.5 then BIN_MntWines=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 183.5 then BIN_MntWines=2;
66782     +else if MntWines < 508 then BIN_MntWines=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 508 then BIN_MntWines=3;
66783     +else if MntWines >= 508 then BIN_MntWines=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines >= 508 then BIN_MntWines=4;
66784     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66785     +if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
66786     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66787     +if MonthsAsCustomer < 69 then BIN_MonthsAsCustomer=1;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer < 69 then BIN_MonthsAsCustomer=1;
66788     +else if MonthsAsCustomer < 83 then BIN_MonthsAsCustomer=2;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 83 then BIN_MonthsAsCustomer=2;
66789     +else if MonthsAsCustomer < 98 then BIN_MonthsAsCustomer=3;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 98 then BIN_MonthsAsCustomer=3;
66790     +else if MonthsAsCustomer >= 98 then BIN_MonthsAsCustomer=4;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer >= 98 then BIN_MonthsAsCustomer=4;
66791     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66792     +if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
66793     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66794     +if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
66795     +else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=2;
66796     +else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=3;
66797     +else if NumCatalogPurchases >= 4 then BIN_NumCatalogPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases >= 4 then BIN_NumCatalogPurchases=4;
66798     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66799     +if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
66800     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66801     +if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
66802     +else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
66803     +else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
66804     +else if NumDealsPurchases >= 3 then BIN_NumDealsPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases >= 3 then BIN_NumDealsPurchases=4;
66805     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66806     +if NumDistPurchases eq . then BIN_NumDistPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases eq . then BIN_NumDistPurchases= .;
66807     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66808     +if NumDistPurchases < 3 then BIN_NumDistPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases < 3 then BIN_NumDistPurchases=1;
66809     +else if NumDistPurchases < 6 then BIN_NumDistPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 6 then BIN_NumDistPurchases=2;
66810     +else if NumDistPurchases < 10 then BIN_NumDistPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 10 then BIN_NumDistPurchases=3;
66811     +else if NumDistPurchases >= 10 then BIN_NumDistPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases >= 10 then BIN_NumDistPurchases=4;
66812     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66813     +if NumStorePurchases eq . then BIN_NumStorePurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases eq . then BIN_NumStorePurchases= .;
66814     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66815     +if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
66816     +else if NumStorePurchases < 5 then BIN_NumStorePurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 5 then BIN_NumStorePurchases=2;
66817     +else if NumStorePurchases < 8 then BIN_NumStorePurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 8 then BIN_NumStorePurchases=3;
66818     +else if NumStorePurchases >= 8 then BIN_NumStorePurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases >= 8 then BIN_NumStorePurchases=4;
66819     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66820     +if NumWebPurchases eq . then BIN_NumWebPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases eq . then BIN_NumWebPurchases= .;
66821     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66822     +if NumWebPurchases < 2 then BIN_NumWebPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases < 2 then BIN_NumWebPurchases=1;
66823     +else if NumWebPurchases < 4 then BIN_NumWebPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 4 then BIN_NumWebPurchases=2;
66824     +else if NumWebPurchases < 6 then BIN_NumWebPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 6 then BIN_NumWebPurchases=3;
66825     +else if NumWebPurchases >= 6 then BIN_NumWebPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases >= 6 then BIN_NumWebPurchases=4;
66826     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66827     +if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
66828     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66829     +if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=1;
66830     +else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=2;
66831     +else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=3;
66832     +else if NumWebVisitsMonth >= 7 then BIN_NumWebVisitsMonth=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth >= 7 then BIN_NumWebVisitsMonth=4;
66833     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66834     +if RFMstat eq . then BIN_RFMstat= .;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat eq . then BIN_RFMstat= .;
66835     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66836     +if RFMstat < 10.34 then BIN_RFMstat=1;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat < 10.34 then BIN_RFMstat=1;
66837     +else if RFMstat < 128.09 then BIN_RFMstat=2;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 128.09 then BIN_RFMstat=2;
66838     +else if RFMstat < 455.22 then BIN_RFMstat=3;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 455.22 then BIN_RFMstat=3;
66839     +else if RFMstat >= 455.22 then BIN_RFMstat=4;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat >= 455.22 then BIN_RFMstat=4;
66840     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66841     +if RMntFrq eq . then BIN_RMntFrq= .;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq eq . then BIN_RMntFrq= .;
66842     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66843     +if RMntFrq < 13.25 then BIN_RMntFrq=1;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq < 13.25 then BIN_RMntFrq=1;
66844     +else if RMntFrq < 30.4 then BIN_RMntFrq=2;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 30.4 then BIN_RMntFrq=2;
66845     +else if RMntFrq < 52.86 then BIN_RMntFrq=3;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 52.86 then BIN_RMntFrq=3;
66846     +else if RMntFrq >= 52.86 then BIN_RMntFrq=4;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq >= 52.86 then BIN_RMntFrq=4;
66847     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66848     +if Recency eq . then BIN_Recency= .;
MPRINT(EM_QUANTILE_BINNING):   if Recency eq . then BIN_Recency= .;
66849     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66850     +if Recency < 24 then BIN_Recency=1;
MPRINT(EM_QUANTILE_BINNING):   if Recency < 24 then BIN_Recency=1;
66851     +else if Recency < 48 then BIN_Recency=2;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 48 then BIN_Recency=2;
66852     +else if Recency < 73 then BIN_Recency=3;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 73 then BIN_Recency=3;
66853     +else if Recency >= 73 then BIN_Recency=4;
MPRINT(EM_QUANTILE_BINNING):   else if Recency >= 73 then BIN_Recency=4;
66854     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66855     +if Teenhome eq . then BIN_Teenhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome eq . then BIN_Teenhome= .;
66856     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66857     +if Teenhome < 0 then BIN_Teenhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome < 0 then BIN_Teenhome=1;
66858     +else if Teenhome < 1 then BIN_Teenhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome < 1 then BIN_Teenhome=2;
66859     +else if Teenhome >= 1 then BIN_Teenhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome >= 1 then BIN_Teenhome=3;
66860     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66861     +if Year_Birth eq . then BIN_Year_Birth= .;
MPRINT(EM_QUANTILE_BINNING):   if Year_Birth eq . then BIN_Year_Birth= .;
66862     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
66863     +if Year_Birth < 1959 then BIN_Year_Birth=1;
MPRINT(EM_QUANTILE_BINNING):   if Year_Birth < 1959 then BIN_Year_Birth=1;
66864     +else if Year_Birth < 1970 then BIN_Year_Birth=2;
MPRINT(EM_QUANTILE_BINNING):   else if Year_Birth < 1970 then BIN_Year_Birth=2;
66865     +else if Year_Birth < 1978 then BIN_Year_Birth=3;
MPRINT(EM_QUANTILE_BINNING):   else if Year_Birth < 1978 then BIN_Year_Birth=3;
66866     +else if Year_Birth >= 1978 then BIN_Year_Birth=4;
MPRINT(EM_QUANTILE_BINNING):   else if Year_Birth >= 1978 then BIN_Year_Birth=4;
66867     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
66868     +drop
66869     +AcceptedCmpTotal
66870     +Age
66871     +Frq
66872     +Income
66873     +Kidhome
66874     +Mnt
66875     +MntFishProducts
66876     +MntFruits
66877     +MntGoldProds
66878     +MntMeatProducts
66879     +MntSweetProducts
66880     +MntWines
66881     +MonthsAsCustomer
66882     +NumCatalogPurchases
66883     +NumDealsPurchases
66884     +NumDistPurchases
66885     +NumStorePurchases
66886     +NumWebPurchases
66887     +NumWebVisitsMonth
66888     +RFMstat
66889     +RMntFrq
66890     +Recency
66891     +Teenhome
66892     +Year_Birth
66893     +;
MPRINT(EM_QUANTILE_BINNING):   drop AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.BINNING_BINDATA has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   length newgroup _group_ _order_ 8 _level_ $8;
MPRINT(EM_QUANTILE_BINNING):   newgroup =.;
MPRINT(EM_QUANTILE_BINNING):   _LEVEL_ = 'ORDINAL';
MPRINT(EM_QUANTILE_BINNING):   _Group_ = grp;
MPRINT(EM_QUANTILE_BINNING):   rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
MPRINT(EM_QUANTILE_BINNING):   keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      264:11   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: There were 24 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 116 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   _order_ = _N_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 116 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set WORK.TEMPSPLITVALS has 116 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals ;
MPRINT(EM_QUANTILE_BINNING):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 116 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 116 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempvariableset;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_QUANTILE_BINNING):   where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') and (TYPE='C') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data =EMWS8.BINNING_BINDATA classout=_classout nonorm;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data=EMWS8.BINNING_BINDATA classout=_classout2;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout2;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data _classout;
MPRINT(EM_QUANTILE_BINNING):   length _variable_ $32;
MPRINT(EM_QUANTILE_BINNING):   merge _classout _classout2 (rename=(LEVEL=_split_value_));
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   _variable_ = NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 116 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 116 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   length _norm_level_ $200 _split_value_ $200;
MPRINT(EM_QUANTILE_BINNING):   merge EMWS8.BINNING_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   LEVEL = trim(left(LEVEL));
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = trim(left(_split_value_));
MPRINT(EM_QUANTILE_BINNING):   _norm_level_ = trim(left(_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   drop NAME FREQUENCY TYPE CRAW NRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      478:19   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      478:9   
NOTE: There were 116 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 126 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete _classout _classout2;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT2 (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 126 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 126 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by DISPLAY_VAR _Group_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 126 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 126 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete sortedmapping tempsplitvals tempmissvalues ;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.SORTEDMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 9 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE LEVEL in ('BINARY', 'NOMINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 9 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc dmdb data=EMWS8.Part_TRAIN classout=tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   class AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL='MISSING' then level='Missing';
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=tempclassout nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by NAME descending FREQUENCY LEVEL;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds(keep=NAME NOBS);
MPRINT(EM_CLASSVARS_GROUP):   retain NOBS;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if first.NAME then NOBS = frequency;
MPRINT(EM_CLASSVARS_GROUP):   else NOBS=NOBS+frequency;
MPRINT(EM_CLASSVARS_GROUP):   if last.name then do;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPDS has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds;
MPRINT(EM_CLASSVARS_GROUP):   merge tempclassout tempds;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if ((LEVEL ne '') AND (LEVEL ne "."));
MPRINT(EM_CLASSVARS_GROUP):   PCT = 100 * (FREQUENCY/NOBS);
MPRINT(EM_CLASSVARS_GROUP):   if PCT < 0.5 then flag=1;
MPRINT(EM_CLASSVARS_GROUP):   else flag=0;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPDS.
NOTE: The data set WORK.TEMPDS has 24 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempmissvalues;
MPRINT(EM_CLASSVARS_GROUP):   length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp1";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp2";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp3";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp4";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp5";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Complain";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Education";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="HigherEducationBinary";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Marital_Status";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempsplitvals;
MPRINT(EM_CLASSVARS_GROUP):   length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   if ((level ne '') AND (level ne '.'));
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp1" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp2" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp3" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp4" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp5" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Complain" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Education" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "GRADUATION" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "PHD" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "MASTER" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "2N CYCLE" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "BASIC" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "HigherEducationBinary" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "1" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "0" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Marital_Status" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "MARRIED" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "TOGETHER" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "SINGLE" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "DIVORCED" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "WIDOW" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   _VARIABLE_ = NAME;
MPRINT(EM_CLASSVARS_GROUP):   newgroup = .;
MPRINT(EM_CLASSVARS_GROUP):   rename NAME = DISPLAY_VAR LEVEL = _SPLIT_VALUE_;
MPRINT(EM_CLASSVARS_GROUP):   keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Variable _Split_value_ is uninitialized.
NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sql;
MPRINT(EM_CLASSVARS_GROUP):   reset noprint;
MPRINT(EM_CLASSVARS_GROUP):   select count(*) into :nobs from EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 126 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 126 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = tempsplitvals nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_Value_ _group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   merge EMWS8.BINNING_SPLITVALS tempsplitvals ;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_ ;
MPRINT(EM_CLASSVARS_GROUP):   if display_var eq "" then delete;
MPRINT(EM_CLASSVARS_GROUP):   if _norm_level_ eq "" then _norm_level_ = _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 126 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 149 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 149 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_CLASSVARS_GROUP):   delete tempsplitvals tempds tempclassout tempvariableset tempvars tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPDS (memtype=DATA).
NOTE: Deleting WORK.TEMPCLASSOUT (memtype=DATA).
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_CLASSVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_ORDVARS_GROUP):   by NAME;
MPRINT(EM_ORDVARS_GROUP):   where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='ORDINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_ORDVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_ORDVARS_GROUP):   delete tempsplitvals varvals tempvariableset tempvars ;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: The file WORK.TEMPSPLITVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.VARVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
MPRINT(EM_ORDVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc print data=EMWS8.BINNING_VARMAPPINGS label;
MPRINT(TRAIN):   var _VARIABLE_ _GRP_VARIABLE_ ;
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.BINNING_SPLITVALS out=tempsplitvals nodupkey;
MPRINT(TRAIN):   by _VARIABLE_;
MPRINT(TRAIN):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: 116 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   length _proc_var_ $32;
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP1" then _proc_var_ = "AcceptedCmp1";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP2" then _proc_var_ = "AcceptedCmp2";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP3" then _proc_var_ = "AcceptedCmp3";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP4" then _proc_var_ = "AcceptedCmp4";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP5" then _proc_var_ = "AcceptedCmp5";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMPTOTAL" then _proc_var_ = "BIN_AcceptedCmpTotal";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "AGE" then _proc_var_ = "BIN_Age";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "FRQ" then _proc_var_ = "BIN_Frq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "INCOME" then _proc_var_ = "BIN_Income";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "KIDHOME" then _proc_var_ = "BIN_Kidhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNT" then _proc_var_ = "BIN_Mnt";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFISHPRODUCTS" then _proc_var_ = "BIN_MntFishProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFRUITS" then _proc_var_ = "BIN_MntFruits";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTGOLDPRODS" then _proc_var_ = "BIN_MntGoldProds";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTMEATPRODUCTS" then _proc_var_ = "BIN_MntMeatProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTSWEETPRODUCTS" then _proc_var_ = "BIN_MntSweetProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTWINES" then _proc_var_ = "BIN_MntWines";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MONTHSASCUSTOMER" then _proc_var_ = "BIN_MonthsAsCustomer";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMCATALOGPURCHASES" then _proc_var_ = "BIN_NumCatalogPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDEALSPURCHASES" then _proc_var_ = "BIN_NumDealsPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDISTPURCHASES" then _proc_var_ = "BIN_NumDistPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMSTOREPURCHASES" then _proc_var_ = "BIN_NumStorePurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBPURCHASES" then _proc_var_ = "BIN_NumWebPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBVISITSMONTH" then _proc_var_ = "BIN_NumWebVisitsMonth";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RFMSTAT" then _proc_var_ = "BIN_RFMstat";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RMNTFRQ" then _proc_var_ = "BIN_RMntFrq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RECENCY" then _proc_var_ = "BIN_Recency";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "TEENHOME" then _proc_var_ = "BIN_Teenhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "YEAR_BIRTH" then _proc_var_ = "BIN_Year_Birth";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "COMPLAIN" then _proc_var_ = "Complain";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "EDUCATION" then _proc_var_ = "Education";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "HIGHEREDUCATIONBINARY" then _proc_var_ = "HigherEducationBinary";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MARITAL_STATUS" then _proc_var_ = "Marital_Status";
MPRINT(TRAIN):   if missing(_proc_var_) then _proc_var_=_variable_;
MPRINT(TRAIN):   run;

NOTE: There were 33 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 33 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete sortedbin tempsplitvals;
MPRINT(TRAIN):   run;

NOTE: The file WORK.SORTEDBIN (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_FINE_DETAIL):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_FINE_DETAIL):   / missing out=temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETB has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TEMPTARGETB (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data temptrain ;
MPRINT(EM_SUMMARIZE_TABLE):   set EMWS8.BINNING_BINDATA;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTRAIN has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_PRENORMALIZECLASSVARS.SOURCE.
66894     +%macro em_PreNormalizeClassVars(incmeta=, outcmeta=);
66896     +   data &outcmeta(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
66897     +      length INDEXVAR $32; retain _index 0;
66898     +      set &incmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
66899     +      if strip(LEVEL) eq 'INTERVAL' then delete;
66900     +      else do;
66901     +         _index+1;
66902     +         INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
66903     +      end;
66904     +   run;
66905     +%mend em_PreNormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_NORMALIZECLASSVARS.SOURCE.
66906     +%macro em_NormalizeClassVars(indata=,
66907     +                          cmeta=,
66908     +                          encodedTarget=N,
66909     +                          target=,
66910     +                          targetEvent=,
66911     +                          targetNonEvent=,
66912     +                          outdata=);
66913     + %let dsid = %sysfunc(open(&cmeta));
66914     + %let vn_name =%sysfunc(varnum(&dsid, NAME));
66915     + %let vn_indexvar =%sysfunc(varnum(&dsid, INDEXVAR));
66916     + %let vn_format =%sysfunc(varnum(&dsid, FORMAT));
66917     + %let vn_type =%sysfunc(varnum(&dsid, TYPE));
66919     + data &outdata/view=&outdata;
66920     +      length _normedvar32 $32.;
66921     +      set &indata( rename = (
66922     +      %let k = 1;
66923     +      %do %while(^%sysfunc(fetch(&dsid)));
66924     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
66925     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
66926     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
66927     +          &_name = &_indexvar
66928     +          %let k = %eval(&k+1);
66929     +      %end;
66930     +      ));
66931     +      drop  _normedvar32;
66933     +      %let rc=%sysfunc(rewind(&dsid));
66934     +      %let k = 1;
66935     +      %do %while(^%sysfunc(fetch(&dsid)));
66936     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
66937     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
66938     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
66939     +          %let _type     = %sysfunc(getvarc(&dsid, &vn_type));
66940     +          %if &_format ne %then %do;
66941     +              _normedvar32 = put(&_indexvar, &_format);
66942     +          %end;
66943     +          %else %do;
66944     +              %if &_type = N %then %do;
66945     +                  _normedvar32 = put(&_indexvar, Best12.);
66946     +              %end;
66947     +              %else %do;
66948     +                  _normedvar32 = put(&_indexvar, $32.);
66949     +              %end;
66950     +          %end;
66951     +          %DMNORMIP(_normedvar32);
66952     +          &_name = _normedvar32;
66953     +          drop &_indexvar;
66954     +          %let k = %eval(&k+1);
66955     +      %end;
66956     +      %let dsid = %sysfunc(close(&dsid));
66958     +      %if &encodedTarget = Y %then %do;
66959     +          %let qtargetEvent = %sysfunc(quote(&targetEvent));
66960     +          %let qtargetNonEvent = %sysfunc(quote(&targetNonEvent));
66961     +          if upcase(strip(&target)) = &qtargetEvent then _EncodedTarget_ =1;
66962     +          else if upcase(strip(&target)) = &qtargetNonEvent then _EncodedTarget_ = 0;
66963     +      %end;
66964     + run;
66966     +%mend em_NormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=tempmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 33 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAP has 33 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _cmeta;
MPRINT(EM_SUMMARIZE_TABLE):   merge tempvarset tempmap(in=_a rename=(_variable_=name ));
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   if ((_a) or (role="TARGET"));
MPRINT(EM_SUMMARIZE_TABLE):   if role="INPUT" then name=_proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if role="TARGET" then role="INPUT";
MPRINT(EM_SUMMARIZE_TABLE):   level = procLevel;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(name, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      110:9   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      115:4   
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: There were 33 observations read from the data set WORK.TEMPMAP.
NOTE: The data set WORK._CMETA has 34 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRENORMALIZECLASSVARS):   data _cmetatmp(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
MPRINT(EM_PRENORMALIZECLASSVARS):   length INDEXVAR $32;
MPRINT(EM_PRENORMALIZECLASSVARS):   retain _index 0;
MPRINT(EM_PRENORMALIZECLASSVARS):   set _cmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRENORMALIZECLASSVARS):   if strip(LEVEL) eq 'INTERVAL' then delete;
MPRINT(EM_PRENORMALIZECLASSVARS):   else do;
MPRINT(EM_PRENORMALIZECLASSVARS):   _index+1;
MPRINT(EM_PRENORMALIZECLASSVARS):   INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
MPRINT(EM_PRENORMALIZECLASSVARS):   end;
MPRINT(EM_PRENORMALIZECLASSVARS):   run;

NOTE: There were 34 observations read from the data set WORK._CMETA.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK._CMETATMP has 34 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_NORMALIZECLASSVARS):   data _tmp_train/view=_tmp_train;
MPRINT(EM_NORMALIZECLASSVARS):   length _normedvar32 $32.;
MPRINT(EM_NORMALIZECLASSVARS):   set work.temptrain( rename = ( AcceptedCmp1 = _INDEXVAR1 AcceptedCmp2 = _INDEXVAR2 AcceptedCmp3 = _INDEXVAR3 AcceptedCmp4 = _INDEXVAR4 AcceptedCmp5 = _INDEXVAR5 BIN_AcceptedCmpTotal = _INDEXVAR6 BIN_Age = _INDEXVAR7 
Complain = _INDEXVAR8 DepVar = _INDEXVAR9 Education = _INDEXVAR10 BIN_Frq = _INDEXVAR11 HigherEducationBinary = _INDEXVAR12 BIN_Income = _INDEXVAR13 BIN_Kidhome = _INDEXVAR14 Marital_Status = _INDEXVAR15 BIN_Mnt = _INDEXVAR16 BIN_MntFishProducts = 
_INDEXVAR17 BIN_MntFruits = _INDEXVAR18 BIN_MntGoldProds = _INDEXVAR19 BIN_MntMeatProducts = _INDEXVAR20 BIN_MntSweetProducts = _INDEXVAR21 BIN_MntWines = _INDEXVAR22 BIN_MonthsAsCustomer = _INDEXVAR23 BIN_NumCatalogPurchases = _INDEXVAR24 
BIN_NumDealsPurchases = _INDEXVAR25 BIN_NumDistPurchases = _INDEXVAR26 BIN_NumStorePurchases = _INDEXVAR27 BIN_NumWebPurchases = _INDEXVAR28 BIN_NumWebVisitsMonth = _INDEXVAR29 BIN_RFMstat = _INDEXVAR30 BIN_RMntFrq = _INDEXVAR31 BIN_Recency = _INDEXVAR32 
BIN_Teenhome = _INDEXVAR33 BIN_Year_Birth = _INDEXVAR34 ));
MPRINT(EM_NORMALIZECLASSVARS):   drop _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR1, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp1 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR1;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR2, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp2 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR2;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR3, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp3 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR3;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR4, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp4 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR4;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR5, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp5 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR5;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR6, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_AcceptedCmpTotal = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR6;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR7, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Age = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR7;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR8, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Complain = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR8;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR9, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   DepVar = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR9;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR10, $10.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Education = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR10;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR11, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Frq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR11;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR12, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   HigherEducationBinary = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR12;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR13, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Income = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR13;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR14, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Kidhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR14;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR15, $8.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Marital_Status = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR15;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR16, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Mnt = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR16;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR17, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFishProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR17;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR18, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFruits = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR18;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR19, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntGoldProds = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR19;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR20, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntMeatProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR20;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR21, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntSweetProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR21;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR22, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntWines = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR22;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR23, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MonthsAsCustomer = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR23;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR24, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumCatalogPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR24;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR25, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDealsPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR25;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR26, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDistPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR26;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR27, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumStorePurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR27;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR28, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR28;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR29, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebVisitsMonth = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR29;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR30, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RFMstat = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR30;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR31, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RMntFrq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR31;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR32, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Recency = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR33, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Teenhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR33;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR34, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Year_Birth = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR34;
MPRINT(EM_NORMALIZECLASSVARS):   run;

NOTE: DATA STEP view saved on file WORK._TMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=sortedmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 33 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.SORTEDMAP has 33 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output CrossTabFreqs=crosstabfreq ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("proc freq data=_tmp_train order=formatted addnames;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("tables ("||_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  ") * DepVar/ missing;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output close;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   proc freq data=_tmp_train order=formatted addnames;
MPRINT(EM_SUMMARIZE_TABLE):   ) * DepVar/ missing;
MPRINT(EM_SUMMARIZE_TABLE):   run;
MPRINT(EM_SUMMARIZE_TABLE):   ods output close;
NOTE: There were 33 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   CrossTabFreqs ;
2         + proc freq data=_tmp_train order=formatted addnames;
3         + tables (AcceptedCmp1
4         + AcceptedCmp2
5         + AcceptedCmp3
6         + AcceptedCmp4
7         + AcceptedCmp5
8         + BIN_AcceptedCmpTotal
9         + BIN_Age
10        + BIN_Frq
11        + BIN_Income
12        + BIN_Kidhome
13        + BIN_Mnt
14        + BIN_MntFishProducts
15        + BIN_MntFruits
16        + BIN_MntGoldProds
17        + BIN_MntMeatProducts
18        + BIN_MntSweetProducts
19        + BIN_MntWines
20        + BIN_MonthsAsCustomer
21        + BIN_NumCatalogPurchases
22        + BIN_NumDealsPurchases
23        + BIN_NumDistPurchases
24        + BIN_NumStorePurchases
25        + BIN_NumWebPurchases
26        + BIN_NumWebVisitsMonth
27        + BIN_RFMstat
28        + BIN_RMntFrq
29        + BIN_Recency
30        + BIN_Teenhome
31        + BIN_Year_Birth
32        + Complain
33        + Education
34        + HigherEducationBinary
35        + Marital_Status
36        + ) * DepVar/ missing;
37        + run;

NOTE: View WORK._TMP_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
      
NOTE: There were 2374 observations read from the data set WORK.TEMPTRAIN.
NOTE: The data set WORK.CROSSTABFREQ has 435 observations and 44 variables.
NOTE: There were 2374 observations read from the data set WORK._TMP_TRAIN.
NOTE: The PROCEDURE FREQ printed pages 27-59.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
      

38        + ods output close;
MPRINT(EM_SUMMARIZE_TABLE):   close
MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("data crosstabs;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  length _variable_ _split_value_  $200 ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  set crosstabfreq(where=(_type_='11'));");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _variable_= RowVariable;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _split_value_="||_proc_var_||";");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("end;");
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  "keep _variable_ _split_value_ DepVar Frequency Percent display_var;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabfreq(where=(_type_='11'));
MPRINT(EM_SUMMARIZE_TABLE):   _variable_= RowVariable;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp1' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp1 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp2' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp2 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp3' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp3 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp4' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp4 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp5' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp5 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_AcceptedCmpTotal ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Age' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Age ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Frq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Frq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Income' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Income ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Kidhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Kidhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Mnt' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Mnt ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFishProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFishProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFruits' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFruits ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntGoldProds' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntGoldProds ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntMeatProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntSweetProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntWines' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntWines ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MonthsAsCustomer ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumCatalogPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDealsPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDistPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumStorePurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebVisitsMonth ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RFMstat' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RFMstat ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RMntFrq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RMntFrq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Recency' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Recency ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Teenhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Teenhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Year_Birth' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Year_Birth ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Complain' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Complain ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Education' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Education ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'HigherEducationBinary' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=HigherEducationBinary ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Marital_Status' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Marital_Status ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   keep _variable_ _split_value_ DepVar Frequency Percent display_var;
MPRINT(EM_SUMMARIZE_TABLE):   run;
NOTE: There were 33 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data crosstabs;
2         +   length _variable_ _split_value_  $200 ;
MPRINT(EM_SUMMARIZE_TABLE):  200
3         +   set crosstabfreq(where=(_type_='11'));
4         +   _variable_= RowVariable;
5         + if strip(RowVariable) = 'AcceptedCmp1' then do;
6         +   _split_value_=AcceptedCmp1                    ;
7         + end;
8         + if strip(RowVariable) = 'AcceptedCmp2' then do;
9         +   _split_value_=AcceptedCmp2                    ;
10        + end;
11        + if strip(RowVariable) = 'AcceptedCmp3' then do;
12        +   _split_value_=AcceptedCmp3                    ;
13        + end;
14        + if strip(RowVariable) = 'AcceptedCmp4' then do;
15        +   _split_value_=AcceptedCmp4                    ;
16        + end;
17        + if strip(RowVariable) = 'AcceptedCmp5' then do;
18        +   _split_value_=AcceptedCmp5                    ;
19        + end;
20        + if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
21        +   _split_value_=BIN_AcceptedCmpTotal            ;
22        + end;
23        + if strip(RowVariable) = 'BIN_Age' then do;
24        +   _split_value_=BIN_Age                         ;
25        + end;
26        + if strip(RowVariable) = 'BIN_Frq' then do;
27        +   _split_value_=BIN_Frq                         ;
28        + end;
29        + if strip(RowVariable) = 'BIN_Income' then do;
30        +   _split_value_=BIN_Income                      ;
31        + end;
32        + if strip(RowVariable) = 'BIN_Kidhome' then do;
33        +   _split_value_=BIN_Kidhome                     ;
34        + end;
35        + if strip(RowVariable) = 'BIN_Mnt' then do;
36        +   _split_value_=BIN_Mnt                         ;
37        + end;
38        + if strip(RowVariable) = 'BIN_MntFishProducts' then do;
39        +   _split_value_=BIN_MntFishProducts             ;
40        + end;
41        + if strip(RowVariable) = 'BIN_MntFruits' then do;
42        +   _split_value_=BIN_MntFruits                   ;
43        + end;
44        + if strip(RowVariable) = 'BIN_MntGoldProds' then do;
45        +   _split_value_=BIN_MntGoldProds                ;
46        + end;
47        + if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
48        +   _split_value_=BIN_MntMeatProducts             ;
49        + end;
50        + if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
51        +   _split_value_=BIN_MntSweetProducts            ;
52        + end;
53        + if strip(RowVariable) = 'BIN_MntWines' then do;
54        +   _split_value_=BIN_MntWines                    ;
55        + end;
56        + if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
57        +   _split_value_=BIN_MonthsAsCustomer            ;
58        + end;
59        + if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
60        +   _split_value_=BIN_NumCatalogPurchases         ;
61        + end;
62        + if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
63        +   _split_value_=BIN_NumDealsPurchases           ;
64        + end;
65        + if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
66        +   _split_value_=BIN_NumDistPurchases            ;
67        + end;
68        + if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
69        +   _split_value_=BIN_NumStorePurchases           ;
70        + end;
71        + if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
72        +   _split_value_=BIN_NumWebPurchases             ;
73        + end;
74        + if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
75        +   _split_value_=BIN_NumWebVisitsMonth           ;
76        + end;
77        + if strip(RowVariable) = 'BIN_RFMstat' then do;
78        +   _split_value_=BIN_RFMstat                     ;
79        + end;
80        + if strip(RowVariable) = 'BIN_RMntFrq' then do;
81        +   _split_value_=BIN_RMntFrq                     ;
82        + end;
83        + if strip(RowVariable) = 'BIN_Recency' then do;
84        +   _split_value_=BIN_Recency                     ;
85        + end;
86        + if strip(RowVariable) = 'BIN_Teenhome' then do;
87        +   _split_value_=BIN_Teenhome                    ;
88        + end;
89        + if strip(RowVariable) = 'BIN_Year_Birth' then do;
90        +   _split_value_=BIN_Year_Birth                  ;
91        + end;
92        + if strip(RowVariable) = 'Complain' then do;
93        +   _split_value_=Complain                        ;
94        + end;
95        + if strip(RowVariable) = 'Education' then do;
96        +   _split_value_=Education                       ;
97        + end;
98        + if strip(RowVariable) = 'HigherEducationBinary' then do;
99        +   _split_value_=HigherEducationBinary           ;
100       + end;
101       + if strip(RowVariable) = 'Marital_Status' then do;
102       +   _split_value_=Marital_Status                  ;
103       + end;
104       + keep _variable_ _split_value_ DepVar Frequency Percent display_var;
105       + run;

WARNING: The variable display_var in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 224 observations read from the data set WORK.CROSSTABFREQ.
      WHERE _type_='11';
NOTE: The data set WORK.CROSSTABS has 224 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 224 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 224 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length display_var $32;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 224 observations read from the data set WORK.CROSSTABS.
NOTE: There were 33 observations read from the data set WORK.SORTEDMAP.
NOTE: The data set WORK.CROSSTABS has 224 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by display_var _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 224 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 224 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
MPRINT(EM_SUMMARIZE_TABLE):   by display_var;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(_variable_, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   _temp =
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_var by input data sets. This may cause unexpected results.
NOTE: There were 224 observations read from the data set WORK.CROSSTABS.
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: The data set WORK.CROSSTABS has 227 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 227 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 227 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate 8 type $1 valfmt $20 ;
MPRINT(EM_SUMMARIZE_TABLE):   retain eventCount noneventCount ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   if first._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total=0;
MPRINT(EM_SUMMARIZE_TABLE):   eventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   noneventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if upcase(strip(_temp))="1" then eventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   else noneventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   if last._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total = eventCount + noneventCount;
MPRINT(EM_SUMMARIZE_TABLE):   if total ne 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = eventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = nonEventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   output;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   valfmt = format;
MPRINT(EM_SUMMARIZE_TABLE):   drop _temp Frequency percent;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 553:20   1 at 565:24   1 at 570:30   
NOTE: There were 227 observations read from the data set WORK.CROSSTABS.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 113 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):  ;
MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   length display_var $32 newgroup numsplitval 8;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   display_var = _variable_;
MPRINT(EM_FINE_DETAIL):   index = kindex(display_var, "BIN_");
MPRINT(EM_FINE_DETAIL):   if index gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 5);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   index2 = kindex(display_var, "SV_");
MPRINT(EM_FINE_DETAIL):   if index2 gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 4);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
MPRINT(EM_FINE_DETAIL):   _index_ = _N_;
MPRINT(EM_FINE_DETAIL):   newgroup = .;
MPRINT(EM_FINE_DETAIL):   drop index index2 ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Variable numsplitval is uninitialized.
NOTE: There were 113 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 113 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 113 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 113 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_FINE_DETAIL):   _norm_level_ = upcase(_norm_level_);
MPRINT(EM_FINE_DETAIL):   if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
MPRINT(EM_FINE_DETAIL):   * drop _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.TMPSPLITVALS has 149 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=tmpsplitvals out=sortedsplit;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 149 observations read from the data set WORK.TMPSPLITVALS.
NOTE: The data set WORK.SORTEDSPLIT has 149 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets library=work nolist;
MPRINT(EM_FINE_DETAIL):   delete tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TMPSPLITVALS (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedbin;
MPRINT(EM_FINE_DETAIL):   by BIN_NAME BIN;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.SORTEDBIN has 92 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   merge EMWS8.BINNING_FINEDETAILDATA(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   if _a then do;
MPRINT(EM_FINE_DETAIL):   binFlag = 1;
MPRINT(EM_FINE_DETAIL):   VALUE=EM_BIN_LABEL;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   else do;
MPRINT(EM_FINE_DETAIL):   binFlag = 0;
MPRINT(EM_FINE_DETAIL):   *VALUE=strip(display_var)!!"="!!strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   VALUE=strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((eventCount=.) or (nonEventCount=.)) then do;
MPRINT(EM_FINE_DETAIL):   eventCount=0;
MPRINT(EM_FINE_DETAIL):   nonEventCount=0;
MPRINT(EM_FINE_DETAIL):   total = 0;
MPRINT(EM_FINE_DETAIL):   eventRate= 0;
MPRINT(EM_FINE_DETAIL):   nonEventRate = 0;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   eventCount = round(eventCount, .001);
MPRINT(EM_FINE_DETAIL):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_FINE_DETAIL):   total= round(total, .001);
MPRINT(EM_FINE_DETAIL):   eventRate = round(eventRate, .001);
MPRINT(EM_FINE_DETAIL):   nonEventRate = round(nonEventRate, .001);
MPRINT(EM_FINE_DETAIL):   if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then numsplitval = _split_value_;
MPRINT(EM_FINE_DETAIL):   else if ((type='N') AND (valfmt ne "")) then numsplitval = _order_;
MPRINT(EM_FINE_DETAIL):   else numsplitval=.;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
MPRINT(EM_FINE_DETAIL):   if _a and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   if _c and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   drop NAME EM_BIN_LABEL valfmt;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      439:15   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 113 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: There were 149 observations read from the data set WORK.SORTEDSPLIT.
NOTE: There were 92 observations read from the data set WORK.SORTEDBIN.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 149 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp1" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp2" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp3" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp4" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp5" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmpTotal" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Age" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Complain" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Education" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Frq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "HigherEducationBinary" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Income" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Kidhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Marital_Status" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Mnt" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFishProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFruits" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntGoldProds" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntMeatProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntSweetProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntWines" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MonthsAsCustomer" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumCatalogPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDealsPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDistPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumStorePurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebVisitsMonth" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RFMstat" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RMntFrq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Recency" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Teenhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Year_Birth" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then delete;
MPRINT(EM_FINE_DETAIL):   * if binFlag=1 and UB=LB then delete;
MPRINT(EM_FINE_DETAIL):   * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 149 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by DISPLAY_VAR _index_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 149 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete sortedsplit sortedbin ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.SORTEDSPLIT (memtype=DATA).
NOTE: Deleting WORK.SORTEDBIN (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CREATE_GROUPING):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_CREATE_GROUPING):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_CREATE_GROUPING):   / missing out=temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETC has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets lib=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPTARGETC (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc means data=EMWS8.BINNING_FINEDETAILDATA noprint;
MPRINT(EM_CREATE_GROUPING):   var eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   class _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set WORK.SUMM has 182 observations and 6 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=summ(drop=_type_ _freq_);
MPRINT(EM_CREATE_GROUPING):   by _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 182 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 182 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep=_variable_ eventCount nonEventCount groupresprate) tempcoarse(keep=_variable_ _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
MPRINT(EM_CREATE_GROUPING):   set summ;
MPRINT(EM_CREATE_GROUPING):   format groupresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   format groupnonresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   by _variable_ ;
MPRINT(EM_CREATE_GROUPING):   if _group_=. then do;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   respper = eventCount / 359;
MPRINT(EM_CREATE_GROUPING):   nrespper = nonEventCount / 2015;
MPRINT(EM_CREATE_GROUPING):   if ((nonEventCount = 0) AND (eventCount = 0)) then do;
MPRINT(EM_CREATE_GROUPING):   groupresprate=0;
MPRINT(EM_CREATE_GROUPING):   groupNonresprate = 0;
MPRINT(EM_CREATE_GROUPING):   eventRate = 0;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   groupresprate = eventCount / (eventCount + nonEventCount) * 100;
MPRINT(EM_CREATE_GROUPING):   groupNonRespRate = 100 - groupRespRate;
MPRINT(EM_CREATE_GROUPING):   eventRate = eventCount / 359 * 100;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = nonEventCount / 2015 * 100;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   output gini tempcoarse;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 182 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.GINI has 149 observations and 4 variables.
NOTE: The data set WORK.TEMPCOARSE has 149 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=gini;
MPRINT(EM_CREATE_GROUPING):   by _variable_ descending groupresprate;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 149 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 149 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep= _variable_ _gini_);
MPRINT(EM_CREATE_GROUPING):   retain between within cumresp cumnresp;
MPRINT(EM_CREATE_GROUPING):   set gini(keep=_variable_ eventCount nonEventCount);
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   if first._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   between = 0;
MPRINT(EM_CREATE_GROUPING):   within = 0;
MPRINT(EM_CREATE_GROUPING):   cumresp = 0;
MPRINT(EM_CREATE_GROUPING):   cumnresp = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   between + 2 * cumnresp * eventCount;
MPRINT(EM_CREATE_GROUPING):   within + nonEventCount * eventCount;
MPRINT(EM_CREATE_GROUPING):   cumresp + eventCount;
MPRINT(EM_CREATE_GROUPING):   cumnresp + nonEventCount;
MPRINT(EM_CREATE_GROUPING):   if last._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   if ^(cumnresp=0 or cumresp=0) then do;
MPRINT(EM_CREATE_GROUPING):   _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
MPRINT(EM_CREATE_GROUPING):   output;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 149 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 33 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(EM_CREATE_GROUPING):   rename _variable_ = display_var _proc_var_ = _variable_;
MPRINT(EM_CREATE_GROUPING):   keep _variable_ _proc_var_ label;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 33 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPDISPLAYVAR has 33 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: The data set WORK.TEMPDISPLAYVAR has 33 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data EMWS8.BINNING_COARSE;
MPRINT(EM_CREATE_GROUPING):   length display_Var $32 label _label_ $200 role $10 _group_ 8;
MPRINT(EM_CREATE_GROUPING):   merge tempdisplayvar tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   label display_var = "Variable" eventRate = "Event Rate" nonEventRate = "Non-Event Rate" _group_ = "Group" role = "Role" _gini_ = "Gini Coefficient" eventcount = "Event Count" noneventcount = "Non-Event Count" groupresprate = 
"Group Event Rate" groupnonresprate = "Group Non-Event Rate" ;
MPRINT(EM_CREATE_GROUPING):   eventCount = round(eventCount, .001);
MPRINT(EM_CREATE_GROUPING):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_CREATE_GROUPING):   groupRespRate = round(groupRespRate, .001);
MPRINT(EM_CREATE_GROUPING):   drop _variable_ index index2 respper nrespper;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Variable _label_ is uninitialized.
NOTE: Variable role is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _variable_ by input data sets. This may cause unexpected results.
WARNING: The variable index in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable index2 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 33 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: There were 149 observations read from the data set WORK.TEMPCOARSE.
NOTE: There were 33 observations read from the data set WORK.GINI.
NOTE: The data set EMWS8.BINNING_COARSE has 149 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets library=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPCOARSE (memtype=DATA).
NOTE: Deleting WORK.GINI (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas";
MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   FILE Y;
MPRINT(EM_GENERATE_LABELVALUES):   put " length _LABEL_ $200;";
MPRINT(EM_GENERATE_LABELVALUES):   put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=16. April 2016 20.10 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 2 records were written to the file Y.
      The minimum record length was 21.
      The maximum record length was 83.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_SPLITVALS out=work.sortedsplitval;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var _split_Value_;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.SORTEDSPLITVAL has 149 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var bin;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 92 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   if display_var eq '' then delete;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 149 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 116 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   keep _variable_ display_var missgrp;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 149 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 92 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 33 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=temp out=class;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_ LB;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 116 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 116 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   file Y MOD;
MPRINT(EM_GENERATE_LABELVALUES):   length string $200 flag 8;
MPRINT(EM_GENERATE_LABELVALUES):   retain string flag;
MPRINT(EM_GENERATE_LABELVALUES):   set class end=eof;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_;
MPRINT(EM_GENERATE_LABELVALUES):   index = kindex(_variable_, "BIN_");
MPRINT(EM_GENERATE_LABELVALUES):   if index gt 0 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then do;';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   if LB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 1;
MPRINT(EM_GENERATE_LABELVALUES):   *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._Group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   if UB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!'< '!!strip(UB)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag=1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string= " UB="!!strip(UB)!!";";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   put "end;";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string = "_LABEL_='"!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag ne 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   tempstring = strip(string)!!', '!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   length = length(tempstring);
MPRINT(EM_GENERATE_LABELVALUES):   if length < 195 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = tempstring;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)||",...";
MPRINT(EM_GENERATE_LABELVALUES):   flag=1;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      243:30   295:37   355:23   
NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=108,
      Last Modified=16. April 2016 20.10 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 532 records were written to the file Y.
      The minimum record length was 1.
      The maximum record length was 61.
NOTE: There were 116 observations read from the data set WORK.CLASS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
NOTE: %INCLUDE (level 1) file Y is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas.
66967     + length _LABEL_ $200;
MPRINT(EM_GENERATE_LABELVALUES):   length _LABEL_ $200;
66968     + label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";
MPRINT(EM_GENERATE_LABELVALUES):   label _LABEL_= "Group Values";
66969     +
66970     +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then
66971     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then _LABEL_='0';
66972     +else
66973     +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then
66974     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then _LABEL_='1';
66975     +
66976     +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then
66977     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then _LABEL_='0';
66978     +else
66979     +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then
66980     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then _LABEL_='1';
66981     +
66982     +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then
66983     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then _LABEL_='0';
66984     +else
66985     +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then
66986     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then _LABEL_='1';
66987     +
66988     +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then
66989     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then _LABEL_='0';
66990     +else
66991     +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then
66992     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then _LABEL_='1';
66993     +
66994     +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then
66995     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then _LABEL_='0';
66996     +else
66997     +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then
66998     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then _LABEL_='1';
66999     +
67000     +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
67001     +_LABEL_='AcceptedCmpTotal< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='AcceptedCmpTotal< 0';
67002     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
67003     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67004     +else
67005     +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
67006     +_LABEL_='0<= AcceptedCmpTotal';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= AcceptedCmpTotal';
67007     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67008     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67009     +
67010     +if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
67011     +_LABEL_='Age< 38';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Age< 38';
67012     +UB=38;
MPRINT(EM_GENERATE_LABELVALUES):   UB=38;
67013     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67014     +else
67015     +if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
67016     +_LABEL_='38<= Age< 46';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='38<= Age< 46';
67017     +UB=46;
MPRINT(EM_GENERATE_LABELVALUES):   UB=46;
67018     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67019     +else
67020     +if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
67021     +_LABEL_='46<= Age< 57';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='46<= Age< 57';
67022     +UB=57;
MPRINT(EM_GENERATE_LABELVALUES):   UB=57;
67023     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67024     +else
67025     +if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
67026     +_LABEL_='57<= Age';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='57<= Age';
67027     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67028     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67029     +
67030     +if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
67031     +_LABEL_='Frq< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Frq< 6';
67032     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
67033     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67034     +else
67035     +if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
67036     +_LABEL_='6<= Frq< 12';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= Frq< 12';
67037     +UB=12;
MPRINT(EM_GENERATE_LABELVALUES):   UB=12;
67038     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67039     +else
67040     +if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
67041     +_LABEL_='12<= Frq< 18';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='12<= Frq< 18';
67042     +UB=18;
MPRINT(EM_GENERATE_LABELVALUES):   UB=18;
67043     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67044     +else
67045     +if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
67046     +_LABEL_='18<= Frq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='18<= Frq';
67047     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67048     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67049     +
67050     +if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
67051     +_LABEL_='Income< 35268';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Income< 35268';
67052     +UB=35268;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35268;
67053     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67054     +else
67055     +if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
67056     +_LABEL_='35268<= Income< 52157';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35268<= Income< 52157';
67057     +UB=52157;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52157;
67058     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67059     +else
67060     +if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
67061     +_LABEL_='52157<= Income< 69486';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52157<= Income< 69486';
67062     +UB=69486;
MPRINT(EM_GENERATE_LABELVALUES):   UB=69486;
67063     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67064     +else
67065     +if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
67066     +_LABEL_='69486<= Income';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='69486<= Income';
67067     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67068     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67069     +
67070     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
67071     +_LABEL_='Kidhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Kidhome< 0';
67072     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
67073     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67074     +else
67075     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
67076     +_LABEL_='0<= Kidhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Kidhome< 1';
67077     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
67078     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67079     +else
67080     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
67081     +_LABEL_='1<= Kidhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Kidhome';
67082     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67083     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67084     +
67085     +if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
67086     +_LABEL_='Mnt< 72';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Mnt< 72';
67087     +UB=72;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72;
67088     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67089     +else
67090     +if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
67091     +_LABEL_='72<= Mnt< 405.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72<= Mnt< 405.5';
67092     +UB=405.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=405.5;
67093     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67094     +else
67095     +if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
67096     +_LABEL_='405.5<= Mnt< 1064';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='405.5<= Mnt< 1064';
67097     +UB=1064;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1064;
67098     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67099     +else
67100     +if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
67101     +_LABEL_='1064<= Mnt';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1064<= Mnt';
67102     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67103     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67104     +
67105     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
67106     +_LABEL_='MntFishProducts< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFishProducts< 3';
67107     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
67108     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67109     +else
67110     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
67111     +_LABEL_='3<= MntFishProducts< 13';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= MntFishProducts< 13';
67112     +UB=13;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13;
67113     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67114     +else
67115     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
67116     +_LABEL_='13<= MntFishProducts< 47';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13<= MntFishProducts< 47';
67117     +UB=47;
MPRINT(EM_GENERATE_LABELVALUES):   UB=47;
67118     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67119     +else
67120     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
67121     +_LABEL_='47<= MntFishProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='47<= MntFishProducts';
67122     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67123     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67124     +
67125     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
67126     +_LABEL_='MntFruits< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFruits< 2';
67127     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
67128     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67129     +else
67130     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
67131     +_LABEL_='2<= MntFruits< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= MntFruits< 9';
67132     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
67133     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67134     +else
67135     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
67136     +_LABEL_='9<= MntFruits< 35';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntFruits< 35';
67137     +UB=35;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35;
67138     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67139     +else
67140     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
67141     +_LABEL_='35<= MntFruits';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35<= MntFruits';
67142     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67143     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67144     +
67145     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
67146     +_LABEL_='MntGoldProds< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntGoldProds< 9';
67147     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
67148     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67149     +else
67150     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
67151     +_LABEL_='9<= MntGoldProds< 25';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntGoldProds< 25';
67152     +UB=25;
MPRINT(EM_GENERATE_LABELVALUES):   UB=25;
67153     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67154     +else
67155     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
67156     +_LABEL_='25<= MntGoldProds< 59';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='25<= MntGoldProds< 59';
67157     +UB=59;
MPRINT(EM_GENERATE_LABELVALUES):   UB=59;
67158     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67159     +else
67160     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
67161     +_LABEL_='59<= MntGoldProds';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='59<= MntGoldProds';
67162     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67163     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67164     +
67165     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
67166     +_LABEL_='MntMeatProducts< 17';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntMeatProducts< 17';
67167     +UB=17;
MPRINT(EM_GENERATE_LABELVALUES):   UB=17;
67168     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67169     +else
67170     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
67171     +_LABEL_='17<= MntMeatProducts< 72';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='17<= MntMeatProducts< 72';
67172     +UB=72;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72;
67173     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67174     +else
67175     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
67176     +_LABEL_='72<= MntMeatProducts< 246';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72<= MntMeatProducts< 246';
67177     +UB=246;
MPRINT(EM_GENERATE_LABELVALUES):   UB=246;
67178     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67179     +else
67180     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
67181     +_LABEL_='246<= MntMeatProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='246<= MntMeatProducts';
67182     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67183     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67184     +
67185     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
67186     +_LABEL_='MntSweetProducts< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntSweetProducts< 2';
67187     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
67188     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67189     +else
67190     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
67191     +_LABEL_='2<= MntSweetProducts< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= MntSweetProducts< 9';
67192     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
67193     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67194     +else
67195     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
67196     +_LABEL_='9<= MntSweetProducts< 35';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntSweetProducts< 35';
67197     +UB=35;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35;
67198     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67199     +else
67200     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
67201     +_LABEL_='35<= MntSweetProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35<= MntSweetProducts';
67202     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67203     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67204     +
67205     +if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
67206     +_LABEL_='MntWines< 24';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntWines< 24';
67207     +UB=24;
MPRINT(EM_GENERATE_LABELVALUES):   UB=24;
67208     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67209     +else
67210     +if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
67211     +_LABEL_='24<= MntWines< 183.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='24<= MntWines< 183.5';
67212     +UB=183.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=183.5;
67213     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67214     +else
67215     +if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
67216     +_LABEL_='183.5<= MntWines< 508';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='183.5<= MntWines< 508';
67217     +UB=508;
MPRINT(EM_GENERATE_LABELVALUES):   UB=508;
67218     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67219     +else
67220     +if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
67221     +_LABEL_='508<= MntWines';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='508<= MntWines';
67222     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67223     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67224     +
67225     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
67226     +_LABEL_='MonthsAsCustomer< 69';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MonthsAsCustomer< 69';
67227     +UB=69;
MPRINT(EM_GENERATE_LABELVALUES):   UB=69;
67228     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67229     +else
67230     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
67231     +_LABEL_='69<= MonthsAsCustomer< 83';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='69<= MonthsAsCustomer< 83';
67232     +UB=83;
MPRINT(EM_GENERATE_LABELVALUES):   UB=83;
67233     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67234     +else
67235     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
67236     +_LABEL_='83<= MonthsAsCustomer< 98';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='83<= MonthsAsCustomer< 98';
67237     +UB=98;
MPRINT(EM_GENERATE_LABELVALUES):   UB=98;
67238     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67239     +else
67240     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
67241     +_LABEL_='98<= MonthsAsCustomer';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='98<= MonthsAsCustomer';
67242     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67243     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67244     +
67245     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
67246     +_LABEL_='NumCatalogPurchases< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumCatalogPurchases< 0';
67247     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
67248     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67249     +else
67250     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
67251     +_LABEL_='0<= NumCatalogPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= NumCatalogPurchases< 2';
67252     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
67253     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67254     +else
67255     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
67256     +_LABEL_='2<= NumCatalogPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumCatalogPurchases< 4';
67257     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
67258     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67259     +else
67260     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
67261     +_LABEL_='4<= NumCatalogPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumCatalogPurchases';
67262     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67263     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67264     +
67265     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
67266     +_LABEL_='NumDealsPurchases< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDealsPurchases< 1';
67267     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
67268     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67269     +else
67270     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
67271     +_LABEL_='1<= NumDealsPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= NumDealsPurchases< 2';
67272     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
67273     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67274     +else
67275     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
67276     +_LABEL_='2<= NumDealsPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumDealsPurchases< 3';
67277     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
67278     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67279     +else
67280     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
67281     +_LABEL_='3<= NumDealsPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDealsPurchases';
67282     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67283     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67284     +
67285     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
67286     +_LABEL_='NumDistPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDistPurchases< 3';
67287     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
67288     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67289     +else
67290     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
67291     +_LABEL_='3<= NumDistPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDistPurchases< 6';
67292     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
67293     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67294     +else
67295     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
67296     +_LABEL_='6<= NumDistPurchases< 10';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumDistPurchases< 10';
67297     +UB=10;
MPRINT(EM_GENERATE_LABELVALUES):   UB=10;
67298     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67299     +else
67300     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
67301     +_LABEL_='10<= NumDistPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='10<= NumDistPurchases';
67302     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67303     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67304     +
67305     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
67306     +_LABEL_='NumStorePurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumStorePurchases< 3';
67307     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
67308     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67309     +else
67310     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
67311     +_LABEL_='3<= NumStorePurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumStorePurchases< 5';
67312     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
67313     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67314     +else
67315     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
67316     +_LABEL_='5<= NumStorePurchases< 8';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumStorePurchases< 8';
67317     +UB=8;
MPRINT(EM_GENERATE_LABELVALUES):   UB=8;
67318     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67319     +else
67320     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
67321     +_LABEL_='8<= NumStorePurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='8<= NumStorePurchases';
67322     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67323     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67324     +
67325     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
67326     +_LABEL_='NumWebPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebPurchases< 2';
67327     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
67328     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67329     +else
67330     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
67331     +_LABEL_='2<= NumWebPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumWebPurchases< 4';
67332     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
67333     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67334     +else
67335     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
67336     +_LABEL_='4<= NumWebPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumWebPurchases< 6';
67337     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
67338     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67339     +else
67340     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
67341     +_LABEL_='6<= NumWebPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebPurchases';
67342     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67343     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67344     +
67345     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
67346     +_LABEL_='NumWebVisitsMonth< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebVisitsMonth< 3';
67347     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
67348     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67349     +else
67350     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
67351     +_LABEL_='3<= NumWebVisitsMonth< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumWebVisitsMonth< 6';
67352     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
67353     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67354     +else
67355     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
67356     +_LABEL_='6<= NumWebVisitsMonth< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebVisitsMonth< 7';
67357     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
67358     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67359     +else
67360     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
67361     +_LABEL_='7<= NumWebVisitsMonth';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= NumWebVisitsMonth';
67362     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67363     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67364     +
67365     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
67366     +_LABEL_='RFMstat< 10.34';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RFMstat< 10.34';
67367     +UB=10.34;
MPRINT(EM_GENERATE_LABELVALUES):   UB=10.34;
67368     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67369     +else
67370     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
67371     +_LABEL_='10.34<= RFMstat< 128.09';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='10.34<= RFMstat< 128.09';
67372     +UB=128.09;
MPRINT(EM_GENERATE_LABELVALUES):   UB=128.09;
67373     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67374     +else
67375     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
67376     +_LABEL_='128.09<= RFMstat< 455.22';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='128.09<= RFMstat< 455.22';
67377     +UB=455.22;
MPRINT(EM_GENERATE_LABELVALUES):   UB=455.22;
67378     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67379     +else
67380     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
67381     +_LABEL_='455.22<= RFMstat';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='455.22<= RFMstat';
67382     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67383     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67384     +
67385     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
67386     +_LABEL_='RMntFrq< 13.25';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RMntFrq< 13.25';
67387     +UB=13.25;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13.25;
67388     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67389     +else
67390     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
67391     +_LABEL_='13.25<= RMntFrq< 30.4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13.25<= RMntFrq< 30.4';
67392     +UB=30.4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=30.4;
67393     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67394     +else
67395     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
67396     +_LABEL_='30.4<= RMntFrq< 52.86';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='30.4<= RMntFrq< 52.86';
67397     +UB=52.86;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52.86;
67398     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67399     +else
67400     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
67401     +_LABEL_='52.86<= RMntFrq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52.86<= RMntFrq';
67402     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67403     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67404     +
67405     +if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
67406     +_LABEL_='Recency< 24';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Recency< 24';
67407     +UB=24;
MPRINT(EM_GENERATE_LABELVALUES):   UB=24;
67408     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67409     +else
67410     +if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
67411     +_LABEL_='24<= Recency< 48';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='24<= Recency< 48';
67412     +UB=48;
MPRINT(EM_GENERATE_LABELVALUES):   UB=48;
67413     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67414     +else
67415     +if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
67416     +_LABEL_='48<= Recency< 73';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='48<= Recency< 73';
67417     +UB=73;
MPRINT(EM_GENERATE_LABELVALUES):   UB=73;
67418     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67419     +else
67420     +if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
67421     +_LABEL_='73<= Recency';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='73<= Recency';
67422     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67423     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67424     +
67425     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
67426     +_LABEL_='Teenhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Teenhome< 0';
67427     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
67428     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67429     +else
67430     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
67431     +_LABEL_='0<= Teenhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Teenhome< 1';
67432     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
67433     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67434     +else
67435     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
67436     +_LABEL_='1<= Teenhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Teenhome';
67437     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67438     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67439     +
67440     +if DISPLAY_VAR='Year_Birth' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Year_Birth' and _GROUP_ = 2 then do;
67441     +_LABEL_='Year_Birth< 1959';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Year_Birth< 1959';
67442     +UB=1959;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1959;
67443     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67444     +else
67445     +if DISPLAY_VAR='Year_Birth' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Year_Birth' and _GROUP_ = 3 then do;
67446     +_LABEL_='1959<= Year_Birth< 1970';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1959<= Year_Birth< 1970';
67447     +UB=1970;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1970;
67448     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67449     +else
67450     +if DISPLAY_VAR='Year_Birth' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Year_Birth' and _GROUP_ = 4 then do;
67451     +_LABEL_='1970<= Year_Birth< 1978';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1970<= Year_Birth< 1978';
67452     +UB=1978;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1978;
67453     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67454     +else
67455     +if DISPLAY_VAR='Year_Birth' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Year_Birth' and _GROUP_ = 5 then do;
67456     +_LABEL_='1978<= Year_Birth';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1978<= Year_Birth';
67457     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
67458     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
67459     +
67460     +if DISPLAY_VAR='Complain' and _GROUP_ = 2 then
67461     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Complain' and _GROUP_ = 2 then _LABEL_='0';
67462     +else
67463     +if DISPLAY_VAR='Complain' and _GROUP_ = 3 then
67464     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Complain' and _GROUP_ = 3 then _LABEL_='1';
67465     +
67466     +if DISPLAY_VAR='Education' and _GROUP_ = 2 then
67467     +_LABEL_='GRADUATION';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Education' and _GROUP_ = 2 then _LABEL_='GRADUATION';
67468     +else
67469     +if DISPLAY_VAR='Education' and _GROUP_ = 3 then
67470     +_LABEL_='PHD';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 3 then _LABEL_='PHD';
67471     +else
67472     +if DISPLAY_VAR='Education' and _GROUP_ = 4 then
67473     +_LABEL_='MASTER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 4 then _LABEL_='MASTER';
67474     +else
67475     +if DISPLAY_VAR='Education' and _GROUP_ = 5 then
67476     +_LABEL_='2N CYCLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 5 then _LABEL_='2N CYCLE';
67477     +else
67478     +if DISPLAY_VAR='Education' and _GROUP_ = 6 then
67479     +_LABEL_='BASIC';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 6 then _LABEL_='BASIC';
67480     +
67481     +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then
67482     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then _LABEL_='1';
67483     +else
67484     +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then
67485     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then _LABEL_='0';
67486     +
67487     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then
67488     +_LABEL_='MARRIED';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then _LABEL_='MARRIED';
67489     +else
67490     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then
67491     +_LABEL_='TOGETHER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then _LABEL_='TOGETHER';
67492     +else
67493     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then
67494     +_LABEL_='SINGLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then _LABEL_='SINGLE';
67495     +else
67496     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then
67497     +_LABEL_='DIVORCED';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then _LABEL_='DIVORCED';
67498     +else
67499     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then
67500     +_LABEL_='WIDOW';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then _LABEL_='WIDOW';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 149 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   *filename Y;
MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp1" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp2" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp3" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp4" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp5" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmpTotal" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Age" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Complain" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Education" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Frq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "HigherEducationBinary" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Income" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Kidhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Marital_Status" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Mnt" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFishProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFruits" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntGoldProds" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntMeatProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntSweetProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntWines" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MonthsAsCustomer" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumCatalogPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDealsPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDistPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumStorePurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebVisitsMonth" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RFMstat" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RMntFrq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Recency" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Teenhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Year_Birth" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 149 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 149 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_LABELVALUES):   delete class temp temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
MPRINT(EM_GENERATE_LABELVALUES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATESTAT";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90126427304989;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67501      
67502      *------------------------------------------------------------*;
67503      * End TRAIN: BINNING;
67504      *------------------------------------------------------------*;

67505      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
67506      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
67507      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67508      ;
MPRINT(EM_DIAGRAM):   ;
67509      ;
MPRINT(EM_DIAGRAM):   ;
67510      ;
MPRINT(EM_DIAGRAM):   ;
67511      ;
MPRINT(EM_DIAGRAM):   ;
67512      quit;
MPRINT(EM_DIAGRAM):   quit;
67513      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67514      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
67515      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67516      /*; *"; *'; */
67517      ;
MPRINT(EM_DIAGRAM):   ;
67518      run;
MPRINT(EM_DIAGRAM):   run;
67519      quit;
MPRINT(EM_DIAGRAM):   quit;
67520      /* Reset EM Options */
67521      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
67522      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
67523      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
67524      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
67525      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
67526      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
