MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.28 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                21. April 2016
Time:                18.28 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1UW1473 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1UW1473 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.28 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.28 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
124317     proc freq data=EMWS8.BINNING_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.BINNING_VariableSet noprint;
124318     table ROLE*LEVEL/out=WORK.BINNINGMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BINNINGMETA;
124319     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.BINNINGMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

124320     proc print data=WORK.BINNINGMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BINNINGMETA label noobs;
124321     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
124322     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
124323     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
124324     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
124325     run;

NOTE: There were 6 observations read from the data set WORK.BINNINGMETA.
NOTE: The PROCEDURE PRINT printed page 43.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

124326     title10;
MPRINT(EM_DIAGRAM):   title10;
124327     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
124697     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
124698     * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
124699     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
124700     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

124701     %let EMEXCEPTIONSTRING=;
124702     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
124703     * TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   * TRAIN: BINNING;
124704     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
124705     %let EM_ACTION = TRAIN;
124706     %let syscc = 0;
124707     %macro main;
124708     
124709       filename temp catalog 'sashelp.emmdfy.binning_macros.source';
124710       %include temp;
124711       filename temp;
124712     
124713       %setProperties;
124714     
124715       %if %upcase(&EM_ACTION) = CREATE %then %do;
124716         filename temp catalog 'sashelp.emmdfy.binning_create.source';
124717         %include temp;
124718         filename temp;
124719     
124720         %create;
124721       %end;
124722     
124723        %else
124724        %if %upcase(&EM_ACTION) = TRAIN %then %do;
124725     
124726            filename temp catalog 'sashelp.emmdfy.binning_train.source';
124727            %include temp;
124728            filename temp;
124729            %train;
124730        %end;
124731     
124732       %else
124733       %if %upcase(&EM_ACTION) = SCORE %then %do;
124734         filename temp catalog 'sashelp.emmdfy.binning_score.source';
124735         %include temp;
124736         filename temp;
124737     
124738         %score;
124739     
124740       %end;
124741     
124742       %else
124743       %if %upcase(&EM_ACTION) = REPORT %then %do;
124744     
124745            filename temp catalog 'sashelp.emmdfy.binning_report.source';
124746            %include temp;
124747            filename temp;
124748     
124749            %report;
124750        %end;
124751     
124752        %doendm:
124753     %mend main;
124754     
124755     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
124757    +%macro SetProperties;
124759    +     /* IGN options */
124760    +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
124761    +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
124762    +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
124764    +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
124765    +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
124766    +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
124767    +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
124768    +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
124769    +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
124770    +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
124771    +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
124772    +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
124773    +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
124774    +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
124775    +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
124776    +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
124777    +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
124780    +%mend SetProperties;
124781    +%macro appendfiles(fileref1, fileref2);
124782    +     data _null_;
124783    +       length c $256;
124784    +       fid1=fopen("&fileref1",'A');
124785    +       fid2=fopen("&fileref2",'I');
124786    +       cval = finfo(fid2,'lrecl');
124787    +       put cval= fid1= fid2=;
124788    +       if (fid2 > 0) then
124789    +         do while(fread(fid2)=0);
124790    +           rc = fget(fid2,c,256);
124791    +           _msg_=sysmsg();
124792    +           /* put rc= c= _msg_=; */
124793    +           rc = fput(fid1,strip(c));
124794    +           rc = fwrite(fid1);
124795    +         end;
124796    +         _msg_=sysmsg();
124797    +         put _msg_=;
124798    +       rc = fclose(fid1);
124799    +       rc = fclose(fid2);
124800    +     run;
124801    +%mend appendfiles;
124803    +%macro buildOptScoreCode;
124805    +    %em_register(key=BINCODE, type=FOLDER);
124807    +    filename x catalog 'sashelp.emutil.em_deldir.source';
124808    +    %inc x;
124809    +    filename x;
124810    +    %delDir(folder=%nrbquote(&em_user_bincode));
124812    +    data _null_; length rc $200;
124813    +       rc = dcreate('BINCODE', "&EM_NODEDIR");
124814    +    run;
124816    +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
124818    +    %let dsid = %sysfunc(open(class_nosv));
124819    +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
124820    +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
124822    +    %let oldname=;
124823    +    %do %while(^%sysfunc(fetch(&dsid)));
124824    +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
124825    +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
124827    +        %if &name ne &oldname %then %do;
124828    +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
124829    +             data _null_;
124830    +                length string $200 flag endflag 8;
124831    +                retain string flag endflag;
124832    +                set class_nosv end=eof;
124833    +                where DISPLAY_VAR ="&name";
124834    +                by _variable_ _group_;
124835    +                file _F1;
124836    +                index = kindex(_variable_, "BIN_");
124837    +                if index gt 0 then do;
124838    +                   if first._variable_ then do;
124839    +                      put ' ';
124840    +                      put "&EM_CODEBAR;";
124841    +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
124842    +                      put string;
124843    +                      put "&EM_CODEBAR;";
124845    +                      if origLabel ne "" then do;
124846    +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
124847    +                            put string;
124848    +                            string = tranwrd(origLabel,"'","''");
124849    +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
124850    +                            put string;
124851    +                      end;
124852    +                      else do;
124853    +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
124854    +                             put string;
124855    +                      end;
124857    +                      put ' ';
124859    +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
124860    +                      put string;
124861    +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
124862    +                      put string;
124863    +                      put "end;";
124864    +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
124865    +                      put string;
124866    +                   end;
124867    +                   if first._group_ then do;
124868    +                      flag = 0;
124869    +                      endflag = 1;
124870    +                      if ^first._variable_ then do;
124871    +                         put "else";
124872    +                      end;
124873    +                      if LB ne . then do;
124874    +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
124875    +                      end;
124876    +                      else do;
124877    +                         flag = 1;
124878    +                         string = "if";
124879    +                      end;
124880    +                   end;
124881    +                   if last._Group_ then do;
124882    +                      if UB ne . then do;
124883    +                        if flag ne 1 then do;
124884    +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
124885    +                        end;
124886    +                        else do;
124887    +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
124888    +                        end;
124889    +                      end;
124890    +                      else do;
124891    +                         if flag=1 then do;
124892    +                            string = strip(DISPLAY_VAR) ;
124893    +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
124894    +                            endflag=0;
124895    +                            string="";
124896    +                         end;
124897    +                         else do;
124898    +                            string = strip(string)!!" then do;";
124899    +                         end;
124900    +                      end;
124901    +                      put string;
124902    +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
124903    +                      put string;
124904    +                      if endflag eq 1 then do;
124905    +                        put "end;";
124906    +                      end;
124907    +                   end;
124908    +                   if last._variable_ then do;
124909    +                     string = "end;";
124910    +                     put string;
124911    +                   end;
124913    +                end;
124914    +                else do;
124915    +                   _split_value_ = tranwrd(_split_value_,"'","''");
124916    +                   if first._group_ then do;
124917    +                      flag=0;
124918    +                      if ^first._variable_ then
124919    +                         put 'else';
124920    +                      else do;
124921    +                         put ' ';
124922    +                         put "&EM_CODEBAR;";
124923    +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
124924    +                         put string;
124925    +                         put "&EM_CODEBAR;";
124927    +                         if origLabel ne "" then do;
124928    +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
124929    +                               put string;
124930    +                               string = tranwrd(origLabel,"'","''");
124931    +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
124932    +                               put string;
124933    +                         end;
124934    +                         else do;
124935    +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
124936    +                               put string;
124937    +                         end;
124939    +                         put ' ';
124941    +                         if format ne '' then do;
124942    +                            if first._variable_ then do;
124943    +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
124944    +                               put string;
124945    +                               string = '%dmnormip(_UFormat);';
124946    +                               put string;
124948    +                               string ="if MISSING(_UFORMAT) then do;";
124949    +                               put string;
124950    +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
124951    +                               put string;
124952    +                               put "end;";
124954    +                               string="else if NOT MISSING(_UFORMAT) then do;";
124955    +                               put string;
124957    +                            end;
124958    +                         end;
124959    +                         else do;
124960    +                            if type = 'N' then do;
124961    +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
124962    +                              put string;
124963    +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
124964    +                              put string;
124965    +                              put "end;";
124967    +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
124968    +                              put string;
124969    +                            end;
124970    +                            else if type='C' then do;
124971    +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
124972    +                              put string;
124973    +                              string = '%dmnormip(_UFormat);';
124974    +                              put string;
124976    +                              string ="if MISSING(_UFORMAT) then do;";
124977    +                              put string;
124978    +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
124979    +                              put string;
124980    +                              put "end;";
124982    +                              string="else if NOT MISSING(_UFORMAT) then do;";
124983    +                              put string;
124984    +                              string = '%dmnormip(_UFormat);';
124985    +                              put string;
124986    +                           end;
124987    +                         end;
124988    +                      end;
124989    +                      if format ne '' OR type='C' then do;
124990    +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
124991    +                      end;
124992    +                      else do;
124993    +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
124994    +                      end;
124995    +                   end;
124996    +                   else do;
124997    +                      if flag ne 1 then do;
124998    +                       if format ne '' OR type='C' then do;
124999    +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
125000    +                       end;
125001    +                       else do;
125002    +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
125003    +                       end;
125004    +                         length = length(tempstring);
125006    +                         if length < 195 then do;
125007    +                            string = tempstring;
125008    +                         end;
125009    +                         else do;
125011    +                            string = strip(string);
125012    +                            put string;
125013    +                            string = ") then do;";
125014    +                            put string;
125016    +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
125017    +                            put string;
125018    +                            put "end;";
125020    +                            put 'else';
125021    +                            if format ne '' OR type='C' then do;
125022    +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
125023    +                            end;
125024    +                            else do;
125025    +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
125026    +                            end;
125027    +                         end;
125028    +                      end;
125029    +                   end;
125031    +                   if last._group_ then do;
125032    +                      string = strip(string);
125033    +                      put string;
125035    +                      string = ") then do;";
125036    +                      put string;
125038    +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
125039    +                      put string;
125040    +                      put "end;";
125041    +                   end;
125043    +                   if last._variable_ then do;
125044    +                     put "else do;";
125046    +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
125047    +                     put string;
125049    +                     put "end;";
125050    +                     put "end;";
125051    +                   end;
125052    +                end;
125053    +             run;
125055    +             %let oldname = &name;
125056    +        %end;
125057    +    %end;
125058    +    %let dsid = %sysfunc(close(&dsid));
125060    +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
125061    +    data _null_;
125062    +       file _F1;
125063    +       put "length _UFormat $200;";
125064    +       put "drop _UFormat;";
125065    +       put "_UFormat='';";
125066    +    run;
125067    +    filename _F1;
125069    +   %em_register(key=EMSCOREVAR, type=DATA);
125070    +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
125071    +   proc datasets lib=&em_lib nolist;
125072    +      delete &scorevarDs;
125073    +   run;
125074    +   quit;
125076    +   %let filrf=mydir;
125077    +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
125078    +   %let did=%sysfunc(dopen(&filrf));
125080    +   %if &did %then %do;  %PUT  did= &did;
125081    +       %let memcount=%sysfunc(dnum(&did));
125082    +       %if &memcount > 0 %then %do;
125083    +           data &em_user_emscorevar;
125084    +              length Name $32 formula $70 file $200;
125085    +              keep NAME Formula file;
125086    +              formula  = '';
125087    +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
125088    +               name=''; file="BINCODE&em_dsep._ALL_.sas";
125089    +               output;
125090    +           %end;
125091    +           %do i=1 %to &memcount;
125092    +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
125093    +               %let newvar = %scan(&name, 1, .);
125094    +               %if "&newvar" ne "_ALL_" %then %do;
125095    +                   name = "&newvar"; file="BINCODE&em_dsep&name";
125096    +                   output;
125097    +               %end;
125098    +           %end;
125100    +           run;
125101    +       %end;
125102    +       %let did = %sysfunc(dclose(&did));
125103    +  %end;
125105    +   %doendu:
125106    +%mend buildOptScoreCode;
125109    +%macro buildScoreCode(flowCode, publishCode);
125112    +  filename x "&flowCode";
125114    +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
125115    +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
125116    +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
125118    +  data temp;
125119    +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
125120    +    by display_var _Split_value_;
125121    +     if upcase(_Split_value_) ne 'MISSING';
125122    +   run;
125124    +   data temp_missing;
125125    +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
125126    +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
125127    +     by display_var _Split_value_;
125128    +     if upcase(_Split_value_) eq 'MISSING';
125129    +     keep _variable_ display_var missgrp;
125130    +   run;
125132    +   proc sort data=temp_missing; by display_var missgrp; run;
125134    +   data temp_missing;
125135    +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
125136    +     by display_var missgrp;
125137    +     if ^_a then delete;
125138    +     keep _variable_ display_var missgrp ;
125139    +   run;
125141    +   data temp;
125142    +     merge temp temp_missing;
125143    +     by display_var;
125144    +     if display_Var eq '' then delete;
125145    +    run;
125147    +    /* pull in wtev values */
125148    +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
125149    +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
125150    +    proc sort data=temp;  by display_var _group_; run;
125152    +   data temp;
125153    +      merge temp tempcoarse(keep=display_var _group_  role) ;
125154    +      by display_var _group_;
125155    +    run;
125157    +    data temp;
125158    +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
125159    +      by display_var;
125161    +      if _group_ = . then delete;
125162    +      if _variable_ = '' then delete;
125163    +    run;
125165    +    proc sort data=temp out=class;
125166    +       by _variable_ _group_ LB;
125167    +    run;
125169    +    data _null_;
125170    +      file X;
125172    +      put "length _UFormat $200;";
125173    +      put "drop _UFormat;";
125174    +      put "_UFormat='';";
125175    +    run;
125177    +    data class_nosv;
125178    +      set class;
125179    +      if upcase(role)="INPUT";
125180    +    run;
125182    +    data _null_;
125183    +       file X MOD;
125184    +       length string $200 flag endflag 8;
125185    +       retain string flag endflag;
125186    +       set class_nosv end=eof;
125187    +       by _variable_ _group_;
125189    +       index = kindex(_variable_, "BIN_");
125190    +       if index gt 0 then do;
125192    +         if first._variable_ then do;
125193    +            put ' ';
125194    +            put "&EM_CODEBAR;";
125195    +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
125196    +            put string;
125197    +            put "&EM_CODEBAR;";
125200    +            if origLabel ne "" then do;
125201    +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
125202    +              put string;
125203    +              string = tranwrd(origLabel,"'","''");
125204    +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
125205    +              put string;
125206    +            end;
125207    +            else do;
125208    +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
125209    +             put string;
125210    +            end;
125212    +            put ' ';
125214    +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
125215    +            put string;
125216    +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
125217    +            put string;
125218    +            put "end;";
125219    +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
125220    +            put string;
125221    +          end;
125222    +           if first._group_ then do;
125223    +              flag = 0;
125224    +              endflag = 1;
125225    +              if ^first._variable_ then do;
125226    +                put "else";
125227    +              end;
125228    +              if LB ne . then do;
125229    +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
125230    +              end;
125231    +              else do;
125232    +                 flag = 1;
125233    +                 string = "if";
125234    +              end;
125236    +           end;
125237    +           if last._Group_ then do;
125238    +              if UB ne . then do;
125239    +                if flag ne 1 then do;
125240    +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
125241    +                end;
125242    +                else do;
125243    +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
125244    +                end;
125245    +              end;
125246    +              else do;
125247    +                 if flag=1 then do;
125248    +                   string = strip(DISPLAY_VAR) ;
125249    +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
125250    +                   endflag = 0;
125251    +                   string="";
125252    +                 end;
125253    +                 else do;
125254    +                   string = strip(string)!!" then do;";
125255    +                 end;
125256    +              end;
125257    +              put string;
125259    +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
125260    +              put string;
125261    +              if endflag eq 1 then do;
125262    +                put "end;";
125263    +              end;
125264    +           end;
125265    +           if last._variable_ then do;
125266    +             string = "end;";
125267    +             put string;
125268    +           end;
125269    +       end;
125270    +       else do;
125271    +           _split_value_ = tranwrd(_split_value_,"'","''");
125272    +           if first._group_ then do;
125273    +              flag=0;
125274    +              if ^first._variable_ then
125275    +                 put 'else';
125276    +              else do;
125277    +                 put ' ';
125278    +                 put "&EM_CODEBAR;";
125279    +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
125280    +                 put string;
125281    +                 put "&EM_CODEBAR;";
125283    +                 if origLabel ne "" then do;
125284    +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
125285    +                   put string;
125286    +                   string = tranwrd(origLabel,"'","''");
125287    +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
125288    +                   put string;
125289    +                 end;
125290    +                 else do;
125291    +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
125292    +                   put string;
125293    +                 end;
125295    +                 put ' ';
125297    +                if format ne '' then do;
125298    +                  if first._variable_ then do;
125299    +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
125300    +                    put string;
125301    +                    string = '%dmnormip(_UFormat);';
125302    +                    put string;
125304    +                     string ="if MISSING(_UFORMAT) then do;";
125305    +                     put string;
125306    +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
125307    +                     put string;
125308    +                     put "end;";
125310    +                     string="else if NOT MISSING(_UFORMAT) then do;";
125311    +                     put string;
125313    +                  end;
125314    +                end;
125315    +                else do;
125316    +                     if type = 'N' then do;
125317    +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
125318    +                       put string;
125319    +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
125320    +                       put string;
125321    +                       put "end;";
125323    +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
125324    +                       put string;
125326    +                     end;
125327    +                     else if type='C' then do;
125328    +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
125329    +                        put string;
125330    +                        string = '%dmnormip(_UFormat);';
125331    +                        put string;
125333    +                        string ="if MISSING(_UFORMAT) then do;";
125334    +                        put string;
125335    +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
125336    +                        put string;
125337    +                        put "end;";
125339    +                        string="else if NOT MISSING(_UFORMAT) then do;";
125340    +                        put string;
125341    +                        string = '%dmnormip(_UFormat);';
125342    +                        put string;
125343    +                    end;
125344    +                end;
125345    +              end;
125346    +              if format ne '' OR type='C' then do;
125347    +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
125348    +              end;
125349    +              else do;
125350    +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
125351    +              end;
125352    +           end;
125353    +           else do;
125354    +              if flag ne 1 then do;
125355    +                if format ne '' OR type='C' then do;
125356    +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
125357    +                end;
125358    +                else do;
125359    +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
125360    +                end;
125361    +                length = klength(tempstring);
125363    +                if length < 195 then do;
125364    +                   string = tempstring;
125365    +                end;
125366    +                else do;
125368    +                   string = strip(string);
125369    +                   put string;
125370    +                   string = ") then do;";
125371    +                   put string;
125373    +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
125374    +                   put string;
125375    +                   put "end;";
125377    +                 /*  string = strip(string)||",'...';"; */
125379    +                   put 'else';
125380    +                   if format ne '' OR type='C' then do;
125381    +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
125382    +                   end;
125383    +                   else do;
125384    +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
125385    +                   end;
125388    +                end;
125389    +              end;
125390    +           end;
125392    +           if last._group_ then do;
125393    +              string = strip(string);
125394    +              put string;
125395    +              string = ") then do;";
125396    +              put string;
125398    +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
125399    +              put string;
125400    +              put "end;";
125401    +           end;
125403    +           if last._variable_ then do;
125404    +             put "else do;";
125406    +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
125407    +             put string;
125409    +             put "end;";
125410    +             put "end;";
125411    +           end;
125412    +         *end;
125413    +       end;
125414    +    run;
125416    +    /* generate PublishCode the same as flowscorecode */
125417    +    filename Y "&publishCode";
125419    +    /* if publishCode already exists, wipe it out first */
125420    +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
125421    +      %let rc = %sysfunc(fdelete(Y));
125422    +    %end;
125424    +    %appendfiles(Y, X);
125426    +    filename X;
125427    +    filename Y;
125429    +    %buildOptScoreCode;
125431    +    proc datasets library=work nolist;
125432    +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
125433    +    run;
125434    +    quit;
125436    +%mend buildScoreCode;
125438    +%macro buildMetaCode(DeltaCodeFile=);
125440    +   /* set variable roles based on New Role column in the Results table */
125441    +   data _null_;
125442    +      file &DeltaCodeFile;
125443    +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
125444    +      %if &dsid %then %do;
125445    +        %let obs = %sysfunc(fetch(&dsid));
125446    +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
125447    +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
125448    +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
125450    +        %do %while(&obs=0);
125451    +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
125452    +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
125453    +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
125455    +          /* retrieve grp and woe names from varmappings dataset */
125456    +          %let choice = _VARIABLE_ = "&inputname";
125457    +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
125458    +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
125459    +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
125460    +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
125461    +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
125463    +          put "if name = '&inputname' then role='REJECTED';";
125464    +          %if "&role" ne "DEFAULT" %then %do;
125465    +            put "if name = '&grpname' then role='&role';";
125466    +          %end;
125467    +          %else %do;
125468    +            put "if name = '&grpname' then role='&oldrole';";
125469    +          %end;
125470    +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
125472    +          %let obs = %sysfunc(fetch(&dsid));
125473    +        %end;
125474    +      %end;
125475    +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
125476    +   run;
125478    +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
125479    +   data _null_;
125480    +      file &DeltaCodeFile MOD;
125482    +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
125483    +      %if &sdsid %then %do;
125484    +        %let sobs = %sysfunc(fetch(&sdsid));
125485    +        %do %while(&sobs=0);
125486    +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
125487    +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
125488    +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
125489    +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
125491    +          %let checkgrp = GRP_&checkname;
125492    +          %let lenname = %length(&checkgrp);
125493    +          %if %eval(&lenname-32) > 0 %then %do;
125494    +            %let checkgrp = %substr(&checkgrp, 1, 32);
125495    +          %end;
125497    +          %let choice = _VARIABLE_ ="&checkname";
125498    +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
125500    +          /* if var not found in varmappings, delete variables; */
125501    +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
125502    +          %if &vdsid eq 0 %then %do;
125503    +            put 'if name="&displayvar" then delete;';
125504    +            %let dispgrp = GRP_&displayvar;
125505    +            put 'if name="&dispgrp" then delete;';
125506    +          %end;
125508    +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
125509    +          %let sobs = %sysfunc(fetch(&sdsid));
125510    +        %end;
125511    +      %end;
125512    +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
125513    +   run;
125515    +%mend buildMetaCode;
125517    +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
125519    +   proc sort data=&coarse out=sortedcoarse nodupkey;
125520    +     by display_var;
125521    +   run;
125522    +   proc sort data=&varmappings nodupkey;
125523    +     by _variable_;
125524    +   run;
125525    +   %if %sysfunc(exist(&resultstable, data)) %then %do;
125526    +     proc sort data=&resultstable; by display_var; run;
125527    +   %end;
125529    +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
125530    +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
125531    +     %if %sysfunc(exist(&resultstable, data)) %then %do;
125532    +        &resultstable (keep = display_var _new_role_ )
125533    +     %end;
125534    +     ;
125535    +     by display_var;
125536    +     length _role_ _new_role_ $10;
125537    +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
125538    +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
125539    +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
125540    +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
125541    +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
125542    +           ;
125544    +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
125545    +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
125546    +                _role_ = "Rejected";
125547    +             else _role_ = "Input";
125548    +           %end;
125549    +           %else %do;
125550    +             _role_ = "Input";
125551    +           %end;
125552    +           if _new_role_ eq "" then _new_role_="Default";
125553    +      if ^_a then do;
125554    +        _gini_ = 0;
125555    +        _role_ = 'Rejected';
125556    +        if _new_role_ eq "" then _new_role_="Default";
125557    +      end;
125558    +   run;
125559    +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
125560    +     by NAME;
125561    +   run;
125562    +   data outlabel;
125563    +     set outlabel;
125564    +     if _label_ = '' then _label_ = _variable_;
125565    +   run;
125566    +   data &resultstable;
125567    +     merge &resultstable(in=_a_) outlabel;
125568    +     by display_Var;
125569    +     if _a_ then output;
125570    +   run;
125571    +   proc datasets library=work nolist;
125572    +     delete sortedcoarse outlabel;
125573    +   run;
125574    +   quit;
125575    +   proc sort data=&resultstable nodupkey;
125576    +      by DESCENDING
125577    +        _gini_ display_Var;
125578    +   run;
125579    +   data &resultstable;
125580    +     set &resultstable;
125582    +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
125583    +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
125584    +     giniOrder = _N_;
125585    +     _gini_ = round(_GINI_, .001);
125586    +     drop _variable_;
125587    +   run;
125589    +   proc print data=&resultstable label;
125590    +   run;
125592    +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
125593    +   data &coarse;
125594    +     set &coarse;
125595    +     length role $10;
125596    +     %let dsid = %sysfunc(open(&resultstable));
125597    +     %if &dsid %then %do;
125598    +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
125599    +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
125600    +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
125602    +       %let obs = %sysfunc(fetch(&dsid));
125603    +       %do %while(&obs=0);
125604    +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
125605    +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
125606    +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
125608    +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
125609    +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
125610    +            giniOrder = &order;
125611    +            role = "&role";
125612    +          end;
125614    +          %let obs = %sysfunc(fetch(&dsid));
125615    +       %end;
125616    +     %end;
125617    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
125618    +   run;
125621    +%mend EM_GENERATE_RESULTSTABLE;
125623    +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
125625    +    /* instantiate the zchar macro to be used in adding bin definition */
125626    +    filename _temp catalog 'sashelp.emmacs.zchar.source';
125627    +    %inc _temp;
125628    +    filename _temp;
125630    +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
125631    +      by _variable_ binFlag _group_ LB;
125632    +    run;
125634    +    data tempExport;
125635    +      set sortedFine;
125636    +      by _variable_ binFlag _group_;
125637    +      length _split_value_ $200;
125639    +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
125640    +      if binFlag = 0 then do;
125641    +        index = kindex(_variable_, "BIN_");
125642    +        if index gt 0 then do;
125643    +          _LEVEL_ = "INTERVAL";
125644    +        end;
125645    +        _Split_value_ = _split_value_;
125646    +        output;
125647    +      end;
125648    +      else do;
125649    +         * if last._group_ then do;
125650    +          index = kindex(_variable_, "BIN_");
125651    +          if index gt 0 then do;
125652    +            _LEVEL_ = "INTERVAL";
125653    +          end;
125654    +          _Split_value_ = %zchar(UB);
125655    +          output;
125656    +         * end;
125657    +      end;
125659    +      rename display_Var = _variable_;
125660    +      keep display_var _level_ _group_ _split_value_ binFlag;
125661    +    run;
125663    +    %if &CREATEMETHOD eq OVERWRITE %then %do;
125664    +       data &EXPORTGROUPING;
125665    +         set tempexport;
125666    +       run;
125667    +    %end;
125668    +    %else %do;
125669    +       /* determine if EXPORTGROUPING already exists */
125670    +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
125671    +         data &EXPORTGROUPING;
125672    +            set &EXPORTGROUPING tempexport;
125673    +         run;
125674    +       %end;
125675    +       %else %do;
125676    +         data &EXPORTGROUPING;
125677    +            set tempexport;
125678    +         run;
125679    +       %end;
125680    +    %end;
125682    +    proc datasets lib=work nolist;
125683    +      delete sortedFine tempexport;
125684    +    run;
125685    +    quit;
125687    +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_TRAIN.SOURCE.
125693    +%macro train;
125695    +   /* include training macros */
125696    +   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
125697    +   %include trtemp;
125698    +   filename trtemp;
125700    +   /* trick IGN into thinking it is a model node to build decmeta; further down, set %EM_MODEL ASSESS=N
125701    +   %let EM_TOOLTYPE = MODEL; */
125703    +   %if &EM_IMPORT_DATA eq %then %do;
125704    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN, 1;
125705    +       %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note , NOQUOTE));
125706    +       %put &em_codebar;
125707    +       %put &errmsg;
125708    +       %put &em_codebar;
125709    +       %goto doendm;
125710    +   %end;
125712    +   %if  &EM_NUM_TARGET ne 1 %then %do;
125713    +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
125714    +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, USE1TARGET_ERR  , NOQUOTE));
125716    +        %put &em_codebar;
125717    +        %put &errmsg;
125718    +        %put &em_codebar;
125719    +        %goto doendm;
125720    +   %end;
125722    +   %if  &EM_NUM_BINARY_TARGET ne 1 %then %do;
125723    +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
125724    +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, METADATA.USE1BINTARGET_ERR   , NOQUOTE));
125726    +        %put &em_codebar;
125727    +        %put &errmsg;
125728    +        %put &em_codebar;
125729    +        %goto doendm;
125730    +   %end;
125732    +   /* Initialize property macro variables */
125733    +   %SetProperties;
125735    +   /* retrieve target information */
125736    +   /* does decmeta exist?  If not, retrieve target information elsewhere */
125737    +   %global target_event;
125738    +   %let target_event=;
125739    +   %if "&EM_DEC_DECMETA" eq "" %then %do;
125740    +     /* retrieve type and format from variableset */
125741    +     %let eventorder = DESC;
125742    +     data temp;
125743    +       set &EM_DATA_VARIABLESET;
125744    +       where NAME ="%EM_BINARY_TARGET";
125745    +     run;
125746    +     %let dsid = %sysfunc(open(work.temp));
125747    +     %if &dsid %then %do;
125748    +       %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
125749    +       %let formatnum = %sysfunc(VARNUM(&dsid, FORMAT));
125750    +       %let ordernum  = %sysfunc(VARNUM(&dsid, ORDER));
125751    +       %let obs = %sysfunc(fetchobs(&dsid, 1));
125752    +       %let Target_type = %sysfunc(getvarc(&dsid, &typenum));
125753    +       %let Target_Format = %sysfunc(getvarc(&dsid, &formatnum));
125754    +       %let Target_Order  = %sysfunc(getvarc(&dsid, &ordernum));
125755    +       %if &TARGET_ORDER  = ASC %then %let eventorder = ASC;
125756    +          %else
125757    +       %if &TARGET_ORDER  = DESC %then %let eventorder = DESC;
125758    +          %else
125759    +       %if &TARGET_ORDER  = FMTASC %then %let eventorder = ASCFMT;
125760    +          %else
125761    +       %if &TARGET_ORDER  = FMTDESC %then %let eventorder = DESFMT;
125762    +     %end;
125763    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
125765    +     /* retrieve target_event and Target_nonEvent values */
125766    +     proc dmdb data=&EM_IMPORT_DATA classout=EVENTOUT;
125767    +       target %EM_BINARY_TARGET;
125768    +       class  %EM_BINARY_TARGET(&eventorder);
125769    +     run;
125770    +     data _null_;
125771    +       dsid = open("EVENTOUT");
125772    +       if dsid>0 then do;
125773    +       levelnum = VARNUM(dsid, "LEVEL");
125774    +       if levelnum then do;
125775    +         if ^fetch(dsid) then
125776    +           call symput('TARGET_EVENT',   strip(getvarc(dsid, levelnum)));
125778    +         if ^fetch(dsid) then
125779    +           call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
125780    +       end;
125781    +       dsid=close(dsid);
125782    +       end;
125783    +     run;
125784    +     proc datasets library=work nolist;
125785    +        delete eventout;
125786    +     run;
125787    +     quit;
125788    +   %end;
125789    +   %else %do;
125791    +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
125793    +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
125794    +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
125795    +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
125797    +   %do %while(^ %sysfunc(fetch(&dsid)));
125798    +      %let Target_Event = %sysfunc(getvarc(&dsid, &vn_event));
125799    +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
125800    +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
125801    +   %end;
125802    +   %let dsid = %sysfunc(close(&dsid));
125804    +   %let dsid=%sysfunc(open(&EM_DEC_DECDATA));
125805    +     %let obs = %sysfunc(fetchobs(&dsid, 2));
125806    +     %let vn_nonevent = %sysfunc(varnum(&dsid, %EM_BINARY_TARGET));
125807    +     %let Target_NonEvent= %sysfunc(getvarc(&dsid, &vn_nonevent));
125808    +   %let dsid = %sysfunc(close(&dsid));
125809    +   %end;
125811    +   /* data sets */
125812    +   %EM_GETNAME(key=BINDATA,        type=DATA);
125813    +   %EM_GETNAME(key=SPLITVALS,      type=DATA);
125814    +   %EM_GETNAME(key=VARMAPPINGS,    type=DATA);
125815    +   %EM_GETNAME(key=BINMAPPINGS,    type=DATA);
125816    +   %EM_GETNAME(key=COARSE,          type=DATA);
125817    +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
125818    +   %EM_GETNAME(key=RESULTSTABLE,   type=DATA);
125820    +   /* files */
125821    +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);
125822    +   %EM_GETNAME(key=GROUPMAPPINGSCORECODE, type=FILE, extension=sas);
125824    +   /* if freeze eq Y and no finedetaildata exists, throw an exception */
125825    +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
125826    +     %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) ne 1 %then %do;
125827    +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOFINEDETAIL;
125828    +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, nofinedetail_error , NOQUOTE));
125830    +        %put &em_codebar;
125831    +        %put &errmsg;
125832    +        %put &em_codebar;
125833    +        %goto doendm;
125834    +     %end;
125835    +   %end;
125837    +   %global useImport;
125838    +   %let useImport = 0;
125840    +   %EM_GETNAME(key=IMPORTSUBSET, type=DATA);
125842    +   %if %sysfunc(exist(&EM_USER_IMPORTSUBSET, DATA)) %then %do;
125843    +     proc datasets library=&EM_LIB nolist;
125844    +       delete &EM_NODEID._IMPORTSUBSET;
125845    +     run;
125846    +     quit;
125847    +   %end;
125849    +   /* if importGrouping=Y, verify that data and all vars exist and are of the correct type */
125850    +   %if &EM_PROPERTY_IMPORTGROUPING eq Y %then %do;
125852    +     /* if import eq Y and no importtable exists, throw an exception */
125853    +     %if %sysfunc(exist(&EM_PROPERTY_IMPORTDATA, DATA)) ne 1 %then %do;
125854    +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOIMPORT;
125855    +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, noimport_error , NOQUOTE));
125857    +        %put &em_codebar;
125858    +        %put &errmsg;
125859    +        %put &em_codebar;
125860    +        %goto doendm;
125861    +     %end;
125863    +      %let dsid = %sysfunc(open(&EM_PROPERTY_IMPORTDATA));
125864    +      %if &dsid %then %do;
125865    +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
125866    +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
125867    +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
125868    +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
125870    +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
125871    +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
125872    +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
125873    +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
125874    +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
125875    +         %end;
125876    +      %end;
125877    +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
125879    +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
125880    +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
125882    +        /* generate subset of data that contains those vars also found in training data and add display_var information */
125883    +        proc sort data=&EM_PROPERTY_IMPORTDATA out=tempimport;
125884    +           by _VARIABLE_ ;
125885    +        run;
125887    +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
125888    +          by NAME;
125889    +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
125890    +        run;
125892    +        data &EM_USER_IMPORTSUBSET;
125893    +          merge tempimport(in=_a) tempvarset(in=_b);
125894    +          length display_Var $32;
125895    +          by _VARIABLE_;
125896    +          display_var = _Variable_;
125897    +          if _a and _b then output;
125898    +        run;
125900    +        proc datasets library=work nolist;
125901    +          delete tempimport tempvarset;
125902    +        run;
125903    +        quit;
125905    +        %end;
125906    +      %end;
125907    +   %end;
125909    +   /* set useImport flag if there are obs in the importSubset dataset */
125910    +   %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET));
125911    +   %if &dsid %then %do;
125912    +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
125913    +     %if &nobs gt 0 %then %let useimport = 1;
125914    +   %end;
125915    +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
125917    +   %global useFreeze;
125918    +   %let useFreeze = 0;
125920    +   /* if Freeze=Y, verify that data and all vars exist and are of the correct type */
125921    +   %EM_GETNAME(key=FREEZESUBSET, type=DATA);
125923    +   %if %sysfunc(exist(&EM_USER_FREEZESUBSET, DATA)) %then %do;
125924    +     proc datasets library=&EM_LIB nolist;
125925    +       delete &EM_NODEID._FREEZESUBSET;
125926    +     run;
125927    +     quit;
125928    +   %end;
125930    +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
125932    +      /* create freezesubset data to contain information on pre-binned data and raw values */
125933    +      %EM_GENERATE_EXPORTGROUP(&EM_USER_FREEZESUBSET, OVERWRITE);
125935    +      %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
125936    +      %if &dsid %then %do;
125937    +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
125938    +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
125939    +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
125940    +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
125942    +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
125943    +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
125944    +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
125945    +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
125946    +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
125947    +         %end;
125948    +      %end;
125949    +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
125951    +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
125952    +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
125954    +        /* generate subset of data that contains those vars also found in training data */
125955    +        proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze;
125956    +           by _VARIABLE_ ;
125957    +        run;
125959    +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
125960    +          by NAME;
125961    +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
125962    +        run;
125964    +        data &EM_USER_FREEZESUBSET;
125965    +          merge tempfreeze(in=_a) tempvarset(in=_b);
125966    +          length display_Var $32;
125967    +          by _VARIABLE_;
125968    +          display_var = _Variable_;
125969    +          if _a and _b then output;
125970    +        run;
125972    +        proc datasets library=work nolist;
125973    +          delete tempfreeze tempvarset;
125974    +        run;
125975    +        quit;
125976    +        %end;
125977    +      %end;
125978    +   %end;
125980    +   /* set useFreeze flag if there are obs in the freezeSubset dataset */
125981    +   %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
125982    +   %if &dsid %then %do;
125983    +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
125984    +     %if &nobs gt 0 %then %let useFreeze = 1;
125985    +   %end;
125986    +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
125988    +   /* if finedetail already exists, delete prior to re-run */
125989    +   %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) %then %do;
125990    +     proc datasets library=&EM_LIB nolist;
125991    +       delete &EM_NODEID._FINEDETAILDATA;
125992    +     run;
125993    +     quit;
125994    +   %end;
125996    +   data tempvarnames;
125997    +     set &EM_DATA_VARIABLESET;
125998    +     where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
125999    +     keep NAME LEVEL LABEL;
126000    +   run;
126002    +   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
126003    +     names NAME;
126004    +     prefix WOE_ GRP_ ;
126005    +   run;
126007    +   proc sort data=tempmapping; by name; run;
126008    +   proc sort data=tempvarnames; by name; run;
126009    +   data tempmapping;
126010    +     merge tempmapping tempvarnames;
126011    +     by NAME;
126012    +     rename LEVEL=procLevel;
126013    +   run;
126015    +   /* generate initial columns of mapping table by setting grpflag=0 */
126016    +   %EM_GENERATE_MAPPING_TABLE;
126018    +   proc datasets library=work nolist;
126019    +     delete tempImport tempScore;
126020    +   run;
126021    +   quit;
126023    +   /* delete splitvals dataset if this existed prior to run */
126024    +   %let nvars=0;
126025    +   %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
126026    +   %if &sdsid > 0 %then %do;
126027    +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
126028    +   %end;
126029    +   %if &sdsid > 0 %then  %let sdsid=%sysfunc(close(&sdsid));
126031    +   %if &nvars > 0 %then %do;
126032    +      proc datasets library=&EM_LIB nolist;
126033    +        delete &EM_NODEID._SPLITVALS;
126034    +      run;
126035    +      quit;
126036    +   %end;
126038    +   %global classvars qclassvars;
126039    +   %let classvars=;
126040    +   %let qclassvars=;
126042    +   /* generate the intervalvars and classvars macros */
126043    +   %EM_PRE_BINNING(&EM_IMPORT_DATA);
126045    +   /* update varmappings with any changes to procLevel based on discretemid */
126046    +   data &EM_USER_VARMAPPINGS;
126047    +     set &EM_USER_VARMAPPINGS;
126048    +     /* procLevel column to indicate the level used by proc; this handles*/
126049    +     /* cases in which var is marked INTERVAL in metadat but treated as  */
126050    +     /* ordinal in prebinning because of # unique levels                 */
126051    +     %let dsid = %sysfunc(open(work._discretemid));
126052    +     %if &dsid %then %do;
126053    +       %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
126054    +       %let obs = %sysfunc(fetch(&dsid));
126055    +       %do %while(&obs=0);
126056    +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
126057    +          if _variable_ = "&varname" then procLevel = "ORDINAL";
126058    +          %let obs = %sysfunc(fetch(&dsid));
126059    +       %end;
126060    +     %end;
126061    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126062    +     label procLevel =  "%sysfunc(sasmsg(sashelp.dmine, rpt_proclevel_vlabel , NOQUOTE))";
126063    +   run;
126065    +   /* generate Grp_xxx variables for interval inputs */
126066    +   %if &EM_PROPERTY_BINMETHOD eq QUANTILE %then %do;
126067    +     %EM_QUANTILE_BINNING(&EM_IMPORT_DATA, WORK.PCTILE, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
126069    +   %end;
126070    +   %else %do;
126071    +     %EM_EQUAL_SPACED_BINNING(&EM_IMPORT_DATA, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
126072    +   %end;
126074    +   /* generate GRP_XXX variables for nominal inputs */
126075    +   %EM_CLASSVARS_GROUP(&EM_PROPERTY_CLASSGROUPRARE);
126077    +   /* generate GRP_XXX variables for ordinal inputs */
126078    +   %EM_ORDVARS_GROUP;
126080    +   proc print data=&EM_USER_VARMAPPINGS label;
126081    +     var _VARIABLE_ _GRP_VARIABLE_ ;
126082    +   run;
126084    +   /* add _proc_var_ to varmappings data to know names of processed variables; could be original input, could be bin_xxx */
126085    +   proc sort data=&EM_USER_SPLITVALS out=tempsplitvals nodupkey;
126086    +     by _VARIABLE_;
126087    +   run;
126089    +   data &EM_USER_VARMAPPINGS;
126090    +     set &EM_USER_VARMAPPINGS;
126091    +     length _proc_var_ $32;
126092    +     %let dsid = %sysfunc(open(work.tempsplitvals));
126093    +     %if &dsid %then %do;
126094    +        %let obs = %sysfunc(fetch(&dsid));
126095    +        %do %while(&obs=0);
126096    +          %let dispnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
126097    +          %let dispvar = %sysfunc(getvarc(&dsid, &dispnum));
126098    +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
126099    +          %let var = %sysfunc(getvarc(&dsid, &varnum));
126101    +          if upcase(_VARIABLE_) = %upcase("&dispvar") then _proc_var_ = "&var";
126102    +          %let obs = %sysfunc(fetch(&dsid));
126103    +        %end;
126104    +     %end;
126105    +     if missing(_proc_var_) then _proc_var_=_variable_;
126106    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126107    +   run;
126109    +   proc datasets library=work nolist;
126110    +     delete sortedbin tempsplitvals;
126111    +   run;
126112    +   quit;
126114    +   /* calculate Fine Detail statistics for each input */
126115    +   %EM_FINE_DETAIL(&EM_USER_BINDATA, &EM_USER_VARMAPPINGS, &EM_USER_FINEDETAILDATA, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS);
126117    +   /* apply grouping and create grouped dataset */
126118    +   %EM_CREATE_GROUPING(&EM_USER_BINDATA, &EM_USER_FINEDETAILDATA, &EM_USER_COARSE);
126120    +   /* generate _label_ values in the COARSE dataset from the Scored data */
126121    +   filename Y "&EM_USER_GROUPMAPPINGSCORECODE";
126122    +   %EM_GENERATE_LABELVALUES(Y, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS, &EM_USER_COARSE);
126123    +   filename Y;
126125    +   /* set EM_MODEL ASSESS=N to prevent assessment reports from being generated */
126126    +   %EM_MODEL(Target= %EM_BINARY_TARGET, ASSESS=N);
126128    +   /* generate reports */
126129    +   %EM_REPORT(key=COARSE, viewtype=DATA, block=MODEL, description=EVENTRATESTAT, autodisplay=N, spk=N);
126132    +   %doendm:
126133    +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
NOTE: %INCLUDE (level 1) file TRTEMP is file SASHELP.EMMDFY.BINNING_TRAINMACROS.SOURCE.
126135    +%macro EM_GENERATE_MAPPING_TABLE;
126137    +  %EM_GETNAME(key=VARMAPPINGS, type=DATA);
126138    +  data &EM_USER_VARMAPPINGS(keep=_variable_  _grp_variable_ procLevel label);
126139    +   length _variable_  _grp_variable_  $32 procLevel $8;
126140    +   set tempmapping;
126141    +   label _variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_inputvar_vlabel , NOQUOTE))"
126142    +         _grp_variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_grpvar_vlabel , NOQUOTE))";
126144    +         _variable_ = NAME;
126145    +         _grp_variable_ = GRP;
126146    + run;
126148    +%mend EM_GENERATE_MAPPING_TABLE;
126150    +%macro EM_PRE_BINNING(input);
126151    +    /* Determine which of our variables are interval  */
126152    +    %global intervalvars;
126153    +    %let intervalvars= ;
126154    +    data tempvariableset;
126155    +      set &EM_DATA_VARIABLESET;
126156    +      where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
126157    +    run;
126159    +    /* add all interval vars to the intervalvar macro */
126160    +    %let dsid = %sysfunc(open(work.tempvariableset));
126161    +    %if &dsid %then %do;
126162    +       %let varnum = %sysfunc(VARNUM(&dsid, NAME));
126163    +       %let obs = %sysfunc(fetch(&dsid));
126164    +       %do %while(&obs=0);
126165    +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
126166    +          %let intervalvars = &intervalvars &varname;
126167    +          %let obs = %sysfunc(fetch(&dsid));
126168    +       %end;
126169    +    %end;
126170    +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126172    +    /* Determine which variables marked as interval are true interval distributions; */
126173    +    /* intmid contains variables that are actually interval and should be binned; */
126174    +    /* discretemid contains variables that are actually discrete and should NOT be binned */
126175    +    %if &intervalvars ne %then %do;
126176    +      %let _maxlevel = %eval(&EM_PROPERTY_NUMBINS + 1);
126177    +      proc dmdb data=&input classout=_CLASSOUT maxlevel=&_maxlevel;
126178    +        class &intervalvars;
126179    +      run;
126180    +      proc freq data=_CLASSOUT order=DATA noprint;
126181    +         table NAME / OUT= _COUNT(where=(COUNT<&_maxlevel));
126182    +      run;
126184    +      %let _INTBINS=;
126185    +      data _null_;
126186    +        set _COUNT;
126187    +        call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
126188    +      run;
126190    +      proc sort data=_CLASSOUT;
126191    +        by NAME;
126192    +      run;
126193    +      proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
126194    +        var NRAW;
126195    +        by NAME;
126196    +      run;
126198    +      data _null_;
126199    +        dsid = open('_OUT');
126200    +        if dsid then do;
126201    +           call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
126202    +           csid = close(dsid);
126203    +        end;
126204    +      run;
126205    +      data _INTMID;
126206    +        set _OUT;
126207    +        keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
126208    +        %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
126209    +          if ^indexw("&_INTBINS", VARIABLE) then output;
126210    +        %end;
126211    +      run;
126213    +      %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
126214    +        data _DISCRETEMID;
126215    +          set _OUT;
126216    +          keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
126217    +          if indexw("&_INTBINS", VARIABLE) then output;
126218    +        run;
126219    +      %end;
126221    +      /* add vars from the _DISCRETEMID dataset to the classvars macro
126222    +      %let dsid = %sysfunc(open(WORK._DISCRETEMID));
126223    +      %if &dsid %then %do;
126224    +        %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
126225    +        %let obs = %sysfunc(fetch(&dsid));
126227    +        %do %while(&obs=0);
126228    +          %let var = %sysfunc(getvarc(&dsid, &varnum));
126229    +          %let classvars = &classvars &var;
126230    +          %let qclassvars = &qclassvars "&var";
126231    +          %let obs = %sysfunc(fetch(&dsid));
126232    +        %end;
126233    +      %end;
126234    +      %if &dsid  %then %let dsid = %sysfunc(close(&dsid));
126235    +*/
126236    +    %end;
126237    +    %else %do;
126238    +      *data _INTMID;
126239    +      *run;
126241    +      *data _DISCRETEMID;
126242    +      *run;
126243    +    %end;
126245    +    /* if import grouping then remove interval vars in import data from _INTMID */
126246    +    %if &useImport eq 1 %then %do;
126248    +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
126249    +        by _VARIABLE_;
126250    +      run;
126252    +      data &EM_USER_IMPORTSUBSET;
126253    +        length CODEVAR $32;
126254    +        set &EM_USER_IMPORTSUBSET;
126255    +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
126256    +      run;
126258    +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
126259    +        by _VARIABLE_;
126260    +      run;
126262    +      %let dsid = %sysfunc(open(work.tempsubset));
126263    +      %let nobs = 0;
126264    +      %if &dsid %then %do;
126265    +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
126266    +      %end;
126267    +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
126269    +      data tempsubset;
126270    +        set tempsubset;
126271    +        length  binVar suffix $32;
126272    +        array binnames{&nobs} $32 _temporary_;
126273    +        retain binVar binnames;
126274    +        by _VARIABLE_;
126276    +        binVar = 'BIN_'!!strip(CODEVAR);
126277    +        binVar = ksubstr(binVar, 1, 32);
126278    +        count = 1;
126280    +        do i=1 to _N_;
126281    +           do while(binvar eq binnames(i));
126282    +              suffix = strip(put(count,best.));
126283    +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
126284    +              count + 1;
126285    +           end;
126286    +        end;
126287    +        binnames(_N_)= binvar;
126288    +        output;
126289    +        drop suffix count i;
126290    +     run;
126292    +     data &EM_USER_IMPORTSUBSET;
126293    +       set &EM_USER_IMPORTSUBSET;
126294    +       length binVar $32;
126296    +        %let dsid = %sysfunc(open(work.tempsubset));
126297    +        %if &dsid %then %do;
126298    +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
126299    +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
126300    +          %let obs = %sysfunc(fetch(&dsid));
126302    +          %do %while(&obs=0);
126303    +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
126304    +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
126306    +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
126307    +            %let obs = %sysfunc(fetch(&dsid));
126308    +          %end;
126309    +        %end;
126310    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126311    +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
126312    +        if binVar ne "" then do;
126313    +          _LEVEL_ = "ORDINAL";
126314    +        end;
126316    +      run;
126318    +      %let idsidexists=0;
126319    +      %let idsid = %sysfunc(open(work._intmid));
126320    +      %if &idsid %then %do;
126321    +        %let idsidexists=1;
126322    +        %let idsid = %sysfunc(close(&idsid));
126323    +      %end;
126325    +      %if &idsidexists = 1 %then %do;
126326    +      data _INTMID;
126327    +        set _INTMID;
126329    +        %let dsid = %sysfunc(open(work.tempsubset));
126330    +        %if &dsid %then %do;
126331    +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
126332    +          %let obs = %sysfunc(fetch(&dsid));
126334    +          %do %while(&obs=0);
126335    +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
126336    +            if variable = "&codevar" then delete;
126337    +            %let obs = %sysfunc(fetch(&dsid));
126338    +          %end;
126339    +        %end;
126340    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126341    +      run;
126342    +      %end;
126344    +      proc datasets library=work nolist;
126345    +        delete tempsubset;
126346    +      run;
126347    +      quit;
126348    +    %end;
126350    +    /* if freeze then remove interval vars in import data from _INTMID */
126351    +    %if &useFreeze eq 1 %then %do;
126353    +      data &EM_USER_FREEZESUBSET;
126354    +        length CODEVAR $32;
126355    +        set &EM_USER_FREEZESUBSET;
126356    +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
126357    +      run;
126359    +      proc sort data=&EM_USER_FREEZESUBSET out=tempsubset nodupkey;
126360    +        by _VARIABLE_;
126361    +      run;
126363    +      %let dsid = %sysfunc(open(work.tempsubset));
126364    +      %let nobs = 0;
126365    +      %if &dsid %then %do;
126366    +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
126367    +      %end;
126368    +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
126370    +      data tempsubset;
126371    +        set tempsubset;
126372    +        length  binVar suffix $32;
126373    +        array binnames{&nobs} $32 _temporary_;
126374    +        retain binVar binnames;
126375    +        by _VARIABLE_;
126377    +        binVar = 'BIN_'!!strip(CODEVAR);
126378    +        binVar = ksubstr(binVar, 1, 32);
126379    +        count = 1;
126381    +        do i=1 to _N_;
126382    +           do while(binvar eq binnames(i));
126383    +              suffix = strip(put(count,best.));
126384    +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
126385    +              count + 1;
126386    +           end;
126387    +        end;
126388    +        binnames(_N_)= binvar;
126389    +        output;
126390    +        drop suffix count i;
126391    +     run;
126393    +     data &EM_USER_FREEZESUBSET;
126394    +       set &EM_USER_FREEZESUBSET;
126395    +       length binVar $32;
126397    +        %let dsid = %sysfunc(open(work.tempsubset));
126398    +        %if &dsid %then %do;
126399    +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
126400    +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
126401    +          %let obs = %sysfunc(fetch(&dsid));
126403    +          %do %while(&obs=0);
126404    +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
126405    +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
126407    +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
126408    +            %let obs = %sysfunc(fetch(&dsid));
126409    +          %end;
126410    +        %end;
126411    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126413    +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
126414    +        if binVar ne "" then do;
126415    +          _LEVEL_ = "ORDINAL";
126416    +        end;
126418    +      run;
126420    +      %let idsidexists= 0;
126421    +      %let idsid = %sysfunc(open(work._intmid));
126422    +      %if &idsid %then %do;
126423    +        %let idsidexists=1;
126424    +        %let idsid = %sysfunc(close(&idsid));
126425    +      %end;
126426    +      %if &idsidexists eq 1 %then %do;
126427    +      data _INTMID;
126428    +        set _INTMID;
126430    +        %let dsid = %sysfunc(open(work.tempsubset));
126431    +        %if &dsid %then %do;
126432    +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
126433    +          %let obs = %sysfunc(fetch(&dsid));
126435    +          %do %while(&obs=0);
126436    +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
126437    +            if variable = "&codevar" then delete;
126438    +            %let obs = %sysfunc(fetch(&dsid));
126439    +          %end;
126440    +        %end;
126441    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126442    +      run;
126443    +      %end;
126445    +      proc datasets library=work nolist;
126446    +        delete tempsubset;
126447    +      run;
126448    +      quit;
126450    +    %end;
126452    +%mend EM_PRE_BINNING;
126454    +%macro EM_IMPORT_BINNING(binningCode);
126457    +   data tempintimport;
126458    +     set &EM_USER_IMPORTSUBSET;
126459    +     if binflag = 1;
126460    +   run;
126462    +   %let idsid = %sysfunc(open(work.tempintimport));
126463    +   %if &idsid %then %do;
126464    +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
126465    +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
126466    +   %end;
126467    +   %else %do;
126468    +     %let nvars = 0;
126469    +     %let nobs = 0;
126470    +   %end;
126471    +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
126473    +   proc datasets library=work nolist;
126474    +     delete tempintimport;
126475    +   run;
126476    +   quit;
126478    +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
126480    +      filename X "&binningCode";
126481    +      data _null_;
126482    +        FILE X MOD;
126483    +        %let bin_variables=;
126484    +        %let quote_bin_variables = ;
126485    +        %let choice = binflag = 1;
126486    +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
126487    +        %if &dsid %then %do;
126488    +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
126489    +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
126490    +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
126491    +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingbins_note , NOQUOTE));
126493    +           put "&EM_CODEBAR;";
126494    +           put " &note; ";
126495    +           put "&EM_CODEBAR;";
126497    +           /* retrieve value for first obs */
126498    +           %let obs = %sysfunc(fetchobs(&dsid, 1));
126499    +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
126500    +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
126502    +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
126503    +           %let i = 1;
126504    +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
126505    +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
126506    +           %end;
126507    +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
126508    +           put " ";
126509    +           put "if &oldname eq . then &binvalue = .;";
126511    +           /* cycle through special codes if they exist */
126512    +           %let index2 = %index(&oldname, SV_);
126513    +           %if &index2 gt 0 %then %do;
126514    +             %let choice = CODEVAR ="&oldname";
126515    +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
126516    +             %if &cdsid %then %do;
126517    +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
126518    +                %let cobs = %sysfunc(fetch(&cdsid));
126519    +                %do %while(&cobs=0);
126520    +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
126521    +                    put "else if &oldname eq &code then &binvalue = &code;";
126522    +                   %let cobs = %sysfunc(fetch(&cdsid));
126523    +                %end;
126524    +             %end;
126525    +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
126526    +           %end;
126527    +           put "else ";
126528    +           put "  if &oldname < &value then &binvalue=&i;";
126529    +           %let i= %eval(&i+1);
126531    +           %let obs = %sysfunc(fetch(&dsid));
126532    +           %do %while(&obs=0);
126533    +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
126534    +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
126535    +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
126537    +              %if "&oldname" ne "&namevalue" %then %do;
126539    +                /* if variable has been re-coded for special codes, must include these values as well */
126540    +                put;
126541    +                put "if &namevalue eq . then &binvalue = .;";
126543    +                %let i=1;
126544    +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
126545    +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
126546    +                %end;
126547    +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
126549    +                /* cycle through special codes if they exist */
126550    +                %let index2 = %index(&namevalue, SV_);
126551    +                %if &index2 gt 0 %then %do;
126552    +                  %let choice = CODEVAR ="&namevalue";
126553    +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
126554    +                  %if &cdsid %then %do;
126555    +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
126556    +                     %let cobs = %sysfunc(fetch(&cdsid));
126557    +                     %do %while(&cobs=0);
126558    +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
126559    +                       put "else if &namevalue eq &code then &binvalue = &code;";
126560    +                       %let cobs = %sysfunc(fetch(&cdsid));
126561    +                     %end;
126562    +                  %end;
126563    +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
126564    +                %end;
126565    +                put "else ";
126566    +                put "  if &namevalue < &value then &binvalue=&i;";
126567    +              %end;
126568    +              %else %do;
126569    +                put "else ";
126570    +                %if "&value" ne "." %then %do;
126571    +                  put "  if &namevalue < &value then &binvalue=&i;";
126572    +                %end;
126573    +                %else %do;
126574    +                  put "  &binvalue=&i;";
126575    +                %end;
126576    +              %end;
126577    +              %let i = %eval(&i + 1);
126578    +              %let obs = %sysfunc(fetch(&dsid));
126579    +              %let oldname = &namevalue;
126580    +              %let oldbinvalue = &binvalue;
126581    +           %end;
126582    +        %end;
126583    +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
126585    +      run;
126586    +      filename X;
126587    +      /* generate BINMAPPINGS dataset */
126588    +      data TEMPBINMAPPINGS;
126589    +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
126591    +        %let choice = binflag = 1;
126592    +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
126593    +        %if &dsid %then %do;
126594    +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
126595    +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
126596    +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
126597    +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
126598    +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
126600    +           /* retrieve information from first obs */
126601    +           %let obs = %sysfunc(fetchobs(&dsid, 1));
126602    +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
126603    +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
126604    +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
126605    +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar,5));
126606    +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
126607    +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
126608    +           %let i = 1;
126610    +           NAME = "&OLDCODEVAR";
126611    +           BIN_NAME = "&OLDBINVAR";
126612    +           GRP_NAME = "&OLDGRPVAR";
126613    +           BIN = "&i";
126614    +           GRP = "&oldgrpvalue";
126615    +           LB = . ;
126616    +           UB = &oldvalue;
126617    +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
126618    +           DISPLAY_VAR = "&oldvar";
126619    +           output;
126621    +           %let i = 2;
126622    +           %let obs = %sysfunc(fetch(&dsid));
126623    +           %do %while(&obs=0);
126624    +             %let var = %sysfunc(getvarc(&dsid, &varnum));
126625    +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
126626    +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
126627    +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar,5));
126628    +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
126629    +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
126631    +             %if "&oldvar" ne "&var" %then %do;
126632    +              %let i = 1;
126633    +               %let oldvalue = .;
126634    +             %end;
126636    +             NAME = "&CODEVAR";
126637    +             BIN_NAME = "&BINVAR";
126638    +             GRP_NAME = "&GRPVAR";
126639    +             BIN = "&i";
126640    +             GRP = "&group";
126641    +             LB = &oldvalue ;
126642    +             UB = &value;
126643    +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
126644    +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
126645    +             %end;
126646    +             %else %do;
126647    +               %if "&oldvalue" eq "." %then %do;
126648    +                 EM_BIN_LABEL = "&var < &value" ;
126649    +               %end;
126650    +               %if "&value" eq "." %then %do;
126651    +                 EM_BIN_LABEL = "&oldvalue >= &var";
126652    +               %end;
126653    +             %end;
126654    +             DISPLAY_VAR = "&var";
126655    +             output;
126657    +             %let oldvar = &var;
126658    +             %let oldcodevar = &codevar;
126659    +             %let oldbinvar = &binvar;
126660    +             %let oldgrpvar = &grpvar;
126661    +             %let oldvalue   = &value;
126662    +             %let oldgrpvalue   = &group;
126663    +             %let i = %eval(&i + 1);
126664    +             %let obs = %sysfunc(fetch(&dsid));
126665    +           %end;
126666    +        %end;
126667    +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
126668    +      run;
126670    +      data &EM_USER_BINMAPPINGS;
126671    +        set &EM_USER_BINMAPPINGS tempBinMappings;
126672    +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
126673    +      run;
126675    +      /* update importsubset with bin values instead of raw values */
126676    +      data &EM_USER_IMPORTSUBSET;
126677    +        set &EM_USER_IMPORTSUBSET;
126679    +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
126680    +        %if &dsid %then %do;
126681    +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
126682    +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
126683    +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
126684    +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
126685    +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
126686    +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
126688    +          %let oldvar = ;
126689    +          %let obs = %sysfunc(fetch(&dsid));
126690    +          %do %while(&obs=0);
126691    +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
126692    +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
126693    +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
126694    +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
126695    +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
126696    +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
126698    +            %if "&oldvar" eq "&displayvar" %then %do;
126699    +              else
126700    +            %end;
126701    +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
126702    +               _SPLIT_VALUE_ = "&bin";
126703    +            end;
126704    +            %let oldvar = &displayvar;
126705    +            %let obs = %sysfunc(fetch(&dsid));
126706    +          %end;
126707    +        %end;
126708    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126709    +      run;
126711    +      proc sort data=&EM_USER_IMPORTSUBSET;
126712    +        by _VARIABLE_ _SPLIT_VALUE_;
126713    +      run;
126715    +      proc datasets library=work nolist;
126716    +        delete tempBinMappings;
126717    +      run;
126718    +      quit;
126719    +  %end;
126720    +%mend EM_IMPORT_BINNING;
126722    +%macro EM_FREEZE_BINNING(binningCode);
126724    +   data tempintfreeze;
126725    +     set &EM_USER_FREEZESUBSET;
126726    +     if binflag = 1;
126727    +   run;
126729    +   %let idsid = %sysfunc(open(work.tempintfreeze));
126730    +   %if &idsid %then %do;
126731    +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
126732    +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
126733    +   %end;
126734    +   %else %do;
126735    +     %let nvars = 0;
126736    +     %let nobs = 0;
126737    +   %end;
126738    +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
126740    +   proc datasets library=work nolist;
126741    +     delete tempintimport;
126742    +   run;
126743    +   quit;
126745    +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
126747    +      filename X "&binningCode";
126748    +      data _null_;
126749    +        FILE X MOD;
126751    +        %let bin_variables=.;
126752    +        %let quote_bin_variables=.;
126753    +        %let freeze_variables=;
126754    +        %let choice = binflag = 1;
126755    +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
126756    +        %if &dsid %then %do;
126757    +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
126758    +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
126759    +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
126760    +           %let vnum    = %sysfunc(VARNUM(&dsid, _variable_));
126762    +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingfrozenbins_note , NOQUOTE));
126763    +           put "&EM_CODEBAR;";
126764    +           put "&note;";
126765    +           put "&EM_CODEBAR;";
126767    +           /* retrieve value for first obs */
126768    +           %let obs = %sysfunc(fetchobs(&dsid, 1));
126769    +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
126770    +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
126771    +           %let variable = %sysfunc(getvarc(&dsid, &vnum));
126773    +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
126774    +           %let i = 1;
126775    +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
126776    +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
126777    +           %end;
126778    +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
126779    +           %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
126781    +           put " ";
126782    +           put "if &oldname eq . then &binvalue = .;";
126784    +           /* cycle through special codes if they exist */
126785    +           %let index2 = %index(&oldname, SV_);
126786    +           %if &index2 gt 0 %then %do;
126787    +             %let choice = CODEVAR ="&oldname";
126788    +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
126789    +             %if &cdsid %then %do;
126790    +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
126791    +                %let cobs = %sysfunc(fetch(&cdsid));
126792    +                %do %while(&cobs=0);
126793    +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
126794    +                    put "else if &oldname eq &code then &binvalue = &code;";
126795    +                   %let cobs = %sysfunc(fetch(&cdsid));
126796    +                %end;
126797    +             %end;
126798    +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
126799    +           %end;
126800    +           put "else ";
126801    +           put "  if &oldname < &value then &binvalue=&i;";
126802    +           %let i= %eval(&i+1);
126804    +           %let obs = %sysfunc(fetch(&dsid));
126805    +           %do %while(&obs=0);
126806    +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
126807    +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
126808    +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
126809    +              %let variable = %sysfunc(getvarc(&dsid, &vnum));
126811    +              %if "&oldname" ne "&namevalue" %then %do;
126813    +                /* if variable has been re-coded for special codes, must include these values as well */
126814    +                put;
126815    +                put "if &namevalue eq . then &binvalue = .;";
126817    +                %let i=1;
126818    +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
126819    +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
126820    +                %end;
126821    +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
126822    +                %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
126824    +                /* cycle through special codes if they exist */
126825    +                %let index2 = %index(&namevalue, SV_);
126826    +                %if &index2 gt 0 %then %do;
126827    +                  %let choice = CODEVAR ="&namevalue";
126828    +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
126829    +                  %if &cdsid %then %do;
126830    +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
126831    +                     %let cobs = %sysfunc(fetch(&cdsid));
126832    +                     %do %while(&cobs=0);
126833    +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
126834    +                       put "else if &namevalue eq &code then &binvalue = &code;";
126835    +                       %let cobs = %sysfunc(fetch(&cdsid));
126836    +                     %end;
126837    +                  %end;
126838    +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
126839    +                %end;
126840    +                put "else ";
126841    +                put "  if &namevalue < &value then &binvalue=&i;";
126842    +              %end;
126843    +              %else %do;
126844    +                put "else ";
126845    +                %if "&value" ne "." %then %do;
126846    +                  put "  if &namevalue < &value then &binvalue=&i;";
126847    +                %end;
126848    +                %else %do;
126849    +                  put " &binvalue=&i;";
126850    +                %end;
126851    +              %end;
126852    +              %let i = %eval(&i + 1);
126853    +              %let obs = %sysfunc(fetch(&dsid));
126854    +              %let oldname = &namevalue;
126855    +              %let oldbinvalue = &binvalue;
126856    +           %end;
126857    +        %end;
126858    +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
126860    +      run;
126861    +      filename X;
126862    +      /* generate BINMAPPINGS dataset */
126863    +      data TEMPBINMAPPINGS;
126864    +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
126866    +        %let choice = binflag = 1;
126867    +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
126868    +        %if &dsid %then %do;
126869    +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
126870    +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
126871    +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
126872    +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
126873    +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
126875    +           /* retrieve information from first obs */
126876    +           %let obs = %sysfunc(fetchobs(&dsid, 1));
126877    +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
126878    +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
126879    +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
126880    +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar, 5));
126881    +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
126882    +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
126883    +           %let i = 1;
126885    +           NAME = "&OLDCODEVAR";
126886    +           BIN_NAME = "&OLDBINVAR";
126887    +           GRP_NAME = "&OLDGRPVAR";
126888    +           BIN = "&i";
126889    +           GRP = "&oldgrpvalue";
126890    +           LB = . ;
126891    +           UB = &oldvalue;
126892    +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
126893    +           DISPLAY_VAR = "&oldvar";
126894    +           output;
126896    +           %let i = 2;
126897    +           %let obs = %sysfunc(fetch(&dsid));
126898    +           %do %while(&obs=0);
126899    +             %let var = %sysfunc(getvarc(&dsid, &varnum));
126900    +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
126901    +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
126902    +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar, 5));
126903    +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
126904    +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
126906    +             %if "&oldvar" ne "&var" %then %do;
126908    +               %let i = 1;
126909    +               %let oldvalue = .;
126910    +             %end;
126912    +             NAME = "&CODEVAR";
126913    +             BIN_NAME = "&BINVAR";
126914    +             GRP_NAME = "&GRPVAR";
126915    +             BIN = "&i";
126916    +             GRP = "&group";
126917    +             LB = &oldvalue ;
126918    +             UB = &value;
126919    +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
126920    +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
126921    +             %end;
126922    +             %else %do;
126923    +               %if "&oldvalue" eq "." %then %do;
126924    +                 EM_BIN_LABEL = "&var < &value" ;
126925    +               %end;
126926    +               %if "&value" eq "." %then %do;
126927    +                 EM_BIN_LABEL = "&oldvalue >= &var";
126928    +               %end;
126929    +             %end;
126930    +             DISPLAY_VAR = "&var";
126931    +             output;
126933    +             %let oldvar = &var;
126934    +             %let oldcodevar = &codevar;
126935    +             %let oldbinvar = &binvar;
126936    +             %let oldgrpvar = &grpvar;
126937    +             %let oldvalue   = &value;
126938    +             %let oldgrpvalue = &group;
126939    +             %let i = %eval(&i + 1);
126940    +             %let obs = %sysfunc(fetch(&dsid));
126941    +           %end;
126942    +        %end;
126944    +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
126945    +      run;
126947    +      /* remove obs from EM_USER_BINMAPPINGS that have vars also in tempBinMappings -- prevents duplicate entries */
126948    +      data &EM_USER_BINMAPPINGS;
126949    +        set &EM_USER_BINMAPPINGS;
126950    +        if NAME in (&FREEZE_VARIABLES) then delete;
126951    +      run;
126953    +      data &EM_USER_BINMAPPINGS;
126954    +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
126956    +        set &EM_USER_BINMAPPINGS tempBinMappings;
126957    +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
126958    +      run;
126960    +      /* update freezesubset with bin values instead of raw values */
126961    +      data &EM_USER_FREEZESUBSET;
126962    +        set &EM_USER_FREEZESUBSET;
126964    +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
126965    +        %if &dsid %then %do;
126966    +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
126967    +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
126968    +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
126969    +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
126970    +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
126971    +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
126973    +          %let oldvar = ;
126974    +          %let obs = %sysfunc(fetch(&dsid));
126975    +          %do %while(&obs=0);
126976    +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
126977    +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
126978    +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
126979    +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
126980    +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
126981    +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
126983    +            %if "&oldvar" eq "&displayvar" %then %do;
126984    +              else
126985    +            %end;
126986    +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
126987    +               _SPLIT_VALUE_ = "&bin";
126988    +            end;
126989    +            %let oldvar =&displayvar;
126990    +            %let obs = %sysfunc(fetch(&dsid));
126991    +          %end;
126992    +        %end;
126993    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
126994    +      run;
126996    +      proc sort data=&EM_USER_FREEZESUBSET;
126997    +        by _VARIABLE_ _SPLIT_VALUE_;
126998    +      run;
127000    +      proc datasets library=work nolist;
127001    +        delete tempBinMappings;
127002    +      run;
127003    +      quit;
127004    +   %end;
127005    +%mend EM_FREEZE_BINNING;
127007    +%macro EM_EQUAL_SPACED_BINNING(input, bindata, binningCode);
127010    +/* initialize new bucket_binning macro */
127011    +filename temp catalog 'sashelp.emapps.bucket_binning.source';
127012    +%include temp;
127013    +filename temp;
127015    +/* create fileref for generation of binningCode */
127016    +filename X "&binningCode";
127018    +/* determine if there are inputs to be binned */
127019    +%let numbinvars = 0;
127020    +%let intdsid = %sysfunc(open(work._intmid));
127021    +%if &intdsid %then %do;
127022    +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
127023    +%end;
127024    +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
127025    +%if &numbinvars > 0 %then %do;
127028    +/* get data in format needed for quantile_binning macro */
127029    +data work.vartable;
127030    +  set work._intmid;
127031    +  level = "INTERVAL";
127032    +  role  = "INPUT";
127033    +  rename variable=name;
127034    +run;
127036    +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
127037    +%if %EM_FREQ ne %then %do;
127038    +   data work.freq;
127039    +     name="%EM_FREQ";
127040    +     role="FREQ";
127041    +   run;
127043    +   data work.vartable;
127044    +     set work.vartable work.freq;
127045    +   run;
127046    +%end;
127048    +/* perform bucket binning of data */
127049    +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
127050    +%em_apps_bucket_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
127052    +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
127053    +%end;
127054    +%else %do;
127055    +  /* initialize binmappings table */
127056    +  data &EM_USER_BINMAPPINGS;
127057    +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
127058    +  run;
127060    +  data _null_;
127061    +    FILE X;
127063    +    put "&EM_CODEBAR;";
127064    +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
127065    +    put "* &note;";
127066    +    put "&EM_CODEBAR;";
127067    +  run;
127069    +%end;
127071    +/* assign display_var values to binmappings table as well as initial group values */
127072    +data &EM_USER_BINMAPPINGS;
127073    +  set &EM_USER_BINMAPPINGS;
127074    +  length display_var $32 grp $8;
127075    +  display_var = name;
127077    +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
127078    +    GRP = BIN + 1;
127079    +  %end;
127080    +  %else %do;
127081    +    GRP = BIN;
127082    +  %end;
127083    +run;
127085    +/* de-assign fileref */
127086    +filename X;
127088    +    /* append to binning code those values that were included in the importSubset data */
127089    +    %if &useImport eq 1 %then %do;
127090    +      %EM_IMPORT_BINNING(&binningcode);
127091    +    %end;
127093    +    /* append to binning code those values that were included in the freezeSubset data */
127094    +    %if &useFreeze eq 1 %then %do;
127095    +      %EM_FREEZE_BINNING(&binningcode);
127096    +    %end;
127098    +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
127099    +     by NAME;
127100    +     run;
127102    +     /* create grouping for missing level */
127103    +    data tempmissvalues;
127104    +    run;
127106    +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
127107    +       data tempmissvalues;
127108    +         %if &useImport eq 1 %then %do;
127109    +           merge sortedmapping &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME));
127110    +         %end;
127111    +         %if &useFreeze eq 1 %then %do;
127112    +           merge sortedmapping &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME));
127113    +         %end;
127114    +         %else %do;
127115    +           set sortedmapping;
127116    +         %end;
127117    +         GRP="1";
127118    +         bin="Missing";
127119    +         _split_value_ = "Missing";
127120    +         %if &useImport eq 1 %then %do;
127121    +            if _a then delete;
127122    +         %end;
127123    +         %if &useFreeze eq 1 %then %do;
127124    +            if _b then delete;
127125    +         %end;
127127    +       run;
127128    +    %end;
127130    +    /* create binData from binningCode */
127131    +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
127132    +      by NAME;
127133    +    run;
127135    +    filename X "&binningCode";
127136    +    data &bindata;
127137    +      set &input;
127138    +      %inc X;
127139    +    run;
127141    +    filename X;
127143    +    /* create splitvals dataset */
127144    +    data tempsplitvals;
127145    +      set &EM_USER_BINMAPPINGS
127146    +        %let tdsid = %sysfunc(open(work.tempmissvalues));
127147    +        %if &tdsid %then %do;
127148    +          tempmissvalues
127149    +        %end;
127150    +        %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
127151    +      ;
127152    +      length newgroup _group_ 8 _level_ $8;
127153    +      newgroup =.;
127154    +      _LEVEL_ = 'ORDINAL';
127155    +      _Group_ = grp;
127156    +      rename NAME=DISPLAY_VAR BIN=_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
127157    +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_;
127158    +    run;
127160    +    data tempsplitvals;
127161    +      set tempsplitvals;
127162    +      _order_ = _N_;
127163    +    run;
127165    +    /* determine if EM_USER_SPLITVALS already exists */
127166    +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
127167    +    %if &sdsid > 0 %then %do;
127168    +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
127169    +      %if &nvars > 0 %then %do;
127170    +        proc sql;
127171    +          reset noprint;
127172    +          select count(*) into :nobs from &EM_USER_SPLITVALS;
127173    +        quit;
127174    +      %end;
127175    +      %else %let nobs=0;
127176    +    %end;
127177    +    %else %do;
127178    +       %let nobs=0;
127179    +       %let nvars=0;
127180    +    %end;
127181    +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
127183    +    /* if useIMport=1 also include import definitions here as well */
127184    +    %if &useImport eq 1 %then %do;
127185    +      data tempImport;
127186    +        set &EM_USER_IMPORTSUBSET;
127187    +        _variable_ = binVar;
127188    +      run;
127189    +    %end;
127191    +    /* if useFreeze=1 also include import definitions here as well */
127192    +    %if &useFreeze eq 1 %then %do;
127193    +      data tempFreeze;
127194    +        length display_var $32;
127195    +        set &EM_USER_FREEZESUBSET;
127196    +        display_var = _variable_;
127197    +        _variable_ = binVar;
127198    +      run;
127199    +    %end;
127202    +    data &EM_USER_SPLITVALS;
127203    +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
127204    +        set &EM_USER_SPLITVALS tempsplitvals
127205    +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
127206    +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
127207    +        %end;
127208    +        %if &useFreeze eq 1 %then %do;
127209    +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
127210    +        %end;
127211    +        ;
127212    +      %end;
127213    +      %else %do;
127214    +        set tempsplitvals
127215    +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
127216    +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
127217    +        %end;
127218    +        %if &useFreeze eq 1 %then %do;
127219    +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
127220    +        %end;
127221    +        ;
127222    +      %end;
127223    +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _ORDER_;
127224    +    run;
127226    +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
127227    +    data tempvariableset;
127228    +      set &EM_DATA_VARIABLESET;
127229    +      where TYPE = 'C';
127230    +    run;
127232    +    /* add all interval vars that aren't special codes to the intervalvar macro */
127233    +    %let dsid = %sysfunc(open(work.tempvariableset));
127234    +    %if &dsid %then %do;
127235    +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
127236    +      %let obs = %sysfunc(fetch(&dsid));
127237    +      %do %while(&obs=0);
127238    +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
127239    +        %let classvars = &classvars &varname;
127240    +        %let qclassvars = &qclassvars "&varname";
127241    +        %let obs = %sysfunc(fetch(&dsid));
127242    +      %end;
127243    +    %end;
127244    +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
127246    +    %if &classvars ne %then %do;
127247    +      proc dmdb data =&bindata classout=_classout nonorm;
127248    +        class &classvars;
127249    +      run;
127251    +      proc dmdb data=&bindata classout=_classout2;
127252    +       class &classvars;
127253    +      run;
127255    +      proc sort data=_classout; by NAME CRAW; run;
127256    +      proc sort data=_classout2; by NAME CRAW; run;
127258    +      data _classout;
127259    +        length _variable_ $32;
127260    +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
127261    +        _split_value_ = trim(left(_split_value_));
127262    +        LEVEL = trim(left(LEVEL));
127263    +        by NAME CRAW;
127264    +       _variable_ = NAME;
127265    +      run;
127267    +      proc sort data=_classout; by _variable_ _split_value_; run;
127268    +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
127270    +      data &EM_USER_SPLITVALS;
127271    +        length _norm_level_ $200 _split_value_ $200;
127272    +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
127273    +        by _variable_ _split_value_;
127274    +        LEVEL = trim(left(LEVEL));
127275    +        _norm_level_ = trim(left(_norm_level_));
127276    +        _split_value_ = trim(left(_split_value_));
127277    +        if _norm_level_ eq '' then _norm_level_= _split_value_;
127278    +        drop NAME FREQUENCY TYPE CRAW NRAW;
127279    +      run;
127281    +      proc datasets library=work nolist;
127282    +        delete _classout _classout2;
127283    +      run;
127284    +      quit;
127285    +    %end;
127286    +    data &EM_USER_SPLITVALS;
127287    +      set &EM_USER_SPLITVALS;
127288    +      if _norm_level_ eq '' then _norm_level_= _split_value_;
127289    +    run;
127291    +    proc sort data=&EM_USER_SPLITVALS;
127292    +      by DISPLAY_VAR _Group_;
127293    +    run;
127295    +   proc datasets library=work nolist;
127296    +     delete tempBinMappings temp_binmappings tempBinNames tempsplitvals sortedmapping tempmissvalues
127297    +      %if &useImport eq 1 %then %do;
127298    +        tempImport
127299    +      %end;
127300    +      %if &useFreeze eq 1 %then %do;
127301    +        tempFreeze
127302    +      %end;
127303    +     ;
127304    +   run;
127305    +   quit;
127307    +%mend;
127309    +%macro EM_QUANTILE_BINNING(input, pctdata, bindata, binningCode);
127311    +/* initialize new quantile_binning macro */
127312    +filename temp catalog 'sashelp.emapps.quantile_binning.source';
127313    +%include temp;
127314    +filename temp;
127316    +/* generate fileref for quantile_binning macro */
127317    +filename X "&binningCode";
127319    +/* determine if there are inputs to be binned */
127320    +%let numbinvars = 0;
127321    +%let intdsid = %sysfunc(open(work._intmid));
127322    +%if &intdsid %then %do;
127323    +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
127324    +%end;
127325    +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
127326    +%if &numbinvars > 0 %then %do;
127328    +/* get data in format needed for quantile_binning macro */
127329    +data work.vartable;
127330    +  set work._intmid;
127331    +  level = "INTERVAL";
127332    +  role  = "INPUT";
127333    +  rename variable=name;
127334    +run;
127336    +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
127337    +%if %EM_FREQ ne %then %do;
127338    +   data work.freq;
127339    +     name="%EM_FREQ";
127340    +     role="FREQ";
127341    +   run;
127343    +   data work.vartable;
127344    +     set work.vartable work.freq;
127345    +   run;
127346    +%end;
127349    +/* perform quantile binning of data */
127350    +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
127351    +%em_apps_quantile_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
127353    +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
127354    +%end;
127355    +%else %do;
127356    +  /* initialize binmappings table */
127357    +  data &EM_USER_BINMAPPINGS;
127358    +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
127359    +  run;
127361    +  data _null_;
127362    +    FILE X;
127364    +    put "&EM_CODEBAR;";
127365    +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
127366    +    put "* &note;";
127367    +    put "&EM_CODEBAR;";
127368    +  run;
127370    +%end;
127372    +/* assign display_var values to binmappings table as well as initial group values */
127373    +data &EM_USER_BINMAPPINGS;
127374    +  set &EM_USER_BINMAPPINGS;
127375    +  length display_var $32 grp $8;
127376    +  display_var = name;
127378    +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
127379    +    GRP = BIN + 1;
127380    +  %end;
127381    +  %else %do;
127382    +    GRP = BIN;
127383    +  %end;
127384    +run;
127386    +/* de-assign fileref */
127387    +filename X;
127389    +    /* append to binning code those values that were included in the importSubset data */
127390    +    %if &useImport eq 1 %then %do;
127391    +      %EM_IMPORT_BINNING(&binningcode);
127392    +    %end;
127394    +    /* append to binning code those values that were included in the freezeSubset data */
127395    +    %if &useFreeze eq 1 %then %do;
127396    +      %EM_FREEZE_BINNING(&binningcode);
127397    +    %end;
127399    +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
127400    +      by NAME;
127401    +    run;
127403    +    /* create grouping for missing level */
127404    +    data tempmissvalues;
127405    +    run;
127407    +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
127408    +       data tempmissvalues;
127409    +         %if ((&useImport eq 1) OR (&useFreeze eq 1)) %then %do;
127410    +           merge sortedmapping
127411    +           %if &useImport eq 1 %then %do;
127412    +              &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME))
127413    +           %end;
127414    +           %if &useFreeze eq 1 %then %do;
127415    +             &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME))
127416    +           %end;
127417    +           ;
127418    +         %end;
127419    +         %else %do;
127420    +           set sortedmapping;
127421    +         %end;
127422    +         GRP="1";
127423    +         bin="Missing";
127424    +         _split_value_ = "Missing";
127425    +         %if &useImport eq 1 %then %do;
127426    +            if _a then delete;
127427    +         %end;
127428    +         %if &useFreeze eq 1 %then %do;
127429    +            if _b then delete;
127430    +         %end;
127432    +       run;
127433    +    %end;
127436    +    /* create binData from binningCode */
127437    +    filename X "&binningCode";
127439    +    data &bindata;
127440    +      set &input;
127441    +      %inc X;
127442    +    run;
127444    +    filename X;
127446    +    /* create splitvals dataset */
127447    +    data tempsplitvals;
127448    +      set &EM_USER_BINMAPPINGS tempmissvalues;
127449    +      length newgroup _group_ _order_ 8 _level_ $8;
127450    +      newgroup =.;
127451    +      _LEVEL_ = 'ORDINAL';
127452    +      _Group_ = grp;
127453    +      rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
127454    +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
127455    +    run;
127457    +    data tempsplitvals;
127458    +      set tempsplitvals;
127459    +      _order_ = _N_;
127460    +    run;
127462    +    /* determine if EM_USER_SPLITVALS already exists */
127463    +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
127464    +    %if &sdsid > 0 %then %do;
127465    +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
127466    +      %if &nvars > 0 %then %do;
127467    +        proc sql;
127468    +          reset noprint;
127469    +          select count(*) into :nobs from &EM_USER_SPLITVALS;
127470    +        quit;
127471    +      %end;
127472    +      %else %let nobs=0;
127473    +    %end;
127474    +    %else %do;
127475    +       %let nobs=0;
127476    +       %let nvars=0;
127477    +    %end;
127478    +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
127480    +    /* if useIMport=1 also include import definitions here as well */
127481    +    %if &useImport eq 1 %then %do;
127482    +      data tempImport;
127483    +        set &EM_USER_IMPORTSUBSET;
127484    +        _variable_ = binVar;
127485    +      run;
127486    +    %end;
127488    +    /* if useFreeze=1 also include frozen definitions here as well */
127489    +    %if &useFreeze eq 1 %then %do;
127490    +      data tempFreeze;
127491    +        length display_var $32;
127492    +        set &EM_USER_FreezeSUBSET;
127493    +        display_var = _variable_;
127494    +        _variable_ = binVar;
127495    +      run;
127496    +    %end;
127498    +    data &EM_USER_SPLITVALS;
127499    +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
127500    +        set &EM_USER_SPLITVALS tempsplitvals
127501    +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
127502    +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
127503    +        %end;
127504    +        %if &useFreeze eq 1 %then %do;
127505    +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
127506    +        %end;
127507    +        ;
127508    +      %end;
127509    +      %else %do;
127510    +        set tempsplitvals
127511    +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
127512    +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
127513    +        %end;
127514    +        %if &useFreeze eq 1 %then %do;
127515    +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
127516    +        %end;
127517    +        ;
127518    +      %end;
127519    +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
127520    +    run;
127522    +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
127523    +    data tempvariableset;
127524    +      set &EM_DATA_VARIABLESET;
127525    +      where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
127526    +    run;
127528    +    /* add all interval vars that aren't special codes to the intervalvar macro */
127529    +    %let dsid = %sysfunc(open(work.tempvariableset));
127530    +    %if &dsid %then %do;
127531    +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
127532    +      %let obs = %sysfunc(fetch(&dsid));
127533    +      %do %while(&obs=0);
127534    +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
127535    +        %let classvars = &classvars &varname;
127536    +        %let qclassvars = &qclassvars "&varname";
127537    +        %let obs = %sysfunc(fetch(&dsid));
127538    +      %end;
127539    +    %end;
127540    +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
127542    +    %if &classvars ne %then %do;
127543    +      proc dmdb data =&bindata classout=_classout nonorm;
127544    +        class &classvars;
127545    +      run;
127547    +      proc dmdb data=&bindata classout=_classout2;
127548    +       class &classvars;
127549    +      run;
127551    +      proc sort data=_classout; by NAME CRAW; run;
127552    +      proc sort data=_classout2; by NAME CRAW; run;
127554    +      data _classout;
127555    +        length _variable_ $32;
127556    +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
127557    +        by NAME CRAW;
127558    +       _variable_ = NAME;
127559    +      run;
127561    +      proc sort data=_classout; by _variable_ _split_value_; run;
127562    +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
127564    +      data &EM_USER_SPLITVALS;
127565    +        length _norm_level_ $200 _split_value_ $200;
127566    +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
127567    +        by _variable_ _split_value_;
127568    +        LEVEL = trim(left(LEVEL));
127569    +        _split_value_ = trim(left(_split_value_));
127570    +        _norm_level_ = trim(left(_norm_level_));
127571    +        if _norm_level_ eq '' then _norm_level_= _split_value_;
127572    +        drop NAME FREQUENCY TYPE CRAW NRAW;
127573    +      run;
127575    +      proc datasets library=work nolist;
127576    +        delete _classout _classout2;
127577    +      run;
127578    +      quit;
127579    +    %end;
127581    +    data &EM_USER_SPLITVALS;
127582    +      set &EM_USER_SPLITVALS;
127583    +      if _norm_level_ eq '' then _norm_level_= _split_value_;
127584    +    run;
127587    +    proc sort data=&EM_USER_SPLITVALS;
127588    +      by DISPLAY_VAR _Group_;
127589    +    run;
127591    +    proc datasets library=work nolist;
127592    +      delete sortedmapping tempsplitvals tempmissvalues
127593    +      %if &useImport eq 1 %then %do;
127594    +        tempImport
127595    +      %end;
127596    +      %if &useFreeze eq 1 %then %do;
127597    +        tempFreeze
127598    +      %end;
127599    +      ;
127600    +    run;
127601    +    quit;
127602    +/*
127603    +%end;
127604    +%else %do;
127605    +    data &bindata;
127606    +      set &input;
127607    +    run;
127608    +%end;
127609    +*/
127610    +%mend EM_QUANTILE_BINNING;
127612    +%macro EM_ORDVARS_GROUP;
127614    +   /* retrieve all ordinal variables from the incoming dataset */
127615    +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
127616    +     by NAME;
127617    +     where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
127618    +   run;
127620    +   /* add all vars marked as interval that are actually class vars to this data */
127621    +   %let nobs = 0;
127622    +   %let dsid = %sysfunc(open(WORK._DISCRETEMID));
127623    +   %if &dsid %then %do;
127624    +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
127625    +     %if &nobs gt 0 %then %do;
127627    +     data tempvars;
127628    +       set &EM_DATA_VARIABLESET;
127629    +       if NAME in (
127630    +         %let obs = %sysfunc(fetch(&dsid));
127631    +         %do %while(&obs=0);
127632    +           %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
127633    +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
127634    +           "&varname"
127635    +           %let obs = %sysfunc(fetch(&dsid));
127636    +         %end;
127637    +        );
127638    +     run;
127639    +     data tempvariableset;
127640    +       set tempvariableset tempvars;
127641    +     run;
127642    +     %end;
127643    +   %end;
127644    +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
127646    +   %if &useImport eq 1 %then %do;
127647    +     /* remove all variables from tempvariableset that are included in the importsubset */
127648    +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
127649    +       by _VARIABLE_ ;
127650    +     run;
127651    +     proc sort data=tempvariableset; by NAME; run;
127653    +     data tempvariableset;
127654    +       merge tempimport(in=_a) tempvariableset(in=_b);
127655    +       by NAME;
127656    +       if ^_a then output;
127657    +     run;
127658    +   %end;
127660    +   %if &useFreeze eq 1 %then %do;
127661    +     /* remove all variables from tempvariableset that are included in the freezesubset */
127662    +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
127663    +       by _VARIABLE_ ;
127664    +     run;
127665    +     proc sort data=tempvariableset; by NAME; run;
127667    +     data tempvariableset;
127668    +       merge tempfreeze(in=_a) tempvariableset(in=_b);
127669    +       by NAME;
127670    +       if ^_a then output;
127671    +     run;
127672    +   %end;
127674    +   /* get dataset of distinct values for the ordinal variable */
127675    +   %let nobs = 0;
127676    +   %let dsid = %sysfunc(open(WORK.tempvariableset));
127677    +   %if &dsid %then %do;
127678    +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
127679    +     %if &nobs gt 0 %then %do;
127680    +         %let obs = %sysfunc(fetch(&dsid));
127681    +         %do %while(&obs=0);
127682    +           %let varnum = %sysfunc(VARNUM(&dsid, NAME));
127683    +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
127684    +           %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
127685    +           %let input_type = %sysfunc(getvarc(&dsid, &typenum));
127686    +           %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
127687    +           %let input_fmt = %sysfunc(getvarc(&dsid, &fmtnum));
127688    +           %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
127689    +           %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
127690    +           %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
127692    +           data temp;
127693    +             set &EM_USER_BINDATA(keep=&varname);
127694    +             %if &input_fmt ne %then %do;
127695    +               %dmnormcp(put(&varname, &input_fmt), _norm);
127696    +             %end;
127697    +             %else %do;
127698    +               %dmnormcp(&varname, _norm);
127699    +             %end;
127700    +             keep &varname _norm;
127701    +           run;
127703    +          proc dmdb data=temp classout=_classout2;
127704    +           class _norm;
127705    +         run;
127706    +         proc sort data=_classout2; by LEVEL; run;
127708    +         /* re-order numeric inputs based on non-normalized values */
127709    +         %if &input_type eq N %then %do;
127710    +           proc sort data=temp nodupkey; by _norm; run;
127711    +           data varvals;
127712    +             merge temp _classout2(rename=(LEVEL=_norm));
127713    +             by _norm;
127714    +             if craw='' and _norm ne '.' then delete;
127715    +             keep &varname _norm nraw craw;
127716    +           run;
127718    +           proc sort data=varvals; by &varname; run;
127719    +         %end;
127720    +         %else %do;
127721    +           data varvals;
127722    +              set _classout2(rename=(LEVEL=_norm));
127723    +              if _norm='' then delete;
127724    +              if _norm='.' then delete;
127725    +              keep _norm;
127726    +           run;
127727    +         %end;
127728    +         data varvals;
127729    +           set varvals;
127730    +           if &varname="." then delete;
127731    +           if upcase(&varname) = "MISSING" then delete;
127732    +         run;
127734    +          /* generate Splitvals Data */
127735    +          data tempsplitvals;
127736    +            length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ _order_ 8 _level_ $8 _norm_level_ $200 ;
127738    +            %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
127739    +              DISPLAY_VAR="&varname";
127740    +              _VARIABLE_ ="&varname";
127741    +              newgroup   =.;
127742    +              _group_    =1;
127743    +              _Split_Value_="Missing";
127744    +              _level_    ="ORDINAL";
127745    +              output;
127746    +              %let group=2;
127747    +            %end;
127748    +            %else %let group=1;
127750    +            %let vdsid = %sysfunc(open(WORK.VARVALS));
127751    +            %if &vdsid %then %do;
127752    +            %let namenum = %sysfunc(VARNUM(&vdsid, _norm));
127753    +            /*%let group = 2;*/
127754    +            %let vobs = %sysfunc(fetch(&vdsid));
127755    +            %do %while(&vobs=0);
127756    +                %let nameval = %bquote(%upcase(%sysfunc(getvarc(&vdsid, &namenum))));
127758    +                DISPLAY_VAR   = "&varname";
127759    +                _variable_    = "&varname";
127760    +                newgroup      = .;
127761    +                _group_       = &group;
127762    +                _split_value_ = "&nameval";
127763    +                _level_       = 'ORDINAL';
127764    +                output;
127766    +              %let group = %eval(&group + 1);
127767    +              %let vobs = %sysfunc(fetch(&vdsid));
127768    +            %end;
127769    +            %if &vdsid %then %let vdsid = %sysfunc(close(&vdsid));
127770    +          run;
127772    +          /* determine if EM_USER_SPLITVALS already exists */
127773    +          %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
127774    +          %if &sdsid > 0 %then %do;
127775    +            %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
127776    +            %if &nvars > 0 %then %do;
127777    +               proc sql;
127778    +                reset noprint;
127779    +                select count(*) into :nobs from &EM_USER_SPLITVALS;
127780    +               quit;
127781    +            %end;
127782    +            %else %let nobs=0;
127783    +            %end;
127784    +            %else %do;
127785    +              %let nobs=0;
127786    +              %let nvars=0;
127787    +            %end;
127788    +          %end;
127789    +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
127791    +          /* if tempsplitvals doesn't exist; create empty data set */
127792    +          %let sdsid = %sysfunc(open(work.tempsplitvals));
127793    +          %if &sdsid <= 0 %then %do;
127794    +            data tempsplitvals;
127795    +              length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ 8 _level_ $8 ;
127796    +            run;
127797    +          %end;
127798    +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
127800    +          data tempsplitvals;
127801    +            set tempsplitvals;
127802    +            _order_ = _N_;
127803    +          run;
127805    +          %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
127806    +             proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
127807    +             proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
127808    +          %end;
127810    +          data &EM_USER_SPLITVALS;
127811    +           %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
127812    +             merge &EM_USER_SPLITVALS tempsplitvals;
127813    +             by _variable_ _split_value_;
127814    +           %end;
127815    +           %else %do;
127816    +             set tempsplitvals;
127817    +           %end;
127818    +           if display_var eq "" then delete;
127819    +           if _norm_level_ eq "" then _norm_level_ = _split_value_;
127820    +           keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_ _order_;
127821    +         run;
127823    +           %let obs = %sysfunc(fetch(&dsid));
127824    +         %end;
127825    +     %end;
127826    +   %end;
127827    +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
127829    +   proc sort data=&EM_USER_SPLITVALS;
127830    +      by DISPLAY_VAR _Group_;
127831    +   run;
127833    +   /* delete temporary datasets */
127834    +   proc datasets library= work nolist;
127835    +     delete tempsplitvals varvals tempvariableset tempvars
127836    +     ;
127837    +   run;
127838    +   quit;
127839    +%mend EM_ORDVARS_GROUP;
127842    +%macro EM_CLASSVARS_GROUP(groupRare);
127844    +   /* retrieve all class variables from the incoming dataset */
127845    +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
127846    +     by NAME;
127847    +     where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
127848    +   run;
127850    +   %if &useImport eq 1 %then %do;
127851    +     /* remove all variables from tempvariableset that are included in the importsubset */
127852    +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
127853    +       by _VARIABLE_ ;
127854    +     run;
127855    +     proc sort data=tempvariableset; by NAME; run;
127857    +     data tempvariableset;
127858    +       merge tempimport(in=_a) tempvariableset(in=_b);
127859    +       by NAME;
127860    +       if ^_a then output;
127861    +     run;
127862    +   %end;
127864    +   %if &useFreeze eq 1 %then %do;
127865    +     /* remove all variables from tempvariableset that are included in the freezesubset */
127866    +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
127867    +       by _VARIABLE_ ;
127868    +     run;
127869    +     proc sort data=tempvariableset; by NAME; run;
127871    +     data tempvariableset;
127872    +       merge tempfreeze(in=_a) tempvariableset(in=_b);
127873    +       by NAME;
127874    +       if ^_a then output;
127875    +     run;
127876    +   %end;
127878    +   /* run dmdb to retrieve list of all class levels and counts */
127879    +   %let dsid = %sysfunc(open(work.tempvariableset));
127880    +   %let nobs = 0;
127881    +   %if &dsid %then %do;
127882    +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
127884    +   %end;
127886    +   %if &nobs gt 0 %then %do;
127887    +     proc dmdb data=&EM_IMPORT_DATA classout=tempclassout;
127888    +       class
127890    +        %let namenum = %sysfunc(VARNUM(&dsid, NAME));
127891    +        %let obs = %sysfunc(fetch(&dsid));
127892    +        %do %while(&obs=0);
127893    +           %let name = %sysfunc(getvarc(&dsid, &namenum));
127894    +           &name
127895    +           %let obs = %sysfunc(fetch(&dsid));
127896    +        %end;
127897    +     ;
127899    +     %if %EM_FREQ ne %then %do;
127900    +        freq %EM_FREQ;
127901    +     %end;
127902    +    run;
127903    +   %end;
127904    +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
127906    +   %let dsid = %sysfunc(open(work.tempclassout));
127907    +   %let nobs = 0;
127908    +   %if &dsid %then %do;
127909    +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
127910    +     %let dsid = %sysfunc(close(&dsid));
127911    +   %end;
127913    +   %if &nobs gt 0 %then %do;
127914    +    data tempclassout;
127915    +       set tempclassout;
127916    +       if LEVEL='MISSING' then level='Missing';
127917    +    run;
127919    +    proc sort data=tempclassout nodupkey;
127920    +      by NAME descending FREQUENCY LEVEL;
127921    +    run;
127923    +    data tempds(keep=NAME NOBS);
127924    +      retain NOBS;
127925    +      set tempclassout;
127926    +      by NAME;
127927    +      if first.NAME then
127928    +        NOBS = frequency;
127929    +      else
127930    +        NOBS=NOBS+frequency;
127931    +      if last.name then do;
127932    +        output;
127933    +      end;
127934    +    run;
127936    +    data tempds;
127937    +      merge tempclassout
127938    +      tempds;
127939    +      by NAME;
127940    +      if ((LEVEL ne '') AND (LEVEL ne "."));
127941    +      %if &groupRare eq Y %then %do;
127942    +        PCT = 100 * (FREQUENCY/NOBS);
127943    +        if PCT < &EM_PROPERTY_GROUPCUTOFF then flag=1;
127944    +        else flag=0;
127945    +      %end;
127946    +      %else %do;
127947    +        flag = 0;
127948    +      %end;
127949    +    run;
127951    +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
127952    +      data tempmissvalues;
127953    +        length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
127955    +      %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
127956    +      %if &dsid %then %do;
127957    +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
127958    +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
127959    +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
127960    +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
127961    +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
127962    +        %let obs = %sysfunc(fetch(&dsid));
127964    +        %do %while(&obs=0);
127965    +          %let var = %sysfunc(getvarc(&dsid, &varnum));
127966    +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
127967    +          %let type = %sysfunc(getvarc(&dsid, &typenum));
127968    +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
127970    +          NAME="&var";
127971    +          LEVEL="Missing";
127972    +          _LEVEL_="&varlvl";
127973    +          _group_ = 1;
127974    +          output;
127976    +          %let obs = %sysfunc(fetch(&dsid));
127977    +        %end;
127978    +      %end;
127979    +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
127980    +      run;
127981    +    %end;
127983    +    /* generate Splitvals Data */
127984    +    data tempsplitvals;
127985    +      length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
127987    +      set tempclassout
127988    +      %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
127989    +         tempmissvalues
127990    +      %end;
127991    +      ;
127992    +      if ((level ne '') AND (level ne '.'));
127994    +     %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
127995    +     %if &dsid %then %do;
127996    +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
127997    +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
127998    +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
127999    +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
128000    +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
128001    +        %let obs = %sysfunc(fetch(&dsid));
128003    +        %do %while(&obs=0);
128004    +          %let var = %sysfunc(getvarc(&dsid, &varnum));
128005    +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
128006    +          %let type = %sysfunc(getvarc(&dsid, &typenum));
128007    +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
128009    +          if NAME = "&var" then do;
128010    +            _LEVEL_ = "&varlvl";
128012    +          /* cycle through levels, assigning group values;              */
128013    +          /* flag=1 indicates to put value in "_OTHER_" group;          */
128014    +          /* flag=0 indicates that value shoudld be in group of its own */
128015    +          %let choice = ((NAME="&Var") and (FLAG=0));
128016    +          %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
128017    +            %let group=2;
128018    +          %end;
128019    +          %else %do;
128020    +            %let group = 1;
128021    +          %end;
128022    +          %let fdsid = %sysfunc(open(work.tempds(where=(&choice))));
128023    +          %if &fdsid %then %do;
128025    +            %let lvlnum = %sysfunc(VARNUM(&fdsid, LEVEL));
128026    +            %let fobs = %sysfunc(fetch(&Fdsid));
128027    +            %let fflag = 0;
128028    +            %do %while(&fobs=0);
128029    +              %let fflag = 1;
128030    +              %let temp = %nrbquote(%sysfunc(getvarc(&fdsid, &lvlnum)));
128031    +              %let level = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
128032    +              %let level = %nrbquote(%sysfunc(strip(&level)));
128033    +              %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
128034    +                %if &group eq 2 %then %do;
128035    +                   if LEVEL = "&level" then _GROUP_ = &group;
128036    +                %end;
128037    +                %else %do;
128038    +                   else if LEVEL = "&level" then _GROUP_ = &group;
128039    +                %end;
128040    +              %end;
128041    +              %else %do;
128042    +                %if &group eq 1 %then %do;
128043    +                   if LEVEL = "&level" then _GROUP_ = &group;
128044    +                %end;
128045    +                %else %do;
128046    +                   else if LEVEL = "&level" then _GROUP_ = &group;
128047    +                %end;
128048    +              %end;
128050    +              %let group = %eval(&group + 1);
128051    +              %let fobs = %sysfunc(fetch(&fdsid));
128052    +            %end;
128054    +          %end;
128055    +          %if &fflag eq 1 %then %do;
128056    +            else if LEVEL ^='Missing' then _GROUP_ = &group;
128057    +          %end;
128058    +          end;
128060    +          %if &fdsid %then %let fdsid = %sysfunc(close(&fdsid));
128061    +          %let obs = %sysfunc(fetch(&dsid));
128062    +        %end;
128063    +     %end;
128064    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
128065    +     _VARIABLE_ = NAME;
128066    +     newgroup = .;
128067    +     rename NAME = DISPLAY_VAR
128068    +            LEVEL = _SPLIT_VALUE_;
128069    +     keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
128070    +    run;
128071    +  %end;
128072    +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
128074    +    /* determine if EM_USER_SPLITVALS already exists */
128075    +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
128076    +    %if &sdsid > 0 %then %do;
128077    +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
128078    +      %if &nvars > 0 %then %do;
128079    +        proc sql;
128080    +          reset noprint;
128081    +          select count(*) into :nobs from &EM_USER_SPLITVALS;
128082    +        quit;
128083    +      %end;
128084    +      %else %let nobs=0;
128085    +    %end;
128086    +    %else %do;
128087    +       %let nobs=0;
128088    +       %let nvars=0;
128089    +    %end;
128090    +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
128092    +   /* if tempsplitvals doesn't exist; create empty data set */
128093    +    %let sdsid = %sysfunc(open(work.tempsplitvals));
128094    +    %if &sdsid <= 0 %then %do;
128095    +      data tempsplitvals;
128096    +        length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
128097    +      run;
128098    +    %end;
128099    +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
128101    +    %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
128102    +      proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
128103    +      proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
128104    +    %end;
128106    +    /* if useIMport=1 also include import definitions here as well */
128107    +    %if &useImport eq 1 %then %do;
128108    +      proc sort data=&EM_USER_IMPORTSUBSET; by _variable_ _split_value_; run;
128109    +    %end;
128110    +    %if &useFreeze eq 1 %then %do;
128111    +      proc sort data=&EM_USER_FREEZESUBSET; by _variable_ _split_value_; run;
128112    +    %end;
128113    +    data &EM_USER_SPLITVALS;
128114    +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
128115    +        merge &EM_USER_SPLITVALS tempsplitvals
128116    +        %if &useImport eq 1 %then %do;
128117    +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
128118    +        %end;
128119    +        %if &useFreeze eq 1 %then %do;
128120    +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
128121    +        %end;
128123    +        ;
128124    +        by _variable_ _split_value_
128125    +        ;
128126    +      %end;
128127    +      %else %do;
128128    +        set tempsplitvals
128129    +        %if &useImport eq 1 %then %do;
128130    +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
128131    +        %end;
128132    +        %if &useFreeze eq 1 %then %do;
128133    +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
128134    +        %end;
128135    +        ;
128136    +      %end;
128137    +      if display_var eq "" then delete;
128138    +      if _norm_level_ eq "" then _norm_level_ = _split_value_;
128139    +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
128140    +    run;
128142    +    proc sort data=&EM_USER_SPLITVALS;
128143    +      by DISPLAY_VAR _Group_;
128144    +    run;
128146    +   /* delete temporary datasets */
128147    +   proc datasets library= work nolist;
128148    +     delete tempsplitvals tempds tempclassout tempvariableset tempvars
128149    +     %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
128150    +       tempmissvalues
128151    +     %end;
128152    +     ;
128153    +   run;
128154    +   quit;
128155    +%mend EM_CLASSVARS_GROUP;
128158    +%macro EM_SUMMARIZE_TABLE(data, inputData, outData, varname=);
128160    +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
128162    +  data temptrain ;
128163    +    set &data;
128164    +  run;
128166    +  /* normalize all values prior to calculating counts */
128167    +  filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
128168    +  %include _temp;
128169    +  filename _temp;
128170    +  filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
128171    +  %include _temp;
128172    +  filename _temp;
128174    +  proc sort data=&EM_USER_VARMAPPINGS
128175    +  %if &varname ne %then %do;
128176    +    (where=(_variable_="&varname"))
128177    +  %end;
128178    +  out=tempmap; by _variable_; run;
128180    +  data _cmeta;
128181    +    merge tempvarset tempmap(in=_a rename=(_variable_=name ));
128182    +    by name;
128183    +    if ((_a) or (role="TARGET"));
128184    +    if role="INPUT" then name=_proc_var_;
128185    +    if role="TARGET" then role="INPUT";
128186    +    level = procLevel;
128187    +    index = kindex(name, "BIN_");
128188    +    if index gt 0 then do;
128189    +     level="ORDINAL";
128190    +     format = "";
128191    +    end;
128192    +    drop index;
128193    +  run;
128195    +  %em_PreNormalizeClassVars(incmeta=_cmeta, outcmeta=_cmetatmp);
128196    +  %em_NormalizeClassVars(indata=work.temptrain, cmeta=_cmetatmp, encodedTarget=N, outdata=_tmp_train);
128198    +  proc sort data=&inputData out=sortedmap; by _proc_var_; run;
128200    +  data _null_;
128201    +    set sortedmap end=eof;
128202    +    by _proc_var_;
128203    +    if _n_=1 then do;
128204    +      call execute("ods output CrossTabFreqs=crosstabfreq ;");
128205    +      call execute("proc freq data=_tmp_train order=formatted addnames;");
128206    +      call execute("tables ("||_proc_var_);
128207    +    end;
128208    +    else do;
128209    +      call execute(_proc_var_);
128210    +    end;
128211    +    if eof then do;
128212    +      call execute(") * %EM_BINARY_TARGET/ missing;");
128213    +      %if %EM_FREQ ne %then %do;
128214    +        call execute("weight %EM_FREQ;");
128215    +      %end;
128216    +      call execute("run;");
128217    +      call execute("ods output close;");
128218    +    end;
128219    +  run;
128221    +  data _null_;
128222    +    set sortedmap end=eof;
128223    +    by _proc_var_;
128224    +    if _n_=1 then do;
128225    +      call execute("data crosstabs;");
128226    +      call execute("  length _variable_ _split_value_  $200 ;");
128227    +      call execute("  set crosstabfreq(where=(_type_='11'));");
128228    +      call execute("  _variable_= RowVariable;");
128229    +    end;
128231    +    call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
128232    +    call execute("  _split_value_="||_proc_var_||";");
128233    +    call execute("end;");
128235    +    if eof then do;
128236    +      call execute("keep _variable_ _split_value_ %EM_BINARY_TARGET Frequency Percent display_var;");
128237    +      call execute("run;");
128238    +    end;
128239    +  run;
128241    +  proc sort data=crosstabs; by _variable_ _split_value_; run;
128243    +  data crosstabs;
128244    +    length display_var $32;
128245    +    merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
128246    +    by _variable_;
128247    +  run;
128249    +  proc sort data=crosstabs; by display_var _split_value_; run;
128250    +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
128252    +  data crosstabs;
128253    +    merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
128254    +    by display_var;
128255    +    index = kindex(_variable_, "BIN_");
128256    +    if index gt 0 then do;
128257    +     level="ORDINAL";
128258    +     format = "";
128259    +    end;
128260    +    _temp = %EM_BINARY_TARGET;
128261    +    /*
128262    +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
128263    +      %if &target_format ne %then %do;
128264    +        %if &target_type eq C %then %do;
128265    +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
128266    +        %end;
128267    +        %else %do;
128268    +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
128269    +        %end;
128270    +      %end;
128271    +      %else %do;
128272    +        %dmnormcp(%EM_BINARY_TARGET, _temp);
128273    +      %end;
128274    +    %end;
128275    +    %else %do;
128276    +      _temp = %EM_BINARY_TARGET;
128277    +    %end;
128278    +*/
128280    +    drop index;
128281    +  run;
128283    +  proc sort data=crosstabs; by _variable_ _split_value_; run;
128285    +  data &outdata;
128286    +    length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate  8 type $1 valfmt $20 ;
128288    +    retain eventCount noneventCount ;
128289    +    set crosstabs;
128290    +    by  _variable_ _split_value_;
128292    +    if first._split_value_ then do;
128293    +     total=0;
128294    +     eventcount=0;
128295    +     noneventcount=0;
128296    +    end;
128298    +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
128299    +      %if &target_format ne %then %do;
128300    +        if upcase(strip(_temp))="&target_event" then
128301    +          eventCount=Frequency;
128302    +      %end;
128303    +      %else %do;
128304    +         if upcase(strip(_temp)) ="&target_event" then
128305    +          eventCount=Frequency;
128306    +      %end;
128307    +    %end;
128308    +    %else %do;
128309    +      if _temp=&target_event then
128310    +        eventCount=Frequency;
128311    +    %end;
128312    +    else
128313    +      noneventCount=Frequency;
128315    +    if last._split_value_ then do;
128316    +      total = eventCount + noneventCount;
128318    +      if total ne 0 then do;
128319    +        eventRate = eventCount / total;
128320    +        nonEventRate = nonEventCount / total;
128321    +      end;
128322    +      else do;
128323    +        eventRate = 0;
128324    +        nonEventRate = 0;
128325    +      end;
128328    +     output;
128329    +    end;
128330    +    valfmt = format;
128332    +    drop _temp Frequency percent;
128333    +   run;
128335    +%mend EM_SUMMARIZE_TABLE;
128338    +%macro EM_FINE_DETAIL(bindata, varmappings, fineDetailData, splitVals, binMappings, interactiveFlag=0);
128340    +   proc freq data=&bindata noprint;
128341    +     table %EM_BINARY_TARGET / missing out=temptargetB;
128342    +     %if %EM_FREQ ne %then %do;
128343    +       weight %EM_FREQ;
128344    +     %end;
128345    +   run;
128347    +   %let tdsid = %sysfunc(open(work.temptargetB));
128348    +   %if &tdsid %then %do;
128349    +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
128350    +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
128352    +      %let temp = %nrbquote(%sysfunc(strip(&target_event)));
128353    +      %let target_event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
128354    +      %let temp = %nrbquote(%sysfunc(strip(&target_nonevent)));
128355    +      %let target_nonevent = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
128358    +      %let obs = %sysfunc(fetch(&tdsid));
128359    +      %do %while(&obs = 0);
128360    +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
128361    +           %if &target_type eq C %then %do;
128362    +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
128363    +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
128364    +           %end;
128365    +           %else
128366    +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
128368    +           %if &target_format ne %then %do;
128369    +              %if &target_type eq C %then %do;
128370    +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
128371    +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
128372    +              %end;
128373    +              %else
128374    +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
128375    +           %end;
128376    +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
128377    +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
128379    +           %if "&tarvalue" eq "&target_event" %then %do;
128380    +             %let totalevent = &count;
128381    +           %end;
128382    +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
128383    +              %let totalnonevent= &count;
128384    +           %end;
128385    +         %end;
128386    +         %else %do;
128387    +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
128388    +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
128390    +           %if &tarvalue eq &target_event %then %do;
128391    +             %let totalevent = &count;
128392    +           %end;
128393    +           %else %if &tarvalue eq &target_nonevent %then %do;
128394    +              %let totalnonevent= &count;
128395    +           %end;
128396    +         %end;
128397    +         %let obs = %sysfunc(fetch(&tdsid));
128398    +      %end;
128399    +   %end;
128400    +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
128402    +   proc datasets lib=work nolist;
128403    +      delete temptargetB;
128404    +   run;
128405    +   quit;
128407    +   %if &interactiveFlag eq 0 %then %do;
128408    +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData);
128409    +   %end;
128410    +   %else %do;
128411    +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData, varname=&wherevar);
128412    +   %end;
128415    +   data &fineDetailData;
128416    +     length display_var $32 newgroup numsplitval 8;
128417    +     set &fineDetailData;
128419    +     display_var = _variable_;
128421    +     index = kindex(display_var, "BIN_");
128422    +     if index gt 0 then do;
128423    +       display_var = ksubstr(display_var, 5);
128424    +     end;
128426    +     index2 = kindex(display_var, "SV_");
128427    +     if index2 gt 0 then do;
128428    +       display_var = ksubstr(display_var, 4);
128429    +     end;
128431    +     /* re-code missing values to "Missing" */
128432    +     if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
128433    +     _index_ = _N_;
128434    +     newgroup = .;
128435    +     drop index index2 ;
128436    +   run;
128438    +   /* add group information to fineDetailData; */
128439    +   /* add label information for binned variables to fineDetailData*/
128441    +   proc sort data=&fineDetailData; by _variable_ _split_value_; run;
128443    +   data tmpsplitvals;
128444    +     set &splitvals;
128445    +     _norm_level_ = upcase(_norm_level_);
128446    +     if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
128447    +    * drop _split_value_;
128448    +   run;
128450    +   proc sort data=tmpsplitvals out=sortedsplit; by _variable_ _split_value_; run;
128451    +   proc datasets library=work nolist;
128452    +     delete tmpsplitvals;
128453    +   run;
128454    +   quit;
128456    +   proc sort data=&BINMAPPINGS out=sortedbin; by BIN_NAME BIN; run;
128458    +   data &fineDetailData;
128459    +      merge &fineDetailData(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
128460    +      by _variable_ _split_value_;
128461    +      if _a then do;
128462    +        binFlag = 1;
128463    +        VALUE=EM_BIN_LABEL;
128464    +      end;
128465    +      else do;
128466    +        binFlag = 0;
128467    +        *VALUE=strip(display_var)!!"="!!strip(_split_value_);
128468    +        VALUE=strip(_split_value_);
128470    +      end;
128472    +      if ((eventCount=.) or (nonEventCount=.)) then do;
128473    +        eventCount=0;
128474    +        nonEventCount=0;
128475    +        total = 0;
128476    +        eventRate= 0;
128477    +        nonEventRate = 0;
128478    +      end;
128480    +      eventCount = round(eventCount, .001);
128481    +      nonEventCount = round(nonEventCount, .001);
128482    +      total= round(total, .001);
128483    +      eventRate = round(eventRate, .001);
128484    +      nonEventRate = round(nonEventRate, .001);
128486    +     if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then
128487    +         numsplitval = _split_value_;
128488    +     else if ((type='N') AND (valfmt ne "")) then
128489    +        numsplitval = _order_;
128490    +     else numsplitval=.;
128492    +      if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
128493    +      if _a and ^_b then delete;
128494    +      if _c and ^_b then delete;
128495    +      drop NAME EM_BIN_LABEL valfmt;
128496    +   run;
128498    +   /* for class variables that have values falling into the "other" category, set _LEVEL_ and _GROUP_ based on Missing level */
128499    +   data &fineDetailData;
128500    +     set &fineDetailData;
128502    +     %let choice = _LEVEL_ ne "INTERVAL" and _SPLIT_VALUE_ eq "Missing";
128503    +     %let dsid = %sysfunc(open(&splitvals(where=(&choice))));
128504    +     %if &dsid %then %do;
128505    +       %let dnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
128506    +       %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
128507    +       %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
128509    +       %let obs = %sysfunc(fetch(&dsid));
128510    +       %do %while(&obs=0);
128511    +         %let dispvar = %sysfunc(getvarc(&dsid, &dnum));
128512    +         %let lvl     = %sysfunc(getvarc(&dsid, &lvlnum));
128513    +         %let group   = %sysfunc(getvarn(&dsid, &grpnum));
128515    +         if DISPLAY_VAR = "&dispvar" then do;
128516    +           if _LEVEL_ = "" then _LEVEL_ ="&lvl";
128517    +           if _GROUP_ = . then _GROUP_ = &group;
128518    +         end;
128520    +         %let obs = %sysfunc(fetch(&dsid));
128521    +       %end;
128522    +     %end;
128523    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
128524    +     if _GROUP_ = . then delete;
128525    +    * if binFlag=1 and UB=LB then delete;
128526    +    * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
128527    +   run;
128529    +   proc sort data=&fineDetailData;
128530    +     by DISPLAY_VAR _index_;
128531    +   run;
128533    +   proc datasets lib=work nolist;
128534    +     delete sortedsplit sortedbin
128535    +     ;
128536    +   run;
128537    +   quit;
128538    +%mend EM_FINE_DETAIL;
128540    +%macro EM_CREATE_GROUPING(bindata, fineDetailData, coarse);
128542    +   proc freq data=&bindata noprint;
128543    +     table %EM_BINARY_TARGET / missing out=temptargetC;
128544    +     %if %EM_FREQ ne %then %do;weight %EM_FREQ;
128545    +     %end;
128546    +   run;
128548    +   %let tdsid = %sysfunc(open(work.temptargetC));
128549    +   %if &tdsid %then %do;
128550    +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
128551    +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
128553    +      %let obs = %sysfunc(fetch(&tdsid));
128554    +      %do %while(&obs = 0);
128555    +        /* %if &target_type eq C or &target_format ne %then %do; */
128556    +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
128557    +           %if &target_type eq C %then %do;
128558    +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
128559    +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
128560    +           %end;
128561    +           %else
128562    +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
128564    +           %if &target_format ne %then %do;
128565    +              %if &target_type eq C %then %do;
128566    +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
128567    +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
128568    +              %end;
128569    +              %else
128570    +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
128571    +           %end;
128572    +           %let tarvalue =%nrbquote(%upcase(&tarvalue));
128573    +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
128575    +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
128576    +           %let target_event = %nrbquote(%sysfunc(strip(&target_event)));
128577    +           %let target_nonevent = %nrbquote(%sysfunc(strip(&target_nonevent)));
128579    +           %if "&tarvalue" eq "&target_event" %then %do;
128580    +             %let totalevent = &count;
128581    +           %end;
128582    +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
128583    +              %let totalnonevent= &count;
128584    +           %end;
128585    +         %end;
128586    +         %else %do;
128587    +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
128588    +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
128590    +           %if &tarvalue eq &target_event %then %do;
128591    +             %let totalevent = &count;
128592    +           %end;
128593    +           %else %if &tarvalue eq &target_nonevent %then %do;
128594    +              %let totalnonevent= &count;
128595    +           %end;
128596    +         %end;
128597    +         %let obs = %sysfunc(fetch(&tdsid));
128598    +      %end;
128599    +   %end;
128600    +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
128602    +   proc datasets lib=work nolist;
128603    +      delete temptargetC;
128604    +   run;
128605    +   quit;
128607    +   proc means data=&FINEDETAILDATA noprint;
128608    +      var eventCount nonEventCount;
128609    +      class _variable_  _group_;
128610    +      output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
128611    +   run;
128613    +   proc sort data=summ(drop=_type_ _freq_);
128614    +     by _variable_ _group_;
128615    +   run;
128617    +   data gini(keep=_variable_ eventCount nonEventCount groupresprate)
128618    +        tempcoarse(keep=_variable_  _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
128619    +        set summ;
128620    +        format groupresprate 6.2;
128621    +        format groupnonresprate 6.2;
128622    +        by _variable_ ;
128623    +        if _group_=. then do;
128624    +        end;
128625    +        else do;
128626    +           respper = eventCount / &totalEvent;
128627    +           nrespper = nonEventCount / &totalNonEvent;
128629    +           if ((nonEventCount = 0) AND (eventCount = 0)) then do;
128630    +                groupresprate=0;
128631    +                groupNonresprate = 0;
128632    +                eventRate = 0;
128633    +                nonEventRate = 0;
128634    +           end;
128635    +           else do;
128636    +               groupresprate = eventCount / (eventCount + nonEventCount) * 100;
128637    +               groupNonRespRate = 100 - groupRespRate;
128638    +               eventRate = eventCount / &totalEvent * 100;
128639    +               nonEventRate = nonEventCount / &totalNonEvent * 100;
128640    +            end;
128642    +           output gini tempcoarse;
128644    +        end;
128645    +   run;
128646    +   proc sort data=gini;
128647    +      by _variable_ descending groupresprate;
128648    +   run;
128650    +   data gini(keep= _variable_ _gini_);
128651    +     retain between within cumresp cumnresp;
128652    +     set gini(keep=_variable_  eventCount nonEventCount);
128653    +     by _variable_;
128654    +     if first._variable_ then do;
128655    +       between  = 0;
128656    +       within   = 0;
128657    +       cumresp  = 0;
128658    +       cumnresp = 0;
128659    +     end;
128660    +     between + 2 * cumnresp * eventCount;
128661    +     within + nonEventCount * eventCount;
128662    +     cumresp + eventCount;
128663    +     cumnresp + nonEventCount;
128664    +     if last._variable_ then do;
128665    +       if ^(cumnresp=0 or cumresp=0) then do;
128666    +         _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
128667    +         output;
128668    +       end;
128669    +     end;
128670    +   run;
128672    +   data tempdisplayvar;
128673    +      set &EM_USER_VARMAPPINGS;
128674    +      rename _variable_ = display_var
128675    +      _proc_var_ = _variable_;
128676    +   keep _variable_ _proc_var_ label;
128677    +   run;
128678    +   proc sort data=tempdisplayvar; by _variable_; run;
128680    +   data  &COARSE;
128681    +     length display_Var $32 label _label_ $200 role $10 _group_ 8;
128682    +     merge tempdisplayvar tempcoarse gini ;
128683    +     by _variable_;
128684    +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
128685    +           eventRate   = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventrate_vlabel , NOQUOTE))"
128686    +           nonEventRate = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventrate_vlabel , NOQUOTE))"
128687    +           _group_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel , NOQUOTE))"
128688    +           role       = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel , NOQUOTE))"
128689    +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_gini_vlabel  , NOQUOTE))"
128690    +           eventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventcount_vlabel  , NOQUOTE))"
128691    +           noneventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventcount_vlabel  , NOQUOTE))"
128692    +           groupresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupresprate_vlabel  , NOQUOTE))"
128693    +           groupnonresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupnonresprate_vlabel  , NOQUOTE))"
128694    +           ;
128696    +    eventCount = round(eventCount, .001);
128697    +    nonEventCount = round(nonEventCount, .001);
128698    +    groupRespRate = round(groupRespRate, .001);
128700    +     drop _variable_ index index2 respper nrespper;
128701    +   run;
128703    +   proc datasets library=work nolist;
128704    +     delete  tempcoarse gini             ;
128706    +   run;
128707    +   quit;
128709    +%mend EM_CREATE_GROUPING;
128713    +%macro EM_GENERATE_LABELVALUES(filename, splitvals, binmappings, coarse);
128715    +         data _null_;
128716    +            FILE &filename;
128717    +            put " length _LABEL_ $200;";
128718    +            put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
128719    +         run;
128721    +         proc sort data=&SPLITVALS out=work.sortedsplitval; by display_var _split_Value_; run;
128722    +         proc sort data=&BINMAPPINGS; by display_var bin; run;
128724    +         data temp;
128725    +           merge work.sortedsplitval(in=_a) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
128726    +           by Display_Var _Split_value_;
128727    +           if upcase(_Split_value_) ne 'MISSING';
128728    +           if _a then output;
128729    +           if display_var eq '' then delete;
128730    +         run;
128732    +         data temp_missing;
128733    +           merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
128734    +           by Display_Var _Split_value_;
128735    +           if upcase(_Split_value_) eq 'MISSING';
128736    +           if _a then output;
128737    +           keep _variable_ display_var missgrp;
128738    +         run;
128740    +         proc sort data=temp out=class;
128741    +            by _variable_ _group_ LB;
128742    +         run;
128744    +         data _null_;
128746    +            file &filename MOD;
128747    +            length string $200 flag 8;
128748    +            retain string flag;
128749    +            set class end=eof;
128750    +            by _variable_  _group_;
128752    +            index = kindex(_variable_, "BIN_");
128753    +            if index gt 0 then do;
128754    +              if first._group_ then do;
128755    +                flag = 0;
128756    +                if ^first._variable_ then
128757    +                    put 'else';
128758    +                 else
128759    +                    put ' ';
128761    +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
128762    +                          !!strip(put(_GROUP_,best12.))!!' then do;';
128763    +                 put string;
128765    +                 if LB ne . then do;
128766    +                   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
128767    +                    string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
128768    +                 end;
128769    +                 else do;
128770    +                    flag = 1;
128771    +                    *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
128772    +                    string = " _LABEL_='"!!strip(DISPLAY_VAR);
128773    +                 end;
128775    +              end;
128776    +              if last._Group_ then do;
128777    +                 if UB ne . then do;
128778    +                    string = strip(string)!!'< '!!strip(UB)!!"';";
128779    +                 end;
128780    +                 else do;
128781    +                    if flag=1 then do;
128782    +                      string = strip(string)!!"';";
128783    +                     /* string = strip(string)!!'='!!strip(_split_Value_)!!"';";*/
128784    +                    end;
128785    +                    else do;
128786    +                      string = strip(string)!!"';";
128787    +                    end;
128788    +                 end;
128789    +                 put string;
128791    +                 string= " UB="!!strip(UB)!!";";
128792    +                 put string;
128793    +                 put "end;";
128796    +              end;
128797    +            end;
128798    +            else do;
128799    +              _split_value_ = tranwrd(_split_value_,"'","''");
128800    +              if first._group_ then do;
128801    +                 flag = 0;
128802    +                 if ^first._variable_ then
128803    +                    put 'else';
128804    +                 else
128805    +                    put ' ';
128806    +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
128807    +                          !!strip(put(_GROUP_,best12.))!!' then';
128808    +                 put string;
128809    +                 string = "_LABEL_='"!!strip(_split_value_);
128810    +              end;
128811    +              else do;
128812    +                 if flag ne 1 then do;
128813    +                   tempstring = strip(string)!!', '!!strip(_split_value_);
128814    +                   length = length(tempstring);
128816    +                   if length < 195 then do;
128817    +                      string = tempstring;
128818    +                   end;
128819    +                   else do;
128820    +                      string = strip(string)||",...";
128821    +                      flag=1;
128822    +                   end;
128823    +                 end;
128824    +              end;
128826    +              if last._group_ then do;
128827    +                 string = strip(string)!!"';";
128828    +                 put string;
128829    +              end;
128830    +            end;
128831    +         run;
128833    +         data &COARSE;
128834    +           set &COARSE;
128835    +          /* %inc Y; */
128836    +           %inc &filename;
128837    +         run;
128838    +         *filename Y;
128840    +         /* add missing to appropriate label - based on temp_missing data */
128841    +         data &COARSE;
128842    +           set &COARSE;
128844    +           %let dsid = %sysfunc(open(work.temp_missing));
128845    +           %if &dsid %then %do;
128846    +              %let varnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
128847    +              %let grpnum = %sysfunc(VARNUM(&dsid, MISSGRP));
128849    +              %let obs = %sysfunc(fetch(&dsid));
128850    +              %do %while(&obs=0);
128851    +                 %let var = %sysfunc(getvarc(&dsid, &varnum));
128852    +                 %let grp = %sysfunc(getvarn(&dsid, &grpnum));
128854    +                 if DISPLAY_VAR = "&var" and _GROUP_ = &grp then do;
128855    +                   if _LABEL_ eq '' then do;
128856    +                     _LABEL_ = "Missing";
128857    +                   end;
128858    +                   else do;
128859    +                     _LABEL_ = strip(_LABEL_)!!", Missing";
128860    +                   end;
128861    +                 end;
128862    +                 %let obs = %sysfunc(fetch(&dsid));
128863    +              %end;
128864    +           %end;
128865    +           %if &dsid %then %let dsid = %sysfunc(close(&dsid));
128866    +         run;
128868    +         proc datasets library=work nolist;
128869    +           delete class temp temp_missing;
128870    +         run;
128871    +         quit;
128873    +%mend EM_GENERATE_LABELVALUES;
128875    +%macro calcValidationCoarse(input, output, varmappings, resultsTable);
128878    +%mend calcValidationCoarse;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename trtemp;
NOTE: Fileref TRTEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data temp;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where NAME =
MPRINT(TRAIN):  "DepVar";
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE NAME='DepVar';
NOTE: The data set WORK.TEMP has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc dmdb data=EMWS8.Part_TRAIN classout=EVENTOUT;
MPRINT(TRAIN):   target
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  (DESC);
MPRINT(TRAIN):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.EVENTOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   dsid = open("EVENTOUT");
MPRINT(TRAIN):   if dsid>0 then do;
MPRINT(TRAIN):   levelnum = VARNUM(dsid, "LEVEL");
MPRINT(TRAIN):   if levelnum then do;
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_EVENT', strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   dsid=close(dsid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete eventout;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK.EVENTOUT (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_FINEDETAILDATA;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_FINEDETAILDATA (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

MPRINT(TRAIN):   data tempvarnames;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
MPRINT(TRAIN):   keep NAME LEVEL LABEL;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK.TEMPVARNAMES has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
MPRINT(TRAIN):   names NAME;
MPRINT(TRAIN):   prefix WOE_ GRP_ ;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 3 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempmapping;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempvarnames;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPVARNAMES has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data tempmapping;
MPRINT(TRAIN):   merge tempmapping tempvarnames;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   rename LEVEL=procLevel;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_MAPPING_TABLE):  ;
MPRINT(EM_GENERATE_MAPPING_TABLE):   data EMWS8.BINNING_VARMAPPINGS(keep=_variable_ _grp_variable_ procLevel label);
MPRINT(EM_GENERATE_MAPPING_TABLE):   length _variable_ _grp_variable_ $32 procLevel $8;
MPRINT(EM_GENERATE_MAPPING_TABLE):   set tempmapping;
MPRINT(EM_GENERATE_MAPPING_TABLE):   label _variable_ = "Input Variable" _grp_variable_ = "Group Variable";
MPRINT(EM_GENERATE_MAPPING_TABLE):   _variable_ = NAME;
MPRINT(EM_GENERATE_MAPPING_TABLE):   _grp_variable_ = GRP;
MPRINT(EM_GENERATE_MAPPING_TABLE):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete tempImport tempScore;
MPRINT(TRAIN):   run;

NOTE: The file WORK.TEMPIMPORT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSCORE (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_SPLITVALS;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_SPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_PRE_BINNING):   data tempvariableset;
MPRINT(EM_PRE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_PRE_BINNING):   where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 23 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 23 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc dmdb data=EMWS8.Part_TRAIN classout=_CLASSOUT maxlevel=5;
MPRINT(EM_PRE_BINNING):   class AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome;
MPRINT(EM_PRE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK._CLASSOUT has 111 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   proc freq data=_CLASSOUT order=DATA noprint;
MPRINT(EM_PRE_BINNING):   table NAME / OUT= _COUNT(where=(COUNT<5));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   set _COUNT;
MPRINT(EM_PRE_BINNING):   call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc sort data=_CLASSOUT;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 111 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(EM_PRE_BINNING):   var NRAW;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._OUT has 23 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   dsid = open('_OUT');
MPRINT(EM_PRE_BINNING):   if dsid then do;
MPRINT(EM_PRE_BINNING):   call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(EM_PRE_BINNING):   csid = close(dsid);
MPRINT(EM_PRE_BINNING):   end;
MPRINT(EM_PRE_BINNING):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _INTMID;
MPRINT(EM_PRE_BINNING):   set _OUT;
MPRINT(EM_PRE_BINNING):   keep VARIABLE _MIDPOINT1--_MIDPOINT5 ;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK._OUT.
NOTE: The data set WORK._INTMID has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   label procLevel = "Level for Interactive";
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename temp catalog 'sashelp.emapps.quantile_binning.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMAPPS.QUANTILE_BINNING.SOURCE.
128883    +%macro em_apps_quantile_binning(input, vartable, numbins, binmappings, binningCode, codeMappings=, precision=0.01, dropOriginal=N);
128885    +  /* initialize binmappings table */
128886    +  data &BINMAPPINGS;
128887    +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
128888    +  run;
128890    +  /* process only INTERVAL INPUTS */
128891    +  data tempvars;
128892    +    set &vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
128893    +  run;
128895    +  /* retrieve the name of interval inputs to bin */
128896    +  filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
128897    +  %include tempopen;
128898    +  filename tempopen;
128900    +  %let intvars = ;
128901    +  %global num_intvars;
128902    +  %let num_intvars = 0;
128903    +  %em_varmacro(name=intvars, metadata=tempvars, key=NAME, nummacro=num_intvars);
128905    +  /* retrieve the name of frequency variable if it exists */
128906    +  %let em_bin_freq = ;
128907    +  %let choice = ROLE="FREQ";
128908    +  %let fdsid = %sysfunc(open(&vartable(where=(&choice))));
128909    +  %if &fdsid %then %do;
128910    +    %let fvarnum = %sysfunc(VARNUM(&fdsid, NAME));
128911    +    %let fobs = %sysfunc(fetch(&fdsid));
128912    +    %do %while(&fobs=0);
128913    +       %let em_bin_freq = %sysfunc(getvarc(&fdsid, &fvarnum));
128914    +       %let fobs = %sysfunc(fetch(&fdsid));
128915    +    %end;
128916    +  %end;
128917    +  %if &fdsid >0 %then %let fdsid = %sysfunc(close(&fdsid));
128919    +  /* process all inputs */
128920    +  %if &num_intvars > 0 %then %do;
128922    +    /* Computing quantile binning of interval inputs */
128923    +    %let numbin = %eval(&NUMBINS - 1);
128924    +    %let optstr=;
128925    +    %do i=1 %to &numbin;
128926    +       %let optstr = &optstr %eval(&i*100/&&NUMBINS);
128927    +    %end;
128929    +    data tempInt / view = tempInt;
128930    +      set &input(keep= %intvars
128931    +      %if &em_bin_freq ne %then %do;
128932    +        &em_bin_freq
128933    +      %end;
128934    +      );
128935    +    run;
128937    +    proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=&optstr;
128938    +       var %intvars;
128939    +       %if &em_bin_freq ne %then %do;
128940    +          freq &em_bin_freq;
128941    +       %end;
128942    +    run;
128944    +    proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
128945    +    run;
128947    +    /* generate unique BIN_xxx names for all inputs processed */
128948    +    proc dmdb data=tempvars outtable=tempmapping nameserver;
128949    +     names NAME;
128950    +     prefix BIN_ ;
128951    +    run;
128953    +    proc sort data=tempmapping(keep=NAME bin); by NAME; run;
128954    +    proc sort data=work.pctdata; by _NAME_; run;
128955    +    %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
128956    +      proc sort data=&codemappings nodupkey out=tempcodemappings(keep= codeVar variable) ; by codeVar; run;
128957    +    %end;
128959    +    data tempbins;
128960    +      length display_var $32;
128961    +      merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar))
128962    +      %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
128963    +         tempcodemappings(rename=(codeVar=_name_ variable=display_var))
128964    +      %end;
128965    +      ;
128966    +      by _NAME_;
128967    +      if _a;
128968    +      if missing(display_var) then display_var = _NAME_;
128969    +    run;
128971    +    /* generate BINMAPPINGS dataset and binningCode file*/
128972    +    data _null_;
128973    +      FILE &binningCode;
128974    +      set tempbins end=eof;
128975    +      length string $200;
128976    +      by _NAME_;
128978    +      if _n_=1 then do;
128979    +        put "&EM_CODEBAR;";
128980    +        %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
128981    +        put "* &note;";
128982    +        put "&EM_CODEBAR;";
128984    +        call execute(" data &BINMAPPINGS; ");
128985    +        call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
128986    +      end;
128988    +      %do i=1 %to %eval(&numbins-1);
128989    +       %if &i eq 1 %then %do;
128990    +         %let colname = COL&i;
128991    +         %let binvalnum = 1;
128992    +         LB = .;
128993    +         UB = round(&colname, &precision);
128994    +         bin=&binvalnum;
128996    +         call execute("name='"||strip(_NAME_)||"'; ");
128997    +         call execute("bin_name='"||strip(binVar)||"'; ");
128998    +         call execute("bin='"||strip(bin)||"';");
128999    +         call execute("LB=.;");
129000    +         call execute("UB="||UB||";");
129001    +         call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
129002    +         call execute("output;");
129004    +         string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
129006    +         put string;
129007    +         string = "else do;";
129008    +         put string;
129010    +         string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
129011    +         put string;
129014    +       %end;
129015    +       %else %do;
129016    +         %let colname = COL&i;
129017    +         %let lbnum = %sysevalf(&i-1);
129018    +         %let lbcol = COL&lbnum;
129019    +         UB = round(&colname, &precision);
129020    +         LB = round(&lbcol, &precision);
129021    +         if UB ne LB then do;
129022    +           bin=bin+1;
129024    +           call execute("name='"||strip(_NAME_)||"'; ");
129025    +           call execute("bin_name='"||strip(binVar)||"'; ");
129026    +           call execute("bin='"||strip(bin)||"';");
129027    +           call execute("LB="||LB||";");
129028    +           call execute("UB="||UB||";");
129029    +           call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
129030    +           call execute("output;");
129032    +           string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
129033    +           put string;
129035    +         end;
129036    +       %end;
129037    +      %end;
129038    +      %let binvalnum = %sysevalf(&binvalnum + 1);
129039    +      bin=bin+1;
129040    +      LB = round(&colname, &precision);
129041    +      UB = .;
129043    +      call execute("name='"||strip(_NAME_)||"'; ");
129044    +      call execute("bin_name = '"||strip(binVar)||"'; ");
129045    +      call execute("bin='"||strip(bin)||"';");
129046    +      call execute("UB=.;");
129047    +      call execute("LB="||LB||";");
129048    +      call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
129049    +      call execute("output;");
129051    +      string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
129052    +      put string;
129053    +      string="end;";
129054    +      put string;
129056    +      if eof then do;
129057    +        call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
129058    +        call execute("  if LB=UB then delete;");
129059    +        call execute("run;");
129060    +      end;
129062    +    run;
129064    +    /* drop original inputs */
129065    +    %if &dropOriginal=Y %then %do;
129066    +      data _null_;
129067    +        set work.tempvars end=eof;
129068    +        FILE &binningCode MOD;
129069    +        length string $200;
129071    +        if _n_=1 then do;
129072    +          put "drop";
129073    +        end;
129074    +        string = " "||strip(name);
129075    +        put string;
129077    +        if eof then do;
129078    +          put ";";
129079    +        end;
129080    +      run;
129081    +    %end;
129083    +    proc datasets library=work nolist;
129084    +      delete pctdata tempmapping tempbins tempInt;
129085    +    run;
129086    +    quit;
129087    +  %end;
129089    +  proc datasets library=work nolist;
129090    +    delete tempvars;
129091    +  run;
129092    +  quit;
129094    +%mend em_apps_quantile_binning;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data work.vartable;
MPRINT(EM_QUANTILE_BINNING):   set work._intmid;
MPRINT(EM_QUANTILE_BINNING):   level = "INTERVAL";
MPRINT(EM_QUANTILE_BINNING):   role = "INPUT";
MPRINT(EM_QUANTILE_BINNING):   rename variable=name;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK._INTMID.
NOTE: The data set WORK.VARTABLE has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Variable NAME is uninitialized.
NOTE: Variable BIN_NAME is uninitialized.
NOTE: Variable LB is uninitialized.
NOTE: Variable UB is uninitialized.
NOTE: Variable BIN is uninitialized.
NOTE: Variable EM_BIN_LABEL is uninitialized.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.VARTABLE.
      WHERE (ROLE='INPUT') and (LEVEL='INTERVAL');
NOTE: The data set WORK.TEMPVARS has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file TEMPOPEN is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
129098    +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
129099    +   filename macFile catalog 'work.emutil.macro.source';
129100    +   %let _METAOBS = 0;
129102    +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
129103    +                   or (&metadata eq ) %then %do;
129104    +       %goto doend;
129105    +   %end;
129106    +   data _null_;
129107    +      length _STRING_ $80;
129108    +      retain _STRING_;
129109    +      set &metadata end=eof;
129110    +      file macFile;
129111    +      %if %nrbquote(&where) ne %then %do;
129112    +          %let whereClause = where (%nrbquote(&where));
129113    +          %unquote(&whereClause);
129114    +      %end;
129115    +      if _N_=1 then do;
129116    +         string = "%"!!"macro &name;";
129117    +         put string;
129118    +      end;
129119    +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
129120    +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
129121    +         if eof then do;
129122    +            put _STRING_;
129123    +            string = "%"!!"mend &name;";
129124    +            put string;
129125    +            %if (&nummacro ne ) %then %do;
129126    +                string = strip(put(_N_, best.));
129127    +                put "%" "global &nummacro;";
129128    +                put "%" "let &nummacro = " string ";";
129129    +                call symput('_METAOBS', string);
129130    +            %end;
129131    +         end;
129132    +      end;
129133    +      else do;
129134    +         put _STRING_;
129135    +         _string_ = TRIM(&key);
129136    +         if eof then do;
129137    +            put _STRING_;
129138    +            string = "%"!!"mend &name;";
129139    +            put string;
129140    +        end;
129141    +      end;
129142    +      if eof then do;
129143    +         string = strip(put(_N_, best.));
129144    +         call symput('_METAOBS', string);
129145    +         %if (&nummacro ne ) %then %do;
129146    +             put "%" "global &nummacro;";
129147    +             put "%" "let &nummacro = " string ";";
129148    +         %end;
129149    +      end;
129150    +   run;
129152    +   %doend:
129153    +   %if ^&_METAOBS %then %do;
129154    +       data _null_;
129155    +          file macFile;
129156    +          put "%" "macro &name;";
129157    +          put "%" "mend &name;";
129158    +          %if (&nummacro ne ) %then %do;
129159    +              put "%" "global &nummacro;";
129160    +              put "%" "let &nummacro = 0;";
129161    +          %end;
129162    +      run;
129163    +   %end;
129164    +   %inc macFile;
129165    +   filename macFile;
129166    +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen;
NOTE: Fileref TEMPOPEN has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempvars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Donnerstag, 21. April 2016 18.27 Uhr,
      Last Modified=Donnerstag, 21. April 2016 18.27 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD9008_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 14.
      The maximum record length was 72.
NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
129167    +%macro intvars;
129168    +AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
129169    +MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
129170    +NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
129171    +NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
129172    +%mend intvars;
129173    +%global num_intvars;
129174    +%let num_intvars = 23 ;
129175    +%global num_intvars;
129176    +%let num_intvars = 23 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempInt / view = tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   set EMWS8.Part_TRAIN(keep
MPRINT(EM_APPS_QUANTILE_BINNING):  = AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome );
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: DATA STEP view saved on file WORK.TEMPINT.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=25 50 75;
MPRINT(EM_APPS_QUANTILE_BINNING):   var
MPRINT(INTVARS):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases 
NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: View WORK.TEMPINT.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.12 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.TEMPINT.
NOTE: The data set WORK.PCTDATA has 11 observations and 24 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.22 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 3 observations read from the data set WORK.PCTDATA.
      WHERE _type_=:'P';
NOTE: The data set WORK.PCTDATA has 23 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc dmdb data=tempvars outtable=tempmapping nameserver;
MPRINT(EM_APPS_QUANTILE_BINNING):   names NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   prefix BIN_ ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: The data set WORK.TEMPMAPPING has 23 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=tempmapping(keep=NAME bin);
MPRINT(EM_APPS_QUANTILE_BINNING):   by NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.PCTDATA.
NOTE: The data set WORK.PCTDATA has 23 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempbins;
MPRINT(EM_APPS_QUANTILE_BINNING):   length display_var $32;
MPRINT(EM_APPS_QUANTILE_BINNING):   merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar)) ;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _a;
MPRINT(EM_APPS_QUANTILE_BINNING):   if missing(display_var) then display_var = _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: There were 23 observations read from the data set WORK.PCTDATA.
NOTE: There were 23 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPBINS has 23 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X;
MPRINT(EM_APPS_QUANTILE_BINNING):   set tempbins end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "* Generating Bins for interval variables;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute(" data EMWS8.BINNING_BINMAPPINGS; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "else do;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name = '"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string="end;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if LB=UB then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("run;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      298:29   308:21   313:65   350:46   350:87   391:29   396:21   401:21   406:38   406:84   419:51   419:92   468:29   473:21   478:21   483:38   483:84   496:51   496:92   540:29   550:21   555:66   568:52   568:93   
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=21. April 2016 18.28 Uhr,
      Create Time=03. April 2016 17.12 Uhr

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal >= 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age < 38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='38 <= Age < 46';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='46 <= Age < 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age >= 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= Frq < 12';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='12 <= Frq < 18';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq >= 18';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35268;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income < 35268';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35268;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='35268 <= Income < 52157';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 69486;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='52157 <= Income < 69486';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 69486;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income >= 69486';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Kidhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt < 72';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72 <= Mnt < 405.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1064;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='405.5 <= Mnt < 1064';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1064;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt >= 1064';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= MntFishProducts < 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 47;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='13 <= MntFishProducts < 47';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 47;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts >= 47';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= MntFruits < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntFruits < 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits >= 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntGoldProds < 25';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='25 <= MntGoldProds < 59';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds >= 59';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts < 17';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='17 <= MntMeatProducts < 72';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 246;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72 <= MntMeatProducts < 246';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 246;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts >= 246';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= MntSweetProducts < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntSweetProducts < 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts >= 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines < 24';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='24 <= MntWines < 183.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 508;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='183.5 <= MntWines < 508';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 508;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines >= 508';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 69;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer < 69';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 69;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 83;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='69 <= MonthsAsCustomer < 83';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 83;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 98;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='83 <= MonthsAsCustomer < 98';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 98;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer >= 98';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= NumCatalogPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases >= 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases >= 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumDistPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 10;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumDistPurchases < 10';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 10;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases >= 10';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumStorePurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumStorePurchases < 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases >= 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumWebPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= NumWebPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases >= 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumWebVisitsMonth < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth >= 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 10.34;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat < 10.34';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 10.34;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='10.34 <= RFMstat < 128.09';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 455.22;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='128.09 <= RFMstat < 455.22';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 455.22;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat >= 455.22';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13.25;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq < 13.25';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13.25;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='13.25 <= RMntFrq < 30.4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52.86;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='30.4 <= RMntFrq < 52.86';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52.86;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq >= 52.86';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency < 24';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='24 <= Recency < 48';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='48 <= Recency < 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency >= 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Teenhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   if NAME='' and BIN_NAME='' and BIN='' then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   if LB=UB then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
NOTE: 160 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 64.
NOTE: There were 23 observations read from the data set WORK.TEMPBINS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1         +  data EMWS8.BINNING_BINMAPPINGS;
2         +    length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):  32 LB UB EM_BIN_LABEL BIN200
3         + name='AcceptedCmpTotal';
4         + bin_name='BIN_AcceptedCmpTotal';
5         + bin='1';
6         + LB=.;
7         + UB=           0;
8         + EM_BIN_LABEL='AcceptedCmpTotal < 0';
9         + output;
10        + name='AcceptedCmpTotal';
11        + bin_name = 'BIN_AcceptedCmpTotal';
12        + bin='2';
13        + UB=.;
14        + LB=           0;
15        + EM_BIN_LABEL='AcceptedCmpTotal >= 0';
16        + output;
17        + name='Age';
18        + bin_name='BIN_Age';
19        + bin='1';
20        + LB=.;
21        + UB=          38;
22        + EM_BIN_LABEL='Age < 38';
23        + output;
24        + name='Age';
25        + bin_name='BIN_Age';
26        + bin='2';
27        + LB=          38;
28        + UB=          46;
29        + EM_BIN_LABEL='38 <= Age < 46';
30        + output;
31        + name='Age';
32        + bin_name='BIN_Age';
33        + bin='3';
34        + LB=          46;
35        + UB=          57;
36        + EM_BIN_LABEL='46 <= Age < 57';
37        + output;
38        + name='Age';
39        + bin_name = 'BIN_Age';
40        + bin='4';
41        + UB=.;
42        + LB=          57;
43        + EM_BIN_LABEL='Age >= 57';
44        + output;
45        + name='Frq';
46        + bin_name='BIN_Frq';
47        + bin='1';
48        + LB=.;
49        + UB=           6;
50        + EM_BIN_LABEL='Frq < 6';
51        + output;
52        + name='Frq';
53        + bin_name='BIN_Frq';
54        + bin='2';
55        + LB=           6;
56        + UB=          12;
57        + EM_BIN_LABEL='6 <= Frq < 12';
58        + output;
59        + name='Frq';
60        + bin_name='BIN_Frq';
61        + bin='3';
62        + LB=          12;
63        + UB=          18;
64        + EM_BIN_LABEL='12 <= Frq < 18';
65        + output;
66        + name='Frq';
67        + bin_name = 'BIN_Frq';
68        + bin='4';
69        + UB=.;
70        + LB=          18;
71        + EM_BIN_LABEL='Frq >= 18';
72        + output;
73        + name='Income';
74        + bin_name='BIN_Income';
75        + bin='1';
76        + LB=.;
77        + UB=       35268;
78        + EM_BIN_LABEL='Income < 35268';
79        + output;
80        + name='Income';
81        + bin_name='BIN_Income';
82        + bin='2';
83        + LB=       35268;
84        + UB=       52157;
85        + EM_BIN_LABEL='35268 <= Income < 52157';
86        + output;
87        + name='Income';
88        + bin_name='BIN_Income';
89        + bin='3';
90        + LB=       52157;
91        + UB=       69486;
92        + EM_BIN_LABEL='52157 <= Income < 69486';
93        + output;
94        + name='Income';
95        + bin_name = 'BIN_Income';
96        + bin='4';
97        + UB=.;
98        + LB=       69486;
99        + EM_BIN_LABEL='Income >= 69486';
100       + output;
101       + name='Kidhome';
102       + bin_name='BIN_Kidhome';
103       + bin='1';
104       + LB=.;
105       + UB=           0;
106       + EM_BIN_LABEL='Kidhome < 0';
107       + output;
108       + name='Kidhome';
109       + bin_name='BIN_Kidhome';
110       + bin='2';
111       + LB=           0;
112       + UB=           1;
113       + EM_BIN_LABEL='0 <= Kidhome < 1';
114       + output;
115       + name='Kidhome';
116       + bin_name = 'BIN_Kidhome';
117       + bin='3';
118       + UB=.;
119       + LB=           1;
120       + EM_BIN_LABEL='Kidhome >= 1';
121       + output;
122       + name='Mnt';
123       + bin_name='BIN_Mnt';
124       + bin='1';
125       + LB=.;
126       + UB=          72;
127       + EM_BIN_LABEL='Mnt < 72';
128       + output;
129       + name='Mnt';
130       + bin_name='BIN_Mnt';
131       + bin='2';
132       + LB=          72;
133       + UB=       405.5;
134       + EM_BIN_LABEL='72 <= Mnt < 405.5';
135       + output;
136       + name='Mnt';
137       + bin_name='BIN_Mnt';
138       + bin='3';
139       + LB=       405.5;
140       + UB=        1064;
141       + EM_BIN_LABEL='405.5 <= Mnt < 1064';
142       + output;
143       + name='Mnt';
144       + bin_name = 'BIN_Mnt';
145       + bin='4';
146       + UB=.;
147       + LB=        1064;
148       + EM_BIN_LABEL='Mnt >= 1064';
149       + output;
150       + name='MntFishProducts';
151       + bin_name='BIN_MntFishProducts';
152       + bin='1';
153       + LB=.;
154       + UB=           3;
155       + EM_BIN_LABEL='MntFishProducts < 3';
156       + output;
157       + name='MntFishProducts';
158       + bin_name='BIN_MntFishProducts';
159       + bin='2';
160       + LB=           3;
161       + UB=          13;
162       + EM_BIN_LABEL='3 <= MntFishProducts < 13';
163       + output;
164       + name='MntFishProducts';
165       + bin_name='BIN_MntFishProducts';
166       + bin='3';
167       + LB=          13;
168       + UB=          47;
169       + EM_BIN_LABEL='13 <= MntFishProducts < 47';
170       + output;
171       + name='MntFishProducts';
172       + bin_name = 'BIN_MntFishProducts';
173       + bin='4';
174       + UB=.;
175       + LB=          47;
176       + EM_BIN_LABEL='MntFishProducts >= 47';
177       + output;
178       + name='MntFruits';
179       + bin_name='BIN_MntFruits';
180       + bin='1';
181       + LB=.;
182       + UB=           2;
183       + EM_BIN_LABEL='MntFruits < 2';
184       + output;
185       + name='MntFruits';
186       + bin_name='BIN_MntFruits';
187       + bin='2';
188       + LB=           2;
189       + UB=           9;
190       + EM_BIN_LABEL='2 <= MntFruits < 9';
191       + output;
192       + name='MntFruits';
193       + bin_name='BIN_MntFruits';
194       + bin='3';
195       + LB=           9;
196       + UB=          35;
197       + EM_BIN_LABEL='9 <= MntFruits < 35';
198       + output;
199       + name='MntFruits';
200       + bin_name = 'BIN_MntFruits';
201       + bin='4';
202       + UB=.;
203       + LB=          35;
204       + EM_BIN_LABEL='MntFruits >= 35';
205       + output;
206       + name='MntGoldProds';
207       + bin_name='BIN_MntGoldProds';
208       + bin='1';
209       + LB=.;
210       + UB=           9;
211       + EM_BIN_LABEL='MntGoldProds < 9';
212       + output;
213       + name='MntGoldProds';
214       + bin_name='BIN_MntGoldProds';
215       + bin='2';
216       + LB=           9;
217       + UB=          25;
218       + EM_BIN_LABEL='9 <= MntGoldProds < 25';
219       + output;
220       + name='MntGoldProds';
221       + bin_name='BIN_MntGoldProds';
222       + bin='3';
223       + LB=          25;
224       + UB=          59;
225       + EM_BIN_LABEL='25 <= MntGoldProds < 59';
226       + output;
227       + name='MntGoldProds';
228       + bin_name = 'BIN_MntGoldProds';
229       + bin='4';
230       + UB=.;
231       + LB=          59;
232       + EM_BIN_LABEL='MntGoldProds >= 59';
233       + output;
234       + name='MntMeatProducts';
235       + bin_name='BIN_MntMeatProducts';
236       + bin='1';
237       + LB=.;
238       + UB=          17;
239       + EM_BIN_LABEL='MntMeatProducts < 17';
240       + output;
241       + name='MntMeatProducts';
242       + bin_name='BIN_MntMeatProducts';
243       + bin='2';
244       + LB=          17;
245       + UB=          72;
246       + EM_BIN_LABEL='17 <= MntMeatProducts < 72';
247       + output;
248       + name='MntMeatProducts';
249       + bin_name='BIN_MntMeatProducts';
250       + bin='3';
251       + LB=          72;
252       + UB=         246;
253       + EM_BIN_LABEL='72 <= MntMeatProducts < 246';
254       + output;
255       + name='MntMeatProducts';
256       + bin_name = 'BIN_MntMeatProducts';
257       + bin='4';
258       + UB=.;
259       + LB=         246;
260       + EM_BIN_LABEL='MntMeatProducts >= 246';
261       + output;
262       + name='MntSweetProducts';
263       + bin_name='BIN_MntSweetProducts';
264       + bin='1';
265       + LB=.;
266       + UB=           2;
267       + EM_BIN_LABEL='MntSweetProducts < 2';
268       + output;
269       + name='MntSweetProducts';
270       + bin_name='BIN_MntSweetProducts';
271       + bin='2';
272       + LB=           2;
273       + UB=           9;
274       + EM_BIN_LABEL='2 <= MntSweetProducts < 9';
275       + output;
276       + name='MntSweetProducts';
277       + bin_name='BIN_MntSweetProducts';
278       + bin='3';
279       + LB=           9;
280       + UB=          35;
281       + EM_BIN_LABEL='9 <= MntSweetProducts < 35';
282       + output;
283       + name='MntSweetProducts';
284       + bin_name = 'BIN_MntSweetProducts';
285       + bin='4';
286       + UB=.;
287       + LB=          35;
288       + EM_BIN_LABEL='MntSweetProducts >= 35';
289       + output;
290       + name='MntWines';
291       + bin_name='BIN_MntWines';
292       + bin='1';
293       + LB=.;
294       + UB=          24;
295       + EM_BIN_LABEL='MntWines < 24';
296       + output;
297       + name='MntWines';
298       + bin_name='BIN_MntWines';
299       + bin='2';
300       + LB=          24;
301       + UB=       183.5;
302       + EM_BIN_LABEL='24 <= MntWines < 183.5';
303       + output;
304       + name='MntWines';
305       + bin_name='BIN_MntWines';
306       + bin='3';
307       + LB=       183.5;
308       + UB=         508;
309       + EM_BIN_LABEL='183.5 <= MntWines < 508';
310       + output;
311       + name='MntWines';
312       + bin_name = 'BIN_MntWines';
313       + bin='4';
314       + UB=.;
315       + LB=         508;
316       + EM_BIN_LABEL='MntWines >= 508';
317       + output;
318       + name='MonthsAsCustomer';
319       + bin_name='BIN_MonthsAsCustomer';
320       + bin='1';
321       + LB=.;
322       + UB=          69;
323       + EM_BIN_LABEL='MonthsAsCustomer < 69';
324       + output;
325       + name='MonthsAsCustomer';
326       + bin_name='BIN_MonthsAsCustomer';
327       + bin='2';
328       + LB=          69;
329       + UB=          83;
330       + EM_BIN_LABEL='69 <= MonthsAsCustomer < 83';
331       + output;
332       + name='MonthsAsCustomer';
333       + bin_name='BIN_MonthsAsCustomer';
334       + bin='3';
335       + LB=          83;
336       + UB=          98;
337       + EM_BIN_LABEL='83 <= MonthsAsCustomer < 98';
338       + output;
339       + name='MonthsAsCustomer';
340       + bin_name = 'BIN_MonthsAsCustomer';
341       + bin='4';
342       + UB=.;
343       + LB=          98;
344       + EM_BIN_LABEL='MonthsAsCustomer >= 98';
345       + output;
346       + name='NumCatalogPurchases';
347       + bin_name='BIN_NumCatalogPurchases';
348       + bin='1';
349       + LB=.;
350       + UB=           0;
351       + EM_BIN_LABEL='NumCatalogPurchases < 0';
352       + output;
353       + name='NumCatalogPurchases';
354       + bin_name='BIN_NumCatalogPurchases';
355       + bin='2';
356       + LB=           0;
357       + UB=           2;
358       + EM_BIN_LABEL='0 <= NumCatalogPurchases < 2';
359       + output;
360       + name='NumCatalogPurchases';
361       + bin_name='BIN_NumCatalogPurchases';
362       + bin='3';
363       + LB=           2;
364       + UB=           4;
365       + EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
366       + output;
367       + name='NumCatalogPurchases';
368       + bin_name = 'BIN_NumCatalogPurchases';
369       + bin='4';
370       + UB=.;
371       + LB=           4;
372       + EM_BIN_LABEL='NumCatalogPurchases >= 4';
373       + output;
374       + name='NumDealsPurchases';
375       + bin_name='BIN_NumDealsPurchases';
376       + bin='1';
377       + LB=.;
378       + UB=           1;
379       + EM_BIN_LABEL='NumDealsPurchases < 1';
380       + output;
381       + name='NumDealsPurchases';
382       + bin_name='BIN_NumDealsPurchases';
383       + bin='2';
384       + LB=           1;
385       + UB=           2;
386       + EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
387       + output;
388       + name='NumDealsPurchases';
389       + bin_name='BIN_NumDealsPurchases';
390       + bin='3';
391       + LB=           2;
392       + UB=           3;
393       + EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
394       + output;
395       + name='NumDealsPurchases';
396       + bin_name = 'BIN_NumDealsPurchases';
397       + bin='4';
398       + UB=.;
399       + LB=           3;
400       + EM_BIN_LABEL='NumDealsPurchases >= 3';
401       + output;
402       + name='NumDistPurchases';
403       + bin_name='BIN_NumDistPurchases';
404       + bin='1';
405       + LB=.;
406       + UB=           3;
407       + EM_BIN_LABEL='NumDistPurchases < 3';
408       + output;
409       + name='NumDistPurchases';
410       + bin_name='BIN_NumDistPurchases';
411       + bin='2';
412       + LB=           3;
413       + UB=           6;
414       + EM_BIN_LABEL='3 <= NumDistPurchases < 6';
415       + output;
416       + name='NumDistPurchases';
417       + bin_name='BIN_NumDistPurchases';
418       + bin='3';
419       + LB=           6;
420       + UB=          10;
421       + EM_BIN_LABEL='6 <= NumDistPurchases < 10';
422       + output;
423       + name='NumDistPurchases';
424       + bin_name = 'BIN_NumDistPurchases';
425       + bin='4';
426       + UB=.;
427       + LB=          10;
428       + EM_BIN_LABEL='NumDistPurchases >= 10';
429       + output;
430       + name='NumStorePurchases';
431       + bin_name='BIN_NumStorePurchases';
432       + bin='1';
433       + LB=.;
434       + UB=           3;
435       + EM_BIN_LABEL='NumStorePurchases < 3';
436       + output;
437       + name='NumStorePurchases';
438       + bin_name='BIN_NumStorePurchases';
439       + bin='2';
440       + LB=           3;
441       + UB=           5;
442       + EM_BIN_LABEL='3 <= NumStorePurchases < 5';
443       + output;
444       + name='NumStorePurchases';
445       + bin_name='BIN_NumStorePurchases';
446       + bin='3';
447       + LB=           5;
448       + UB=           8;
449       + EM_BIN_LABEL='5 <= NumStorePurchases < 8';
450       + output;
451       + name='NumStorePurchases';
452       + bin_name = 'BIN_NumStorePurchases';
453       + bin='4';
454       + UB=.;
455       + LB=           8;
456       + EM_BIN_LABEL='NumStorePurchases >= 8';
457       + output;
458       + name='NumWebPurchases';
459       + bin_name='BIN_NumWebPurchases';
460       + bin='1';
461       + LB=.;
462       + UB=           2;
463       + EM_BIN_LABEL='NumWebPurchases < 2';
464       + output;
465       + name='NumWebPurchases';
466       + bin_name='BIN_NumWebPurchases';
467       + bin='2';
468       + LB=           2;
469       + UB=           4;
470       + EM_BIN_LABEL='2 <= NumWebPurchases < 4';
471       + output;
472       + name='NumWebPurchases';
473       + bin_name='BIN_NumWebPurchases';
474       + bin='3';
475       + LB=           4;
476       + UB=           6;
477       + EM_BIN_LABEL='4 <= NumWebPurchases < 6';
478       + output;
479       + name='NumWebPurchases';
480       + bin_name = 'BIN_NumWebPurchases';
481       + bin='4';
482       + UB=.;
483       + LB=           6;
484       + EM_BIN_LABEL='NumWebPurchases >= 6';
485       + output;
486       + name='NumWebVisitsMonth';
487       + bin_name='BIN_NumWebVisitsMonth';
488       + bin='1';
489       + LB=.;
490       + UB=           3;
491       + EM_BIN_LABEL='NumWebVisitsMonth < 3';
492       + output;
493       + name='NumWebVisitsMonth';
494       + bin_name='BIN_NumWebVisitsMonth';
495       + bin='2';
496       + LB=           3;
497       + UB=           6;
498       + EM_BIN_LABEL='3 <= NumWebVisitsMonth < 6';
499       + output;
500       + name='NumWebVisitsMonth';
501       + bin_name='BIN_NumWebVisitsMonth';
502       + bin='3';
503       + LB=           6;
504       + UB=           7;
505       + EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
506       + output;
507       + name='NumWebVisitsMonth';
508       + bin_name = 'BIN_NumWebVisitsMonth';
509       + bin='4';
510       + UB=.;
511       + LB=           7;
512       + EM_BIN_LABEL='NumWebVisitsMonth >= 7';
513       + output;
514       + name='RFMstat';
515       + bin_name='BIN_RFMstat';
516       + bin='1';
517       + LB=.;
518       + UB=       10.34;
519       + EM_BIN_LABEL='RFMstat < 10.34';
520       + output;
521       + name='RFMstat';
522       + bin_name='BIN_RFMstat';
523       + bin='2';
524       + LB=       10.34;
525       + UB=      128.09;
526       + EM_BIN_LABEL='10.34 <= RFMstat < 128.09';
527       + output;
528       + name='RFMstat';
529       + bin_name='BIN_RFMstat';
530       + bin='3';
531       + LB=      128.09;
532       + UB=      455.22;
533       + EM_BIN_LABEL='128.09 <= RFMstat < 455.22';
534       + output;
535       + name='RFMstat';
536       + bin_name = 'BIN_RFMstat';
537       + bin='4';
538       + UB=.;
539       + LB=      455.22;
540       + EM_BIN_LABEL='RFMstat >= 455.22';
541       + output;
542       + name='RMntFrq';
543       + bin_name='BIN_RMntFrq';
544       + bin='1';
545       + LB=.;
546       + UB=       13.25;
547       + EM_BIN_LABEL='RMntFrq < 13.25';
548       + output;
549       + name='RMntFrq';
550       + bin_name='BIN_RMntFrq';
551       + bin='2';
552       + LB=       13.25;
553       + UB=        30.4;
554       + EM_BIN_LABEL='13.25 <= RMntFrq < 30.4';
555       + output;
556       + name='RMntFrq';
557       + bin_name='BIN_RMntFrq';
558       + bin='3';
559       + LB=        30.4;
560       + UB=       52.86;
561       + EM_BIN_LABEL='30.4 <= RMntFrq < 52.86';
562       + output;
563       + name='RMntFrq';
564       + bin_name = 'BIN_RMntFrq';
565       + bin='4';
566       + UB=.;
567       + LB=       52.86;
568       + EM_BIN_LABEL='RMntFrq >= 52.86';
569       + output;
570       + name='Recency';
571       + bin_name='BIN_Recency';
572       + bin='1';
573       + LB=.;
574       + UB=          24;
575       + EM_BIN_LABEL='Recency < 24';
576       + output;
577       + name='Recency';
578       + bin_name='BIN_Recency';
579       + bin='2';
580       + LB=          24;
581       + UB=          48;
582       + EM_BIN_LABEL='24 <= Recency < 48';
583       + output;
584       + name='Recency';
585       + bin_name='BIN_Recency';
586       + bin='3';
587       + LB=          48;
588       + UB=          73;
589       + EM_BIN_LABEL='48 <= Recency < 73';
590       + output;
591       + name='Recency';
592       + bin_name = 'BIN_Recency';
593       + bin='4';
594       + UB=.;
595       + LB=          73;
596       + EM_BIN_LABEL='Recency >= 73';
597       + output;
598       + name='Teenhome';
599       + bin_name='BIN_Teenhome';
600       + bin='1';
601       + LB=.;
602       + UB=           0;
603       + EM_BIN_LABEL='Teenhome < 0';
604       + output;
605       + name='Teenhome';
606       + bin_name='BIN_Teenhome';
607       + bin='2';
608       + LB=           0;
609       + UB=           1;
610       + EM_BIN_LABEL='0 <= Teenhome < 1';
611       + output;
612       + name='Teenhome';
613       + bin_name = 'BIN_Teenhome';
614       + bin='3';
615       + UB=.;
616       + LB=           1;
617       + EM_BIN_LABEL='Teenhome >= 1';
618       + output;
619       +   if NAME='' and BIN_NAME='' and BIN='' then delete;
620       +   if LB=UB then delete;
621       + run;

NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.tempvars end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X MOD;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "drop";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = " "||strip(name);
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put ";";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=5976,
      Last Modified=21. April 2016 18.28 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 25 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 19.
NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete pctdata tempmapping tempbins tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file WORK.TEMPINT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PCTDATA (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPBINS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.TEMPVARS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   by name lb;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   length display_var $32 grp $8;
MPRINT(EM_QUANTILE_BINNING):   display_var = name;
MPRINT(EM_QUANTILE_BINNING):   GRP = BIN + 1;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      102:7   
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      102:11   
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedmapping nodupkey;
MPRINT(EM_QUANTILE_BINNING):   by NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: 65 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDMAPPING has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 1 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   set sortedmapping;
MPRINT(EM_QUANTILE_BINNING):   GRP="1";
MPRINT(EM_QUANTILE_BINNING):   bin="Missing";
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = "Missing";
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.SORTEDMAPPING.
NOTE: The data set WORK.TEMPMISSVALUES has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINDATA;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.Part_TRAIN;
NOTE: %INCLUDE (level 1) file X is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas.
129177    +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
129178    +* Generating Bins for interval variables;
MPRINT(EM_QUANTILE_BINNING):   * Generating Bins for interval variables;
129179    +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
129180    +if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
129181    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129182    +if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
129183    +else if AcceptedCmpTotal >= 0 then BIN_AcceptedCmpTotal=2;
MPRINT(EM_QUANTILE_BINNING):   else if AcceptedCmpTotal >= 0 then BIN_AcceptedCmpTotal=2;
129184    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129185    +if Age eq . then BIN_Age= .;
MPRINT(EM_QUANTILE_BINNING):   if Age eq . then BIN_Age= .;
129186    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129187    +if Age < 38 then BIN_Age=1;
MPRINT(EM_QUANTILE_BINNING):   if Age < 38 then BIN_Age=1;
129188    +else if Age < 46 then BIN_Age=2;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 46 then BIN_Age=2;
129189    +else if Age < 57 then BIN_Age=3;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 57 then BIN_Age=3;
129190    +else if Age >= 57 then BIN_Age=4;
MPRINT(EM_QUANTILE_BINNING):   else if Age >= 57 then BIN_Age=4;
129191    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129192    +if Frq eq . then BIN_Frq= .;
MPRINT(EM_QUANTILE_BINNING):   if Frq eq . then BIN_Frq= .;
129193    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129194    +if Frq < 6 then BIN_Frq=1;
MPRINT(EM_QUANTILE_BINNING):   if Frq < 6 then BIN_Frq=1;
129195    +else if Frq < 12 then BIN_Frq=2;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 12 then BIN_Frq=2;
129196    +else if Frq < 18 then BIN_Frq=3;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 18 then BIN_Frq=3;
129197    +else if Frq >= 18 then BIN_Frq=4;
MPRINT(EM_QUANTILE_BINNING):   else if Frq >= 18 then BIN_Frq=4;
129198    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129199    +if Income eq . then BIN_Income= .;
MPRINT(EM_QUANTILE_BINNING):   if Income eq . then BIN_Income= .;
129200    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129201    +if Income < 35268 then BIN_Income=1;
MPRINT(EM_QUANTILE_BINNING):   if Income < 35268 then BIN_Income=1;
129202    +else if Income < 52157 then BIN_Income=2;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 52157 then BIN_Income=2;
129203    +else if Income < 69486 then BIN_Income=3;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 69486 then BIN_Income=3;
129204    +else if Income >= 69486 then BIN_Income=4;
MPRINT(EM_QUANTILE_BINNING):   else if Income >= 69486 then BIN_Income=4;
129205    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129206    +if Kidhome eq . then BIN_Kidhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome eq . then BIN_Kidhome= .;
129207    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129208    +if Kidhome < 0 then BIN_Kidhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome < 0 then BIN_Kidhome=1;
129209    +else if Kidhome < 1 then BIN_Kidhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome < 1 then BIN_Kidhome=2;
129210    +else if Kidhome >= 1 then BIN_Kidhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome >= 1 then BIN_Kidhome=3;
129211    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129212    +if Mnt eq . then BIN_Mnt= .;
MPRINT(EM_QUANTILE_BINNING):   if Mnt eq . then BIN_Mnt= .;
129213    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129214    +if Mnt < 72 then BIN_Mnt=1;
MPRINT(EM_QUANTILE_BINNING):   if Mnt < 72 then BIN_Mnt=1;
129215    +else if Mnt < 405.5 then BIN_Mnt=2;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 405.5 then BIN_Mnt=2;
129216    +else if Mnt < 1064 then BIN_Mnt=3;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 1064 then BIN_Mnt=3;
129217    +else if Mnt >= 1064 then BIN_Mnt=4;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt >= 1064 then BIN_Mnt=4;
129218    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129219    +if MntFishProducts eq . then BIN_MntFishProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts eq . then BIN_MntFishProducts= .;
129220    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129221    +if MntFishProducts < 3 then BIN_MntFishProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts < 3 then BIN_MntFishProducts=1;
129222    +else if MntFishProducts < 13 then BIN_MntFishProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 13 then BIN_MntFishProducts=2;
129223    +else if MntFishProducts < 47 then BIN_MntFishProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 47 then BIN_MntFishProducts=3;
129224    +else if MntFishProducts >= 47 then BIN_MntFishProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts >= 47 then BIN_MntFishProducts=4;
129225    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129226    +if MntFruits eq . then BIN_MntFruits= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits eq . then BIN_MntFruits= .;
129227    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129228    +if MntFruits < 2 then BIN_MntFruits=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits < 2 then BIN_MntFruits=1;
129229    +else if MntFruits < 9 then BIN_MntFruits=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 9 then BIN_MntFruits=2;
129230    +else if MntFruits < 35 then BIN_MntFruits=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 35 then BIN_MntFruits=3;
129231    +else if MntFruits >= 35 then BIN_MntFruits=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits >= 35 then BIN_MntFruits=4;
129232    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129233    +if MntGoldProds eq . then BIN_MntGoldProds= .;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds eq . then BIN_MntGoldProds= .;
129234    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129235    +if MntGoldProds < 9 then BIN_MntGoldProds=1;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds < 9 then BIN_MntGoldProds=1;
129236    +else if MntGoldProds < 25 then BIN_MntGoldProds=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 25 then BIN_MntGoldProds=2;
129237    +else if MntGoldProds < 59 then BIN_MntGoldProds=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 59 then BIN_MntGoldProds=3;
129238    +else if MntGoldProds >= 59 then BIN_MntGoldProds=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds >= 59 then BIN_MntGoldProds=4;
129239    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129240    +if MntMeatProducts eq . then BIN_MntMeatProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts eq . then BIN_MntMeatProducts= .;
129241    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129242    +if MntMeatProducts < 17 then BIN_MntMeatProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts < 17 then BIN_MntMeatProducts=1;
129243    +else if MntMeatProducts < 72 then BIN_MntMeatProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 72 then BIN_MntMeatProducts=2;
129244    +else if MntMeatProducts < 246 then BIN_MntMeatProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 246 then BIN_MntMeatProducts=3;
129245    +else if MntMeatProducts >= 246 then BIN_MntMeatProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts >= 246 then BIN_MntMeatProducts=4;
129246    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129247    +if MntSweetProducts eq . then BIN_MntSweetProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts eq . then BIN_MntSweetProducts= .;
129248    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129249    +if MntSweetProducts < 2 then BIN_MntSweetProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts < 2 then BIN_MntSweetProducts=1;
129250    +else if MntSweetProducts < 9 then BIN_MntSweetProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 9 then BIN_MntSweetProducts=2;
129251    +else if MntSweetProducts < 35 then BIN_MntSweetProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 35 then BIN_MntSweetProducts=3;
129252    +else if MntSweetProducts >= 35 then BIN_MntSweetProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts >= 35 then BIN_MntSweetProducts=4;
129253    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129254    +if MntWines eq . then BIN_MntWines= .;
MPRINT(EM_QUANTILE_BINNING):   if MntWines eq . then BIN_MntWines= .;
129255    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129256    +if MntWines < 24 then BIN_MntWines=1;
MPRINT(EM_QUANTILE_BINNING):   if MntWines < 24 then BIN_MntWines=1;
129257    +else if MntWines < 183.5 then BIN_MntWines=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 183.5 then BIN_MntWines=2;
129258    +else if MntWines < 508 then BIN_MntWines=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 508 then BIN_MntWines=3;
129259    +else if MntWines >= 508 then BIN_MntWines=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines >= 508 then BIN_MntWines=4;
129260    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129261    +if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
129262    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129263    +if MonthsAsCustomer < 69 then BIN_MonthsAsCustomer=1;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer < 69 then BIN_MonthsAsCustomer=1;
129264    +else if MonthsAsCustomer < 83 then BIN_MonthsAsCustomer=2;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 83 then BIN_MonthsAsCustomer=2;
129265    +else if MonthsAsCustomer < 98 then BIN_MonthsAsCustomer=3;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 98 then BIN_MonthsAsCustomer=3;
129266    +else if MonthsAsCustomer >= 98 then BIN_MonthsAsCustomer=4;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer >= 98 then BIN_MonthsAsCustomer=4;
129267    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129268    +if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
129269    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129270    +if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
129271    +else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=2;
129272    +else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=3;
129273    +else if NumCatalogPurchases >= 4 then BIN_NumCatalogPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases >= 4 then BIN_NumCatalogPurchases=4;
129274    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129275    +if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
129276    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129277    +if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
129278    +else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
129279    +else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
129280    +else if NumDealsPurchases >= 3 then BIN_NumDealsPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases >= 3 then BIN_NumDealsPurchases=4;
129281    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129282    +if NumDistPurchases eq . then BIN_NumDistPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases eq . then BIN_NumDistPurchases= .;
129283    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129284    +if NumDistPurchases < 3 then BIN_NumDistPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases < 3 then BIN_NumDistPurchases=1;
129285    +else if NumDistPurchases < 6 then BIN_NumDistPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 6 then BIN_NumDistPurchases=2;
129286    +else if NumDistPurchases < 10 then BIN_NumDistPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 10 then BIN_NumDistPurchases=3;
129287    +else if NumDistPurchases >= 10 then BIN_NumDistPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases >= 10 then BIN_NumDistPurchases=4;
129288    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129289    +if NumStorePurchases eq . then BIN_NumStorePurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases eq . then BIN_NumStorePurchases= .;
129290    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129291    +if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
129292    +else if NumStorePurchases < 5 then BIN_NumStorePurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 5 then BIN_NumStorePurchases=2;
129293    +else if NumStorePurchases < 8 then BIN_NumStorePurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 8 then BIN_NumStorePurchases=3;
129294    +else if NumStorePurchases >= 8 then BIN_NumStorePurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases >= 8 then BIN_NumStorePurchases=4;
129295    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129296    +if NumWebPurchases eq . then BIN_NumWebPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases eq . then BIN_NumWebPurchases= .;
129297    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129298    +if NumWebPurchases < 2 then BIN_NumWebPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases < 2 then BIN_NumWebPurchases=1;
129299    +else if NumWebPurchases < 4 then BIN_NumWebPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 4 then BIN_NumWebPurchases=2;
129300    +else if NumWebPurchases < 6 then BIN_NumWebPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 6 then BIN_NumWebPurchases=3;
129301    +else if NumWebPurchases >= 6 then BIN_NumWebPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases >= 6 then BIN_NumWebPurchases=4;
129302    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129303    +if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
129304    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129305    +if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=1;
129306    +else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=2;
129307    +else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=3;
129308    +else if NumWebVisitsMonth >= 7 then BIN_NumWebVisitsMonth=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth >= 7 then BIN_NumWebVisitsMonth=4;
129309    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129310    +if RFMstat eq . then BIN_RFMstat= .;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat eq . then BIN_RFMstat= .;
129311    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129312    +if RFMstat < 10.34 then BIN_RFMstat=1;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat < 10.34 then BIN_RFMstat=1;
129313    +else if RFMstat < 128.09 then BIN_RFMstat=2;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 128.09 then BIN_RFMstat=2;
129314    +else if RFMstat < 455.22 then BIN_RFMstat=3;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 455.22 then BIN_RFMstat=3;
129315    +else if RFMstat >= 455.22 then BIN_RFMstat=4;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat >= 455.22 then BIN_RFMstat=4;
129316    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129317    +if RMntFrq eq . then BIN_RMntFrq= .;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq eq . then BIN_RMntFrq= .;
129318    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129319    +if RMntFrq < 13.25 then BIN_RMntFrq=1;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq < 13.25 then BIN_RMntFrq=1;
129320    +else if RMntFrq < 30.4 then BIN_RMntFrq=2;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 30.4 then BIN_RMntFrq=2;
129321    +else if RMntFrq < 52.86 then BIN_RMntFrq=3;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 52.86 then BIN_RMntFrq=3;
129322    +else if RMntFrq >= 52.86 then BIN_RMntFrq=4;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq >= 52.86 then BIN_RMntFrq=4;
129323    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129324    +if Recency eq . then BIN_Recency= .;
MPRINT(EM_QUANTILE_BINNING):   if Recency eq . then BIN_Recency= .;
129325    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129326    +if Recency < 24 then BIN_Recency=1;
MPRINT(EM_QUANTILE_BINNING):   if Recency < 24 then BIN_Recency=1;
129327    +else if Recency < 48 then BIN_Recency=2;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 48 then BIN_Recency=2;
129328    +else if Recency < 73 then BIN_Recency=3;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 73 then BIN_Recency=3;
129329    +else if Recency >= 73 then BIN_Recency=4;
MPRINT(EM_QUANTILE_BINNING):   else if Recency >= 73 then BIN_Recency=4;
129330    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129331    +if Teenhome eq . then BIN_Teenhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome eq . then BIN_Teenhome= .;
129332    +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
129333    +if Teenhome < 0 then BIN_Teenhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome < 0 then BIN_Teenhome=1;
129334    +else if Teenhome < 1 then BIN_Teenhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome < 1 then BIN_Teenhome=2;
129335    +else if Teenhome >= 1 then BIN_Teenhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome >= 1 then BIN_Teenhome=3;
129336    +end;
MPRINT(EM_QUANTILE_BINNING):   end;
129337    +drop
129338    +AcceptedCmpTotal
129339    +Age
129340    +Frq
129341    +Income
129342    +Kidhome
129343    +Mnt
129344    +MntFishProducts
129345    +MntFruits
129346    +MntGoldProds
129347    +MntMeatProducts
129348    +MntSweetProducts
129349    +MntWines
129350    +MonthsAsCustomer
129351    +NumCatalogPurchases
129352    +NumDealsPurchases
129353    +NumDistPurchases
129354    +NumStorePurchases
129355    +NumWebPurchases
129356    +NumWebVisitsMonth
129357    +RFMstat
129358    +RMntFrq
129359    +Recency
129360    +Teenhome
129361    +;
MPRINT(EM_QUANTILE_BINNING):   drop AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.BINNING_BINDATA has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   length newgroup _group_ _order_ 8 _level_ $8;
MPRINT(EM_QUANTILE_BINNING):   newgroup =.;
MPRINT(EM_QUANTILE_BINNING):   _LEVEL_ = 'ORDINAL';
MPRINT(EM_QUANTILE_BINNING):   _Group_ = grp;
MPRINT(EM_QUANTILE_BINNING):   rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
MPRINT(EM_QUANTILE_BINNING):   keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      264:11   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: There were 23 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 111 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   _order_ = _N_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set WORK.TEMPSPLITVALS has 111 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals ;
MPRINT(EM_QUANTILE_BINNING):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 111 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempvariableset;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_QUANTILE_BINNING):   where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') and (TYPE='C') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data =EMWS8.BINNING_BINDATA classout=_classout nonorm;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data=EMWS8.BINNING_BINDATA classout=_classout2;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout2;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data _classout;
MPRINT(EM_QUANTILE_BINNING):   length _variable_ $32;
MPRINT(EM_QUANTILE_BINNING):   merge _classout _classout2 (rename=(LEVEL=_split_value_));
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   _variable_ = NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 111 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 111 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   length _norm_level_ $200 _split_value_ $200;
MPRINT(EM_QUANTILE_BINNING):   merge EMWS8.BINNING_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   LEVEL = trim(left(LEVEL));
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = trim(left(_split_value_));
MPRINT(EM_QUANTILE_BINNING):   _norm_level_ = trim(left(_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   drop NAME FREQUENCY TYPE CRAW NRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      478:19   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      478:9   
NOTE: There were 111 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete _classout _classout2;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT2 (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by DISPLAY_VAR _Group_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete sortedmapping tempsplitvals tempmissvalues ;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.SORTEDMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 9 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE LEVEL in ('BINARY', 'NOMINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 9 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc dmdb data=EMWS8.Part_TRAIN classout=tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   class AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL='MISSING' then level='Missing';
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=tempclassout nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by NAME descending FREQUENCY LEVEL;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds(keep=NAME NOBS);
MPRINT(EM_CLASSVARS_GROUP):   retain NOBS;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if first.NAME then NOBS = frequency;
MPRINT(EM_CLASSVARS_GROUP):   else NOBS=NOBS+frequency;
MPRINT(EM_CLASSVARS_GROUP):   if last.name then do;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPDS has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds;
MPRINT(EM_CLASSVARS_GROUP):   merge tempclassout tempds;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if ((LEVEL ne '') AND (LEVEL ne "."));
MPRINT(EM_CLASSVARS_GROUP):   PCT = 100 * (FREQUENCY/NOBS);
MPRINT(EM_CLASSVARS_GROUP):   if PCT < 0.5 then flag=1;
MPRINT(EM_CLASSVARS_GROUP):   else flag=0;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPDS.
NOTE: The data set WORK.TEMPDS has 24 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempmissvalues;
MPRINT(EM_CLASSVARS_GROUP):   length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp1";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp2";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp3";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp4";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp5";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Complain";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Education";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="HigherEducationBinary";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Marital_Status";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempsplitvals;
MPRINT(EM_CLASSVARS_GROUP):   length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   if ((level ne '') AND (level ne '.'));
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp1" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp2" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp3" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp4" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp5" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Complain" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Education" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "GRADUATION" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "PHD" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "MASTER" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "2N CYCLE" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "BASIC" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "HigherEducationBinary" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "1" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "0" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Marital_Status" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "MARRIED" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "TOGETHER" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "SINGLE" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "DIVORCED" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "WIDOW" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   _VARIABLE_ = NAME;
MPRINT(EM_CLASSVARS_GROUP):   newgroup = .;
MPRINT(EM_CLASSVARS_GROUP):   rename NAME = DISPLAY_VAR LEVEL = _SPLIT_VALUE_;
MPRINT(EM_CLASSVARS_GROUP):   keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Variable _Split_value_ is uninitialized.
NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sql;
MPRINT(EM_CLASSVARS_GROUP):   reset noprint;
MPRINT(EM_CLASSVARS_GROUP):   select count(*) into :nobs from EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = tempsplitvals nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_Value_ _group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   merge EMWS8.BINNING_SPLITVALS tempsplitvals ;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_ ;
MPRINT(EM_CLASSVARS_GROUP):   if display_var eq "" then delete;
MPRINT(EM_CLASSVARS_GROUP):   if _norm_level_ eq "" then _norm_level_ = _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 144 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 144 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_CLASSVARS_GROUP):   delete tempsplitvals tempds tempclassout tempvariableset tempvars tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPDS (memtype=DATA).
NOTE: Deleting WORK.TEMPCLASSOUT (memtype=DATA).
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_CLASSVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_ORDVARS_GROUP):   by NAME;
MPRINT(EM_ORDVARS_GROUP):   where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='ORDINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_ORDVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_ORDVARS_GROUP):   delete tempsplitvals varvals tempvariableset tempvars ;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: The file WORK.TEMPSPLITVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.VARVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
MPRINT(EM_ORDVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc print data=EMWS8.BINNING_VARMAPPINGS label;
MPRINT(TRAIN):   var _VARIABLE_ _GRP_VARIABLE_ ;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The PROCEDURE PRINT printed page 44.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.BINNING_SPLITVALS out=tempsplitvals nodupkey;
MPRINT(TRAIN):   by _VARIABLE_;
MPRINT(TRAIN):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: 112 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 32 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   length _proc_var_ $32;
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP1" then _proc_var_ = "AcceptedCmp1";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP2" then _proc_var_ = "AcceptedCmp2";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP3" then _proc_var_ = "AcceptedCmp3";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP4" then _proc_var_ = "AcceptedCmp4";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP5" then _proc_var_ = "AcceptedCmp5";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMPTOTAL" then _proc_var_ = "BIN_AcceptedCmpTotal";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "AGE" then _proc_var_ = "BIN_Age";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "FRQ" then _proc_var_ = "BIN_Frq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "INCOME" then _proc_var_ = "BIN_Income";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "KIDHOME" then _proc_var_ = "BIN_Kidhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNT" then _proc_var_ = "BIN_Mnt";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFISHPRODUCTS" then _proc_var_ = "BIN_MntFishProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFRUITS" then _proc_var_ = "BIN_MntFruits";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTGOLDPRODS" then _proc_var_ = "BIN_MntGoldProds";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTMEATPRODUCTS" then _proc_var_ = "BIN_MntMeatProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTSWEETPRODUCTS" then _proc_var_ = "BIN_MntSweetProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTWINES" then _proc_var_ = "BIN_MntWines";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MONTHSASCUSTOMER" then _proc_var_ = "BIN_MonthsAsCustomer";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMCATALOGPURCHASES" then _proc_var_ = "BIN_NumCatalogPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDEALSPURCHASES" then _proc_var_ = "BIN_NumDealsPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDISTPURCHASES" then _proc_var_ = "BIN_NumDistPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMSTOREPURCHASES" then _proc_var_ = "BIN_NumStorePurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBPURCHASES" then _proc_var_ = "BIN_NumWebPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBVISITSMONTH" then _proc_var_ = "BIN_NumWebVisitsMonth";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RFMSTAT" then _proc_var_ = "BIN_RFMstat";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RMNTFRQ" then _proc_var_ = "BIN_RMntFrq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RECENCY" then _proc_var_ = "BIN_Recency";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "TEENHOME" then _proc_var_ = "BIN_Teenhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "COMPLAIN" then _proc_var_ = "Complain";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "EDUCATION" then _proc_var_ = "Education";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "HIGHEREDUCATIONBINARY" then _proc_var_ = "HigherEducationBinary";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MARITAL_STATUS" then _proc_var_ = "Marital_Status";
MPRINT(TRAIN):   if missing(_proc_var_) then _proc_var_=_variable_;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete sortedbin tempsplitvals;
MPRINT(TRAIN):   run;

NOTE: The file WORK.SORTEDBIN (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_FINE_DETAIL):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_FINE_DETAIL):   / missing out=temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETB has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TEMPTARGETB (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data temptrain ;
MPRINT(EM_SUMMARIZE_TABLE):   set EMWS8.BINNING_BINDATA;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTRAIN has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_PRENORMALIZECLASSVARS.SOURCE.
129362    +%macro em_PreNormalizeClassVars(incmeta=, outcmeta=);
129364    +   data &outcmeta(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
129365    +      length INDEXVAR $32; retain _index 0;
129366    +      set &incmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
129367    +      if strip(LEVEL) eq 'INTERVAL' then delete;
129368    +      else do;
129369    +         _index+1;
129370    +         INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
129371    +      end;
129372    +   run;
129373    +%mend em_PreNormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_NORMALIZECLASSVARS.SOURCE.
129374    +%macro em_NormalizeClassVars(indata=,
129375    +                          cmeta=,
129376    +                          encodedTarget=N,
129377    +                          target=,
129378    +                          targetEvent=,
129379    +                          targetNonEvent=,
129380    +                          outdata=);
129381    + %let dsid = %sysfunc(open(&cmeta));
129382    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
129383    + %let vn_indexvar =%sysfunc(varnum(&dsid, INDEXVAR));
129384    + %let vn_format =%sysfunc(varnum(&dsid, FORMAT));
129385    + %let vn_type =%sysfunc(varnum(&dsid, TYPE));
129387    + data &outdata/view=&outdata;
129388    +      length _normedvar32 $32.;
129389    +      set &indata( rename = (
129390    +      %let k = 1;
129391    +      %do %while(^%sysfunc(fetch(&dsid)));
129392    +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
129393    +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
129394    +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
129395    +          &_name = &_indexvar
129396    +          %let k = %eval(&k+1);
129397    +      %end;
129398    +      ));
129399    +      drop  _normedvar32;
129401    +      %let rc=%sysfunc(rewind(&dsid));
129402    +      %let k = 1;
129403    +      %do %while(^%sysfunc(fetch(&dsid)));
129404    +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
129405    +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
129406    +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
129407    +          %let _type     = %sysfunc(getvarc(&dsid, &vn_type));
129408    +          %if &_format ne %then %do;
129409    +              _normedvar32 = put(&_indexvar, &_format);
129410    +          %end;
129411    +          %else %do;
129412    +              %if &_type = N %then %do;
129413    +                  _normedvar32 = put(&_indexvar, Best12.);
129414    +              %end;
129415    +              %else %do;
129416    +                  _normedvar32 = put(&_indexvar, $32.);
129417    +              %end;
129418    +          %end;
129419    +          %DMNORMIP(_normedvar32);
129420    +          &_name = _normedvar32;
129421    +          drop &_indexvar;
129422    +          %let k = %eval(&k+1);
129423    +      %end;
129424    +      %let dsid = %sysfunc(close(&dsid));
129426    +      %if &encodedTarget = Y %then %do;
129427    +          %let qtargetEvent = %sysfunc(quote(&targetEvent));
129428    +          %let qtargetNonEvent = %sysfunc(quote(&targetNonEvent));
129429    +          if upcase(strip(&target)) = &qtargetEvent then _EncodedTarget_ =1;
129430    +          else if upcase(strip(&target)) = &qtargetNonEvent then _EncodedTarget_ = 0;
129431    +      %end;
129432    + run;
129434    +%mend em_NormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=tempmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAP has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _cmeta;
MPRINT(EM_SUMMARIZE_TABLE):   merge tempvarset tempmap(in=_a rename=(_variable_=name ));
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   if ((_a) or (role="TARGET"));
MPRINT(EM_SUMMARIZE_TABLE):   if role="INPUT" then name=_proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if role="TARGET" then role="INPUT";
MPRINT(EM_SUMMARIZE_TABLE):   level = procLevel;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(name, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      110:9   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      115:4   
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: There were 32 observations read from the data set WORK.TEMPMAP.
NOTE: The data set WORK._CMETA has 33 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRENORMALIZECLASSVARS):   data _cmetatmp(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
MPRINT(EM_PRENORMALIZECLASSVARS):   length INDEXVAR $32;
MPRINT(EM_PRENORMALIZECLASSVARS):   retain _index 0;
MPRINT(EM_PRENORMALIZECLASSVARS):   set _cmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRENORMALIZECLASSVARS):   if strip(LEVEL) eq 'INTERVAL' then delete;
MPRINT(EM_PRENORMALIZECLASSVARS):   else do;
MPRINT(EM_PRENORMALIZECLASSVARS):   _index+1;
MPRINT(EM_PRENORMALIZECLASSVARS):   INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
MPRINT(EM_PRENORMALIZECLASSVARS):   end;
MPRINT(EM_PRENORMALIZECLASSVARS):   run;

NOTE: There were 33 observations read from the data set WORK._CMETA.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK._CMETATMP has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_NORMALIZECLASSVARS):   data _tmp_train/view=_tmp_train;
MPRINT(EM_NORMALIZECLASSVARS):   length _normedvar32 $32.;
MPRINT(EM_NORMALIZECLASSVARS):   set work.temptrain( rename = ( AcceptedCmp1 = _INDEXVAR1 AcceptedCmp2 = _INDEXVAR2 AcceptedCmp3 = _INDEXVAR3 AcceptedCmp4 = _INDEXVAR4 AcceptedCmp5 = _INDEXVAR5 BIN_AcceptedCmpTotal = _INDEXVAR6 BIN_Age = _INDEXVAR7 
Complain = _INDEXVAR8 DepVar = _INDEXVAR9 Education = _INDEXVAR10 BIN_Frq = _INDEXVAR11 HigherEducationBinary = _INDEXVAR12 BIN_Income = _INDEXVAR13 BIN_Kidhome = _INDEXVAR14 Marital_Status = _INDEXVAR15 BIN_Mnt = _INDEXVAR16 BIN_MntFishProducts = 
_INDEXVAR17 BIN_MntFruits = _INDEXVAR18 BIN_MntGoldProds = _INDEXVAR19 BIN_MntMeatProducts = _INDEXVAR20 BIN_MntSweetProducts = _INDEXVAR21 BIN_MntWines = _INDEXVAR22 BIN_MonthsAsCustomer = _INDEXVAR23 BIN_NumCatalogPurchases = _INDEXVAR24 
BIN_NumDealsPurchases = _INDEXVAR25 BIN_NumDistPurchases = _INDEXVAR26 BIN_NumStorePurchases = _INDEXVAR27 BIN_NumWebPurchases = _INDEXVAR28 BIN_NumWebVisitsMonth = _INDEXVAR29 BIN_RFMstat = _INDEXVAR30 BIN_RMntFrq = _INDEXVAR31 BIN_Recency = _INDEXVAR32 
BIN_Teenhome = _INDEXVAR33 ));
MPRINT(EM_NORMALIZECLASSVARS):   drop _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR1, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp1 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR1;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR2, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp2 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR2;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR3, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp3 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR3;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR4, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp4 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR4;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR5, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp5 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR5;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR6, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_AcceptedCmpTotal = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR6;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR7, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Age = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR7;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR8, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Complain = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR8;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR9, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   DepVar = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR9;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR10, $10.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Education = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR10;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR11, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Frq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR11;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR12, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   HigherEducationBinary = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR12;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR13, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Income = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR13;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR14, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Kidhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR14;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR15, $8.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Marital_Status = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR15;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR16, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Mnt = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR16;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR17, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFishProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR17;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR18, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFruits = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR18;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR19, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntGoldProds = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR19;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR20, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntMeatProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR20;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR21, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntSweetProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR21;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR22, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntWines = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR22;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR23, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MonthsAsCustomer = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR23;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR24, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumCatalogPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR24;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR25, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDealsPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR25;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR26, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDistPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR26;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR27, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumStorePurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR27;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR28, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR28;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR29, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebVisitsMonth = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR29;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR30, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RFMstat = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR30;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR31, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RMntFrq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR31;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR32, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Recency = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR33, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Teenhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR33;
MPRINT(EM_NORMALIZECLASSVARS):   run;

NOTE: DATA STEP view saved on file WORK._TMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=sortedmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.SORTEDMAP has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output CrossTabFreqs=crosstabfreq ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("proc freq data=_tmp_train order=formatted addnames;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("tables ("||_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  ") * DepVar/ missing;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output close;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   proc freq data=_tmp_train order=formatted addnames;
MPRINT(EM_SUMMARIZE_TABLE):   ) * DepVar/ missing;
MPRINT(EM_SUMMARIZE_TABLE):   run;
MPRINT(EM_SUMMARIZE_TABLE):   ods output close;
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   CrossTabFreqs ;
2         + proc freq data=_tmp_train order=formatted addnames;
3         + tables (AcceptedCmp1
4         + AcceptedCmp2
5         + AcceptedCmp3
6         + AcceptedCmp4
7         + AcceptedCmp5
8         + BIN_AcceptedCmpTotal
9         + BIN_Age
10        + BIN_Frq
11        + BIN_Income
12        + BIN_Kidhome
13        + BIN_Mnt
14        + BIN_MntFishProducts
15        + BIN_MntFruits
16        + BIN_MntGoldProds
17        + BIN_MntMeatProducts
18        + BIN_MntSweetProducts
19        + BIN_MntWines
20        + BIN_MonthsAsCustomer
21        + BIN_NumCatalogPurchases
22        + BIN_NumDealsPurchases
23        + BIN_NumDistPurchases
24        + BIN_NumStorePurchases
25        + BIN_NumWebPurchases
26        + BIN_NumWebVisitsMonth
27        + BIN_RFMstat
28        + BIN_RMntFrq
29        + BIN_Recency
30        + BIN_Teenhome
31        + Complain
32        + Education
33        + HigherEducationBinary
34        + Marital_Status
35        + ) * DepVar/ missing;
36        + run;

NOTE: View WORK._TMP_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.12 seconds
      
NOTE: There were 2374 observations read from the data set WORK.TEMPTRAIN.
NOTE: The data set WORK.CROSSTABFREQ has 420 observations and 43 variables.
NOTE: There were 2374 observations read from the data set WORK._TMP_TRAIN.
NOTE: The PROCEDURE FREQ printed pages 45-76.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.18 seconds
      cpu time            0.15 seconds
      

37        + ods output close;
MPRINT(EM_SUMMARIZE_TABLE):   close
MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("data crosstabs;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  length _variable_ _split_value_  $200 ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  set crosstabfreq(where=(_type_='11'));");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _variable_= RowVariable;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _split_value_="||_proc_var_||";");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("end;");
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  "keep _variable_ _split_value_ DepVar Frequency Percent display_var;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabfreq(where=(_type_='11'));
MPRINT(EM_SUMMARIZE_TABLE):   _variable_= RowVariable;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp1' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp1 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp2' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp2 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp3' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp3 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp4' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp4 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp5' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp5 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_AcceptedCmpTotal ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Age' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Age ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Frq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Frq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Income' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Income ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Kidhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Kidhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Mnt' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Mnt ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFishProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFishProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFruits' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFruits ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntGoldProds' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntGoldProds ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntMeatProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntSweetProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntWines' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntWines ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MonthsAsCustomer ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumCatalogPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDealsPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDistPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumStorePurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebVisitsMonth ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RFMstat' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RFMstat ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RMntFrq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RMntFrq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Recency' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Recency ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Teenhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Teenhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Complain' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Complain ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Education' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Education ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'HigherEducationBinary' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=HigherEducationBinary ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Marital_Status' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Marital_Status ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   keep _variable_ _split_value_ DepVar Frequency Percent display_var;
MPRINT(EM_SUMMARIZE_TABLE):   run;
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data crosstabs;
2         +   length _variable_ _split_value_  $200 ;
MPRINT(EM_SUMMARIZE_TABLE):  200
3         +   set crosstabfreq(where=(_type_='11'));
4         +   _variable_= RowVariable;
5         + if strip(RowVariable) = 'AcceptedCmp1' then do;
6         +   _split_value_=AcceptedCmp1                    ;
7         + end;
8         + if strip(RowVariable) = 'AcceptedCmp2' then do;
9         +   _split_value_=AcceptedCmp2                    ;
10        + end;
11        + if strip(RowVariable) = 'AcceptedCmp3' then do;
12        +   _split_value_=AcceptedCmp3                    ;
13        + end;
14        + if strip(RowVariable) = 'AcceptedCmp4' then do;
15        +   _split_value_=AcceptedCmp4                    ;
16        + end;
17        + if strip(RowVariable) = 'AcceptedCmp5' then do;
18        +   _split_value_=AcceptedCmp5                    ;
19        + end;
20        + if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
21        +   _split_value_=BIN_AcceptedCmpTotal            ;
22        + end;
23        + if strip(RowVariable) = 'BIN_Age' then do;
24        +   _split_value_=BIN_Age                         ;
25        + end;
26        + if strip(RowVariable) = 'BIN_Frq' then do;
27        +   _split_value_=BIN_Frq                         ;
28        + end;
29        + if strip(RowVariable) = 'BIN_Income' then do;
30        +   _split_value_=BIN_Income                      ;
31        + end;
32        + if strip(RowVariable) = 'BIN_Kidhome' then do;
33        +   _split_value_=BIN_Kidhome                     ;
34        + end;
35        + if strip(RowVariable) = 'BIN_Mnt' then do;
36        +   _split_value_=BIN_Mnt                         ;
37        + end;
38        + if strip(RowVariable) = 'BIN_MntFishProducts' then do;
39        +   _split_value_=BIN_MntFishProducts             ;
40        + end;
41        + if strip(RowVariable) = 'BIN_MntFruits' then do;
42        +   _split_value_=BIN_MntFruits                   ;
43        + end;
44        + if strip(RowVariable) = 'BIN_MntGoldProds' then do;
45        +   _split_value_=BIN_MntGoldProds                ;
46        + end;
47        + if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
48        +   _split_value_=BIN_MntMeatProducts             ;
49        + end;
50        + if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
51        +   _split_value_=BIN_MntSweetProducts            ;
52        + end;
53        + if strip(RowVariable) = 'BIN_MntWines' then do;
54        +   _split_value_=BIN_MntWines                    ;
55        + end;
56        + if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
57        +   _split_value_=BIN_MonthsAsCustomer            ;
58        + end;
59        + if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
60        +   _split_value_=BIN_NumCatalogPurchases         ;
61        + end;
62        + if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
63        +   _split_value_=BIN_NumDealsPurchases           ;
64        + end;
65        + if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
66        +   _split_value_=BIN_NumDistPurchases            ;
67        + end;
68        + if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
69        +   _split_value_=BIN_NumStorePurchases           ;
70        + end;
71        + if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
72        +   _split_value_=BIN_NumWebPurchases             ;
73        + end;
74        + if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
75        +   _split_value_=BIN_NumWebVisitsMonth           ;
76        + end;
77        + if strip(RowVariable) = 'BIN_RFMstat' then do;
78        +   _split_value_=BIN_RFMstat                     ;
79        + end;
80        + if strip(RowVariable) = 'BIN_RMntFrq' then do;
81        +   _split_value_=BIN_RMntFrq                     ;
82        + end;
83        + if strip(RowVariable) = 'BIN_Recency' then do;
84        +   _split_value_=BIN_Recency                     ;
85        + end;
86        + if strip(RowVariable) = 'BIN_Teenhome' then do;
87        +   _split_value_=BIN_Teenhome                    ;
88        + end;
89        + if strip(RowVariable) = 'Complain' then do;
90        +   _split_value_=Complain                        ;
91        + end;
92        + if strip(RowVariable) = 'Education' then do;
93        +   _split_value_=Education                       ;
94        + end;
95        + if strip(RowVariable) = 'HigherEducationBinary' then do;
96        +   _split_value_=HigherEducationBinary           ;
97        + end;
98        + if strip(RowVariable) = 'Marital_Status' then do;
99        +   _split_value_=Marital_Status                  ;
100       + end;
101       + keep _variable_ _split_value_ DepVar Frequency Percent display_var;
102       + run;

WARNING: The variable display_var in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 216 observations read from the data set WORK.CROSSTABFREQ.
      WHERE _type_='11';
NOTE: The data set WORK.CROSSTABS has 216 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 216 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length display_var $32;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: The data set WORK.CROSSTABS has 216 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by display_var _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 216 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
MPRINT(EM_SUMMARIZE_TABLE):   by display_var;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(_variable_, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   _temp =
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_var by input data sets. This may cause unexpected results.
NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: The data set WORK.CROSSTABS has 220 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 220 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 220 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate 8 type $1 valfmt $20 ;
MPRINT(EM_SUMMARIZE_TABLE):   retain eventCount noneventCount ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   if first._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total=0;
MPRINT(EM_SUMMARIZE_TABLE):   eventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   noneventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if upcase(strip(_temp))="1" then eventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   else noneventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   if last._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total = eventCount + noneventCount;
MPRINT(EM_SUMMARIZE_TABLE):   if total ne 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = eventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = nonEventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   output;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   valfmt = format;
MPRINT(EM_SUMMARIZE_TABLE):   drop _temp Frequency percent;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 553:20   1 at 565:24   1 at 570:30   
NOTE: There were 220 observations read from the data set WORK.CROSSTABS.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 109 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):  ;
MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   length display_var $32 newgroup numsplitval 8;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   display_var = _variable_;
MPRINT(EM_FINE_DETAIL):   index = kindex(display_var, "BIN_");
MPRINT(EM_FINE_DETAIL):   if index gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 5);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   index2 = kindex(display_var, "SV_");
MPRINT(EM_FINE_DETAIL):   if index2 gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 4);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
MPRINT(EM_FINE_DETAIL):   _index_ = _N_;
MPRINT(EM_FINE_DETAIL):   newgroup = .;
MPRINT(EM_FINE_DETAIL):   drop index index2 ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Variable numsplitval is uninitialized.
NOTE: There were 109 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 109 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 109 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 109 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   data tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_FINE_DETAIL):   _norm_level_ = upcase(_norm_level_);
MPRINT(EM_FINE_DETAIL):   if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
MPRINT(EM_FINE_DETAIL):   * drop _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.TMPSPLITVALS has 144 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=tmpsplitvals out=sortedsplit;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set WORK.TMPSPLITVALS.
NOTE: The data set WORK.SORTEDSPLIT has 144 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets library=work nolist;
MPRINT(EM_FINE_DETAIL):   delete tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TMPSPLITVALS (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedbin;
MPRINT(EM_FINE_DETAIL):   by BIN_NAME BIN;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.SORTEDBIN has 88 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   merge EMWS8.BINNING_FINEDETAILDATA(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   if _a then do;
MPRINT(EM_FINE_DETAIL):   binFlag = 1;
MPRINT(EM_FINE_DETAIL):   VALUE=EM_BIN_LABEL;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   else do;
MPRINT(EM_FINE_DETAIL):   binFlag = 0;
MPRINT(EM_FINE_DETAIL):   *VALUE=strip(display_var)!!"="!!strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   VALUE=strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((eventCount=.) or (nonEventCount=.)) then do;
MPRINT(EM_FINE_DETAIL):   eventCount=0;
MPRINT(EM_FINE_DETAIL):   nonEventCount=0;
MPRINT(EM_FINE_DETAIL):   total = 0;
MPRINT(EM_FINE_DETAIL):   eventRate= 0;
MPRINT(EM_FINE_DETAIL):   nonEventRate = 0;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   eventCount = round(eventCount, .001);
MPRINT(EM_FINE_DETAIL):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_FINE_DETAIL):   total= round(total, .001);
MPRINT(EM_FINE_DETAIL):   eventRate = round(eventRate, .001);
MPRINT(EM_FINE_DETAIL):   nonEventRate = round(nonEventRate, .001);
MPRINT(EM_FINE_DETAIL):   if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then numsplitval = _split_value_;
MPRINT(EM_FINE_DETAIL):   else if ((type='N') AND (valfmt ne "")) then numsplitval = _order_;
MPRINT(EM_FINE_DETAIL):   else numsplitval=.;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
MPRINT(EM_FINE_DETAIL):   if _a and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   if _c and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   drop NAME EM_BIN_LABEL valfmt;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      439:15   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 109 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: There were 144 observations read from the data set WORK.SORTEDSPLIT.
NOTE: There were 88 observations read from the data set WORK.SORTEDBIN.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 144 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp1" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp2" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp3" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp4" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp5" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmpTotal" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Age" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Complain" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Education" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Frq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "HigherEducationBinary" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Income" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Kidhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Marital_Status" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Mnt" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFishProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFruits" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntGoldProds" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntMeatProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntSweetProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntWines" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MonthsAsCustomer" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumCatalogPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDealsPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDistPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumStorePurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebVisitsMonth" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RFMstat" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RMntFrq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Recency" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Teenhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then delete;
MPRINT(EM_FINE_DETAIL):   * if binFlag=1 and UB=LB then delete;
MPRINT(EM_FINE_DETAIL):   * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 144 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by DISPLAY_VAR _index_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 144 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete sortedsplit sortedbin ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.SORTEDSPLIT (memtype=DATA).
NOTE: Deleting WORK.SORTEDBIN (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CREATE_GROUPING):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_CREATE_GROUPING):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_CREATE_GROUPING):   / missing out=temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETC has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets lib=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPTARGETC (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc means data=EMWS8.BINNING_FINEDETAILDATA noprint;
MPRINT(EM_CREATE_GROUPING):   var eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   class _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set WORK.SUMM has 176 observations and 6 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=summ(drop=_type_ _freq_);
MPRINT(EM_CREATE_GROUPING):   by _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 176 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 176 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep=_variable_ eventCount nonEventCount groupresprate) tempcoarse(keep=_variable_ _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
MPRINT(EM_CREATE_GROUPING):   set summ;
MPRINT(EM_CREATE_GROUPING):   format groupresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   format groupnonresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   by _variable_ ;
MPRINT(EM_CREATE_GROUPING):   if _group_=. then do;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   respper = eventCount / 359;
MPRINT(EM_CREATE_GROUPING):   nrespper = nonEventCount / 2015;
MPRINT(EM_CREATE_GROUPING):   if ((nonEventCount = 0) AND (eventCount = 0)) then do;
MPRINT(EM_CREATE_GROUPING):   groupresprate=0;
MPRINT(EM_CREATE_GROUPING):   groupNonresprate = 0;
MPRINT(EM_CREATE_GROUPING):   eventRate = 0;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   groupresprate = eventCount / (eventCount + nonEventCount) * 100;
MPRINT(EM_CREATE_GROUPING):   groupNonRespRate = 100 - groupRespRate;
MPRINT(EM_CREATE_GROUPING):   eventRate = eventCount / 359 * 100;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = nonEventCount / 2015 * 100;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   output gini tempcoarse;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 176 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.GINI has 144 observations and 4 variables.
NOTE: The data set WORK.TEMPCOARSE has 144 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=gini;
MPRINT(EM_CREATE_GROUPING):   by _variable_ descending groupresprate;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 144 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 144 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep= _variable_ _gini_);
MPRINT(EM_CREATE_GROUPING):   retain between within cumresp cumnresp;
MPRINT(EM_CREATE_GROUPING):   set gini(keep=_variable_ eventCount nonEventCount);
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   if first._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   between = 0;
MPRINT(EM_CREATE_GROUPING):   within = 0;
MPRINT(EM_CREATE_GROUPING):   cumresp = 0;
MPRINT(EM_CREATE_GROUPING):   cumnresp = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   between + 2 * cumnresp * eventCount;
MPRINT(EM_CREATE_GROUPING):   within + nonEventCount * eventCount;
MPRINT(EM_CREATE_GROUPING):   cumresp + eventCount;
MPRINT(EM_CREATE_GROUPING):   cumnresp + nonEventCount;
MPRINT(EM_CREATE_GROUPING):   if last._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   if ^(cumnresp=0 or cumresp=0) then do;
MPRINT(EM_CREATE_GROUPING):   _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
MPRINT(EM_CREATE_GROUPING):   output;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 144 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 32 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(EM_CREATE_GROUPING):   rename _variable_ = display_var _proc_var_ = _variable_;
MPRINT(EM_CREATE_GROUPING):   keep _variable_ _proc_var_ label;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPDISPLAYVAR has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: The data set WORK.TEMPDISPLAYVAR has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data EMWS8.BINNING_COARSE;
MPRINT(EM_CREATE_GROUPING):   length display_Var $32 label _label_ $200 role $10 _group_ 8;
MPRINT(EM_CREATE_GROUPING):   merge tempdisplayvar tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   label display_var = "Variable" eventRate = "Event Rate" nonEventRate = "Non-Event Rate" _group_ = "Group" role = "Role" _gini_ = "Gini Coefficient" eventcount = "Event Count" noneventcount = "Non-Event Count" groupresprate = 
"Group Event Rate" groupnonresprate = "Group Non-Event Rate" ;
MPRINT(EM_CREATE_GROUPING):   eventCount = round(eventCount, .001);
MPRINT(EM_CREATE_GROUPING):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_CREATE_GROUPING):   groupRespRate = round(groupRespRate, .001);
MPRINT(EM_CREATE_GROUPING):   drop _variable_ index index2 respper nrespper;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Variable _label_ is uninitialized.
NOTE: Variable role is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _variable_ by input data sets. This may cause unexpected results.
WARNING: The variable index in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable index2 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 32 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: There were 144 observations read from the data set WORK.TEMPCOARSE.
NOTE: There were 32 observations read from the data set WORK.GINI.
NOTE: The data set EMWS8.BINNING_COARSE has 144 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets library=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPCOARSE (memtype=DATA).
NOTE: Deleting WORK.GINI (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas";
MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   FILE Y;
MPRINT(EM_GENERATE_LABELVALUES):   put " length _LABEL_ $200;";
MPRINT(EM_GENERATE_LABELVALUES):   put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=21. April 2016 18.28 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 2 records were written to the file Y.
      The minimum record length was 21.
      The maximum record length was 83.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_SPLITVALS out=work.sortedsplitval;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var _split_Value_;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.SORTEDSPLITVAL has 144 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var bin;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   if display_var eq '' then delete;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 112 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   keep _variable_ display_var missgrp;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=temp out=class;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_ LB;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 112 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 112 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   file Y MOD;
MPRINT(EM_GENERATE_LABELVALUES):   length string $200 flag 8;
MPRINT(EM_GENERATE_LABELVALUES):   retain string flag;
MPRINT(EM_GENERATE_LABELVALUES):   set class end=eof;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_;
MPRINT(EM_GENERATE_LABELVALUES):   index = kindex(_variable_, "BIN_");
MPRINT(EM_GENERATE_LABELVALUES):   if index gt 0 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then do;';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   if LB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 1;
MPRINT(EM_GENERATE_LABELVALUES):   *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._Group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   if UB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!'< '!!strip(UB)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag=1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string= " UB="!!strip(UB)!!";";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   put "end;";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string = "_LABEL_='"!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag ne 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   tempstring = strip(string)!!', '!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   length = length(tempstring);
MPRINT(EM_GENERATE_LABELVALUES):   if length < 195 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = tempstring;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)||",...";
MPRINT(EM_GENERATE_LABELVALUES):   flag=1;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      243:30   295:37   355:23   
NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=108,
      Last Modified=21. April 2016 18.28 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 512 records were written to the file Y.
      The minimum record length was 1.
      The maximum record length was 61.
NOTE: There were 112 observations read from the data set WORK.CLASS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
NOTE: %INCLUDE (level 1) file Y is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas.
129435    + length _LABEL_ $200;
MPRINT(EM_GENERATE_LABELVALUES):   length _LABEL_ $200;
129436    + label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";
MPRINT(EM_GENERATE_LABELVALUES):   label _LABEL_= "Group Values";
129437    +
129438    +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then
129439    +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then _LABEL_='0';
129440    +else
129441    +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then
129442    +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then _LABEL_='1';
129443    +
129444    +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then
129445    +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then _LABEL_='0';
129446    +else
129447    +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then
129448    +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then _LABEL_='1';
129449    +
129450    +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then
129451    +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then _LABEL_='0';
129452    +else
129453    +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then
129454    +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then _LABEL_='1';
129455    +
129456    +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then
129457    +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then _LABEL_='0';
129458    +else
129459    +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then
129460    +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then _LABEL_='1';
129461    +
129462    +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then
129463    +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then _LABEL_='0';
129464    +else
129465    +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then
129466    +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then _LABEL_='1';
129467    +
129468    +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
129469    +_LABEL_='AcceptedCmpTotal< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='AcceptedCmpTotal< 0';
129470    +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
129471    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129472    +else
129473    +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
129474    +_LABEL_='0<= AcceptedCmpTotal';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= AcceptedCmpTotal';
129475    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129476    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129477    +
129478    +if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
129479    +_LABEL_='Age< 38';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Age< 38';
129480    +UB=38;
MPRINT(EM_GENERATE_LABELVALUES):   UB=38;
129481    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129482    +else
129483    +if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
129484    +_LABEL_='38<= Age< 46';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='38<= Age< 46';
129485    +UB=46;
MPRINT(EM_GENERATE_LABELVALUES):   UB=46;
129486    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129487    +else
129488    +if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
129489    +_LABEL_='46<= Age< 57';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='46<= Age< 57';
129490    +UB=57;
MPRINT(EM_GENERATE_LABELVALUES):   UB=57;
129491    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129492    +else
129493    +if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
129494    +_LABEL_='57<= Age';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='57<= Age';
129495    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129496    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129497    +
129498    +if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
129499    +_LABEL_='Frq< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Frq< 6';
129500    +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
129501    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129502    +else
129503    +if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
129504    +_LABEL_='6<= Frq< 12';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= Frq< 12';
129505    +UB=12;
MPRINT(EM_GENERATE_LABELVALUES):   UB=12;
129506    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129507    +else
129508    +if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
129509    +_LABEL_='12<= Frq< 18';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='12<= Frq< 18';
129510    +UB=18;
MPRINT(EM_GENERATE_LABELVALUES):   UB=18;
129511    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129512    +else
129513    +if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
129514    +_LABEL_='18<= Frq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='18<= Frq';
129515    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129516    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129517    +
129518    +if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
129519    +_LABEL_='Income< 35268';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Income< 35268';
129520    +UB=35268;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35268;
129521    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129522    +else
129523    +if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
129524    +_LABEL_='35268<= Income< 52157';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35268<= Income< 52157';
129525    +UB=52157;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52157;
129526    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129527    +else
129528    +if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
129529    +_LABEL_='52157<= Income< 69486';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52157<= Income< 69486';
129530    +UB=69486;
MPRINT(EM_GENERATE_LABELVALUES):   UB=69486;
129531    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129532    +else
129533    +if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
129534    +_LABEL_='69486<= Income';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='69486<= Income';
129535    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129536    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129537    +
129538    +if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
129539    +_LABEL_='Kidhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Kidhome< 0';
The SAS System

129540    +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
129541    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129542    +else
129543    +if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
129544    +_LABEL_='0<= Kidhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Kidhome< 1';
129545    +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
129546    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129547    +else
129548    +if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
129549    +_LABEL_='1<= Kidhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Kidhome';
129550    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129551    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129552    +
129553    +if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
129554    +_LABEL_='Mnt< 72';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Mnt< 72';
129555    +UB=72;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72;
129556    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129557    +else
129558    +if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
129559    +_LABEL_='72<= Mnt< 405.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72<= Mnt< 405.5';
129560    +UB=405.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=405.5;
129561    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129562    +else
129563    +if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
129564    +_LABEL_='405.5<= Mnt< 1064';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='405.5<= Mnt< 1064';
129565    +UB=1064;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1064;
129566    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129567    +else
129568    +if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
129569    +_LABEL_='1064<= Mnt';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1064<= Mnt';
129570    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129571    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129572    +
129573    +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
129574    +_LABEL_='MntFishProducts< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFishProducts< 3';
129575    +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
129576    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129577    +else
129578    +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
129579    +_LABEL_='3<= MntFishProducts< 13';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= MntFishProducts< 13';
129580    +UB=13;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13;
129581    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129582    +else
129583    +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
129584    +_LABEL_='13<= MntFishProducts< 47';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13<= MntFishProducts< 47';
129585    +UB=47;
MPRINT(EM_GENERATE_LABELVALUES):   UB=47;
129586    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129587    +else
129588    +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
129589    +_LABEL_='47<= MntFishProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='47<= MntFishProducts';
129590    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129591    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129592    +
129593    +if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
129594    +_LABEL_='MntFruits< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFruits< 2';
129595    +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
129596    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129597    +else
129598    +if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
129599    +_LABEL_='2<= MntFruits< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= MntFruits< 9';
129600    +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
129601    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129602    +else
129603    +if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
129604    +_LABEL_='9<= MntFruits< 35';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntFruits< 35';
129605    +UB=35;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35;
129606    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129607    +else
129608    +if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
129609    +_LABEL_='35<= MntFruits';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35<= MntFruits';
129610    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129611    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129612    +
129613    +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
129614    +_LABEL_='MntGoldProds< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntGoldProds< 9';
129615    +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
129616    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129617    +else
129618    +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
129619    +_LABEL_='9<= MntGoldProds< 25';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntGoldProds< 25';
129620    +UB=25;
MPRINT(EM_GENERATE_LABELVALUES):   UB=25;
129621    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129622    +else
129623    +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
129624    +_LABEL_='25<= MntGoldProds< 59';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='25<= MntGoldProds< 59';
129625    +UB=59;
MPRINT(EM_GENERATE_LABELVALUES):   UB=59;
129626    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129627    +else
129628    +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
129629    +_LABEL_='59<= MntGoldProds';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='59<= MntGoldProds';
129630    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129631    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129632    +
129633    +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
129634    +_LABEL_='MntMeatProducts< 17';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntMeatProducts< 17';
129635    +UB=17;
MPRINT(EM_GENERATE_LABELVALUES):   UB=17;
129636    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129637    +else
129638    +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
129639    +_LABEL_='17<= MntMeatProducts< 72';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='17<= MntMeatProducts< 72';
129640    +UB=72;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72;
129641    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129642    +else
129643    +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
129644    +_LABEL_='72<= MntMeatProducts< 246';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72<= MntMeatProducts< 246';
129645    +UB=246;
MPRINT(EM_GENERATE_LABELVALUES):   UB=246;
129646    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129647    +else
129648    +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
129649    +_LABEL_='246<= MntMeatProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='246<= MntMeatProducts';
129650    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129651    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129652    +
129653    +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
129654    +_LABEL_='MntSweetProducts< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntSweetProducts< 2';
129655    +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
129656    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129657    +else
129658    +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
129659    +_LABEL_='2<= MntSweetProducts< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= MntSweetProducts< 9';
129660    +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
129661    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129662    +else
129663    +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
129664    +_LABEL_='9<= MntSweetProducts< 35';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntSweetProducts< 35';
129665    +UB=35;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35;
129666    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129667    +else
129668    +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
129669    +_LABEL_='35<= MntSweetProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35<= MntSweetProducts';
129670    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129671    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129672    +
129673    +if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
129674    +_LABEL_='MntWines< 24';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntWines< 24';
129675    +UB=24;
MPRINT(EM_GENERATE_LABELVALUES):   UB=24;
129676    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129677    +else
129678    +if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
129679    +_LABEL_='24<= MntWines< 183.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='24<= MntWines< 183.5';
129680    +UB=183.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=183.5;
129681    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129682    +else
129683    +if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
129684    +_LABEL_='183.5<= MntWines< 508';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='183.5<= MntWines< 508';
129685    +UB=508;
MPRINT(EM_GENERATE_LABELVALUES):   UB=508;
129686    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129687    +else
129688    +if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
129689    +_LABEL_='508<= MntWines';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='508<= MntWines';
129690    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129691    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129692    +
129693    +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
129694    +_LABEL_='MonthsAsCustomer< 69';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MonthsAsCustomer< 69';
129695    +UB=69;
MPRINT(EM_GENERATE_LABELVALUES):   UB=69;
129696    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129697    +else
129698    +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
129699    +_LABEL_='69<= MonthsAsCustomer< 83';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='69<= MonthsAsCustomer< 83';
129700    +UB=83;
MPRINT(EM_GENERATE_LABELVALUES):   UB=83;
129701    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129702    +else
129703    +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
129704    +_LABEL_='83<= MonthsAsCustomer< 98';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='83<= MonthsAsCustomer< 98';
129705    +UB=98;
MPRINT(EM_GENERATE_LABELVALUES):   UB=98;
129706    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129707    +else
129708    +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
129709    +_LABEL_='98<= MonthsAsCustomer';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='98<= MonthsAsCustomer';
129710    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129711    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129712    +
129713    +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
129714    +_LABEL_='NumCatalogPurchases< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumCatalogPurchases< 0';
129715    +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
129716    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129717    +else
129718    +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
129719    +_LABEL_='0<= NumCatalogPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= NumCatalogPurchases< 2';
129720    +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
129721    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129722    +else
129723    +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
129724    +_LABEL_='2<= NumCatalogPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumCatalogPurchases< 4';
129725    +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
129726    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129727    +else
129728    +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
129729    +_LABEL_='4<= NumCatalogPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumCatalogPurchases';
129730    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129731    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129732    +
129733    +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
129734    +_LABEL_='NumDealsPurchases< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDealsPurchases< 1';
129735    +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
129736    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129737    +else
129738    +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
129739    +_LABEL_='1<= NumDealsPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= NumDealsPurchases< 2';
129740    +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
129741    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129742    +else
129743    +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
129744    +_LABEL_='2<= NumDealsPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumDealsPurchases< 3';
129745    +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
129746    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129747    +else
129748    +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
129749    +_LABEL_='3<= NumDealsPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDealsPurchases';
129750    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129751    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129752    +
129753    +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
129754    +_LABEL_='NumDistPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDistPurchases< 3';
129755    +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
129756    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129757    +else
129758    +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
129759    +_LABEL_='3<= NumDistPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDistPurchases< 6';
129760    +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
129761    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129762    +else
129763    +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
129764    +_LABEL_='6<= NumDistPurchases< 10';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumDistPurchases< 10';
129765    +UB=10;
MPRINT(EM_GENERATE_LABELVALUES):   UB=10;
129766    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129767    +else
129768    +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
129769    +_LABEL_='10<= NumDistPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='10<= NumDistPurchases';
129770    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129771    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129772    +
129773    +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
129774    +_LABEL_='NumStorePurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumStorePurchases< 3';
129775    +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
129776    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129777    +else
129778    +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
129779    +_LABEL_='3<= NumStorePurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumStorePurchases< 5';
129780    +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
129781    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129782    +else
129783    +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
129784    +_LABEL_='5<= NumStorePurchases< 8';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumStorePurchases< 8';
129785    +UB=8;
MPRINT(EM_GENERATE_LABELVALUES):   UB=8;
129786    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129787    +else
129788    +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
129789    +_LABEL_='8<= NumStorePurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='8<= NumStorePurchases';
129790    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129791    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129792    +
129793    +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
129794    +_LABEL_='NumWebPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebPurchases< 2';
129795    +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
129796    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129797    +else
129798    +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
129799    +_LABEL_='2<= NumWebPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumWebPurchases< 4';
129800    +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
129801    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129802    +else
129803    +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
129804    +_LABEL_='4<= NumWebPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumWebPurchases< 6';
129805    +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
129806    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129807    +else
129808    +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
129809    +_LABEL_='6<= NumWebPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebPurchases';
129810    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129811    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129812    +
129813    +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
129814    +_LABEL_='NumWebVisitsMonth< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebVisitsMonth< 3';
129815    +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
129816    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129817    +else
129818    +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
129819    +_LABEL_='3<= NumWebVisitsMonth< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumWebVisitsMonth< 6';
129820    +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
129821    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129822    +else
129823    +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
129824    +_LABEL_='6<= NumWebVisitsMonth< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebVisitsMonth< 7';
129825    +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
129826    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129827    +else
129828    +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
129829    +_LABEL_='7<= NumWebVisitsMonth';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= NumWebVisitsMonth';
129830    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129831    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129832    +
129833    +if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
129834    +_LABEL_='RFMstat< 10.34';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RFMstat< 10.34';
129835    +UB=10.34;
MPRINT(EM_GENERATE_LABELVALUES):   UB=10.34;
129836    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129837    +else
129838    +if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
129839    +_LABEL_='10.34<= RFMstat< 128.09';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='10.34<= RFMstat< 128.09';
129840    +UB=128.09;
MPRINT(EM_GENERATE_LABELVALUES):   UB=128.09;
129841    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129842    +else
129843    +if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
129844    +_LABEL_='128.09<= RFMstat< 455.22';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='128.09<= RFMstat< 455.22';
129845    +UB=455.22;
MPRINT(EM_GENERATE_LABELVALUES):   UB=455.22;
129846    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129847    +else
129848    +if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
129849    +_LABEL_='455.22<= RFMstat';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='455.22<= RFMstat';
129850    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129851    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129852    +
129853    +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
129854    +_LABEL_='RMntFrq< 13.25';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RMntFrq< 13.25';
129855    +UB=13.25;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13.25;
129856    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129857    +else
129858    +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
129859    +_LABEL_='13.25<= RMntFrq< 30.4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13.25<= RMntFrq< 30.4';
129860    +UB=30.4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=30.4;
129861    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129862    +else
129863    +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
129864    +_LABEL_='30.4<= RMntFrq< 52.86';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='30.4<= RMntFrq< 52.86';
129865    +UB=52.86;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52.86;
129866    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129867    +else
129868    +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
129869    +_LABEL_='52.86<= RMntFrq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52.86<= RMntFrq';
129870    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129871    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129872    +
129873    +if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
129874    +_LABEL_='Recency< 24';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Recency< 24';
129875    +UB=24;
MPRINT(EM_GENERATE_LABELVALUES):   UB=24;
129876    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129877    +else
129878    +if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
129879    +_LABEL_='24<= Recency< 48';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='24<= Recency< 48';
129880    +UB=48;
MPRINT(EM_GENERATE_LABELVALUES):   UB=48;
129881    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129882    +else
129883    +if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
129884    +_LABEL_='48<= Recency< 73';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='48<= Recency< 73';
129885    +UB=73;
MPRINT(EM_GENERATE_LABELVALUES):   UB=73;
129886    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129887    +else
129888    +if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
129889    +_LABEL_='73<= Recency';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='73<= Recency';
129890    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129891    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129892    +
129893    +if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
129894    +_LABEL_='Teenhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Teenhome< 0';
129895    +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
129896    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129897    +else
129898    +if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
129899    +_LABEL_='0<= Teenhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Teenhome< 1';
129900    +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
129901    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129902    +else
129903    +if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
129904    +_LABEL_='1<= Teenhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Teenhome';
129905    +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
129906    +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
129907    +
129908    +if DISPLAY_VAR='Complain' and _GROUP_ = 2 then
129909    +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Complain' and _GROUP_ = 2 then _LABEL_='0';
129910    +else
129911    +if DISPLAY_VAR='Complain' and _GROUP_ = 3 then
129912    +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Complain' and _GROUP_ = 3 then _LABEL_='1';
129913    +
129914    +if DISPLAY_VAR='Education' and _GROUP_ = 2 then
129915    +_LABEL_='GRADUATION';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Education' and _GROUP_ = 2 then _LABEL_='GRADUATION';
129916    +else
129917    +if DISPLAY_VAR='Education' and _GROUP_ = 3 then
129918    +_LABEL_='PHD';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 3 then _LABEL_='PHD';
129919    +else
129920    +if DISPLAY_VAR='Education' and _GROUP_ = 4 then
129921    +_LABEL_='MASTER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 4 then _LABEL_='MASTER';
129922    +else
129923    +if DISPLAY_VAR='Education' and _GROUP_ = 5 then
129924    +_LABEL_='2N CYCLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 5 then _LABEL_='2N CYCLE';
129925    +else
129926    +if DISPLAY_VAR='Education' and _GROUP_ = 6 then
129927    +_LABEL_='BASIC';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 6 then _LABEL_='BASIC';
129928    +
129929    +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then
129930    +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then _LABEL_='1';
129931    +else
129932    +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then
129933    +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then _LABEL_='0';
129934    +
129935    +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then
129936    +_LABEL_='MARRIED';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then _LABEL_='MARRIED';
129937    +else
129938    +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then
129939    +_LABEL_='TOGETHER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then _LABEL_='TOGETHER';
129940    +else
129941    +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then
129942    +_LABEL_='SINGLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then _LABEL_='SINGLE';
129943    +else
129944    +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then
129945    +_LABEL_='DIVORCED';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then _LABEL_='DIVORCED';
129946    +else
129947    +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then
129948    +_LABEL_='WIDOW';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then _LABEL_='WIDOW';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 144 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   *filename Y;
MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp1" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp2" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp3" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp4" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp5" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmpTotal" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Age" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Complain" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Education" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Frq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "HigherEducationBinary" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Income" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Kidhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Marital_Status" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Mnt" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFishProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFruits" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntGoldProds" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntMeatProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntSweetProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntWines" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MonthsAsCustomer" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumCatalogPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDealsPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDistPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumStorePurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebVisitsMonth" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RFMstat" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RMntFrq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Recency" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Teenhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 144 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_LABELVALUES):   delete class temp temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
MPRINT(EM_GENERATE_LABELVALUES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATESTAT";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.85160149533841;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
129949     
129950     *------------------------------------------------------------*;
129951     * End TRAIN: BINNING;
129952     *------------------------------------------------------------*;

129953     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
129954     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
129955     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
129956     ;
MPRINT(EM_DIAGRAM):   ;
129957     ;
MPRINT(EM_DIAGRAM):   ;
129958     ;
MPRINT(EM_DIAGRAM):   ;
129959     ;
MPRINT(EM_DIAGRAM):   ;
129960     quit;
MPRINT(EM_DIAGRAM):   quit;
129961     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
129962     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
129963     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
129964     /*; *"; *'; */
129965     ;
MPRINT(EM_DIAGRAM):   ;
129966     run;
MPRINT(EM_DIAGRAM):   run;
129967     quit;
MPRINT(EM_DIAGRAM):   quit;
129968     /* Reset EM Options */
129969     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
129970     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
129971     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
129972     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
129973     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
129974     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
