MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.47 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                15.47 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0I95QZS "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0I95QZS new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.47 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.47 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
28623      proc freq data=EMWS8.BINNING_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.BINNING_VariableSet noprint;
28624      table ROLE*LEVEL/out=WORK.BINNINGMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BINNINGMETA;
28625      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.BINNINGMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28626      proc print data=WORK.BINNINGMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BINNINGMETA label noobs;
28627      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
28628      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
28629      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
28630      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
28631      run;

NOTE: There were 6 observations read from the data set WORK.BINNINGMETA.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28632      title10;
MPRINT(EM_DIAGRAM):   title10;
28633      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29003      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29004      * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
29005      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
29006      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

29007      %let EMEXCEPTIONSTRING=;
29008      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29009      * TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   * TRAIN: BINNING;
29010      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29011      %let EM_ACTION = TRAIN;
29012      %let syscc = 0;
29013      %macro main;
29014      
29015        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
29016        %include temp;
29017        filename temp;
29018      
29019        %setProperties;
29020      
29021        %if %upcase(&EM_ACTION) = CREATE %then %do;
29022          filename temp catalog 'sashelp.emmdfy.binning_create.source';
29023          %include temp;
29024          filename temp;
29025      
29026          %create;
29027        %end;
29028      
29029         %else
29030         %if %upcase(&EM_ACTION) = TRAIN %then %do;
29031      
29032             filename temp catalog 'sashelp.emmdfy.binning_train.source';
29033             %include temp;
29034             filename temp;
29035             %train;
29036         %end;
29037      
29038        %else
29039        %if %upcase(&EM_ACTION) = SCORE %then %do;
29040          filename temp catalog 'sashelp.emmdfy.binning_score.source';
29041          %include temp;
29042          filename temp;
29043      
29044          %score;
29045      
29046        %end;
29047      
29048        %else
29049        %if %upcase(&EM_ACTION) = REPORT %then %do;
29050      
29051             filename temp catalog 'sashelp.emmdfy.binning_report.source';
29052             %include temp;
29053             filename temp;
29054      
29055             %report;
29056         %end;
29057      
29058         %doendm:
29059      %mend main;
29060      
29061      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
29063     +%macro SetProperties;
29065     +     /* IGN options */
29066     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
29067     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
29068     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
29070     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
29071     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
29072     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
29073     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
29074     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
29075     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
29076     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
29077     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
29078     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
29079     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
29080     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
29081     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
29082     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
29083     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
29086     +%mend SetProperties;
29087     +%macro appendfiles(fileref1, fileref2);
29088     +     data _null_;
29089     +       length c $256;
29090     +       fid1=fopen("&fileref1",'A');
29091     +       fid2=fopen("&fileref2",'I');
29092     +       cval = finfo(fid2,'lrecl');
29093     +       put cval= fid1= fid2=;
29094     +       if (fid2 > 0) then
29095     +         do while(fread(fid2)=0);
29096     +           rc = fget(fid2,c,256);
29097     +           _msg_=sysmsg();
29098     +           /* put rc= c= _msg_=; */
29099     +           rc = fput(fid1,strip(c));
29100     +           rc = fwrite(fid1);
29101     +         end;
29102     +         _msg_=sysmsg();
29103     +         put _msg_=;
29104     +       rc = fclose(fid1);
29105     +       rc = fclose(fid2);
29106     +     run;
29107     +%mend appendfiles;
29109     +%macro buildOptScoreCode;
29111     +    %em_register(key=BINCODE, type=FOLDER);
29113     +    filename x catalog 'sashelp.emutil.em_deldir.source';
29114     +    %inc x;
29115     +    filename x;
29116     +    %delDir(folder=%nrbquote(&em_user_bincode));
29118     +    data _null_; length rc $200;
29119     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
29120     +    run;
29122     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
29124     +    %let dsid = %sysfunc(open(class_nosv));
29125     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
29126     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
29128     +    %let oldname=;
29129     +    %do %while(^%sysfunc(fetch(&dsid)));
29130     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
29131     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
29133     +        %if &name ne &oldname %then %do;
29134     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
29135     +             data _null_;
29136     +                length string $200 flag endflag 8;
29137     +                retain string flag endflag;
29138     +                set class_nosv end=eof;
29139     +                where DISPLAY_VAR ="&name";
29140     +                by _variable_ _group_;
29141     +                file _F1;
29142     +                index = kindex(_variable_, "BIN_");
29143     +                if index gt 0 then do;
29144     +                   if first._variable_ then do;
29145     +                      put ' ';
29146     +                      put "&EM_CODEBAR;";
29147     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
29148     +                      put string;
29149     +                      put "&EM_CODEBAR;";
29151     +                      if origLabel ne "" then do;
29152     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
29153     +                            put string;
29154     +                            string = tranwrd(origLabel,"'","''");
29155     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
29156     +                            put string;
29157     +                      end;
29158     +                      else do;
29159     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
29160     +                             put string;
29161     +                      end;
29163     +                      put ' ';
29165     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29166     +                      put string;
29167     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29168     +                      put string;
29169     +                      put "end;";
29170     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29171     +                      put string;
29172     +                   end;
29173     +                   if first._group_ then do;
29174     +                      flag = 0;
29175     +                      endflag = 1;
29176     +                      if ^first._variable_ then do;
29177     +                         put "else";
29178     +                      end;
29179     +                      if LB ne . then do;
29180     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
29181     +                      end;
29182     +                      else do;
29183     +                         flag = 1;
29184     +                         string = "if";
29185     +                      end;
29186     +                   end;
29187     +                   if last._Group_ then do;
29188     +                      if UB ne . then do;
29189     +                        if flag ne 1 then do;
29190     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
29191     +                        end;
29192     +                        else do;
29193     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
29194     +                        end;
29195     +                      end;
29196     +                      else do;
29197     +                         if flag=1 then do;
29198     +                            string = strip(DISPLAY_VAR) ;
29199     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
29200     +                            endflag=0;
29201     +                            string="";
29202     +                         end;
29203     +                         else do;
29204     +                            string = strip(string)!!" then do;";
29205     +                         end;
29206     +                      end;
29207     +                      put string;
29208     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
29209     +                      put string;
29210     +                      if endflag eq 1 then do;
29211     +                        put "end;";
29212     +                      end;
29213     +                   end;
29214     +                   if last._variable_ then do;
29215     +                     string = "end;";
29216     +                     put string;
29217     +                   end;
29219     +                end;
29220     +                else do;
29221     +                   _split_value_ = tranwrd(_split_value_,"'","''");
29222     +                   if first._group_ then do;
29223     +                      flag=0;
29224     +                      if ^first._variable_ then
29225     +                         put 'else';
29226     +                      else do;
29227     +                         put ' ';
29228     +                         put "&EM_CODEBAR;";
29229     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
29230     +                         put string;
29231     +                         put "&EM_CODEBAR;";
29233     +                         if origLabel ne "" then do;
29234     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
29235     +                               put string;
29236     +                               string = tranwrd(origLabel,"'","''");
29237     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
29238     +                               put string;
29239     +                         end;
29240     +                         else do;
29241     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
29242     +                               put string;
29243     +                         end;
29245     +                         put ' ';
29247     +                         if format ne '' then do;
29248     +                            if first._variable_ then do;
29249     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
29250     +                               put string;
29251     +                               string = '%dmnormip(_UFormat);';
29252     +                               put string;
29254     +                               string ="if MISSING(_UFORMAT) then do;";
29255     +                               put string;
29256     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29257     +                               put string;
29258     +                               put "end;";
29260     +                               string="else if NOT MISSING(_UFORMAT) then do;";
29261     +                               put string;
29263     +                            end;
29264     +                         end;
29265     +                         else do;
29266     +                            if type = 'N' then do;
29267     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29268     +                              put string;
29269     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29270     +                              put string;
29271     +                              put "end;";
29273     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29274     +                              put string;
29275     +                            end;
29276     +                            else if type='C' then do;
29277     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
29278     +                              put string;
29279     +                              string = '%dmnormip(_UFormat);';
29280     +                              put string;
29282     +                              string ="if MISSING(_UFORMAT) then do;";
29283     +                              put string;
29284     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29285     +                              put string;
29286     +                              put "end;";
29288     +                              string="else if NOT MISSING(_UFORMAT) then do;";
29289     +                              put string;
29290     +                              string = '%dmnormip(_UFormat);';
29291     +                              put string;
29292     +                           end;
29293     +                         end;
29294     +                      end;
29295     +                      if format ne '' OR type='C' then do;
29296     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
29297     +                      end;
29298     +                      else do;
29299     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
29300     +                      end;
29301     +                   end;
29302     +                   else do;
29303     +                      if flag ne 1 then do;
29304     +                       if format ne '' OR type='C' then do;
29305     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
29306     +                       end;
29307     +                       else do;
29308     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
29309     +                       end;
29310     +                         length = length(tempstring);
29312     +                         if length < 195 then do;
29313     +                            string = tempstring;
29314     +                         end;
29315     +                         else do;
29317     +                            string = strip(string);
29318     +                            put string;
29319     +                            string = ") then do;";
29320     +                            put string;
29322     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
29323     +                            put string;
29324     +                            put "end;";
29326     +                            put 'else';
29327     +                            if format ne '' OR type='C' then do;
29328     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
29329     +                            end;
29330     +                            else do;
29331     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
29332     +                            end;
29333     +                         end;
29334     +                      end;
29335     +                   end;
29337     +                   if last._group_ then do;
29338     +                      string = strip(string);
29339     +                      put string;
29341     +                      string = ") then do;";
29342     +                      put string;
29344     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
29345     +                      put string;
29346     +                      put "end;";
29347     +                   end;
29349     +                   if last._variable_ then do;
29350     +                     put "else do;";
29352     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29353     +                     put string;
29355     +                     put "end;";
29356     +                     put "end;";
29357     +                   end;
29358     +                end;
29359     +             run;
29361     +             %let oldname = &name;
29362     +        %end;
29363     +    %end;
29364     +    %let dsid = %sysfunc(close(&dsid));
29366     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
29367     +    data _null_;
29368     +       file _F1;
29369     +       put "length _UFormat $200;";
29370     +       put "drop _UFormat;";
29371     +       put "_UFormat='';";
29372     +    run;
29373     +    filename _F1;
29375     +   %em_register(key=EMSCOREVAR, type=DATA);
29376     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
29377     +   proc datasets lib=&em_lib nolist;
29378     +      delete &scorevarDs;
29379     +   run;
29380     +   quit;
29382     +   %let filrf=mydir;
29383     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
29384     +   %let did=%sysfunc(dopen(&filrf));
29386     +   %if &did %then %do;  %PUT  did= &did;
29387     +       %let memcount=%sysfunc(dnum(&did));
29388     +       %if &memcount > 0 %then %do;
29389     +           data &em_user_emscorevar;
29390     +              length Name $32 formula $70 file $200;
29391     +              keep NAME Formula file;
29392     +              formula  = '';
29393     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
29394     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
29395     +               output;
29396     +           %end;
29397     +           %do i=1 %to &memcount;
29398     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
29399     +               %let newvar = %scan(&name, 1, .);
29400     +               %if "&newvar" ne "_ALL_" %then %do;
29401     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
29402     +                   output;
29403     +               %end;
29404     +           %end;
29406     +           run;
29407     +       %end;
29408     +       %let did = %sysfunc(dclose(&did));
29409     +  %end;
29411     +   %doendu:
29412     +%mend buildOptScoreCode;
29415     +%macro buildScoreCode(flowCode, publishCode);
29418     +  filename x "&flowCode";
29420     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
29421     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
29422     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
29424     +  data temp;
29425     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
29426     +    by display_var _Split_value_;
29427     +     if upcase(_Split_value_) ne 'MISSING';
29428     +   run;
29430     +   data temp_missing;
29431     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
29432     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
29433     +     by display_var _Split_value_;
29434     +     if upcase(_Split_value_) eq 'MISSING';
29435     +     keep _variable_ display_var missgrp;
29436     +   run;
29438     +   proc sort data=temp_missing; by display_var missgrp; run;
29440     +   data temp_missing;
29441     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
29442     +     by display_var missgrp;
29443     +     if ^_a then delete;
29444     +     keep _variable_ display_var missgrp ;
29445     +   run;
29447     +   data temp;
29448     +     merge temp temp_missing;
29449     +     by display_var;
29450     +     if display_Var eq '' then delete;
29451     +    run;
29453     +    /* pull in wtev values */
29454     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
29455     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
29456     +    proc sort data=temp;  by display_var _group_; run;
29458     +   data temp;
29459     +      merge temp tempcoarse(keep=display_var _group_  role) ;
29460     +      by display_var _group_;
29461     +    run;
29463     +    data temp;
29464     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
29465     +      by display_var;
29467     +      if _group_ = . then delete;
29468     +      if _variable_ = '' then delete;
29469     +    run;
29471     +    proc sort data=temp out=class;
29472     +       by _variable_ _group_ LB;
29473     +    run;
29475     +    data _null_;
29476     +      file X;
29478     +      put "length _UFormat $200;";
29479     +      put "drop _UFormat;";
29480     +      put "_UFormat='';";
29481     +    run;
29483     +    data class_nosv;
29484     +      set class;
29485     +      if upcase(role)="INPUT";
29486     +    run;
29488     +    data _null_;
29489     +       file X MOD;
29490     +       length string $200 flag endflag 8;
29491     +       retain string flag endflag;
29492     +       set class_nosv end=eof;
29493     +       by _variable_ _group_;
29495     +       index = kindex(_variable_, "BIN_");
29496     +       if index gt 0 then do;
29498     +         if first._variable_ then do;
29499     +            put ' ';
29500     +            put "&EM_CODEBAR;";
29501     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
29502     +            put string;
29503     +            put "&EM_CODEBAR;";
29506     +            if origLabel ne "" then do;
29507     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
29508     +              put string;
29509     +              string = tranwrd(origLabel,"'","''");
29510     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
29511     +              put string;
29512     +            end;
29513     +            else do;
29514     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
29515     +             put string;
29516     +            end;
29518     +            put ' ';
29520     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29521     +            put string;
29522     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29523     +            put string;
29524     +            put "end;";
29525     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29526     +            put string;
29527     +          end;
29528     +           if first._group_ then do;
29529     +              flag = 0;
29530     +              endflag = 1;
29531     +              if ^first._variable_ then do;
29532     +                put "else";
29533     +              end;
29534     +              if LB ne . then do;
29535     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
29536     +              end;
29537     +              else do;
29538     +                 flag = 1;
29539     +                 string = "if";
29540     +              end;
29542     +           end;
29543     +           if last._Group_ then do;
29544     +              if UB ne . then do;
29545     +                if flag ne 1 then do;
29546     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
29547     +                end;
29548     +                else do;
29549     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
29550     +                end;
29551     +              end;
29552     +              else do;
29553     +                 if flag=1 then do;
29554     +                   string = strip(DISPLAY_VAR) ;
29555     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
29556     +                   endflag = 0;
29557     +                   string="";
29558     +                 end;
29559     +                 else do;
29560     +                   string = strip(string)!!" then do;";
29561     +                 end;
29562     +              end;
29563     +              put string;
29565     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
29566     +              put string;
29567     +              if endflag eq 1 then do;
29568     +                put "end;";
29569     +              end;
29570     +           end;
29571     +           if last._variable_ then do;
29572     +             string = "end;";
29573     +             put string;
29574     +           end;
29575     +       end;
29576     +       else do;
29577     +           _split_value_ = tranwrd(_split_value_,"'","''");
29578     +           if first._group_ then do;
29579     +              flag=0;
29580     +              if ^first._variable_ then
29581     +                 put 'else';
29582     +              else do;
29583     +                 put ' ';
29584     +                 put "&EM_CODEBAR;";
29585     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
29586     +                 put string;
29587     +                 put "&EM_CODEBAR;";
29589     +                 if origLabel ne "" then do;
29590     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
29591     +                   put string;
29592     +                   string = tranwrd(origLabel,"'","''");
29593     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
29594     +                   put string;
29595     +                 end;
29596     +                 else do;
29597     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
29598     +                   put string;
29599     +                 end;
29601     +                 put ' ';
29603     +                if format ne '' then do;
29604     +                  if first._variable_ then do;
29605     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
29606     +                    put string;
29607     +                    string = '%dmnormip(_UFormat);';
29608     +                    put string;
29610     +                     string ="if MISSING(_UFORMAT) then do;";
29611     +                     put string;
29612     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29613     +                     put string;
29614     +                     put "end;";
29616     +                     string="else if NOT MISSING(_UFORMAT) then do;";
29617     +                     put string;
29619     +                  end;
29620     +                end;
29621     +                else do;
29622     +                     if type = 'N' then do;
29623     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29624     +                       put string;
29625     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29626     +                       put string;
29627     +                       put "end;";
29629     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
29630     +                       put string;
29632     +                     end;
29633     +                     else if type='C' then do;
29634     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
29635     +                        put string;
29636     +                        string = '%dmnormip(_UFormat);';
29637     +                        put string;
29639     +                        string ="if MISSING(_UFORMAT) then do;";
29640     +                        put string;
29641     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29642     +                        put string;
29643     +                        put "end;";
29645     +                        string="else if NOT MISSING(_UFORMAT) then do;";
29646     +                        put string;
29647     +                        string = '%dmnormip(_UFormat);';
29648     +                        put string;
29649     +                    end;
29650     +                end;
29651     +              end;
29652     +              if format ne '' OR type='C' then do;
29653     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
29654     +              end;
29655     +              else do;
29656     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
29657     +              end;
29658     +           end;
29659     +           else do;
29660     +              if flag ne 1 then do;
29661     +                if format ne '' OR type='C' then do;
29662     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
29663     +                end;
29664     +                else do;
29665     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
29666     +                end;
29667     +                length = klength(tempstring);
29669     +                if length < 195 then do;
29670     +                   string = tempstring;
29671     +                end;
29672     +                else do;
29674     +                   string = strip(string);
29675     +                   put string;
29676     +                   string = ") then do;";
29677     +                   put string;
29679     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
29680     +                   put string;
29681     +                   put "end;";
29683     +                 /*  string = strip(string)||",'...';"; */
29685     +                   put 'else';
29686     +                   if format ne '' OR type='C' then do;
29687     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
29688     +                   end;
29689     +                   else do;
29690     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
29691     +                   end;
29694     +                end;
29695     +              end;
29696     +           end;
29698     +           if last._group_ then do;
29699     +              string = strip(string);
29700     +              put string;
29701     +              string = ") then do;";
29702     +              put string;
29704     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
29705     +              put string;
29706     +              put "end;";
29707     +           end;
29709     +           if last._variable_ then do;
29710     +             put "else do;";
29712     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
29713     +             put string;
29715     +             put "end;";
29716     +             put "end;";
29717     +           end;
29718     +         *end;
29719     +       end;
29720     +    run;
29722     +    /* generate PublishCode the same as flowscorecode */
29723     +    filename Y "&publishCode";
29725     +    /* if publishCode already exists, wipe it out first */
29726     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
29727     +      %let rc = %sysfunc(fdelete(Y));
29728     +    %end;
29730     +    %appendfiles(Y, X);
29732     +    filename X;
29733     +    filename Y;
29735     +    %buildOptScoreCode;
29737     +    proc datasets library=work nolist;
29738     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
29739     +    run;
29740     +    quit;
29742     +%mend buildScoreCode;
29744     +%macro buildMetaCode(DeltaCodeFile=);
29746     +   /* set variable roles based on New Role column in the Results table */
29747     +   data _null_;
29748     +      file &DeltaCodeFile;
29749     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
29750     +      %if &dsid %then %do;
29751     +        %let obs = %sysfunc(fetch(&dsid));
29752     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
29753     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
29754     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
29756     +        %do %while(&obs=0);
29757     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
29758     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
29759     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
29761     +          /* retrieve grp and woe names from varmappings dataset */
29762     +          %let choice = _VARIABLE_ = "&inputname";
29763     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
29764     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
29765     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
29766     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
29767     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
29769     +          put "if name = '&inputname' then role='REJECTED';";
29770     +          %if "&role" ne "DEFAULT" %then %do;
29771     +            put "if name = '&grpname' then role='&role';";
29772     +          %end;
29773     +          %else %do;
29774     +            put "if name = '&grpname' then role='&oldrole';";
29775     +          %end;
29776     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
29778     +          %let obs = %sysfunc(fetch(&dsid));
29779     +        %end;
29780     +      %end;
29781     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29782     +   run;
29784     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
29785     +   data _null_;
29786     +      file &DeltaCodeFile MOD;
29788     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
29789     +      %if &sdsid %then %do;
29790     +        %let sobs = %sysfunc(fetch(&sdsid));
29791     +        %do %while(&sobs=0);
29792     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
29793     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
29794     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
29795     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
29797     +          %let checkgrp = GRP_&checkname;
29798     +          %let lenname = %length(&checkgrp);
29799     +          %if %eval(&lenname-32) > 0 %then %do;
29800     +            %let checkgrp = %substr(&checkgrp, 1, 32);
29801     +          %end;
29803     +          %let choice = _VARIABLE_ ="&checkname";
29804     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
29806     +          /* if var not found in varmappings, delete variables; */
29807     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
29808     +          %if &vdsid eq 0 %then %do;
29809     +            put 'if name="&displayvar" then delete;';
29810     +            %let dispgrp = GRP_&displayvar;
29811     +            put 'if name="&dispgrp" then delete;';
29812     +          %end;
29814     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
29815     +          %let sobs = %sysfunc(fetch(&sdsid));
29816     +        %end;
29817     +      %end;
29818     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
29819     +   run;
29821     +%mend buildMetaCode;
29823     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
29825     +   proc sort data=&coarse out=sortedcoarse nodupkey;
29826     +     by display_var;
29827     +   run;
29828     +   proc sort data=&varmappings nodupkey;
29829     +     by _variable_;
29830     +   run;
29831     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
29832     +     proc sort data=&resultstable; by display_var; run;
29833     +   %end;
29835     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
29836     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
29837     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
29838     +        &resultstable (keep = display_var _new_role_ )
29839     +     %end;
29840     +     ;
29841     +     by display_var;
29842     +     length _role_ _new_role_ $10;
29843     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
29844     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
29845     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
29846     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
29847     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
29848     +           ;
29850     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
29851     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
29852     +                _role_ = "Rejected";
29853     +             else _role_ = "Input";
29854     +           %end;
29855     +           %else %do;
29856     +             _role_ = "Input";
29857     +           %end;
29858     +           if _new_role_ eq "" then _new_role_="Default";
29859     +      if ^_a then do;
29860     +        _gini_ = 0;
29861     +        _role_ = 'Rejected';
29862     +        if _new_role_ eq "" then _new_role_="Default";
29863     +      end;
29864     +   run;
29865     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
29866     +     by NAME;
29867     +   run;
29868     +   data outlabel;
29869     +     set outlabel;
29870     +     if _label_ = '' then _label_ = _variable_;
29871     +   run;
29872     +   data &resultstable;
29873     +     merge &resultstable(in=_a_) outlabel;
29874     +     by display_Var;
29875     +     if _a_ then output;
29876     +   run;
29877     +   proc datasets library=work nolist;
29878     +     delete sortedcoarse outlabel;
29879     +   run;
29880     +   quit;
29881     +   proc sort data=&resultstable nodupkey;
29882     +      by DESCENDING
29883     +        _gini_ display_Var;
29884     +   run;
29885     +   data &resultstable;
29886     +     set &resultstable;
29888     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
29889     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
29890     +     giniOrder = _N_;
29891     +     _gini_ = round(_GINI_, .001);
29892     +     drop _variable_;
29893     +   run;
29895     +   proc print data=&resultstable label;
29896     +   run;
29898     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
29899     +   data &coarse;
29900     +     set &coarse;
29901     +     length role $10;
29902     +     %let dsid = %sysfunc(open(&resultstable));
29903     +     %if &dsid %then %do;
29904     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
29905     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
29906     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
29908     +       %let obs = %sysfunc(fetch(&dsid));
29909     +       %do %while(&obs=0);
29910     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
29911     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
29912     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
29914     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
29915     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
29916     +            giniOrder = &order;
29917     +            role = "&role";
29918     +          end;
29920     +          %let obs = %sysfunc(fetch(&dsid));
29921     +       %end;
29922     +     %end;
29923     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29924     +   run;
29927     +%mend EM_GENERATE_RESULTSTABLE;
29929     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
29931     +    /* instantiate the zchar macro to be used in adding bin definition */
29932     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
29933     +    %inc _temp;
29934     +    filename _temp;
29936     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
29937     +      by _variable_ binFlag _group_ LB;
29938     +    run;
29940     +    data tempExport;
29941     +      set sortedFine;
29942     +      by _variable_ binFlag _group_;
29943     +      length _split_value_ $200;
29945     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
29946     +      if binFlag = 0 then do;
29947     +        index = kindex(_variable_, "BIN_");
29948     +        if index gt 0 then do;
29949     +          _LEVEL_ = "INTERVAL";
29950     +        end;
29951     +        _Split_value_ = _split_value_;
29952     +        output;
29953     +      end;
29954     +      else do;
29955     +         * if last._group_ then do;
29956     +          index = kindex(_variable_, "BIN_");
29957     +          if index gt 0 then do;
29958     +            _LEVEL_ = "INTERVAL";
29959     +          end;
29960     +          _Split_value_ = %zchar(UB);
29961     +          output;
29962     +         * end;
29963     +      end;
29965     +      rename display_Var = _variable_;
29966     +      keep display_var _level_ _group_ _split_value_ binFlag;
29967     +    run;
29969     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
29970     +       data &EXPORTGROUPING;
29971     +         set tempexport;
29972     +       run;
29973     +    %end;
29974     +    %else %do;
29975     +       /* determine if EXPORTGROUPING already exists */
29976     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
29977     +         data &EXPORTGROUPING;
29978     +            set &EXPORTGROUPING tempexport;
29979     +         run;
29980     +       %end;
29981     +       %else %do;
29982     +         data &EXPORTGROUPING;
29983     +            set tempexport;
29984     +         run;
29985     +       %end;
29986     +    %end;
29988     +    proc datasets lib=work nolist;
29989     +      delete sortedFine tempexport;
29990     +    run;
29991     +    quit;
29993     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_TRAIN.SOURCE.
29999     +%macro train;
30001     +   /* include training macros */
30002     +   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
30003     +   %include trtemp;
30004     +   filename trtemp;
30006     +   /* trick IGN into thinking it is a model node to build decmeta; further down, set %EM_MODEL ASSESS=N
30007     +   %let EM_TOOLTYPE = MODEL; */
30009     +   %if &EM_IMPORT_DATA eq %then %do;
30010     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN, 1;
30011     +       %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note , NOQUOTE));
30012     +       %put &em_codebar;
30013     +       %put &errmsg;
30014     +       %put &em_codebar;
30015     +       %goto doendm;
30016     +   %end;
30018     +   %if  &EM_NUM_TARGET ne 1 %then %do;
30019     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
30020     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, USE1TARGET_ERR  , NOQUOTE));
30022     +        %put &em_codebar;
30023     +        %put &errmsg;
30024     +        %put &em_codebar;
30025     +        %goto doendm;
30026     +   %end;
30028     +   %if  &EM_NUM_BINARY_TARGET ne 1 %then %do;
30029     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
30030     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, METADATA.USE1BINTARGET_ERR   , NOQUOTE));
30032     +        %put &em_codebar;
30033     +        %put &errmsg;
30034     +        %put &em_codebar;
30035     +        %goto doendm;
30036     +   %end;
30038     +   /* Initialize property macro variables */
30039     +   %SetProperties;
30041     +   /* retrieve target information */
30042     +   /* does decmeta exist?  If not, retrieve target information elsewhere */
30043     +   %global target_event;
30044     +   %let target_event=;
30045     +   %if "&EM_DEC_DECMETA" eq "" %then %do;
30046     +     /* retrieve type and format from variableset */
30047     +     %let eventorder = DESC;
30048     +     data temp;
30049     +       set &EM_DATA_VARIABLESET;
30050     +       where NAME ="%EM_BINARY_TARGET";
30051     +     run;
30052     +     %let dsid = %sysfunc(open(work.temp));
30053     +     %if &dsid %then %do;
30054     +       %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
30055     +       %let formatnum = %sysfunc(VARNUM(&dsid, FORMAT));
30056     +       %let ordernum  = %sysfunc(VARNUM(&dsid, ORDER));
30057     +       %let obs = %sysfunc(fetchobs(&dsid, 1));
30058     +       %let Target_type = %sysfunc(getvarc(&dsid, &typenum));
30059     +       %let Target_Format = %sysfunc(getvarc(&dsid, &formatnum));
30060     +       %let Target_Order  = %sysfunc(getvarc(&dsid, &ordernum));
30061     +       %if &TARGET_ORDER  = ASC %then %let eventorder = ASC;
30062     +          %else
30063     +       %if &TARGET_ORDER  = DESC %then %let eventorder = DESC;
30064     +          %else
30065     +       %if &TARGET_ORDER  = FMTASC %then %let eventorder = ASCFMT;
30066     +          %else
30067     +       %if &TARGET_ORDER  = FMTDESC %then %let eventorder = DESFMT;
30068     +     %end;
30069     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30071     +     /* retrieve target_event and Target_nonEvent values */
30072     +     proc dmdb data=&EM_IMPORT_DATA classout=EVENTOUT;
30073     +       target %EM_BINARY_TARGET;
30074     +       class  %EM_BINARY_TARGET(&eventorder);
30075     +     run;
30076     +     data _null_;
30077     +       dsid = open("EVENTOUT");
30078     +       if dsid>0 then do;
30079     +       levelnum = VARNUM(dsid, "LEVEL");
30080     +       if levelnum then do;
30081     +         if ^fetch(dsid) then
30082     +           call symput('TARGET_EVENT',   strip(getvarc(dsid, levelnum)));
30084     +         if ^fetch(dsid) then
30085     +           call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
30086     +       end;
30087     +       dsid=close(dsid);
30088     +       end;
30089     +     run;
30090     +     proc datasets library=work nolist;
30091     +        delete eventout;
30092     +     run;
30093     +     quit;
30094     +   %end;
30095     +   %else %do;
30097     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
30099     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
30100     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
30101     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
30103     +   %do %while(^ %sysfunc(fetch(&dsid)));
30104     +      %let Target_Event = %sysfunc(getvarc(&dsid, &vn_event));
30105     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
30106     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
30107     +   %end;
30108     +   %let dsid = %sysfunc(close(&dsid));
30110     +   %let dsid=%sysfunc(open(&EM_DEC_DECDATA));
30111     +     %let obs = %sysfunc(fetchobs(&dsid, 2));
30112     +     %let vn_nonevent = %sysfunc(varnum(&dsid, %EM_BINARY_TARGET));
30113     +     %let Target_NonEvent= %sysfunc(getvarc(&dsid, &vn_nonevent));
30114     +   %let dsid = %sysfunc(close(&dsid));
30115     +   %end;
30117     +   /* data sets */
30118     +   %EM_GETNAME(key=BINDATA,        type=DATA);
30119     +   %EM_GETNAME(key=SPLITVALS,      type=DATA);
30120     +   %EM_GETNAME(key=VARMAPPINGS,    type=DATA);
30121     +   %EM_GETNAME(key=BINMAPPINGS,    type=DATA);
30122     +   %EM_GETNAME(key=COARSE,          type=DATA);
30123     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
30124     +   %EM_GETNAME(key=RESULTSTABLE,   type=DATA);
30126     +   /* files */
30127     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);
30128     +   %EM_GETNAME(key=GROUPMAPPINGSCORECODE, type=FILE, extension=sas);
30130     +   /* if freeze eq Y and no finedetaildata exists, throw an exception */
30131     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
30132     +     %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) ne 1 %then %do;
30133     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOFINEDETAIL;
30134     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, nofinedetail_error , NOQUOTE));
30136     +        %put &em_codebar;
30137     +        %put &errmsg;
30138     +        %put &em_codebar;
30139     +        %goto doendm;
30140     +     %end;
30141     +   %end;
30143     +   %global useImport;
30144     +   %let useImport = 0;
30146     +   %EM_GETNAME(key=IMPORTSUBSET, type=DATA);
30148     +   %if %sysfunc(exist(&EM_USER_IMPORTSUBSET, DATA)) %then %do;
30149     +     proc datasets library=&EM_LIB nolist;
30150     +       delete &EM_NODEID._IMPORTSUBSET;
30151     +     run;
30152     +     quit;
30153     +   %end;
30155     +   /* if importGrouping=Y, verify that data and all vars exist and are of the correct type */
30156     +   %if &EM_PROPERTY_IMPORTGROUPING eq Y %then %do;
30158     +     /* if import eq Y and no importtable exists, throw an exception */
30159     +     %if %sysfunc(exist(&EM_PROPERTY_IMPORTDATA, DATA)) ne 1 %then %do;
30160     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOIMPORT;
30161     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, noimport_error , NOQUOTE));
30163     +        %put &em_codebar;
30164     +        %put &errmsg;
30165     +        %put &em_codebar;
30166     +        %goto doendm;
30167     +     %end;
30169     +      %let dsid = %sysfunc(open(&EM_PROPERTY_IMPORTDATA));
30170     +      %if &dsid %then %do;
30171     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
30172     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
30173     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
30174     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
30176     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
30177     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
30178     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
30179     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
30180     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
30181     +         %end;
30182     +      %end;
30183     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30185     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
30186     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
30188     +        /* generate subset of data that contains those vars also found in training data and add display_var information */
30189     +        proc sort data=&EM_PROPERTY_IMPORTDATA out=tempimport;
30190     +           by _VARIABLE_ ;
30191     +        run;
30193     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
30194     +          by NAME;
30195     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
30196     +        run;
30198     +        data &EM_USER_IMPORTSUBSET;
30199     +          merge tempimport(in=_a) tempvarset(in=_b);
30200     +          length display_Var $32;
30201     +          by _VARIABLE_;
30202     +          display_var = _Variable_;
30203     +          if _a and _b then output;
30204     +        run;
30206     +        proc datasets library=work nolist;
30207     +          delete tempimport tempvarset;
30208     +        run;
30209     +        quit;
30211     +        %end;
30212     +      %end;
30213     +   %end;
30215     +   /* set useImport flag if there are obs in the importSubset dataset */
30216     +   %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET));
30217     +   %if &dsid %then %do;
30218     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
30219     +     %if &nobs gt 0 %then %let useimport = 1;
30220     +   %end;
30221     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30223     +   %global useFreeze;
30224     +   %let useFreeze = 0;
30226     +   /* if Freeze=Y, verify that data and all vars exist and are of the correct type */
30227     +   %EM_GETNAME(key=FREEZESUBSET, type=DATA);
30229     +   %if %sysfunc(exist(&EM_USER_FREEZESUBSET, DATA)) %then %do;
30230     +     proc datasets library=&EM_LIB nolist;
30231     +       delete &EM_NODEID._FREEZESUBSET;
30232     +     run;
30233     +     quit;
30234     +   %end;
30236     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
30238     +      /* create freezesubset data to contain information on pre-binned data and raw values */
30239     +      %EM_GENERATE_EXPORTGROUP(&EM_USER_FREEZESUBSET, OVERWRITE);
30241     +      %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
30242     +      %if &dsid %then %do;
30243     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
30244     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
30245     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
30246     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
30248     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
30249     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
30250     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
30251     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
30252     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
30253     +         %end;
30254     +      %end;
30255     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30257     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
30258     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
30260     +        /* generate subset of data that contains those vars also found in training data */
30261     +        proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze;
30262     +           by _VARIABLE_ ;
30263     +        run;
30265     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
30266     +          by NAME;
30267     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
30268     +        run;
30270     +        data &EM_USER_FREEZESUBSET;
30271     +          merge tempfreeze(in=_a) tempvarset(in=_b);
30272     +          length display_Var $32;
30273     +          by _VARIABLE_;
30274     +          display_var = _Variable_;
30275     +          if _a and _b then output;
30276     +        run;
30278     +        proc datasets library=work nolist;
30279     +          delete tempfreeze tempvarset;
30280     +        run;
30281     +        quit;
30282     +        %end;
30283     +      %end;
30284     +   %end;
30286     +   /* set useFreeze flag if there are obs in the freezeSubset dataset */
30287     +   %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
30288     +   %if &dsid %then %do;
30289     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
30290     +     %if &nobs gt 0 %then %let useFreeze = 1;
30291     +   %end;
30292     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30294     +   /* if finedetail already exists, delete prior to re-run */
30295     +   %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) %then %do;
30296     +     proc datasets library=&EM_LIB nolist;
30297     +       delete &EM_NODEID._FINEDETAILDATA;
30298     +     run;
30299     +     quit;
30300     +   %end;
30302     +   data tempvarnames;
30303     +     set &EM_DATA_VARIABLESET;
30304     +     where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
30305     +     keep NAME LEVEL LABEL;
30306     +   run;
30308     +   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
30309     +     names NAME;
30310     +     prefix WOE_ GRP_ ;
30311     +   run;
30313     +   proc sort data=tempmapping; by name; run;
30314     +   proc sort data=tempvarnames; by name; run;
30315     +   data tempmapping;
30316     +     merge tempmapping tempvarnames;
30317     +     by NAME;
30318     +     rename LEVEL=procLevel;
30319     +   run;
30321     +   /* generate initial columns of mapping table by setting grpflag=0 */
30322     +   %EM_GENERATE_MAPPING_TABLE;
30324     +   proc datasets library=work nolist;
30325     +     delete tempImport tempScore;
30326     +   run;
30327     +   quit;
30329     +   /* delete splitvals dataset if this existed prior to run */
30330     +   %let nvars=0;
30331     +   %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
30332     +   %if &sdsid > 0 %then %do;
30333     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
30334     +   %end;
30335     +   %if &sdsid > 0 %then  %let sdsid=%sysfunc(close(&sdsid));
30337     +   %if &nvars > 0 %then %do;
30338     +      proc datasets library=&EM_LIB nolist;
30339     +        delete &EM_NODEID._SPLITVALS;
30340     +      run;
30341     +      quit;
30342     +   %end;
30344     +   %global classvars qclassvars;
30345     +   %let classvars=;
30346     +   %let qclassvars=;
30348     +   /* generate the intervalvars and classvars macros */
30349     +   %EM_PRE_BINNING(&EM_IMPORT_DATA);
30351     +   /* update varmappings with any changes to procLevel based on discretemid */
30352     +   data &EM_USER_VARMAPPINGS;
30353     +     set &EM_USER_VARMAPPINGS;
30354     +     /* procLevel column to indicate the level used by proc; this handles*/
30355     +     /* cases in which var is marked INTERVAL in metadat but treated as  */
30356     +     /* ordinal in prebinning because of # unique levels                 */
30357     +     %let dsid = %sysfunc(open(work._discretemid));
30358     +     %if &dsid %then %do;
30359     +       %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
30360     +       %let obs = %sysfunc(fetch(&dsid));
30361     +       %do %while(&obs=0);
30362     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
30363     +          if _variable_ = "&varname" then procLevel = "ORDINAL";
30364     +          %let obs = %sysfunc(fetch(&dsid));
30365     +       %end;
30366     +     %end;
30367     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30368     +     label procLevel =  "%sysfunc(sasmsg(sashelp.dmine, rpt_proclevel_vlabel , NOQUOTE))";
30369     +   run;
30371     +   /* generate Grp_xxx variables for interval inputs */
30372     +   %if &EM_PROPERTY_BINMETHOD eq QUANTILE %then %do;
30373     +     %EM_QUANTILE_BINNING(&EM_IMPORT_DATA, WORK.PCTILE, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
30375     +   %end;
30376     +   %else %do;
30377     +     %EM_EQUAL_SPACED_BINNING(&EM_IMPORT_DATA, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
30378     +   %end;
30380     +   /* generate GRP_XXX variables for nominal inputs */
30381     +   %EM_CLASSVARS_GROUP(&EM_PROPERTY_CLASSGROUPRARE);
30383     +   /* generate GRP_XXX variables for ordinal inputs */
30384     +   %EM_ORDVARS_GROUP;
30386     +   proc print data=&EM_USER_VARMAPPINGS label;
30387     +     var _VARIABLE_ _GRP_VARIABLE_ ;
30388     +   run;
30390     +   /* add _proc_var_ to varmappings data to know names of processed variables; could be original input, could be bin_xxx */
30391     +   proc sort data=&EM_USER_SPLITVALS out=tempsplitvals nodupkey;
30392     +     by _VARIABLE_;
30393     +   run;
30395     +   data &EM_USER_VARMAPPINGS;
30396     +     set &EM_USER_VARMAPPINGS;
30397     +     length _proc_var_ $32;
30398     +     %let dsid = %sysfunc(open(work.tempsplitvals));
30399     +     %if &dsid %then %do;
30400     +        %let obs = %sysfunc(fetch(&dsid));
30401     +        %do %while(&obs=0);
30402     +          %let dispnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
30403     +          %let dispvar = %sysfunc(getvarc(&dsid, &dispnum));
30404     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
30405     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
30407     +          if upcase(_VARIABLE_) = %upcase("&dispvar") then _proc_var_ = "&var";
30408     +          %let obs = %sysfunc(fetch(&dsid));
30409     +        %end;
30410     +     %end;
30411     +     if missing(_proc_var_) then _proc_var_=_variable_;
30412     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30413     +   run;
30415     +   proc datasets library=work nolist;
30416     +     delete sortedbin tempsplitvals;
30417     +   run;
30418     +   quit;
30420     +   /* calculate Fine Detail statistics for each input */
30421     +   %EM_FINE_DETAIL(&EM_USER_BINDATA, &EM_USER_VARMAPPINGS, &EM_USER_FINEDETAILDATA, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS);
30423     +   /* apply grouping and create grouped dataset */
30424     +   %EM_CREATE_GROUPING(&EM_USER_BINDATA, &EM_USER_FINEDETAILDATA, &EM_USER_COARSE);
30426     +   /* generate _label_ values in the COARSE dataset from the Scored data */
30427     +   filename Y "&EM_USER_GROUPMAPPINGSCORECODE";
30428     +   %EM_GENERATE_LABELVALUES(Y, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS, &EM_USER_COARSE);
30429     +   filename Y;
30431     +   /* set EM_MODEL ASSESS=N to prevent assessment reports from being generated */
30432     +   %EM_MODEL(Target= %EM_BINARY_TARGET, ASSESS=N);
30434     +   /* generate reports */
30435     +   %EM_REPORT(key=COARSE, viewtype=DATA, block=MODEL, description=EVENTRATESTAT, autodisplay=N, spk=N);
30438     +   %doendm:
30439     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
NOTE: %INCLUDE (level 1) file TRTEMP is file SASHELP.EMMDFY.BINNING_TRAINMACROS.SOURCE.
30441     +%macro EM_GENERATE_MAPPING_TABLE;
30443     +  %EM_GETNAME(key=VARMAPPINGS, type=DATA);
30444     +  data &EM_USER_VARMAPPINGS(keep=_variable_  _grp_variable_ procLevel label);
30445     +   length _variable_  _grp_variable_  $32 procLevel $8;
30446     +   set tempmapping;
30447     +   label _variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_inputvar_vlabel , NOQUOTE))"
30448     +         _grp_variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_grpvar_vlabel , NOQUOTE))";
30450     +         _variable_ = NAME;
30451     +         _grp_variable_ = GRP;
30452     + run;
30454     +%mend EM_GENERATE_MAPPING_TABLE;
30456     +%macro EM_PRE_BINNING(input);
30457     +    /* Determine which of our variables are interval  */
30458     +    %global intervalvars;
30459     +    %let intervalvars= ;
30460     +    data tempvariableset;
30461     +      set &EM_DATA_VARIABLESET;
30462     +      where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
30463     +    run;
30465     +    /* add all interval vars to the intervalvar macro */
30466     +    %let dsid = %sysfunc(open(work.tempvariableset));
30467     +    %if &dsid %then %do;
30468     +       %let varnum = %sysfunc(VARNUM(&dsid, NAME));
30469     +       %let obs = %sysfunc(fetch(&dsid));
30470     +       %do %while(&obs=0);
30471     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
30472     +          %let intervalvars = &intervalvars &varname;
30473     +          %let obs = %sysfunc(fetch(&dsid));
30474     +       %end;
30475     +    %end;
30476     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30478     +    /* Determine which variables marked as interval are true interval distributions; */
30479     +    /* intmid contains variables that are actually interval and should be binned; */
30480     +    /* discretemid contains variables that are actually discrete and should NOT be binned */
30481     +    %if &intervalvars ne %then %do;
30482     +      %let _maxlevel = %eval(&EM_PROPERTY_NUMBINS + 1);
30483     +      proc dmdb data=&input classout=_CLASSOUT maxlevel=&_maxlevel;
30484     +        class &intervalvars;
30485     +      run;
30486     +      proc freq data=_CLASSOUT order=DATA noprint;
30487     +         table NAME / OUT= _COUNT(where=(COUNT<&_maxlevel));
30488     +      run;
30490     +      %let _INTBINS=;
30491     +      data _null_;
30492     +        set _COUNT;
30493     +        call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
30494     +      run;
30496     +      proc sort data=_CLASSOUT;
30497     +        by NAME;
30498     +      run;
30499     +      proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
30500     +        var NRAW;
30501     +        by NAME;
30502     +      run;
30504     +      data _null_;
30505     +        dsid = open('_OUT');
30506     +        if dsid then do;
30507     +           call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
30508     +           csid = close(dsid);
30509     +        end;
30510     +      run;
30511     +      data _INTMID;
30512     +        set _OUT;
30513     +        keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
30514     +        %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
30515     +          if ^indexw("&_INTBINS", VARIABLE) then output;
30516     +        %end;
30517     +      run;
30519     +      %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
30520     +        data _DISCRETEMID;
30521     +          set _OUT;
30522     +          keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
30523     +          if indexw("&_INTBINS", VARIABLE) then output;
30524     +        run;
30525     +      %end;
30527     +      /* add vars from the _DISCRETEMID dataset to the classvars macro
30528     +      %let dsid = %sysfunc(open(WORK._DISCRETEMID));
30529     +      %if &dsid %then %do;
30530     +        %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
30531     +        %let obs = %sysfunc(fetch(&dsid));
30533     +        %do %while(&obs=0);
30534     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
30535     +          %let classvars = &classvars &var;
30536     +          %let qclassvars = &qclassvars "&var";
30537     +          %let obs = %sysfunc(fetch(&dsid));
30538     +        %end;
30539     +      %end;
30540     +      %if &dsid  %then %let dsid = %sysfunc(close(&dsid));
30541     +*/
30542     +    %end;
30543     +    %else %do;
30544     +      *data _INTMID;
30545     +      *run;
30547     +      *data _DISCRETEMID;
30548     +      *run;
30549     +    %end;
30551     +    /* if import grouping then remove interval vars in import data from _INTMID */
30552     +    %if &useImport eq 1 %then %do;
30554     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
30555     +        by _VARIABLE_;
30556     +      run;
30558     +      data &EM_USER_IMPORTSUBSET;
30559     +        length CODEVAR $32;
30560     +        set &EM_USER_IMPORTSUBSET;
30561     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
30562     +      run;
30564     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
30565     +        by _VARIABLE_;
30566     +      run;
30568     +      %let dsid = %sysfunc(open(work.tempsubset));
30569     +      %let nobs = 0;
30570     +      %if &dsid %then %do;
30571     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
30572     +      %end;
30573     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
30575     +      data tempsubset;
30576     +        set tempsubset;
30577     +        length  binVar suffix $32;
30578     +        array binnames{&nobs} $32 _temporary_;
30579     +        retain binVar binnames;
30580     +        by _VARIABLE_;
30582     +        binVar = 'BIN_'!!strip(CODEVAR);
30583     +        binVar = ksubstr(binVar, 1, 32);
30584     +        count = 1;
30586     +        do i=1 to _N_;
30587     +           do while(binvar eq binnames(i));
30588     +              suffix = strip(put(count,best.));
30589     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
30590     +              count + 1;
30591     +           end;
30592     +        end;
30593     +        binnames(_N_)= binvar;
30594     +        output;
30595     +        drop suffix count i;
30596     +     run;
30598     +     data &EM_USER_IMPORTSUBSET;
30599     +       set &EM_USER_IMPORTSUBSET;
30600     +       length binVar $32;
30602     +        %let dsid = %sysfunc(open(work.tempsubset));
30603     +        %if &dsid %then %do;
30604     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
30605     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
30606     +          %let obs = %sysfunc(fetch(&dsid));
30608     +          %do %while(&obs=0);
30609     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
30610     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
30612     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
30613     +            %let obs = %sysfunc(fetch(&dsid));
30614     +          %end;
30615     +        %end;
30616     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30617     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
30618     +        if binVar ne "" then do;
30619     +          _LEVEL_ = "ORDINAL";
30620     +        end;
30622     +      run;
30624     +      %let idsidexists=0;
30625     +      %let idsid = %sysfunc(open(work._intmid));
30626     +      %if &idsid %then %do;
30627     +        %let idsidexists=1;
30628     +        %let idsid = %sysfunc(close(&idsid));
30629     +      %end;
30631     +      %if &idsidexists = 1 %then %do;
30632     +      data _INTMID;
30633     +        set _INTMID;
30635     +        %let dsid = %sysfunc(open(work.tempsubset));
30636     +        %if &dsid %then %do;
30637     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
30638     +          %let obs = %sysfunc(fetch(&dsid));
30640     +          %do %while(&obs=0);
30641     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
30642     +            if variable = "&codevar" then delete;
30643     +            %let obs = %sysfunc(fetch(&dsid));
30644     +          %end;
30645     +        %end;
30646     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30647     +      run;
30648     +      %end;
30650     +      proc datasets library=work nolist;
30651     +        delete tempsubset;
30652     +      run;
30653     +      quit;
30654     +    %end;
30656     +    /* if freeze then remove interval vars in import data from _INTMID */
30657     +    %if &useFreeze eq 1 %then %do;
30659     +      data &EM_USER_FREEZESUBSET;
30660     +        length CODEVAR $32;
30661     +        set &EM_USER_FREEZESUBSET;
30662     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
30663     +      run;
30665     +      proc sort data=&EM_USER_FREEZESUBSET out=tempsubset nodupkey;
30666     +        by _VARIABLE_;
30667     +      run;
30669     +      %let dsid = %sysfunc(open(work.tempsubset));
30670     +      %let nobs = 0;
30671     +      %if &dsid %then %do;
30672     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
30673     +      %end;
30674     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
30676     +      data tempsubset;
30677     +        set tempsubset;
30678     +        length  binVar suffix $32;
30679     +        array binnames{&nobs} $32 _temporary_;
30680     +        retain binVar binnames;
30681     +        by _VARIABLE_;
30683     +        binVar = 'BIN_'!!strip(CODEVAR);
30684     +        binVar = ksubstr(binVar, 1, 32);
30685     +        count = 1;
30687     +        do i=1 to _N_;
30688     +           do while(binvar eq binnames(i));
30689     +              suffix = strip(put(count,best.));
30690     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
30691     +              count + 1;
30692     +           end;
30693     +        end;
30694     +        binnames(_N_)= binvar;
30695     +        output;
30696     +        drop suffix count i;
30697     +     run;
30699     +     data &EM_USER_FREEZESUBSET;
30700     +       set &EM_USER_FREEZESUBSET;
30701     +       length binVar $32;
30703     +        %let dsid = %sysfunc(open(work.tempsubset));
30704     +        %if &dsid %then %do;
30705     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
30706     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
30707     +          %let obs = %sysfunc(fetch(&dsid));
30709     +          %do %while(&obs=0);
30710     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
30711     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
30713     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
30714     +            %let obs = %sysfunc(fetch(&dsid));
30715     +          %end;
30716     +        %end;
30717     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30719     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
30720     +        if binVar ne "" then do;
30721     +          _LEVEL_ = "ORDINAL";
30722     +        end;
30724     +      run;
30726     +      %let idsidexists= 0;
30727     +      %let idsid = %sysfunc(open(work._intmid));
30728     +      %if &idsid %then %do;
30729     +        %let idsidexists=1;
30730     +        %let idsid = %sysfunc(close(&idsid));
30731     +      %end;
30732     +      %if &idsidexists eq 1 %then %do;
30733     +      data _INTMID;
30734     +        set _INTMID;
30736     +        %let dsid = %sysfunc(open(work.tempsubset));
30737     +        %if &dsid %then %do;
30738     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
30739     +          %let obs = %sysfunc(fetch(&dsid));
30741     +          %do %while(&obs=0);
30742     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
30743     +            if variable = "&codevar" then delete;
30744     +            %let obs = %sysfunc(fetch(&dsid));
30745     +          %end;
30746     +        %end;
30747     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30748     +      run;
30749     +      %end;
30751     +      proc datasets library=work nolist;
30752     +        delete tempsubset;
30753     +      run;
30754     +      quit;
30756     +    %end;
30758     +%mend EM_PRE_BINNING;
30760     +%macro EM_IMPORT_BINNING(binningCode);
30763     +   data tempintimport;
30764     +     set &EM_USER_IMPORTSUBSET;
30765     +     if binflag = 1;
30766     +   run;
30768     +   %let idsid = %sysfunc(open(work.tempintimport));
30769     +   %if &idsid %then %do;
30770     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
30771     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
30772     +   %end;
30773     +   %else %do;
30774     +     %let nvars = 0;
30775     +     %let nobs = 0;
30776     +   %end;
30777     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
30779     +   proc datasets library=work nolist;
30780     +     delete tempintimport;
30781     +   run;
30782     +   quit;
30784     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
30786     +      filename X "&binningCode";
30787     +      data _null_;
30788     +        FILE X MOD;
30789     +        %let bin_variables=;
30790     +        %let quote_bin_variables = ;
30791     +        %let choice = binflag = 1;
30792     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
30793     +        %if &dsid %then %do;
30794     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
30795     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
30796     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
30797     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingbins_note , NOQUOTE));
30799     +           put "&EM_CODEBAR;";
30800     +           put " &note; ";
30801     +           put "&EM_CODEBAR;";
30803     +           /* retrieve value for first obs */
30804     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
30805     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
30806     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
30808     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
30809     +           %let i = 1;
30810     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
30811     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
30812     +           %end;
30813     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
30814     +           put " ";
30815     +           put "if &oldname eq . then &binvalue = .;";
30817     +           /* cycle through special codes if they exist */
30818     +           %let index2 = %index(&oldname, SV_);
30819     +           %if &index2 gt 0 %then %do;
30820     +             %let choice = CODEVAR ="&oldname";
30821     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
30822     +             %if &cdsid %then %do;
30823     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
30824     +                %let cobs = %sysfunc(fetch(&cdsid));
30825     +                %do %while(&cobs=0);
30826     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
30827     +                    put "else if &oldname eq &code then &binvalue = &code;";
30828     +                   %let cobs = %sysfunc(fetch(&cdsid));
30829     +                %end;
30830     +             %end;
30831     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
30832     +           %end;
30833     +           put "else ";
30834     +           put "  if &oldname < &value then &binvalue=&i;";
30835     +           %let i= %eval(&i+1);
30837     +           %let obs = %sysfunc(fetch(&dsid));
30838     +           %do %while(&obs=0);
30839     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
30840     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
30841     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
30843     +              %if "&oldname" ne "&namevalue" %then %do;
30845     +                /* if variable has been re-coded for special codes, must include these values as well */
30846     +                put;
30847     +                put "if &namevalue eq . then &binvalue = .;";
30849     +                %let i=1;
30850     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
30851     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
30852     +                %end;
30853     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
30855     +                /* cycle through special codes if they exist */
30856     +                %let index2 = %index(&namevalue, SV_);
30857     +                %if &index2 gt 0 %then %do;
30858     +                  %let choice = CODEVAR ="&namevalue";
30859     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
30860     +                  %if &cdsid %then %do;
30861     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
30862     +                     %let cobs = %sysfunc(fetch(&cdsid));
30863     +                     %do %while(&cobs=0);
30864     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
30865     +                       put "else if &namevalue eq &code then &binvalue = &code;";
30866     +                       %let cobs = %sysfunc(fetch(&cdsid));
30867     +                     %end;
30868     +                  %end;
30869     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
30870     +                %end;
30871     +                put "else ";
30872     +                put "  if &namevalue < &value then &binvalue=&i;";
30873     +              %end;
30874     +              %else %do;
30875     +                put "else ";
30876     +                %if "&value" ne "." %then %do;
30877     +                  put "  if &namevalue < &value then &binvalue=&i;";
30878     +                %end;
30879     +                %else %do;
30880     +                  put "  &binvalue=&i;";
30881     +                %end;
30882     +              %end;
30883     +              %let i = %eval(&i + 1);
30884     +              %let obs = %sysfunc(fetch(&dsid));
30885     +              %let oldname = &namevalue;
30886     +              %let oldbinvalue = &binvalue;
30887     +           %end;
30888     +        %end;
30889     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
30891     +      run;
30892     +      filename X;
30893     +      /* generate BINMAPPINGS dataset */
30894     +      data TEMPBINMAPPINGS;
30895     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
30897     +        %let choice = binflag = 1;
30898     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
30899     +        %if &dsid %then %do;
30900     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
30901     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
30902     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
30903     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
30904     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
30906     +           /* retrieve information from first obs */
30907     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
30908     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
30909     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
30910     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
30911     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar,5));
30912     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
30913     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
30914     +           %let i = 1;
30916     +           NAME = "&OLDCODEVAR";
30917     +           BIN_NAME = "&OLDBINVAR";
30918     +           GRP_NAME = "&OLDGRPVAR";
30919     +           BIN = "&i";
30920     +           GRP = "&oldgrpvalue";
30921     +           LB = . ;
30922     +           UB = &oldvalue;
30923     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
30924     +           DISPLAY_VAR = "&oldvar";
30925     +           output;
30927     +           %let i = 2;
30928     +           %let obs = %sysfunc(fetch(&dsid));
30929     +           %do %while(&obs=0);
30930     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
30931     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
30932     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
30933     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar,5));
30934     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
30935     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
30937     +             %if "&oldvar" ne "&var" %then %do;
30938     +              %let i = 1;
30939     +               %let oldvalue = .;
30940     +             %end;
30942     +             NAME = "&CODEVAR";
30943     +             BIN_NAME = "&BINVAR";
30944     +             GRP_NAME = "&GRPVAR";
30945     +             BIN = "&i";
30946     +             GRP = "&group";
30947     +             LB = &oldvalue ;
30948     +             UB = &value;
30949     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
30950     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
30951     +             %end;
30952     +             %else %do;
30953     +               %if "&oldvalue" eq "." %then %do;
30954     +                 EM_BIN_LABEL = "&var < &value" ;
30955     +               %end;
30956     +               %if "&value" eq "." %then %do;
30957     +                 EM_BIN_LABEL = "&oldvalue >= &var";
30958     +               %end;
30959     +             %end;
30960     +             DISPLAY_VAR = "&var";
30961     +             output;
30963     +             %let oldvar = &var;
30964     +             %let oldcodevar = &codevar;
30965     +             %let oldbinvar = &binvar;
30966     +             %let oldgrpvar = &grpvar;
30967     +             %let oldvalue   = &value;
30968     +             %let oldgrpvalue   = &group;
30969     +             %let i = %eval(&i + 1);
30970     +             %let obs = %sysfunc(fetch(&dsid));
30971     +           %end;
30972     +        %end;
30973     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
30974     +      run;
30976     +      data &EM_USER_BINMAPPINGS;
30977     +        set &EM_USER_BINMAPPINGS tempBinMappings;
30978     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
30979     +      run;
30981     +      /* update importsubset with bin values instead of raw values */
30982     +      data &EM_USER_IMPORTSUBSET;
30983     +        set &EM_USER_IMPORTSUBSET;
30985     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
30986     +        %if &dsid %then %do;
30987     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
30988     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
30989     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
30990     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
30991     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
30992     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
30994     +          %let oldvar = ;
30995     +          %let obs = %sysfunc(fetch(&dsid));
30996     +          %do %while(&obs=0);
30997     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
30998     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
30999     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
31000     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
31001     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
31002     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
31004     +            %if "&oldvar" eq "&displayvar" %then %do;
31005     +              else
31006     +            %end;
31007     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
31008     +               _SPLIT_VALUE_ = "&bin";
31009     +            end;
31010     +            %let oldvar = &displayvar;
31011     +            %let obs = %sysfunc(fetch(&dsid));
31012     +          %end;
31013     +        %end;
31014     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
31015     +      run;
31017     +      proc sort data=&EM_USER_IMPORTSUBSET;
31018     +        by _VARIABLE_ _SPLIT_VALUE_;
31019     +      run;
31021     +      proc datasets library=work nolist;
31022     +        delete tempBinMappings;
31023     +      run;
31024     +      quit;
31025     +  %end;
31026     +%mend EM_IMPORT_BINNING;
31028     +%macro EM_FREEZE_BINNING(binningCode);
31030     +   data tempintfreeze;
31031     +     set &EM_USER_FREEZESUBSET;
31032     +     if binflag = 1;
31033     +   run;
31035     +   %let idsid = %sysfunc(open(work.tempintfreeze));
31036     +   %if &idsid %then %do;
31037     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
31038     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
31039     +   %end;
31040     +   %else %do;
31041     +     %let nvars = 0;
31042     +     %let nobs = 0;
31043     +   %end;
31044     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
31046     +   proc datasets library=work nolist;
31047     +     delete tempintimport;
31048     +   run;
31049     +   quit;
31051     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
31053     +      filename X "&binningCode";
31054     +      data _null_;
31055     +        FILE X MOD;
31057     +        %let bin_variables=.;
31058     +        %let quote_bin_variables=.;
31059     +        %let freeze_variables=;
31060     +        %let choice = binflag = 1;
31061     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
31062     +        %if &dsid %then %do;
31063     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
31064     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
31065     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
31066     +           %let vnum    = %sysfunc(VARNUM(&dsid, _variable_));
31068     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingfrozenbins_note , NOQUOTE));
31069     +           put "&EM_CODEBAR;";
31070     +           put "&note;";
31071     +           put "&EM_CODEBAR;";
31073     +           /* retrieve value for first obs */
31074     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
31075     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
31076     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
31077     +           %let variable = %sysfunc(getvarc(&dsid, &vnum));
31079     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
31080     +           %let i = 1;
31081     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
31082     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
31083     +           %end;
31084     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
31085     +           %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
31087     +           put " ";
31088     +           put "if &oldname eq . then &binvalue = .;";
31090     +           /* cycle through special codes if they exist */
31091     +           %let index2 = %index(&oldname, SV_);
31092     +           %if &index2 gt 0 %then %do;
31093     +             %let choice = CODEVAR ="&oldname";
31094     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
31095     +             %if &cdsid %then %do;
31096     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
31097     +                %let cobs = %sysfunc(fetch(&cdsid));
31098     +                %do %while(&cobs=0);
31099     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
31100     +                    put "else if &oldname eq &code then &binvalue = &code;";
31101     +                   %let cobs = %sysfunc(fetch(&cdsid));
31102     +                %end;
31103     +             %end;
31104     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
31105     +           %end;
31106     +           put "else ";
31107     +           put "  if &oldname < &value then &binvalue=&i;";
31108     +           %let i= %eval(&i+1);
31110     +           %let obs = %sysfunc(fetch(&dsid));
31111     +           %do %while(&obs=0);
31112     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
31113     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
31114     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
31115     +              %let variable = %sysfunc(getvarc(&dsid, &vnum));
31117     +              %if "&oldname" ne "&namevalue" %then %do;
31119     +                /* if variable has been re-coded for special codes, must include these values as well */
31120     +                put;
31121     +                put "if &namevalue eq . then &binvalue = .;";
31123     +                %let i=1;
31124     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
31125     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
31126     +                %end;
31127     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
31128     +                %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
31130     +                /* cycle through special codes if they exist */
31131     +                %let index2 = %index(&namevalue, SV_);
31132     +                %if &index2 gt 0 %then %do;
31133     +                  %let choice = CODEVAR ="&namevalue";
31134     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
31135     +                  %if &cdsid %then %do;
31136     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
31137     +                     %let cobs = %sysfunc(fetch(&cdsid));
31138     +                     %do %while(&cobs=0);
31139     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
31140     +                       put "else if &namevalue eq &code then &binvalue = &code;";
31141     +                       %let cobs = %sysfunc(fetch(&cdsid));
31142     +                     %end;
31143     +                  %end;
31144     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
31145     +                %end;
31146     +                put "else ";
31147     +                put "  if &namevalue < &value then &binvalue=&i;";
31148     +              %end;
31149     +              %else %do;
31150     +                put "else ";
31151     +                %if "&value" ne "." %then %do;
31152     +                  put "  if &namevalue < &value then &binvalue=&i;";
31153     +                %end;
31154     +                %else %do;
31155     +                  put " &binvalue=&i;";
31156     +                %end;
31157     +              %end;
31158     +              %let i = %eval(&i + 1);
31159     +              %let obs = %sysfunc(fetch(&dsid));
31160     +              %let oldname = &namevalue;
31161     +              %let oldbinvalue = &binvalue;
31162     +           %end;
31163     +        %end;
31164     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
31166     +      run;
31167     +      filename X;
31168     +      /* generate BINMAPPINGS dataset */
31169     +      data TEMPBINMAPPINGS;
31170     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
31172     +        %let choice = binflag = 1;
31173     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
31174     +        %if &dsid %then %do;
31175     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
31176     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
31177     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
31178     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
31179     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
31181     +           /* retrieve information from first obs */
31182     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
31183     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
31184     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
31185     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
31186     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar, 5));
31187     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
31188     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
31189     +           %let i = 1;
31191     +           NAME = "&OLDCODEVAR";
31192     +           BIN_NAME = "&OLDBINVAR";
31193     +           GRP_NAME = "&OLDGRPVAR";
31194     +           BIN = "&i";
31195     +           GRP = "&oldgrpvalue";
31196     +           LB = . ;
31197     +           UB = &oldvalue;
31198     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
31199     +           DISPLAY_VAR = "&oldvar";
31200     +           output;
31202     +           %let i = 2;
31203     +           %let obs = %sysfunc(fetch(&dsid));
31204     +           %do %while(&obs=0);
31205     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
31206     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
31207     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
31208     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar, 5));
31209     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
31210     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
31212     +             %if "&oldvar" ne "&var" %then %do;
31214     +               %let i = 1;
31215     +               %let oldvalue = .;
31216     +             %end;
31218     +             NAME = "&CODEVAR";
31219     +             BIN_NAME = "&BINVAR";
31220     +             GRP_NAME = "&GRPVAR";
31221     +             BIN = "&i";
31222     +             GRP = "&group";
31223     +             LB = &oldvalue ;
31224     +             UB = &value;
31225     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
31226     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
31227     +             %end;
31228     +             %else %do;
31229     +               %if "&oldvalue" eq "." %then %do;
31230     +                 EM_BIN_LABEL = "&var < &value" ;
31231     +               %end;
31232     +               %if "&value" eq "." %then %do;
31233     +                 EM_BIN_LABEL = "&oldvalue >= &var";
31234     +               %end;
31235     +             %end;
31236     +             DISPLAY_VAR = "&var";
31237     +             output;
31239     +             %let oldvar = &var;
31240     +             %let oldcodevar = &codevar;
31241     +             %let oldbinvar = &binvar;
31242     +             %let oldgrpvar = &grpvar;
31243     +             %let oldvalue   = &value;
31244     +             %let oldgrpvalue = &group;
31245     +             %let i = %eval(&i + 1);
31246     +             %let obs = %sysfunc(fetch(&dsid));
31247     +           %end;
31248     +        %end;
31250     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
31251     +      run;
31253     +      /* remove obs from EM_USER_BINMAPPINGS that have vars also in tempBinMappings -- prevents duplicate entries */
31254     +      data &EM_USER_BINMAPPINGS;
31255     +        set &EM_USER_BINMAPPINGS;
31256     +        if NAME in (&FREEZE_VARIABLES) then delete;
31257     +      run;
31259     +      data &EM_USER_BINMAPPINGS;
31260     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
31262     +        set &EM_USER_BINMAPPINGS tempBinMappings;
31263     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
31264     +      run;
31266     +      /* update freezesubset with bin values instead of raw values */
31267     +      data &EM_USER_FREEZESUBSET;
31268     +        set &EM_USER_FREEZESUBSET;
31270     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
31271     +        %if &dsid %then %do;
31272     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
31273     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
31274     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
31275     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
31276     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
31277     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
31279     +          %let oldvar = ;
31280     +          %let obs = %sysfunc(fetch(&dsid));
31281     +          %do %while(&obs=0);
31282     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
31283     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
31284     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
31285     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
31286     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
31287     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
31289     +            %if "&oldvar" eq "&displayvar" %then %do;
31290     +              else
31291     +            %end;
31292     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
31293     +               _SPLIT_VALUE_ = "&bin";
31294     +            end;
31295     +            %let oldvar =&displayvar;
31296     +            %let obs = %sysfunc(fetch(&dsid));
31297     +          %end;
31298     +        %end;
31299     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
31300     +      run;
31302     +      proc sort data=&EM_USER_FREEZESUBSET;
31303     +        by _VARIABLE_ _SPLIT_VALUE_;
31304     +      run;
31306     +      proc datasets library=work nolist;
31307     +        delete tempBinMappings;
31308     +      run;
31309     +      quit;
31310     +   %end;
31311     +%mend EM_FREEZE_BINNING;
31313     +%macro EM_EQUAL_SPACED_BINNING(input, bindata, binningCode);
31316     +/* initialize new bucket_binning macro */
31317     +filename temp catalog 'sashelp.emapps.bucket_binning.source';
31318     +%include temp;
31319     +filename temp;
31321     +/* create fileref for generation of binningCode */
31322     +filename X "&binningCode";
31324     +/* determine if there are inputs to be binned */
31325     +%let numbinvars = 0;
31326     +%let intdsid = %sysfunc(open(work._intmid));
31327     +%if &intdsid %then %do;
31328     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
31329     +%end;
31330     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
31331     +%if &numbinvars > 0 %then %do;
31334     +/* get data in format needed for quantile_binning macro */
31335     +data work.vartable;
31336     +  set work._intmid;
31337     +  level = "INTERVAL";
31338     +  role  = "INPUT";
31339     +  rename variable=name;
31340     +run;
31342     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
31343     +%if %EM_FREQ ne %then %do;
31344     +   data work.freq;
31345     +     name="%EM_FREQ";
31346     +     role="FREQ";
31347     +   run;
31349     +   data work.vartable;
31350     +     set work.vartable work.freq;
31351     +   run;
31352     +%end;
31354     +/* perform bucket binning of data */
31355     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
31356     +%em_apps_bucket_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
31358     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
31359     +%end;
31360     +%else %do;
31361     +  /* initialize binmappings table */
31362     +  data &EM_USER_BINMAPPINGS;
31363     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
31364     +  run;
31366     +  data _null_;
31367     +    FILE X;
31369     +    put "&EM_CODEBAR;";
31370     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
31371     +    put "* &note;";
31372     +    put "&EM_CODEBAR;";
31373     +  run;
31375     +%end;
31377     +/* assign display_var values to binmappings table as well as initial group values */
31378     +data &EM_USER_BINMAPPINGS;
31379     +  set &EM_USER_BINMAPPINGS;
31380     +  length display_var $32 grp $8;
31381     +  display_var = name;
31383     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
31384     +    GRP = BIN + 1;
31385     +  %end;
31386     +  %else %do;
31387     +    GRP = BIN;
31388     +  %end;
31389     +run;
31391     +/* de-assign fileref */
31392     +filename X;
31394     +    /* append to binning code those values that were included in the importSubset data */
31395     +    %if &useImport eq 1 %then %do;
31396     +      %EM_IMPORT_BINNING(&binningcode);
31397     +    %end;
31399     +    /* append to binning code those values that were included in the freezeSubset data */
31400     +    %if &useFreeze eq 1 %then %do;
31401     +      %EM_FREEZE_BINNING(&binningcode);
31402     +    %end;
31404     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
31405     +     by NAME;
31406     +     run;
31408     +     /* create grouping for missing level */
31409     +    data tempmissvalues;
31410     +    run;
31412     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
31413     +       data tempmissvalues;
31414     +         %if &useImport eq 1 %then %do;
31415     +           merge sortedmapping &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME));
31416     +         %end;
31417     +         %if &useFreeze eq 1 %then %do;
31418     +           merge sortedmapping &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME));
31419     +         %end;
31420     +         %else %do;
31421     +           set sortedmapping;
31422     +         %end;
31423     +         GRP="1";
31424     +         bin="Missing";
31425     +         _split_value_ = "Missing";
31426     +         %if &useImport eq 1 %then %do;
31427     +            if _a then delete;
31428     +         %end;
31429     +         %if &useFreeze eq 1 %then %do;
31430     +            if _b then delete;
31431     +         %end;
31433     +       run;
31434     +    %end;
31436     +    /* create binData from binningCode */
31437     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
31438     +      by NAME;
31439     +    run;
31441     +    filename X "&binningCode";
31442     +    data &bindata;
31443     +      set &input;
31444     +      %inc X;
31445     +    run;
31447     +    filename X;
31449     +    /* create splitvals dataset */
31450     +    data tempsplitvals;
31451     +      set &EM_USER_BINMAPPINGS
31452     +        %let tdsid = %sysfunc(open(work.tempmissvalues));
31453     +        %if &tdsid %then %do;
31454     +          tempmissvalues
31455     +        %end;
31456     +        %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
31457     +      ;
31458     +      length newgroup _group_ 8 _level_ $8;
31459     +      newgroup =.;
31460     +      _LEVEL_ = 'ORDINAL';
31461     +      _Group_ = grp;
31462     +      rename NAME=DISPLAY_VAR BIN=_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
31463     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_;
31464     +    run;
31466     +    data tempsplitvals;
31467     +      set tempsplitvals;
31468     +      _order_ = _N_;
31469     +    run;
31471     +    /* determine if EM_USER_SPLITVALS already exists */
31472     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
31473     +    %if &sdsid > 0 %then %do;
31474     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
31475     +      %if &nvars > 0 %then %do;
31476     +        proc sql;
31477     +          reset noprint;
31478     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
31479     +        quit;
31480     +      %end;
31481     +      %else %let nobs=0;
31482     +    %end;
31483     +    %else %do;
31484     +       %let nobs=0;
31485     +       %let nvars=0;
31486     +    %end;
31487     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
31489     +    /* if useIMport=1 also include import definitions here as well */
31490     +    %if &useImport eq 1 %then %do;
31491     +      data tempImport;
31492     +        set &EM_USER_IMPORTSUBSET;
31493     +        _variable_ = binVar;
31494     +      run;
31495     +    %end;
31497     +    /* if useFreeze=1 also include import definitions here as well */
31498     +    %if &useFreeze eq 1 %then %do;
31499     +      data tempFreeze;
31500     +        length display_var $32;
31501     +        set &EM_USER_FREEZESUBSET;
31502     +        display_var = _variable_;
31503     +        _variable_ = binVar;
31504     +      run;
31505     +    %end;
31508     +    data &EM_USER_SPLITVALS;
31509     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
31510     +        set &EM_USER_SPLITVALS tempsplitvals
31511     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
31512     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
31513     +        %end;
31514     +        %if &useFreeze eq 1 %then %do;
31515     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
31516     +        %end;
31517     +        ;
31518     +      %end;
31519     +      %else %do;
31520     +        set tempsplitvals
31521     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
31522     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
31523     +        %end;
31524     +        %if &useFreeze eq 1 %then %do;
31525     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
31526     +        %end;
31527     +        ;
31528     +      %end;
31529     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _ORDER_;
31530     +    run;
31532     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
31533     +    data tempvariableset;
31534     +      set &EM_DATA_VARIABLESET;
31535     +      where TYPE = 'C';
31536     +    run;
31538     +    /* add all interval vars that aren't special codes to the intervalvar macro */
31539     +    %let dsid = %sysfunc(open(work.tempvariableset));
31540     +    %if &dsid %then %do;
31541     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
31542     +      %let obs = %sysfunc(fetch(&dsid));
31543     +      %do %while(&obs=0);
31544     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
31545     +        %let classvars = &classvars &varname;
31546     +        %let qclassvars = &qclassvars "&varname";
31547     +        %let obs = %sysfunc(fetch(&dsid));
31548     +      %end;
31549     +    %end;
31550     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
31552     +    %if &classvars ne %then %do;
31553     +      proc dmdb data =&bindata classout=_classout nonorm;
31554     +        class &classvars;
31555     +      run;
31557     +      proc dmdb data=&bindata classout=_classout2;
31558     +       class &classvars;
31559     +      run;
31561     +      proc sort data=_classout; by NAME CRAW; run;
31562     +      proc sort data=_classout2; by NAME CRAW; run;
31564     +      data _classout;
31565     +        length _variable_ $32;
31566     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
31567     +        _split_value_ = trim(left(_split_value_));
31568     +        LEVEL = trim(left(LEVEL));
31569     +        by NAME CRAW;
31570     +       _variable_ = NAME;
31571     +      run;
31573     +      proc sort data=_classout; by _variable_ _split_value_; run;
31574     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
31576     +      data &EM_USER_SPLITVALS;
31577     +        length _norm_level_ $200 _split_value_ $200;
31578     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
31579     +        by _variable_ _split_value_;
31580     +        LEVEL = trim(left(LEVEL));
31581     +        _norm_level_ = trim(left(_norm_level_));
31582     +        _split_value_ = trim(left(_split_value_));
31583     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
31584     +        drop NAME FREQUENCY TYPE CRAW NRAW;
31585     +      run;
31587     +      proc datasets library=work nolist;
31588     +        delete _classout _classout2;
31589     +      run;
31590     +      quit;
31591     +    %end;
31592     +    data &EM_USER_SPLITVALS;
31593     +      set &EM_USER_SPLITVALS;
31594     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
31595     +    run;
31597     +    proc sort data=&EM_USER_SPLITVALS;
31598     +      by DISPLAY_VAR _Group_;
31599     +    run;
31601     +   proc datasets library=work nolist;
31602     +     delete tempBinMappings temp_binmappings tempBinNames tempsplitvals sortedmapping tempmissvalues
31603     +      %if &useImport eq 1 %then %do;
31604     +        tempImport
31605     +      %end;
31606     +      %if &useFreeze eq 1 %then %do;
31607     +        tempFreeze
31608     +      %end;
31609     +     ;
31610     +   run;
31611     +   quit;
31613     +%mend;
31615     +%macro EM_QUANTILE_BINNING(input, pctdata, bindata, binningCode);
31617     +/* initialize new quantile_binning macro */
31618     +filename temp catalog 'sashelp.emapps.quantile_binning.source';
31619     +%include temp;
31620     +filename temp;
31622     +/* generate fileref for quantile_binning macro */
31623     +filename X "&binningCode";
31625     +/* determine if there are inputs to be binned */
31626     +%let numbinvars = 0;
31627     +%let intdsid = %sysfunc(open(work._intmid));
31628     +%if &intdsid %then %do;
31629     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
31630     +%end;
31631     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
31632     +%if &numbinvars > 0 %then %do;
31634     +/* get data in format needed for quantile_binning macro */
31635     +data work.vartable;
31636     +  set work._intmid;
31637     +  level = "INTERVAL";
31638     +  role  = "INPUT";
31639     +  rename variable=name;
31640     +run;
31642     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
31643     +%if %EM_FREQ ne %then %do;
31644     +   data work.freq;
31645     +     name="%EM_FREQ";
31646     +     role="FREQ";
31647     +   run;
31649     +   data work.vartable;
31650     +     set work.vartable work.freq;
31651     +   run;
31652     +%end;
31655     +/* perform quantile binning of data */
31656     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
31657     +%em_apps_quantile_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
31659     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
31660     +%end;
31661     +%else %do;
31662     +  /* initialize binmappings table */
31663     +  data &EM_USER_BINMAPPINGS;
31664     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
31665     +  run;
31667     +  data _null_;
31668     +    FILE X;
31670     +    put "&EM_CODEBAR;";
31671     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
31672     +    put "* &note;";
31673     +    put "&EM_CODEBAR;";
31674     +  run;
31676     +%end;
31678     +/* assign display_var values to binmappings table as well as initial group values */
31679     +data &EM_USER_BINMAPPINGS;
31680     +  set &EM_USER_BINMAPPINGS;
31681     +  length display_var $32 grp $8;
31682     +  display_var = name;
31684     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
31685     +    GRP = BIN + 1;
31686     +  %end;
31687     +  %else %do;
31688     +    GRP = BIN;
31689     +  %end;
31690     +run;
31692     +/* de-assign fileref */
31693     +filename X;
31695     +    /* append to binning code those values that were included in the importSubset data */
31696     +    %if &useImport eq 1 %then %do;
31697     +      %EM_IMPORT_BINNING(&binningcode);
31698     +    %end;
31700     +    /* append to binning code those values that were included in the freezeSubset data */
31701     +    %if &useFreeze eq 1 %then %do;
31702     +      %EM_FREEZE_BINNING(&binningcode);
31703     +    %end;
31705     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
31706     +      by NAME;
31707     +    run;
31709     +    /* create grouping for missing level */
31710     +    data tempmissvalues;
31711     +    run;
31713     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
31714     +       data tempmissvalues;
31715     +         %if ((&useImport eq 1) OR (&useFreeze eq 1)) %then %do;
31716     +           merge sortedmapping
31717     +           %if &useImport eq 1 %then %do;
31718     +              &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME))
31719     +           %end;
31720     +           %if &useFreeze eq 1 %then %do;
31721     +             &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME))
31722     +           %end;
31723     +           ;
31724     +         %end;
31725     +         %else %do;
31726     +           set sortedmapping;
31727     +         %end;
31728     +         GRP="1";
31729     +         bin="Missing";
31730     +         _split_value_ = "Missing";
31731     +         %if &useImport eq 1 %then %do;
31732     +            if _a then delete;
31733     +         %end;
31734     +         %if &useFreeze eq 1 %then %do;
31735     +            if _b then delete;
31736     +         %end;
31738     +       run;
31739     +    %end;
31742     +    /* create binData from binningCode */
31743     +    filename X "&binningCode";
31745     +    data &bindata;
31746     +      set &input;
31747     +      %inc X;
31748     +    run;
31750     +    filename X;
31752     +    /* create splitvals dataset */
31753     +    data tempsplitvals;
31754     +      set &EM_USER_BINMAPPINGS tempmissvalues;
31755     +      length newgroup _group_ _order_ 8 _level_ $8;
31756     +      newgroup =.;
31757     +      _LEVEL_ = 'ORDINAL';
31758     +      _Group_ = grp;
31759     +      rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
31760     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
31761     +    run;
31763     +    data tempsplitvals;
31764     +      set tempsplitvals;
31765     +      _order_ = _N_;
31766     +    run;
31768     +    /* determine if EM_USER_SPLITVALS already exists */
31769     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
31770     +    %if &sdsid > 0 %then %do;
31771     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
31772     +      %if &nvars > 0 %then %do;
31773     +        proc sql;
31774     +          reset noprint;
31775     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
31776     +        quit;
31777     +      %end;
31778     +      %else %let nobs=0;
31779     +    %end;
31780     +    %else %do;
31781     +       %let nobs=0;
31782     +       %let nvars=0;
31783     +    %end;
31784     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
31786     +    /* if useIMport=1 also include import definitions here as well */
31787     +    %if &useImport eq 1 %then %do;
31788     +      data tempImport;
31789     +        set &EM_USER_IMPORTSUBSET;
31790     +        _variable_ = binVar;
31791     +      run;
31792     +    %end;
31794     +    /* if useFreeze=1 also include frozen definitions here as well */
31795     +    %if &useFreeze eq 1 %then %do;
31796     +      data tempFreeze;
31797     +        length display_var $32;
31798     +        set &EM_USER_FreezeSUBSET;
31799     +        display_var = _variable_;
31800     +        _variable_ = binVar;
31801     +      run;
31802     +    %end;
31804     +    data &EM_USER_SPLITVALS;
31805     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
31806     +        set &EM_USER_SPLITVALS tempsplitvals
31807     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
31808     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
31809     +        %end;
31810     +        %if &useFreeze eq 1 %then %do;
31811     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
31812     +        %end;
31813     +        ;
31814     +      %end;
31815     +      %else %do;
31816     +        set tempsplitvals
31817     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
31818     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
31819     +        %end;
31820     +        %if &useFreeze eq 1 %then %do;
31821     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
31822     +        %end;
31823     +        ;
31824     +      %end;
31825     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
31826     +    run;
31828     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
31829     +    data tempvariableset;
31830     +      set &EM_DATA_VARIABLESET;
31831     +      where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
31832     +    run;
31834     +    /* add all interval vars that aren't special codes to the intervalvar macro */
31835     +    %let dsid = %sysfunc(open(work.tempvariableset));
31836     +    %if &dsid %then %do;
31837     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
31838     +      %let obs = %sysfunc(fetch(&dsid));
31839     +      %do %while(&obs=0);
31840     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
31841     +        %let classvars = &classvars &varname;
31842     +        %let qclassvars = &qclassvars "&varname";
31843     +        %let obs = %sysfunc(fetch(&dsid));
31844     +      %end;
31845     +    %end;
31846     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
31848     +    %if &classvars ne %then %do;
31849     +      proc dmdb data =&bindata classout=_classout nonorm;
31850     +        class &classvars;
31851     +      run;
31853     +      proc dmdb data=&bindata classout=_classout2;
31854     +       class &classvars;
31855     +      run;
31857     +      proc sort data=_classout; by NAME CRAW; run;
31858     +      proc sort data=_classout2; by NAME CRAW; run;
31860     +      data _classout;
31861     +        length _variable_ $32;
31862     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
31863     +        by NAME CRAW;
31864     +       _variable_ = NAME;
31865     +      run;
31867     +      proc sort data=_classout; by _variable_ _split_value_; run;
31868     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
31870     +      data &EM_USER_SPLITVALS;
31871     +        length _norm_level_ $200 _split_value_ $200;
31872     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
31873     +        by _variable_ _split_value_;
31874     +        LEVEL = trim(left(LEVEL));
31875     +        _split_value_ = trim(left(_split_value_));
31876     +        _norm_level_ = trim(left(_norm_level_));
31877     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
31878     +        drop NAME FREQUENCY TYPE CRAW NRAW;
31879     +      run;
31881     +      proc datasets library=work nolist;
31882     +        delete _classout _classout2;
31883     +      run;
31884     +      quit;
31885     +    %end;
31887     +    data &EM_USER_SPLITVALS;
31888     +      set &EM_USER_SPLITVALS;
31889     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
31890     +    run;
31893     +    proc sort data=&EM_USER_SPLITVALS;
31894     +      by DISPLAY_VAR _Group_;
31895     +    run;
31897     +    proc datasets library=work nolist;
31898     +      delete sortedmapping tempsplitvals tempmissvalues
31899     +      %if &useImport eq 1 %then %do;
31900     +        tempImport
31901     +      %end;
31902     +      %if &useFreeze eq 1 %then %do;
31903     +        tempFreeze
31904     +      %end;
31905     +      ;
31906     +    run;
31907     +    quit;
31908     +/*
31909     +%end;
31910     +%else %do;
31911     +    data &bindata;
31912     +      set &input;
31913     +    run;
31914     +%end;
31915     +*/
31916     +%mend EM_QUANTILE_BINNING;
31918     +%macro EM_ORDVARS_GROUP;
31920     +   /* retrieve all ordinal variables from the incoming dataset */
31921     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
31922     +     by NAME;
31923     +     where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
31924     +   run;
31926     +   /* add all vars marked as interval that are actually class vars to this data */
31927     +   %let nobs = 0;
31928     +   %let dsid = %sysfunc(open(WORK._DISCRETEMID));
31929     +   %if &dsid %then %do;
31930     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
31931     +     %if &nobs gt 0 %then %do;
31933     +     data tempvars;
31934     +       set &EM_DATA_VARIABLESET;
31935     +       if NAME in (
31936     +         %let obs = %sysfunc(fetch(&dsid));
31937     +         %do %while(&obs=0);
31938     +           %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
31939     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
31940     +           "&varname"
31941     +           %let obs = %sysfunc(fetch(&dsid));
31942     +         %end;
31943     +        );
31944     +     run;
31945     +     data tempvariableset;
31946     +       set tempvariableset tempvars;
31947     +     run;
31948     +     %end;
31949     +   %end;
31950     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
31952     +   %if &useImport eq 1 %then %do;
31953     +     /* remove all variables from tempvariableset that are included in the importsubset */
31954     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
31955     +       by _VARIABLE_ ;
31956     +     run;
31957     +     proc sort data=tempvariableset; by NAME; run;
31959     +     data tempvariableset;
31960     +       merge tempimport(in=_a) tempvariableset(in=_b);
31961     +       by NAME;
31962     +       if ^_a then output;
31963     +     run;
31964     +   %end;
31966     +   %if &useFreeze eq 1 %then %do;
31967     +     /* remove all variables from tempvariableset that are included in the freezesubset */
31968     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
31969     +       by _VARIABLE_ ;
31970     +     run;
31971     +     proc sort data=tempvariableset; by NAME; run;
31973     +     data tempvariableset;
31974     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
31975     +       by NAME;
31976     +       if ^_a then output;
31977     +     run;
31978     +   %end;
31980     +   /* get dataset of distinct values for the ordinal variable */
31981     +   %let nobs = 0;
31982     +   %let dsid = %sysfunc(open(WORK.tempvariableset));
31983     +   %if &dsid %then %do;
31984     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
31985     +     %if &nobs gt 0 %then %do;
31986     +         %let obs = %sysfunc(fetch(&dsid));
31987     +         %do %while(&obs=0);
31988     +           %let varnum = %sysfunc(VARNUM(&dsid, NAME));
31989     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
31990     +           %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
31991     +           %let input_type = %sysfunc(getvarc(&dsid, &typenum));
31992     +           %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
31993     +           %let input_fmt = %sysfunc(getvarc(&dsid, &fmtnum));
31994     +           %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
31995     +           %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
31996     +           %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
31998     +           data temp;
31999     +             set &EM_USER_BINDATA(keep=&varname);
32000     +             %if &input_fmt ne %then %do;
32001     +               %dmnormcp(put(&varname, &input_fmt), _norm);
32002     +             %end;
32003     +             %else %do;
32004     +               %dmnormcp(&varname, _norm);
32005     +             %end;
32006     +             keep &varname _norm;
32007     +           run;
32009     +          proc dmdb data=temp classout=_classout2;
32010     +           class _norm;
32011     +         run;
32012     +         proc sort data=_classout2; by LEVEL; run;
32014     +         /* re-order numeric inputs based on non-normalized values */
32015     +         %if &input_type eq N %then %do;
32016     +           proc sort data=temp nodupkey; by _norm; run;
32017     +           data varvals;
32018     +             merge temp _classout2(rename=(LEVEL=_norm));
32019     +             by _norm;
32020     +             if craw='' and _norm ne '.' then delete;
32021     +             keep &varname _norm nraw craw;
32022     +           run;
32024     +           proc sort data=varvals; by &varname; run;
32025     +         %end;
32026     +         %else %do;
32027     +           data varvals;
32028     +              set _classout2(rename=(LEVEL=_norm));
32029     +              if _norm='' then delete;
32030     +              if _norm='.' then delete;
32031     +              keep _norm;
32032     +           run;
32033     +         %end;
32034     +         data varvals;
32035     +           set varvals;
32036     +           if &varname="." then delete;
32037     +           if upcase(&varname) = "MISSING" then delete;
32038     +         run;
32040     +          /* generate Splitvals Data */
32041     +          data tempsplitvals;
32042     +            length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ _order_ 8 _level_ $8 _norm_level_ $200 ;
32044     +            %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
32045     +              DISPLAY_VAR="&varname";
32046     +              _VARIABLE_ ="&varname";
32047     +              newgroup   =.;
32048     +              _group_    =1;
32049     +              _Split_Value_="Missing";
32050     +              _level_    ="ORDINAL";
32051     +              output;
32052     +              %let group=2;
32053     +            %end;
32054     +            %else %let group=1;
32056     +            %let vdsid = %sysfunc(open(WORK.VARVALS));
32057     +            %if &vdsid %then %do;
32058     +            %let namenum = %sysfunc(VARNUM(&vdsid, _norm));
32059     +            /*%let group = 2;*/
32060     +            %let vobs = %sysfunc(fetch(&vdsid));
32061     +            %do %while(&vobs=0);
32062     +                %let nameval = %bquote(%upcase(%sysfunc(getvarc(&vdsid, &namenum))));
32064     +                DISPLAY_VAR   = "&varname";
32065     +                _variable_    = "&varname";
32066     +                newgroup      = .;
32067     +                _group_       = &group;
32068     +                _split_value_ = "&nameval";
32069     +                _level_       = 'ORDINAL';
32070     +                output;
32072     +              %let group = %eval(&group + 1);
32073     +              %let vobs = %sysfunc(fetch(&vdsid));
32074     +            %end;
32075     +            %if &vdsid %then %let vdsid = %sysfunc(close(&vdsid));
32076     +          run;
32078     +          /* determine if EM_USER_SPLITVALS already exists */
32079     +          %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
32080     +          %if &sdsid > 0 %then %do;
32081     +            %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
32082     +            %if &nvars > 0 %then %do;
32083     +               proc sql;
32084     +                reset noprint;
32085     +                select count(*) into :nobs from &EM_USER_SPLITVALS;
32086     +               quit;
32087     +            %end;
32088     +            %else %let nobs=0;
32089     +            %end;
32090     +            %else %do;
32091     +              %let nobs=0;
32092     +              %let nvars=0;
32093     +            %end;
32094     +          %end;
32095     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
32097     +          /* if tempsplitvals doesn't exist; create empty data set */
32098     +          %let sdsid = %sysfunc(open(work.tempsplitvals));
32099     +          %if &sdsid <= 0 %then %do;
32100     +            data tempsplitvals;
32101     +              length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ 8 _level_ $8 ;
32102     +            run;
32103     +          %end;
32104     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
32106     +          data tempsplitvals;
32107     +            set tempsplitvals;
32108     +            _order_ = _N_;
32109     +          run;
32111     +          %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
32112     +             proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
32113     +             proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
32114     +          %end;
32116     +          data &EM_USER_SPLITVALS;
32117     +           %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
32118     +             merge &EM_USER_SPLITVALS tempsplitvals;
32119     +             by _variable_ _split_value_;
32120     +           %end;
32121     +           %else %do;
32122     +             set tempsplitvals;
32123     +           %end;
32124     +           if display_var eq "" then delete;
32125     +           if _norm_level_ eq "" then _norm_level_ = _split_value_;
32126     +           keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_ _order_;
32127     +         run;
32129     +           %let obs = %sysfunc(fetch(&dsid));
32130     +         %end;
32131     +     %end;
32132     +   %end;
32133     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32135     +   proc sort data=&EM_USER_SPLITVALS;
32136     +      by DISPLAY_VAR _Group_;
32137     +   run;
32139     +   /* delete temporary datasets */
32140     +   proc datasets library= work nolist;
32141     +     delete tempsplitvals varvals tempvariableset tempvars
32142     +     ;
32143     +   run;
32144     +   quit;
32145     +%mend EM_ORDVARS_GROUP;
32148     +%macro EM_CLASSVARS_GROUP(groupRare);
32150     +   /* retrieve all class variables from the incoming dataset */
32151     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
32152     +     by NAME;
32153     +     where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
32154     +   run;
32156     +   %if &useImport eq 1 %then %do;
32157     +     /* remove all variables from tempvariableset that are included in the importsubset */
32158     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
32159     +       by _VARIABLE_ ;
32160     +     run;
32161     +     proc sort data=tempvariableset; by NAME; run;
32163     +     data tempvariableset;
32164     +       merge tempimport(in=_a) tempvariableset(in=_b);
32165     +       by NAME;
32166     +       if ^_a then output;
32167     +     run;
32168     +   %end;
32170     +   %if &useFreeze eq 1 %then %do;
32171     +     /* remove all variables from tempvariableset that are included in the freezesubset */
32172     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
32173     +       by _VARIABLE_ ;
32174     +     run;
32175     +     proc sort data=tempvariableset; by NAME; run;
32177     +     data tempvariableset;
32178     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
32179     +       by NAME;
32180     +       if ^_a then output;
32181     +     run;
32182     +   %end;
32184     +   /* run dmdb to retrieve list of all class levels and counts */
32185     +   %let dsid = %sysfunc(open(work.tempvariableset));
32186     +   %let nobs = 0;
32187     +   %if &dsid %then %do;
32188     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
32190     +   %end;
32192     +   %if &nobs gt 0 %then %do;
32193     +     proc dmdb data=&EM_IMPORT_DATA classout=tempclassout;
32194     +       class
32196     +        %let namenum = %sysfunc(VARNUM(&dsid, NAME));
32197     +        %let obs = %sysfunc(fetch(&dsid));
32198     +        %do %while(&obs=0);
32199     +           %let name = %sysfunc(getvarc(&dsid, &namenum));
32200     +           &name
32201     +           %let obs = %sysfunc(fetch(&dsid));
32202     +        %end;
32203     +     ;
32205     +     %if %EM_FREQ ne %then %do;
32206     +        freq %EM_FREQ;
32207     +     %end;
32208     +    run;
32209     +   %end;
32210     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32212     +   %let dsid = %sysfunc(open(work.tempclassout));
32213     +   %let nobs = 0;
32214     +   %if &dsid %then %do;
32215     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
32216     +     %let dsid = %sysfunc(close(&dsid));
32217     +   %end;
32219     +   %if &nobs gt 0 %then %do;
32220     +    data tempclassout;
32221     +       set tempclassout;
32222     +       if LEVEL='MISSING' then level='Missing';
32223     +    run;
32225     +    proc sort data=tempclassout nodupkey;
32226     +      by NAME descending FREQUENCY LEVEL;
32227     +    run;
32229     +    data tempds(keep=NAME NOBS);
32230     +      retain NOBS;
32231     +      set tempclassout;
32232     +      by NAME;
32233     +      if first.NAME then
32234     +        NOBS = frequency;
32235     +      else
32236     +        NOBS=NOBS+frequency;
32237     +      if last.name then do;
32238     +        output;
32239     +      end;
32240     +    run;
32242     +    data tempds;
32243     +      merge tempclassout
32244     +      tempds;
32245     +      by NAME;
32246     +      if ((LEVEL ne '') AND (LEVEL ne "."));
32247     +      %if &groupRare eq Y %then %do;
32248     +        PCT = 100 * (FREQUENCY/NOBS);
32249     +        if PCT < &EM_PROPERTY_GROUPCUTOFF then flag=1;
32250     +        else flag=0;
32251     +      %end;
32252     +      %else %do;
32253     +        flag = 0;
32254     +      %end;
32255     +    run;
32257     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
32258     +      data tempmissvalues;
32259     +        length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
32261     +      %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
32262     +      %if &dsid %then %do;
32263     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
32264     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
32265     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
32266     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
32267     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
32268     +        %let obs = %sysfunc(fetch(&dsid));
32270     +        %do %while(&obs=0);
32271     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
32272     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
32273     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
32274     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
32276     +          NAME="&var";
32277     +          LEVEL="Missing";
32278     +          _LEVEL_="&varlvl";
32279     +          _group_ = 1;
32280     +          output;
32282     +          %let obs = %sysfunc(fetch(&dsid));
32283     +        %end;
32284     +      %end;
32285     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32286     +      run;
32287     +    %end;
32289     +    /* generate Splitvals Data */
32290     +    data tempsplitvals;
32291     +      length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
32293     +      set tempclassout
32294     +      %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
32295     +         tempmissvalues
32296     +      %end;
32297     +      ;
32298     +      if ((level ne '') AND (level ne '.'));
32300     +     %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
32301     +     %if &dsid %then %do;
32302     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
32303     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
32304     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
32305     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
32306     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
32307     +        %let obs = %sysfunc(fetch(&dsid));
32309     +        %do %while(&obs=0);
32310     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
32311     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
32312     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
32313     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
32315     +          if NAME = "&var" then do;
32316     +            _LEVEL_ = "&varlvl";
32318     +          /* cycle through levels, assigning group values;              */
32319     +          /* flag=1 indicates to put value in "_OTHER_" group;          */
32320     +          /* flag=0 indicates that value shoudld be in group of its own */
32321     +          %let choice = ((NAME="&Var") and (FLAG=0));
32322     +          %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
32323     +            %let group=2;
32324     +          %end;
32325     +          %else %do;
32326     +            %let group = 1;
32327     +          %end;
32328     +          %let fdsid = %sysfunc(open(work.tempds(where=(&choice))));
32329     +          %if &fdsid %then %do;
32331     +            %let lvlnum = %sysfunc(VARNUM(&fdsid, LEVEL));
32332     +            %let fobs = %sysfunc(fetch(&Fdsid));
32333     +            %let fflag = 0;
32334     +            %do %while(&fobs=0);
32335     +              %let fflag = 1;
32336     +              %let temp = %nrbquote(%sysfunc(getvarc(&fdsid, &lvlnum)));
32337     +              %let level = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
32338     +              %let level = %nrbquote(%sysfunc(strip(&level)));
32339     +              %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
32340     +                %if &group eq 2 %then %do;
32341     +                   if LEVEL = "&level" then _GROUP_ = &group;
32342     +                %end;
32343     +                %else %do;
32344     +                   else if LEVEL = "&level" then _GROUP_ = &group;
32345     +                %end;
32346     +              %end;
32347     +              %else %do;
32348     +                %if &group eq 1 %then %do;
32349     +                   if LEVEL = "&level" then _GROUP_ = &group;
32350     +                %end;
32351     +                %else %do;
32352     +                   else if LEVEL = "&level" then _GROUP_ = &group;
32353     +                %end;
32354     +              %end;
32356     +              %let group = %eval(&group + 1);
32357     +              %let fobs = %sysfunc(fetch(&fdsid));
32358     +            %end;
32360     +          %end;
32361     +          %if &fflag eq 1 %then %do;
32362     +            else if LEVEL ^='Missing' then _GROUP_ = &group;
32363     +          %end;
32364     +          end;
32366     +          %if &fdsid %then %let fdsid = %sysfunc(close(&fdsid));
32367     +          %let obs = %sysfunc(fetch(&dsid));
32368     +        %end;
32369     +     %end;
32370     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32371     +     _VARIABLE_ = NAME;
32372     +     newgroup = .;
32373     +     rename NAME = DISPLAY_VAR
32374     +            LEVEL = _SPLIT_VALUE_;
32375     +     keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
32376     +    run;
32377     +  %end;
32378     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32380     +    /* determine if EM_USER_SPLITVALS already exists */
32381     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
32382     +    %if &sdsid > 0 %then %do;
32383     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
32384     +      %if &nvars > 0 %then %do;
32385     +        proc sql;
32386     +          reset noprint;
32387     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
32388     +        quit;
32389     +      %end;
32390     +      %else %let nobs=0;
32391     +    %end;
32392     +    %else %do;
32393     +       %let nobs=0;
32394     +       %let nvars=0;
32395     +    %end;
32396     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
32398     +   /* if tempsplitvals doesn't exist; create empty data set */
32399     +    %let sdsid = %sysfunc(open(work.tempsplitvals));
32400     +    %if &sdsid <= 0 %then %do;
32401     +      data tempsplitvals;
32402     +        length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
32403     +      run;
32404     +    %end;
32405     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
32407     +    %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
32408     +      proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
32409     +      proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
32410     +    %end;
32412     +    /* if useIMport=1 also include import definitions here as well */
32413     +    %if &useImport eq 1 %then %do;
32414     +      proc sort data=&EM_USER_IMPORTSUBSET; by _variable_ _split_value_; run;
32415     +    %end;
32416     +    %if &useFreeze eq 1 %then %do;
32417     +      proc sort data=&EM_USER_FREEZESUBSET; by _variable_ _split_value_; run;
32418     +    %end;
32419     +    data &EM_USER_SPLITVALS;
32420     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
32421     +        merge &EM_USER_SPLITVALS tempsplitvals
32422     +        %if &useImport eq 1 %then %do;
32423     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
32424     +        %end;
32425     +        %if &useFreeze eq 1 %then %do;
32426     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
32427     +        %end;
32429     +        ;
32430     +        by _variable_ _split_value_
32431     +        ;
32432     +      %end;
32433     +      %else %do;
32434     +        set tempsplitvals
32435     +        %if &useImport eq 1 %then %do;
32436     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
32437     +        %end;
32438     +        %if &useFreeze eq 1 %then %do;
32439     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
32440     +        %end;
32441     +        ;
32442     +      %end;
32443     +      if display_var eq "" then delete;
32444     +      if _norm_level_ eq "" then _norm_level_ = _split_value_;
32445     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
32446     +    run;
32448     +    proc sort data=&EM_USER_SPLITVALS;
32449     +      by DISPLAY_VAR _Group_;
32450     +    run;
32452     +   /* delete temporary datasets */
32453     +   proc datasets library= work nolist;
32454     +     delete tempsplitvals tempds tempclassout tempvariableset tempvars
32455     +     %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
32456     +       tempmissvalues
32457     +     %end;
32458     +     ;
32459     +   run;
32460     +   quit;
32461     +%mend EM_CLASSVARS_GROUP;
32464     +%macro EM_SUMMARIZE_TABLE(data, inputData, outData, varname=);
32466     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
32468     +  data temptrain ;
32469     +    set &data;
32470     +  run;
32472     +  /* normalize all values prior to calculating counts */
32473     +  filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
32474     +  %include _temp;
32475     +  filename _temp;
32476     +  filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
32477     +  %include _temp;
32478     +  filename _temp;
32480     +  proc sort data=&EM_USER_VARMAPPINGS
32481     +  %if &varname ne %then %do;
32482     +    (where=(_variable_="&varname"))
32483     +  %end;
32484     +  out=tempmap; by _variable_; run;
32486     +  data _cmeta;
32487     +    merge tempvarset tempmap(in=_a rename=(_variable_=name ));
32488     +    by name;
32489     +    if ((_a) or (role="TARGET"));
32490     +    if role="INPUT" then name=_proc_var_;
32491     +    if role="TARGET" then role="INPUT";
32492     +    level = procLevel;
32493     +    index = kindex(name, "BIN_");
32494     +    if index gt 0 then do;
32495     +     level="ORDINAL";
32496     +     format = "";
32497     +    end;
32498     +    drop index;
32499     +  run;
32501     +  %em_PreNormalizeClassVars(incmeta=_cmeta, outcmeta=_cmetatmp);
32502     +  %em_NormalizeClassVars(indata=work.temptrain, cmeta=_cmetatmp, encodedTarget=N, outdata=_tmp_train);
32504     +  proc sort data=&inputData out=sortedmap; by _proc_var_; run;
The SAS System

32506     +  data _null_;
32507     +    set sortedmap end=eof;
32508     +    by _proc_var_;
32509     +    if _n_=1 then do;
32510     +      call execute("ods output CrossTabFreqs=crosstabfreq ;");
32511     +      call execute("proc freq data=_tmp_train order=formatted addnames;");
32512     +      call execute("tables ("||_proc_var_);
32513     +    end;
32514     +    else do;
32515     +      call execute(_proc_var_);
32516     +    end;
32517     +    if eof then do;
32518     +      call execute(") * %EM_BINARY_TARGET/ missing;");
32519     +      %if %EM_FREQ ne %then %do;
32520     +        call execute("weight %EM_FREQ;");
32521     +      %end;
32522     +      call execute("run;");
32523     +      call execute("ods output close;");
32524     +    end;
32525     +  run;
32527     +  data _null_;
32528     +    set sortedmap end=eof;
32529     +    by _proc_var_;
32530     +    if _n_=1 then do;
32531     +      call execute("data crosstabs;");
32532     +      call execute("  length _variable_ _split_value_  $200 ;");
32533     +      call execute("  set crosstabfreq(where=(_type_='11'));");
32534     +      call execute("  _variable_= RowVariable;");
32535     +    end;
32537     +    call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
32538     +    call execute("  _split_value_="||_proc_var_||";");
32539     +    call execute("end;");
32541     +    if eof then do;
32542     +      call execute("keep _variable_ _split_value_ %EM_BINARY_TARGET Frequency Percent display_var;");
32543     +      call execute("run;");
32544     +    end;
32545     +  run;
32547     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
32549     +  data crosstabs;
32550     +    length display_var $32;
32551     +    merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
32552     +    by _variable_;
32553     +  run;
32555     +  proc sort data=crosstabs; by display_var _split_value_; run;
32556     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
32558     +  data crosstabs;
32559     +    merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
32560     +    by display_var;
32561     +    index = kindex(_variable_, "BIN_");
32562     +    if index gt 0 then do;
32563     +     level="ORDINAL";
32564     +     format = "";
32565     +    end;
32566     +    _temp = %EM_BINARY_TARGET;
32567     +    /*
32568     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
32569     +      %if &target_format ne %then %do;
32570     +        %if &target_type eq C %then %do;
32571     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
32572     +        %end;
32573     +        %else %do;
32574     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
32575     +        %end;
32576     +      %end;
32577     +      %else %do;
32578     +        %dmnormcp(%EM_BINARY_TARGET, _temp);
32579     +      %end;
32580     +    %end;
32581     +    %else %do;
32582     +      _temp = %EM_BINARY_TARGET;
32583     +    %end;
32584     +*/
32586     +    drop index;
32587     +  run;
32589     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
32591     +  data &outdata;
32592     +    length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate  8 type $1 valfmt $20 ;
32594     +    retain eventCount noneventCount ;
32595     +    set crosstabs;
32596     +    by  _variable_ _split_value_;
32598     +    if first._split_value_ then do;
32599     +     total=0;
32600     +     eventcount=0;
32601     +     noneventcount=0;
32602     +    end;
32604     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
32605     +      %if &target_format ne %then %do;
32606     +        if upcase(strip(_temp))="&target_event" then
32607     +          eventCount=Frequency;
32608     +      %end;
32609     +      %else %do;
32610     +         if upcase(strip(_temp)) ="&target_event" then
32611     +          eventCount=Frequency;
32612     +      %end;
32613     +    %end;
32614     +    %else %do;
32615     +      if _temp=&target_event then
32616     +        eventCount=Frequency;
32617     +    %end;
32618     +    else
32619     +      noneventCount=Frequency;
32621     +    if last._split_value_ then do;
32622     +      total = eventCount + noneventCount;
32624     +      if total ne 0 then do;
32625     +        eventRate = eventCount / total;
32626     +        nonEventRate = nonEventCount / total;
32627     +      end;
32628     +      else do;
32629     +        eventRate = 0;
32630     +        nonEventRate = 0;
32631     +      end;
32634     +     output;
32635     +    end;
32636     +    valfmt = format;
32638     +    drop _temp Frequency percent;
32639     +   run;
32641     +%mend EM_SUMMARIZE_TABLE;
32644     +%macro EM_FINE_DETAIL(bindata, varmappings, fineDetailData, splitVals, binMappings, interactiveFlag=0);
32646     +   proc freq data=&bindata noprint;
32647     +     table %EM_BINARY_TARGET / missing out=temptargetB;
32648     +     %if %EM_FREQ ne %then %do;
32649     +       weight %EM_FREQ;
32650     +     %end;
32651     +   run;
32653     +   %let tdsid = %sysfunc(open(work.temptargetB));
32654     +   %if &tdsid %then %do;
32655     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
32656     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
32658     +      %let temp = %nrbquote(%sysfunc(strip(&target_event)));
32659     +      %let target_event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
32660     +      %let temp = %nrbquote(%sysfunc(strip(&target_nonevent)));
32661     +      %let target_nonevent = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
32664     +      %let obs = %sysfunc(fetch(&tdsid));
32665     +      %do %while(&obs = 0);
32666     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
32667     +           %if &target_type eq C %then %do;
32668     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
32669     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
32670     +           %end;
32671     +           %else
32672     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
32674     +           %if &target_format ne %then %do;
32675     +              %if &target_type eq C %then %do;
32676     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
32677     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
32678     +              %end;
32679     +              %else
32680     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
32681     +           %end;
32682     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
32683     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
32685     +           %if "&tarvalue" eq "&target_event" %then %do;
32686     +             %let totalevent = &count;
32687     +           %end;
32688     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
32689     +              %let totalnonevent= &count;
32690     +           %end;
32691     +         %end;
32692     +         %else %do;
32693     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
32694     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
32696     +           %if &tarvalue eq &target_event %then %do;
32697     +             %let totalevent = &count;
32698     +           %end;
32699     +           %else %if &tarvalue eq &target_nonevent %then %do;
32700     +              %let totalnonevent= &count;
32701     +           %end;
32702     +         %end;
32703     +         %let obs = %sysfunc(fetch(&tdsid));
32704     +      %end;
32705     +   %end;
32706     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
32708     +   proc datasets lib=work nolist;
32709     +      delete temptargetB;
32710     +   run;
32711     +   quit;
32713     +   %if &interactiveFlag eq 0 %then %do;
32714     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData);
32715     +   %end;
32716     +   %else %do;
32717     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData, varname=&wherevar);
32718     +   %end;
32721     +   data &fineDetailData;
32722     +     length display_var $32 newgroup numsplitval 8;
32723     +     set &fineDetailData;
32725     +     display_var = _variable_;
32727     +     index = kindex(display_var, "BIN_");
32728     +     if index gt 0 then do;
32729     +       display_var = ksubstr(display_var, 5);
32730     +     end;
32732     +     index2 = kindex(display_var, "SV_");
32733     +     if index2 gt 0 then do;
32734     +       display_var = ksubstr(display_var, 4);
32735     +     end;
32737     +     /* re-code missing values to "Missing" */
32738     +     if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
32739     +     _index_ = _N_;
32740     +     newgroup = .;
32741     +     drop index index2 ;
32742     +   run;
32744     +   /* add group information to fineDetailData; */
32745     +   /* add label information for binned variables to fineDetailData*/
32747     +   proc sort data=&fineDetailData; by _variable_ _split_value_; run;
32749     +   data tmpsplitvals;
32750     +     set &splitvals;
32751     +     _norm_level_ = upcase(_norm_level_);
32752     +     if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
32753     +    * drop _split_value_;
32754     +   run;
32756     +   proc sort data=tmpsplitvals out=sortedsplit; by _variable_ _split_value_; run;
32757     +   proc datasets library=work nolist;
32758     +     delete tmpsplitvals;
32759     +   run;
32760     +   quit;
32762     +   proc sort data=&BINMAPPINGS out=sortedbin; by BIN_NAME BIN; run;
32764     +   data &fineDetailData;
32765     +      merge &fineDetailData(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
32766     +      by _variable_ _split_value_;
32767     +      if _a then do;
32768     +        binFlag = 1;
32769     +        VALUE=EM_BIN_LABEL;
32770     +      end;
32771     +      else do;
32772     +        binFlag = 0;
32773     +        *VALUE=strip(display_var)!!"="!!strip(_split_value_);
32774     +        VALUE=strip(_split_value_);
32776     +      end;
32778     +      if ((eventCount=.) or (nonEventCount=.)) then do;
32779     +        eventCount=0;
32780     +        nonEventCount=0;
32781     +        total = 0;
32782     +        eventRate= 0;
32783     +        nonEventRate = 0;
32784     +      end;
32786     +      eventCount = round(eventCount, .001);
32787     +      nonEventCount = round(nonEventCount, .001);
32788     +      total= round(total, .001);
32789     +      eventRate = round(eventRate, .001);
32790     +      nonEventRate = round(nonEventRate, .001);
32792     +     if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then
32793     +         numsplitval = _split_value_;
32794     +     else if ((type='N') AND (valfmt ne "")) then
32795     +        numsplitval = _order_;
32796     +     else numsplitval=.;
32798     +      if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
32799     +      if _a and ^_b then delete;
32800     +      if _c and ^_b then delete;
32801     +      drop NAME EM_BIN_LABEL valfmt;
32802     +   run;
32804     +   /* for class variables that have values falling into the "other" category, set _LEVEL_ and _GROUP_ based on Missing level */
32805     +   data &fineDetailData;
32806     +     set &fineDetailData;
32808     +     %let choice = _LEVEL_ ne "INTERVAL" and _SPLIT_VALUE_ eq "Missing";
32809     +     %let dsid = %sysfunc(open(&splitvals(where=(&choice))));
32810     +     %if &dsid %then %do;
32811     +       %let dnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
32812     +       %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
32813     +       %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
32815     +       %let obs = %sysfunc(fetch(&dsid));
32816     +       %do %while(&obs=0);
32817     +         %let dispvar = %sysfunc(getvarc(&dsid, &dnum));
32818     +         %let lvl     = %sysfunc(getvarc(&dsid, &lvlnum));
32819     +         %let group   = %sysfunc(getvarn(&dsid, &grpnum));
32821     +         if DISPLAY_VAR = "&dispvar" then do;
32822     +           if _LEVEL_ = "" then _LEVEL_ ="&lvl";
32823     +           if _GROUP_ = . then _GROUP_ = &group;
32824     +         end;
32826     +         %let obs = %sysfunc(fetch(&dsid));
32827     +       %end;
32828     +     %end;
32829     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32830     +     if _GROUP_ = . then delete;
32831     +    * if binFlag=1 and UB=LB then delete;
32832     +    * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
32833     +   run;
32835     +   proc sort data=&fineDetailData;
32836     +     by DISPLAY_VAR _index_;
32837     +   run;
32839     +   proc datasets lib=work nolist;
32840     +     delete sortedsplit sortedbin
32841     +     ;
32842     +   run;
32843     +   quit;
32844     +%mend EM_FINE_DETAIL;
32846     +%macro EM_CREATE_GROUPING(bindata, fineDetailData, coarse);
32848     +   proc freq data=&bindata noprint;
32849     +     table %EM_BINARY_TARGET / missing out=temptargetC;
32850     +     %if %EM_FREQ ne %then %do;weight %EM_FREQ;
32851     +     %end;
32852     +   run;
32854     +   %let tdsid = %sysfunc(open(work.temptargetC));
32855     +   %if &tdsid %then %do;
32856     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
32857     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
32859     +      %let obs = %sysfunc(fetch(&tdsid));
32860     +      %do %while(&obs = 0);
32861     +        /* %if &target_type eq C or &target_format ne %then %do; */
32862     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
32863     +           %if &target_type eq C %then %do;
32864     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
32865     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
32866     +           %end;
32867     +           %else
32868     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
32870     +           %if &target_format ne %then %do;
32871     +              %if &target_type eq C %then %do;
32872     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
32873     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
32874     +              %end;
32875     +              %else
32876     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
32877     +           %end;
32878     +           %let tarvalue =%nrbquote(%upcase(&tarvalue));
32879     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
32881     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
32882     +           %let target_event = %nrbquote(%sysfunc(strip(&target_event)));
32883     +           %let target_nonevent = %nrbquote(%sysfunc(strip(&target_nonevent)));
32885     +           %if "&tarvalue" eq "&target_event" %then %do;
32886     +             %let totalevent = &count;
32887     +           %end;
32888     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
32889     +              %let totalnonevent= &count;
32890     +           %end;
32891     +         %end;
32892     +         %else %do;
32893     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
32894     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
32896     +           %if &tarvalue eq &target_event %then %do;
32897     +             %let totalevent = &count;
32898     +           %end;
32899     +           %else %if &tarvalue eq &target_nonevent %then %do;
32900     +              %let totalnonevent= &count;
32901     +           %end;
32902     +         %end;
32903     +         %let obs = %sysfunc(fetch(&tdsid));
32904     +      %end;
32905     +   %end;
32906     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
32908     +   proc datasets lib=work nolist;
32909     +      delete temptargetC;
32910     +   run;
32911     +   quit;
32913     +   proc means data=&FINEDETAILDATA noprint;
32914     +      var eventCount nonEventCount;
32915     +      class _variable_  _group_;
32916     +      output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
32917     +   run;
32919     +   proc sort data=summ(drop=_type_ _freq_);
32920     +     by _variable_ _group_;
32921     +   run;
32923     +   data gini(keep=_variable_ eventCount nonEventCount groupresprate)
32924     +        tempcoarse(keep=_variable_  _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
32925     +        set summ;
32926     +        format groupresprate 6.2;
32927     +        format groupnonresprate 6.2;
32928     +        by _variable_ ;
32929     +        if _group_=. then do;
32930     +        end;
32931     +        else do;
32932     +           respper = eventCount / &totalEvent;
32933     +           nrespper = nonEventCount / &totalNonEvent;
32935     +           if ((nonEventCount = 0) AND (eventCount = 0)) then do;
32936     +                groupresprate=0;
32937     +                groupNonresprate = 0;
32938     +                eventRate = 0;
32939     +                nonEventRate = 0;
32940     +           end;
32941     +           else do;
32942     +               groupresprate = eventCount / (eventCount + nonEventCount) * 100;
32943     +               groupNonRespRate = 100 - groupRespRate;
32944     +               eventRate = eventCount / &totalEvent * 100;
32945     +               nonEventRate = nonEventCount / &totalNonEvent * 100;
32946     +            end;
32948     +           output gini tempcoarse;
32950     +        end;
32951     +   run;
32952     +   proc sort data=gini;
32953     +      by _variable_ descending groupresprate;
32954     +   run;
32956     +   data gini(keep= _variable_ _gini_);
32957     +     retain between within cumresp cumnresp;
32958     +     set gini(keep=_variable_  eventCount nonEventCount);
32959     +     by _variable_;
32960     +     if first._variable_ then do;
32961     +       between  = 0;
32962     +       within   = 0;
32963     +       cumresp  = 0;
32964     +       cumnresp = 0;
32965     +     end;
32966     +     between + 2 * cumnresp * eventCount;
32967     +     within + nonEventCount * eventCount;
32968     +     cumresp + eventCount;
32969     +     cumnresp + nonEventCount;
32970     +     if last._variable_ then do;
32971     +       if ^(cumnresp=0 or cumresp=0) then do;
32972     +         _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
32973     +         output;
32974     +       end;
32975     +     end;
32976     +   run;
32978     +   data tempdisplayvar;
32979     +      set &EM_USER_VARMAPPINGS;
32980     +      rename _variable_ = display_var
32981     +      _proc_var_ = _variable_;
32982     +   keep _variable_ _proc_var_ label;
32983     +   run;
32984     +   proc sort data=tempdisplayvar; by _variable_; run;
32986     +   data  &COARSE;
32987     +     length display_Var $32 label _label_ $200 role $10 _group_ 8;
32988     +     merge tempdisplayvar tempcoarse gini ;
32989     +     by _variable_;
32990     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
32991     +           eventRate   = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventrate_vlabel , NOQUOTE))"
32992     +           nonEventRate = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventrate_vlabel , NOQUOTE))"
32993     +           _group_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel , NOQUOTE))"
32994     +           role       = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel , NOQUOTE))"
32995     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_gini_vlabel  , NOQUOTE))"
32996     +           eventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventcount_vlabel  , NOQUOTE))"
32997     +           noneventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventcount_vlabel  , NOQUOTE))"
32998     +           groupresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupresprate_vlabel  , NOQUOTE))"
32999     +           groupnonresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupnonresprate_vlabel  , NOQUOTE))"
33000     +           ;
33002     +    eventCount = round(eventCount, .001);
33003     +    nonEventCount = round(nonEventCount, .001);
33004     +    groupRespRate = round(groupRespRate, .001);
33006     +     drop _variable_ index index2 respper nrespper;
33007     +   run;
33009     +   proc datasets library=work nolist;
33010     +     delete  tempcoarse gini             ;
33012     +   run;
33013     +   quit;
33015     +%mend EM_CREATE_GROUPING;
33019     +%macro EM_GENERATE_LABELVALUES(filename, splitvals, binmappings, coarse);
33021     +         data _null_;
33022     +            FILE &filename;
33023     +            put " length _LABEL_ $200;";
33024     +            put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
33025     +         run;
33027     +         proc sort data=&SPLITVALS out=work.sortedsplitval; by display_var _split_Value_; run;
33028     +         proc sort data=&BINMAPPINGS; by display_var bin; run;
33030     +         data temp;
33031     +           merge work.sortedsplitval(in=_a) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
33032     +           by Display_Var _Split_value_;
33033     +           if upcase(_Split_value_) ne 'MISSING';
33034     +           if _a then output;
33035     +           if display_var eq '' then delete;
33036     +         run;
33038     +         data temp_missing;
33039     +           merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
33040     +           by Display_Var _Split_value_;
33041     +           if upcase(_Split_value_) eq 'MISSING';
33042     +           if _a then output;
33043     +           keep _variable_ display_var missgrp;
33044     +         run;
33046     +         proc sort data=temp out=class;
33047     +            by _variable_ _group_ LB;
33048     +         run;
33050     +         data _null_;
33052     +            file &filename MOD;
33053     +            length string $200 flag 8;
33054     +            retain string flag;
33055     +            set class end=eof;
33056     +            by _variable_  _group_;
33058     +            index = kindex(_variable_, "BIN_");
33059     +            if index gt 0 then do;
33060     +              if first._group_ then do;
33061     +                flag = 0;
33062     +                if ^first._variable_ then
33063     +                    put 'else';
33064     +                 else
33065     +                    put ' ';
33067     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
33068     +                          !!strip(put(_GROUP_,best12.))!!' then do;';
33069     +                 put string;
33071     +                 if LB ne . then do;
33072     +                   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
33073     +                    string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
33074     +                 end;
33075     +                 else do;
33076     +                    flag = 1;
33077     +                    *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
33078     +                    string = " _LABEL_='"!!strip(DISPLAY_VAR);
33079     +                 end;
33081     +              end;
33082     +              if last._Group_ then do;
33083     +                 if UB ne . then do;
33084     +                    string = strip(string)!!'< '!!strip(UB)!!"';";
33085     +                 end;
33086     +                 else do;
33087     +                    if flag=1 then do;
33088     +                      string = strip(string)!!"';";
33089     +                     /* string = strip(string)!!'='!!strip(_split_Value_)!!"';";*/
33090     +                    end;
33091     +                    else do;
33092     +                      string = strip(string)!!"';";
33093     +                    end;
33094     +                 end;
33095     +                 put string;
33097     +                 string= " UB="!!strip(UB)!!";";
33098     +                 put string;
33099     +                 put "end;";
33102     +              end;
33103     +            end;
33104     +            else do;
33105     +              _split_value_ = tranwrd(_split_value_,"'","''");
33106     +              if first._group_ then do;
33107     +                 flag = 0;
33108     +                 if ^first._variable_ then
33109     +                    put 'else';
33110     +                 else
33111     +                    put ' ';
33112     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
33113     +                          !!strip(put(_GROUP_,best12.))!!' then';
33114     +                 put string;
33115     +                 string = "_LABEL_='"!!strip(_split_value_);
33116     +              end;
33117     +              else do;
33118     +                 if flag ne 1 then do;
33119     +                   tempstring = strip(string)!!', '!!strip(_split_value_);
33120     +                   length = length(tempstring);
33122     +                   if length < 195 then do;
33123     +                      string = tempstring;
33124     +                   end;
33125     +                   else do;
33126     +                      string = strip(string)||",...";
33127     +                      flag=1;
33128     +                   end;
33129     +                 end;
33130     +              end;
33132     +              if last._group_ then do;
33133     +                 string = strip(string)!!"';";
33134     +                 put string;
33135     +              end;
33136     +            end;
33137     +         run;
33139     +         data &COARSE;
33140     +           set &COARSE;
33141     +          /* %inc Y; */
33142     +           %inc &filename;
33143     +         run;
33144     +         *filename Y;
33146     +         /* add missing to appropriate label - based on temp_missing data */
33147     +         data &COARSE;
33148     +           set &COARSE;
33150     +           %let dsid = %sysfunc(open(work.temp_missing));
33151     +           %if &dsid %then %do;
33152     +              %let varnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
33153     +              %let grpnum = %sysfunc(VARNUM(&dsid, MISSGRP));
33155     +              %let obs = %sysfunc(fetch(&dsid));
33156     +              %do %while(&obs=0);
33157     +                 %let var = %sysfunc(getvarc(&dsid, &varnum));
33158     +                 %let grp = %sysfunc(getvarn(&dsid, &grpnum));
33160     +                 if DISPLAY_VAR = "&var" and _GROUP_ = &grp then do;
33161     +                   if _LABEL_ eq '' then do;
33162     +                     _LABEL_ = "Missing";
33163     +                   end;
33164     +                   else do;
33165     +                     _LABEL_ = strip(_LABEL_)!!", Missing";
33166     +                   end;
33167     +                 end;
33168     +                 %let obs = %sysfunc(fetch(&dsid));
33169     +              %end;
33170     +           %end;
33171     +           %if &dsid %then %let dsid = %sysfunc(close(&dsid));
33172     +         run;
33174     +         proc datasets library=work nolist;
33175     +           delete class temp temp_missing;
33176     +         run;
33177     +         quit;
33179     +%mend EM_GENERATE_LABELVALUES;
33181     +%macro calcValidationCoarse(input, output, varmappings, resultsTable);
33184     +%mend calcValidationCoarse;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename trtemp;
NOTE: Fileref TRTEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data temp;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where NAME =
MPRINT(TRAIN):  "DepVar";
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE NAME='DepVar';
NOTE: The data set WORK.TEMP has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc dmdb data=EMWS8.Part_TRAIN classout=EVENTOUT;
MPRINT(TRAIN):   target
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  (DESC);
MPRINT(TRAIN):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.EVENTOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   dsid = open("EVENTOUT");
MPRINT(TRAIN):   if dsid>0 then do;
MPRINT(TRAIN):   levelnum = VARNUM(dsid, "LEVEL");
MPRINT(TRAIN):   if levelnum then do;
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_EVENT', strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   dsid=close(dsid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete eventout;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK.EVENTOUT (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_FINEDETAILDATA;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_FINEDETAILDATA (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
      

MPRINT(TRAIN):   data tempvarnames;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
MPRINT(TRAIN):   keep NAME LEVEL LABEL;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK.TEMPVARNAMES has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
MPRINT(TRAIN):   names NAME;
MPRINT(TRAIN):   prefix WOE_ GRP_ ;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 3 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempmapping;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempvarnames;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPVARNAMES has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data tempmapping;
MPRINT(TRAIN):   merge tempmapping tempvarnames;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   rename LEVEL=procLevel;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_MAPPING_TABLE):  ;
MPRINT(EM_GENERATE_MAPPING_TABLE):   data EMWS8.BINNING_VARMAPPINGS(keep=_variable_ _grp_variable_ procLevel label);
MPRINT(EM_GENERATE_MAPPING_TABLE):   length _variable_ _grp_variable_ $32 procLevel $8;
MPRINT(EM_GENERATE_MAPPING_TABLE):   set tempmapping;
MPRINT(EM_GENERATE_MAPPING_TABLE):   label _variable_ = "Input Variable" _grp_variable_ = "Group Variable";
MPRINT(EM_GENERATE_MAPPING_TABLE):   _variable_ = NAME;
MPRINT(EM_GENERATE_MAPPING_TABLE):   _grp_variable_ = GRP;
MPRINT(EM_GENERATE_MAPPING_TABLE):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete tempImport tempScore;
MPRINT(TRAIN):   run;

NOTE: The file WORK.TEMPIMPORT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSCORE (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_SPLITVALS;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_SPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.37 seconds
      cpu time            0.23 seconds
      

MPRINT(EM_PRE_BINNING):   data tempvariableset;
MPRINT(EM_PRE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_PRE_BINNING):   where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 23 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 23 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc dmdb data=EMWS8.Part_TRAIN classout=_CLASSOUT maxlevel=11;
MPRINT(EM_PRE_BINNING):   class AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome;
MPRINT(EM_PRE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK._CLASSOUT has 230 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_PRE_BINNING):   proc freq data=_CLASSOUT order=DATA noprint;
MPRINT(EM_PRE_BINNING):   table NAME / OUT= _COUNT(where=(COUNT<11));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 230 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 4 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   set _COUNT;
MPRINT(EM_PRE_BINNING):   call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc sort data=_CLASSOUT;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 230 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 230 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(EM_PRE_BINNING):   var NRAW;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 230 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._OUT has 23 observations and 12 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   dsid = open('_OUT');
MPRINT(EM_PRE_BINNING):   if dsid then do;
MPRINT(EM_PRE_BINNING):   call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(EM_PRE_BINNING):   csid = close(dsid);
MPRINT(EM_PRE_BINNING):   end;
MPRINT(EM_PRE_BINNING):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _INTMID;
MPRINT(EM_PRE_BINNING):   set _OUT;
MPRINT(EM_PRE_BINNING):   keep VARIABLE _MIDPOINT1--_MIDPOINT11 ;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK._OUT.
NOTE: The data set WORK._INTMID has 23 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   label procLevel = "Level for Interactive";
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename temp catalog 'sashelp.emapps.quantile_binning.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMAPPS.QUANTILE_BINNING.SOURCE.
33189     +%macro em_apps_quantile_binning(input, vartable, numbins, binmappings, binningCode, codeMappings=, precision=0.01, dropOriginal=N);
33191     +  /* initialize binmappings table */
33192     +  data &BINMAPPINGS;
33193     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
33194     +  run;
33196     +  /* process only INTERVAL INPUTS */
33197     +  data tempvars;
33198     +    set &vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
33199     +  run;
33201     +  /* retrieve the name of interval inputs to bin */
33202     +  filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
33203     +  %include tempopen;
33204     +  filename tempopen;
33206     +  %let intvars = ;
33207     +  %global num_intvars;
33208     +  %let num_intvars = 0;
33209     +  %em_varmacro(name=intvars, metadata=tempvars, key=NAME, nummacro=num_intvars);
33211     +  /* retrieve the name of frequency variable if it exists */
33212     +  %let em_bin_freq = ;
33213     +  %let choice = ROLE="FREQ";
33214     +  %let fdsid = %sysfunc(open(&vartable(where=(&choice))));
33215     +  %if &fdsid %then %do;
33216     +    %let fvarnum = %sysfunc(VARNUM(&fdsid, NAME));
33217     +    %let fobs = %sysfunc(fetch(&fdsid));
33218     +    %do %while(&fobs=0);
33219     +       %let em_bin_freq = %sysfunc(getvarc(&fdsid, &fvarnum));
33220     +       %let fobs = %sysfunc(fetch(&fdsid));
33221     +    %end;
33222     +  %end;
33223     +  %if &fdsid >0 %then %let fdsid = %sysfunc(close(&fdsid));
33225     +  /* process all inputs */
33226     +  %if &num_intvars > 0 %then %do;
33228     +    /* Computing quantile binning of interval inputs */
33229     +    %let numbin = %eval(&NUMBINS - 1);
33230     +    %let optstr=;
33231     +    %do i=1 %to &numbin;
33232     +       %let optstr = &optstr %eval(&i*100/&&NUMBINS);
33233     +    %end;
33235     +    data tempInt / view = tempInt;
33236     +      set &input(keep= %intvars
33237     +      %if &em_bin_freq ne %then %do;
33238     +        &em_bin_freq
33239     +      %end;
33240     +      );
33241     +    run;
33243     +    proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=&optstr;
33244     +       var %intvars;
33245     +       %if &em_bin_freq ne %then %do;
33246     +          freq &em_bin_freq;
33247     +       %end;
33248     +    run;
33250     +    proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
33251     +    run;
33253     +    /* generate unique BIN_xxx names for all inputs processed */
33254     +    proc dmdb data=tempvars outtable=tempmapping nameserver;
33255     +     names NAME;
33256     +     prefix BIN_ ;
33257     +    run;
33259     +    proc sort data=tempmapping(keep=NAME bin); by NAME; run;
33260     +    proc sort data=work.pctdata; by _NAME_; run;
33261     +    %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
33262     +      proc sort data=&codemappings nodupkey out=tempcodemappings(keep= codeVar variable) ; by codeVar; run;
33263     +    %end;
33265     +    data tempbins;
33266     +      length display_var $32;
33267     +      merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar))
33268     +      %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
33269     +         tempcodemappings(rename=(codeVar=_name_ variable=display_var))
33270     +      %end;
33271     +      ;
33272     +      by _NAME_;
33273     +      if _a;
33274     +      if missing(display_var) then display_var = _NAME_;
33275     +    run;
33277     +    /* generate BINMAPPINGS dataset and binningCode file*/
33278     +    data _null_;
33279     +      FILE &binningCode;
33280     +      set tempbins end=eof;
33281     +      length string $200;
33282     +      by _NAME_;
33284     +      if _n_=1 then do;
33285     +        put "&EM_CODEBAR;";
33286     +        %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
33287     +        put "* &note;";
33288     +        put "&EM_CODEBAR;";
33290     +        call execute(" data &BINMAPPINGS; ");
33291     +        call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
33292     +      end;
33294     +      %do i=1 %to %eval(&numbins-1);
33295     +       %if &i eq 1 %then %do;
33296     +         %let colname = COL&i;
33297     +         %let binvalnum = 1;
33298     +         LB = .;
33299     +         UB = round(&colname, &precision);
33300     +         bin=&binvalnum;
33302     +         call execute("name='"||strip(_NAME_)||"'; ");
33303     +         call execute("bin_name='"||strip(binVar)||"'; ");
33304     +         call execute("bin='"||strip(bin)||"';");
33305     +         call execute("LB=.;");
33306     +         call execute("UB="||UB||";");
33307     +         call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
33308     +         call execute("output;");
33310     +         string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
33312     +         put string;
33313     +         string = "else do;";
33314     +         put string;
33316     +         string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
33317     +         put string;
33320     +       %end;
33321     +       %else %do;
33322     +         %let colname = COL&i;
33323     +         %let lbnum = %sysevalf(&i-1);
33324     +         %let lbcol = COL&lbnum;
33325     +         UB = round(&colname, &precision);
33326     +         LB = round(&lbcol, &precision);
33327     +         if UB ne LB then do;
33328     +           bin=bin+1;
33330     +           call execute("name='"||strip(_NAME_)||"'; ");
33331     +           call execute("bin_name='"||strip(binVar)||"'; ");
33332     +           call execute("bin='"||strip(bin)||"';");
33333     +           call execute("LB="||LB||";");
33334     +           call execute("UB="||UB||";");
33335     +           call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
33336     +           call execute("output;");
33338     +           string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
33339     +           put string;
33341     +         end;
33342     +       %end;
33343     +      %end;
33344     +      %let binvalnum = %sysevalf(&binvalnum + 1);
33345     +      bin=bin+1;
33346     +      LB = round(&colname, &precision);
33347     +      UB = .;
33349     +      call execute("name='"||strip(_NAME_)||"'; ");
33350     +      call execute("bin_name = '"||strip(binVar)||"'; ");
33351     +      call execute("bin='"||strip(bin)||"';");
33352     +      call execute("UB=.;");
33353     +      call execute("LB="||LB||";");
33354     +      call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
33355     +      call execute("output;");
33357     +      string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
33358     +      put string;
33359     +      string="end;";
33360     +      put string;
33362     +      if eof then do;
33363     +        call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
33364     +        call execute("  if LB=UB then delete;");
33365     +        call execute("run;");
33366     +      end;
33368     +    run;
33370     +    /* drop original inputs */
33371     +    %if &dropOriginal=Y %then %do;
33372     +      data _null_;
33373     +        set work.tempvars end=eof;
33374     +        FILE &binningCode MOD;
33375     +        length string $200;
33377     +        if _n_=1 then do;
33378     +          put "drop";
33379     +        end;
33380     +        string = " "||strip(name);
33381     +        put string;
33383     +        if eof then do;
33384     +          put ";";
33385     +        end;
33386     +      run;
33387     +    %end;
33389     +    proc datasets library=work nolist;
33390     +      delete pctdata tempmapping tempbins tempInt;
33391     +    run;
33392     +    quit;
33393     +  %end;
33395     +  proc datasets library=work nolist;
33396     +    delete tempvars;
33397     +  run;
33398     +  quit;
33400     +%mend em_apps_quantile_binning;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data work.vartable;
MPRINT(EM_QUANTILE_BINNING):   set work._intmid;
MPRINT(EM_QUANTILE_BINNING):   level = "INTERVAL";
MPRINT(EM_QUANTILE_BINNING):   role = "INPUT";
MPRINT(EM_QUANTILE_BINNING):   rename variable=name;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK._INTMID.
NOTE: The data set WORK.VARTABLE has 23 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Variable NAME is uninitialized.
NOTE: Variable BIN_NAME is uninitialized.
NOTE: Variable LB is uninitialized.
NOTE: Variable UB is uninitialized.
NOTE: Variable BIN is uninitialized.
NOTE: Variable EM_BIN_LABEL is uninitialized.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.VARTABLE.
      WHERE (ROLE='INPUT') and (LEVEL='INTERVAL');
NOTE: The data set WORK.TEMPVARS has 23 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file TEMPOPEN is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
33404     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
33405     +   filename macFile catalog 'work.emutil.macro.source';
33406     +   %let _METAOBS = 0;
33408     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
33409     +                   or (&metadata eq ) %then %do;
33410     +       %goto doend;
33411     +   %end;
33412     +   data _null_;
33413     +      length _STRING_ $80;
33414     +      retain _STRING_;
33415     +      set &metadata end=eof;
33416     +      file macFile;
33417     +      %if %nrbquote(&where) ne %then %do;
33418     +          %let whereClause = where (%nrbquote(&where));
33419     +          %unquote(&whereClause);
33420     +      %end;
33421     +      if _N_=1 then do;
33422     +         string = "%"!!"macro &name;";
33423     +         put string;
33424     +      end;
33425     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
33426     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
33427     +         if eof then do;
33428     +            put _STRING_;
33429     +            string = "%"!!"mend &name;";
33430     +            put string;
33431     +            %if (&nummacro ne ) %then %do;
33432     +                string = strip(put(_N_, best.));
33433     +                put "%" "global &nummacro;";
33434     +                put "%" "let &nummacro = " string ";";
33435     +                call symput('_METAOBS', string);
33436     +            %end;
33437     +         end;
33438     +      end;
33439     +      else do;
33440     +         put _STRING_;
33441     +         _string_ = TRIM(&key);
33442     +         if eof then do;
33443     +            put _STRING_;
33444     +            string = "%"!!"mend &name;";
33445     +            put string;
33446     +        end;
33447     +      end;
33448     +      if eof then do;
33449     +         string = strip(put(_N_, best.));
33450     +         call symput('_METAOBS', string);
33451     +         %if (&nummacro ne ) %then %do;
33452     +             put "%" "global &nummacro;";
33453     +             put "%" "let &nummacro = " string ";";
33454     +         %end;
33455     +      end;
33456     +   run;
33458     +   %doend:
33459     +   %if ^&_METAOBS %then %do;
33460     +       data _null_;
33461     +          file macFile;
33462     +          put "%" "macro &name;";
33463     +          put "%" "mend &name;";
33464     +          %if (&nummacro ne ) %then %do;
33465     +              put "%" "global &nummacro;";
33466     +              put "%" "let &nummacro = 0;";
33467     +          %end;
33468     +      run;
33469     +   %end;
33470     +   %inc macFile;
33471     +   filename macFile;
33472     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen;
NOTE: Fileref TEMPOPEN has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempvars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Donnerstag, 28. April 2016 15.47 Uhr,
      Last Modified=Donnerstag, 28. April 2016 15.47 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD115000_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 14.
      The maximum record length was 72.
NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
33473     +%macro intvars;
33474     +AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
33475     +MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
33476     +NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
33477     +NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
33478     +%mend intvars;
33479     +%global num_intvars;
33480     +%let num_intvars = 23 ;
33481     +%global num_intvars;
33482     +%let num_intvars = 23 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempInt / view = tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   set EMWS8.Part_TRAIN(keep
MPRINT(EM_APPS_QUANTILE_BINNING):  = AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome );
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: DATA STEP view saved on file WORK.TEMPINT.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=10 20 30 40 50 60 70 80 90;
MPRINT(EM_APPS_QUANTILE_BINNING):   var
MPRINT(INTVARS):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases 
NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: View WORK.TEMPINT.VIEW used (Total process time):
      real time           0.27 seconds
      cpu time            0.23 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.TEMPINT.
NOTE: The data set WORK.PCTDATA has 17 observations and 24 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.29 seconds
      cpu time            0.23 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 9 observations read from the data set WORK.PCTDATA.
      WHERE _type_=:'P';
NOTE: The data set WORK.PCTDATA has 23 observations and 11 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc dmdb data=tempvars outtable=tempmapping nameserver;
MPRINT(EM_APPS_QUANTILE_BINNING):   names NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   prefix BIN_ ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: The data set WORK.TEMPMAPPING has 23 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=tempmapping(keep=NAME bin);
MPRINT(EM_APPS_QUANTILE_BINNING):   by NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.PCTDATA.
NOTE: The data set WORK.PCTDATA has 23 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempbins;
MPRINT(EM_APPS_QUANTILE_BINNING):   length display_var $32;
MPRINT(EM_APPS_QUANTILE_BINNING):   merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar)) ;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _a;
MPRINT(EM_APPS_QUANTILE_BINNING):   if missing(display_var) then display_var = _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: There were 23 observations read from the data set WORK.PCTDATA.
NOTE: There were 23 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPBINS has 23 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X;
MPRINT(EM_APPS_QUANTILE_BINNING):   set tempbins end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "* Generating Bins for interval variables;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute(" data EMWS8.BINNING_BINMAPPINGS; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "else do;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL4, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL5, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL4, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL6, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL5, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL7, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL6, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL8, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL7, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL9, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL8, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL9, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name = '"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string="end;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if LB=UB then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("run;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      298:29    308:21    313:65    350:46    350:87    391:29    396:21    401:21    406:38    406:84    419:51    419:92    468:29    473:21    478:21    483:38    483:84    496:51    496:92    545:29    550:21    555:21    560:38    560:84    573:51
      573:92    622:29    627:21    632:21    637:38    637:84    650:51    650:92    699:29    704:21    709:21    714:38    714:84    727:51    727:92    776:29    781:21    786:21    791:38    791:84    804:51    804:92    853:29    858:21    863:21
      868:38    868:84    881:51    881:92    930:29    935:21    940:21    945:38    945:84    958:51    958:92    1002:29   1012:21   1017:66   1030:52   1030:93   
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=03. April 2016 17.12 Uhr

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= AcceptedCmpTotal < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 31;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age < 31';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 31;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 36;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='31 <= Age < 36';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 36;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 40;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='36 <= Age < 40';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 40;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 43;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='40 <= Age < 43';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 43;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='43 <= Age < 46';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 50;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='46 <= Age < 50';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 50;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 55;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='50 <= Age < 55';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 55;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='55 <= Age < 59';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 64;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='59 <= Age < 64';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 64;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age >= 64';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= Frq < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= Frq < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= Frq < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= Frq < 12';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 15;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='12 <= Frq < 15';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 15;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='15 <= Frq < 17';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 20;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='17 <= Frq < 20';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 20;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 23;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='20 <= Frq < 23';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 23;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq >= 23';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 23983;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income < 23983';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 23983;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 31322;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='23983 <= Income < 31322';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 31322;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 38157;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='31322 <= Income < 38157';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 38157;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 44900;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='38157 <= Income < 44900';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 44900;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='44900 <= Income < 52157';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 59111;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='52157 <= Income < 59111';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 59111;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 65808;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='59111 <= Income < 65808';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 65808;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72025;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='65808 <= Income < 72025';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72025;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 79470;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72025 <= Income < 79470';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 79470;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income >= 79470';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Kidhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 34;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt < 34';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 34;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='34 <= Mnt < 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 94;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='57 <= Mnt < 94';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 94;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 219;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='94 <= Mnt < 219';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 219;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='219 <= Mnt < 405.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 650;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='405.5 <= Mnt < 650';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 650;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 906;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='650 <= Mnt < 906';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 906;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1215;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='906 <= Mnt < 1215';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1215;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1526;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1215 <= Mnt < 1526';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1526;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt >= 1526';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= MntFishProducts < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= MntFishProducts < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= MntFishProducts < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7 <= MntFishProducts < 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 23;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='13 <= MntFishProducts < 23';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 23;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 37;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='23 <= MntFishProducts < 37';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 37;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 62;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='37 <= MntFishProducts < 62';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 62;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 116;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='62 <= MntFishProducts < 116';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 116;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts >= 116';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= MntFruits < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= MntFruits < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= MntFruits < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= MntFruits < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 16;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntFruits < 16';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 16;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='16 <= MntFruits < 27';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 44;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='27 <= MntFruits < 44';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 44;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='44 <= MntFruits < 84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits >= 84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= MntGoldProds < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7 <= MntGoldProds < 12';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='12 <= MntGoldProds < 17';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='17 <= MntGoldProds < 25';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 34;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='25 <= MntGoldProds < 34';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 34;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='34 <= MntGoldProds < 48';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 74;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='48 <= MntGoldProds < 74';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 74;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 116;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='74 <= MntGoldProds < 116';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 116;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds >= 116';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7 <= MntMeatProducts < 12';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 21;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='12 <= MntMeatProducts < 21';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 21;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='21 <= MntMeatProducts < 38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='38 <= MntMeatProducts < 72';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 116;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72 <= MntMeatProducts < 116';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 116;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 186;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='116 <= MntMeatProducts < 186';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 186;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 309;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='186 <= MntMeatProducts < 309';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 309;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 518;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='309 <= MntMeatProducts < 518';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 518;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts >= 518';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= MntSweetProducts < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= MntSweetProducts < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= MntSweetProducts < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= MntSweetProducts < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 16;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntSweetProducts < 16';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 16;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='16 <= MntSweetProducts < 27';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 27;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='27 <= MntSweetProducts < 46';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='46 <= MntSweetProducts < 84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts >= 84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 16;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= MntWines < 16';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 16;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 33;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='16 <= MntWines < 33';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 33;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='33 <= MntWines < 84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='84 <= MntWines < 183.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 298;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='183.5 <= MntWines < 298';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 298;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 429;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='298 <= MntWines < 429';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 429;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 602;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='429 <= MntWines < 602';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 602;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 836;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='602 <= MntWines < 836';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 836;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines >= 836';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 61;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer < 61';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 61;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 67;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='61 <= MonthsAsCustomer < 67';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 67;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='67 <= MonthsAsCustomer < 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 78;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='73 <= MonthsAsCustomer < 78';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 78;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='78 <= MonthsAsCustomer < 84';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 84;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 89;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='84 <= MonthsAsCustomer < 89';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 89;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 96;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='89 <= MonthsAsCustomer < 96';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 96;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 102;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='96 <= MonthsAsCustomer < 102';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 102;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 108;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='102 <= MonthsAsCustomer < 108';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 108;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer >= 108';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= NumCatalogPurchases < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= NumCatalogPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= NumCatalogPurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumCatalogPurchases < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases >= 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumDealsPurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases >= 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= NumDistPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumDistPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumDistPurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumDistPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumDistPurchases < 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='8 <= NumDistPurchases < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= NumDistPurchases < 11';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='11 <= NumDistPurchases < 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases >= 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumStorePurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= NumStorePurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumStorePurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumStorePurchases < 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='8 <= NumStorePurchases < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= NumStorePurchases < 11';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases >= 11';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= NumWebPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumWebPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumWebPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= NumWebPurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumWebPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumWebPurchases < 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases >= 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumWebVisitsMonth < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumWebVisitsMonth < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= NumWebVisitsMonth < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumWebVisitsMonth < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7 <= NumWebVisitsMonth < 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth >= 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6.88;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= RFMstat < 6.88';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6.88;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 18.67;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6.88 <= RFMstat < 18.67';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 18.67;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='18.67 <= RFMstat < 52.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='52.5 <= RFMstat < 128.09';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 234.14;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='128.09 <= RFMstat < 234.14';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 234.14;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 369.14;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='234.14 <= RFMstat < 369.14';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 369.14;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 571.29;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='369.14 <= RFMstat < 571.29';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 571.29;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1073.68;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='571.29 <= RFMstat < 1073.68';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1073.68;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat >= 1073.68';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7.83;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq < 7.83';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7.83;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7.83 <= RMntFrq < 11';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 11;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 15.83;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='11 <= RMntFrq < 15.83';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 15.83;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 23.77;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='15.83 <= RMntFrq < 23.77';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 23.77;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='23.77 <= RMntFrq < 30.4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 36.55;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='30.4 <= RMntFrq < 36.55';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 36.55;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 43.06;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='36.55 <= RMntFrq < 43.06';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 43.06;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 68.73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='43.06 <= RMntFrq < 68.73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 68.73;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 75.83;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='68.73 <= RMntFrq < 75.83';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 75.83;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq >= 75.83';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 19;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= Recency < 19';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 19;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 29;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='19 <= Recency < 29';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 29;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='29 <= Recency < 38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='5';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='38 <= Recency < 48';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='6';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 58;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='48 <= Recency < 58';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='7';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 58;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 68;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='58 <= Recency < 68';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='8';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 68;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 79;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='68 <= Recency < 79';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='9';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 79;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 90;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='79 <= Recency < 90';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='10';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 90;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency >= 90';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Teenhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   if NAME='' and BIN_NAME='' and BIN='' then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   if LB=UB then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
NOTE: 267 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 64.
NOTE: There were 23 observations read from the data set WORK.TEMPBINS.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      

NOTE: CALL EXECUTE generated line.
1         +  data EMWS8.BINNING_BINMAPPINGS;
2         +    length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):  32 LB UB EM_BIN_LABEL BIN200
3         + name='AcceptedCmpTotal';
4         + bin_name='BIN_AcceptedCmpTotal';
5         + bin='1';
6         + LB=.;
7         + UB=           0;
8         + EM_BIN_LABEL='AcceptedCmpTotal < 0';
9         + output;
10        + name='AcceptedCmpTotal';
11        + bin_name='BIN_AcceptedCmpTotal';
12        + bin='2';
13        + LB=           0;
14        + UB=           1;
15        + EM_BIN_LABEL='0 <= AcceptedCmpTotal < 1';
16        + output;
17        + name='AcceptedCmpTotal';
18        + bin_name = 'BIN_AcceptedCmpTotal';
19        + bin='3';
20        + UB=.;
21        + LB=           1;
22        + EM_BIN_LABEL='AcceptedCmpTotal >= 1';
23        + output;
24        + name='Age';
25        + bin_name='BIN_Age';
26        + bin='1';
27        + LB=.;
28        + UB=          31;
29        + EM_BIN_LABEL='Age < 31';
30        + output;
31        + name='Age';
32        + bin_name='BIN_Age';
33        + bin='2';
34        + LB=          31;
35        + UB=          36;
36        + EM_BIN_LABEL='31 <= Age < 36';
37        + output;
38        + name='Age';
39        + bin_name='BIN_Age';
40        + bin='3';
41        + LB=          36;
42        + UB=          40;
43        + EM_BIN_LABEL='36 <= Age < 40';
44        + output;
45        + name='Age';
46        + bin_name='BIN_Age';
47        + bin='4';
48        + LB=          40;
49        + UB=          43;
50        + EM_BIN_LABEL='40 <= Age < 43';
51        + output;
52        + name='Age';
53        + bin_name='BIN_Age';
54        + bin='5';
55        + LB=          43;
56        + UB=          46;
57        + EM_BIN_LABEL='43 <= Age < 46';
58        + output;
59        + name='Age';
60        + bin_name='BIN_Age';
61        + bin='6';
62        + LB=          46;
63        + UB=          50;
64        + EM_BIN_LABEL='46 <= Age < 50';
65        + output;
66        + name='Age';
67        + bin_name='BIN_Age';
68        + bin='7';
69        + LB=          50;
70        + UB=          55;
71        + EM_BIN_LABEL='50 <= Age < 55';
72        + output;
73        + name='Age';
74        + bin_name='BIN_Age';
75        + bin='8';
76        + LB=          55;
77        + UB=          59;
78        + EM_BIN_LABEL='55 <= Age < 59';
79        + output;
80        + name='Age';
81        + bin_name='BIN_Age';
82        + bin='9';
83        + LB=          59;
84        + UB=          64;
85        + EM_BIN_LABEL='59 <= Age < 64';
86        + output;
87        + name='Age';
88        + bin_name = 'BIN_Age';
89        + bin='10';
90        + UB=.;
91        + LB=          64;
92        + EM_BIN_LABEL='Age >= 64';
93        + output;
94        + name='Frq';
95        + bin_name='BIN_Frq';
96        + bin='1';
97        + LB=.;
98        + UB=           4;
99        + EM_BIN_LABEL='Frq < 4';
100       + output;
101       + name='Frq';
102       + bin_name='BIN_Frq';
103       + bin='2';
104       + LB=           4;
105       + UB=           5;
106       + EM_BIN_LABEL='4 <= Frq < 5';
107       + output;
108       + name='Frq';
109       + bin_name='BIN_Frq';
110       + bin='3';
111       + LB=           5;
112       + UB=           6;
113       + EM_BIN_LABEL='5 <= Frq < 6';
114       + output;
115       + name='Frq';
116       + bin_name='BIN_Frq';
117       + bin='4';
118       + LB=           6;
119       + UB=           9;
120       + EM_BIN_LABEL='6 <= Frq < 9';
121       + output;
122       + name='Frq';
123       + bin_name='BIN_Frq';
124       + bin='5';
125       + LB=           9;
126       + UB=          12;
127       + EM_BIN_LABEL='9 <= Frq < 12';
128       + output;
129       + name='Frq';
130       + bin_name='BIN_Frq';
131       + bin='6';
132       + LB=          12;
133       + UB=          15;
134       + EM_BIN_LABEL='12 <= Frq < 15';
135       + output;
136       + name='Frq';
137       + bin_name='BIN_Frq';
138       + bin='7';
139       + LB=          15;
140       + UB=          17;
141       + EM_BIN_LABEL='15 <= Frq < 17';
142       + output;
143       + name='Frq';
144       + bin_name='BIN_Frq';
145       + bin='8';
146       + LB=          17;
147       + UB=          20;
148       + EM_BIN_LABEL='17 <= Frq < 20';
149       + output;
150       + name='Frq';
151       + bin_name='BIN_Frq';
152       + bin='9';
153       + LB=          20;
154       + UB=          23;
155       + EM_BIN_LABEL='20 <= Frq < 23';
156       + output;
157       + name='Frq';
158       + bin_name = 'BIN_Frq';
159       + bin='10';
160       + UB=.;
161       + LB=          23;
162       + EM_BIN_LABEL='Frq >= 23';
163       + output;
164       + name='Income';
165       + bin_name='BIN_Income';
166       + bin='1';
167       + LB=.;
168       + UB=       23983;
169       + EM_BIN_LABEL='Income < 23983';
170       + output;
171       + name='Income';
172       + bin_name='BIN_Income';
173       + bin='2';
174       + LB=       23983;
175       + UB=       31322;
176       + EM_BIN_LABEL='23983 <= Income < 31322';
177       + output;
178       + name='Income';
179       + bin_name='BIN_Income';
180       + bin='3';
181       + LB=       31322;
182       + UB=       38157;
183       + EM_BIN_LABEL='31322 <= Income < 38157';
184       + output;
185       + name='Income';
186       + bin_name='BIN_Income';
187       + bin='4';
188       + LB=       38157;
189       + UB=       44900;
190       + EM_BIN_LABEL='38157 <= Income < 44900';
191       + output;
192       + name='Income';
193       + bin_name='BIN_Income';
194       + bin='5';
195       + LB=       44900;
196       + UB=       52157;
197       + EM_BIN_LABEL='44900 <= Income < 52157';
198       + output;
199       + name='Income';
200       + bin_name='BIN_Income';
201       + bin='6';
202       + LB=       52157;
203       + UB=       59111;
204       + EM_BIN_LABEL='52157 <= Income < 59111';
205       + output;
206       + name='Income';
207       + bin_name='BIN_Income';
208       + bin='7';
209       + LB=       59111;
210       + UB=       65808;
211       + EM_BIN_LABEL='59111 <= Income < 65808';
212       + output;
213       + name='Income';
214       + bin_name='BIN_Income';
215       + bin='8';
216       + LB=       65808;
217       + UB=       72025;
218       + EM_BIN_LABEL='65808 <= Income < 72025';
219       + output;
220       + name='Income';
221       + bin_name='BIN_Income';
222       + bin='9';
223       + LB=       72025;
224       + UB=       79470;
225       + EM_BIN_LABEL='72025 <= Income < 79470';
226       + output;
227       + name='Income';
228       + bin_name = 'BIN_Income';
229       + bin='10';
230       + UB=.;
231       + LB=       79470;
232       + EM_BIN_LABEL='Income >= 79470';
233       + output;
234       + name='Kidhome';
235       + bin_name='BIN_Kidhome';
236       + bin='1';
237       + LB=.;
238       + UB=           0;
239       + EM_BIN_LABEL='Kidhome < 0';
240       + output;
241       + name='Kidhome';
242       + bin_name='BIN_Kidhome';
243       + bin='2';
244       + LB=           0;
245       + UB=           1;
246       + EM_BIN_LABEL='0 <= Kidhome < 1';
247       + output;
248       + name='Kidhome';
249       + bin_name = 'BIN_Kidhome';
250       + bin='3';
251       + UB=.;
252       + LB=           1;
253       + EM_BIN_LABEL='Kidhome >= 1';
254       + output;
255       + name='Mnt';
256       + bin_name='BIN_Mnt';
257       + bin='1';
258       + LB=.;
259       + UB=          34;
260       + EM_BIN_LABEL='Mnt < 34';
261       + output;
262       + name='Mnt';
263       + bin_name='BIN_Mnt';
264       + bin='2';
265       + LB=          34;
266       + UB=          57;
267       + EM_BIN_LABEL='34 <= Mnt < 57';
268       + output;
269       + name='Mnt';
270       + bin_name='BIN_Mnt';
271       + bin='3';
272       + LB=          57;
273       + UB=          94;
274       + EM_BIN_LABEL='57 <= Mnt < 94';
275       + output;
276       + name='Mnt';
277       + bin_name='BIN_Mnt';
278       + bin='4';
279       + LB=          94;
280       + UB=         219;
281       + EM_BIN_LABEL='94 <= Mnt < 219';
282       + output;
283       + name='Mnt';
284       + bin_name='BIN_Mnt';
285       + bin='5';
286       + LB=         219;
287       + UB=       405.5;
288       + EM_BIN_LABEL='219 <= Mnt < 405.5';
289       + output;
290       + name='Mnt';
291       + bin_name='BIN_Mnt';
292       + bin='6';
293       + LB=       405.5;
294       + UB=         650;
295       + EM_BIN_LABEL='405.5 <= Mnt < 650';
296       + output;
297       + name='Mnt';
298       + bin_name='BIN_Mnt';
299       + bin='7';
300       + LB=         650;
301       + UB=         906;
302       + EM_BIN_LABEL='650 <= Mnt < 906';
303       + output;
304       + name='Mnt';
305       + bin_name='BIN_Mnt';
306       + bin='8';
307       + LB=         906;
308       + UB=        1215;
309       + EM_BIN_LABEL='906 <= Mnt < 1215';
310       + output;
311       + name='Mnt';
312       + bin_name='BIN_Mnt';
313       + bin='9';
314       + LB=        1215;
315       + UB=        1526;
316       + EM_BIN_LABEL='1215 <= Mnt < 1526';
317       + output;
318       + name='Mnt';
319       + bin_name = 'BIN_Mnt';
320       + bin='10';
321       + UB=.;
322       + LB=        1526;
323       + EM_BIN_LABEL='Mnt >= 1526';
324       + output;
325       + name='MntFishProducts';
326       + bin_name='BIN_MntFishProducts';
327       + bin='1';
328       + LB=.;
329       + UB=           0;
330       + EM_BIN_LABEL='MntFishProducts < 0';
331       + output;
332       + name='MntFishProducts';
333       + bin_name='BIN_MntFishProducts';
334       + bin='2';
335       + LB=           0;
336       + UB=           2;
337       + EM_BIN_LABEL='0 <= MntFishProducts < 2';
338       + output;
339       + name='MntFishProducts';
340       + bin_name='BIN_MntFishProducts';
341       + bin='3';
342       + LB=           2;
343       + UB=           4;
344       + EM_BIN_LABEL='2 <= MntFishProducts < 4';
345       + output;
346       + name='MntFishProducts';
347       + bin_name='BIN_MntFishProducts';
348       + bin='4';
349       + LB=           4;
350       + UB=           7;
351       + EM_BIN_LABEL='4 <= MntFishProducts < 7';
352       + output;
353       + name='MntFishProducts';
354       + bin_name='BIN_MntFishProducts';
355       + bin='5';
356       + LB=           7;
357       + UB=          13;
358       + EM_BIN_LABEL='7 <= MntFishProducts < 13';
359       + output;
360       + name='MntFishProducts';
361       + bin_name='BIN_MntFishProducts';
362       + bin='6';
363       + LB=          13;
364       + UB=          23;
365       + EM_BIN_LABEL='13 <= MntFishProducts < 23';
366       + output;
367       + name='MntFishProducts';
368       + bin_name='BIN_MntFishProducts';
369       + bin='7';
370       + LB=          23;
371       + UB=          37;
372       + EM_BIN_LABEL='23 <= MntFishProducts < 37';
373       + output;
374       + name='MntFishProducts';
375       + bin_name='BIN_MntFishProducts';
376       + bin='8';
377       + LB=          37;
378       + UB=          62;
379       + EM_BIN_LABEL='37 <= MntFishProducts < 62';
380       + output;
381       + name='MntFishProducts';
382       + bin_name='BIN_MntFishProducts';
383       + bin='9';
384       + LB=          62;
385       + UB=         116;
386       + EM_BIN_LABEL='62 <= MntFishProducts < 116';
387       + output;
388       + name='MntFishProducts';
389       + bin_name = 'BIN_MntFishProducts';
390       + bin='10';
391       + UB=.;
392       + LB=         116;
393       + EM_BIN_LABEL='MntFishProducts >= 116';
394       + output;
395       + name='MntFruits';
396       + bin_name='BIN_MntFruits';
397       + bin='1';
398       + LB=.;
399       + UB=           0;
400       + EM_BIN_LABEL='MntFruits < 0';
401       + output;
402       + name='MntFruits';
403       + bin_name='BIN_MntFruits';
404       + bin='2';
405       + LB=           0;
406       + UB=           1;
407       + EM_BIN_LABEL='0 <= MntFruits < 1';
408       + output;
409       + name='MntFruits';
410       + bin_name='BIN_MntFruits';
411       + bin='3';
412       + LB=           1;
413       + UB=           3;
414       + EM_BIN_LABEL='1 <= MntFruits < 3';
415       + output;
416       + name='MntFruits';
417       + bin_name='BIN_MntFruits';
418       + bin='4';
419       + LB=           3;
420       + UB=           5;
421       + EM_BIN_LABEL='3 <= MntFruits < 5';
422       + output;
423       + name='MntFruits';
424       + bin_name='BIN_MntFruits';
425       + bin='5';
426       + LB=           5;
427       + UB=           9;
428       + EM_BIN_LABEL='5 <= MntFruits < 9';
429       + output;
430       + name='MntFruits';
431       + bin_name='BIN_MntFruits';
432       + bin='6';
433       + LB=           9;
434       + UB=          16;
435       + EM_BIN_LABEL='9 <= MntFruits < 16';
436       + output;
437       + name='MntFruits';
438       + bin_name='BIN_MntFruits';
439       + bin='7';
440       + LB=          16;
441       + UB=          27;
442       + EM_BIN_LABEL='16 <= MntFruits < 27';
443       + output;
444       + name='MntFruits';
445       + bin_name='BIN_MntFruits';
446       + bin='8';
447       + LB=          27;
448       + UB=          44;
449       + EM_BIN_LABEL='27 <= MntFruits < 44';
450       + output;
451       + name='MntFruits';
452       + bin_name='BIN_MntFruits';
453       + bin='9';
454       + LB=          44;
455       + UB=          84;
456       + EM_BIN_LABEL='44 <= MntFruits < 84';
457       + output;
458       + name='MntFruits';
459       + bin_name = 'BIN_MntFruits';
460       + bin='10';
461       + UB=.;
462       + LB=          84;
463       + EM_BIN_LABEL='MntFruits >= 84';
464       + output;
465       + name='MntGoldProds';
466       + bin_name='BIN_MntGoldProds';
467       + bin='1';
468       + LB=.;
469       + UB=           3;
470       + EM_BIN_LABEL='MntGoldProds < 3';
471       + output;
472       + name='MntGoldProds';
473       + bin_name='BIN_MntGoldProds';
474       + bin='2';
475       + LB=           3;
476       + UB=           7;
477       + EM_BIN_LABEL='3 <= MntGoldProds < 7';
478       + output;
479       + name='MntGoldProds';
480       + bin_name='BIN_MntGoldProds';
481       + bin='3';
482       + LB=           7;
483       + UB=          12;
484       + EM_BIN_LABEL='7 <= MntGoldProds < 12';
485       + output;
486       + name='MntGoldProds';
487       + bin_name='BIN_MntGoldProds';
488       + bin='4';
489       + LB=          12;
490       + UB=          17;
491       + EM_BIN_LABEL='12 <= MntGoldProds < 17';
492       + output;
493       + name='MntGoldProds';
494       + bin_name='BIN_MntGoldProds';
495       + bin='5';
496       + LB=          17;
497       + UB=          25;
498       + EM_BIN_LABEL='17 <= MntGoldProds < 25';
499       + output;
500       + name='MntGoldProds';
501       + bin_name='BIN_MntGoldProds';
502       + bin='6';
503       + LB=          25;
504       + UB=          34;
505       + EM_BIN_LABEL='25 <= MntGoldProds < 34';
506       + output;
507       + name='MntGoldProds';
508       + bin_name='BIN_MntGoldProds';
509       + bin='7';
510       + LB=          34;
511       + UB=          48;
512       + EM_BIN_LABEL='34 <= MntGoldProds < 48';
513       + output;
514       + name='MntGoldProds';
515       + bin_name='BIN_MntGoldProds';
516       + bin='8';
517       + LB=          48;
518       + UB=          74;
519       + EM_BIN_LABEL='48 <= MntGoldProds < 74';
520       + output;
521       + name='MntGoldProds';
522       + bin_name='BIN_MntGoldProds';
523       + bin='9';
524       + LB=          74;
525       + UB=         116;
526       + EM_BIN_LABEL='74 <= MntGoldProds < 116';
527       + output;
528       + name='MntGoldProds';
529       + bin_name = 'BIN_MntGoldProds';
530       + bin='10';
531       + UB=.;
532       + LB=         116;
533       + EM_BIN_LABEL='MntGoldProds >= 116';
534       + output;
535       + name='MntMeatProducts';
536       + bin_name='BIN_MntMeatProducts';
537       + bin='1';
538       + LB=.;
539       + UB=           7;
540       + EM_BIN_LABEL='MntMeatProducts < 7';
541       + output;
542       + name='MntMeatProducts';
543       + bin_name='BIN_MntMeatProducts';
544       + bin='2';
545       + LB=           7;
546       + UB=          12;
547       + EM_BIN_LABEL='7 <= MntMeatProducts < 12';
548       + output;
549       + name='MntMeatProducts';
550       + bin_name='BIN_MntMeatProducts';
551       + bin='3';
552       + LB=          12;
553       + UB=          21;
554       + EM_BIN_LABEL='12 <= MntMeatProducts < 21';
555       + output;
556       + name='MntMeatProducts';
557       + bin_name='BIN_MntMeatProducts';
558       + bin='4';
559       + LB=          21;
560       + UB=          38;
561       + EM_BIN_LABEL='21 <= MntMeatProducts < 38';
562       + output;
563       + name='MntMeatProducts';
564       + bin_name='BIN_MntMeatProducts';
565       + bin='5';
566       + LB=          38;
567       + UB=          72;
568       + EM_BIN_LABEL='38 <= MntMeatProducts < 72';
569       + output;
570       + name='MntMeatProducts';
571       + bin_name='BIN_MntMeatProducts';
572       + bin='6';
573       + LB=          72;
574       + UB=         116;
575       + EM_BIN_LABEL='72 <= MntMeatProducts < 116';
576       + output;
577       + name='MntMeatProducts';
578       + bin_name='BIN_MntMeatProducts';
579       + bin='7';
580       + LB=         116;
581       + UB=         186;
582       + EM_BIN_LABEL='116 <= MntMeatProducts < 186';
583       + output;
584       + name='MntMeatProducts';
585       + bin_name='BIN_MntMeatProducts';
586       + bin='8';
587       + LB=         186;
588       + UB=         309;
589       + EM_BIN_LABEL='186 <= MntMeatProducts < 309';
590       + output;
591       + name='MntMeatProducts';
592       + bin_name='BIN_MntMeatProducts';
593       + bin='9';
594       + LB=         309;
595       + UB=         518;
596       + EM_BIN_LABEL='309 <= MntMeatProducts < 518';
597       + output;
598       + name='MntMeatProducts';
599       + bin_name = 'BIN_MntMeatProducts';
600       + bin='10';
601       + UB=.;
602       + LB=         518;
603       + EM_BIN_LABEL='MntMeatProducts >= 518';
604       + output;
605       + name='MntSweetProducts';
606       + bin_name='BIN_MntSweetProducts';
607       + bin='1';
608       + LB=.;
609       + UB=           0;
610       + EM_BIN_LABEL='MntSweetProducts < 0';
611       + output;
612       + name='MntSweetProducts';
613       + bin_name='BIN_MntSweetProducts';
614       + bin='2';
615       + LB=           0;
616       + UB=           1;
617       + EM_BIN_LABEL='0 <= MntSweetProducts < 1';
618       + output;
619       + name='MntSweetProducts';
620       + bin_name='BIN_MntSweetProducts';
621       + bin='3';
622       + LB=           1;
623       + UB=           3;
624       + EM_BIN_LABEL='1 <= MntSweetProducts < 3';
625       + output;
626       + name='MntSweetProducts';
627       + bin_name='BIN_MntSweetProducts';
628       + bin='4';
629       + LB=           3;
630       + UB=           5;
631       + EM_BIN_LABEL='3 <= MntSweetProducts < 5';
632       + output;
633       + name='MntSweetProducts';
634       + bin_name='BIN_MntSweetProducts';
635       + bin='5';
636       + LB=           5;
637       + UB=           9;
638       + EM_BIN_LABEL='5 <= MntSweetProducts < 9';
639       + output;
640       + name='MntSweetProducts';
641       + bin_name='BIN_MntSweetProducts';
642       + bin='6';
643       + LB=           9;
644       + UB=          16;
645       + EM_BIN_LABEL='9 <= MntSweetProducts < 16';
646       + output;
647       + name='MntSweetProducts';
648       + bin_name='BIN_MntSweetProducts';
649       + bin='7';
650       + LB=          16;
651       + UB=          27;
652       + EM_BIN_LABEL='16 <= MntSweetProducts < 27';
653       + output;
654       + name='MntSweetProducts';
655       + bin_name='BIN_MntSweetProducts';
656       + bin='8';
657       + LB=          27;
658       + UB=          46;
659       + EM_BIN_LABEL='27 <= MntSweetProducts < 46';
660       + output;
661       + name='MntSweetProducts';
662       + bin_name='BIN_MntSweetProducts';
663       + bin='9';
664       + LB=          46;
665       + UB=          84;
666       + EM_BIN_LABEL='46 <= MntSweetProducts < 84';
667       + output;
668       + name='MntSweetProducts';
669       + bin_name = 'BIN_MntSweetProducts';
670       + bin='10';
671       + UB=.;
672       + LB=          84;
673       + EM_BIN_LABEL='MntSweetProducts >= 84';
674       + output;
675       + name='MntWines';
676       + bin_name='BIN_MntWines';
677       + bin='1';
678       + LB=.;
679       + UB=           6;
680       + EM_BIN_LABEL='MntWines < 6';
681       + output;
682       + name='MntWines';
683       + bin_name='BIN_MntWines';
684       + bin='2';
685       + LB=           6;
686       + UB=          16;
687       + EM_BIN_LABEL='6 <= MntWines < 16';
688       + output;
689       + name='MntWines';
690       + bin_name='BIN_MntWines';
691       + bin='3';
692       + LB=          16;
693       + UB=          33;
694       + EM_BIN_LABEL='16 <= MntWines < 33';
695       + output;
696       + name='MntWines';
697       + bin_name='BIN_MntWines';
698       + bin='4';
699       + LB=          33;
700       + UB=          84;
701       + EM_BIN_LABEL='33 <= MntWines < 84';
702       + output;
703       + name='MntWines';
704       + bin_name='BIN_MntWines';
705       + bin='5';
706       + LB=          84;
707       + UB=       183.5;
708       + EM_BIN_LABEL='84 <= MntWines < 183.5';
709       + output;
710       + name='MntWines';
711       + bin_name='BIN_MntWines';
712       + bin='6';
713       + LB=       183.5;
714       + UB=         298;
715       + EM_BIN_LABEL='183.5 <= MntWines < 298';
716       + output;
717       + name='MntWines';
718       + bin_name='BIN_MntWines';
719       + bin='7';
720       + LB=         298;
721       + UB=         429;
722       + EM_BIN_LABEL='298 <= MntWines < 429';
723       + output;
724       + name='MntWines';
725       + bin_name='BIN_MntWines';
726       + bin='8';
727       + LB=         429;
728       + UB=         602;
729       + EM_BIN_LABEL='429 <= MntWines < 602';
730       + output;
731       + name='MntWines';
732       + bin_name='BIN_MntWines';
733       + bin='9';
734       + LB=         602;
735       + UB=         836;
736       + EM_BIN_LABEL='602 <= MntWines < 836';
737       + output;
738       + name='MntWines';
739       + bin_name = 'BIN_MntWines';
740       + bin='10';
741       + UB=.;
742       + LB=         836;
743       + EM_BIN_LABEL='MntWines >= 836';
744       + output;
745       + name='MonthsAsCustomer';
746       + bin_name='BIN_MonthsAsCustomer';
747       + bin='1';
748       + LB=.;
749       + UB=          61;
750       + EM_BIN_LABEL='MonthsAsCustomer < 61';
751       + output;
752       + name='MonthsAsCustomer';
753       + bin_name='BIN_MonthsAsCustomer';
754       + bin='2';
755       + LB=          61;
756       + UB=          67;
757       + EM_BIN_LABEL='61 <= MonthsAsCustomer < 67';
758       + output;
759       + name='MonthsAsCustomer';
760       + bin_name='BIN_MonthsAsCustomer';
761       + bin='3';
762       + LB=          67;
763       + UB=          73;
764       + EM_BIN_LABEL='67 <= MonthsAsCustomer < 73';
765       + output;
766       + name='MonthsAsCustomer';
767       + bin_name='BIN_MonthsAsCustomer';
768       + bin='4';
769       + LB=          73;
770       + UB=          78;
771       + EM_BIN_LABEL='73 <= MonthsAsCustomer < 78';
772       + output;
773       + name='MonthsAsCustomer';
774       + bin_name='BIN_MonthsAsCustomer';
775       + bin='5';
776       + LB=          78;
777       + UB=          84;
778       + EM_BIN_LABEL='78 <= MonthsAsCustomer < 84';
779       + output;
780       + name='MonthsAsCustomer';
781       + bin_name='BIN_MonthsAsCustomer';
782       + bin='6';
783       + LB=          84;
784       + UB=          89;
785       + EM_BIN_LABEL='84 <= MonthsAsCustomer < 89';
786       + output;
787       + name='MonthsAsCustomer';
788       + bin_name='BIN_MonthsAsCustomer';
789       + bin='7';
790       + LB=          89;
791       + UB=          96;
792       + EM_BIN_LABEL='89 <= MonthsAsCustomer < 96';
793       + output;
794       + name='MonthsAsCustomer';
795       + bin_name='BIN_MonthsAsCustomer';
796       + bin='8';
797       + LB=          96;
798       + UB=         102;
799       + EM_BIN_LABEL='96 <= MonthsAsCustomer < 102';
800       + output;
801       + name='MonthsAsCustomer';
802       + bin_name='BIN_MonthsAsCustomer';
803       + bin='9';
804       + LB=         102;
805       + UB=         108;
806       + EM_BIN_LABEL='102 <= MonthsAsCustomer < 108';
807       + output;
808       + name='MonthsAsCustomer';
809       + bin_name = 'BIN_MonthsAsCustomer';
810       + bin='10';
811       + UB=.;
812       + LB=         108;
813       + EM_BIN_LABEL='MonthsAsCustomer >= 108';
814       + output;
815       + name='NumCatalogPurchases';
816       + bin_name='BIN_NumCatalogPurchases';
817       + bin='1';
818       + LB=.;
819       + UB=           0;
820       + EM_BIN_LABEL='NumCatalogPurchases < 0';
821       + output;
822       + name='NumCatalogPurchases';
823       + bin_name='BIN_NumCatalogPurchases';
824       + bin='2';
825       + LB=           0;
826       + UB=           1;
827       + EM_BIN_LABEL='0 <= NumCatalogPurchases < 1';
828       + output;
829       + name='NumCatalogPurchases';
830       + bin_name='BIN_NumCatalogPurchases';
831       + bin='3';
832       + LB=           1;
833       + UB=           2;
834       + EM_BIN_LABEL='1 <= NumCatalogPurchases < 2';
835       + output;
836       + name='NumCatalogPurchases';
837       + bin_name='BIN_NumCatalogPurchases';
838       + bin='4';
839       + LB=           2;
840       + UB=           4;
841       + EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
842       + output;
843       + name='NumCatalogPurchases';
844       + bin_name='BIN_NumCatalogPurchases';
845       + bin='5';
846       + LB=           4;
847       + UB=           5;
848       + EM_BIN_LABEL='4 <= NumCatalogPurchases < 5';
849       + output;
850       + name='NumCatalogPurchases';
851       + bin_name='BIN_NumCatalogPurchases';
852       + bin='6';
853       + LB=           5;
854       + UB=           7;
855       + EM_BIN_LABEL='5 <= NumCatalogPurchases < 7';
856       + output;
857       + name='NumCatalogPurchases';
858       + bin_name = 'BIN_NumCatalogPurchases';
859       + bin='7';
860       + UB=.;
861       + LB=           7;
862       + EM_BIN_LABEL='NumCatalogPurchases >= 7';
863       + output;
864       + name='NumDealsPurchases';
865       + bin_name='BIN_NumDealsPurchases';
866       + bin='1';
867       + LB=.;
868       + UB=           1;
869       + EM_BIN_LABEL='NumDealsPurchases < 1';
870       + output;
871       + name='NumDealsPurchases';
872       + bin_name='BIN_NumDealsPurchases';
873       + bin='2';
874       + LB=           1;
875       + UB=           2;
876       + EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
877       + output;
878       + name='NumDealsPurchases';
879       + bin_name='BIN_NumDealsPurchases';
880       + bin='3';
881       + LB=           2;
882       + UB=           3;
883       + EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
884       + output;
885       + name='NumDealsPurchases';
886       + bin_name='BIN_NumDealsPurchases';
887       + bin='4';
888       + LB=           3;
889       + UB=           5;
890       + EM_BIN_LABEL='3 <= NumDealsPurchases < 5';
891       + output;
892       + name='NumDealsPurchases';
893       + bin_name = 'BIN_NumDealsPurchases';
894       + bin='5';
895       + UB=.;
896       + LB=           5;
897       + EM_BIN_LABEL='NumDealsPurchases >= 5';
898       + output;
899       + name='NumDistPurchases';
900       + bin_name='BIN_NumDistPurchases';
901       + bin='1';
902       + LB=.;
903       + UB=           1;
904       + EM_BIN_LABEL='NumDistPurchases < 1';
905       + output;
906       + name='NumDistPurchases';
907       + bin_name='BIN_NumDistPurchases';
908       + bin='2';
909       + LB=           1;
910       + UB=           2;
911       + EM_BIN_LABEL='1 <= NumDistPurchases < 2';
912       + output;
913       + name='NumDistPurchases';
914       + bin_name='BIN_NumDistPurchases';
915       + bin='3';
916       + LB=           2;
917       + UB=           3;
918       + EM_BIN_LABEL='2 <= NumDistPurchases < 3';
919       + output;
920       + name='NumDistPurchases';
921       + bin_name='BIN_NumDistPurchases';
922       + bin='4';
923       + LB=           3;
924       + UB=           5;
925       + EM_BIN_LABEL='3 <= NumDistPurchases < 5';
926       + output;
927       + name='NumDistPurchases';
928       + bin_name='BIN_NumDistPurchases';
929       + bin='5';
930       + LB=           5;
931       + UB=           6;
932       + EM_BIN_LABEL='5 <= NumDistPurchases < 6';
933       + output;
934       + name='NumDistPurchases';
935       + bin_name='BIN_NumDistPurchases';
936       + bin='6';
937       + LB=           6;
938       + UB=           8;
939       + EM_BIN_LABEL='6 <= NumDistPurchases < 8';
940       + output;
941       + name='NumDistPurchases';
942       + bin_name='BIN_NumDistPurchases';
943       + bin='7';
944       + LB=           8;
945       + UB=           9;
946       + EM_BIN_LABEL='8 <= NumDistPurchases < 9';
947       + output;
948       + name='NumDistPurchases';
949       + bin_name='BIN_NumDistPurchases';
950       + bin='8';
951       + LB=           9;
952       + UB=          11;
953       + EM_BIN_LABEL='9 <= NumDistPurchases < 11';
954       + output;
955       + name='NumDistPurchases';
956       + bin_name='BIN_NumDistPurchases';
957       + bin='9';
958       + LB=          11;
959       + UB=          13;
960       + EM_BIN_LABEL='11 <= NumDistPurchases < 13';
961       + output;
962       + name='NumDistPurchases';
963       + bin_name = 'BIN_NumDistPurchases';
964       + bin='10';
965       + UB=.;
966       + LB=          13;
967       + EM_BIN_LABEL='NumDistPurchases >= 13';
968       + output;
969       + name='NumStorePurchases';
970       + bin_name='BIN_NumStorePurchases';
971       + bin='1';
972       + LB=.;
973       + UB=           3;
974       + EM_BIN_LABEL='NumStorePurchases < 3';
975       + output;
976       + name='NumStorePurchases';
977       + bin_name='BIN_NumStorePurchases';
978       + bin='2';
979       + LB=           3;
980       + UB=           4;
981       + EM_BIN_LABEL='3 <= NumStorePurchases < 4';
982       + output;
983       + name='NumStorePurchases';
984       + bin_name='BIN_NumStorePurchases';
985       + bin='3';
986       + LB=           4;
987       + UB=           5;
988       + EM_BIN_LABEL='4 <= NumStorePurchases < 5';
989       + output;
990       + name='NumStorePurchases';
991       + bin_name='BIN_NumStorePurchases';
992       + bin='4';
993       + LB=           5;
994       + UB=           6;
995       + EM_BIN_LABEL='5 <= NumStorePurchases < 6';
996       + output;
997       + name='NumStorePurchases';
998       + bin_name='BIN_NumStorePurchases';
999       + bin='5';
1000      + LB=           6;
1001      + UB=           8;
1002      + EM_BIN_LABEL='6 <= NumStorePurchases < 8';
1003      + output;
1004      + name='NumStorePurchases';
1005      + bin_name='BIN_NumStorePurchases';
1006      + bin='6';
1007      + LB=           8;
1008      + UB=           9;
1009      + EM_BIN_LABEL='8 <= NumStorePurchases < 9';
1010      + output;
1011      + name='NumStorePurchases';
1012      + bin_name='BIN_NumStorePurchases';
1013      + bin='7';
1014      + LB=           9;
1015      + UB=          11;
1016      + EM_BIN_LABEL='9 <= NumStorePurchases < 11';
1017      + output;
1018      + name='NumStorePurchases';
1019      + bin_name = 'BIN_NumStorePurchases';
1020      + bin='8';
1021      + UB=.;
1022      + LB=          11;
1023      + EM_BIN_LABEL='NumStorePurchases >= 11';
1024      + output;
1025      + name='NumWebPurchases';
1026      + bin_name='BIN_NumWebPurchases';
1027      + bin='1';
1028      + LB=.;
1029      + UB=           1;
1030      + EM_BIN_LABEL='NumWebPurchases < 1';
1031      + output;
1032      + name='NumWebPurchases';
1033      + bin_name='BIN_NumWebPurchases';
1034      + bin='2';
1035      + LB=           1;
1036      + UB=           2;
1037      + EM_BIN_LABEL='1 <= NumWebPurchases < 2';
1038      + output;
1039      + name='NumWebPurchases';
1040      + bin_name='BIN_NumWebPurchases';
1041      + bin='3';
1042      + LB=           2;
1043      + UB=           3;
1044      + EM_BIN_LABEL='2 <= NumWebPurchases < 3';
1045      + output;
1046      + name='NumWebPurchases';
1047      + bin_name='BIN_NumWebPurchases';
1048      + bin='4';
1049      + LB=           3;
1050      + UB=           4;
1051      + EM_BIN_LABEL='3 <= NumWebPurchases < 4';
1052      + output;
1053      + name='NumWebPurchases';
1054      + bin_name='BIN_NumWebPurchases';
1055      + bin='5';
1056      + LB=           4;
1057      + UB=           5;
1058      + EM_BIN_LABEL='4 <= NumWebPurchases < 5';
1059      + output;
1060      + name='NumWebPurchases';
1061      + bin_name='BIN_NumWebPurchases';
1062      + bin='6';
1063      + LB=           5;
1064      + UB=           6;
1065      + EM_BIN_LABEL='5 <= NumWebPurchases < 6';
1066      + output;
1067      + name='NumWebPurchases';
1068      + bin_name='BIN_NumWebPurchases';
1069      + bin='7';
1070      + LB=           6;
1071      + UB=           8;
1072      + EM_BIN_LABEL='6 <= NumWebPurchases < 8';
1073      + output;
1074      + name='NumWebPurchases';
1075      + bin_name = 'BIN_NumWebPurchases';
1076      + bin='8';
1077      + UB=.;
1078      + LB=           8;
1079      + EM_BIN_LABEL='NumWebPurchases >= 8';
1080      + output;
1081      + name='NumWebVisitsMonth';
1082      + bin_name='BIN_NumWebVisitsMonth';
1083      + bin='1';
1084      + LB=.;
1085      + UB=           2;
1086      + EM_BIN_LABEL='NumWebVisitsMonth < 2';
1087      + output;
1088      + name='NumWebVisitsMonth';
1089      + bin_name='BIN_NumWebVisitsMonth';
1090      + bin='2';
1091      + LB=           2;
1092      + UB=           3;
1093      + EM_BIN_LABEL='2 <= NumWebVisitsMonth < 3';
1094      + output;
1095      + name='NumWebVisitsMonth';
1096      + bin_name='BIN_NumWebVisitsMonth';
1097      + bin='3';
1098      + LB=           3;
1099      + UB=           4;
1100      + EM_BIN_LABEL='3 <= NumWebVisitsMonth < 4';
1101      + output;
1102      + name='NumWebVisitsMonth';
1103      + bin_name='BIN_NumWebVisitsMonth';
1104      + bin='4';
1105      + LB=           4;
1106      + UB=           5;
1107      + EM_BIN_LABEL='4 <= NumWebVisitsMonth < 5';
1108      + output;
1109      + name='NumWebVisitsMonth';
1110      + bin_name='BIN_NumWebVisitsMonth';
1111      + bin='5';
1112      + LB=           5;
1113      + UB=           6;
1114      + EM_BIN_LABEL='5 <= NumWebVisitsMonth < 6';
1115      + output;
1116      + name='NumWebVisitsMonth';
1117      + bin_name='BIN_NumWebVisitsMonth';
1118      + bin='6';
1119      + LB=           6;
1120      + UB=           7;
1121      + EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
1122      + output;
1123      + name='NumWebVisitsMonth';
1124      + bin_name='BIN_NumWebVisitsMonth';
1125      + bin='7';
1126      + LB=           7;
1127      + UB=           8;
1128      + EM_BIN_LABEL='7 <= NumWebVisitsMonth < 8';
1129      + output;
1130      + name='NumWebVisitsMonth';
1131      + bin_name = 'BIN_NumWebVisitsMonth';
1132      + bin='8';
1133      + UB=.;
1134      + LB=           8;
1135      + EM_BIN_LABEL='NumWebVisitsMonth >= 8';
1136      + output;
1137      + name='RFMstat';
1138      + bin_name='BIN_RFMstat';
1139      + bin='1';
1140      + LB=.;
1141      + UB=           3;
1142      + EM_BIN_LABEL='RFMstat < 3';
1143      + output;
1144      + name='RFMstat';
1145      + bin_name='BIN_RFMstat';
1146      + bin='2';
1147      + LB=           3;
1148      + UB=        6.88;
1149      + EM_BIN_LABEL='3 <= RFMstat < 6.88';
1150      + output;
1151      + name='RFMstat';
1152      + bin_name='BIN_RFMstat';
1153      + bin='3';
1154      + LB=        6.88;
1155      + UB=       18.67;
1156      + EM_BIN_LABEL='6.88 <= RFMstat < 18.67';
1157      + output;
1158      + name='RFMstat';
1159      + bin_name='BIN_RFMstat';
1160      + bin='4';
1161      + LB=       18.67;
1162      + UB=        52.5;
1163      + EM_BIN_LABEL='18.67 <= RFMstat < 52.5';
1164      + output;
1165      + name='RFMstat';
1166      + bin_name='BIN_RFMstat';
1167      + bin='5';
1168      + LB=        52.5;
1169      + UB=      128.09;
1170      + EM_BIN_LABEL='52.5 <= RFMstat < 128.09';
1171      + output;
1172      + name='RFMstat';
1173      + bin_name='BIN_RFMstat';
1174      + bin='6';
1175      + LB=      128.09;
1176      + UB=      234.14;
1177      + EM_BIN_LABEL='128.09 <= RFMstat < 234.14';
1178      + output;
1179      + name='RFMstat';
1180      + bin_name='BIN_RFMstat';
1181      + bin='7';
1182      + LB=      234.14;
1183      + UB=      369.14;
1184      + EM_BIN_LABEL='234.14 <= RFMstat < 369.14';
1185      + output;
1186      + name='RFMstat';
1187      + bin_name='BIN_RFMstat';
1188      + bin='8';
1189      + LB=      369.14;
1190      + UB=      571.29;
1191      + EM_BIN_LABEL='369.14 <= RFMstat < 571.29';
1192      + output;
1193      + name='RFMstat';
1194      + bin_name='BIN_RFMstat';
1195      + bin='9';
1196      + LB=      571.29;
1197      + UB=     1073.68;
1198      + EM_BIN_LABEL='571.29 <= RFMstat < 1073.68';
1199      + output;
1200      + name='RFMstat';
1201      + bin_name = 'BIN_RFMstat';
1202      + bin='10';
1203      + UB=.;
1204      + LB=     1073.68;
1205      + EM_BIN_LABEL='RFMstat >= 1073.68';
1206      + output;
1207      + name='RMntFrq';
1208      + bin_name='BIN_RMntFrq';
1209      + bin='1';
1210      + LB=.;
1211      + UB=        7.83;
1212      + EM_BIN_LABEL='RMntFrq < 7.83';
1213      + output;
1214      + name='RMntFrq';
1215      + bin_name='BIN_RMntFrq';
1216      + bin='2';
1217      + LB=        7.83;
1218      + UB=          11;
1219      + EM_BIN_LABEL='7.83 <= RMntFrq < 11';
1220      + output;
1221      + name='RMntFrq';
1222      + bin_name='BIN_RMntFrq';
1223      + bin='3';
1224      + LB=          11;
1225      + UB=       15.83;
1226      + EM_BIN_LABEL='11 <= RMntFrq < 15.83';
1227      + output;
1228      + name='RMntFrq';
1229      + bin_name='BIN_RMntFrq';
1230      + bin='4';
1231      + LB=       15.83;
1232      + UB=       23.77;
1233      + EM_BIN_LABEL='15.83 <= RMntFrq < 23.77';
1234      + output;
1235      + name='RMntFrq';
1236      + bin_name='BIN_RMntFrq';
1237      + bin='5';
1238      + LB=       23.77;
1239      + UB=        30.4;
1240      + EM_BIN_LABEL='23.77 <= RMntFrq < 30.4';
1241      + output;
1242      + name='RMntFrq';
1243      + bin_name='BIN_RMntFrq';
1244      + bin='6';
1245      + LB=        30.4;
1246      + UB=       36.55;
1247      + EM_BIN_LABEL='30.4 <= RMntFrq < 36.55';
1248      + output;
1249      + name='RMntFrq';
1250      + bin_name='BIN_RMntFrq';
1251      + bin='7';
1252      + LB=       36.55;
1253      + UB=       43.06;
1254      + EM_BIN_LABEL='36.55 <= RMntFrq < 43.06';
1255      + output;
1256      + name='RMntFrq';
1257      + bin_name='BIN_RMntFrq';
1258      + bin='8';
1259      + LB=       43.06;
1260      + UB=       68.73;
1261      + EM_BIN_LABEL='43.06 <= RMntFrq < 68.73';
1262      + output;
1263      + name='RMntFrq';
1264      + bin_name='BIN_RMntFrq';
1265      + bin='9';
1266      + LB=       68.73;
1267      + UB=       75.83;
1268      + EM_BIN_LABEL='68.73 <= RMntFrq < 75.83';
1269      + output;
1270      + name='RMntFrq';
1271      + bin_name = 'BIN_RMntFrq';
1272      + bin='10';
1273      + UB=.;
1274      + LB=       75.83;
1275      + EM_BIN_LABEL='RMntFrq >= 75.83';
1276      + output;
1277      + name='Recency';
1278      + bin_name='BIN_Recency';
1279      + bin='1';
1280      + LB=.;
1281      + UB=           9;
1282      + EM_BIN_LABEL='Recency < 9';
1283      + output;
1284      + name='Recency';
1285      + bin_name='BIN_Recency';
1286      + bin='2';
1287      + LB=           9;
1288      + UB=          19;
1289      + EM_BIN_LABEL='9 <= Recency < 19';
1290      + output;
1291      + name='Recency';
1292      + bin_name='BIN_Recency';
1293      + bin='3';
1294      + LB=          19;
1295      + UB=          29;
1296      + EM_BIN_LABEL='19 <= Recency < 29';
1297      + output;
1298      + name='Recency';
1299      + bin_name='BIN_Recency';
1300      + bin='4';
1301      + LB=          29;
1302      + UB=          38;
1303      + EM_BIN_LABEL='29 <= Recency < 38';
1304      + output;
1305      + name='Recency';
1306      + bin_name='BIN_Recency';
1307      + bin='5';
1308      + LB=          38;
1309      + UB=          48;
1310      + EM_BIN_LABEL='38 <= Recency < 48';
1311      + output;
1312      + name='Recency';
1313      + bin_name='BIN_Recency';
1314      + bin='6';
1315      + LB=          48;
1316      + UB=          58;
1317      + EM_BIN_LABEL='48 <= Recency < 58';
1318      + output;
1319      + name='Recency';
1320      + bin_name='BIN_Recency';
1321      + bin='7';
1322      + LB=          58;
1323      + UB=          68;
1324      + EM_BIN_LABEL='58 <= Recency < 68';
1325      + output;
1326      + name='Recency';
1327      + bin_name='BIN_Recency';
1328      + bin='8';
1329      + LB=          68;
1330      + UB=          79;
1331      + EM_BIN_LABEL='68 <= Recency < 79';
1332      + output;
1333      + name='Recency';
1334      + bin_name='BIN_Recency';
1335      + bin='9';
1336      + LB=          79;
1337      + UB=          90;
1338      + EM_BIN_LABEL='79 <= Recency < 90';
1339      + output;
1340      + name='Recency';
1341      + bin_name = 'BIN_Recency';
1342      + bin='10';
1343      + UB=.;
1344      + LB=          90;
1345      + EM_BIN_LABEL='Recency >= 90';
1346      + output;
1347      + name='Teenhome';
1348      + bin_name='BIN_Teenhome';
1349      + bin='1';
1350      + LB=.;
1351      + UB=           0;
1352      + EM_BIN_LABEL='Teenhome < 0';
1353      + output;
1354      + name='Teenhome';
1355      + bin_name='BIN_Teenhome';
1356      + bin='2';
1357      + LB=           0;
1358      + UB=           1;
1359      + EM_BIN_LABEL='0 <= Teenhome < 1';
1360      + output;
1361      + name='Teenhome';
1362      + bin_name = 'BIN_Teenhome';
1363      + bin='3';
1364      + UB=.;
1365      + LB=           1;
1366      + EM_BIN_LABEL='Teenhome >= 1';
1367      + output;
1368      +   if NAME='' and BIN_NAME='' and BIN='' then delete;
1369      +   if LB=UB then delete;
1370      + run;

NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 195 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.tempvars end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X MOD;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "drop";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = " "||strip(name);
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put ";";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=11306,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 25 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 19.
NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete pctdata tempmapping tempbins tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file WORK.TEMPINT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PCTDATA (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPBINS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.TEMPVARS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   by name lb;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 195 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   length display_var $32 grp $8;
MPRINT(EM_QUANTILE_BINNING):   display_var = name;
MPRINT(EM_QUANTILE_BINNING):   GRP = BIN + 1;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      102:7   
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      102:11   
NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 195 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedmapping nodupkey;
MPRINT(EM_QUANTILE_BINNING):   by NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: 172 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDMAPPING has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 1 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   set sortedmapping;
MPRINT(EM_QUANTILE_BINNING):   GRP="1";
MPRINT(EM_QUANTILE_BINNING):   bin="Missing";
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = "Missing";
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.SORTEDMAPPING.
NOTE: The data set WORK.TEMPMISSVALUES has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINDATA;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.Part_TRAIN;
NOTE: %INCLUDE (level 1) file X is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas.
33483     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
33484     +* Generating Bins for interval variables;
MPRINT(EM_QUANTILE_BINNING):   * Generating Bins for interval variables;
33485     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
33486     +if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
33487     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33488     +if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
33489     +else if AcceptedCmpTotal < 1 then BIN_AcceptedCmpTotal=2;
MPRINT(EM_QUANTILE_BINNING):   else if AcceptedCmpTotal < 1 then BIN_AcceptedCmpTotal=2;
33490     +else if AcceptedCmpTotal >= 1 then BIN_AcceptedCmpTotal=3;
MPRINT(EM_QUANTILE_BINNING):   else if AcceptedCmpTotal >= 1 then BIN_AcceptedCmpTotal=3;
33491     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33492     +if Age eq . then BIN_Age= .;
MPRINT(EM_QUANTILE_BINNING):   if Age eq . then BIN_Age= .;
33493     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33494     +if Age < 31 then BIN_Age=1;
MPRINT(EM_QUANTILE_BINNING):   if Age < 31 then BIN_Age=1;
33495     +else if Age < 36 then BIN_Age=2;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 36 then BIN_Age=2;
33496     +else if Age < 40 then BIN_Age=3;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 40 then BIN_Age=3;
33497     +else if Age < 43 then BIN_Age=4;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 43 then BIN_Age=4;
33498     +else if Age < 46 then BIN_Age=5;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 46 then BIN_Age=5;
33499     +else if Age < 50 then BIN_Age=6;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 50 then BIN_Age=6;
33500     +else if Age < 55 then BIN_Age=7;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 55 then BIN_Age=7;
33501     +else if Age < 59 then BIN_Age=8;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 59 then BIN_Age=8;
33502     +else if Age < 64 then BIN_Age=9;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 64 then BIN_Age=9;
33503     +else if Age >= 64 then BIN_Age=10;
MPRINT(EM_QUANTILE_BINNING):   else if Age >= 64 then BIN_Age=10;
33504     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33505     +if Frq eq . then BIN_Frq= .;
MPRINT(EM_QUANTILE_BINNING):   if Frq eq . then BIN_Frq= .;
33506     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33507     +if Frq < 4 then BIN_Frq=1;
MPRINT(EM_QUANTILE_BINNING):   if Frq < 4 then BIN_Frq=1;
33508     +else if Frq < 5 then BIN_Frq=2;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 5 then BIN_Frq=2;
33509     +else if Frq < 6 then BIN_Frq=3;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 6 then BIN_Frq=3;
33510     +else if Frq < 9 then BIN_Frq=4;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 9 then BIN_Frq=4;
33511     +else if Frq < 12 then BIN_Frq=5;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 12 then BIN_Frq=5;
33512     +else if Frq < 15 then BIN_Frq=6;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 15 then BIN_Frq=6;
33513     +else if Frq < 17 then BIN_Frq=7;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 17 then BIN_Frq=7;
33514     +else if Frq < 20 then BIN_Frq=8;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 20 then BIN_Frq=8;
33515     +else if Frq < 23 then BIN_Frq=9;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 23 then BIN_Frq=9;
33516     +else if Frq >= 23 then BIN_Frq=10;
MPRINT(EM_QUANTILE_BINNING):   else if Frq >= 23 then BIN_Frq=10;
33517     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33518     +if Income eq . then BIN_Income= .;
MPRINT(EM_QUANTILE_BINNING):   if Income eq . then BIN_Income= .;
33519     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33520     +if Income < 23983 then BIN_Income=1;
MPRINT(EM_QUANTILE_BINNING):   if Income < 23983 then BIN_Income=1;
33521     +else if Income < 31322 then BIN_Income=2;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 31322 then BIN_Income=2;
33522     +else if Income < 38157 then BIN_Income=3;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 38157 then BIN_Income=3;
33523     +else if Income < 44900 then BIN_Income=4;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 44900 then BIN_Income=4;
33524     +else if Income < 52157 then BIN_Income=5;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 52157 then BIN_Income=5;
33525     +else if Income < 59111 then BIN_Income=6;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 59111 then BIN_Income=6;
33526     +else if Income < 65808 then BIN_Income=7;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 65808 then BIN_Income=7;
33527     +else if Income < 72025 then BIN_Income=8;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 72025 then BIN_Income=8;
33528     +else if Income < 79470 then BIN_Income=9;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 79470 then BIN_Income=9;
33529     +else if Income >= 79470 then BIN_Income=10;
MPRINT(EM_QUANTILE_BINNING):   else if Income >= 79470 then BIN_Income=10;
33530     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33531     +if Kidhome eq . then BIN_Kidhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome eq . then BIN_Kidhome= .;
33532     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33533     +if Kidhome < 0 then BIN_Kidhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome < 0 then BIN_Kidhome=1;
33534     +else if Kidhome < 1 then BIN_Kidhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome < 1 then BIN_Kidhome=2;
33535     +else if Kidhome >= 1 then BIN_Kidhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome >= 1 then BIN_Kidhome=3;
33536     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33537     +if Mnt eq . then BIN_Mnt= .;
MPRINT(EM_QUANTILE_BINNING):   if Mnt eq . then BIN_Mnt= .;
33538     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33539     +if Mnt < 34 then BIN_Mnt=1;
MPRINT(EM_QUANTILE_BINNING):   if Mnt < 34 then BIN_Mnt=1;
33540     +else if Mnt < 57 then BIN_Mnt=2;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 57 then BIN_Mnt=2;
33541     +else if Mnt < 94 then BIN_Mnt=3;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 94 then BIN_Mnt=3;
33542     +else if Mnt < 219 then BIN_Mnt=4;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 219 then BIN_Mnt=4;
33543     +else if Mnt < 405.5 then BIN_Mnt=5;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 405.5 then BIN_Mnt=5;
33544     +else if Mnt < 650 then BIN_Mnt=6;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 650 then BIN_Mnt=6;
33545     +else if Mnt < 906 then BIN_Mnt=7;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 906 then BIN_Mnt=7;
33546     +else if Mnt < 1215 then BIN_Mnt=8;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 1215 then BIN_Mnt=8;
33547     +else if Mnt < 1526 then BIN_Mnt=9;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 1526 then BIN_Mnt=9;
33548     +else if Mnt >= 1526 then BIN_Mnt=10;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt >= 1526 then BIN_Mnt=10;
33549     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33550     +if MntFishProducts eq . then BIN_MntFishProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts eq . then BIN_MntFishProducts= .;
33551     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33552     +if MntFishProducts < 0 then BIN_MntFishProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts < 0 then BIN_MntFishProducts=1;
33553     +else if MntFishProducts < 2 then BIN_MntFishProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 2 then BIN_MntFishProducts=2;
33554     +else if MntFishProducts < 4 then BIN_MntFishProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 4 then BIN_MntFishProducts=3;
33555     +else if MntFishProducts < 7 then BIN_MntFishProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 7 then BIN_MntFishProducts=4;
33556     +else if MntFishProducts < 13 then BIN_MntFishProducts=5;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 13 then BIN_MntFishProducts=5;
33557     +else if MntFishProducts < 23 then BIN_MntFishProducts=6;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 23 then BIN_MntFishProducts=6;
33558     +else if MntFishProducts < 37 then BIN_MntFishProducts=7;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 37 then BIN_MntFishProducts=7;
33559     +else if MntFishProducts < 62 then BIN_MntFishProducts=8;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 62 then BIN_MntFishProducts=8;
33560     +else if MntFishProducts < 116 then BIN_MntFishProducts=9;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 116 then BIN_MntFishProducts=9;
33561     +else if MntFishProducts >= 116 then BIN_MntFishProducts=10;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts >= 116 then BIN_MntFishProducts=10;
33562     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33563     +if MntFruits eq . then BIN_MntFruits= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits eq . then BIN_MntFruits= .;
33564     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33565     +if MntFruits < 0 then BIN_MntFruits=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits < 0 then BIN_MntFruits=1;
33566     +else if MntFruits < 1 then BIN_MntFruits=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 1 then BIN_MntFruits=2;
33567     +else if MntFruits < 3 then BIN_MntFruits=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 3 then BIN_MntFruits=3;
33568     +else if MntFruits < 5 then BIN_MntFruits=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 5 then BIN_MntFruits=4;
33569     +else if MntFruits < 9 then BIN_MntFruits=5;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 9 then BIN_MntFruits=5;
33570     +else if MntFruits < 16 then BIN_MntFruits=6;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 16 then BIN_MntFruits=6;
33571     +else if MntFruits < 27 then BIN_MntFruits=7;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 27 then BIN_MntFruits=7;
33572     +else if MntFruits < 44 then BIN_MntFruits=8;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 44 then BIN_MntFruits=8;
33573     +else if MntFruits < 84 then BIN_MntFruits=9;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 84 then BIN_MntFruits=9;
33574     +else if MntFruits >= 84 then BIN_MntFruits=10;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits >= 84 then BIN_MntFruits=10;
33575     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33576     +if MntGoldProds eq . then BIN_MntGoldProds= .;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds eq . then BIN_MntGoldProds= .;
33577     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33578     +if MntGoldProds < 3 then BIN_MntGoldProds=1;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds < 3 then BIN_MntGoldProds=1;
33579     +else if MntGoldProds < 7 then BIN_MntGoldProds=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 7 then BIN_MntGoldProds=2;
33580     +else if MntGoldProds < 12 then BIN_MntGoldProds=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 12 then BIN_MntGoldProds=3;
33581     +else if MntGoldProds < 17 then BIN_MntGoldProds=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 17 then BIN_MntGoldProds=4;
33582     +else if MntGoldProds < 25 then BIN_MntGoldProds=5;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 25 then BIN_MntGoldProds=5;
33583     +else if MntGoldProds < 34 then BIN_MntGoldProds=6;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 34 then BIN_MntGoldProds=6;
33584     +else if MntGoldProds < 48 then BIN_MntGoldProds=7;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 48 then BIN_MntGoldProds=7;
33585     +else if MntGoldProds < 74 then BIN_MntGoldProds=8;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 74 then BIN_MntGoldProds=8;
33586     +else if MntGoldProds < 116 then BIN_MntGoldProds=9;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 116 then BIN_MntGoldProds=9;
33587     +else if MntGoldProds >= 116 then BIN_MntGoldProds=10;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds >= 116 then BIN_MntGoldProds=10;
33588     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33589     +if MntMeatProducts eq . then BIN_MntMeatProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts eq . then BIN_MntMeatProducts= .;
33590     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33591     +if MntMeatProducts < 7 then BIN_MntMeatProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts < 7 then BIN_MntMeatProducts=1;
33592     +else if MntMeatProducts < 12 then BIN_MntMeatProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 12 then BIN_MntMeatProducts=2;
33593     +else if MntMeatProducts < 21 then BIN_MntMeatProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 21 then BIN_MntMeatProducts=3;
33594     +else if MntMeatProducts < 38 then BIN_MntMeatProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 38 then BIN_MntMeatProducts=4;
33595     +else if MntMeatProducts < 72 then BIN_MntMeatProducts=5;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 72 then BIN_MntMeatProducts=5;
33596     +else if MntMeatProducts < 116 then BIN_MntMeatProducts=6;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 116 then BIN_MntMeatProducts=6;
33597     +else if MntMeatProducts < 186 then BIN_MntMeatProducts=7;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 186 then BIN_MntMeatProducts=7;
33598     +else if MntMeatProducts < 309 then BIN_MntMeatProducts=8;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 309 then BIN_MntMeatProducts=8;
33599     +else if MntMeatProducts < 518 then BIN_MntMeatProducts=9;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 518 then BIN_MntMeatProducts=9;
33600     +else if MntMeatProducts >= 518 then BIN_MntMeatProducts=10;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts >= 518 then BIN_MntMeatProducts=10;
33601     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33602     +if MntSweetProducts eq . then BIN_MntSweetProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts eq . then BIN_MntSweetProducts= .;
33603     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33604     +if MntSweetProducts < 0 then BIN_MntSweetProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts < 0 then BIN_MntSweetProducts=1;
33605     +else if MntSweetProducts < 1 then BIN_MntSweetProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 1 then BIN_MntSweetProducts=2;
33606     +else if MntSweetProducts < 3 then BIN_MntSweetProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 3 then BIN_MntSweetProducts=3;
33607     +else if MntSweetProducts < 5 then BIN_MntSweetProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 5 then BIN_MntSweetProducts=4;
33608     +else if MntSweetProducts < 9 then BIN_MntSweetProducts=5;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 9 then BIN_MntSweetProducts=5;
33609     +else if MntSweetProducts < 16 then BIN_MntSweetProducts=6;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 16 then BIN_MntSweetProducts=6;
33610     +else if MntSweetProducts < 27 then BIN_MntSweetProducts=7;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 27 then BIN_MntSweetProducts=7;
33611     +else if MntSweetProducts < 46 then BIN_MntSweetProducts=8;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 46 then BIN_MntSweetProducts=8;
33612     +else if MntSweetProducts < 84 then BIN_MntSweetProducts=9;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 84 then BIN_MntSweetProducts=9;
33613     +else if MntSweetProducts >= 84 then BIN_MntSweetProducts=10;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts >= 84 then BIN_MntSweetProducts=10;
33614     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33615     +if MntWines eq . then BIN_MntWines= .;
MPRINT(EM_QUANTILE_BINNING):   if MntWines eq . then BIN_MntWines= .;
33616     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33617     +if MntWines < 6 then BIN_MntWines=1;
MPRINT(EM_QUANTILE_BINNING):   if MntWines < 6 then BIN_MntWines=1;
33618     +else if MntWines < 16 then BIN_MntWines=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 16 then BIN_MntWines=2;
33619     +else if MntWines < 33 then BIN_MntWines=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 33 then BIN_MntWines=3;
33620     +else if MntWines < 84 then BIN_MntWines=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 84 then BIN_MntWines=4;
33621     +else if MntWines < 183.5 then BIN_MntWines=5;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 183.5 then BIN_MntWines=5;
33622     +else if MntWines < 298 then BIN_MntWines=6;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 298 then BIN_MntWines=6;
33623     +else if MntWines < 429 then BIN_MntWines=7;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 429 then BIN_MntWines=7;
33624     +else if MntWines < 602 then BIN_MntWines=8;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 602 then BIN_MntWines=8;
33625     +else if MntWines < 836 then BIN_MntWines=9;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 836 then BIN_MntWines=9;
33626     +else if MntWines >= 836 then BIN_MntWines=10;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines >= 836 then BIN_MntWines=10;
33627     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33628     +if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
33629     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33630     +if MonthsAsCustomer < 61 then BIN_MonthsAsCustomer=1;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer < 61 then BIN_MonthsAsCustomer=1;
33631     +else if MonthsAsCustomer < 67 then BIN_MonthsAsCustomer=2;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 67 then BIN_MonthsAsCustomer=2;
33632     +else if MonthsAsCustomer < 73 then BIN_MonthsAsCustomer=3;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 73 then BIN_MonthsAsCustomer=3;
33633     +else if MonthsAsCustomer < 78 then BIN_MonthsAsCustomer=4;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 78 then BIN_MonthsAsCustomer=4;
33634     +else if MonthsAsCustomer < 84 then BIN_MonthsAsCustomer=5;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 84 then BIN_MonthsAsCustomer=5;
33635     +else if MonthsAsCustomer < 89 then BIN_MonthsAsCustomer=6;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 89 then BIN_MonthsAsCustomer=6;
33636     +else if MonthsAsCustomer < 96 then BIN_MonthsAsCustomer=7;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 96 then BIN_MonthsAsCustomer=7;
33637     +else if MonthsAsCustomer < 102 then BIN_MonthsAsCustomer=8;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 102 then BIN_MonthsAsCustomer=8;
33638     +else if MonthsAsCustomer < 108 then BIN_MonthsAsCustomer=9;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 108 then BIN_MonthsAsCustomer=9;
33639     +else if MonthsAsCustomer >= 108 then BIN_MonthsAsCustomer=10;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer >= 108 then BIN_MonthsAsCustomer=10;
33640     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33641     +if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
33642     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33643     +if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
33644     +else if NumCatalogPurchases < 1 then BIN_NumCatalogPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 1 then BIN_NumCatalogPurchases=2;
33645     +else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=3;
33646     +else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=4;
33647     +else if NumCatalogPurchases < 5 then BIN_NumCatalogPurchases=5;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 5 then BIN_NumCatalogPurchases=5;
33648     +else if NumCatalogPurchases < 7 then BIN_NumCatalogPurchases=6;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 7 then BIN_NumCatalogPurchases=6;
33649     +else if NumCatalogPurchases >= 7 then BIN_NumCatalogPurchases=7;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases >= 7 then BIN_NumCatalogPurchases=7;
33650     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33651     +if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
33652     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33653     +if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
33654     +else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
33655     +else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
33656     +else if NumDealsPurchases < 5 then BIN_NumDealsPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 5 then BIN_NumDealsPurchases=4;
33657     +else if NumDealsPurchases >= 5 then BIN_NumDealsPurchases=5;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases >= 5 then BIN_NumDealsPurchases=5;
33658     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33659     +if NumDistPurchases eq . then BIN_NumDistPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases eq . then BIN_NumDistPurchases= .;
33660     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33661     +if NumDistPurchases < 1 then BIN_NumDistPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases < 1 then BIN_NumDistPurchases=1;
33662     +else if NumDistPurchases < 2 then BIN_NumDistPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 2 then BIN_NumDistPurchases=2;
33663     +else if NumDistPurchases < 3 then BIN_NumDistPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 3 then BIN_NumDistPurchases=3;
33664     +else if NumDistPurchases < 5 then BIN_NumDistPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 5 then BIN_NumDistPurchases=4;
33665     +else if NumDistPurchases < 6 then BIN_NumDistPurchases=5;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 6 then BIN_NumDistPurchases=5;
33666     +else if NumDistPurchases < 8 then BIN_NumDistPurchases=6;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 8 then BIN_NumDistPurchases=6;
33667     +else if NumDistPurchases < 9 then BIN_NumDistPurchases=7;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 9 then BIN_NumDistPurchases=7;
33668     +else if NumDistPurchases < 11 then BIN_NumDistPurchases=8;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 11 then BIN_NumDistPurchases=8;
33669     +else if NumDistPurchases < 13 then BIN_NumDistPurchases=9;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 13 then BIN_NumDistPurchases=9;
33670     +else if NumDistPurchases >= 13 then BIN_NumDistPurchases=10;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases >= 13 then BIN_NumDistPurchases=10;
33671     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33672     +if NumStorePurchases eq . then BIN_NumStorePurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases eq . then BIN_NumStorePurchases= .;
33673     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33674     +if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
33675     +else if NumStorePurchases < 4 then BIN_NumStorePurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 4 then BIN_NumStorePurchases=2;
33676     +else if NumStorePurchases < 5 then BIN_NumStorePurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 5 then BIN_NumStorePurchases=3;
33677     +else if NumStorePurchases < 6 then BIN_NumStorePurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 6 then BIN_NumStorePurchases=4;
33678     +else if NumStorePurchases < 8 then BIN_NumStorePurchases=5;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 8 then BIN_NumStorePurchases=5;
33679     +else if NumStorePurchases < 9 then BIN_NumStorePurchases=6;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 9 then BIN_NumStorePurchases=6;
33680     +else if NumStorePurchases < 11 then BIN_NumStorePurchases=7;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 11 then BIN_NumStorePurchases=7;
33681     +else if NumStorePurchases >= 11 then BIN_NumStorePurchases=8;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases >= 11 then BIN_NumStorePurchases=8;
33682     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33683     +if NumWebPurchases eq . then BIN_NumWebPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases eq . then BIN_NumWebPurchases= .;
33684     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33685     +if NumWebPurchases < 1 then BIN_NumWebPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases < 1 then BIN_NumWebPurchases=1;
33686     +else if NumWebPurchases < 2 then BIN_NumWebPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 2 then BIN_NumWebPurchases=2;
33687     +else if NumWebPurchases < 3 then BIN_NumWebPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 3 then BIN_NumWebPurchases=3;
33688     +else if NumWebPurchases < 4 then BIN_NumWebPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 4 then BIN_NumWebPurchases=4;
33689     +else if NumWebPurchases < 5 then BIN_NumWebPurchases=5;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 5 then BIN_NumWebPurchases=5;
33690     +else if NumWebPurchases < 6 then BIN_NumWebPurchases=6;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 6 then BIN_NumWebPurchases=6;
33691     +else if NumWebPurchases < 8 then BIN_NumWebPurchases=7;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 8 then BIN_NumWebPurchases=7;
33692     +else if NumWebPurchases >= 8 then BIN_NumWebPurchases=8;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases >= 8 then BIN_NumWebPurchases=8;
33693     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33694     +if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
33695     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33696     +if NumWebVisitsMonth < 2 then BIN_NumWebVisitsMonth=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth < 2 then BIN_NumWebVisitsMonth=1;
33697     +else if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=2;
33698     +else if NumWebVisitsMonth < 4 then BIN_NumWebVisitsMonth=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 4 then BIN_NumWebVisitsMonth=3;
33699     +else if NumWebVisitsMonth < 5 then BIN_NumWebVisitsMonth=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 5 then BIN_NumWebVisitsMonth=4;
33700     +else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=5;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=5;
33701     +else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=6;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=6;
33702     +else if NumWebVisitsMonth < 8 then BIN_NumWebVisitsMonth=7;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 8 then BIN_NumWebVisitsMonth=7;
33703     +else if NumWebVisitsMonth >= 8 then BIN_NumWebVisitsMonth=8;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth >= 8 then BIN_NumWebVisitsMonth=8;
33704     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33705     +if RFMstat eq . then BIN_RFMstat= .;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat eq . then BIN_RFMstat= .;
33706     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33707     +if RFMstat < 3 then BIN_RFMstat=1;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat < 3 then BIN_RFMstat=1;
33708     +else if RFMstat < 6.88 then BIN_RFMstat=2;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 6.88 then BIN_RFMstat=2;
33709     +else if RFMstat < 18.67 then BIN_RFMstat=3;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 18.67 then BIN_RFMstat=3;
33710     +else if RFMstat < 52.5 then BIN_RFMstat=4;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 52.5 then BIN_RFMstat=4;
33711     +else if RFMstat < 128.09 then BIN_RFMstat=5;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 128.09 then BIN_RFMstat=5;
33712     +else if RFMstat < 234.14 then BIN_RFMstat=6;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 234.14 then BIN_RFMstat=6;
33713     +else if RFMstat < 369.14 then BIN_RFMstat=7;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 369.14 then BIN_RFMstat=7;
33714     +else if RFMstat < 571.29 then BIN_RFMstat=8;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 571.29 then BIN_RFMstat=8;
33715     +else if RFMstat < 1073.68 then BIN_RFMstat=9;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 1073.68 then BIN_RFMstat=9;
33716     +else if RFMstat >= 1073.68 then BIN_RFMstat=10;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat >= 1073.68 then BIN_RFMstat=10;
33717     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33718     +if RMntFrq eq . then BIN_RMntFrq= .;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq eq . then BIN_RMntFrq= .;
33719     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33720     +if RMntFrq < 7.83 then BIN_RMntFrq=1;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq < 7.83 then BIN_RMntFrq=1;
33721     +else if RMntFrq < 11 then BIN_RMntFrq=2;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 11 then BIN_RMntFrq=2;
33722     +else if RMntFrq < 15.83 then BIN_RMntFrq=3;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 15.83 then BIN_RMntFrq=3;
33723     +else if RMntFrq < 23.77 then BIN_RMntFrq=4;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 23.77 then BIN_RMntFrq=4;
33724     +else if RMntFrq < 30.4 then BIN_RMntFrq=5;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 30.4 then BIN_RMntFrq=5;
33725     +else if RMntFrq < 36.55 then BIN_RMntFrq=6;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 36.55 then BIN_RMntFrq=6;
33726     +else if RMntFrq < 43.06 then BIN_RMntFrq=7;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 43.06 then BIN_RMntFrq=7;
33727     +else if RMntFrq < 68.73 then BIN_RMntFrq=8;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 68.73 then BIN_RMntFrq=8;
33728     +else if RMntFrq < 75.83 then BIN_RMntFrq=9;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 75.83 then BIN_RMntFrq=9;
33729     +else if RMntFrq >= 75.83 then BIN_RMntFrq=10;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq >= 75.83 then BIN_RMntFrq=10;
33730     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33731     +if Recency eq . then BIN_Recency= .;
MPRINT(EM_QUANTILE_BINNING):   if Recency eq . then BIN_Recency= .;
33732     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33733     +if Recency < 9 then BIN_Recency=1;
MPRINT(EM_QUANTILE_BINNING):   if Recency < 9 then BIN_Recency=1;
33734     +else if Recency < 19 then BIN_Recency=2;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 19 then BIN_Recency=2;
33735     +else if Recency < 29 then BIN_Recency=3;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 29 then BIN_Recency=3;
33736     +else if Recency < 38 then BIN_Recency=4;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 38 then BIN_Recency=4;
33737     +else if Recency < 48 then BIN_Recency=5;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 48 then BIN_Recency=5;
33738     +else if Recency < 58 then BIN_Recency=6;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 58 then BIN_Recency=6;
33739     +else if Recency < 68 then BIN_Recency=7;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 68 then BIN_Recency=7;
33740     +else if Recency < 79 then BIN_Recency=8;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 79 then BIN_Recency=8;
33741     +else if Recency < 90 then BIN_Recency=9;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 90 then BIN_Recency=9;
33742     +else if Recency >= 90 then BIN_Recency=10;
MPRINT(EM_QUANTILE_BINNING):   else if Recency >= 90 then BIN_Recency=10;
33743     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33744     +if Teenhome eq . then BIN_Teenhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome eq . then BIN_Teenhome= .;
33745     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
33746     +if Teenhome < 0 then BIN_Teenhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome < 0 then BIN_Teenhome=1;
33747     +else if Teenhome < 1 then BIN_Teenhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome < 1 then BIN_Teenhome=2;
33748     +else if Teenhome >= 1 then BIN_Teenhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome >= 1 then BIN_Teenhome=3;
33749     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
33750     +drop
33751     +AcceptedCmpTotal
33752     +Age
33753     +Frq
33754     +Income
33755     +Kidhome
33756     +Mnt
33757     +MntFishProducts
33758     +MntFruits
33759     +MntGoldProds
33760     +MntMeatProducts
33761     +MntSweetProducts
33762     +MntWines
33763     +MonthsAsCustomer
33764     +NumCatalogPurchases
33765     +NumDealsPurchases
33766     +NumDistPurchases
33767     +NumStorePurchases
33768     +NumWebPurchases
33769     +NumWebVisitsMonth
33770     +RFMstat
33771     +RMntFrq
33772     +Recency
33773     +Teenhome
33774     +;
MPRINT(EM_QUANTILE_BINNING):   drop AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.BINNING_BINDATA has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   length newgroup _group_ _order_ 8 _level_ $8;
MPRINT(EM_QUANTILE_BINNING):   newgroup =.;
MPRINT(EM_QUANTILE_BINNING):   _LEVEL_ = 'ORDINAL';
MPRINT(EM_QUANTILE_BINNING):   _Group_ = grp;
MPRINT(EM_QUANTILE_BINNING):   rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
MPRINT(EM_QUANTILE_BINNING):   keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      264:11   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: There were 23 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 218 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   _order_ = _N_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 218 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set WORK.TEMPSPLITVALS has 218 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals ;
MPRINT(EM_QUANTILE_BINNING):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 218 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 218 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempvariableset;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_QUANTILE_BINNING):   where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') and (TYPE='C') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data =EMWS8.BINNING_BINDATA classout=_classout nonorm;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data=EMWS8.BINNING_BINDATA classout=_classout2;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout2;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data _classout;
MPRINT(EM_QUANTILE_BINNING):   length _variable_ $32;
MPRINT(EM_QUANTILE_BINNING):   merge _classout _classout2 (rename=(LEVEL=_split_value_));
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   _variable_ = NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 218 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 218 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   length _norm_level_ $200 _split_value_ $200;
MPRINT(EM_QUANTILE_BINNING):   merge EMWS8.BINNING_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   LEVEL = trim(left(LEVEL));
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = trim(left(_split_value_));
MPRINT(EM_QUANTILE_BINNING):   _norm_level_ = trim(left(_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   drop NAME FREQUENCY TYPE CRAW NRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      478:19   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      478:9   
NOTE: There were 218 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 228 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete _classout _classout2;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT2 (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 228 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 228 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by DISPLAY_VAR _Group_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 228 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 228 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete sortedmapping tempsplitvals tempmissvalues ;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.SORTEDMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 9 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE LEVEL in ('BINARY', 'NOMINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 9 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc dmdb data=EMWS8.Part_TRAIN classout=tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   class AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL='MISSING' then level='Missing';
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=tempclassout nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by NAME descending FREQUENCY LEVEL;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds(keep=NAME NOBS);
MPRINT(EM_CLASSVARS_GROUP):   retain NOBS;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if first.NAME then NOBS = frequency;
MPRINT(EM_CLASSVARS_GROUP):   else NOBS=NOBS+frequency;
MPRINT(EM_CLASSVARS_GROUP):   if last.name then do;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPDS has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds;
MPRINT(EM_CLASSVARS_GROUP):   merge tempclassout tempds;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if ((LEVEL ne '') AND (LEVEL ne "."));
MPRINT(EM_CLASSVARS_GROUP):   PCT = 100 * (FREQUENCY/NOBS);
MPRINT(EM_CLASSVARS_GROUP):   if PCT < 0.5 then flag=1;
MPRINT(EM_CLASSVARS_GROUP):   else flag=0;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPDS.
NOTE: The data set WORK.TEMPDS has 24 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempmissvalues;
MPRINT(EM_CLASSVARS_GROUP):   length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp1";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp2";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp3";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp4";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp5";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Complain";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Education";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="HigherEducationBinary";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Marital_Status";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempsplitvals;
MPRINT(EM_CLASSVARS_GROUP):   length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   if ((level ne '') AND (level ne '.'));
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp1" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp2" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp3" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp4" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp5" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Complain" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Education" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "GRADUATION" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "PHD" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "MASTER" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "2N CYCLE" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "BASIC" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "HigherEducationBinary" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "1" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "0" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Marital_Status" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "MARRIED" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "TOGETHER" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "SINGLE" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "DIVORCED" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "WIDOW" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   _VARIABLE_ = NAME;
MPRINT(EM_CLASSVARS_GROUP):   newgroup = .;
MPRINT(EM_CLASSVARS_GROUP):   rename NAME = DISPLAY_VAR LEVEL = _SPLIT_VALUE_;
MPRINT(EM_CLASSVARS_GROUP):   keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Variable _Split_value_ is uninitialized.
NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sql;
MPRINT(EM_CLASSVARS_GROUP):   reset noprint;
MPRINT(EM_CLASSVARS_GROUP):   select count(*) into :nobs from EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 228 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 228 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = tempsplitvals nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_Value_ _group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   merge EMWS8.BINNING_SPLITVALS tempsplitvals ;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_ ;
MPRINT(EM_CLASSVARS_GROUP):   if display_var eq "" then delete;
MPRINT(EM_CLASSVARS_GROUP):   if _norm_level_ eq "" then _norm_level_ = _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 228 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 251 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 251 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_CLASSVARS_GROUP):   delete tempsplitvals tempds tempclassout tempvariableset tempvars tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPDS (memtype=DATA).
NOTE: Deleting WORK.TEMPCLASSOUT (memtype=DATA).
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_CLASSVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_ORDVARS_GROUP):   by NAME;
MPRINT(EM_ORDVARS_GROUP):   where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='ORDINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_ORDVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_ORDVARS_GROUP):   delete tempsplitvals varvals tempvariableset tempvars ;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: The file WORK.TEMPSPLITVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.VARVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
MPRINT(EM_ORDVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc print data=EMWS8.BINNING_VARMAPPINGS label;
MPRINT(TRAIN):   var _VARIABLE_ _GRP_VARIABLE_ ;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.BINNING_SPLITVALS out=tempsplitvals nodupkey;
MPRINT(TRAIN):   by _VARIABLE_;
MPRINT(TRAIN):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: 219 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 32 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   length _proc_var_ $32;
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP1" then _proc_var_ = "AcceptedCmp1";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP2" then _proc_var_ = "AcceptedCmp2";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP3" then _proc_var_ = "AcceptedCmp3";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP4" then _proc_var_ = "AcceptedCmp4";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP5" then _proc_var_ = "AcceptedCmp5";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMPTOTAL" then _proc_var_ = "BIN_AcceptedCmpTotal";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "AGE" then _proc_var_ = "BIN_Age";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "FRQ" then _proc_var_ = "BIN_Frq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "INCOME" then _proc_var_ = "BIN_Income";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "KIDHOME" then _proc_var_ = "BIN_Kidhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNT" then _proc_var_ = "BIN_Mnt";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFISHPRODUCTS" then _proc_var_ = "BIN_MntFishProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFRUITS" then _proc_var_ = "BIN_MntFruits";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTGOLDPRODS" then _proc_var_ = "BIN_MntGoldProds";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTMEATPRODUCTS" then _proc_var_ = "BIN_MntMeatProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTSWEETPRODUCTS" then _proc_var_ = "BIN_MntSweetProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTWINES" then _proc_var_ = "BIN_MntWines";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MONTHSASCUSTOMER" then _proc_var_ = "BIN_MonthsAsCustomer";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMCATALOGPURCHASES" then _proc_var_ = "BIN_NumCatalogPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDEALSPURCHASES" then _proc_var_ = "BIN_NumDealsPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDISTPURCHASES" then _proc_var_ = "BIN_NumDistPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMSTOREPURCHASES" then _proc_var_ = "BIN_NumStorePurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBPURCHASES" then _proc_var_ = "BIN_NumWebPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBVISITSMONTH" then _proc_var_ = "BIN_NumWebVisitsMonth";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RFMSTAT" then _proc_var_ = "BIN_RFMstat";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RMNTFRQ" then _proc_var_ = "BIN_RMntFrq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RECENCY" then _proc_var_ = "BIN_Recency";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "TEENHOME" then _proc_var_ = "BIN_Teenhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "COMPLAIN" then _proc_var_ = "Complain";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "EDUCATION" then _proc_var_ = "Education";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "HIGHEREDUCATIONBINARY" then _proc_var_ = "HigherEducationBinary";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MARITAL_STATUS" then _proc_var_ = "Marital_Status";
MPRINT(TRAIN):   if missing(_proc_var_) then _proc_var_=_variable_;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete sortedbin tempsplitvals;
MPRINT(TRAIN):   run;

NOTE: The file WORK.SORTEDBIN (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_FINE_DETAIL):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_FINE_DETAIL):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_FINE_DETAIL):   / missing out=temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETB has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TEMPTARGETB (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data temptrain ;
MPRINT(EM_SUMMARIZE_TABLE):   set EMWS8.BINNING_BINDATA;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTRAIN has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_PRENORMALIZECLASSVARS.SOURCE.
33775     +%macro em_PreNormalizeClassVars(incmeta=, outcmeta=);
33777     +   data &outcmeta(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
33778     +      length INDEXVAR $32; retain _index 0;
33779     +      set &incmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
33780     +      if strip(LEVEL) eq 'INTERVAL' then delete;
33781     +      else do;
33782     +         _index+1;
33783     +         INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
33784     +      end;
33785     +   run;
33786     +%mend em_PreNormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_NORMALIZECLASSVARS.SOURCE.
33787     +%macro em_NormalizeClassVars(indata=,
33788     +                          cmeta=,
33789     +                          encodedTarget=N,
33790     +                          target=,
33791     +                          targetEvent=,
33792     +                          targetNonEvent=,
33793     +                          outdata=);
33794     + %let dsid = %sysfunc(open(&cmeta));
33795     + %let vn_name =%sysfunc(varnum(&dsid, NAME));
33796     + %let vn_indexvar =%sysfunc(varnum(&dsid, INDEXVAR));
33797     + %let vn_format =%sysfunc(varnum(&dsid, FORMAT));
33798     + %let vn_type =%sysfunc(varnum(&dsid, TYPE));
33800     + data &outdata/view=&outdata;
33801     +      length _normedvar32 $32.;
33802     +      set &indata( rename = (
33803     +      %let k = 1;
33804     +      %do %while(^%sysfunc(fetch(&dsid)));
33805     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
33806     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
33807     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
33808     +          &_name = &_indexvar
33809     +          %let k = %eval(&k+1);
33810     +      %end;
33811     +      ));
33812     +      drop  _normedvar32;
33814     +      %let rc=%sysfunc(rewind(&dsid));
33815     +      %let k = 1;
33816     +      %do %while(^%sysfunc(fetch(&dsid)));
33817     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
33818     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
33819     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
33820     +          %let _type     = %sysfunc(getvarc(&dsid, &vn_type));
33821     +          %if &_format ne %then %do;
33822     +              _normedvar32 = put(&_indexvar, &_format);
33823     +          %end;
33824     +          %else %do;
33825     +              %if &_type = N %then %do;
33826     +                  _normedvar32 = put(&_indexvar, Best12.);
33827     +              %end;
33828     +              %else %do;
33829     +                  _normedvar32 = put(&_indexvar, $32.);
33830     +              %end;
33831     +          %end;
33832     +          %DMNORMIP(_normedvar32);
33833     +          &_name = _normedvar32;
33834     +          drop &_indexvar;
33835     +          %let k = %eval(&k+1);
33836     +      %end;
33837     +      %let dsid = %sysfunc(close(&dsid));
33839     +      %if &encodedTarget = Y %then %do;
33840     +          %let qtargetEvent = %sysfunc(quote(&targetEvent));
33841     +          %let qtargetNonEvent = %sysfunc(quote(&targetNonEvent));
33842     +          if upcase(strip(&target)) = &qtargetEvent then _EncodedTarget_ =1;
33843     +          else if upcase(strip(&target)) = &qtargetNonEvent then _EncodedTarget_ = 0;
33844     +      %end;
33845     + run;
33847     +%mend em_NormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=tempmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAP has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _cmeta;
MPRINT(EM_SUMMARIZE_TABLE):   merge tempvarset tempmap(in=_a rename=(_variable_=name ));
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   if ((_a) or (role="TARGET"));
MPRINT(EM_SUMMARIZE_TABLE):   if role="INPUT" then name=_proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if role="TARGET" then role="INPUT";
MPRINT(EM_SUMMARIZE_TABLE):   level = procLevel;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(name, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      110:9   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      115:4   
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: There were 32 observations read from the data set WORK.TEMPMAP.
NOTE: The data set WORK._CMETA has 33 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRENORMALIZECLASSVARS):   data _cmetatmp(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
MPRINT(EM_PRENORMALIZECLASSVARS):   length INDEXVAR $32;
MPRINT(EM_PRENORMALIZECLASSVARS):   retain _index 0;
MPRINT(EM_PRENORMALIZECLASSVARS):   set _cmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRENORMALIZECLASSVARS):   if strip(LEVEL) eq 'INTERVAL' then delete;
MPRINT(EM_PRENORMALIZECLASSVARS):   else do;
MPRINT(EM_PRENORMALIZECLASSVARS):   _index+1;
MPRINT(EM_PRENORMALIZECLASSVARS):   INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
MPRINT(EM_PRENORMALIZECLASSVARS):   end;
MPRINT(EM_PRENORMALIZECLASSVARS):   run;

NOTE: There were 33 observations read from the data set WORK._CMETA.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK._CMETATMP has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_NORMALIZECLASSVARS):   data _tmp_train/view=_tmp_train;
MPRINT(EM_NORMALIZECLASSVARS):   length _normedvar32 $32.;
MPRINT(EM_NORMALIZECLASSVARS):   set work.temptrain( rename = ( AcceptedCmp1 = _INDEXVAR1 AcceptedCmp2 = _INDEXVAR2 AcceptedCmp3 = _INDEXVAR3 AcceptedCmp4 = _INDEXVAR4 AcceptedCmp5 = _INDEXVAR5 BIN_AcceptedCmpTotal = _INDEXVAR6 BIN_Age = _INDEXVAR7 
Complain = _INDEXVAR8 DepVar = _INDEXVAR9 Education = _INDEXVAR10 BIN_Frq = _INDEXVAR11 HigherEducationBinary = _INDEXVAR12 BIN_Income = _INDEXVAR13 BIN_Kidhome = _INDEXVAR14 Marital_Status = _INDEXVAR15 BIN_Mnt = _INDEXVAR16 BIN_MntFishProducts = 
_INDEXVAR17 BIN_MntFruits = _INDEXVAR18 BIN_MntGoldProds = _INDEXVAR19 BIN_MntMeatProducts = _INDEXVAR20 BIN_MntSweetProducts = _INDEXVAR21 BIN_MntWines = _INDEXVAR22 BIN_MonthsAsCustomer = _INDEXVAR23 BIN_NumCatalogPurchases = _INDEXVAR24 
BIN_NumDealsPurchases = _INDEXVAR25 BIN_NumDistPurchases = _INDEXVAR26 BIN_NumStorePurchases = _INDEXVAR27 BIN_NumWebPurchases = _INDEXVAR28 BIN_NumWebVisitsMonth = _INDEXVAR29 BIN_RFMstat = _INDEXVAR30 BIN_RMntFrq = _INDEXVAR31 BIN_Recency = _INDEXVAR32 
BIN_Teenhome = _INDEXVAR33 ));
MPRINT(EM_NORMALIZECLASSVARS):   drop _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR1, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp1 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR1;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR2, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp2 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR2;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR3, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp3 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR3;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR4, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp4 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR4;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR5, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp5 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR5;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR6, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_AcceptedCmpTotal = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR6;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR7, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Age = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR7;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR8, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Complain = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR8;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR9, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   DepVar = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR9;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR10, $10.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Education = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR10;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR11, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Frq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR11;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR12, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   HigherEducationBinary = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR12;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR13, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Income = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR13;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR14, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Kidhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR14;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR15, $8.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Marital_Status = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR15;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR16, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Mnt = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR16;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR17, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFishProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR17;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR18, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFruits = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR18;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR19, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntGoldProds = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR19;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR20, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntMeatProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR20;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR21, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntSweetProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR21;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR22, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntWines = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR22;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR23, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MonthsAsCustomer = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR23;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR24, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumCatalogPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR24;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR25, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDealsPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR25;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR26, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDistPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR26;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR27, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumStorePurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR27;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR28, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR28;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR29, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebVisitsMonth = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR29;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR30, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RFMstat = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR30;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR31, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RMntFrq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR31;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR32, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Recency = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR33, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Teenhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR33;
MPRINT(EM_NORMALIZECLASSVARS):   run;

NOTE: DATA STEP view saved on file WORK._TMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=sortedmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.SORTEDMAP has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output CrossTabFreqs=crosstabfreq ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("proc freq data=_tmp_train order=formatted addnames;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("tables ("||_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  ") * DepVar/ missing;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output close;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   proc freq data=_tmp_train order=formatted addnames;
MPRINT(EM_SUMMARIZE_TABLE):   ) * DepVar/ missing;
MPRINT(EM_SUMMARIZE_TABLE):   run;
MPRINT(EM_SUMMARIZE_TABLE):   ods output close;
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   CrossTabFreqs ;
2         + proc freq data=_tmp_train order=formatted addnames;
3         + tables (AcceptedCmp1
4         + AcceptedCmp2
5         + AcceptedCmp3
6         + AcceptedCmp4
7         + AcceptedCmp5
8         + BIN_AcceptedCmpTotal
9         + BIN_Age
10        + BIN_Frq
11        + BIN_Income
12        + BIN_Kidhome
13        + BIN_Mnt
14        + BIN_MntFishProducts
15        + BIN_MntFruits
16        + BIN_MntGoldProds
17        + BIN_MntMeatProducts
18        + BIN_MntSweetProducts
19        + BIN_MntWines
20        + BIN_MonthsAsCustomer
21        + BIN_NumCatalogPurchases
22        + BIN_NumDealsPurchases
23        + BIN_NumDistPurchases
24        + BIN_NumStorePurchases
25        + BIN_NumWebPurchases
26        + BIN_NumWebVisitsMonth
27        + BIN_RFMstat
28        + BIN_RMntFrq
29        + BIN_Recency
30        + BIN_Teenhome
31        + Complain
32        + Education
33        + HigherEducationBinary
34        + Marital_Status
35        + ) * DepVar/ missing;
36        + run;

NOTE: View WORK._TMP_TRAIN.VIEW used (Total process time):
      real time           0.35 seconds
      cpu time            0.20 seconds
      
NOTE: There were 2374 observations read from the data set WORK.TEMPTRAIN.
NOTE: The data set WORK.CROSSTABFREQ has 732 observations and 43 variables.
NOTE: There were 2374 observations read from the data set WORK._TMP_TRAIN.
NOTE: The PROCEDURE FREQ printed pages 12-43.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.47 seconds
      cpu time            0.24 seconds
      

37        + ods output close;
MPRINT(EM_SUMMARIZE_TABLE):   close
MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("data crosstabs;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  length _variable_ _split_value_  $200 ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  set crosstabfreq(where=(_type_='11'));");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _variable_= RowVariable;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _split_value_="||_proc_var_||";");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("end;");
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  "keep _variable_ _split_value_ DepVar Frequency Percent display_var;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabfreq(where=(_type_='11'));
MPRINT(EM_SUMMARIZE_TABLE):   _variable_= RowVariable;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp1' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp1 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp2' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp2 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp3' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp3 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp4' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp4 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp5' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp5 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_AcceptedCmpTotal ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Age' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Age ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Frq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Frq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Income' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Income ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Kidhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Kidhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Mnt' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Mnt ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFishProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFishProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFruits' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFruits ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntGoldProds' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntGoldProds ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntMeatProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntSweetProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntWines' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntWines ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MonthsAsCustomer ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumCatalogPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDealsPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDistPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumStorePurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebVisitsMonth ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RFMstat' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RFMstat ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RMntFrq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RMntFrq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Recency' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Recency ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Teenhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Teenhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Complain' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Complain ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Education' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Education ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'HigherEducationBinary' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=HigherEducationBinary ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Marital_Status' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Marital_Status ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   keep _variable_ _split_value_ DepVar Frequency Percent display_var;
MPRINT(EM_SUMMARIZE_TABLE):   run;
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data crosstabs;
2         +   length _variable_ _split_value_  $200 ;
MPRINT(EM_SUMMARIZE_TABLE):  200
3         +   set crosstabfreq(where=(_type_='11'));
4         +   _variable_= RowVariable;
5         + if strip(RowVariable) = 'AcceptedCmp1' then do;
6         +   _split_value_=AcceptedCmp1                    ;
7         + end;
8         + if strip(RowVariable) = 'AcceptedCmp2' then do;
9         +   _split_value_=AcceptedCmp2                    ;
10        + end;
11        + if strip(RowVariable) = 'AcceptedCmp3' then do;
12        +   _split_value_=AcceptedCmp3                    ;
13        + end;
14        + if strip(RowVariable) = 'AcceptedCmp4' then do;
15        +   _split_value_=AcceptedCmp4                    ;
16        + end;
17        + if strip(RowVariable) = 'AcceptedCmp5' then do;
18        +   _split_value_=AcceptedCmp5                    ;
19        + end;
20        + if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
21        +   _split_value_=BIN_AcceptedCmpTotal            ;
22        + end;
23        + if strip(RowVariable) = 'BIN_Age' then do;
24        +   _split_value_=BIN_Age                         ;
25        + end;
26        + if strip(RowVariable) = 'BIN_Frq' then do;
27        +   _split_value_=BIN_Frq                         ;
28        + end;
29        + if strip(RowVariable) = 'BIN_Income' then do;
30        +   _split_value_=BIN_Income                      ;
31        + end;
32        + if strip(RowVariable) = 'BIN_Kidhome' then do;
33        +   _split_value_=BIN_Kidhome                     ;
34        + end;
35        + if strip(RowVariable) = 'BIN_Mnt' then do;
36        +   _split_value_=BIN_Mnt                         ;
37        + end;
38        + if strip(RowVariable) = 'BIN_MntFishProducts' then do;
39        +   _split_value_=BIN_MntFishProducts             ;
40        + end;
41        + if strip(RowVariable) = 'BIN_MntFruits' then do;
42        +   _split_value_=BIN_MntFruits                   ;
43        + end;
44        + if strip(RowVariable) = 'BIN_MntGoldProds' then do;
45        +   _split_value_=BIN_MntGoldProds                ;
46        + end;
47        + if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
48        +   _split_value_=BIN_MntMeatProducts             ;
49        + end;
50        + if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
51        +   _split_value_=BIN_MntSweetProducts            ;
52        + end;
53        + if strip(RowVariable) = 'BIN_MntWines' then do;
54        +   _split_value_=BIN_MntWines                    ;
55        + end;
56        + if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
57        +   _split_value_=BIN_MonthsAsCustomer            ;
58        + end;
59        + if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
60        +   _split_value_=BIN_NumCatalogPurchases         ;
61        + end;
62        + if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
63        +   _split_value_=BIN_NumDealsPurchases           ;
64        + end;
65        + if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
66        +   _split_value_=BIN_NumDistPurchases            ;
67        + end;
68        + if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
69        +   _split_value_=BIN_NumStorePurchases           ;
70        + end;
71        + if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
72        +   _split_value_=BIN_NumWebPurchases             ;
73        + end;
74        + if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
75        +   _split_value_=BIN_NumWebVisitsMonth           ;
76        + end;
77        + if strip(RowVariable) = 'BIN_RFMstat' then do;
78        +   _split_value_=BIN_RFMstat                     ;
79        + end;
80        + if strip(RowVariable) = 'BIN_RMntFrq' then do;
81        +   _split_value_=BIN_RMntFrq                     ;
82        + end;
83        + if strip(RowVariable) = 'BIN_Recency' then do;
84        +   _split_value_=BIN_Recency                     ;
85        + end;
86        + if strip(RowVariable) = 'BIN_Teenhome' then do;
87        +   _split_value_=BIN_Teenhome                    ;
88        + end;
89        + if strip(RowVariable) = 'Complain' then do;
90        +   _split_value_=Complain                        ;
91        + end;
92        + if strip(RowVariable) = 'Education' then do;
93        +   _split_value_=Education                       ;
94        + end;
95        + if strip(RowVariable) = 'HigherEducationBinary' then do;
96        +   _split_value_=HigherEducationBinary           ;
97        + end;
98        + if strip(RowVariable) = 'Marital_Status' then do;
99        +   _split_value_=Marital_Status                  ;
100       + end;
101       + keep _variable_ _split_value_ DepVar Frequency Percent display_var;
102       + run;

WARNING: The variable display_var in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 424 observations read from the data set WORK.CROSSTABFREQ.
      WHERE _type_='11';
NOTE: The data set WORK.CROSSTABS has 424 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 424 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 424 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length display_var $32;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 424 observations read from the data set WORK.CROSSTABS.
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: The data set WORK.CROSSTABS has 424 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by display_var _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 424 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 424 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
MPRINT(EM_SUMMARIZE_TABLE):   by display_var;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(_variable_, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   _temp =
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_var by input data sets. This may cause unexpected results.
NOTE: There were 424 observations read from the data set WORK.CROSSTABS.
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: The data set WORK.CROSSTABS has 428 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 428 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 428 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate 8 type $1 valfmt $20 ;
MPRINT(EM_SUMMARIZE_TABLE):   retain eventCount noneventCount ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   if first._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total=0;
MPRINT(EM_SUMMARIZE_TABLE):   eventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   noneventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if upcase(strip(_temp))="1" then eventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   else noneventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   if last._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total = eventCount + noneventCount;
MPRINT(EM_SUMMARIZE_TABLE):   if total ne 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = eventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = nonEventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   output;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   valfmt = format;
MPRINT(EM_SUMMARIZE_TABLE):   drop _temp Frequency percent;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 553:20   1 at 565:24   1 at 570:30   
NOTE: There were 428 observations read from the data set WORK.CROSSTABS.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 213 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):  ;
MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   length display_var $32 newgroup numsplitval 8;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   display_var = _variable_;
MPRINT(EM_FINE_DETAIL):   index = kindex(display_var, "BIN_");
MPRINT(EM_FINE_DETAIL):   if index gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 5);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   index2 = kindex(display_var, "SV_");
MPRINT(EM_FINE_DETAIL):   if index2 gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 4);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
MPRINT(EM_FINE_DETAIL):   _index_ = _N_;
MPRINT(EM_FINE_DETAIL):   newgroup = .;
MPRINT(EM_FINE_DETAIL):   drop index index2 ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Variable numsplitval is uninitialized.
NOTE: There were 213 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 213 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 213 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 213 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_FINE_DETAIL):   _norm_level_ = upcase(_norm_level_);
MPRINT(EM_FINE_DETAIL):   if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
MPRINT(EM_FINE_DETAIL):   * drop _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.TMPSPLITVALS has 251 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=tmpsplitvals out=sortedsplit;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 251 observations read from the data set WORK.TMPSPLITVALS.
NOTE: The data set WORK.SORTEDSPLIT has 251 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets library=work nolist;
MPRINT(EM_FINE_DETAIL):   delete tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TMPSPLITVALS (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedbin;
MPRINT(EM_FINE_DETAIL):   by BIN_NAME BIN;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.SORTEDBIN has 195 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   merge EMWS8.BINNING_FINEDETAILDATA(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   if _a then do;
MPRINT(EM_FINE_DETAIL):   binFlag = 1;
MPRINT(EM_FINE_DETAIL):   VALUE=EM_BIN_LABEL;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   else do;
MPRINT(EM_FINE_DETAIL):   binFlag = 0;
MPRINT(EM_FINE_DETAIL):   *VALUE=strip(display_var)!!"="!!strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   VALUE=strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((eventCount=.) or (nonEventCount=.)) then do;
MPRINT(EM_FINE_DETAIL):   eventCount=0;
MPRINT(EM_FINE_DETAIL):   nonEventCount=0;
MPRINT(EM_FINE_DETAIL):   total = 0;
MPRINT(EM_FINE_DETAIL):   eventRate= 0;
MPRINT(EM_FINE_DETAIL):   nonEventRate = 0;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   eventCount = round(eventCount, .001);
MPRINT(EM_FINE_DETAIL):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_FINE_DETAIL):   total= round(total, .001);
MPRINT(EM_FINE_DETAIL):   eventRate = round(eventRate, .001);
MPRINT(EM_FINE_DETAIL):   nonEventRate = round(nonEventRate, .001);
MPRINT(EM_FINE_DETAIL):   if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then numsplitval = _split_value_;
MPRINT(EM_FINE_DETAIL):   else if ((type='N') AND (valfmt ne "")) then numsplitval = _order_;
MPRINT(EM_FINE_DETAIL):   else numsplitval=.;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
MPRINT(EM_FINE_DETAIL):   if _a and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   if _c and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   drop NAME EM_BIN_LABEL valfmt;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      439:15   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 213 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: There were 251 observations read from the data set WORK.SORTEDSPLIT.
NOTE: There were 195 observations read from the data set WORK.SORTEDBIN.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 251 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp1" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp2" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp3" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp4" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp5" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmpTotal" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Age" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Complain" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Education" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Frq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "HigherEducationBinary" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Income" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Kidhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Marital_Status" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Mnt" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFishProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFruits" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntGoldProds" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntMeatProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntSweetProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntWines" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MonthsAsCustomer" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumCatalogPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDealsPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDistPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumStorePurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebVisitsMonth" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RFMstat" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RMntFrq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Recency" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Teenhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then delete;
MPRINT(EM_FINE_DETAIL):   * if binFlag=1 and UB=LB then delete;
MPRINT(EM_FINE_DETAIL):   * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 251 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by DISPLAY_VAR _index_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 251 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete sortedsplit sortedbin ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.SORTEDSPLIT (memtype=DATA).
NOTE: Deleting WORK.SORTEDBIN (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CREATE_GROUPING):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_CREATE_GROUPING):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_CREATE_GROUPING):   / missing out=temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETC has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets lib=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPTARGETC (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc means data=EMWS8.BINNING_FINEDETAILDATA noprint;
MPRINT(EM_CREATE_GROUPING):   var eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   class _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set WORK.SUMM has 283 observations and 6 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=summ(drop=_type_ _freq_);
MPRINT(EM_CREATE_GROUPING):   by _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 283 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 283 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep=_variable_ eventCount nonEventCount groupresprate) tempcoarse(keep=_variable_ _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
MPRINT(EM_CREATE_GROUPING):   set summ;
MPRINT(EM_CREATE_GROUPING):   format groupresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   format groupnonresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   by _variable_ ;
MPRINT(EM_CREATE_GROUPING):   if _group_=. then do;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   respper = eventCount / 359;
MPRINT(EM_CREATE_GROUPING):   nrespper = nonEventCount / 2015;
MPRINT(EM_CREATE_GROUPING):   if ((nonEventCount = 0) AND (eventCount = 0)) then do;
MPRINT(EM_CREATE_GROUPING):   groupresprate=0;
MPRINT(EM_CREATE_GROUPING):   groupNonresprate = 0;
MPRINT(EM_CREATE_GROUPING):   eventRate = 0;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   groupresprate = eventCount / (eventCount + nonEventCount) * 100;
MPRINT(EM_CREATE_GROUPING):   groupNonRespRate = 100 - groupRespRate;
MPRINT(EM_CREATE_GROUPING):   eventRate = eventCount / 359 * 100;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = nonEventCount / 2015 * 100;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   output gini tempcoarse;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 283 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.GINI has 251 observations and 4 variables.
NOTE: The data set WORK.TEMPCOARSE has 251 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=gini;
MPRINT(EM_CREATE_GROUPING):   by _variable_ descending groupresprate;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 251 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 251 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep= _variable_ _gini_);
MPRINT(EM_CREATE_GROUPING):   retain between within cumresp cumnresp;
MPRINT(EM_CREATE_GROUPING):   set gini(keep=_variable_ eventCount nonEventCount);
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   if first._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   between = 0;
MPRINT(EM_CREATE_GROUPING):   within = 0;
MPRINT(EM_CREATE_GROUPING):   cumresp = 0;
MPRINT(EM_CREATE_GROUPING):   cumnresp = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   between + 2 * cumnresp * eventCount;
MPRINT(EM_CREATE_GROUPING):   within + nonEventCount * eventCount;
MPRINT(EM_CREATE_GROUPING):   cumresp + eventCount;
MPRINT(EM_CREATE_GROUPING):   cumnresp + nonEventCount;
MPRINT(EM_CREATE_GROUPING):   if last._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   if ^(cumnresp=0 or cumresp=0) then do;
MPRINT(EM_CREATE_GROUPING):   _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
MPRINT(EM_CREATE_GROUPING):   output;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 251 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 32 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(EM_CREATE_GROUPING):   rename _variable_ = display_var _proc_var_ = _variable_;
MPRINT(EM_CREATE_GROUPING):   keep _variable_ _proc_var_ label;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPDISPLAYVAR has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: The data set WORK.TEMPDISPLAYVAR has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   data EMWS8.BINNING_COARSE;
MPRINT(EM_CREATE_GROUPING):   length display_Var $32 label _label_ $200 role $10 _group_ 8;
MPRINT(EM_CREATE_GROUPING):   merge tempdisplayvar tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   label display_var = "Variable" eventRate = "Event Rate" nonEventRate = "Non-Event Rate" _group_ = "Group" role = "Role" _gini_ = "Gini Coefficient" eventcount = "Event Count" noneventcount = "Non-Event Count" groupresprate = 
"Group Event Rate" groupnonresprate = "Group Non-Event Rate" ;
MPRINT(EM_CREATE_GROUPING):   eventCount = round(eventCount, .001);
MPRINT(EM_CREATE_GROUPING):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_CREATE_GROUPING):   groupRespRate = round(groupRespRate, .001);
MPRINT(EM_CREATE_GROUPING):   drop _variable_ index index2 respper nrespper;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Variable _label_ is uninitialized.
NOTE: Variable role is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _variable_ by input data sets. This may cause unexpected results.
WARNING: The variable index in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable index2 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 32 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: There were 251 observations read from the data set WORK.TEMPCOARSE.
NOTE: There were 32 observations read from the data set WORK.GINI.
NOTE: The data set EMWS8.BINNING_COARSE has 251 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets library=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPCOARSE (memtype=DATA).
NOTE: Deleting WORK.GINI (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas";
MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   FILE Y;
MPRINT(EM_GENERATE_LABELVALUES):   put " length _LABEL_ $200;";
MPRINT(EM_GENERATE_LABELVALUES):   put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 2 records were written to the file Y.
      The minimum record length was 21.
      The maximum record length was 83.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_SPLITVALS out=work.sortedsplitval;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var _split_Value_;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.SORTEDSPLITVAL has 251 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var bin;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 195 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   if display_var eq '' then delete;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 251 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 219 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   keep _variable_ display_var missgrp;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 251 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 195 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=temp out=class;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_ LB;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 219 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 219 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   file Y MOD;
MPRINT(EM_GENERATE_LABELVALUES):   length string $200 flag 8;
MPRINT(EM_GENERATE_LABELVALUES):   retain string flag;
MPRINT(EM_GENERATE_LABELVALUES):   set class end=eof;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_;
MPRINT(EM_GENERATE_LABELVALUES):   index = kindex(_variable_, "BIN_");
MPRINT(EM_GENERATE_LABELVALUES):   if index gt 0 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then do;';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   if LB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 1;
MPRINT(EM_GENERATE_LABELVALUES):   *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._Group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   if UB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!'< '!!strip(UB)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag=1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string= " UB="!!strip(UB)!!";";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   put "end;";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string = "_LABEL_='"!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag ne 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   tempstring = strip(string)!!', '!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   length = length(tempstring);
MPRINT(EM_GENERATE_LABELVALUES):   if length < 195 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = tempstring;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)||",...";
MPRINT(EM_GENERATE_LABELVALUES):   flag=1;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      243:30   295:37   355:23   
NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=108,
      Last Modified=28. April 2016 15.47 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 1047 records were written to the file Y.
      The minimum record length was 1.
      The maximum record length was 61.
NOTE: There were 219 observations read from the data set WORK.CLASS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
NOTE: %INCLUDE (level 1) file Y is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas.
33848     + length _LABEL_ $200;
MPRINT(EM_GENERATE_LABELVALUES):   length _LABEL_ $200;
33849     + label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";
MPRINT(EM_GENERATE_LABELVALUES):   label _LABEL_= "Group Values";
33850     +
33851     +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then
33852     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then _LABEL_='0';
33853     +else
33854     +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then
33855     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then _LABEL_='1';
33856     +
33857     +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then
33858     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then _LABEL_='0';
33859     +else
33860     +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then
33861     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then _LABEL_='1';
33862     +
33863     +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then
33864     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then _LABEL_='0';
33865     +else
33866     +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then
33867     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then _LABEL_='1';
33868     +
33869     +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then
33870     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then _LABEL_='0';
33871     +else
33872     +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then
33873     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then _LABEL_='1';
33874     +
33875     +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then
33876     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then _LABEL_='0';
33877     +else
33878     +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then
33879     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then _LABEL_='1';
33880     +
33881     +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
33882     +_LABEL_='AcceptedCmpTotal< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='AcceptedCmpTotal< 0';
33883     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
33884     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33885     +else
33886     +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
33887     +_LABEL_='0<= AcceptedCmpTotal< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= AcceptedCmpTotal< 1';
33888     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
33889     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33890     +else
33891     +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 4 then do;
33892     +_LABEL_='1<= AcceptedCmpTotal';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= AcceptedCmpTotal';
33893     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
33894     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33895     +
33896     +if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
33897     +_LABEL_='Age< 31';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Age< 31';
33898     +UB=31;
MPRINT(EM_GENERATE_LABELVALUES):   UB=31;
33899     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33900     +else
33901     +if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
33902     +_LABEL_='31<= Age< 36';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='31<= Age< 36';
33903     +UB=36;
MPRINT(EM_GENERATE_LABELVALUES):   UB=36;
33904     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33905     +else
33906     +if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
33907     +_LABEL_='36<= Age< 40';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='36<= Age< 40';
33908     +UB=40;
MPRINT(EM_GENERATE_LABELVALUES):   UB=40;
33909     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33910     +else
33911     +if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
33912     +_LABEL_='40<= Age< 43';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='40<= Age< 43';
33913     +UB=43;
MPRINT(EM_GENERATE_LABELVALUES):   UB=43;
33914     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33915     +else
33916     +if DISPLAY_VAR='Age' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 6 then do;
33917     +_LABEL_='43<= Age< 46';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='43<= Age< 46';
33918     +UB=46;
MPRINT(EM_GENERATE_LABELVALUES):   UB=46;
33919     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33920     +else
33921     +if DISPLAY_VAR='Age' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 7 then do;
33922     +_LABEL_='46<= Age< 50';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='46<= Age< 50';
33923     +UB=50;
MPRINT(EM_GENERATE_LABELVALUES):   UB=50;
33924     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33925     +else
33926     +if DISPLAY_VAR='Age' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 8 then do;
33927     +_LABEL_='50<= Age< 55';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='50<= Age< 55';
33928     +UB=55;
MPRINT(EM_GENERATE_LABELVALUES):   UB=55;
33929     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33930     +else
33931     +if DISPLAY_VAR='Age' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 9 then do;
33932     +_LABEL_='55<= Age< 59';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='55<= Age< 59';
33933     +UB=59;
MPRINT(EM_GENERATE_LABELVALUES):   UB=59;
33934     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33935     +else
33936     +if DISPLAY_VAR='Age' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 10 then do;
33937     +_LABEL_='59<= Age< 64';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='59<= Age< 64';
33938     +UB=64;
MPRINT(EM_GENERATE_LABELVALUES):   UB=64;
33939     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33940     +else
33941     +if DISPLAY_VAR='Age' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 11 then do;
33942     +_LABEL_='64<= Age';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='64<= Age';
33943     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
33944     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33945     +
33946     +if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
33947     +_LABEL_='Frq< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Frq< 4';
33948     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
33949     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33950     +else
33951     +if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
33952     +_LABEL_='4<= Frq< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= Frq< 5';
33953     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
33954     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33955     +else
33956     +if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
33957     +_LABEL_='5<= Frq< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= Frq< 6';
33958     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
33959     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33960     +else
33961     +if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
33962     +_LABEL_='6<= Frq< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= Frq< 9';
33963     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
33964     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33965     +else
33966     +if DISPLAY_VAR='Frq' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 6 then do;
33967     +_LABEL_='9<= Frq< 12';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= Frq< 12';
33968     +UB=12;
MPRINT(EM_GENERATE_LABELVALUES):   UB=12;
33969     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33970     +else
33971     +if DISPLAY_VAR='Frq' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 7 then do;
33972     +_LABEL_='12<= Frq< 15';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='12<= Frq< 15';
33973     +UB=15;
MPRINT(EM_GENERATE_LABELVALUES):   UB=15;
33974     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33975     +else
33976     +if DISPLAY_VAR='Frq' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 8 then do;
33977     +_LABEL_='15<= Frq< 17';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='15<= Frq< 17';
33978     +UB=17;
MPRINT(EM_GENERATE_LABELVALUES):   UB=17;
33979     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33980     +else
33981     +if DISPLAY_VAR='Frq' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 9 then do;
33982     +_LABEL_='17<= Frq< 20';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='17<= Frq< 20';
33983     +UB=20;
MPRINT(EM_GENERATE_LABELVALUES):   UB=20;
33984     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33985     +else
33986     +if DISPLAY_VAR='Frq' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 10 then do;
33987     +_LABEL_='20<= Frq< 23';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='20<= Frq< 23';
33988     +UB=23;
MPRINT(EM_GENERATE_LABELVALUES):   UB=23;
33989     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33990     +else
33991     +if DISPLAY_VAR='Frq' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 11 then do;
33992     +_LABEL_='23<= Frq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='23<= Frq';
33993     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
33994     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
33995     +
33996     +if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
33997     +_LABEL_='Income< 23983';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Income< 23983';
33998     +UB=23983;
MPRINT(EM_GENERATE_LABELVALUES):   UB=23983;
33999     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34000     +else
34001     +if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
34002     +_LABEL_='23983<= Income< 31322';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='23983<= Income< 31322';
34003     +UB=31322;
MPRINT(EM_GENERATE_LABELVALUES):   UB=31322;
34004     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34005     +else
34006     +if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
34007     +_LABEL_='31322<= Income< 38157';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='31322<= Income< 38157';
34008     +UB=38157;
MPRINT(EM_GENERATE_LABELVALUES):   UB=38157;
34009     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34010     +else
34011     +if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
34012     +_LABEL_='38157<= Income< 44900';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='38157<= Income< 44900';
34013     +UB=44900;
MPRINT(EM_GENERATE_LABELVALUES):   UB=44900;
34014     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34015     +else
34016     +if DISPLAY_VAR='Income' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 6 then do;
34017     +_LABEL_='44900<= Income< 52157';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='44900<= Income< 52157';
34018     +UB=52157;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52157;
34019     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34020     +else
34021     +if DISPLAY_VAR='Income' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 7 then do;
34022     +_LABEL_='52157<= Income< 59111';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52157<= Income< 59111';
34023     +UB=59111;
MPRINT(EM_GENERATE_LABELVALUES):   UB=59111;
34024     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34025     +else
34026     +if DISPLAY_VAR='Income' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 8 then do;
34027     +_LABEL_='59111<= Income< 65808';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='59111<= Income< 65808';
34028     +UB=65808;
MPRINT(EM_GENERATE_LABELVALUES):   UB=65808;
34029     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34030     +else
34031     +if DISPLAY_VAR='Income' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 9 then do;
34032     +_LABEL_='65808<= Income< 72025';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='65808<= Income< 72025';
34033     +UB=72025;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72025;
34034     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34035     +else
34036     +if DISPLAY_VAR='Income' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 10 then do;
34037     +_LABEL_='72025<= Income< 79470';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72025<= Income< 79470';
34038     +UB=79470;
MPRINT(EM_GENERATE_LABELVALUES):   UB=79470;
34039     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34040     +else
34041     +if DISPLAY_VAR='Income' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 11 then do;
34042     +_LABEL_='79470<= Income';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='79470<= Income';
34043     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34044     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34045     +
34046     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
34047     +_LABEL_='Kidhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Kidhome< 0';
34048     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
34049     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34050     +else
34051     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
34052     +_LABEL_='0<= Kidhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Kidhome< 1';
34053     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34054     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34055     +else
34056     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
34057     +_LABEL_='1<= Kidhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Kidhome';
34058     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34059     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34060     +
34061     +if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
34062     +_LABEL_='Mnt< 34';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Mnt< 34';
34063     +UB=34;
MPRINT(EM_GENERATE_LABELVALUES):   UB=34;
34064     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34065     +else
34066     +if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
34067     +_LABEL_='34<= Mnt< 57';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='34<= Mnt< 57';
34068     +UB=57;
MPRINT(EM_GENERATE_LABELVALUES):   UB=57;
34069     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34070     +else
34071     +if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
34072     +_LABEL_='57<= Mnt< 94';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='57<= Mnt< 94';
34073     +UB=94;
MPRINT(EM_GENERATE_LABELVALUES):   UB=94;
34074     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34075     +else
34076     +if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
34077     +_LABEL_='94<= Mnt< 219';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='94<= Mnt< 219';
34078     +UB=219;
MPRINT(EM_GENERATE_LABELVALUES):   UB=219;
34079     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34080     +else
34081     +if DISPLAY_VAR='Mnt' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 6 then do;
34082     +_LABEL_='219<= Mnt< 405.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='219<= Mnt< 405.5';
34083     +UB=405.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=405.5;
34084     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34085     +else
34086     +if DISPLAY_VAR='Mnt' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 7 then do;
34087     +_LABEL_='405.5<= Mnt< 650';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='405.5<= Mnt< 650';
34088     +UB=650;
MPRINT(EM_GENERATE_LABELVALUES):   UB=650;
34089     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34090     +else
34091     +if DISPLAY_VAR='Mnt' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 8 then do;
34092     +_LABEL_='650<= Mnt< 906';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='650<= Mnt< 906';
34093     +UB=906;
MPRINT(EM_GENERATE_LABELVALUES):   UB=906;
34094     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34095     +else
34096     +if DISPLAY_VAR='Mnt' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 9 then do;
34097     +_LABEL_='906<= Mnt< 1215';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='906<= Mnt< 1215';
34098     +UB=1215;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1215;
34099     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34100     +else
34101     +if DISPLAY_VAR='Mnt' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 10 then do;
34102     +_LABEL_='1215<= Mnt< 1526';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1215<= Mnt< 1526';
34103     +UB=1526;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1526;
34104     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34105     +else
34106     +if DISPLAY_VAR='Mnt' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 11 then do;
34107     +_LABEL_='1526<= Mnt';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1526<= Mnt';
34108     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34109     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34110     +
34111     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
34112     +_LABEL_='MntFishProducts< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFishProducts< 0';
34113     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
34114     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34115     +else
34116     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
34117     +_LABEL_='0<= MntFishProducts< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= MntFishProducts< 2';
34118     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
34119     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34120     +else
34121     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
34122     +_LABEL_='2<= MntFishProducts< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= MntFishProducts< 4';
34123     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
34124     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34125     +else
34126     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
34127     +_LABEL_='4<= MntFishProducts< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= MntFishProducts< 7';
34128     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
34129     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34130     +else
34131     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 6 then do;
34132     +_LABEL_='7<= MntFishProducts< 13';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= MntFishProducts< 13';
34133     +UB=13;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13;
34134     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34135     +else
34136     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 7 then do;
34137     +_LABEL_='13<= MntFishProducts< 23';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13<= MntFishProducts< 23';
34138     +UB=23;
MPRINT(EM_GENERATE_LABELVALUES):   UB=23;
34139     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34140     +else
34141     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 8 then do;
34142     +_LABEL_='23<= MntFishProducts< 37';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='23<= MntFishProducts< 37';
34143     +UB=37;
MPRINT(EM_GENERATE_LABELVALUES):   UB=37;
34144     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34145     +else
34146     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 9 then do;
34147     +_LABEL_='37<= MntFishProducts< 62';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='37<= MntFishProducts< 62';
34148     +UB=62;
MPRINT(EM_GENERATE_LABELVALUES):   UB=62;
34149     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34150     +else
34151     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 10 then do;
34152     +_LABEL_='62<= MntFishProducts< 116';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='62<= MntFishProducts< 116';
34153     +UB=116;
MPRINT(EM_GENERATE_LABELVALUES):   UB=116;
34154     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34155     +else
34156     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 11 then do;
34157     +_LABEL_='116<= MntFishProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='116<= MntFishProducts';
34158     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34159     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34160     +
34161     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
34162     +_LABEL_='MntFruits< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFruits< 0';
34163     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
34164     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34165     +else
34166     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
34167     +_LABEL_='0<= MntFruits< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= MntFruits< 1';
34168     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34169     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34170     +else
34171     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
34172     +_LABEL_='1<= MntFruits< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= MntFruits< 3';
34173     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34174     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34175     +else
34176     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
34177     +_LABEL_='3<= MntFruits< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= MntFruits< 5';
34178     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34179     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34180     +else
34181     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 6 then do;
34182     +_LABEL_='5<= MntFruits< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= MntFruits< 9';
34183     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
34184     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34185     +else
34186     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 7 then do;
34187     +_LABEL_='9<= MntFruits< 16';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntFruits< 16';
34188     +UB=16;
MPRINT(EM_GENERATE_LABELVALUES):   UB=16;
34189     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34190     +else
34191     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 8 then do;
34192     +_LABEL_='16<= MntFruits< 27';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='16<= MntFruits< 27';
34193     +UB=27;
MPRINT(EM_GENERATE_LABELVALUES):   UB=27;
34194     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34195     +else
34196     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 9 then do;
34197     +_LABEL_='27<= MntFruits< 44';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='27<= MntFruits< 44';
34198     +UB=44;
MPRINT(EM_GENERATE_LABELVALUES):   UB=44;
34199     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34200     +else
34201     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 10 then do;
34202     +_LABEL_='44<= MntFruits< 84';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='44<= MntFruits< 84';
34203     +UB=84;
MPRINT(EM_GENERATE_LABELVALUES):   UB=84;
34204     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34205     +else
34206     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 11 then do;
34207     +_LABEL_='84<= MntFruits';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='84<= MntFruits';
34208     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34209     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34210     +
34211     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
34212     +_LABEL_='MntGoldProds< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntGoldProds< 3';
34213     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34214     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34215     +else
34216     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
34217     +_LABEL_='3<= MntGoldProds< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= MntGoldProds< 7';
34218     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
34219     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34220     +else
34221     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
34222     +_LABEL_='7<= MntGoldProds< 12';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= MntGoldProds< 12';
34223     +UB=12;
MPRINT(EM_GENERATE_LABELVALUES):   UB=12;
34224     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34225     +else
34226     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
34227     +_LABEL_='12<= MntGoldProds< 17';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='12<= MntGoldProds< 17';
34228     +UB=17;
MPRINT(EM_GENERATE_LABELVALUES):   UB=17;
34229     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34230     +else
34231     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 6 then do;
34232     +_LABEL_='17<= MntGoldProds< 25';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='17<= MntGoldProds< 25';
34233     +UB=25;
MPRINT(EM_GENERATE_LABELVALUES):   UB=25;
34234     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34235     +else
34236     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 7 then do;
34237     +_LABEL_='25<= MntGoldProds< 34';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='25<= MntGoldProds< 34';
34238     +UB=34;
MPRINT(EM_GENERATE_LABELVALUES):   UB=34;
34239     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34240     +else
34241     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 8 then do;
34242     +_LABEL_='34<= MntGoldProds< 48';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='34<= MntGoldProds< 48';
34243     +UB=48;
MPRINT(EM_GENERATE_LABELVALUES):   UB=48;
34244     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34245     +else
34246     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 9 then do;
34247     +_LABEL_='48<= MntGoldProds< 74';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='48<= MntGoldProds< 74';
34248     +UB=74;
MPRINT(EM_GENERATE_LABELVALUES):   UB=74;
34249     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34250     +else
34251     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 10 then do;
34252     +_LABEL_='74<= MntGoldProds< 116';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='74<= MntGoldProds< 116';
34253     +UB=116;
MPRINT(EM_GENERATE_LABELVALUES):   UB=116;
34254     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34255     +else
34256     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 11 then do;
34257     +_LABEL_='116<= MntGoldProds';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='116<= MntGoldProds';
34258     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34259     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34260     +
34261     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
34262     +_LABEL_='MntMeatProducts< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntMeatProducts< 7';
34263     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
34264     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34265     +else
34266     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
34267     +_LABEL_='7<= MntMeatProducts< 12';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= MntMeatProducts< 12';
34268     +UB=12;
MPRINT(EM_GENERATE_LABELVALUES):   UB=12;
34269     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34270     +else
34271     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
34272     +_LABEL_='12<= MntMeatProducts< 21';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='12<= MntMeatProducts< 21';
34273     +UB=21;
MPRINT(EM_GENERATE_LABELVALUES):   UB=21;
34274     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34275     +else
34276     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
34277     +_LABEL_='21<= MntMeatProducts< 38';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='21<= MntMeatProducts< 38';
34278     +UB=38;
MPRINT(EM_GENERATE_LABELVALUES):   UB=38;
34279     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34280     +else
34281     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 6 then do;
34282     +_LABEL_='38<= MntMeatProducts< 72';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='38<= MntMeatProducts< 72';
34283     +UB=72;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72;
34284     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34285     +else
34286     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 7 then do;
34287     +_LABEL_='72<= MntMeatProducts< 116';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72<= MntMeatProducts< 116';
34288     +UB=116;
MPRINT(EM_GENERATE_LABELVALUES):   UB=116;
34289     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34290     +else
34291     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 8 then do;
34292     +_LABEL_='116<= MntMeatProducts< 186';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='116<= MntMeatProducts< 186';
34293     +UB=186;
MPRINT(EM_GENERATE_LABELVALUES):   UB=186;
34294     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34295     +else
34296     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 9 then do;
34297     +_LABEL_='186<= MntMeatProducts< 309';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='186<= MntMeatProducts< 309';
34298     +UB=309;
MPRINT(EM_GENERATE_LABELVALUES):   UB=309;
34299     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34300     +else
34301     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 10 then do;
34302     +_LABEL_='309<= MntMeatProducts< 518';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='309<= MntMeatProducts< 518';
34303     +UB=518;
MPRINT(EM_GENERATE_LABELVALUES):   UB=518;
34304     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34305     +else
34306     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 11 then do;
34307     +_LABEL_='518<= MntMeatProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='518<= MntMeatProducts';
34308     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34309     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34310     +
34311     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
34312     +_LABEL_='MntSweetProducts< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntSweetProducts< 0';
34313     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
34314     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34315     +else
34316     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
34317     +_LABEL_='0<= MntSweetProducts< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= MntSweetProducts< 1';
34318     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34319     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34320     +else
34321     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
34322     +_LABEL_='1<= MntSweetProducts< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= MntSweetProducts< 3';
34323     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34324     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34325     +else
34326     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
34327     +_LABEL_='3<= MntSweetProducts< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= MntSweetProducts< 5';
34328     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34329     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34330     +else
34331     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 6 then do;
34332     +_LABEL_='5<= MntSweetProducts< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= MntSweetProducts< 9';
34333     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
34334     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34335     +else
34336     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 7 then do;
34337     +_LABEL_='9<= MntSweetProducts< 16';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntSweetProducts< 16';
34338     +UB=16;
MPRINT(EM_GENERATE_LABELVALUES):   UB=16;
34339     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34340     +else
34341     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 8 then do;
34342     +_LABEL_='16<= MntSweetProducts< 27';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='16<= MntSweetProducts< 27';
34343     +UB=27;
MPRINT(EM_GENERATE_LABELVALUES):   UB=27;
34344     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34345     +else
34346     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 9 then do;
34347     +_LABEL_='27<= MntSweetProducts< 46';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='27<= MntSweetProducts< 46';
34348     +UB=46;
MPRINT(EM_GENERATE_LABELVALUES):   UB=46;
34349     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34350     +else
34351     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 10 then do;
34352     +_LABEL_='46<= MntSweetProducts< 84';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='46<= MntSweetProducts< 84';
34353     +UB=84;
MPRINT(EM_GENERATE_LABELVALUES):   UB=84;
34354     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34355     +else
34356     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 11 then do;
34357     +_LABEL_='84<= MntSweetProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='84<= MntSweetProducts';
34358     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34359     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34360     +
34361     +if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
34362     +_LABEL_='MntWines< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntWines< 6';
34363     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
34364     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34365     +else
34366     +if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
34367     +_LABEL_='6<= MntWines< 16';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= MntWines< 16';
34368     +UB=16;
MPRINT(EM_GENERATE_LABELVALUES):   UB=16;
34369     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34370     +else
34371     +if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
34372     +_LABEL_='16<= MntWines< 33';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='16<= MntWines< 33';
34373     +UB=33;
MPRINT(EM_GENERATE_LABELVALUES):   UB=33;
34374     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34375     +else
34376     +if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
34377     +_LABEL_='33<= MntWines< 84';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='33<= MntWines< 84';
34378     +UB=84;
MPRINT(EM_GENERATE_LABELVALUES):   UB=84;
34379     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34380     +else
34381     +if DISPLAY_VAR='MntWines' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 6 then do;
34382     +_LABEL_='84<= MntWines< 183.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='84<= MntWines< 183.5';
34383     +UB=183.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=183.5;
34384     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34385     +else
34386     +if DISPLAY_VAR='MntWines' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 7 then do;
34387     +_LABEL_='183.5<= MntWines< 298';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='183.5<= MntWines< 298';
34388     +UB=298;
MPRINT(EM_GENERATE_LABELVALUES):   UB=298;
34389     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34390     +else
34391     +if DISPLAY_VAR='MntWines' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 8 then do;
34392     +_LABEL_='298<= MntWines< 429';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='298<= MntWines< 429';
34393     +UB=429;
MPRINT(EM_GENERATE_LABELVALUES):   UB=429;
34394     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34395     +else
34396     +if DISPLAY_VAR='MntWines' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 9 then do;
34397     +_LABEL_='429<= MntWines< 602';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='429<= MntWines< 602';
34398     +UB=602;
MPRINT(EM_GENERATE_LABELVALUES):   UB=602;
34399     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34400     +else
34401     +if DISPLAY_VAR='MntWines' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 10 then do;
34402     +_LABEL_='602<= MntWines< 836';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='602<= MntWines< 836';
34403     +UB=836;
MPRINT(EM_GENERATE_LABELVALUES):   UB=836;
34404     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34405     +else
34406     +if DISPLAY_VAR='MntWines' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 11 then do;
34407     +_LABEL_='836<= MntWines';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='836<= MntWines';
34408     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34409     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34410     +
34411     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
34412     +_LABEL_='MonthsAsCustomer< 61';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MonthsAsCustomer< 61';
34413     +UB=61;
MPRINT(EM_GENERATE_LABELVALUES):   UB=61;
34414     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34415     +else
34416     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
34417     +_LABEL_='61<= MonthsAsCustomer< 67';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='61<= MonthsAsCustomer< 67';
34418     +UB=67;
MPRINT(EM_GENERATE_LABELVALUES):   UB=67;
34419     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34420     +else
34421     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
34422     +_LABEL_='67<= MonthsAsCustomer< 73';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='67<= MonthsAsCustomer< 73';
34423     +UB=73;
MPRINT(EM_GENERATE_LABELVALUES):   UB=73;
34424     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34425     +else
34426     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
34427     +_LABEL_='73<= MonthsAsCustomer< 78';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='73<= MonthsAsCustomer< 78';
34428     +UB=78;
MPRINT(EM_GENERATE_LABELVALUES):   UB=78;
34429     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34430     +else
34431     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 6 then do;
34432     +_LABEL_='78<= MonthsAsCustomer< 84';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='78<= MonthsAsCustomer< 84';
34433     +UB=84;
MPRINT(EM_GENERATE_LABELVALUES):   UB=84;
34434     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34435     +else
34436     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 7 then do;
34437     +_LABEL_='84<= MonthsAsCustomer< 89';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='84<= MonthsAsCustomer< 89';
34438     +UB=89;
MPRINT(EM_GENERATE_LABELVALUES):   UB=89;
34439     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34440     +else
34441     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 8 then do;
34442     +_LABEL_='89<= MonthsAsCustomer< 96';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='89<= MonthsAsCustomer< 96';
34443     +UB=96;
MPRINT(EM_GENERATE_LABELVALUES):   UB=96;
34444     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34445     +else
34446     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 9 then do;
34447     +_LABEL_='96<= MonthsAsCustomer< 102';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='96<= MonthsAsCustomer< 102';
34448     +UB=102;
MPRINT(EM_GENERATE_LABELVALUES):   UB=102;
34449     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34450     +else
34451     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 10 then do;
34452     +_LABEL_='102<= MonthsAsCustomer< 108';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='102<= MonthsAsCustomer< 108';
34453     +UB=108;
MPRINT(EM_GENERATE_LABELVALUES):   UB=108;
34454     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34455     +else
34456     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 11 then do;
34457     +_LABEL_='108<= MonthsAsCustomer';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='108<= MonthsAsCustomer';
34458     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34459     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34460     +
34461     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
34462     +_LABEL_='NumCatalogPurchases< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumCatalogPurchases< 0';
34463     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
34464     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34465     +else
34466     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
34467     +_LABEL_='0<= NumCatalogPurchases< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= NumCatalogPurchases< 1';
34468     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34469     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34470     +else
34471     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
34472     +_LABEL_='1<= NumCatalogPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= NumCatalogPurchases< 2';
34473     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
34474     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34475     +else
34476     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
34477     +_LABEL_='2<= NumCatalogPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumCatalogPurchases< 4';
34478     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
34479     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34480     +else
34481     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 6 then do;
34482     +_LABEL_='4<= NumCatalogPurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumCatalogPurchases< 5';
34483     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34484     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34485     +else
34486     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 7 then do;
34487     +_LABEL_='5<= NumCatalogPurchases< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumCatalogPurchases< 7';
34488     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
34489     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34490     +else
34491     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 8 then do;
34492     +_LABEL_='7<= NumCatalogPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= NumCatalogPurchases';
34493     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34494     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34495     +
34496     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
34497     +_LABEL_='NumDealsPurchases< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDealsPurchases< 1';
34498     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34499     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34500     +else
34501     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
34502     +_LABEL_='1<= NumDealsPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= NumDealsPurchases< 2';
34503     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
34504     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34505     +else
34506     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
34507     +_LABEL_='2<= NumDealsPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumDealsPurchases< 3';
34508     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34509     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34510     +else
34511     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
34512     +_LABEL_='3<= NumDealsPurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDealsPurchases< 5';
34513     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34514     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34515     +else
34516     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 6 then do;
34517     +_LABEL_='5<= NumDealsPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumDealsPurchases';
34518     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34519     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34520     +
34521     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
34522     +_LABEL_='NumDistPurchases< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDistPurchases< 1';
34523     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34524     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34525     +else
34526     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
34527     +_LABEL_='1<= NumDistPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= NumDistPurchases< 2';
34528     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
34529     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34530     +else
34531     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
34532     +_LABEL_='2<= NumDistPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumDistPurchases< 3';
34533     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34534     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34535     +else
34536     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
34537     +_LABEL_='3<= NumDistPurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDistPurchases< 5';
34538     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34539     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34540     +else
34541     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 6 then do;
34542     +_LABEL_='5<= NumDistPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumDistPurchases< 6';
34543     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
34544     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34545     +else
34546     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 7 then do;
34547     +_LABEL_='6<= NumDistPurchases< 8';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumDistPurchases< 8';
34548     +UB=8;
MPRINT(EM_GENERATE_LABELVALUES):   UB=8;
34549     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34550     +else
34551     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 8 then do;
34552     +_LABEL_='8<= NumDistPurchases< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='8<= NumDistPurchases< 9';
34553     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
34554     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34555     +else
34556     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 9 then do;
34557     +_LABEL_='9<= NumDistPurchases< 11';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= NumDistPurchases< 11';
34558     +UB=11;
MPRINT(EM_GENERATE_LABELVALUES):   UB=11;
34559     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34560     +else
34561     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 10 then do;
34562     +_LABEL_='11<= NumDistPurchases< 13';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='11<= NumDistPurchases< 13';
34563     +UB=13;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13;
34564     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34565     +else
34566     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 11 then do;
34567     +_LABEL_='13<= NumDistPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13<= NumDistPurchases';
34568     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34569     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34570     +
34571     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
34572     +_LABEL_='NumStorePurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumStorePurchases< 3';
34573     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34574     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34575     +else
34576     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
34577     +_LABEL_='3<= NumStorePurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumStorePurchases< 4';
34578     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
34579     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34580     +else
34581     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
34582     +_LABEL_='4<= NumStorePurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumStorePurchases< 5';
34583     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34584     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34585     +else
34586     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
34587     +_LABEL_='5<= NumStorePurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumStorePurchases< 6';
34588     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
34589     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34590     +else
34591     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 6 then do;
34592     +_LABEL_='6<= NumStorePurchases< 8';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumStorePurchases< 8';
34593     +UB=8;
MPRINT(EM_GENERATE_LABELVALUES):   UB=8;
34594     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34595     +else
34596     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 7 then do;
34597     +_LABEL_='8<= NumStorePurchases< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='8<= NumStorePurchases< 9';
34598     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
34599     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34600     +else
34601     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 8 then do;
34602     +_LABEL_='9<= NumStorePurchases< 11';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= NumStorePurchases< 11';
34603     +UB=11;
MPRINT(EM_GENERATE_LABELVALUES):   UB=11;
34604     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34605     +else
34606     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 9 then do;
34607     +_LABEL_='11<= NumStorePurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='11<= NumStorePurchases';
34608     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34609     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34610     +
34611     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
34612     +_LABEL_='NumWebPurchases< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebPurchases< 1';
34613     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34614     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34615     +else
34616     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
34617     +_LABEL_='1<= NumWebPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= NumWebPurchases< 2';
34618     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
34619     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34620     +else
34621     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
34622     +_LABEL_='2<= NumWebPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumWebPurchases< 3';
34623     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34624     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34625     +else
34626     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
34627     +_LABEL_='3<= NumWebPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumWebPurchases< 4';
34628     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
34629     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34630     +else
34631     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 6 then do;
34632     +_LABEL_='4<= NumWebPurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumWebPurchases< 5';
34633     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34634     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34635     +else
34636     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 7 then do;
34637     +_LABEL_='5<= NumWebPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumWebPurchases< 6';
34638     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
34639     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34640     +else
34641     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 8 then do;
34642     +_LABEL_='6<= NumWebPurchases< 8';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebPurchases< 8';
34643     +UB=8;
MPRINT(EM_GENERATE_LABELVALUES):   UB=8;
34644     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34645     +else
34646     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 9 then do;
34647     +_LABEL_='8<= NumWebPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='8<= NumWebPurchases';
34648     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34649     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34650     +
34651     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
34652     +_LABEL_='NumWebVisitsMonth< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebVisitsMonth< 2';
34653     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
34654     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34655     +else
34656     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
34657     +_LABEL_='2<= NumWebVisitsMonth< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumWebVisitsMonth< 3';
34658     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34659     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34660     +else
34661     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
34662     +_LABEL_='3<= NumWebVisitsMonth< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumWebVisitsMonth< 4';
34663     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
34664     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34665     +else
34666     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
34667     +_LABEL_='4<= NumWebVisitsMonth< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumWebVisitsMonth< 5';
34668     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
34669     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34670     +else
34671     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 6 then do;
34672     +_LABEL_='5<= NumWebVisitsMonth< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumWebVisitsMonth< 6';
34673     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
34674     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34675     +else
34676     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 7 then do;
34677     +_LABEL_='6<= NumWebVisitsMonth< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebVisitsMonth< 7';
34678     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
34679     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34680     +else
34681     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 8 then do;
34682     +_LABEL_='7<= NumWebVisitsMonth< 8';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= NumWebVisitsMonth< 8';
34683     +UB=8;
MPRINT(EM_GENERATE_LABELVALUES):   UB=8;
34684     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34685     +else
34686     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 9 then do;
34687     +_LABEL_='8<= NumWebVisitsMonth';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='8<= NumWebVisitsMonth';
34688     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34689     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34690     +
34691     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
34692     +_LABEL_='RFMstat< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RFMstat< 3';
34693     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
34694     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34695     +else
34696     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
34697     +_LABEL_='3<= RFMstat< 6.88';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= RFMstat< 6.88';
34698     +UB=6.88;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6.88;
34699     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34700     +else
34701     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
34702     +_LABEL_='6.88<= RFMstat< 18.67';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6.88<= RFMstat< 18.67';
34703     +UB=18.67;
MPRINT(EM_GENERATE_LABELVALUES):   UB=18.67;
34704     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34705     +else
34706     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
34707     +_LABEL_='18.67<= RFMstat< 52.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='18.67<= RFMstat< 52.5';
34708     +UB=52.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52.5;
34709     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34710     +else
34711     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 6 then do;
34712     +_LABEL_='52.5<= RFMstat< 128.09';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52.5<= RFMstat< 128.09';
34713     +UB=128.09;
MPRINT(EM_GENERATE_LABELVALUES):   UB=128.09;
34714     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34715     +else
34716     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 7 then do;
34717     +_LABEL_='128.09<= RFMstat< 234.14';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='128.09<= RFMstat< 234.14';
34718     +UB=234.14;
MPRINT(EM_GENERATE_LABELVALUES):   UB=234.14;
34719     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34720     +else
34721     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 8 then do;
34722     +_LABEL_='234.14<= RFMstat< 369.14';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='234.14<= RFMstat< 369.14';
34723     +UB=369.14;
MPRINT(EM_GENERATE_LABELVALUES):   UB=369.14;
34724     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34725     +else
34726     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 9 then do;
34727     +_LABEL_='369.14<= RFMstat< 571.29';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='369.14<= RFMstat< 571.29';
34728     +UB=571.29;
MPRINT(EM_GENERATE_LABELVALUES):   UB=571.29;
34729     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34730     +else
34731     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 10 then do;
34732     +_LABEL_='571.29<= RFMstat< 1073.68';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='571.29<= RFMstat< 1073.68';
34733     +UB=1073.68;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1073.68;
34734     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34735     +else
34736     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 11 then do;
34737     +_LABEL_='1073.68<= RFMstat';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1073.68<= RFMstat';
34738     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34739     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34740     +
34741     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
34742     +_LABEL_='RMntFrq< 7.83';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RMntFrq< 7.83';
34743     +UB=7.83;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7.83;
34744     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34745     +else
34746     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
34747     +_LABEL_='7.83<= RMntFrq< 11';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7.83<= RMntFrq< 11';
34748     +UB=11;
MPRINT(EM_GENERATE_LABELVALUES):   UB=11;
34749     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34750     +else
34751     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
34752     +_LABEL_='11<= RMntFrq< 15.83';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='11<= RMntFrq< 15.83';
34753     +UB=15.83;
MPRINT(EM_GENERATE_LABELVALUES):   UB=15.83;
34754     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34755     +else
34756     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
34757     +_LABEL_='15.83<= RMntFrq< 23.77';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='15.83<= RMntFrq< 23.77';
34758     +UB=23.77;
MPRINT(EM_GENERATE_LABELVALUES):   UB=23.77;
34759     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34760     +else
34761     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 6 then do;
34762     +_LABEL_='23.77<= RMntFrq< 30.4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='23.77<= RMntFrq< 30.4';
34763     +UB=30.4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=30.4;
34764     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34765     +else
34766     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 7 then do;
34767     +_LABEL_='30.4<= RMntFrq< 36.55';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='30.4<= RMntFrq< 36.55';
34768     +UB=36.55;
MPRINT(EM_GENERATE_LABELVALUES):   UB=36.55;
34769     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34770     +else
34771     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 8 then do;
34772     +_LABEL_='36.55<= RMntFrq< 43.06';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='36.55<= RMntFrq< 43.06';
34773     +UB=43.06;
MPRINT(EM_GENERATE_LABELVALUES):   UB=43.06;
34774     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34775     +else
34776     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 9 then do;
34777     +_LABEL_='43.06<= RMntFrq< 68.73';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='43.06<= RMntFrq< 68.73';
34778     +UB=68.73;
MPRINT(EM_GENERATE_LABELVALUES):   UB=68.73;
34779     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34780     +else
34781     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 10 then do;
34782     +_LABEL_='68.73<= RMntFrq< 75.83';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='68.73<= RMntFrq< 75.83';
34783     +UB=75.83;
MPRINT(EM_GENERATE_LABELVALUES):   UB=75.83;
34784     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34785     +else
34786     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 11 then do;
34787     +_LABEL_='75.83<= RMntFrq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='75.83<= RMntFrq';
34788     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34789     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34790     +
34791     +if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
34792     +_LABEL_='Recency< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Recency< 9';
34793     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
34794     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34795     +else
34796     +if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
34797     +_LABEL_='9<= Recency< 19';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= Recency< 19';
34798     +UB=19;
MPRINT(EM_GENERATE_LABELVALUES):   UB=19;
34799     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34800     +else
34801     +if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
34802     +_LABEL_='19<= Recency< 29';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='19<= Recency< 29';
34803     +UB=29;
MPRINT(EM_GENERATE_LABELVALUES):   UB=29;
34804     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34805     +else
34806     +if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
34807     +_LABEL_='29<= Recency< 38';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='29<= Recency< 38';
34808     +UB=38;
MPRINT(EM_GENERATE_LABELVALUES):   UB=38;
34809     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34810     +else
34811     +if DISPLAY_VAR='Recency' and _GROUP_ = 6 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 6 then do;
34812     +_LABEL_='38<= Recency< 48';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='38<= Recency< 48';
34813     +UB=48;
MPRINT(EM_GENERATE_LABELVALUES):   UB=48;
34814     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34815     +else
34816     +if DISPLAY_VAR='Recency' and _GROUP_ = 7 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 7 then do;
34817     +_LABEL_='48<= Recency< 58';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='48<= Recency< 58';
34818     +UB=58;
MPRINT(EM_GENERATE_LABELVALUES):   UB=58;
34819     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34820     +else
34821     +if DISPLAY_VAR='Recency' and _GROUP_ = 8 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 8 then do;
34822     +_LABEL_='58<= Recency< 68';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='58<= Recency< 68';
34823     +UB=68;
MPRINT(EM_GENERATE_LABELVALUES):   UB=68;
34824     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34825     +else
34826     +if DISPLAY_VAR='Recency' and _GROUP_ = 9 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 9 then do;
34827     +_LABEL_='68<= Recency< 79';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='68<= Recency< 79';
34828     +UB=79;
MPRINT(EM_GENERATE_LABELVALUES):   UB=79;
34829     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34830     +else
34831     +if DISPLAY_VAR='Recency' and _GROUP_ = 10 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 10 then do;
34832     +_LABEL_='79<= Recency< 90';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='79<= Recency< 90';
34833     +UB=90;
MPRINT(EM_GENERATE_LABELVALUES):   UB=90;
34834     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34835     +else
34836     +if DISPLAY_VAR='Recency' and _GROUP_ = 11 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 11 then do;
34837     +_LABEL_='90<= Recency';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='90<= Recency';
34838     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34839     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34840     +
34841     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
34842     +_LABEL_='Teenhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Teenhome< 0';
34843     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
34844     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34845     +else
34846     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
34847     +_LABEL_='0<= Teenhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Teenhome< 1';
34848     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
34849     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34850     +else
34851     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
34852     +_LABEL_='1<= Teenhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Teenhome';
34853     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
34854     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
34855     +
34856     +if DISPLAY_VAR='Complain' and _GROUP_ = 2 then
34857     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Complain' and _GROUP_ = 2 then _LABEL_='0';
34858     +else
34859     +if DISPLAY_VAR='Complain' and _GROUP_ = 3 then
34860     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Complain' and _GROUP_ = 3 then _LABEL_='1';
34861     +
34862     +if DISPLAY_VAR='Education' and _GROUP_ = 2 then
34863     +_LABEL_='GRADUATION';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Education' and _GROUP_ = 2 then _LABEL_='GRADUATION';
34864     +else
34865     +if DISPLAY_VAR='Education' and _GROUP_ = 3 then
34866     +_LABEL_='PHD';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 3 then _LABEL_='PHD';
34867     +else
34868     +if DISPLAY_VAR='Education' and _GROUP_ = 4 then
34869     +_LABEL_='MASTER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 4 then _LABEL_='MASTER';
34870     +else
34871     +if DISPLAY_VAR='Education' and _GROUP_ = 5 then
34872     +_LABEL_='2N CYCLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 5 then _LABEL_='2N CYCLE';
34873     +else
34874     +if DISPLAY_VAR='Education' and _GROUP_ = 6 then
34875     +_LABEL_='BASIC';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 6 then _LABEL_='BASIC';
34876     +
34877     +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then
34878     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then _LABEL_='1';
34879     +else
34880     +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then
34881     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then _LABEL_='0';
34882     +
34883     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then
34884     +_LABEL_='MARRIED';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then _LABEL_='MARRIED';
34885     +else
34886     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then
34887     +_LABEL_='TOGETHER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then _LABEL_='TOGETHER';
34888     +else
34889     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then
34890     +_LABEL_='SINGLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then _LABEL_='SINGLE';
34891     +else
34892     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then
34893     +_LABEL_='DIVORCED';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then _LABEL_='DIVORCED';
34894     +else
34895     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then
34896     +_LABEL_='WIDOW';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then _LABEL_='WIDOW';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 251 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   *filename Y;
MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp1" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp2" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp3" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp4" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp5" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmpTotal" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Age" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Complain" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Education" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Frq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "HigherEducationBinary" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Income" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Kidhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Marital_Status" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Mnt" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFishProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFruits" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntGoldProds" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntMeatProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntSweetProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntWines" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MonthsAsCustomer" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumCatalogPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDealsPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDistPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumStorePurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebVisitsMonth" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RFMstat" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RMntFrq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Recency" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Teenhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 251 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 251 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_LABELVALUES):   delete class temp temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
MPRINT(EM_GENERATE_LABELVALUES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATESTAT";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06917051508518;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34897      
34898      *------------------------------------------------------------*;
34899      * End TRAIN: BINNING;
34900      *------------------------------------------------------------*;

34901      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34902      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
34903      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34904      ;
MPRINT(EM_DIAGRAM):   ;
34905      ;
MPRINT(EM_DIAGRAM):   ;
34906      ;
MPRINT(EM_DIAGRAM):   ;
34907      ;
MPRINT(EM_DIAGRAM):   ;
34908      quit;
MPRINT(EM_DIAGRAM):   quit;
34909      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34910      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
34911      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34912      /*; *"; *'; */
34913      ;
MPRINT(EM_DIAGRAM):   ;
34914      run;
MPRINT(EM_DIAGRAM):   run;
34915      quit;
MPRINT(EM_DIAGRAM):   quit;
34916      /* Reset EM Options */
34917      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
34918      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
34919      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
34920      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
34921      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
34922      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
