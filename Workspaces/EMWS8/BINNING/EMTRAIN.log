MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                19. April 2016
Time:                12.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0LUW4YS "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0LUW4YS new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.26 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.26 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
52348      proc freq data=EMWS8.BINNING_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.BINNING_VariableSet noprint;
52349      table ROLE*LEVEL/out=WORK.BINNINGMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BINNINGMETA;
52350      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.BINNINGMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

52351      proc print data=WORK.BINNINGMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BINNINGMETA label noobs;
52352      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
52353      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
52354      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52355      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
52356      run;

NOTE: There were 6 observations read from the data set WORK.BINNINGMETA.
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

52357      title10;
MPRINT(EM_DIAGRAM):   title10;
52358      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52728      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
52729      * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
52730      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
52731      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

52732      %let EMEXCEPTIONSTRING=;
52733      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
52734      * TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   * TRAIN: BINNING;
52735      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52736      %let EM_ACTION = TRAIN;
52737      %let syscc = 0;
52738      %macro main;
52739      
52740        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
52741        %include temp;
52742        filename temp;
52743      
52744        %setProperties;
52745      
52746        %if %upcase(&EM_ACTION) = CREATE %then %do;
52747          filename temp catalog 'sashelp.emmdfy.binning_create.source';
52748          %include temp;
52749          filename temp;
52750      
52751          %create;
52752        %end;
52753      
52754         %else
52755         %if %upcase(&EM_ACTION) = TRAIN %then %do;
52756      
52757             filename temp catalog 'sashelp.emmdfy.binning_train.source';
52758             %include temp;
52759             filename temp;
52760             %train;
52761         %end;
52762      
52763        %else
52764        %if %upcase(&EM_ACTION) = SCORE %then %do;
52765          filename temp catalog 'sashelp.emmdfy.binning_score.source';
52766          %include temp;
52767          filename temp;
52768      
52769          %score;
52770      
52771        %end;
52772      
52773        %else
52774        %if %upcase(&EM_ACTION) = REPORT %then %do;
52775      
52776             filename temp catalog 'sashelp.emmdfy.binning_report.source';
52777             %include temp;
52778             filename temp;
52779      
52780             %report;
52781         %end;
52782      
52783         %doendm:
52784      %mend main;
52785      
52786      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
52788     +%macro SetProperties;
52790     +     /* IGN options */
52791     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
52792     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
52793     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
52795     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
52796     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
52797     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
52798     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
52799     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
52800     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
52801     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
52802     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
52803     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
52804     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
52805     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
52806     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
52807     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
52808     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
52811     +%mend SetProperties;
52812     +%macro appendfiles(fileref1, fileref2);
52813     +     data _null_;
52814     +       length c $256;
52815     +       fid1=fopen("&fileref1",'A');
52816     +       fid2=fopen("&fileref2",'I');
52817     +       cval = finfo(fid2,'lrecl');
52818     +       put cval= fid1= fid2=;
52819     +       if (fid2 > 0) then
52820     +         do while(fread(fid2)=0);
52821     +           rc = fget(fid2,c,256);
52822     +           _msg_=sysmsg();
52823     +           /* put rc= c= _msg_=; */
52824     +           rc = fput(fid1,strip(c));
52825     +           rc = fwrite(fid1);
52826     +         end;
52827     +         _msg_=sysmsg();
52828     +         put _msg_=;
52829     +       rc = fclose(fid1);
52830     +       rc = fclose(fid2);
52831     +     run;
52832     +%mend appendfiles;
52834     +%macro buildOptScoreCode;
52836     +    %em_register(key=BINCODE, type=FOLDER);
52838     +    filename x catalog 'sashelp.emutil.em_deldir.source';
52839     +    %inc x;
52840     +    filename x;
52841     +    %delDir(folder=%nrbquote(&em_user_bincode));
52843     +    data _null_; length rc $200;
52844     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
52845     +    run;
52847     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
52849     +    %let dsid = %sysfunc(open(class_nosv));
52850     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
52851     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
52853     +    %let oldname=;
52854     +    %do %while(^%sysfunc(fetch(&dsid)));
52855     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
52856     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
52858     +        %if &name ne &oldname %then %do;
52859     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
52860     +             data _null_;
52861     +                length string $200 flag endflag 8;
52862     +                retain string flag endflag;
52863     +                set class_nosv end=eof;
52864     +                where DISPLAY_VAR ="&name";
52865     +                by _variable_ _group_;
52866     +                file _F1;
52867     +                index = kindex(_variable_, "BIN_");
52868     +                if index gt 0 then do;
52869     +                   if first._variable_ then do;
52870     +                      put ' ';
52871     +                      put "&EM_CODEBAR;";
52872     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
52873     +                      put string;
52874     +                      put "&EM_CODEBAR;";
52876     +                      if origLabel ne "" then do;
52877     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
52878     +                            put string;
52879     +                            string = tranwrd(origLabel,"'","''");
52880     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
52881     +                            put string;
52882     +                      end;
52883     +                      else do;
52884     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
52885     +                             put string;
52886     +                      end;
52888     +                      put ' ';
52890     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
52891     +                      put string;
52892     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
52893     +                      put string;
52894     +                      put "end;";
52895     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
52896     +                      put string;
52897     +                   end;
52898     +                   if first._group_ then do;
52899     +                      flag = 0;
52900     +                      endflag = 1;
52901     +                      if ^first._variable_ then do;
52902     +                         put "else";
52903     +                      end;
52904     +                      if LB ne . then do;
52905     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
52906     +                      end;
52907     +                      else do;
52908     +                         flag = 1;
52909     +                         string = "if";
52910     +                      end;
52911     +                   end;
52912     +                   if last._Group_ then do;
52913     +                      if UB ne . then do;
52914     +                        if flag ne 1 then do;
52915     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
52916     +                        end;
52917     +                        else do;
52918     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
52919     +                        end;
52920     +                      end;
52921     +                      else do;
52922     +                         if flag=1 then do;
52923     +                            string = strip(DISPLAY_VAR) ;
52924     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
52925     +                            endflag=0;
52926     +                            string="";
52927     +                         end;
52928     +                         else do;
52929     +                            string = strip(string)!!" then do;";
52930     +                         end;
52931     +                      end;
52932     +                      put string;
52933     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
52934     +                      put string;
52935     +                      if endflag eq 1 then do;
52936     +                        put "end;";
52937     +                      end;
52938     +                   end;
52939     +                   if last._variable_ then do;
52940     +                     string = "end;";
52941     +                     put string;
52942     +                   end;
52944     +                end;
52945     +                else do;
52946     +                   _split_value_ = tranwrd(_split_value_,"'","''");
52947     +                   if first._group_ then do;
52948     +                      flag=0;
52949     +                      if ^first._variable_ then
52950     +                         put 'else';
52951     +                      else do;
52952     +                         put ' ';
52953     +                         put "&EM_CODEBAR;";
52954     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
52955     +                         put string;
52956     +                         put "&EM_CODEBAR;";
52958     +                         if origLabel ne "" then do;
52959     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
52960     +                               put string;
52961     +                               string = tranwrd(origLabel,"'","''");
52962     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
52963     +                               put string;
52964     +                         end;
52965     +                         else do;
52966     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
52967     +                               put string;
52968     +                         end;
52970     +                         put ' ';
52972     +                         if format ne '' then do;
52973     +                            if first._variable_ then do;
52974     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
52975     +                               put string;
52976     +                               string = '%dmnormip(_UFormat);';
52977     +                               put string;
52979     +                               string ="if MISSING(_UFORMAT) then do;";
52980     +                               put string;
52981     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
52982     +                               put string;
52983     +                               put "end;";
52985     +                               string="else if NOT MISSING(_UFORMAT) then do;";
52986     +                               put string;
52988     +                            end;
52989     +                         end;
52990     +                         else do;
52991     +                            if type = 'N' then do;
52992     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
52993     +                              put string;
52994     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
52995     +                              put string;
52996     +                              put "end;";
52998     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
52999     +                              put string;
53000     +                            end;
53001     +                            else if type='C' then do;
53002     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
53003     +                              put string;
53004     +                              string = '%dmnormip(_UFormat);';
53005     +                              put string;
53007     +                              string ="if MISSING(_UFORMAT) then do;";
53008     +                              put string;
53009     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
53010     +                              put string;
53011     +                              put "end;";
53013     +                              string="else if NOT MISSING(_UFORMAT) then do;";
53014     +                              put string;
53015     +                              string = '%dmnormip(_UFormat);';
53016     +                              put string;
53017     +                           end;
53018     +                         end;
53019     +                      end;
53020     +                      if format ne '' OR type='C' then do;
53021     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
53022     +                      end;
53023     +                      else do;
53024     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
53025     +                      end;
53026     +                   end;
53027     +                   else do;
53028     +                      if flag ne 1 then do;
53029     +                       if format ne '' OR type='C' then do;
53030     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
53031     +                       end;
53032     +                       else do;
53033     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
53034     +                       end;
53035     +                         length = length(tempstring);
53037     +                         if length < 195 then do;
53038     +                            string = tempstring;
53039     +                         end;
53040     +                         else do;
53042     +                            string = strip(string);
53043     +                            put string;
53044     +                            string = ") then do;";
53045     +                            put string;
53047     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
53048     +                            put string;
53049     +                            put "end;";
53051     +                            put 'else';
53052     +                            if format ne '' OR type='C' then do;
53053     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
53054     +                            end;
53055     +                            else do;
53056     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
53057     +                            end;
53058     +                         end;
53059     +                      end;
53060     +                   end;
53062     +                   if last._group_ then do;
53063     +                      string = strip(string);
53064     +                      put string;
53066     +                      string = ") then do;";
53067     +                      put string;
53069     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
53070     +                      put string;
53071     +                      put "end;";
53072     +                   end;
53074     +                   if last._variable_ then do;
53075     +                     put "else do;";
53077     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
53078     +                     put string;
53080     +                     put "end;";
53081     +                     put "end;";
53082     +                   end;
53083     +                end;
53084     +             run;
53086     +             %let oldname = &name;
53087     +        %end;
53088     +    %end;
53089     +    %let dsid = %sysfunc(close(&dsid));
53091     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
53092     +    data _null_;
53093     +       file _F1;
53094     +       put "length _UFormat $200;";
53095     +       put "drop _UFormat;";
53096     +       put "_UFormat='';";
53097     +    run;
53098     +    filename _F1;
53100     +   %em_register(key=EMSCOREVAR, type=DATA);
53101     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
53102     +   proc datasets lib=&em_lib nolist;
53103     +      delete &scorevarDs;
53104     +   run;
53105     +   quit;
53107     +   %let filrf=mydir;
53108     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
53109     +   %let did=%sysfunc(dopen(&filrf));
53111     +   %if &did %then %do;  %PUT  did= &did;
53112     +       %let memcount=%sysfunc(dnum(&did));
53113     +       %if &memcount > 0 %then %do;
53114     +           data &em_user_emscorevar;
53115     +              length Name $32 formula $70 file $200;
53116     +              keep NAME Formula file;
53117     +              formula  = '';
53118     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
53119     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
53120     +               output;
53121     +           %end;
53122     +           %do i=1 %to &memcount;
53123     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
53124     +               %let newvar = %scan(&name, 1, .);
53125     +               %if "&newvar" ne "_ALL_" %then %do;
53126     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
53127     +                   output;
53128     +               %end;
53129     +           %end;
53131     +           run;
53132     +       %end;
53133     +       %let did = %sysfunc(dclose(&did));
53134     +  %end;
53136     +   %doendu:
53137     +%mend buildOptScoreCode;
53140     +%macro buildScoreCode(flowCode, publishCode);
53143     +  filename x "&flowCode";
53145     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
53146     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
53147     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
53149     +  data temp;
53150     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
53151     +    by display_var _Split_value_;
53152     +     if upcase(_Split_value_) ne 'MISSING';
53153     +   run;
53155     +   data temp_missing;
53156     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
53157     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
53158     +     by display_var _Split_value_;
53159     +     if upcase(_Split_value_) eq 'MISSING';
53160     +     keep _variable_ display_var missgrp;
53161     +   run;
53163     +   proc sort data=temp_missing; by display_var missgrp; run;
53165     +   data temp_missing;
53166     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
53167     +     by display_var missgrp;
53168     +     if ^_a then delete;
53169     +     keep _variable_ display_var missgrp ;
53170     +   run;
53172     +   data temp;
53173     +     merge temp temp_missing;
53174     +     by display_var;
53175     +     if display_Var eq '' then delete;
53176     +    run;
53178     +    /* pull in wtev values */
53179     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
53180     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
53181     +    proc sort data=temp;  by display_var _group_; run;
53183     +   data temp;
53184     +      merge temp tempcoarse(keep=display_var _group_  role) ;
53185     +      by display_var _group_;
53186     +    run;
53188     +    data temp;
53189     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
53190     +      by display_var;
53192     +      if _group_ = . then delete;
53193     +      if _variable_ = '' then delete;
53194     +    run;
53196     +    proc sort data=temp out=class;
53197     +       by _variable_ _group_ LB;
53198     +    run;
53200     +    data _null_;
53201     +      file X;
53203     +      put "length _UFormat $200;";
53204     +      put "drop _UFormat;";
53205     +      put "_UFormat='';";
53206     +    run;
53208     +    data class_nosv;
53209     +      set class;
53210     +      if upcase(role)="INPUT";
53211     +    run;
53213     +    data _null_;
53214     +       file X MOD;
53215     +       length string $200 flag endflag 8;
53216     +       retain string flag endflag;
53217     +       set class_nosv end=eof;
53218     +       by _variable_ _group_;
53220     +       index = kindex(_variable_, "BIN_");
53221     +       if index gt 0 then do;
53223     +         if first._variable_ then do;
53224     +            put ' ';
53225     +            put "&EM_CODEBAR;";
53226     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
53227     +            put string;
53228     +            put "&EM_CODEBAR;";
53231     +            if origLabel ne "" then do;
53232     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
53233     +              put string;
53234     +              string = tranwrd(origLabel,"'","''");
53235     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
53236     +              put string;
53237     +            end;
53238     +            else do;
53239     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
53240     +             put string;
53241     +            end;
53243     +            put ' ';
53245     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
53246     +            put string;
53247     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
53248     +            put string;
53249     +            put "end;";
53250     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
53251     +            put string;
53252     +          end;
53253     +           if first._group_ then do;
53254     +              flag = 0;
53255     +              endflag = 1;
53256     +              if ^first._variable_ then do;
53257     +                put "else";
53258     +              end;
53259     +              if LB ne . then do;
53260     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
53261     +              end;
53262     +              else do;
53263     +                 flag = 1;
53264     +                 string = "if";
53265     +              end;
53267     +           end;
53268     +           if last._Group_ then do;
53269     +              if UB ne . then do;
53270     +                if flag ne 1 then do;
53271     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
53272     +                end;
53273     +                else do;
53274     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
53275     +                end;
53276     +              end;
53277     +              else do;
53278     +                 if flag=1 then do;
53279     +                   string = strip(DISPLAY_VAR) ;
53280     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
53281     +                   endflag = 0;
53282     +                   string="";
53283     +                 end;
53284     +                 else do;
53285     +                   string = strip(string)!!" then do;";
53286     +                 end;
53287     +              end;
53288     +              put string;
53290     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
53291     +              put string;
53292     +              if endflag eq 1 then do;
53293     +                put "end;";
53294     +              end;
53295     +           end;
53296     +           if last._variable_ then do;
53297     +             string = "end;";
53298     +             put string;
53299     +           end;
53300     +       end;
53301     +       else do;
53302     +           _split_value_ = tranwrd(_split_value_,"'","''");
53303     +           if first._group_ then do;
53304     +              flag=0;
53305     +              if ^first._variable_ then
53306     +                 put 'else';
53307     +              else do;
53308     +                 put ' ';
53309     +                 put "&EM_CODEBAR;";
53310     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
53311     +                 put string;
53312     +                 put "&EM_CODEBAR;";
53314     +                 if origLabel ne "" then do;
53315     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
53316     +                   put string;
53317     +                   string = tranwrd(origLabel,"'","''");
53318     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
53319     +                   put string;
53320     +                 end;
53321     +                 else do;
53322     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
53323     +                   put string;
53324     +                 end;
53326     +                 put ' ';
53328     +                if format ne '' then do;
53329     +                  if first._variable_ then do;
53330     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
53331     +                    put string;
53332     +                    string = '%dmnormip(_UFormat);';
53333     +                    put string;
53335     +                     string ="if MISSING(_UFORMAT) then do;";
53336     +                     put string;
53337     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
53338     +                     put string;
53339     +                     put "end;";
53341     +                     string="else if NOT MISSING(_UFORMAT) then do;";
53342     +                     put string;
53344     +                  end;
53345     +                end;
53346     +                else do;
53347     +                     if type = 'N' then do;
53348     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
53349     +                       put string;
53350     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
53351     +                       put string;
53352     +                       put "end;";
53354     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
53355     +                       put string;
53357     +                     end;
53358     +                     else if type='C' then do;
53359     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
53360     +                        put string;
53361     +                        string = '%dmnormip(_UFormat);';
53362     +                        put string;
53364     +                        string ="if MISSING(_UFORMAT) then do;";
53365     +                        put string;
53366     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
53367     +                        put string;
53368     +                        put "end;";
53370     +                        string="else if NOT MISSING(_UFORMAT) then do;";
53371     +                        put string;
53372     +                        string = '%dmnormip(_UFormat);';
53373     +                        put string;
53374     +                    end;
53375     +                end;
53376     +              end;
53377     +              if format ne '' OR type='C' then do;
53378     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
53379     +              end;
53380     +              else do;
53381     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
53382     +              end;
53383     +           end;
53384     +           else do;
53385     +              if flag ne 1 then do;
53386     +                if format ne '' OR type='C' then do;
53387     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
53388     +                end;
53389     +                else do;
53390     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
53391     +                end;
53392     +                length = klength(tempstring);
53394     +                if length < 195 then do;
53395     +                   string = tempstring;
53396     +                end;
53397     +                else do;
53399     +                   string = strip(string);
53400     +                   put string;
53401     +                   string = ") then do;";
53402     +                   put string;
53404     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
53405     +                   put string;
53406     +                   put "end;";
53408     +                 /*  string = strip(string)||",'...';"; */
53410     +                   put 'else';
53411     +                   if format ne '' OR type='C' then do;
53412     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
53413     +                   end;
53414     +                   else do;
53415     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
53416     +                   end;
53419     +                end;
53420     +              end;
53421     +           end;
53423     +           if last._group_ then do;
53424     +              string = strip(string);
53425     +              put string;
53426     +              string = ") then do;";
53427     +              put string;
53429     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
53430     +              put string;
53431     +              put "end;";
53432     +           end;
53434     +           if last._variable_ then do;
53435     +             put "else do;";
53437     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
53438     +             put string;
53440     +             put "end;";
53441     +             put "end;";
53442     +           end;
53443     +         *end;
53444     +       end;
53445     +    run;
53447     +    /* generate PublishCode the same as flowscorecode */
53448     +    filename Y "&publishCode";
53450     +    /* if publishCode already exists, wipe it out first */
53451     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
53452     +      %let rc = %sysfunc(fdelete(Y));
53453     +    %end;
53455     +    %appendfiles(Y, X);
53457     +    filename X;
53458     +    filename Y;
53460     +    %buildOptScoreCode;
53462     +    proc datasets library=work nolist;
53463     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
53464     +    run;
53465     +    quit;
53467     +%mend buildScoreCode;
53469     +%macro buildMetaCode(DeltaCodeFile=);
53471     +   /* set variable roles based on New Role column in the Results table */
53472     +   data _null_;
53473     +      file &DeltaCodeFile;
53474     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
53475     +      %if &dsid %then %do;
53476     +        %let obs = %sysfunc(fetch(&dsid));
53477     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
53478     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
53479     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
53481     +        %do %while(&obs=0);
53482     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
53483     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
53484     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
53486     +          /* retrieve grp and woe names from varmappings dataset */
53487     +          %let choice = _VARIABLE_ = "&inputname";
53488     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
53489     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
53490     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
53491     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
53492     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
53494     +          put "if name = '&inputname' then role='REJECTED';";
53495     +          %if "&role" ne "DEFAULT" %then %do;
53496     +            put "if name = '&grpname' then role='&role';";
53497     +          %end;
53498     +          %else %do;
53499     +            put "if name = '&grpname' then role='&oldrole';";
53500     +          %end;
53501     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
53503     +          %let obs = %sysfunc(fetch(&dsid));
53504     +        %end;
53505     +      %end;
53506     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
53507     +   run;
53509     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
53510     +   data _null_;
53511     +      file &DeltaCodeFile MOD;
53513     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
53514     +      %if &sdsid %then %do;
53515     +        %let sobs = %sysfunc(fetch(&sdsid));
53516     +        %do %while(&sobs=0);
53517     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
53518     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
53519     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
53520     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
53522     +          %let checkgrp = GRP_&checkname;
53523     +          %let lenname = %length(&checkgrp);
53524     +          %if %eval(&lenname-32) > 0 %then %do;
53525     +            %let checkgrp = %substr(&checkgrp, 1, 32);
53526     +          %end;
53528     +          %let choice = _VARIABLE_ ="&checkname";
53529     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
53531     +          /* if var not found in varmappings, delete variables; */
53532     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
53533     +          %if &vdsid eq 0 %then %do;
53534     +            put 'if name="&displayvar" then delete;';
53535     +            %let dispgrp = GRP_&displayvar;
53536     +            put 'if name="&dispgrp" then delete;';
53537     +          %end;
53539     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
53540     +          %let sobs = %sysfunc(fetch(&sdsid));
53541     +        %end;
53542     +      %end;
53543     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
53544     +   run;
53546     +%mend buildMetaCode;
53548     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
53550     +   proc sort data=&coarse out=sortedcoarse nodupkey;
53551     +     by display_var;
53552     +   run;
53553     +   proc sort data=&varmappings nodupkey;
53554     +     by _variable_;
53555     +   run;
53556     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
53557     +     proc sort data=&resultstable; by display_var; run;
53558     +   %end;
53560     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
53561     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
53562     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
53563     +        &resultstable (keep = display_var _new_role_ )
53564     +     %end;
53565     +     ;
53566     +     by display_var;
53567     +     length _role_ _new_role_ $10;
53568     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
53569     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
53570     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
53571     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
53572     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
53573     +           ;
53575     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
53576     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
53577     +                _role_ = "Rejected";
53578     +             else _role_ = "Input";
53579     +           %end;
53580     +           %else %do;
53581     +             _role_ = "Input";
53582     +           %end;
53583     +           if _new_role_ eq "" then _new_role_="Default";
53584     +      if ^_a then do;
53585     +        _gini_ = 0;
53586     +        _role_ = 'Rejected';
53587     +        if _new_role_ eq "" then _new_role_="Default";
53588     +      end;
53589     +   run;
53590     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
53591     +     by NAME;
53592     +   run;
53593     +   data outlabel;
53594     +     set outlabel;
53595     +     if _label_ = '' then _label_ = _variable_;
53596     +   run;
53597     +   data &resultstable;
53598     +     merge &resultstable(in=_a_) outlabel;
53599     +     by display_Var;
53600     +     if _a_ then output;
53601     +   run;
53602     +   proc datasets library=work nolist;
53603     +     delete sortedcoarse outlabel;
53604     +   run;
53605     +   quit;
53606     +   proc sort data=&resultstable nodupkey;
53607     +      by DESCENDING
53608     +        _gini_ display_Var;
53609     +   run;
53610     +   data &resultstable;
53611     +     set &resultstable;
53613     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
53614     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
53615     +     giniOrder = _N_;
53616     +     _gini_ = round(_GINI_, .001);
53617     +     drop _variable_;
53618     +   run;
53620     +   proc print data=&resultstable label;
53621     +   run;
53623     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
53624     +   data &coarse;
53625     +     set &coarse;
53626     +     length role $10;
53627     +     %let dsid = %sysfunc(open(&resultstable));
53628     +     %if &dsid %then %do;
53629     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
53630     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
53631     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
53633     +       %let obs = %sysfunc(fetch(&dsid));
53634     +       %do %while(&obs=0);
53635     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
53636     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
53637     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
53639     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
53640     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
53641     +            giniOrder = &order;
53642     +            role = "&role";
53643     +          end;
53645     +          %let obs = %sysfunc(fetch(&dsid));
53646     +       %end;
53647     +     %end;
53648     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
53649     +   run;
53652     +%mend EM_GENERATE_RESULTSTABLE;
53654     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
53656     +    /* instantiate the zchar macro to be used in adding bin definition */
53657     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
53658     +    %inc _temp;
53659     +    filename _temp;
53661     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
53662     +      by _variable_ binFlag _group_ LB;
53663     +    run;
53665     +    data tempExport;
53666     +      set sortedFine;
53667     +      by _variable_ binFlag _group_;
53668     +      length _split_value_ $200;
53670     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
53671     +      if binFlag = 0 then do;
53672     +        index = kindex(_variable_, "BIN_");
53673     +        if index gt 0 then do;
53674     +          _LEVEL_ = "INTERVAL";
53675     +        end;
53676     +        _Split_value_ = _split_value_;
53677     +        output;
53678     +      end;
53679     +      else do;
53680     +         * if last._group_ then do;
53681     +          index = kindex(_variable_, "BIN_");
53682     +          if index gt 0 then do;
53683     +            _LEVEL_ = "INTERVAL";
53684     +          end;
53685     +          _Split_value_ = %zchar(UB);
53686     +          output;
53687     +         * end;
53688     +      end;
53690     +      rename display_Var = _variable_;
53691     +      keep display_var _level_ _group_ _split_value_ binFlag;
53692     +    run;
53694     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
53695     +       data &EXPORTGROUPING;
53696     +         set tempexport;
53697     +       run;
53698     +    %end;
53699     +    %else %do;
53700     +       /* determine if EXPORTGROUPING already exists */
53701     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
53702     +         data &EXPORTGROUPING;
53703     +            set &EXPORTGROUPING tempexport;
53704     +         run;
53705     +       %end;
53706     +       %else %do;
53707     +         data &EXPORTGROUPING;
53708     +            set tempexport;
53709     +         run;
53710     +       %end;
53711     +    %end;
53713     +    proc datasets lib=work nolist;
53714     +      delete sortedFine tempexport;
53715     +    run;
53716     +    quit;
53718     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_TRAIN.SOURCE.
53724     +%macro train;
53726     +   /* include training macros */
53727     +   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
53728     +   %include trtemp;
53729     +   filename trtemp;
53731     +   /* trick IGN into thinking it is a model node to build decmeta; further down, set %EM_MODEL ASSESS=N
53732     +   %let EM_TOOLTYPE = MODEL; */
53734     +   %if &EM_IMPORT_DATA eq %then %do;
53735     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN, 1;
53736     +       %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note , NOQUOTE));
53737     +       %put &em_codebar;
53738     +       %put &errmsg;
53739     +       %put &em_codebar;
53740     +       %goto doendm;
53741     +   %end;
53743     +   %if  &EM_NUM_TARGET ne 1 %then %do;
53744     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
53745     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, USE1TARGET_ERR  , NOQUOTE));
53747     +        %put &em_codebar;
53748     +        %put &errmsg;
53749     +        %put &em_codebar;
53750     +        %goto doendm;
53751     +   %end;
53753     +   %if  &EM_NUM_BINARY_TARGET ne 1 %then %do;
53754     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
53755     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, METADATA.USE1BINTARGET_ERR   , NOQUOTE));
53757     +        %put &em_codebar;
53758     +        %put &errmsg;
53759     +        %put &em_codebar;
53760     +        %goto doendm;
53761     +   %end;
53763     +   /* Initialize property macro variables */
53764     +   %SetProperties;
53766     +   /* retrieve target information */
53767     +   /* does decmeta exist?  If not, retrieve target information elsewhere */
53768     +   %global target_event;
53769     +   %let target_event=;
53770     +   %if "&EM_DEC_DECMETA" eq "" %then %do;
53771     +     /* retrieve type and format from variableset */
53772     +     %let eventorder = DESC;
53773     +     data temp;
53774     +       set &EM_DATA_VARIABLESET;
53775     +       where NAME ="%EM_BINARY_TARGET";
53776     +     run;
53777     +     %let dsid = %sysfunc(open(work.temp));
53778     +     %if &dsid %then %do;
53779     +       %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
53780     +       %let formatnum = %sysfunc(VARNUM(&dsid, FORMAT));
53781     +       %let ordernum  = %sysfunc(VARNUM(&dsid, ORDER));
53782     +       %let obs = %sysfunc(fetchobs(&dsid, 1));
53783     +       %let Target_type = %sysfunc(getvarc(&dsid, &typenum));
53784     +       %let Target_Format = %sysfunc(getvarc(&dsid, &formatnum));
53785     +       %let Target_Order  = %sysfunc(getvarc(&dsid, &ordernum));
53786     +       %if &TARGET_ORDER  = ASC %then %let eventorder = ASC;
53787     +          %else
53788     +       %if &TARGET_ORDER  = DESC %then %let eventorder = DESC;
53789     +          %else
53790     +       %if &TARGET_ORDER  = FMTASC %then %let eventorder = ASCFMT;
53791     +          %else
53792     +       %if &TARGET_ORDER  = FMTDESC %then %let eventorder = DESFMT;
53793     +     %end;
53794     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
53796     +     /* retrieve target_event and Target_nonEvent values */
53797     +     proc dmdb data=&EM_IMPORT_DATA classout=EVENTOUT;
53798     +       target %EM_BINARY_TARGET;
53799     +       class  %EM_BINARY_TARGET(&eventorder);
53800     +     run;
53801     +     data _null_;
53802     +       dsid = open("EVENTOUT");
53803     +       if dsid>0 then do;
53804     +       levelnum = VARNUM(dsid, "LEVEL");
53805     +       if levelnum then do;
53806     +         if ^fetch(dsid) then
53807     +           call symput('TARGET_EVENT',   strip(getvarc(dsid, levelnum)));
53809     +         if ^fetch(dsid) then
53810     +           call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
53811     +       end;
53812     +       dsid=close(dsid);
53813     +       end;
53814     +     run;
53815     +     proc datasets library=work nolist;
53816     +        delete eventout;
53817     +     run;
53818     +     quit;
53819     +   %end;
53820     +   %else %do;
53822     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
53824     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
53825     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
53826     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
53828     +   %do %while(^ %sysfunc(fetch(&dsid)));
53829     +      %let Target_Event = %sysfunc(getvarc(&dsid, &vn_event));
53830     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
53831     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
53832     +   %end;
53833     +   %let dsid = %sysfunc(close(&dsid));
53835     +   %let dsid=%sysfunc(open(&EM_DEC_DECDATA));
53836     +     %let obs = %sysfunc(fetchobs(&dsid, 2));
53837     +     %let vn_nonevent = %sysfunc(varnum(&dsid, %EM_BINARY_TARGET));
53838     +     %let Target_NonEvent= %sysfunc(getvarc(&dsid, &vn_nonevent));
53839     +   %let dsid = %sysfunc(close(&dsid));
53840     +   %end;
53842     +   /* data sets */
53843     +   %EM_GETNAME(key=BINDATA,        type=DATA);
53844     +   %EM_GETNAME(key=SPLITVALS,      type=DATA);
53845     +   %EM_GETNAME(key=VARMAPPINGS,    type=DATA);
53846     +   %EM_GETNAME(key=BINMAPPINGS,    type=DATA);
53847     +   %EM_GETNAME(key=COARSE,          type=DATA);
53848     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
53849     +   %EM_GETNAME(key=RESULTSTABLE,   type=DATA);
53851     +   /* files */
53852     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);
53853     +   %EM_GETNAME(key=GROUPMAPPINGSCORECODE, type=FILE, extension=sas);
53855     +   /* if freeze eq Y and no finedetaildata exists, throw an exception */
53856     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
53857     +     %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) ne 1 %then %do;
53858     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOFINEDETAIL;
53859     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, nofinedetail_error , NOQUOTE));
53861     +        %put &em_codebar;
53862     +        %put &errmsg;
53863     +        %put &em_codebar;
53864     +        %goto doendm;
53865     +     %end;
53866     +   %end;
53868     +   %global useImport;
53869     +   %let useImport = 0;
53871     +   %EM_GETNAME(key=IMPORTSUBSET, type=DATA);
53873     +   %if %sysfunc(exist(&EM_USER_IMPORTSUBSET, DATA)) %then %do;
53874     +     proc datasets library=&EM_LIB nolist;
53875     +       delete &EM_NODEID._IMPORTSUBSET;
53876     +     run;
53877     +     quit;
53878     +   %end;
53880     +   /* if importGrouping=Y, verify that data and all vars exist and are of the correct type */
53881     +   %if &EM_PROPERTY_IMPORTGROUPING eq Y %then %do;
53883     +     /* if import eq Y and no importtable exists, throw an exception */
53884     +     %if %sysfunc(exist(&EM_PROPERTY_IMPORTDATA, DATA)) ne 1 %then %do;
53885     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOIMPORT;
53886     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, noimport_error , NOQUOTE));
53888     +        %put &em_codebar;
53889     +        %put &errmsg;
53890     +        %put &em_codebar;
53891     +        %goto doendm;
53892     +     %end;
53894     +      %let dsid = %sysfunc(open(&EM_PROPERTY_IMPORTDATA));
53895     +      %if &dsid %then %do;
53896     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
53897     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
53898     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
53899     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
53901     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
53902     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
53903     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
53904     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
53905     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
53906     +         %end;
53907     +      %end;
53908     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
53910     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
53911     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
53913     +        /* generate subset of data that contains those vars also found in training data and add display_var information */
53914     +        proc sort data=&EM_PROPERTY_IMPORTDATA out=tempimport;
53915     +           by _VARIABLE_ ;
53916     +        run;
53918     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
53919     +          by NAME;
53920     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
53921     +        run;
53923     +        data &EM_USER_IMPORTSUBSET;
53924     +          merge tempimport(in=_a) tempvarset(in=_b);
53925     +          length display_Var $32;
53926     +          by _VARIABLE_;
53927     +          display_var = _Variable_;
53928     +          if _a and _b then output;
53929     +        run;
53931     +        proc datasets library=work nolist;
53932     +          delete tempimport tempvarset;
53933     +        run;
53934     +        quit;
53936     +        %end;
53937     +      %end;
53938     +   %end;
53940     +   /* set useImport flag if there are obs in the importSubset dataset */
53941     +   %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET));
53942     +   %if &dsid %then %do;
53943     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
53944     +     %if &nobs gt 0 %then %let useimport = 1;
53945     +   %end;
53946     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
53948     +   %global useFreeze;
53949     +   %let useFreeze = 0;
53951     +   /* if Freeze=Y, verify that data and all vars exist and are of the correct type */
53952     +   %EM_GETNAME(key=FREEZESUBSET, type=DATA);
53954     +   %if %sysfunc(exist(&EM_USER_FREEZESUBSET, DATA)) %then %do;
53955     +     proc datasets library=&EM_LIB nolist;
53956     +       delete &EM_NODEID._FREEZESUBSET;
53957     +     run;
53958     +     quit;
53959     +   %end;
53961     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
53963     +      /* create freezesubset data to contain information on pre-binned data and raw values */
53964     +      %EM_GENERATE_EXPORTGROUP(&EM_USER_FREEZESUBSET, OVERWRITE);
53966     +      %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
53967     +      %if &dsid %then %do;
53968     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
53969     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
53970     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
53971     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
53973     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
53974     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
53975     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
53976     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
53977     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
53978     +         %end;
53979     +      %end;
53980     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
53982     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
53983     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
53985     +        /* generate subset of data that contains those vars also found in training data */
53986     +        proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze;
53987     +           by _VARIABLE_ ;
53988     +        run;
53990     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
53991     +          by NAME;
53992     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
53993     +        run;
53995     +        data &EM_USER_FREEZESUBSET;
53996     +          merge tempfreeze(in=_a) tempvarset(in=_b);
53997     +          length display_Var $32;
53998     +          by _VARIABLE_;
53999     +          display_var = _Variable_;
54000     +          if _a and _b then output;
54001     +        run;
54003     +        proc datasets library=work nolist;
54004     +          delete tempfreeze tempvarset;
54005     +        run;
54006     +        quit;
54007     +        %end;
54008     +      %end;
54009     +   %end;
54011     +   /* set useFreeze flag if there are obs in the freezeSubset dataset */
54012     +   %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
54013     +   %if &dsid %then %do;
54014     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
54015     +     %if &nobs gt 0 %then %let useFreeze = 1;
54016     +   %end;
54017     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54019     +   /* if finedetail already exists, delete prior to re-run */
54020     +   %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) %then %do;
54021     +     proc datasets library=&EM_LIB nolist;
54022     +       delete &EM_NODEID._FINEDETAILDATA;
54023     +     run;
54024     +     quit;
54025     +   %end;
54027     +   data tempvarnames;
54028     +     set &EM_DATA_VARIABLESET;
54029     +     where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
54030     +     keep NAME LEVEL LABEL;
54031     +   run;
54033     +   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
54034     +     names NAME;
54035     +     prefix WOE_ GRP_ ;
54036     +   run;
54038     +   proc sort data=tempmapping; by name; run;
54039     +   proc sort data=tempvarnames; by name; run;
54040     +   data tempmapping;
54041     +     merge tempmapping tempvarnames;
54042     +     by NAME;
54043     +     rename LEVEL=procLevel;
54044     +   run;
54046     +   /* generate initial columns of mapping table by setting grpflag=0 */
54047     +   %EM_GENERATE_MAPPING_TABLE;
54049     +   proc datasets library=work nolist;
54050     +     delete tempImport tempScore;
54051     +   run;
54052     +   quit;
54054     +   /* delete splitvals dataset if this existed prior to run */
54055     +   %let nvars=0;
54056     +   %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
54057     +   %if &sdsid > 0 %then %do;
54058     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
54059     +   %end;
54060     +   %if &sdsid > 0 %then  %let sdsid=%sysfunc(close(&sdsid));
54062     +   %if &nvars > 0 %then %do;
54063     +      proc datasets library=&EM_LIB nolist;
54064     +        delete &EM_NODEID._SPLITVALS;
54065     +      run;
54066     +      quit;
54067     +   %end;
54069     +   %global classvars qclassvars;
54070     +   %let classvars=;
54071     +   %let qclassvars=;
54073     +   /* generate the intervalvars and classvars macros */
54074     +   %EM_PRE_BINNING(&EM_IMPORT_DATA);
54076     +   /* update varmappings with any changes to procLevel based on discretemid */
54077     +   data &EM_USER_VARMAPPINGS;
54078     +     set &EM_USER_VARMAPPINGS;
54079     +     /* procLevel column to indicate the level used by proc; this handles*/
54080     +     /* cases in which var is marked INTERVAL in metadat but treated as  */
54081     +     /* ordinal in prebinning because of # unique levels                 */
54082     +     %let dsid = %sysfunc(open(work._discretemid));
54083     +     %if &dsid %then %do;
54084     +       %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
54085     +       %let obs = %sysfunc(fetch(&dsid));
54086     +       %do %while(&obs=0);
54087     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
54088     +          if _variable_ = "&varname" then procLevel = "ORDINAL";
54089     +          %let obs = %sysfunc(fetch(&dsid));
54090     +       %end;
54091     +     %end;
54092     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54093     +     label procLevel =  "%sysfunc(sasmsg(sashelp.dmine, rpt_proclevel_vlabel , NOQUOTE))";
54094     +   run;
54096     +   /* generate Grp_xxx variables for interval inputs */
54097     +   %if &EM_PROPERTY_BINMETHOD eq QUANTILE %then %do;
54098     +     %EM_QUANTILE_BINNING(&EM_IMPORT_DATA, WORK.PCTILE, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
54100     +   %end;
54101     +   %else %do;
54102     +     %EM_EQUAL_SPACED_BINNING(&EM_IMPORT_DATA, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
54103     +   %end;
54105     +   /* generate GRP_XXX variables for nominal inputs */
54106     +   %EM_CLASSVARS_GROUP(&EM_PROPERTY_CLASSGROUPRARE);
54108     +   /* generate GRP_XXX variables for ordinal inputs */
54109     +   %EM_ORDVARS_GROUP;
54111     +   proc print data=&EM_USER_VARMAPPINGS label;
54112     +     var _VARIABLE_ _GRP_VARIABLE_ ;
54113     +   run;
54115     +   /* add _proc_var_ to varmappings data to know names of processed variables; could be original input, could be bin_xxx */
54116     +   proc sort data=&EM_USER_SPLITVALS out=tempsplitvals nodupkey;
54117     +     by _VARIABLE_;
54118     +   run;
54120     +   data &EM_USER_VARMAPPINGS;
54121     +     set &EM_USER_VARMAPPINGS;
54122     +     length _proc_var_ $32;
54123     +     %let dsid = %sysfunc(open(work.tempsplitvals));
54124     +     %if &dsid %then %do;
54125     +        %let obs = %sysfunc(fetch(&dsid));
54126     +        %do %while(&obs=0);
54127     +          %let dispnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
54128     +          %let dispvar = %sysfunc(getvarc(&dsid, &dispnum));
54129     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
54130     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
54132     +          if upcase(_VARIABLE_) = %upcase("&dispvar") then _proc_var_ = "&var";
54133     +          %let obs = %sysfunc(fetch(&dsid));
54134     +        %end;
54135     +     %end;
54136     +     if missing(_proc_var_) then _proc_var_=_variable_;
54137     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54138     +   run;
54140     +   proc datasets library=work nolist;
54141     +     delete sortedbin tempsplitvals;
54142     +   run;
54143     +   quit;
54145     +   /* calculate Fine Detail statistics for each input */
54146     +   %EM_FINE_DETAIL(&EM_USER_BINDATA, &EM_USER_VARMAPPINGS, &EM_USER_FINEDETAILDATA, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS);
54148     +   /* apply grouping and create grouped dataset */
54149     +   %EM_CREATE_GROUPING(&EM_USER_BINDATA, &EM_USER_FINEDETAILDATA, &EM_USER_COARSE);
54151     +   /* generate _label_ values in the COARSE dataset from the Scored data */
54152     +   filename Y "&EM_USER_GROUPMAPPINGSCORECODE";
54153     +   %EM_GENERATE_LABELVALUES(Y, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS, &EM_USER_COARSE);
54154     +   filename Y;
54156     +   /* set EM_MODEL ASSESS=N to prevent assessment reports from being generated */
54157     +   %EM_MODEL(Target= %EM_BINARY_TARGET, ASSESS=N);
54159     +   /* generate reports */
54160     +   %EM_REPORT(key=COARSE, viewtype=DATA, block=MODEL, description=EVENTRATESTAT, autodisplay=N, spk=N);
54163     +   %doendm:
54164     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
NOTE: %INCLUDE (level 1) file TRTEMP is file SASHELP.EMMDFY.BINNING_TRAINMACROS.SOURCE.
54166     +%macro EM_GENERATE_MAPPING_TABLE;
54168     +  %EM_GETNAME(key=VARMAPPINGS, type=DATA);
54169     +  data &EM_USER_VARMAPPINGS(keep=_variable_  _grp_variable_ procLevel label);
54170     +   length _variable_  _grp_variable_  $32 procLevel $8;
54171     +   set tempmapping;
54172     +   label _variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_inputvar_vlabel , NOQUOTE))"
54173     +         _grp_variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_grpvar_vlabel , NOQUOTE))";
54175     +         _variable_ = NAME;
54176     +         _grp_variable_ = GRP;
54177     + run;
54179     +%mend EM_GENERATE_MAPPING_TABLE;
54181     +%macro EM_PRE_BINNING(input);
54182     +    /* Determine which of our variables are interval  */
54183     +    %global intervalvars;
54184     +    %let intervalvars= ;
54185     +    data tempvariableset;
54186     +      set &EM_DATA_VARIABLESET;
54187     +      where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
54188     +    run;
54190     +    /* add all interval vars to the intervalvar macro */
54191     +    %let dsid = %sysfunc(open(work.tempvariableset));
54192     +    %if &dsid %then %do;
54193     +       %let varnum = %sysfunc(VARNUM(&dsid, NAME));
54194     +       %let obs = %sysfunc(fetch(&dsid));
54195     +       %do %while(&obs=0);
54196     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
54197     +          %let intervalvars = &intervalvars &varname;
54198     +          %let obs = %sysfunc(fetch(&dsid));
54199     +       %end;
54200     +    %end;
54201     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54203     +    /* Determine which variables marked as interval are true interval distributions; */
54204     +    /* intmid contains variables that are actually interval and should be binned; */
54205     +    /* discretemid contains variables that are actually discrete and should NOT be binned */
54206     +    %if &intervalvars ne %then %do;
54207     +      %let _maxlevel = %eval(&EM_PROPERTY_NUMBINS + 1);
54208     +      proc dmdb data=&input classout=_CLASSOUT maxlevel=&_maxlevel;
54209     +        class &intervalvars;
54210     +      run;
54211     +      proc freq data=_CLASSOUT order=DATA noprint;
54212     +         table NAME / OUT= _COUNT(where=(COUNT<&_maxlevel));
54213     +      run;
54215     +      %let _INTBINS=;
54216     +      data _null_;
54217     +        set _COUNT;
54218     +        call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
54219     +      run;
54221     +      proc sort data=_CLASSOUT;
54222     +        by NAME;
54223     +      run;
54224     +      proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
54225     +        var NRAW;
54226     +        by NAME;
54227     +      run;
54229     +      data _null_;
54230     +        dsid = open('_OUT');
54231     +        if dsid then do;
54232     +           call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
54233     +           csid = close(dsid);
54234     +        end;
54235     +      run;
54236     +      data _INTMID;
54237     +        set _OUT;
54238     +        keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
54239     +        %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
54240     +          if ^indexw("&_INTBINS", VARIABLE) then output;
54241     +        %end;
54242     +      run;
54244     +      %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
54245     +        data _DISCRETEMID;
54246     +          set _OUT;
54247     +          keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
54248     +          if indexw("&_INTBINS", VARIABLE) then output;
54249     +        run;
54250     +      %end;
54252     +      /* add vars from the _DISCRETEMID dataset to the classvars macro
54253     +      %let dsid = %sysfunc(open(WORK._DISCRETEMID));
54254     +      %if &dsid %then %do;
54255     +        %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
54256     +        %let obs = %sysfunc(fetch(&dsid));
54258     +        %do %while(&obs=0);
54259     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
54260     +          %let classvars = &classvars &var;
54261     +          %let qclassvars = &qclassvars "&var";
54262     +          %let obs = %sysfunc(fetch(&dsid));
54263     +        %end;
54264     +      %end;
54265     +      %if &dsid  %then %let dsid = %sysfunc(close(&dsid));
54266     +*/
54267     +    %end;
54268     +    %else %do;
54269     +      *data _INTMID;
54270     +      *run;
54272     +      *data _DISCRETEMID;
54273     +      *run;
54274     +    %end;
54276     +    /* if import grouping then remove interval vars in import data from _INTMID */
54277     +    %if &useImport eq 1 %then %do;
54279     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
54280     +        by _VARIABLE_;
54281     +      run;
54283     +      data &EM_USER_IMPORTSUBSET;
54284     +        length CODEVAR $32;
54285     +        set &EM_USER_IMPORTSUBSET;
54286     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
54287     +      run;
54289     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
54290     +        by _VARIABLE_;
54291     +      run;
54293     +      %let dsid = %sysfunc(open(work.tempsubset));
54294     +      %let nobs = 0;
54295     +      %if &dsid %then %do;
54296     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
54297     +      %end;
54298     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
54300     +      data tempsubset;
54301     +        set tempsubset;
54302     +        length  binVar suffix $32;
54303     +        array binnames{&nobs} $32 _temporary_;
54304     +        retain binVar binnames;
54305     +        by _VARIABLE_;
54307     +        binVar = 'BIN_'!!strip(CODEVAR);
54308     +        binVar = ksubstr(binVar, 1, 32);
54309     +        count = 1;
54311     +        do i=1 to _N_;
54312     +           do while(binvar eq binnames(i));
54313     +              suffix = strip(put(count,best.));
54314     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
54315     +              count + 1;
54316     +           end;
54317     +        end;
54318     +        binnames(_N_)= binvar;
54319     +        output;
54320     +        drop suffix count i;
54321     +     run;
54323     +     data &EM_USER_IMPORTSUBSET;
54324     +       set &EM_USER_IMPORTSUBSET;
54325     +       length binVar $32;
54327     +        %let dsid = %sysfunc(open(work.tempsubset));
54328     +        %if &dsid %then %do;
54329     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
54330     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
54331     +          %let obs = %sysfunc(fetch(&dsid));
54333     +          %do %while(&obs=0);
54334     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
54335     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
54337     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
54338     +            %let obs = %sysfunc(fetch(&dsid));
54339     +          %end;
54340     +        %end;
54341     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54342     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
54343     +        if binVar ne "" then do;
54344     +          _LEVEL_ = "ORDINAL";
54345     +        end;
54347     +      run;
54349     +      %let idsidexists=0;
54350     +      %let idsid = %sysfunc(open(work._intmid));
54351     +      %if &idsid %then %do;
54352     +        %let idsidexists=1;
54353     +        %let idsid = %sysfunc(close(&idsid));
54354     +      %end;
54356     +      %if &idsidexists = 1 %then %do;
54357     +      data _INTMID;
54358     +        set _INTMID;
54360     +        %let dsid = %sysfunc(open(work.tempsubset));
54361     +        %if &dsid %then %do;
54362     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
54363     +          %let obs = %sysfunc(fetch(&dsid));
54365     +          %do %while(&obs=0);
54366     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
54367     +            if variable = "&codevar" then delete;
54368     +            %let obs = %sysfunc(fetch(&dsid));
54369     +          %end;
54370     +        %end;
54371     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54372     +      run;
54373     +      %end;
54375     +      proc datasets library=work nolist;
54376     +        delete tempsubset;
54377     +      run;
54378     +      quit;
54379     +    %end;
54381     +    /* if freeze then remove interval vars in import data from _INTMID */
54382     +    %if &useFreeze eq 1 %then %do;
54384     +      data &EM_USER_FREEZESUBSET;
54385     +        length CODEVAR $32;
54386     +        set &EM_USER_FREEZESUBSET;
54387     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
54388     +      run;
54390     +      proc sort data=&EM_USER_FREEZESUBSET out=tempsubset nodupkey;
54391     +        by _VARIABLE_;
54392     +      run;
54394     +      %let dsid = %sysfunc(open(work.tempsubset));
54395     +      %let nobs = 0;
54396     +      %if &dsid %then %do;
54397     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
54398     +      %end;
54399     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
54401     +      data tempsubset;
54402     +        set tempsubset;
54403     +        length  binVar suffix $32;
54404     +        array binnames{&nobs} $32 _temporary_;
54405     +        retain binVar binnames;
54406     +        by _VARIABLE_;
54408     +        binVar = 'BIN_'!!strip(CODEVAR);
54409     +        binVar = ksubstr(binVar, 1, 32);
54410     +        count = 1;
54412     +        do i=1 to _N_;
54413     +           do while(binvar eq binnames(i));
54414     +              suffix = strip(put(count,best.));
54415     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
54416     +              count + 1;
54417     +           end;
54418     +        end;
54419     +        binnames(_N_)= binvar;
54420     +        output;
54421     +        drop suffix count i;
54422     +     run;
54424     +     data &EM_USER_FREEZESUBSET;
54425     +       set &EM_USER_FREEZESUBSET;
54426     +       length binVar $32;
54428     +        %let dsid = %sysfunc(open(work.tempsubset));
54429     +        %if &dsid %then %do;
54430     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
54431     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
54432     +          %let obs = %sysfunc(fetch(&dsid));
54434     +          %do %while(&obs=0);
54435     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
54436     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
54438     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
54439     +            %let obs = %sysfunc(fetch(&dsid));
54440     +          %end;
54441     +        %end;
54442     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54444     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
54445     +        if binVar ne "" then do;
54446     +          _LEVEL_ = "ORDINAL";
54447     +        end;
54449     +      run;
54451     +      %let idsidexists= 0;
54452     +      %let idsid = %sysfunc(open(work._intmid));
54453     +      %if &idsid %then %do;
54454     +        %let idsidexists=1;
54455     +        %let idsid = %sysfunc(close(&idsid));
54456     +      %end;
54457     +      %if &idsidexists eq 1 %then %do;
54458     +      data _INTMID;
54459     +        set _INTMID;
54461     +        %let dsid = %sysfunc(open(work.tempsubset));
54462     +        %if &dsid %then %do;
54463     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
54464     +          %let obs = %sysfunc(fetch(&dsid));
54466     +          %do %while(&obs=0);
54467     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
54468     +            if variable = "&codevar" then delete;
54469     +            %let obs = %sysfunc(fetch(&dsid));
54470     +          %end;
54471     +        %end;
54472     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54473     +      run;
54474     +      %end;
54476     +      proc datasets library=work nolist;
54477     +        delete tempsubset;
54478     +      run;
54479     +      quit;
54481     +    %end;
54483     +%mend EM_PRE_BINNING;
54485     +%macro EM_IMPORT_BINNING(binningCode);
54488     +   data tempintimport;
54489     +     set &EM_USER_IMPORTSUBSET;
54490     +     if binflag = 1;
54491     +   run;
54493     +   %let idsid = %sysfunc(open(work.tempintimport));
54494     +   %if &idsid %then %do;
54495     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
54496     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
54497     +   %end;
54498     +   %else %do;
54499     +     %let nvars = 0;
54500     +     %let nobs = 0;
54501     +   %end;
54502     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
54504     +   proc datasets library=work nolist;
54505     +     delete tempintimport;
54506     +   run;
54507     +   quit;
54509     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
54511     +      filename X "&binningCode";
54512     +      data _null_;
54513     +        FILE X MOD;
54514     +        %let bin_variables=;
54515     +        %let quote_bin_variables = ;
54516     +        %let choice = binflag = 1;
54517     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
54518     +        %if &dsid %then %do;
54519     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
54520     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
54521     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
54522     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingbins_note , NOQUOTE));
54524     +           put "&EM_CODEBAR;";
54525     +           put " &note; ";
54526     +           put "&EM_CODEBAR;";
54528     +           /* retrieve value for first obs */
54529     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
54530     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
54531     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
54533     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
54534     +           %let i = 1;
54535     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
54536     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
54537     +           %end;
54538     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
54539     +           put " ";
54540     +           put "if &oldname eq . then &binvalue = .;";
54542     +           /* cycle through special codes if they exist */
54543     +           %let index2 = %index(&oldname, SV_);
54544     +           %if &index2 gt 0 %then %do;
54545     +             %let choice = CODEVAR ="&oldname";
54546     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
54547     +             %if &cdsid %then %do;
54548     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
54549     +                %let cobs = %sysfunc(fetch(&cdsid));
54550     +                %do %while(&cobs=0);
54551     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
54552     +                    put "else if &oldname eq &code then &binvalue = &code;";
54553     +                   %let cobs = %sysfunc(fetch(&cdsid));
54554     +                %end;
54555     +             %end;
54556     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
54557     +           %end;
54558     +           put "else ";
54559     +           put "  if &oldname < &value then &binvalue=&i;";
54560     +           %let i= %eval(&i+1);
54562     +           %let obs = %sysfunc(fetch(&dsid));
54563     +           %do %while(&obs=0);
54564     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
54565     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
54566     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
54568     +              %if "&oldname" ne "&namevalue" %then %do;
54570     +                /* if variable has been re-coded for special codes, must include these values as well */
54571     +                put;
54572     +                put "if &namevalue eq . then &binvalue = .;";
54574     +                %let i=1;
54575     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
54576     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
54577     +                %end;
54578     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
54580     +                /* cycle through special codes if they exist */
54581     +                %let index2 = %index(&namevalue, SV_);
54582     +                %if &index2 gt 0 %then %do;
54583     +                  %let choice = CODEVAR ="&namevalue";
54584     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
54585     +                  %if &cdsid %then %do;
54586     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
54587     +                     %let cobs = %sysfunc(fetch(&cdsid));
54588     +                     %do %while(&cobs=0);
54589     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
54590     +                       put "else if &namevalue eq &code then &binvalue = &code;";
54591     +                       %let cobs = %sysfunc(fetch(&cdsid));
54592     +                     %end;
54593     +                  %end;
54594     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
54595     +                %end;
54596     +                put "else ";
54597     +                put "  if &namevalue < &value then &binvalue=&i;";
54598     +              %end;
54599     +              %else %do;
54600     +                put "else ";
54601     +                %if "&value" ne "." %then %do;
54602     +                  put "  if &namevalue < &value then &binvalue=&i;";
54603     +                %end;
54604     +                %else %do;
54605     +                  put "  &binvalue=&i;";
54606     +                %end;
54607     +              %end;
54608     +              %let i = %eval(&i + 1);
54609     +              %let obs = %sysfunc(fetch(&dsid));
54610     +              %let oldname = &namevalue;
54611     +              %let oldbinvalue = &binvalue;
54612     +           %end;
54613     +        %end;
54614     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
54616     +      run;
54617     +      filename X;
54618     +      /* generate BINMAPPINGS dataset */
54619     +      data TEMPBINMAPPINGS;
54620     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
54622     +        %let choice = binflag = 1;
54623     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
54624     +        %if &dsid %then %do;
54625     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
54626     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
54627     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
54628     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
54629     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
54631     +           /* retrieve information from first obs */
54632     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
54633     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
54634     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
54635     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
54636     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar,5));
54637     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
54638     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
54639     +           %let i = 1;
54641     +           NAME = "&OLDCODEVAR";
54642     +           BIN_NAME = "&OLDBINVAR";
54643     +           GRP_NAME = "&OLDGRPVAR";
54644     +           BIN = "&i";
54645     +           GRP = "&oldgrpvalue";
54646     +           LB = . ;
54647     +           UB = &oldvalue;
54648     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
54649     +           DISPLAY_VAR = "&oldvar";
54650     +           output;
54652     +           %let i = 2;
54653     +           %let obs = %sysfunc(fetch(&dsid));
54654     +           %do %while(&obs=0);
54655     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
54656     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
54657     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
54658     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar,5));
54659     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
54660     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
54662     +             %if "&oldvar" ne "&var" %then %do;
54663     +              %let i = 1;
54664     +               %let oldvalue = .;
54665     +             %end;
54667     +             NAME = "&CODEVAR";
54668     +             BIN_NAME = "&BINVAR";
54669     +             GRP_NAME = "&GRPVAR";
54670     +             BIN = "&i";
54671     +             GRP = "&group";
54672     +             LB = &oldvalue ;
54673     +             UB = &value;
54674     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
54675     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
54676     +             %end;
54677     +             %else %do;
54678     +               %if "&oldvalue" eq "." %then %do;
54679     +                 EM_BIN_LABEL = "&var < &value" ;
54680     +               %end;
54681     +               %if "&value" eq "." %then %do;
54682     +                 EM_BIN_LABEL = "&oldvalue >= &var";
54683     +               %end;
54684     +             %end;
54685     +             DISPLAY_VAR = "&var";
54686     +             output;
54688     +             %let oldvar = &var;
54689     +             %let oldcodevar = &codevar;
54690     +             %let oldbinvar = &binvar;
54691     +             %let oldgrpvar = &grpvar;
54692     +             %let oldvalue   = &value;
54693     +             %let oldgrpvalue   = &group;
54694     +             %let i = %eval(&i + 1);
54695     +             %let obs = %sysfunc(fetch(&dsid));
54696     +           %end;
54697     +        %end;
54698     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
54699     +      run;
54701     +      data &EM_USER_BINMAPPINGS;
54702     +        set &EM_USER_BINMAPPINGS tempBinMappings;
54703     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
54704     +      run;
54706     +      /* update importsubset with bin values instead of raw values */
54707     +      data &EM_USER_IMPORTSUBSET;
54708     +        set &EM_USER_IMPORTSUBSET;
54710     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
54711     +        %if &dsid %then %do;
54712     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
54713     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
54714     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
54715     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
54716     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
54717     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
54719     +          %let oldvar = ;
54720     +          %let obs = %sysfunc(fetch(&dsid));
54721     +          %do %while(&obs=0);
54722     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
54723     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
54724     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
54725     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
54726     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
54727     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
54729     +            %if "&oldvar" eq "&displayvar" %then %do;
54730     +              else
54731     +            %end;
54732     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
54733     +               _SPLIT_VALUE_ = "&bin";
54734     +            end;
54735     +            %let oldvar = &displayvar;
54736     +            %let obs = %sysfunc(fetch(&dsid));
54737     +          %end;
54738     +        %end;
54739     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
54740     +      run;
54742     +      proc sort data=&EM_USER_IMPORTSUBSET;
54743     +        by _VARIABLE_ _SPLIT_VALUE_;
54744     +      run;
54746     +      proc datasets library=work nolist;
54747     +        delete tempBinMappings;
54748     +      run;
54749     +      quit;
54750     +  %end;
54751     +%mend EM_IMPORT_BINNING;
54753     +%macro EM_FREEZE_BINNING(binningCode);
54755     +   data tempintfreeze;
54756     +     set &EM_USER_FREEZESUBSET;
54757     +     if binflag = 1;
54758     +   run;
54760     +   %let idsid = %sysfunc(open(work.tempintfreeze));
54761     +   %if &idsid %then %do;
54762     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
54763     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
54764     +   %end;
54765     +   %else %do;
54766     +     %let nvars = 0;
54767     +     %let nobs = 0;
54768     +   %end;
54769     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
54771     +   proc datasets library=work nolist;
54772     +     delete tempintimport;
54773     +   run;
54774     +   quit;
54776     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
54778     +      filename X "&binningCode";
54779     +      data _null_;
54780     +        FILE X MOD;
54782     +        %let bin_variables=.;
54783     +        %let quote_bin_variables=.;
54784     +        %let freeze_variables=;
54785     +        %let choice = binflag = 1;
54786     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
54787     +        %if &dsid %then %do;
54788     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
54789     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
54790     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
54791     +           %let vnum    = %sysfunc(VARNUM(&dsid, _variable_));
54793     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingfrozenbins_note , NOQUOTE));
54794     +           put "&EM_CODEBAR;";
54795     +           put "&note;";
54796     +           put "&EM_CODEBAR;";
54798     +           /* retrieve value for first obs */
54799     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
54800     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
54801     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
54802     +           %let variable = %sysfunc(getvarc(&dsid, &vnum));
54804     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
54805     +           %let i = 1;
54806     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
54807     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
54808     +           %end;
54809     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
54810     +           %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
54812     +           put " ";
54813     +           put "if &oldname eq . then &binvalue = .;";
54815     +           /* cycle through special codes if they exist */
54816     +           %let index2 = %index(&oldname, SV_);
54817     +           %if &index2 gt 0 %then %do;
54818     +             %let choice = CODEVAR ="&oldname";
54819     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
54820     +             %if &cdsid %then %do;
54821     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
54822     +                %let cobs = %sysfunc(fetch(&cdsid));
54823     +                %do %while(&cobs=0);
54824     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
54825     +                    put "else if &oldname eq &code then &binvalue = &code;";
54826     +                   %let cobs = %sysfunc(fetch(&cdsid));
54827     +                %end;
54828     +             %end;
54829     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
54830     +           %end;
54831     +           put "else ";
54832     +           put "  if &oldname < &value then &binvalue=&i;";
54833     +           %let i= %eval(&i+1);
54835     +           %let obs = %sysfunc(fetch(&dsid));
54836     +           %do %while(&obs=0);
54837     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
54838     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
54839     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
54840     +              %let variable = %sysfunc(getvarc(&dsid, &vnum));
54842     +              %if "&oldname" ne "&namevalue" %then %do;
54844     +                /* if variable has been re-coded for special codes, must include these values as well */
54845     +                put;
54846     +                put "if &namevalue eq . then &binvalue = .;";
54848     +                %let i=1;
54849     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
54850     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
54851     +                %end;
54852     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
54853     +                %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
54855     +                /* cycle through special codes if they exist */
54856     +                %let index2 = %index(&namevalue, SV_);
54857     +                %if &index2 gt 0 %then %do;
54858     +                  %let choice = CODEVAR ="&namevalue";
54859     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
54860     +                  %if &cdsid %then %do;
54861     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
54862     +                     %let cobs = %sysfunc(fetch(&cdsid));
54863     +                     %do %while(&cobs=0);
54864     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
54865     +                       put "else if &namevalue eq &code then &binvalue = &code;";
54866     +                       %let cobs = %sysfunc(fetch(&cdsid));
54867     +                     %end;
54868     +                  %end;
54869     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
54870     +                %end;
54871     +                put "else ";
54872     +                put "  if &namevalue < &value then &binvalue=&i;";
54873     +              %end;
54874     +              %else %do;
54875     +                put "else ";
54876     +                %if "&value" ne "." %then %do;
54877     +                  put "  if &namevalue < &value then &binvalue=&i;";
54878     +                %end;
54879     +                %else %do;
54880     +                  put " &binvalue=&i;";
54881     +                %end;
54882     +              %end;
54883     +              %let i = %eval(&i + 1);
54884     +              %let obs = %sysfunc(fetch(&dsid));
54885     +              %let oldname = &namevalue;
54886     +              %let oldbinvalue = &binvalue;
54887     +           %end;
54888     +        %end;
54889     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
54891     +      run;
54892     +      filename X;
54893     +      /* generate BINMAPPINGS dataset */
54894     +      data TEMPBINMAPPINGS;
54895     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
54897     +        %let choice = binflag = 1;
54898     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
54899     +        %if &dsid %then %do;
54900     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
54901     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
54902     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
54903     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
54904     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
54906     +           /* retrieve information from first obs */
54907     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
54908     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
54909     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
54910     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
54911     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar, 5));
54912     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
54913     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
54914     +           %let i = 1;
54916     +           NAME = "&OLDCODEVAR";
54917     +           BIN_NAME = "&OLDBINVAR";
54918     +           GRP_NAME = "&OLDGRPVAR";
54919     +           BIN = "&i";
54920     +           GRP = "&oldgrpvalue";
54921     +           LB = . ;
54922     +           UB = &oldvalue;
54923     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
54924     +           DISPLAY_VAR = "&oldvar";
54925     +           output;
54927     +           %let i = 2;
54928     +           %let obs = %sysfunc(fetch(&dsid));
54929     +           %do %while(&obs=0);
54930     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
54931     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
54932     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
54933     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar, 5));
54934     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
54935     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
54937     +             %if "&oldvar" ne "&var" %then %do;
54939     +               %let i = 1;
54940     +               %let oldvalue = .;
54941     +             %end;
54943     +             NAME = "&CODEVAR";
54944     +             BIN_NAME = "&BINVAR";
54945     +             GRP_NAME = "&GRPVAR";
54946     +             BIN = "&i";
54947     +             GRP = "&group";
54948     +             LB = &oldvalue ;
54949     +             UB = &value;
54950     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
54951     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
54952     +             %end;
54953     +             %else %do;
54954     +               %if "&oldvalue" eq "." %then %do;
54955     +                 EM_BIN_LABEL = "&var < &value" ;
54956     +               %end;
54957     +               %if "&value" eq "." %then %do;
54958     +                 EM_BIN_LABEL = "&oldvalue >= &var";
54959     +               %end;
54960     +             %end;
54961     +             DISPLAY_VAR = "&var";
54962     +             output;
54964     +             %let oldvar = &var;
54965     +             %let oldcodevar = &codevar;
54966     +             %let oldbinvar = &binvar;
54967     +             %let oldgrpvar = &grpvar;
54968     +             %let oldvalue   = &value;
54969     +             %let oldgrpvalue = &group;
54970     +             %let i = %eval(&i + 1);
54971     +             %let obs = %sysfunc(fetch(&dsid));
54972     +           %end;
54973     +        %end;
54975     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
54976     +      run;
54978     +      /* remove obs from EM_USER_BINMAPPINGS that have vars also in tempBinMappings -- prevents duplicate entries */
54979     +      data &EM_USER_BINMAPPINGS;
54980     +        set &EM_USER_BINMAPPINGS;
54981     +        if NAME in (&FREEZE_VARIABLES) then delete;
54982     +      run;
54984     +      data &EM_USER_BINMAPPINGS;
54985     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
54987     +        set &EM_USER_BINMAPPINGS tempBinMappings;
54988     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
54989     +      run;
54991     +      /* update freezesubset with bin values instead of raw values */
54992     +      data &EM_USER_FREEZESUBSET;
54993     +        set &EM_USER_FREEZESUBSET;
54995     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
54996     +        %if &dsid %then %do;
54997     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
54998     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
54999     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
55000     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
55001     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
55002     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
55004     +          %let oldvar = ;
55005     +          %let obs = %sysfunc(fetch(&dsid));
55006     +          %do %while(&obs=0);
55007     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
55008     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
55009     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
55010     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
55011     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
55012     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
55014     +            %if "&oldvar" eq "&displayvar" %then %do;
55015     +              else
55016     +            %end;
55017     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
55018     +               _SPLIT_VALUE_ = "&bin";
55019     +            end;
55020     +            %let oldvar =&displayvar;
55021     +            %let obs = %sysfunc(fetch(&dsid));
55022     +          %end;
55023     +        %end;
55024     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
55025     +      run;
55027     +      proc sort data=&EM_USER_FREEZESUBSET;
55028     +        by _VARIABLE_ _SPLIT_VALUE_;
55029     +      run;
55031     +      proc datasets library=work nolist;
55032     +        delete tempBinMappings;
55033     +      run;
55034     +      quit;
55035     +   %end;
55036     +%mend EM_FREEZE_BINNING;
55038     +%macro EM_EQUAL_SPACED_BINNING(input, bindata, binningCode);
55041     +/* initialize new bucket_binning macro */
55042     +filename temp catalog 'sashelp.emapps.bucket_binning.source';
55043     +%include temp;
55044     +filename temp;
55046     +/* create fileref for generation of binningCode */
55047     +filename X "&binningCode";
55049     +/* determine if there are inputs to be binned */
55050     +%let numbinvars = 0;
55051     +%let intdsid = %sysfunc(open(work._intmid));
55052     +%if &intdsid %then %do;
55053     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
55054     +%end;
55055     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
55056     +%if &numbinvars > 0 %then %do;
55059     +/* get data in format needed for quantile_binning macro */
55060     +data work.vartable;
55061     +  set work._intmid;
55062     +  level = "INTERVAL";
55063     +  role  = "INPUT";
55064     +  rename variable=name;
55065     +run;
55067     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
55068     +%if %EM_FREQ ne %then %do;
55069     +   data work.freq;
55070     +     name="%EM_FREQ";
55071     +     role="FREQ";
55072     +   run;
55074     +   data work.vartable;
55075     +     set work.vartable work.freq;
55076     +   run;
55077     +%end;
55079     +/* perform bucket binning of data */
55080     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
55081     +%em_apps_bucket_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
55083     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
55084     +%end;
55085     +%else %do;
55086     +  /* initialize binmappings table */
55087     +  data &EM_USER_BINMAPPINGS;
55088     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
55089     +  run;
55091     +  data _null_;
55092     +    FILE X;
55094     +    put "&EM_CODEBAR;";
55095     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
55096     +    put "* &note;";
55097     +    put "&EM_CODEBAR;";
55098     +  run;
55100     +%end;
55102     +/* assign display_var values to binmappings table as well as initial group values */
55103     +data &EM_USER_BINMAPPINGS;
55104     +  set &EM_USER_BINMAPPINGS;
55105     +  length display_var $32 grp $8;
55106     +  display_var = name;
55108     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
55109     +    GRP = BIN + 1;
55110     +  %end;
55111     +  %else %do;
55112     +    GRP = BIN;
55113     +  %end;
55114     +run;
55116     +/* de-assign fileref */
55117     +filename X;
55119     +    /* append to binning code those values that were included in the importSubset data */
55120     +    %if &useImport eq 1 %then %do;
55121     +      %EM_IMPORT_BINNING(&binningcode);
55122     +    %end;
55124     +    /* append to binning code those values that were included in the freezeSubset data */
55125     +    %if &useFreeze eq 1 %then %do;
55126     +      %EM_FREEZE_BINNING(&binningcode);
55127     +    %end;
55129     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
55130     +     by NAME;
55131     +     run;
55133     +     /* create grouping for missing level */
55134     +    data tempmissvalues;
55135     +    run;
55137     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
55138     +       data tempmissvalues;
55139     +         %if &useImport eq 1 %then %do;
55140     +           merge sortedmapping &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME));
55141     +         %end;
55142     +         %if &useFreeze eq 1 %then %do;
55143     +           merge sortedmapping &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME));
55144     +         %end;
55145     +         %else %do;
55146     +           set sortedmapping;
55147     +         %end;
55148     +         GRP="1";
55149     +         bin="Missing";
55150     +         _split_value_ = "Missing";
55151     +         %if &useImport eq 1 %then %do;
55152     +            if _a then delete;
55153     +         %end;
55154     +         %if &useFreeze eq 1 %then %do;
55155     +            if _b then delete;
55156     +         %end;
55158     +       run;
55159     +    %end;
55161     +    /* create binData from binningCode */
55162     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
55163     +      by NAME;
55164     +    run;
55166     +    filename X "&binningCode";
55167     +    data &bindata;
55168     +      set &input;
55169     +      %inc X;
55170     +    run;
55172     +    filename X;
55174     +    /* create splitvals dataset */
55175     +    data tempsplitvals;
55176     +      set &EM_USER_BINMAPPINGS
55177     +        %let tdsid = %sysfunc(open(work.tempmissvalues));
55178     +        %if &tdsid %then %do;
55179     +          tempmissvalues
55180     +        %end;
55181     +        %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
55182     +      ;
55183     +      length newgroup _group_ 8 _level_ $8;
55184     +      newgroup =.;
55185     +      _LEVEL_ = 'ORDINAL';
55186     +      _Group_ = grp;
55187     +      rename NAME=DISPLAY_VAR BIN=_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
55188     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_;
55189     +    run;
55191     +    data tempsplitvals;
55192     +      set tempsplitvals;
55193     +      _order_ = _N_;
55194     +    run;
55196     +    /* determine if EM_USER_SPLITVALS already exists */
55197     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
55198     +    %if &sdsid > 0 %then %do;
55199     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
55200     +      %if &nvars > 0 %then %do;
55201     +        proc sql;
55202     +          reset noprint;
55203     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
55204     +        quit;
55205     +      %end;
55206     +      %else %let nobs=0;
55207     +    %end;
55208     +    %else %do;
55209     +       %let nobs=0;
55210     +       %let nvars=0;
55211     +    %end;
55212     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
55214     +    /* if useIMport=1 also include import definitions here as well */
55215     +    %if &useImport eq 1 %then %do;
55216     +      data tempImport;
55217     +        set &EM_USER_IMPORTSUBSET;
55218     +        _variable_ = binVar;
55219     +      run;
55220     +    %end;
55222     +    /* if useFreeze=1 also include import definitions here as well */
55223     +    %if &useFreeze eq 1 %then %do;
55224     +      data tempFreeze;
55225     +        length display_var $32;
55226     +        set &EM_USER_FREEZESUBSET;
55227     +        display_var = _variable_;
55228     +        _variable_ = binVar;
55229     +      run;
55230     +    %end;
55233     +    data &EM_USER_SPLITVALS;
55234     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
55235     +        set &EM_USER_SPLITVALS tempsplitvals
55236     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
55237     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
55238     +        %end;
55239     +        %if &useFreeze eq 1 %then %do;
55240     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
55241     +        %end;
55242     +        ;
55243     +      %end;
55244     +      %else %do;
55245     +        set tempsplitvals
55246     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
55247     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
55248     +        %end;
55249     +        %if &useFreeze eq 1 %then %do;
55250     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
55251     +        %end;
55252     +        ;
55253     +      %end;
55254     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _ORDER_;
55255     +    run;
55257     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
55258     +    data tempvariableset;
55259     +      set &EM_DATA_VARIABLESET;
55260     +      where TYPE = 'C';
55261     +    run;
55263     +    /* add all interval vars that aren't special codes to the intervalvar macro */
55264     +    %let dsid = %sysfunc(open(work.tempvariableset));
55265     +    %if &dsid %then %do;
55266     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
55267     +      %let obs = %sysfunc(fetch(&dsid));
55268     +      %do %while(&obs=0);
55269     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
55270     +        %let classvars = &classvars &varname;
55271     +        %let qclassvars = &qclassvars "&varname";
55272     +        %let obs = %sysfunc(fetch(&dsid));
55273     +      %end;
55274     +    %end;
55275     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
55277     +    %if &classvars ne %then %do;
55278     +      proc dmdb data =&bindata classout=_classout nonorm;
55279     +        class &classvars;
55280     +      run;
55282     +      proc dmdb data=&bindata classout=_classout2;
55283     +       class &classvars;
55284     +      run;
55286     +      proc sort data=_classout; by NAME CRAW; run;
55287     +      proc sort data=_classout2; by NAME CRAW; run;
55289     +      data _classout;
55290     +        length _variable_ $32;
55291     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
55292     +        _split_value_ = trim(left(_split_value_));
55293     +        LEVEL = trim(left(LEVEL));
55294     +        by NAME CRAW;
55295     +       _variable_ = NAME;
55296     +      run;
55298     +      proc sort data=_classout; by _variable_ _split_value_; run;
55299     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
55301     +      data &EM_USER_SPLITVALS;
55302     +        length _norm_level_ $200 _split_value_ $200;
55303     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
55304     +        by _variable_ _split_value_;
55305     +        LEVEL = trim(left(LEVEL));
55306     +        _norm_level_ = trim(left(_norm_level_));
55307     +        _split_value_ = trim(left(_split_value_));
55308     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
55309     +        drop NAME FREQUENCY TYPE CRAW NRAW;
55310     +      run;
55312     +      proc datasets library=work nolist;
55313     +        delete _classout _classout2;
55314     +      run;
55315     +      quit;
55316     +    %end;
55317     +    data &EM_USER_SPLITVALS;
55318     +      set &EM_USER_SPLITVALS;
55319     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
55320     +    run;
55322     +    proc sort data=&EM_USER_SPLITVALS;
55323     +      by DISPLAY_VAR _Group_;
55324     +    run;
55326     +   proc datasets library=work nolist;
55327     +     delete tempBinMappings temp_binmappings tempBinNames tempsplitvals sortedmapping tempmissvalues
55328     +      %if &useImport eq 1 %then %do;
55329     +        tempImport
55330     +      %end;
55331     +      %if &useFreeze eq 1 %then %do;
55332     +        tempFreeze
55333     +      %end;
55334     +     ;
55335     +   run;
55336     +   quit;
55338     +%mend;
55340     +%macro EM_QUANTILE_BINNING(input, pctdata, bindata, binningCode);
55342     +/* initialize new quantile_binning macro */
55343     +filename temp catalog 'sashelp.emapps.quantile_binning.source';
55344     +%include temp;
55345     +filename temp;
55347     +/* generate fileref for quantile_binning macro */
55348     +filename X "&binningCode";
55350     +/* determine if there are inputs to be binned */
55351     +%let numbinvars = 0;
55352     +%let intdsid = %sysfunc(open(work._intmid));
55353     +%if &intdsid %then %do;
55354     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
55355     +%end;
55356     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
55357     +%if &numbinvars > 0 %then %do;
55359     +/* get data in format needed for quantile_binning macro */
55360     +data work.vartable;
55361     +  set work._intmid;
55362     +  level = "INTERVAL";
55363     +  role  = "INPUT";
55364     +  rename variable=name;
55365     +run;
55367     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
55368     +%if %EM_FREQ ne %then %do;
55369     +   data work.freq;
55370     +     name="%EM_FREQ";
55371     +     role="FREQ";
55372     +   run;
55374     +   data work.vartable;
55375     +     set work.vartable work.freq;
55376     +   run;
55377     +%end;
55380     +/* perform quantile binning of data */
55381     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
55382     +%em_apps_quantile_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
55384     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
55385     +%end;
55386     +%else %do;
55387     +  /* initialize binmappings table */
55388     +  data &EM_USER_BINMAPPINGS;
55389     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
55390     +  run;
55392     +  data _null_;
55393     +    FILE X;
55395     +    put "&EM_CODEBAR;";
55396     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
55397     +    put "* &note;";
55398     +    put "&EM_CODEBAR;";
55399     +  run;
55401     +%end;
55403     +/* assign display_var values to binmappings table as well as initial group values */
55404     +data &EM_USER_BINMAPPINGS;
55405     +  set &EM_USER_BINMAPPINGS;
55406     +  length display_var $32 grp $8;
55407     +  display_var = name;
55409     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
55410     +    GRP = BIN + 1;
55411     +  %end;
55412     +  %else %do;
55413     +    GRP = BIN;
55414     +  %end;
55415     +run;
55417     +/* de-assign fileref */
55418     +filename X;
55420     +    /* append to binning code those values that were included in the importSubset data */
55421     +    %if &useImport eq 1 %then %do;
55422     +      %EM_IMPORT_BINNING(&binningcode);
55423     +    %end;
55425     +    /* append to binning code those values that were included in the freezeSubset data */
55426     +    %if &useFreeze eq 1 %then %do;
55427     +      %EM_FREEZE_BINNING(&binningcode);
55428     +    %end;
55430     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
55431     +      by NAME;
55432     +    run;
55434     +    /* create grouping for missing level */
55435     +    data tempmissvalues;
55436     +    run;
55438     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
55439     +       data tempmissvalues;
55440     +         %if ((&useImport eq 1) OR (&useFreeze eq 1)) %then %do;
55441     +           merge sortedmapping
55442     +           %if &useImport eq 1 %then %do;
55443     +              &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME))
55444     +           %end;
55445     +           %if &useFreeze eq 1 %then %do;
55446     +             &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME))
55447     +           %end;
55448     +           ;
55449     +         %end;
55450     +         %else %do;
55451     +           set sortedmapping;
55452     +         %end;
55453     +         GRP="1";
55454     +         bin="Missing";
55455     +         _split_value_ = "Missing";
55456     +         %if &useImport eq 1 %then %do;
55457     +            if _a then delete;
55458     +         %end;
55459     +         %if &useFreeze eq 1 %then %do;
55460     +            if _b then delete;
55461     +         %end;
55463     +       run;
55464     +    %end;
55467     +    /* create binData from binningCode */
55468     +    filename X "&binningCode";
55470     +    data &bindata;
55471     +      set &input;
55472     +      %inc X;
55473     +    run;
55475     +    filename X;
55477     +    /* create splitvals dataset */
55478     +    data tempsplitvals;
55479     +      set &EM_USER_BINMAPPINGS tempmissvalues;
55480     +      length newgroup _group_ _order_ 8 _level_ $8;
55481     +      newgroup =.;
55482     +      _LEVEL_ = 'ORDINAL';
55483     +      _Group_ = grp;
55484     +      rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
55485     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
55486     +    run;
55488     +    data tempsplitvals;
55489     +      set tempsplitvals;
55490     +      _order_ = _N_;
55491     +    run;
55493     +    /* determine if EM_USER_SPLITVALS already exists */
55494     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
55495     +    %if &sdsid > 0 %then %do;
55496     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
55497     +      %if &nvars > 0 %then %do;
55498     +        proc sql;
55499     +          reset noprint;
55500     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
55501     +        quit;
55502     +      %end;
55503     +      %else %let nobs=0;
55504     +    %end;
55505     +    %else %do;
55506     +       %let nobs=0;
55507     +       %let nvars=0;
55508     +    %end;
55509     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
55511     +    /* if useIMport=1 also include import definitions here as well */
55512     +    %if &useImport eq 1 %then %do;
55513     +      data tempImport;
55514     +        set &EM_USER_IMPORTSUBSET;
55515     +        _variable_ = binVar;
55516     +      run;
55517     +    %end;
55519     +    /* if useFreeze=1 also include frozen definitions here as well */
55520     +    %if &useFreeze eq 1 %then %do;
55521     +      data tempFreeze;
55522     +        length display_var $32;
55523     +        set &EM_USER_FreezeSUBSET;
55524     +        display_var = _variable_;
55525     +        _variable_ = binVar;
55526     +      run;
55527     +    %end;
55529     +    data &EM_USER_SPLITVALS;
55530     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
55531     +        set &EM_USER_SPLITVALS tempsplitvals
55532     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
55533     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
55534     +        %end;
55535     +        %if &useFreeze eq 1 %then %do;
55536     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
55537     +        %end;
55538     +        ;
55539     +      %end;
55540     +      %else %do;
55541     +        set tempsplitvals
55542     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
55543     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
55544     +        %end;
55545     +        %if &useFreeze eq 1 %then %do;
55546     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
55547     +        %end;
55548     +        ;
55549     +      %end;
55550     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
55551     +    run;
55553     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
55554     +    data tempvariableset;
55555     +      set &EM_DATA_VARIABLESET;
55556     +      where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
55557     +    run;
55559     +    /* add all interval vars that aren't special codes to the intervalvar macro */
55560     +    %let dsid = %sysfunc(open(work.tempvariableset));
55561     +    %if &dsid %then %do;
55562     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
55563     +      %let obs = %sysfunc(fetch(&dsid));
55564     +      %do %while(&obs=0);
55565     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
55566     +        %let classvars = &classvars &varname;
55567     +        %let qclassvars = &qclassvars "&varname";
55568     +        %let obs = %sysfunc(fetch(&dsid));
55569     +      %end;
55570     +    %end;
55571     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
55573     +    %if &classvars ne %then %do;
55574     +      proc dmdb data =&bindata classout=_classout nonorm;
55575     +        class &classvars;
55576     +      run;
55578     +      proc dmdb data=&bindata classout=_classout2;
55579     +       class &classvars;
55580     +      run;
55582     +      proc sort data=_classout; by NAME CRAW; run;
55583     +      proc sort data=_classout2; by NAME CRAW; run;
55585     +      data _classout;
55586     +        length _variable_ $32;
55587     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
55588     +        by NAME CRAW;
55589     +       _variable_ = NAME;
55590     +      run;
55592     +      proc sort data=_classout; by _variable_ _split_value_; run;
55593     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
55595     +      data &EM_USER_SPLITVALS;
55596     +        length _norm_level_ $200 _split_value_ $200;
55597     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
55598     +        by _variable_ _split_value_;
55599     +        LEVEL = trim(left(LEVEL));
55600     +        _split_value_ = trim(left(_split_value_));
55601     +        _norm_level_ = trim(left(_norm_level_));
55602     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
55603     +        drop NAME FREQUENCY TYPE CRAW NRAW;
55604     +      run;
55606     +      proc datasets library=work nolist;
55607     +        delete _classout _classout2;
55608     +      run;
55609     +      quit;
55610     +    %end;
55612     +    data &EM_USER_SPLITVALS;
55613     +      set &EM_USER_SPLITVALS;
55614     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
55615     +    run;
55618     +    proc sort data=&EM_USER_SPLITVALS;
55619     +      by DISPLAY_VAR _Group_;
55620     +    run;
55622     +    proc datasets library=work nolist;
55623     +      delete sortedmapping tempsplitvals tempmissvalues
55624     +      %if &useImport eq 1 %then %do;
55625     +        tempImport
55626     +      %end;
55627     +      %if &useFreeze eq 1 %then %do;
55628     +        tempFreeze
55629     +      %end;
55630     +      ;
55631     +    run;
55632     +    quit;
55633     +/*
55634     +%end;
55635     +%else %do;
55636     +    data &bindata;
55637     +      set &input;
55638     +    run;
55639     +%end;
55640     +*/
55641     +%mend EM_QUANTILE_BINNING;
55643     +%macro EM_ORDVARS_GROUP;
55645     +   /* retrieve all ordinal variables from the incoming dataset */
55646     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
55647     +     by NAME;
55648     +     where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
55649     +   run;
55651     +   /* add all vars marked as interval that are actually class vars to this data */
55652     +   %let nobs = 0;
55653     +   %let dsid = %sysfunc(open(WORK._DISCRETEMID));
55654     +   %if &dsid %then %do;
55655     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
55656     +     %if &nobs gt 0 %then %do;
55658     +     data tempvars;
55659     +       set &EM_DATA_VARIABLESET;
55660     +       if NAME in (
55661     +         %let obs = %sysfunc(fetch(&dsid));
55662     +         %do %while(&obs=0);
55663     +           %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
55664     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
55665     +           "&varname"
55666     +           %let obs = %sysfunc(fetch(&dsid));
55667     +         %end;
55668     +        );
55669     +     run;
55670     +     data tempvariableset;
55671     +       set tempvariableset tempvars;
55672     +     run;
55673     +     %end;
55674     +   %end;
55675     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
55677     +   %if &useImport eq 1 %then %do;
55678     +     /* remove all variables from tempvariableset that are included in the importsubset */
55679     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
55680     +       by _VARIABLE_ ;
55681     +     run;
55682     +     proc sort data=tempvariableset; by NAME; run;
55684     +     data tempvariableset;
55685     +       merge tempimport(in=_a) tempvariableset(in=_b);
55686     +       by NAME;
55687     +       if ^_a then output;
55688     +     run;
55689     +   %end;
55691     +   %if &useFreeze eq 1 %then %do;
55692     +     /* remove all variables from tempvariableset that are included in the freezesubset */
55693     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
55694     +       by _VARIABLE_ ;
55695     +     run;
55696     +     proc sort data=tempvariableset; by NAME; run;
55698     +     data tempvariableset;
55699     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
55700     +       by NAME;
55701     +       if ^_a then output;
55702     +     run;
55703     +   %end;
55705     +   /* get dataset of distinct values for the ordinal variable */
55706     +   %let nobs = 0;
55707     +   %let dsid = %sysfunc(open(WORK.tempvariableset));
55708     +   %if &dsid %then %do;
55709     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
55710     +     %if &nobs gt 0 %then %do;
55711     +         %let obs = %sysfunc(fetch(&dsid));
55712     +         %do %while(&obs=0);
55713     +           %let varnum = %sysfunc(VARNUM(&dsid, NAME));
55714     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
55715     +           %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
55716     +           %let input_type = %sysfunc(getvarc(&dsid, &typenum));
55717     +           %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
55718     +           %let input_fmt = %sysfunc(getvarc(&dsid, &fmtnum));
55719     +           %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
55720     +           %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
55721     +           %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
55723     +           data temp;
55724     +             set &EM_USER_BINDATA(keep=&varname);
55725     +             %if &input_fmt ne %then %do;
55726     +               %dmnormcp(put(&varname, &input_fmt), _norm);
55727     +             %end;
55728     +             %else %do;
55729     +               %dmnormcp(&varname, _norm);
55730     +             %end;
55731     +             keep &varname _norm;
55732     +           run;
55734     +          proc dmdb data=temp classout=_classout2;
55735     +           class _norm;
55736     +         run;
55737     +         proc sort data=_classout2; by LEVEL; run;
55739     +         /* re-order numeric inputs based on non-normalized values */
55740     +         %if &input_type eq N %then %do;
55741     +           proc sort data=temp nodupkey; by _norm; run;
55742     +           data varvals;
55743     +             merge temp _classout2(rename=(LEVEL=_norm));
55744     +             by _norm;
55745     +             if craw='' and _norm ne '.' then delete;
55746     +             keep &varname _norm nraw craw;
55747     +           run;
55749     +           proc sort data=varvals; by &varname; run;
55750     +         %end;
55751     +         %else %do;
55752     +           data varvals;
55753     +              set _classout2(rename=(LEVEL=_norm));
55754     +              if _norm='' then delete;
55755     +              if _norm='.' then delete;
55756     +              keep _norm;
55757     +           run;
55758     +         %end;
55759     +         data varvals;
55760     +           set varvals;
55761     +           if &varname="." then delete;
55762     +           if upcase(&varname) = "MISSING" then delete;
55763     +         run;
55765     +          /* generate Splitvals Data */
55766     +          data tempsplitvals;
55767     +            length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ _order_ 8 _level_ $8 _norm_level_ $200 ;
55769     +            %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
55770     +              DISPLAY_VAR="&varname";
55771     +              _VARIABLE_ ="&varname";
55772     +              newgroup   =.;
55773     +              _group_    =1;
55774     +              _Split_Value_="Missing";
55775     +              _level_    ="ORDINAL";
55776     +              output;
55777     +              %let group=2;
55778     +            %end;
55779     +            %else %let group=1;
55781     +            %let vdsid = %sysfunc(open(WORK.VARVALS));
55782     +            %if &vdsid %then %do;
55783     +            %let namenum = %sysfunc(VARNUM(&vdsid, _norm));
55784     +            /*%let group = 2;*/
55785     +            %let vobs = %sysfunc(fetch(&vdsid));
55786     +            %do %while(&vobs=0);
55787     +                %let nameval = %bquote(%upcase(%sysfunc(getvarc(&vdsid, &namenum))));
55789     +                DISPLAY_VAR   = "&varname";
55790     +                _variable_    = "&varname";
55791     +                newgroup      = .;
55792     +                _group_       = &group;
55793     +                _split_value_ = "&nameval";
55794     +                _level_       = 'ORDINAL';
55795     +                output;
55797     +              %let group = %eval(&group + 1);
55798     +              %let vobs = %sysfunc(fetch(&vdsid));
55799     +            %end;
55800     +            %if &vdsid %then %let vdsid = %sysfunc(close(&vdsid));
55801     +          run;
55803     +          /* determine if EM_USER_SPLITVALS already exists */
55804     +          %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
55805     +          %if &sdsid > 0 %then %do;
55806     +            %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
55807     +            %if &nvars > 0 %then %do;
55808     +               proc sql;
55809     +                reset noprint;
55810     +                select count(*) into :nobs from &EM_USER_SPLITVALS;
55811     +               quit;
55812     +            %end;
55813     +            %else %let nobs=0;
55814     +            %end;
55815     +            %else %do;
55816     +              %let nobs=0;
55817     +              %let nvars=0;
55818     +            %end;
55819     +          %end;
55820     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
55822     +          /* if tempsplitvals doesn't exist; create empty data set */
55823     +          %let sdsid = %sysfunc(open(work.tempsplitvals));
55824     +          %if &sdsid <= 0 %then %do;
55825     +            data tempsplitvals;
55826     +              length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ 8 _level_ $8 ;
55827     +            run;
55828     +          %end;
55829     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
55831     +          data tempsplitvals;
55832     +            set tempsplitvals;
55833     +            _order_ = _N_;
55834     +          run;
55836     +          %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
55837     +             proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
55838     +             proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
55839     +          %end;
55841     +          data &EM_USER_SPLITVALS;
55842     +           %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
55843     +             merge &EM_USER_SPLITVALS tempsplitvals;
55844     +             by _variable_ _split_value_;
55845     +           %end;
55846     +           %else %do;
55847     +             set tempsplitvals;
55848     +           %end;
55849     +           if display_var eq "" then delete;
55850     +           if _norm_level_ eq "" then _norm_level_ = _split_value_;
55851     +           keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_ _order_;
55852     +         run;
55854     +           %let obs = %sysfunc(fetch(&dsid));
55855     +         %end;
55856     +     %end;
55857     +   %end;
55858     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
55860     +   proc sort data=&EM_USER_SPLITVALS;
55861     +      by DISPLAY_VAR _Group_;
55862     +   run;
55864     +   /* delete temporary datasets */
55865     +   proc datasets library= work nolist;
55866     +     delete tempsplitvals varvals tempvariableset tempvars
55867     +     ;
55868     +   run;
55869     +   quit;
55870     +%mend EM_ORDVARS_GROUP;
55873     +%macro EM_CLASSVARS_GROUP(groupRare);
55875     +   /* retrieve all class variables from the incoming dataset */
55876     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
55877     +     by NAME;
55878     +     where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
55879     +   run;
55881     +   %if &useImport eq 1 %then %do;
55882     +     /* remove all variables from tempvariableset that are included in the importsubset */
55883     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
55884     +       by _VARIABLE_ ;
55885     +     run;
55886     +     proc sort data=tempvariableset; by NAME; run;
55888     +     data tempvariableset;
55889     +       merge tempimport(in=_a) tempvariableset(in=_b);
55890     +       by NAME;
55891     +       if ^_a then output;
55892     +     run;
55893     +   %end;
55895     +   %if &useFreeze eq 1 %then %do;
55896     +     /* remove all variables from tempvariableset that are included in the freezesubset */
55897     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
55898     +       by _VARIABLE_ ;
55899     +     run;
55900     +     proc sort data=tempvariableset; by NAME; run;
55902     +     data tempvariableset;
55903     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
55904     +       by NAME;
55905     +       if ^_a then output;
55906     +     run;
55907     +   %end;
55909     +   /* run dmdb to retrieve list of all class levels and counts */
55910     +   %let dsid = %sysfunc(open(work.tempvariableset));
55911     +   %let nobs = 0;
55912     +   %if &dsid %then %do;
55913     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
55915     +   %end;
55917     +   %if &nobs gt 0 %then %do;
55918     +     proc dmdb data=&EM_IMPORT_DATA classout=tempclassout;
55919     +       class
55921     +        %let namenum = %sysfunc(VARNUM(&dsid, NAME));
55922     +        %let obs = %sysfunc(fetch(&dsid));
55923     +        %do %while(&obs=0);
55924     +           %let name = %sysfunc(getvarc(&dsid, &namenum));
55925     +           &name
55926     +           %let obs = %sysfunc(fetch(&dsid));
55927     +        %end;
55928     +     ;
55930     +     %if %EM_FREQ ne %then %do;
55931     +        freq %EM_FREQ;
55932     +     %end;
55933     +    run;
55934     +   %end;
55935     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
55937     +   %let dsid = %sysfunc(open(work.tempclassout));
55938     +   %let nobs = 0;
55939     +   %if &dsid %then %do;
55940     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
55941     +     %let dsid = %sysfunc(close(&dsid));
55942     +   %end;
55944     +   %if &nobs gt 0 %then %do;
55945     +    data tempclassout;
55946     +       set tempclassout;
55947     +       if LEVEL='MISSING' then level='Missing';
55948     +    run;
55950     +    proc sort data=tempclassout nodupkey;
55951     +      by NAME descending FREQUENCY LEVEL;
55952     +    run;
55954     +    data tempds(keep=NAME NOBS);
55955     +      retain NOBS;
55956     +      set tempclassout;
55957     +      by NAME;
55958     +      if first.NAME then
55959     +        NOBS = frequency;
55960     +      else
55961     +        NOBS=NOBS+frequency;
55962     +      if last.name then do;
55963     +        output;
55964     +      end;
55965     +    run;
55967     +    data tempds;
55968     +      merge tempclassout
55969     +      tempds;
55970     +      by NAME;
55971     +      if ((LEVEL ne '') AND (LEVEL ne "."));
55972     +      %if &groupRare eq Y %then %do;
55973     +        PCT = 100 * (FREQUENCY/NOBS);
55974     +        if PCT < &EM_PROPERTY_GROUPCUTOFF then flag=1;
55975     +        else flag=0;
55976     +      %end;
55977     +      %else %do;
55978     +        flag = 0;
55979     +      %end;
55980     +    run;
55982     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
55983     +      data tempmissvalues;
55984     +        length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
55986     +      %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
55987     +      %if &dsid %then %do;
55988     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
55989     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
55990     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
55991     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
55992     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
55993     +        %let obs = %sysfunc(fetch(&dsid));
55995     +        %do %while(&obs=0);
55996     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
55997     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
55998     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
55999     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
56001     +          NAME="&var";
56002     +          LEVEL="Missing";
56003     +          _LEVEL_="&varlvl";
56004     +          _group_ = 1;
56005     +          output;
56007     +          %let obs = %sysfunc(fetch(&dsid));
56008     +        %end;
56009     +      %end;
56010     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
56011     +      run;
56012     +    %end;
56014     +    /* generate Splitvals Data */
56015     +    data tempsplitvals;
56016     +      length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
56018     +      set tempclassout
56019     +      %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
56020     +         tempmissvalues
56021     +      %end;
56022     +      ;
56023     +      if ((level ne '') AND (level ne '.'));
56025     +     %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
56026     +     %if &dsid %then %do;
56027     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
56028     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
56029     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
56030     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
56031     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
56032     +        %let obs = %sysfunc(fetch(&dsid));
56034     +        %do %while(&obs=0);
56035     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
56036     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
56037     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
56038     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
56040     +          if NAME = "&var" then do;
56041     +            _LEVEL_ = "&varlvl";
56043     +          /* cycle through levels, assigning group values;              */
56044     +          /* flag=1 indicates to put value in "_OTHER_" group;          */
56045     +          /* flag=0 indicates that value shoudld be in group of its own */
56046     +          %let choice = ((NAME="&Var") and (FLAG=0));
56047     +          %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
56048     +            %let group=2;
56049     +          %end;
56050     +          %else %do;
56051     +            %let group = 1;
56052     +          %end;
56053     +          %let fdsid = %sysfunc(open(work.tempds(where=(&choice))));
56054     +          %if &fdsid %then %do;
56056     +            %let lvlnum = %sysfunc(VARNUM(&fdsid, LEVEL));
56057     +            %let fobs = %sysfunc(fetch(&Fdsid));
56058     +            %let fflag = 0;
56059     +            %do %while(&fobs=0);
56060     +              %let fflag = 1;
56061     +              %let temp = %nrbquote(%sysfunc(getvarc(&fdsid, &lvlnum)));
56062     +              %let level = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
56063     +              %let level = %nrbquote(%sysfunc(strip(&level)));
56064     +              %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
56065     +                %if &group eq 2 %then %do;
56066     +                   if LEVEL = "&level" then _GROUP_ = &group;
56067     +                %end;
56068     +                %else %do;
56069     +                   else if LEVEL = "&level" then _GROUP_ = &group;
56070     +                %end;
56071     +              %end;
56072     +              %else %do;
56073     +                %if &group eq 1 %then %do;
56074     +                   if LEVEL = "&level" then _GROUP_ = &group;
56075     +                %end;
56076     +                %else %do;
56077     +                   else if LEVEL = "&level" then _GROUP_ = &group;
56078     +                %end;
56079     +              %end;
56081     +              %let group = %eval(&group + 1);
56082     +              %let fobs = %sysfunc(fetch(&fdsid));
56083     +            %end;
56085     +          %end;
56086     +          %if &fflag eq 1 %then %do;
56087     +            else if LEVEL ^='Missing' then _GROUP_ = &group;
56088     +          %end;
56089     +          end;
56091     +          %if &fdsid %then %let fdsid = %sysfunc(close(&fdsid));
56092     +          %let obs = %sysfunc(fetch(&dsid));
56093     +        %end;
56094     +     %end;
56095     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
56096     +     _VARIABLE_ = NAME;
56097     +     newgroup = .;
56098     +     rename NAME = DISPLAY_VAR
56099     +            LEVEL = _SPLIT_VALUE_;
56100     +     keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
56101     +    run;
56102     +  %end;
56103     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
56105     +    /* determine if EM_USER_SPLITVALS already exists */
56106     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
56107     +    %if &sdsid > 0 %then %do;
56108     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
56109     +      %if &nvars > 0 %then %do;
56110     +        proc sql;
56111     +          reset noprint;
56112     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
56113     +        quit;
56114     +      %end;
56115     +      %else %let nobs=0;
56116     +    %end;
56117     +    %else %do;
56118     +       %let nobs=0;
56119     +       %let nvars=0;
56120     +    %end;
56121     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
56123     +   /* if tempsplitvals doesn't exist; create empty data set */
56124     +    %let sdsid = %sysfunc(open(work.tempsplitvals));
56125     +    %if &sdsid <= 0 %then %do;
56126     +      data tempsplitvals;
56127     +        length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
56128     +      run;
56129     +    %end;
56130     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
56132     +    %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
56133     +      proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
56134     +      proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
56135     +    %end;
56137     +    /* if useIMport=1 also include import definitions here as well */
56138     +    %if &useImport eq 1 %then %do;
56139     +      proc sort data=&EM_USER_IMPORTSUBSET; by _variable_ _split_value_; run;
56140     +    %end;
56141     +    %if &useFreeze eq 1 %then %do;
56142     +      proc sort data=&EM_USER_FREEZESUBSET; by _variable_ _split_value_; run;
56143     +    %end;
56144     +    data &EM_USER_SPLITVALS;
56145     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
56146     +        merge &EM_USER_SPLITVALS tempsplitvals
56147     +        %if &useImport eq 1 %then %do;
56148     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
56149     +        %end;
56150     +        %if &useFreeze eq 1 %then %do;
56151     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
56152     +        %end;
56154     +        ;
56155     +        by _variable_ _split_value_
56156     +        ;
56157     +      %end;
56158     +      %else %do;
56159     +        set tempsplitvals
56160     +        %if &useImport eq 1 %then %do;
56161     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
56162     +        %end;
56163     +        %if &useFreeze eq 1 %then %do;
56164     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
56165     +        %end;
56166     +        ;
56167     +      %end;
56168     +      if display_var eq "" then delete;
56169     +      if _norm_level_ eq "" then _norm_level_ = _split_value_;
56170     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
56171     +    run;
56173     +    proc sort data=&EM_USER_SPLITVALS;
56174     +      by DISPLAY_VAR _Group_;
56175     +    run;
56177     +   /* delete temporary datasets */
56178     +   proc datasets library= work nolist;
56179     +     delete tempsplitvals tempds tempclassout tempvariableset tempvars
56180     +     %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
56181     +       tempmissvalues
56182     +     %end;
56183     +     ;
56184     +   run;
56185     +   quit;
56186     +%mend EM_CLASSVARS_GROUP;
56189     +%macro EM_SUMMARIZE_TABLE(data, inputData, outData, varname=);
56191     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
56193     +  data temptrain ;
56194     +    set &data;
56195     +  run;
56197     +  /* normalize all values prior to calculating counts */
56198     +  filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
56199     +  %include _temp;
56200     +  filename _temp;
56201     +  filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
56202     +  %include _temp;
56203     +  filename _temp;
56205     +  proc sort data=&EM_USER_VARMAPPINGS
56206     +  %if &varname ne %then %do;
56207     +    (where=(_variable_="&varname"))
56208     +  %end;
56209     +  out=tempmap; by _variable_; run;
56211     +  data _cmeta;
56212     +    merge tempvarset tempmap(in=_a rename=(_variable_=name ));
56213     +    by name;
56214     +    if ((_a) or (role="TARGET"));
56215     +    if role="INPUT" then name=_proc_var_;
56216     +    if role="TARGET" then role="INPUT";
56217     +    level = procLevel;
56218     +    index = kindex(name, "BIN_");
56219     +    if index gt 0 then do;
56220     +     level="ORDINAL";
56221     +     format = "";
56222     +    end;
56223     +    drop index;
56224     +  run;
56226     +  %em_PreNormalizeClassVars(incmeta=_cmeta, outcmeta=_cmetatmp);
56227     +  %em_NormalizeClassVars(indata=work.temptrain, cmeta=_cmetatmp, encodedTarget=N, outdata=_tmp_train);
56229     +  proc sort data=&inputData out=sortedmap; by _proc_var_; run;
56231     +  data _null_;
56232     +    set sortedmap end=eof;
56233     +    by _proc_var_;
56234     +    if _n_=1 then do;
56235     +      call execute("ods output CrossTabFreqs=crosstabfreq ;");
56236     +      call execute("proc freq data=_tmp_train order=formatted addnames;");
56237     +      call execute("tables ("||_proc_var_);
56238     +    end;
56239     +    else do;
56240     +      call execute(_proc_var_);
56241     +    end;
56242     +    if eof then do;
56243     +      call execute(") * %EM_BINARY_TARGET/ missing;");
56244     +      %if %EM_FREQ ne %then %do;
56245     +        call execute("weight %EM_FREQ;");
56246     +      %end;
56247     +      call execute("run;");
56248     +      call execute("ods output close;");
56249     +    end;
56250     +  run;
56252     +  data _null_;
56253     +    set sortedmap end=eof;
56254     +    by _proc_var_;
56255     +    if _n_=1 then do;
56256     +      call execute("data crosstabs;");
56257     +      call execute("  length _variable_ _split_value_  $200 ;");
56258     +      call execute("  set crosstabfreq(where=(_type_='11'));");
56259     +      call execute("  _variable_= RowVariable;");
56260     +    end;
56262     +    call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
56263     +    call execute("  _split_value_="||_proc_var_||";");
56264     +    call execute("end;");
56266     +    if eof then do;
56267     +      call execute("keep _variable_ _split_value_ %EM_BINARY_TARGET Frequency Percent display_var;");
56268     +      call execute("run;");
56269     +    end;
56270     +  run;
56272     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
56274     +  data crosstabs;
56275     +    length display_var $32;
56276     +    merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
56277     +    by _variable_;
56278     +  run;
56280     +  proc sort data=crosstabs; by display_var _split_value_; run;
56281     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
56283     +  data crosstabs;
56284     +    merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
56285     +    by display_var;
56286     +    index = kindex(_variable_, "BIN_");
56287     +    if index gt 0 then do;
56288     +     level="ORDINAL";
56289     +     format = "";
56290     +    end;
56291     +    _temp = %EM_BINARY_TARGET;
56292     +    /*
56293     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
56294     +      %if &target_format ne %then %do;
56295     +        %if &target_type eq C %then %do;
56296     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
56297     +        %end;
56298     +        %else %do;
56299     +           %dmnormcp(put(%EM_BINARY_TARGET, &target_format), _temp);
56300     +        %end;
56301     +      %end;
56302     +      %else %do;
56303     +        %dmnormcp(%EM_BINARY_TARGET, _temp);
56304     +      %end;
56305     +    %end;
56306     +    %else %do;
56307     +      _temp = %EM_BINARY_TARGET;
56308     +    %end;
56309     +*/
56311     +    drop index;
56312     +  run;
56314     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
56316     +  data &outdata;
56317     +    length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate  8 type $1 valfmt $20 ;
56319     +    retain eventCount noneventCount ;
56320     +    set crosstabs;
56321     +    by  _variable_ _split_value_;
56323     +    if first._split_value_ then do;
56324     +     total=0;
56325     +     eventcount=0;
56326     +     noneventcount=0;
56327     +    end;
56329     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
56330     +      %if &target_format ne %then %do;
56331     +        if upcase(strip(_temp))="&target_event" then
56332     +          eventCount=Frequency;
56333     +      %end;
56334     +      %else %do;
56335     +         if upcase(strip(_temp)) ="&target_event" then
56336     +          eventCount=Frequency;
56337     +      %end;
56338     +    %end;
56339     +    %else %do;
56340     +      if _temp=&target_event then
56341     +        eventCount=Frequency;
56342     +    %end;
56343     +    else
56344     +      noneventCount=Frequency;
56346     +    if last._split_value_ then do;
56347     +      total = eventCount + noneventCount;
56349     +      if total ne 0 then do;
56350     +        eventRate = eventCount / total;
56351     +        nonEventRate = nonEventCount / total;
56352     +      end;
56353     +      else do;
56354     +        eventRate = 0;
56355     +        nonEventRate = 0;
56356     +      end;
56359     +     output;
56360     +    end;
56361     +    valfmt = format;
56363     +    drop _temp Frequency percent;
56364     +   run;
56366     +%mend EM_SUMMARIZE_TABLE;
56369     +%macro EM_FINE_DETAIL(bindata, varmappings, fineDetailData, splitVals, binMappings, interactiveFlag=0);
56371     +   proc freq data=&bindata noprint;
56372     +     table %EM_BINARY_TARGET / missing out=temptargetB;
56373     +     %if %EM_FREQ ne %then %do;
56374     +       weight %EM_FREQ;
56375     +     %end;
56376     +   run;
56378     +   %let tdsid = %sysfunc(open(work.temptargetB));
56379     +   %if &tdsid %then %do;
56380     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
56381     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
56383     +      %let temp = %nrbquote(%sysfunc(strip(&target_event)));
56384     +      %let target_event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
56385     +      %let temp = %nrbquote(%sysfunc(strip(&target_nonevent)));
56386     +      %let target_nonevent = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
56389     +      %let obs = %sysfunc(fetch(&tdsid));
56390     +      %do %while(&obs = 0);
56391     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
56392     +           %if &target_type eq C %then %do;
56393     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
56394     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
56395     +           %end;
56396     +           %else
56397     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
56399     +           %if &target_format ne %then %do;
56400     +              %if &target_type eq C %then %do;
56401     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
56402     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
56403     +              %end;
56404     +              %else
56405     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
56406     +           %end;
56407     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
56408     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
56410     +           %if "&tarvalue" eq "&target_event" %then %do;
56411     +             %let totalevent = &count;
56412     +           %end;
56413     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
56414     +              %let totalnonevent= &count;
56415     +           %end;
56416     +         %end;
56417     +         %else %do;
56418     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
56419     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
56421     +           %if &tarvalue eq &target_event %then %do;
56422     +             %let totalevent = &count;
56423     +           %end;
56424     +           %else %if &tarvalue eq &target_nonevent %then %do;
56425     +              %let totalnonevent= &count;
56426     +           %end;
56427     +         %end;
56428     +         %let obs = %sysfunc(fetch(&tdsid));
56429     +      %end;
56430     +   %end;
56431     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
56433     +   proc datasets lib=work nolist;
56434     +      delete temptargetB;
56435     +   run;
56436     +   quit;
56438     +   %if &interactiveFlag eq 0 %then %do;
56439     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData);
56440     +   %end;
56441     +   %else %do;
56442     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData, varname=&wherevar);
56443     +   %end;
56446     +   data &fineDetailData;
56447     +     length display_var $32 newgroup numsplitval 8;
56448     +     set &fineDetailData;
56450     +     display_var = _variable_;
56452     +     index = kindex(display_var, "BIN_");
56453     +     if index gt 0 then do;
56454     +       display_var = ksubstr(display_var, 5);
56455     +     end;
56457     +     index2 = kindex(display_var, "SV_");
56458     +     if index2 gt 0 then do;
56459     +       display_var = ksubstr(display_var, 4);
56460     +     end;
56462     +     /* re-code missing values to "Missing" */
56463     +     if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
56464     +     _index_ = _N_;
56465     +     newgroup = .;
56466     +     drop index index2 ;
56467     +   run;
56469     +   /* add group information to fineDetailData; */
56470     +   /* add label information for binned variables to fineDetailData*/
56472     +   proc sort data=&fineDetailData; by _variable_ _split_value_; run;
56474     +   data tmpsplitvals;
56475     +     set &splitvals;
56476     +     _norm_level_ = upcase(_norm_level_);
56477     +     if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
56478     +    * drop _split_value_;
56479     +   run;
56481     +   proc sort data=tmpsplitvals out=sortedsplit; by _variable_ _split_value_; run;
56482     +   proc datasets library=work nolist;
56483     +     delete tmpsplitvals;
56484     +   run;
56485     +   quit;
56487     +   proc sort data=&BINMAPPINGS out=sortedbin; by BIN_NAME BIN; run;
56489     +   data &fineDetailData;
56490     +      merge &fineDetailData(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
56491     +      by _variable_ _split_value_;
56492     +      if _a then do;
56493     +        binFlag = 1;
56494     +        VALUE=EM_BIN_LABEL;
56495     +      end;
56496     +      else do;
56497     +        binFlag = 0;
56498     +        *VALUE=strip(display_var)!!"="!!strip(_split_value_);
56499     +        VALUE=strip(_split_value_);
56501     +      end;
56503     +      if ((eventCount=.) or (nonEventCount=.)) then do;
56504     +        eventCount=0;
56505     +        nonEventCount=0;
56506     +        total = 0;
56507     +        eventRate= 0;
56508     +        nonEventRate = 0;
56509     +      end;
56511     +      eventCount = round(eventCount, .001);
56512     +      nonEventCount = round(nonEventCount, .001);
56513     +      total= round(total, .001);
56514     +      eventRate = round(eventRate, .001);
56515     +      nonEventRate = round(nonEventRate, .001);
56517     +     if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then
56518     +         numsplitval = _split_value_;
56519     +     else if ((type='N') AND (valfmt ne "")) then
56520     +        numsplitval = _order_;
56521     +     else numsplitval=.;
56523     +      if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
56524     +      if _a and ^_b then delete;
56525     +      if _c and ^_b then delete;
56526     +      drop NAME EM_BIN_LABEL valfmt;
56527     +   run;
56529     +   /* for class variables that have values falling into the "other" category, set _LEVEL_ and _GROUP_ based on Missing level */
56530     +   data &fineDetailData;
56531     +     set &fineDetailData;
56533     +     %let choice = _LEVEL_ ne "INTERVAL" and _SPLIT_VALUE_ eq "Missing";
56534     +     %let dsid = %sysfunc(open(&splitvals(where=(&choice))));
56535     +     %if &dsid %then %do;
56536     +       %let dnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
56537     +       %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
56538     +       %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
56540     +       %let obs = %sysfunc(fetch(&dsid));
56541     +       %do %while(&obs=0);
56542     +         %let dispvar = %sysfunc(getvarc(&dsid, &dnum));
56543     +         %let lvl     = %sysfunc(getvarc(&dsid, &lvlnum));
56544     +         %let group   = %sysfunc(getvarn(&dsid, &grpnum));
56546     +         if DISPLAY_VAR = "&dispvar" then do;
56547     +           if _LEVEL_ = "" then _LEVEL_ ="&lvl";
56548     +           if _GROUP_ = . then _GROUP_ = &group;
56549     +         end;
56551     +         %let obs = %sysfunc(fetch(&dsid));
56552     +       %end;
56553     +     %end;
56554     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
56555     +     if _GROUP_ = . then delete;
56556     +    * if binFlag=1 and UB=LB then delete;
56557     +    * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
56558     +   run;
56560     +   proc sort data=&fineDetailData;
56561     +     by DISPLAY_VAR _index_;
56562     +   run;
56564     +   proc datasets lib=work nolist;
56565     +     delete sortedsplit sortedbin
56566     +     ;
56567     +   run;
56568     +   quit;
56569     +%mend EM_FINE_DETAIL;
56571     +%macro EM_CREATE_GROUPING(bindata, fineDetailData, coarse);
56573     +   proc freq data=&bindata noprint;
56574     +     table %EM_BINARY_TARGET / missing out=temptargetC;
56575     +     %if %EM_FREQ ne %then %do;weight %EM_FREQ;
56576     +     %end;
56577     +   run;
56579     +   %let tdsid = %sysfunc(open(work.temptargetC));
56580     +   %if &tdsid %then %do;
56581     +      %let tarnum = %sysfunc(VARNUM(&tdsid, %EM_BINARY_TARGET));
56582     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
56584     +      %let obs = %sysfunc(fetch(&tdsid));
56585     +      %do %while(&obs = 0);
56586     +        /* %if &target_type eq C or &target_format ne %then %do; */
56587     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
56588     +           %if &target_type eq C %then %do;
56589     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
56590     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
56591     +           %end;
56592     +           %else
56593     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
56595     +           %if &target_format ne %then %do;
56596     +              %if &target_type eq C %then %do;
56597     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
56598     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
56599     +              %end;
56600     +              %else
56601     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
56602     +           %end;
56603     +           %let tarvalue =%nrbquote(%upcase(&tarvalue));
56604     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
56606     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
56607     +           %let target_event = %nrbquote(%sysfunc(strip(&target_event)));
56608     +           %let target_nonevent = %nrbquote(%sysfunc(strip(&target_nonevent)));
56610     +           %if "&tarvalue" eq "&target_event" %then %do;
56611     +             %let totalevent = &count;
56612     +           %end;
56613     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
56614     +              %let totalnonevent= &count;
56615     +           %end;
56616     +         %end;
56617     +         %else %do;
56618     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
56619     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
56621     +           %if &tarvalue eq &target_event %then %do;
56622     +             %let totalevent = &count;
56623     +           %end;
56624     +           %else %if &tarvalue eq &target_nonevent %then %do;
56625     +              %let totalnonevent= &count;
56626     +           %end;
56627     +         %end;
56628     +         %let obs = %sysfunc(fetch(&tdsid));
56629     +      %end;
56630     +   %end;
56631     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
56633     +   proc datasets lib=work nolist;
56634     +      delete temptargetC;
56635     +   run;
56636     +   quit;
56638     +   proc means data=&FINEDETAILDATA noprint;
56639     +      var eventCount nonEventCount;
56640     +      class _variable_  _group_;
56641     +      output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
56642     +   run;
56644     +   proc sort data=summ(drop=_type_ _freq_);
56645     +     by _variable_ _group_;
56646     +   run;
56648     +   data gini(keep=_variable_ eventCount nonEventCount groupresprate)
56649     +        tempcoarse(keep=_variable_  _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
56650     +        set summ;
56651     +        format groupresprate 6.2;
56652     +        format groupnonresprate 6.2;
56653     +        by _variable_ ;
56654     +        if _group_=. then do;
56655     +        end;
56656     +        else do;
56657     +           respper = eventCount / &totalEvent;
56658     +           nrespper = nonEventCount / &totalNonEvent;
56660     +           if ((nonEventCount = 0) AND (eventCount = 0)) then do;
56661     +                groupresprate=0;
56662     +                groupNonresprate = 0;
56663     +                eventRate = 0;
56664     +                nonEventRate = 0;
56665     +           end;
56666     +           else do;
56667     +               groupresprate = eventCount / (eventCount + nonEventCount) * 100;
56668     +               groupNonRespRate = 100 - groupRespRate;
56669     +               eventRate = eventCount / &totalEvent * 100;
56670     +               nonEventRate = nonEventCount / &totalNonEvent * 100;
56671     +            end;
56673     +           output gini tempcoarse;
56675     +        end;
56676     +   run;
56677     +   proc sort data=gini;
56678     +      by _variable_ descending groupresprate;
56679     +   run;
56681     +   data gini(keep= _variable_ _gini_);
56682     +     retain between within cumresp cumnresp;
56683     +     set gini(keep=_variable_  eventCount nonEventCount);
56684     +     by _variable_;
56685     +     if first._variable_ then do;
56686     +       between  = 0;
56687     +       within   = 0;
56688     +       cumresp  = 0;
56689     +       cumnresp = 0;
56690     +     end;
56691     +     between + 2 * cumnresp * eventCount;
56692     +     within + nonEventCount * eventCount;
56693     +     cumresp + eventCount;
56694     +     cumnresp + nonEventCount;
56695     +     if last._variable_ then do;
56696     +       if ^(cumnresp=0 or cumresp=0) then do;
56697     +         _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
56698     +         output;
56699     +       end;
56700     +     end;
56701     +   run;
56703     +   data tempdisplayvar;
56704     +      set &EM_USER_VARMAPPINGS;
56705     +      rename _variable_ = display_var
56706     +      _proc_var_ = _variable_;
56707     +   keep _variable_ _proc_var_ label;
56708     +   run;
56709     +   proc sort data=tempdisplayvar; by _variable_; run;
56711     +   data  &COARSE;
56712     +     length display_Var $32 label _label_ $200 role $10 _group_ 8;
56713     +     merge tempdisplayvar tempcoarse gini ;
56714     +     by _variable_;
56715     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
56716     +           eventRate   = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventrate_vlabel , NOQUOTE))"
56717     +           nonEventRate = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventrate_vlabel , NOQUOTE))"
56718     +           _group_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel , NOQUOTE))"
56719     +           role       = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel , NOQUOTE))"
56720     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_gini_vlabel  , NOQUOTE))"
56721     +           eventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventcount_vlabel  , NOQUOTE))"
56722     +           noneventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventcount_vlabel  , NOQUOTE))"
56723     +           groupresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupresprate_vlabel  , NOQUOTE))"
56724     +           groupnonresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupnonresprate_vlabel  , NOQUOTE))"
56725     +           ;
56727     +    eventCount = round(eventCount, .001);
56728     +    nonEventCount = round(nonEventCount, .001);
56729     +    groupRespRate = round(groupRespRate, .001);
56731     +     drop _variable_ index index2 respper nrespper;
56732     +   run;
56734     +   proc datasets library=work nolist;
56735     +     delete  tempcoarse gini             ;
56737     +   run;
56738     +   quit;
56740     +%mend EM_CREATE_GROUPING;
56744     +%macro EM_GENERATE_LABELVALUES(filename, splitvals, binmappings, coarse);
56746     +         data _null_;
56747     +            FILE &filename;
56748     +            put " length _LABEL_ $200;";
56749     +            put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
56750     +         run;
56752     +         proc sort data=&SPLITVALS out=work.sortedsplitval; by display_var _split_Value_; run;
56753     +         proc sort data=&BINMAPPINGS; by display_var bin; run;
56755     +         data temp;
56756     +           merge work.sortedsplitval(in=_a) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
56757     +           by Display_Var _Split_value_;
56758     +           if upcase(_Split_value_) ne 'MISSING';
56759     +           if _a then output;
56760     +           if display_var eq '' then delete;
56761     +         run;
56763     +         data temp_missing;
56764     +           merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
56765     +           by Display_Var _Split_value_;
56766     +           if upcase(_Split_value_) eq 'MISSING';
56767     +           if _a then output;
56768     +           keep _variable_ display_var missgrp;
56769     +         run;
56771     +         proc sort data=temp out=class;
56772     +            by _variable_ _group_ LB;
56773     +         run;
56775     +         data _null_;
56777     +            file &filename MOD;
56778     +            length string $200 flag 8;
56779     +            retain string flag;
56780     +            set class end=eof;
56781     +            by _variable_  _group_;
56783     +            index = kindex(_variable_, "BIN_");
56784     +            if index gt 0 then do;
56785     +              if first._group_ then do;
56786     +                flag = 0;
56787     +                if ^first._variable_ then
56788     +                    put 'else';
56789     +                 else
56790     +                    put ' ';
56792     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
56793     +                          !!strip(put(_GROUP_,best12.))!!' then do;';
56794     +                 put string;
56796     +                 if LB ne . then do;
56797     +                   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
56798     +                    string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
56799     +                 end;
56800     +                 else do;
56801     +                    flag = 1;
56802     +                    *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
56803     +                    string = " _LABEL_='"!!strip(DISPLAY_VAR);
56804     +                 end;
56806     +              end;
56807     +              if last._Group_ then do;
56808     +                 if UB ne . then do;
56809     +                    string = strip(string)!!'< '!!strip(UB)!!"';";
56810     +                 end;
56811     +                 else do;
56812     +                    if flag=1 then do;
56813     +                      string = strip(string)!!"';";
56814     +                     /* string = strip(string)!!'='!!strip(_split_Value_)!!"';";*/
56815     +                    end;
56816     +                    else do;
56817     +                      string = strip(string)!!"';";
56818     +                    end;
56819     +                 end;
56820     +                 put string;
56822     +                 string= " UB="!!strip(UB)!!";";
56823     +                 put string;
56824     +                 put "end;";
56827     +              end;
56828     +            end;
56829     +            else do;
56830     +              _split_value_ = tranwrd(_split_value_,"'","''");
56831     +              if first._group_ then do;
56832     +                 flag = 0;
56833     +                 if ^first._variable_ then
56834     +                    put 'else';
56835     +                 else
56836     +                    put ' ';
56837     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
56838     +                          !!strip(put(_GROUP_,best12.))!!' then';
56839     +                 put string;
56840     +                 string = "_LABEL_='"!!strip(_split_value_);
56841     +              end;
56842     +              else do;
56843     +                 if flag ne 1 then do;
56844     +                   tempstring = strip(string)!!', '!!strip(_split_value_);
56845     +                   length = length(tempstring);
56847     +                   if length < 195 then do;
56848     +                      string = tempstring;
56849     +                   end;
56850     +                   else do;
56851     +                      string = strip(string)||",...";
56852     +                      flag=1;
56853     +                   end;
56854     +                 end;
56855     +              end;
56857     +              if last._group_ then do;
56858     +                 string = strip(string)!!"';";
56859     +                 put string;
56860     +              end;
56861     +            end;
56862     +         run;
56864     +         data &COARSE;
56865     +           set &COARSE;
56866     +          /* %inc Y; */
56867     +           %inc &filename;
56868     +         run;
56869     +         *filename Y;
56871     +         /* add missing to appropriate label - based on temp_missing data */
56872     +         data &COARSE;
56873     +           set &COARSE;
56875     +           %let dsid = %sysfunc(open(work.temp_missing));
56876     +           %if &dsid %then %do;
56877     +              %let varnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
56878     +              %let grpnum = %sysfunc(VARNUM(&dsid, MISSGRP));
56880     +              %let obs = %sysfunc(fetch(&dsid));
56881     +              %do %while(&obs=0);
56882     +                 %let var = %sysfunc(getvarc(&dsid, &varnum));
56883     +                 %let grp = %sysfunc(getvarn(&dsid, &grpnum));
56885     +                 if DISPLAY_VAR = "&var" and _GROUP_ = &grp then do;
56886     +                   if _LABEL_ eq '' then do;
56887     +                     _LABEL_ = "Missing";
56888     +                   end;
56889     +                   else do;
56890     +                     _LABEL_ = strip(_LABEL_)!!", Missing";
56891     +                   end;
56892     +                 end;
56893     +                 %let obs = %sysfunc(fetch(&dsid));
56894     +              %end;
56895     +           %end;
56896     +           %if &dsid %then %let dsid = %sysfunc(close(&dsid));
56897     +         run;
56899     +         proc datasets library=work nolist;
56900     +           delete class temp temp_missing;
56901     +         run;
56902     +         quit;
56904     +%mend EM_GENERATE_LABELVALUES;
56906     +%macro calcValidationCoarse(input, output, varmappings, resultsTable);
56909     +%mend calcValidationCoarse;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename trtemp;
NOTE: Fileref TRTEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data temp;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where NAME =
MPRINT(TRAIN):  "DepVar";
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE NAME='DepVar';
NOTE: The data set WORK.TEMP has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc dmdb data=EMWS8.Part_TRAIN classout=EVENTOUT;
MPRINT(TRAIN):   target
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   class
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(TRAIN):  (DESC);
MPRINT(TRAIN):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.EVENTOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   dsid = open("EVENTOUT");
MPRINT(TRAIN):   if dsid>0 then do;
MPRINT(TRAIN):   levelnum = VARNUM(dsid, "LEVEL");
MPRINT(TRAIN):   if levelnum then do;
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_EVENT', strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   dsid=close(dsid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete eventout;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK.EVENTOUT (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_FINEDETAILDATA;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_FINEDETAILDATA (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(TRAIN):   data tempvarnames;
MPRINT(TRAIN):   set EMWS8.BINNING_VariableSet;
MPRINT(TRAIN):   where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
MPRINT(TRAIN):   keep NAME LEVEL LABEL;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK.TEMPVARNAMES has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
MPRINT(TRAIN):   names NAME;
MPRINT(TRAIN):   prefix WOE_ GRP_ ;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 3 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=tempmapping;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=tempvarnames;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPVARNAMES has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data tempmapping;
MPRINT(TRAIN):   merge tempmapping tempvarnames;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   rename LEVEL=procLevel;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: There were 32 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_MAPPING_TABLE):  ;
MPRINT(EM_GENERATE_MAPPING_TABLE):   data EMWS8.BINNING_VARMAPPINGS(keep=_variable_ _grp_variable_ procLevel label);
MPRINT(EM_GENERATE_MAPPING_TABLE):   length _variable_ _grp_variable_ $32 procLevel $8;
MPRINT(EM_GENERATE_MAPPING_TABLE):   set tempmapping;
MPRINT(EM_GENERATE_MAPPING_TABLE):   label _variable_ = "Input Variable" _grp_variable_ = "Group Variable";
MPRINT(EM_GENERATE_MAPPING_TABLE):   _variable_ = NAME;
MPRINT(EM_GENERATE_MAPPING_TABLE):   _grp_variable_ = GRP;
MPRINT(EM_GENERATE_MAPPING_TABLE):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete tempImport tempScore;
MPRINT(TRAIN):   run;

NOTE: The file WORK.TEMPIMPORT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSCORE (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc datasets library=EMWS8 nolist;
MPRINT(TRAIN):   delete BINNING_SPLITVALS;
MPRINT(TRAIN):   run;

NOTE: Deleting EMWS8.BINNING_SPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_PRE_BINNING):   data tempvariableset;
MPRINT(EM_PRE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_PRE_BINNING):   where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 23 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 23 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc dmdb data=EMWS8.Part_TRAIN classout=_CLASSOUT maxlevel=5;
MPRINT(EM_PRE_BINNING):   class AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome;
MPRINT(EM_PRE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK._CLASSOUT has 111 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc freq data=_CLASSOUT order=DATA noprint;
MPRINT(EM_PRE_BINNING):   table NAME / OUT= _COUNT(where=(COUNT<5));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   set _COUNT;
MPRINT(EM_PRE_BINNING):   call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc sort data=_CLASSOUT;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 111 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(EM_PRE_BINNING):   var NRAW;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._OUT has 23 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   dsid = open('_OUT');
MPRINT(EM_PRE_BINNING):   if dsid then do;
MPRINT(EM_PRE_BINNING):   call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(EM_PRE_BINNING):   csid = close(dsid);
MPRINT(EM_PRE_BINNING):   end;
MPRINT(EM_PRE_BINNING):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRE_BINNING):   data _INTMID;
MPRINT(EM_PRE_BINNING):   set _OUT;
MPRINT(EM_PRE_BINNING):   keep VARIABLE _MIDPOINT1--_MIDPOINT5 ;
MPRINT(EM_PRE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK._OUT.
NOTE: The data set WORK._INTMID has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   label procLevel = "Level for Interactive";
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename temp catalog 'sashelp.emapps.quantile_binning.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMAPPS.QUANTILE_BINNING.SOURCE.
56914     +%macro em_apps_quantile_binning(input, vartable, numbins, binmappings, binningCode, codeMappings=, precision=0.01, dropOriginal=N);
56916     +  /* initialize binmappings table */
56917     +  data &BINMAPPINGS;
56918     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
56919     +  run;
56921     +  /* process only INTERVAL INPUTS */
56922     +  data tempvars;
56923     +    set &vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
56924     +  run;
56926     +  /* retrieve the name of interval inputs to bin */
56927     +  filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
56928     +  %include tempopen;
56929     +  filename tempopen;
56931     +  %let intvars = ;
56932     +  %global num_intvars;
56933     +  %let num_intvars = 0;
56934     +  %em_varmacro(name=intvars, metadata=tempvars, key=NAME, nummacro=num_intvars);
56936     +  /* retrieve the name of frequency variable if it exists */
56937     +  %let em_bin_freq = ;
56938     +  %let choice = ROLE="FREQ";
56939     +  %let fdsid = %sysfunc(open(&vartable(where=(&choice))));
56940     +  %if &fdsid %then %do;
56941     +    %let fvarnum = %sysfunc(VARNUM(&fdsid, NAME));
56942     +    %let fobs = %sysfunc(fetch(&fdsid));
56943     +    %do %while(&fobs=0);
56944     +       %let em_bin_freq = %sysfunc(getvarc(&fdsid, &fvarnum));
56945     +       %let fobs = %sysfunc(fetch(&fdsid));
56946     +    %end;
56947     +  %end;
56948     +  %if &fdsid >0 %then %let fdsid = %sysfunc(close(&fdsid));
56950     +  /* process all inputs */
56951     +  %if &num_intvars > 0 %then %do;
56953     +    /* Computing quantile binning of interval inputs */
56954     +    %let numbin = %eval(&NUMBINS - 1);
56955     +    %let optstr=;
56956     +    %do i=1 %to &numbin;
56957     +       %let optstr = &optstr %eval(&i*100/&&NUMBINS);
56958     +    %end;
56960     +    data tempInt / view = tempInt;
56961     +      set &input(keep= %intvars
56962     +      %if &em_bin_freq ne %then %do;
56963     +        &em_bin_freq
56964     +      %end;
56965     +      );
56966     +    run;
56968     +    proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=&optstr;
56969     +       var %intvars;
56970     +       %if &em_bin_freq ne %then %do;
56971     +          freq &em_bin_freq;
56972     +       %end;
56973     +    run;
56975     +    proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
56976     +    run;
56978     +    /* generate unique BIN_xxx names for all inputs processed */
56979     +    proc dmdb data=tempvars outtable=tempmapping nameserver;
56980     +     names NAME;
56981     +     prefix BIN_ ;
56982     +    run;
56984     +    proc sort data=tempmapping(keep=NAME bin); by NAME; run;
56985     +    proc sort data=work.pctdata; by _NAME_; run;
56986     +    %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
56987     +      proc sort data=&codemappings nodupkey out=tempcodemappings(keep= codeVar variable) ; by codeVar; run;
56988     +    %end;
56990     +    data tempbins;
56991     +      length display_var $32;
56992     +      merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar))
56993     +      %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
56994     +         tempcodemappings(rename=(codeVar=_name_ variable=display_var))
56995     +      %end;
56996     +      ;
56997     +      by _NAME_;
56998     +      if _a;
56999     +      if missing(display_var) then display_var = _NAME_;
57000     +    run;
57002     +    /* generate BINMAPPINGS dataset and binningCode file*/
57003     +    data _null_;
57004     +      FILE &binningCode;
57005     +      set tempbins end=eof;
57006     +      length string $200;
57007     +      by _NAME_;
57009     +      if _n_=1 then do;
57010     +        put "&EM_CODEBAR;";
57011     +        %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
57012     +        put "* &note;";
57013     +        put "&EM_CODEBAR;";
57015     +        call execute(" data &BINMAPPINGS; ");
57016     +        call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
57017     +      end;
57019     +      %do i=1 %to %eval(&numbins-1);
57020     +       %if &i eq 1 %then %do;
57021     +         %let colname = COL&i;
57022     +         %let binvalnum = 1;
57023     +         LB = .;
57024     +         UB = round(&colname, &precision);
57025     +         bin=&binvalnum;
57027     +         call execute("name='"||strip(_NAME_)||"'; ");
57028     +         call execute("bin_name='"||strip(binVar)||"'; ");
57029     +         call execute("bin='"||strip(bin)||"';");
57030     +         call execute("LB=.;");
57031     +         call execute("UB="||UB||";");
57032     +         call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
57033     +         call execute("output;");
57035     +         string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
57037     +         put string;
57038     +         string = "else do;";
57039     +         put string;
57041     +         string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
57042     +         put string;
57045     +       %end;
57046     +       %else %do;
57047     +         %let colname = COL&i;
57048     +         %let lbnum = %sysevalf(&i-1);
57049     +         %let lbcol = COL&lbnum;
57050     +         UB = round(&colname, &precision);
57051     +         LB = round(&lbcol, &precision);
57052     +         if UB ne LB then do;
57053     +           bin=bin+1;
57055     +           call execute("name='"||strip(_NAME_)||"'; ");
57056     +           call execute("bin_name='"||strip(binVar)||"'; ");
57057     +           call execute("bin='"||strip(bin)||"';");
57058     +           call execute("LB="||LB||";");
57059     +           call execute("UB="||UB||";");
57060     +           call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
57061     +           call execute("output;");
57063     +           string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
57064     +           put string;
57066     +         end;
57067     +       %end;
57068     +      %end;
57069     +      %let binvalnum = %sysevalf(&binvalnum + 1);
57070     +      bin=bin+1;
57071     +      LB = round(&colname, &precision);
57072     +      UB = .;
57074     +      call execute("name='"||strip(_NAME_)||"'; ");
57075     +      call execute("bin_name = '"||strip(binVar)||"'; ");
57076     +      call execute("bin='"||strip(bin)||"';");
57077     +      call execute("UB=.;");
57078     +      call execute("LB="||LB||";");
57079     +      call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
57080     +      call execute("output;");
57082     +      string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
57083     +      put string;
57084     +      string="end;";
57085     +      put string;
57087     +      if eof then do;
57088     +        call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
57089     +        call execute("  if LB=UB then delete;");
57090     +        call execute("run;");
57091     +      end;
57093     +    run;
57095     +    /* drop original inputs */
57096     +    %if &dropOriginal=Y %then %do;
57097     +      data _null_;
57098     +        set work.tempvars end=eof;
57099     +        FILE &binningCode MOD;
57100     +        length string $200;
57102     +        if _n_=1 then do;
57103     +          put "drop";
57104     +        end;
57105     +        string = " "||strip(name);
57106     +        put string;
57108     +        if eof then do;
57109     +          put ";";
57110     +        end;
57111     +      run;
57112     +    %end;
57114     +    proc datasets library=work nolist;
57115     +      delete pctdata tempmapping tempbins tempInt;
57116     +    run;
57117     +    quit;
57118     +  %end;
57120     +  proc datasets library=work nolist;
57121     +    delete tempvars;
57122     +  run;
57123     +  quit;
57125     +%mend em_apps_quantile_binning;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data work.vartable;
MPRINT(EM_QUANTILE_BINNING):   set work._intmid;
MPRINT(EM_QUANTILE_BINNING):   level = "INTERVAL";
MPRINT(EM_QUANTILE_BINNING):   role = "INPUT";
MPRINT(EM_QUANTILE_BINNING):   rename variable=name;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK._INTMID.
NOTE: The data set WORK.VARTABLE has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Variable NAME is uninitialized.
NOTE: Variable BIN_NAME is uninitialized.
NOTE: Variable LB is uninitialized.
NOTE: Variable UB is uninitialized.
NOTE: Variable BIN is uninitialized.
NOTE: Variable EM_BIN_LABEL is uninitialized.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.VARTABLE.
      WHERE (ROLE='INPUT') and (LEVEL='INTERVAL');
NOTE: The data set WORK.TEMPVARS has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file TEMPOPEN is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
57129     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
57130     +   filename macFile catalog 'work.emutil.macro.source';
57131     +   %let _METAOBS = 0;
57133     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
57134     +                   or (&metadata eq ) %then %do;
57135     +       %goto doend;
57136     +   %end;
57137     +   data _null_;
57138     +      length _STRING_ $80;
57139     +      retain _STRING_;
57140     +      set &metadata end=eof;
57141     +      file macFile;
57142     +      %if %nrbquote(&where) ne %then %do;
57143     +          %let whereClause = where (%nrbquote(&where));
57144     +          %unquote(&whereClause);
57145     +      %end;
57146     +      if _N_=1 then do;
57147     +         string = "%"!!"macro &name;";
57148     +         put string;
57149     +      end;
57150     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
57151     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
57152     +         if eof then do;
57153     +            put _STRING_;
57154     +            string = "%"!!"mend &name;";
57155     +            put string;
57156     +            %if (&nummacro ne ) %then %do;
57157     +                string = strip(put(_N_, best.));
57158     +                put "%" "global &nummacro;";
57159     +                put "%" "let &nummacro = " string ";";
57160     +                call symput('_METAOBS', string);
57161     +            %end;
57162     +         end;
57163     +      end;
57164     +      else do;
57165     +         put _STRING_;
57166     +         _string_ = TRIM(&key);
57167     +         if eof then do;
57168     +            put _STRING_;
57169     +            string = "%"!!"mend &name;";
57170     +            put string;
57171     +        end;
57172     +      end;
57173     +      if eof then do;
57174     +         string = strip(put(_N_, best.));
57175     +         call symput('_METAOBS', string);
57176     +         %if (&nummacro ne ) %then %do;
57177     +             put "%" "global &nummacro;";
57178     +             put "%" "let &nummacro = " string ";";
57179     +         %end;
57180     +      end;
57181     +   run;
57183     +   %doend:
57184     +   %if ^&_METAOBS %then %do;
57185     +       data _null_;
57186     +          file macFile;
57187     +          put "%" "macro &name;";
57188     +          put "%" "mend &name;";
57189     +          %if (&nummacro ne ) %then %do;
57190     +              put "%" "global &nummacro;";
57191     +              put "%" "let &nummacro = 0;";
57192     +          %end;
57193     +      run;
57194     +   %end;
57195     +   %inc macFile;
57196     +   filename macFile;
57197     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen;
NOTE: Fileref TEMPOPEN has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempvars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Dienstag, 19. April 2016 12.26 Uhr,
      Last Modified=Dienstag, 19. April 2016 12.26 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD8012_WN7LF-LEAVE_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 14.
      The maximum record length was 72.
NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
57198     +%macro intvars;
57199     +AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
57200     +MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
57201     +NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
57202     +NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
57203     +%mend intvars;
57204     +%global num_intvars;
57205     +%let num_intvars = 23 ;
57206     +%global num_intvars;
57207     +%let num_intvars = 23 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempInt / view = tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   set EMWS8.Part_TRAIN(keep
MPRINT(EM_APPS_QUANTILE_BINNING):  = AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome );
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: DATA STEP view saved on file WORK.TEMPINT.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=25 50 75;
MPRINT(EM_APPS_QUANTILE_BINNING):   var
MPRINT(INTVARS):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases 
NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: View WORK.TEMPINT.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.17 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.TEMPINT.
NOTE: The data set WORK.PCTDATA has 11 observations and 24 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 3 observations read from the data set WORK.PCTDATA.
      WHERE _type_=:'P';
NOTE: The data set WORK.PCTDATA has 23 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc dmdb data=tempvars outtable=tempmapping nameserver;
MPRINT(EM_APPS_QUANTILE_BINNING):   names NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   prefix BIN_ ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: The data set WORK.TEMPMAPPING has 23 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=tempmapping(keep=NAME bin);
MPRINT(EM_APPS_QUANTILE_BINNING):   by NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.PCTDATA.
NOTE: The data set WORK.PCTDATA has 23 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data tempbins;
MPRINT(EM_APPS_QUANTILE_BINNING):   length display_var $32;
MPRINT(EM_APPS_QUANTILE_BINNING):   merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar)) ;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _a;
MPRINT(EM_APPS_QUANTILE_BINNING):   if missing(display_var) then display_var = _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: There were 23 observations read from the data set WORK.PCTDATA.
NOTE: There were 23 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPBINS has 23 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X;
MPRINT(EM_APPS_QUANTILE_BINNING):   set tempbins end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "* Generating Bins for interval variables;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute(" data EMWS8.BINNING_BINMAPPINGS; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "else do;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name = '"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string="end;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if LB=UB then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("run;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      298:29   308:21   313:65   350:46   350:87   391:29   396:21   401:21   406:38   406:84   419:51   419:92   468:29   473:21   478:21   483:38   483:84   496:51   496:92   540:29   550:21   555:66   568:52   568:93   
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 12.26 Uhr,
      Create Time=03. April 2016 17.12 Uhr

MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_AcceptedCmpTotal';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='AcceptedCmpTotal >= 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age < 38';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 38;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='38 <= Age < 46';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 46;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='46 <= Age < 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Age';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 57;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Age >= 57';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= Frq < 12';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 12;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='12 <= Frq < 18';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Frq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 18;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Frq >= 18';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35268;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income < 35268';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35268;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='35268 <= Income < 52157';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52157;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 69486;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='52157 <= Income < 69486';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Income';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 69486;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Income >= 69486';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Kidhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Kidhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Kidhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt < 72';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72 <= Mnt < 405.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 405.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1064;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='405.5 <= Mnt < 1064';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Mnt';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1064;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Mnt >= 1064';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= MntFishProducts < 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 47;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='13 <= MntFishProducts < 47';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFishProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 47;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFishProducts >= 47';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= MntFruits < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntFruits < 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntFruits';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntFruits >= 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntGoldProds < 25';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 25;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='25 <= MntGoldProds < 59';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntGoldProds';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 59;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntGoldProds >= 59';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts < 17';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 17;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='17 <= MntMeatProducts < 72';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 72;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 246;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='72 <= MntMeatProducts < 246';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntMeatProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 246;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntMeatProducts >= 246';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= MntSweetProducts < 9';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 9;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='9 <= MntSweetProducts < 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntSweetProducts';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 35;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntSweetProducts >= 35';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines < 24';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='24 <= MntWines < 183.5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 183.5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 508;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='183.5 <= MntWines < 508';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MntWines';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 508;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MntWines >= 508';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 69;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer < 69';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 69;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 83;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='69 <= MonthsAsCustomer < 83';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 83;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 98;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='83 <= MonthsAsCustomer < 98';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_MonthsAsCustomer';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 98;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='MonthsAsCustomer >= 98';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= NumCatalogPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumCatalogPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumCatalogPurchases >= 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDealsPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDealsPurchases >= 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumDistPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 10;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumDistPurchases < 10';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumDistPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 10;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumDistPurchases >= 10';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumStorePurchases < 5';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 5;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='5 <= NumStorePurchases < 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumStorePurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 8;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumStorePurchases >= 8';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases < 2';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 2;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='2 <= NumWebPurchases < 4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='4 <= NumWebPurchases < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebPurchases';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebPurchases >= 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= NumWebVisitsMonth < 6';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 6;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_NumWebVisitsMonth';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='NumWebVisitsMonth >= 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 10.34;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat < 10.34';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 10.34;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='10.34 <= RFMstat < 128.09';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 128.09;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 455.22;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='128.09 <= RFMstat < 455.22';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RFMstat';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 455.22;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RFMstat >= 455.22';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13.25;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq < 13.25';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13.25;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='13.25 <= RMntFrq < 30.4';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 30.4;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 52.86;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='30.4 <= RMntFrq < 52.86';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_RMntFrq';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 52.86;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='RMntFrq >= 52.86';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency < 24';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 24;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='24 <= Recency < 48';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 48;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='48 <= Recency < 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Recency';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 73;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Recency >= 73';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome < 0';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 0;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='0 <= Teenhome < 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_Teenhome';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 1;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='Teenhome >= 1';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   if NAME='' and BIN_NAME='' and BIN='' then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   if LB=UB then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
NOTE: 160 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 64.
NOTE: There were 23 observations read from the data set WORK.TEMPBINS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1         +  data EMWS8.BINNING_BINMAPPINGS;
2         +    length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):  32 LB UB EM_BIN_LABEL BIN200
3         + name='AcceptedCmpTotal';
4         + bin_name='BIN_AcceptedCmpTotal';
5         + bin='1';
6         + LB=.;
7         + UB=           0;
8         + EM_BIN_LABEL='AcceptedCmpTotal < 0';
9         + output;
10        + name='AcceptedCmpTotal';
11        + bin_name = 'BIN_AcceptedCmpTotal';
12        + bin='2';
13        + UB=.;
14        + LB=           0;
15        + EM_BIN_LABEL='AcceptedCmpTotal >= 0';
16        + output;
17        + name='Age';
18        + bin_name='BIN_Age';
19        + bin='1';
20        + LB=.;
21        + UB=          38;
22        + EM_BIN_LABEL='Age < 38';
23        + output;
24        + name='Age';
25        + bin_name='BIN_Age';
26        + bin='2';
27        + LB=          38;
28        + UB=          46;
29        + EM_BIN_LABEL='38 <= Age < 46';
30        + output;
31        + name='Age';
32        + bin_name='BIN_Age';
33        + bin='3';
34        + LB=          46;
35        + UB=          57;
36        + EM_BIN_LABEL='46 <= Age < 57';
37        + output;
38        + name='Age';
39        + bin_name = 'BIN_Age';
40        + bin='4';
41        + UB=.;
42        + LB=          57;
43        + EM_BIN_LABEL='Age >= 57';
44        + output;
45        + name='Frq';
46        + bin_name='BIN_Frq';
47        + bin='1';
48        + LB=.;
49        + UB=           6;
50        + EM_BIN_LABEL='Frq < 6';
51        + output;
52        + name='Frq';
53        + bin_name='BIN_Frq';
54        + bin='2';
55        + LB=           6;
56        + UB=          12;
57        + EM_BIN_LABEL='6 <= Frq < 12';
58        + output;
59        + name='Frq';
60        + bin_name='BIN_Frq';
61        + bin='3';
62        + LB=          12;
63        + UB=          18;
64        + EM_BIN_LABEL='12 <= Frq < 18';
65        + output;
66        + name='Frq';
67        + bin_name = 'BIN_Frq';
68        + bin='4';
69        + UB=.;
70        + LB=          18;
71        + EM_BIN_LABEL='Frq >= 18';
72        + output;
73        + name='Income';
74        + bin_name='BIN_Income';
75        + bin='1';
76        + LB=.;
77        + UB=       35268;
78        + EM_BIN_LABEL='Income < 35268';
79        + output;
80        + name='Income';
81        + bin_name='BIN_Income';
82        + bin='2';
83        + LB=       35268;
84        + UB=       52157;
85        + EM_BIN_LABEL='35268 <= Income < 52157';
86        + output;
87        + name='Income';
88        + bin_name='BIN_Income';
89        + bin='3';
90        + LB=       52157;
91        + UB=       69486;
92        + EM_BIN_LABEL='52157 <= Income < 69486';
93        + output;
94        + name='Income';
95        + bin_name = 'BIN_Income';
96        + bin='4';
97        + UB=.;
98        + LB=       69486;
99        + EM_BIN_LABEL='Income >= 69486';
100       + output;
101       + name='Kidhome';
102       + bin_name='BIN_Kidhome';
103       + bin='1';
104       + LB=.;
105       + UB=           0;
106       + EM_BIN_LABEL='Kidhome < 0';
107       + output;
108       + name='Kidhome';
109       + bin_name='BIN_Kidhome';
110       + bin='2';
111       + LB=           0;
112       + UB=           1;
113       + EM_BIN_LABEL='0 <= Kidhome < 1';
114       + output;
115       + name='Kidhome';
116       + bin_name = 'BIN_Kidhome';
117       + bin='3';
118       + UB=.;
119       + LB=           1;
120       + EM_BIN_LABEL='Kidhome >= 1';
121       + output;
122       + name='Mnt';
123       + bin_name='BIN_Mnt';
124       + bin='1';
125       + LB=.;
126       + UB=          72;
127       + EM_BIN_LABEL='Mnt < 72';
128       + output;
129       + name='Mnt';
130       + bin_name='BIN_Mnt';
131       + bin='2';
132       + LB=          72;
133       + UB=       405.5;
134       + EM_BIN_LABEL='72 <= Mnt < 405.5';
135       + output;
136       + name='Mnt';
137       + bin_name='BIN_Mnt';
138       + bin='3';
139       + LB=       405.5;
140       + UB=        1064;
141       + EM_BIN_LABEL='405.5 <= Mnt < 1064';
142       + output;
143       + name='Mnt';
144       + bin_name = 'BIN_Mnt';
145       + bin='4';
146       + UB=.;
147       + LB=        1064;
148       + EM_BIN_LABEL='Mnt >= 1064';
149       + output;
150       + name='MntFishProducts';
151       + bin_name='BIN_MntFishProducts';
152       + bin='1';
153       + LB=.;
154       + UB=           3;
155       + EM_BIN_LABEL='MntFishProducts < 3';
156       + output;
157       + name='MntFishProducts';
158       + bin_name='BIN_MntFishProducts';
159       + bin='2';
160       + LB=           3;
161       + UB=          13;
162       + EM_BIN_LABEL='3 <= MntFishProducts < 13';
163       + output;
164       + name='MntFishProducts';
165       + bin_name='BIN_MntFishProducts';
166       + bin='3';
167       + LB=          13;
168       + UB=          47;
169       + EM_BIN_LABEL='13 <= MntFishProducts < 47';
170       + output;
171       + name='MntFishProducts';
172       + bin_name = 'BIN_MntFishProducts';
173       + bin='4';
174       + UB=.;
175       + LB=          47;
176       + EM_BIN_LABEL='MntFishProducts >= 47';
177       + output;
178       + name='MntFruits';
179       + bin_name='BIN_MntFruits';
180       + bin='1';
181       + LB=.;
182       + UB=           2;
183       + EM_BIN_LABEL='MntFruits < 2';
184       + output;
185       + name='MntFruits';
186       + bin_name='BIN_MntFruits';
187       + bin='2';
188       + LB=           2;
189       + UB=           9;
190       + EM_BIN_LABEL='2 <= MntFruits < 9';
191       + output;
192       + name='MntFruits';
193       + bin_name='BIN_MntFruits';
194       + bin='3';
195       + LB=           9;
196       + UB=          35;
197       + EM_BIN_LABEL='9 <= MntFruits < 35';
198       + output;
199       + name='MntFruits';
200       + bin_name = 'BIN_MntFruits';
201       + bin='4';
202       + UB=.;
203       + LB=          35;
204       + EM_BIN_LABEL='MntFruits >= 35';
205       + output;
206       + name='MntGoldProds';
207       + bin_name='BIN_MntGoldProds';
208       + bin='1';
209       + LB=.;
210       + UB=           9;
211       + EM_BIN_LABEL='MntGoldProds < 9';
212       + output;
213       + name='MntGoldProds';
214       + bin_name='BIN_MntGoldProds';
215       + bin='2';
216       + LB=           9;
217       + UB=          25;
218       + EM_BIN_LABEL='9 <= MntGoldProds < 25';
219       + output;
220       + name='MntGoldProds';
221       + bin_name='BIN_MntGoldProds';
222       + bin='3';
223       + LB=          25;
224       + UB=          59;
225       + EM_BIN_LABEL='25 <= MntGoldProds < 59';
226       + output;
227       + name='MntGoldProds';
228       + bin_name = 'BIN_MntGoldProds';
229       + bin='4';
230       + UB=.;
231       + LB=          59;
232       + EM_BIN_LABEL='MntGoldProds >= 59';
233       + output;
234       + name='MntMeatProducts';
235       + bin_name='BIN_MntMeatProducts';
236       + bin='1';
237       + LB=.;
238       + UB=          17;
239       + EM_BIN_LABEL='MntMeatProducts < 17';
240       + output;
241       + name='MntMeatProducts';
242       + bin_name='BIN_MntMeatProducts';
243       + bin='2';
244       + LB=          17;
245       + UB=          72;
246       + EM_BIN_LABEL='17 <= MntMeatProducts < 72';
247       + output;
248       + name='MntMeatProducts';
249       + bin_name='BIN_MntMeatProducts';
250       + bin='3';
251       + LB=          72;
252       + UB=         246;
253       + EM_BIN_LABEL='72 <= MntMeatProducts < 246';
254       + output;
255       + name='MntMeatProducts';
256       + bin_name = 'BIN_MntMeatProducts';
257       + bin='4';
258       + UB=.;
259       + LB=         246;
260       + EM_BIN_LABEL='MntMeatProducts >= 246';
261       + output;
262       + name='MntSweetProducts';
263       + bin_name='BIN_MntSweetProducts';
264       + bin='1';
265       + LB=.;
266       + UB=           2;
267       + EM_BIN_LABEL='MntSweetProducts < 2';
268       + output;
269       + name='MntSweetProducts';
270       + bin_name='BIN_MntSweetProducts';
271       + bin='2';
272       + LB=           2;
273       + UB=           9;
274       + EM_BIN_LABEL='2 <= MntSweetProducts < 9';
275       + output;
276       + name='MntSweetProducts';
277       + bin_name='BIN_MntSweetProducts';
278       + bin='3';
279       + LB=           9;
280       + UB=          35;
281       + EM_BIN_LABEL='9 <= MntSweetProducts < 35';
282       + output;
283       + name='MntSweetProducts';
284       + bin_name = 'BIN_MntSweetProducts';
285       + bin='4';
286       + UB=.;
287       + LB=          35;
288       + EM_BIN_LABEL='MntSweetProducts >= 35';
289       + output;
290       + name='MntWines';
291       + bin_name='BIN_MntWines';
292       + bin='1';
293       + LB=.;
294       + UB=          24;
295       + EM_BIN_LABEL='MntWines < 24';
296       + output;
297       + name='MntWines';
298       + bin_name='BIN_MntWines';
299       + bin='2';
300       + LB=          24;
301       + UB=       183.5;
302       + EM_BIN_LABEL='24 <= MntWines < 183.5';
303       + output;
304       + name='MntWines';
305       + bin_name='BIN_MntWines';
306       + bin='3';
307       + LB=       183.5;
308       + UB=         508;
309       + EM_BIN_LABEL='183.5 <= MntWines < 508';
310       + output;
311       + name='MntWines';
312       + bin_name = 'BIN_MntWines';
313       + bin='4';
314       + UB=.;
315       + LB=         508;
316       + EM_BIN_LABEL='MntWines >= 508';
317       + output;
318       + name='MonthsAsCustomer';
319       + bin_name='BIN_MonthsAsCustomer';
320       + bin='1';
321       + LB=.;
322       + UB=          69;
323       + EM_BIN_LABEL='MonthsAsCustomer < 69';
324       + output;
325       + name='MonthsAsCustomer';
326       + bin_name='BIN_MonthsAsCustomer';
327       + bin='2';
328       + LB=          69;
329       + UB=          83;
330       + EM_BIN_LABEL='69 <= MonthsAsCustomer < 83';
331       + output;
332       + name='MonthsAsCustomer';
333       + bin_name='BIN_MonthsAsCustomer';
334       + bin='3';
335       + LB=          83;
336       + UB=          98;
337       + EM_BIN_LABEL='83 <= MonthsAsCustomer < 98';
338       + output;
339       + name='MonthsAsCustomer';
340       + bin_name = 'BIN_MonthsAsCustomer';
341       + bin='4';
342       + UB=.;
343       + LB=          98;
344       + EM_BIN_LABEL='MonthsAsCustomer >= 98';
345       + output;
346       + name='NumCatalogPurchases';
347       + bin_name='BIN_NumCatalogPurchases';
348       + bin='1';
349       + LB=.;
350       + UB=           0;
351       + EM_BIN_LABEL='NumCatalogPurchases < 0';
352       + output;
353       + name='NumCatalogPurchases';
354       + bin_name='BIN_NumCatalogPurchases';
355       + bin='2';
356       + LB=           0;
357       + UB=           2;
358       + EM_BIN_LABEL='0 <= NumCatalogPurchases < 2';
359       + output;
360       + name='NumCatalogPurchases';
361       + bin_name='BIN_NumCatalogPurchases';
362       + bin='3';
363       + LB=           2;
364       + UB=           4;
365       + EM_BIN_LABEL='2 <= NumCatalogPurchases < 4';
366       + output;
367       + name='NumCatalogPurchases';
368       + bin_name = 'BIN_NumCatalogPurchases';
369       + bin='4';
370       + UB=.;
371       + LB=           4;
372       + EM_BIN_LABEL='NumCatalogPurchases >= 4';
373       + output;
374       + name='NumDealsPurchases';
375       + bin_name='BIN_NumDealsPurchases';
376       + bin='1';
377       + LB=.;
378       + UB=           1;
379       + EM_BIN_LABEL='NumDealsPurchases < 1';
380       + output;
381       + name='NumDealsPurchases';
382       + bin_name='BIN_NumDealsPurchases';
383       + bin='2';
384       + LB=           1;
385       + UB=           2;
386       + EM_BIN_LABEL='1 <= NumDealsPurchases < 2';
387       + output;
388       + name='NumDealsPurchases';
389       + bin_name='BIN_NumDealsPurchases';
390       + bin='3';
391       + LB=           2;
392       + UB=           3;
393       + EM_BIN_LABEL='2 <= NumDealsPurchases < 3';
394       + output;
395       + name='NumDealsPurchases';
396       + bin_name = 'BIN_NumDealsPurchases';
397       + bin='4';
398       + UB=.;
399       + LB=           3;
400       + EM_BIN_LABEL='NumDealsPurchases >= 3';
401       + output;
402       + name='NumDistPurchases';
403       + bin_name='BIN_NumDistPurchases';
404       + bin='1';
405       + LB=.;
406       + UB=           3;
407       + EM_BIN_LABEL='NumDistPurchases < 3';
408       + output;
409       + name='NumDistPurchases';
410       + bin_name='BIN_NumDistPurchases';
411       + bin='2';
412       + LB=           3;
413       + UB=           6;
414       + EM_BIN_LABEL='3 <= NumDistPurchases < 6';
415       + output;
416       + name='NumDistPurchases';
417       + bin_name='BIN_NumDistPurchases';
418       + bin='3';
419       + LB=           6;
420       + UB=          10;
421       + EM_BIN_LABEL='6 <= NumDistPurchases < 10';
422       + output;
423       + name='NumDistPurchases';
424       + bin_name = 'BIN_NumDistPurchases';
425       + bin='4';
426       + UB=.;
427       + LB=          10;
428       + EM_BIN_LABEL='NumDistPurchases >= 10';
429       + output;
430       + name='NumStorePurchases';
431       + bin_name='BIN_NumStorePurchases';
432       + bin='1';
433       + LB=.;
434       + UB=           3;
435       + EM_BIN_LABEL='NumStorePurchases < 3';
436       + output;
437       + name='NumStorePurchases';
438       + bin_name='BIN_NumStorePurchases';
439       + bin='2';
440       + LB=           3;
441       + UB=           5;
442       + EM_BIN_LABEL='3 <= NumStorePurchases < 5';
443       + output;
444       + name='NumStorePurchases';
445       + bin_name='BIN_NumStorePurchases';
446       + bin='3';
447       + LB=           5;
448       + UB=           8;
449       + EM_BIN_LABEL='5 <= NumStorePurchases < 8';
450       + output;
451       + name='NumStorePurchases';
452       + bin_name = 'BIN_NumStorePurchases';
453       + bin='4';
454       + UB=.;
455       + LB=           8;
456       + EM_BIN_LABEL='NumStorePurchases >= 8';
457       + output;
458       + name='NumWebPurchases';
459       + bin_name='BIN_NumWebPurchases';
460       + bin='1';
461       + LB=.;
462       + UB=           2;
463       + EM_BIN_LABEL='NumWebPurchases < 2';
464       + output;
465       + name='NumWebPurchases';
466       + bin_name='BIN_NumWebPurchases';
467       + bin='2';
468       + LB=           2;
469       + UB=           4;
470       + EM_BIN_LABEL='2 <= NumWebPurchases < 4';
471       + output;
472       + name='NumWebPurchases';
473       + bin_name='BIN_NumWebPurchases';
474       + bin='3';
475       + LB=           4;
476       + UB=           6;
477       + EM_BIN_LABEL='4 <= NumWebPurchases < 6';
478       + output;
479       + name='NumWebPurchases';
480       + bin_name = 'BIN_NumWebPurchases';
481       + bin='4';
482       + UB=.;
483       + LB=           6;
484       + EM_BIN_LABEL='NumWebPurchases >= 6';
485       + output;
486       + name='NumWebVisitsMonth';
487       + bin_name='BIN_NumWebVisitsMonth';
488       + bin='1';
489       + LB=.;
490       + UB=           3;
491       + EM_BIN_LABEL='NumWebVisitsMonth < 3';
492       + output;
493       + name='NumWebVisitsMonth';
494       + bin_name='BIN_NumWebVisitsMonth';
495       + bin='2';
496       + LB=           3;
497       + UB=           6;
498       + EM_BIN_LABEL='3 <= NumWebVisitsMonth < 6';
499       + output;
500       + name='NumWebVisitsMonth';
501       + bin_name='BIN_NumWebVisitsMonth';
502       + bin='3';
503       + LB=           6;
504       + UB=           7;
505       + EM_BIN_LABEL='6 <= NumWebVisitsMonth < 7';
506       + output;
507       + name='NumWebVisitsMonth';
508       + bin_name = 'BIN_NumWebVisitsMonth';
509       + bin='4';
510       + UB=.;
511       + LB=           7;
512       + EM_BIN_LABEL='NumWebVisitsMonth >= 7';
513       + output;
514       + name='RFMstat';
515       + bin_name='BIN_RFMstat';
516       + bin='1';
517       + LB=.;
518       + UB=       10.34;
519       + EM_BIN_LABEL='RFMstat < 10.34';
520       + output;
521       + name='RFMstat';
522       + bin_name='BIN_RFMstat';
523       + bin='2';
524       + LB=       10.34;
525       + UB=      128.09;
526       + EM_BIN_LABEL='10.34 <= RFMstat < 128.09';
527       + output;
528       + name='RFMstat';
529       + bin_name='BIN_RFMstat';
530       + bin='3';
531       + LB=      128.09;
532       + UB=      455.22;
533       + EM_BIN_LABEL='128.09 <= RFMstat < 455.22';
534       + output;
535       + name='RFMstat';
536       + bin_name = 'BIN_RFMstat';
537       + bin='4';
538       + UB=.;
539       + LB=      455.22;
540       + EM_BIN_LABEL='RFMstat >= 455.22';
541       + output;
542       + name='RMntFrq';
543       + bin_name='BIN_RMntFrq';
544       + bin='1';
545       + LB=.;
546       + UB=       13.25;
547       + EM_BIN_LABEL='RMntFrq < 13.25';
548       + output;
549       + name='RMntFrq';
550       + bin_name='BIN_RMntFrq';
551       + bin='2';
552       + LB=       13.25;
553       + UB=        30.4;
554       + EM_BIN_LABEL='13.25 <= RMntFrq < 30.4';
555       + output;
556       + name='RMntFrq';
557       + bin_name='BIN_RMntFrq';
558       + bin='3';
559       + LB=        30.4;
560       + UB=       52.86;
561       + EM_BIN_LABEL='30.4 <= RMntFrq < 52.86';
562       + output;
563       + name='RMntFrq';
564       + bin_name = 'BIN_RMntFrq';
565       + bin='4';
566       + UB=.;
567       + LB=       52.86;
568       + EM_BIN_LABEL='RMntFrq >= 52.86';
569       + output;
570       + name='Recency';
571       + bin_name='BIN_Recency';
572       + bin='1';
573       + LB=.;
574       + UB=          24;
575       + EM_BIN_LABEL='Recency < 24';
576       + output;
577       + name='Recency';
578       + bin_name='BIN_Recency';
579       + bin='2';
580       + LB=          24;
581       + UB=          48;
582       + EM_BIN_LABEL='24 <= Recency < 48';
583       + output;
584       + name='Recency';
585       + bin_name='BIN_Recency';
586       + bin='3';
587       + LB=          48;
588       + UB=          73;
589       + EM_BIN_LABEL='48 <= Recency < 73';
590       + output;
591       + name='Recency';
592       + bin_name = 'BIN_Recency';
593       + bin='4';
594       + UB=.;
595       + LB=          73;
596       + EM_BIN_LABEL='Recency >= 73';
597       + output;
598       + name='Teenhome';
599       + bin_name='BIN_Teenhome';
600       + bin='1';
601       + LB=.;
602       + UB=           0;
603       + EM_BIN_LABEL='Teenhome < 0';
604       + output;
605       + name='Teenhome';
606       + bin_name='BIN_Teenhome';
607       + bin='2';
608       + LB=           0;
609       + UB=           1;
610       + EM_BIN_LABEL='0 <= Teenhome < 1';
611       + output;
612       + name='Teenhome';
613       + bin_name = 'BIN_Teenhome';
614       + bin='3';
615       + UB=.;
616       + LB=           1;
617       + EM_BIN_LABEL='Teenhome >= 1';
618       + output;
619       +   if NAME='' and BIN_NAME='' and BIN='' then delete;
620       +   if LB=UB then delete;
621       + run;

NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.tempvars end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X MOD;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "drop";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = " "||strip(name);
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put ";";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=5976,
      Last Modified=19. April 2016 12.26 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 25 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 19.
NOTE: There were 23 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete pctdata tempmapping tempbins tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: The file WORK.TEMPINT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PCTDATA (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPBINS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.TEMPVARS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   by name lb;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   length display_var $32 grp $8;
MPRINT(EM_QUANTILE_BINNING):   display_var = name;
MPRINT(EM_QUANTILE_BINNING):   GRP = BIN + 1;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      102:7   
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      102:11   
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedmapping nodupkey;
MPRINT(EM_QUANTILE_BINNING):   by NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: 65 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDMAPPING has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 1 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   set sortedmapping;
MPRINT(EM_QUANTILE_BINNING):   GRP="1";
MPRINT(EM_QUANTILE_BINNING):   bin="Missing";
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = "Missing";
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 23 observations read from the data set WORK.SORTEDMAPPING.
NOTE: The data set WORK.TEMPMISSVALUES has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_BINDATA;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.Part_TRAIN;
NOTE: %INCLUDE (level 1) file X is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\BINNINGCODE.sas.
57208     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
57209     +* Generating Bins for interval variables;
MPRINT(EM_QUANTILE_BINNING):   * Generating Bins for interval variables;
57210     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
57211     +if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal eq . then BIN_AcceptedCmpTotal= .;
57212     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57213     +if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
MPRINT(EM_QUANTILE_BINNING):   if AcceptedCmpTotal < 0 then BIN_AcceptedCmpTotal=1;
57214     +else if AcceptedCmpTotal >= 0 then BIN_AcceptedCmpTotal=2;
MPRINT(EM_QUANTILE_BINNING):   else if AcceptedCmpTotal >= 0 then BIN_AcceptedCmpTotal=2;
57215     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57216     +if Age eq . then BIN_Age= .;
MPRINT(EM_QUANTILE_BINNING):   if Age eq . then BIN_Age= .;
57217     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57218     +if Age < 38 then BIN_Age=1;
MPRINT(EM_QUANTILE_BINNING):   if Age < 38 then BIN_Age=1;
57219     +else if Age < 46 then BIN_Age=2;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 46 then BIN_Age=2;
57220     +else if Age < 57 then BIN_Age=3;
MPRINT(EM_QUANTILE_BINNING):   else if Age < 57 then BIN_Age=3;
57221     +else if Age >= 57 then BIN_Age=4;
MPRINT(EM_QUANTILE_BINNING):   else if Age >= 57 then BIN_Age=4;
57222     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57223     +if Frq eq . then BIN_Frq= .;
MPRINT(EM_QUANTILE_BINNING):   if Frq eq . then BIN_Frq= .;
57224     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57225     +if Frq < 6 then BIN_Frq=1;
MPRINT(EM_QUANTILE_BINNING):   if Frq < 6 then BIN_Frq=1;
57226     +else if Frq < 12 then BIN_Frq=2;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 12 then BIN_Frq=2;
57227     +else if Frq < 18 then BIN_Frq=3;
MPRINT(EM_QUANTILE_BINNING):   else if Frq < 18 then BIN_Frq=3;
57228     +else if Frq >= 18 then BIN_Frq=4;
MPRINT(EM_QUANTILE_BINNING):   else if Frq >= 18 then BIN_Frq=4;
57229     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57230     +if Income eq . then BIN_Income= .;
MPRINT(EM_QUANTILE_BINNING):   if Income eq . then BIN_Income= .;
57231     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57232     +if Income < 35268 then BIN_Income=1;
MPRINT(EM_QUANTILE_BINNING):   if Income < 35268 then BIN_Income=1;
57233     +else if Income < 52157 then BIN_Income=2;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 52157 then BIN_Income=2;
57234     +else if Income < 69486 then BIN_Income=3;
MPRINT(EM_QUANTILE_BINNING):   else if Income < 69486 then BIN_Income=3;
57235     +else if Income >= 69486 then BIN_Income=4;
MPRINT(EM_QUANTILE_BINNING):   else if Income >= 69486 then BIN_Income=4;
57236     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57237     +if Kidhome eq . then BIN_Kidhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome eq . then BIN_Kidhome= .;
57238     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57239     +if Kidhome < 0 then BIN_Kidhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Kidhome < 0 then BIN_Kidhome=1;
57240     +else if Kidhome < 1 then BIN_Kidhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome < 1 then BIN_Kidhome=2;
57241     +else if Kidhome >= 1 then BIN_Kidhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Kidhome >= 1 then BIN_Kidhome=3;
57242     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57243     +if Mnt eq . then BIN_Mnt= .;
MPRINT(EM_QUANTILE_BINNING):   if Mnt eq . then BIN_Mnt= .;
57244     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57245     +if Mnt < 72 then BIN_Mnt=1;
MPRINT(EM_QUANTILE_BINNING):   if Mnt < 72 then BIN_Mnt=1;
57246     +else if Mnt < 405.5 then BIN_Mnt=2;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 405.5 then BIN_Mnt=2;
57247     +else if Mnt < 1064 then BIN_Mnt=3;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt < 1064 then BIN_Mnt=3;
57248     +else if Mnt >= 1064 then BIN_Mnt=4;
MPRINT(EM_QUANTILE_BINNING):   else if Mnt >= 1064 then BIN_Mnt=4;
57249     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57250     +if MntFishProducts eq . then BIN_MntFishProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts eq . then BIN_MntFishProducts= .;
57251     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57252     +if MntFishProducts < 3 then BIN_MntFishProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFishProducts < 3 then BIN_MntFishProducts=1;
57253     +else if MntFishProducts < 13 then BIN_MntFishProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 13 then BIN_MntFishProducts=2;
57254     +else if MntFishProducts < 47 then BIN_MntFishProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts < 47 then BIN_MntFishProducts=3;
57255     +else if MntFishProducts >= 47 then BIN_MntFishProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFishProducts >= 47 then BIN_MntFishProducts=4;
57256     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57257     +if MntFruits eq . then BIN_MntFruits= .;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits eq . then BIN_MntFruits= .;
57258     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57259     +if MntFruits < 2 then BIN_MntFruits=1;
MPRINT(EM_QUANTILE_BINNING):   if MntFruits < 2 then BIN_MntFruits=1;
57260     +else if MntFruits < 9 then BIN_MntFruits=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 9 then BIN_MntFruits=2;
57261     +else if MntFruits < 35 then BIN_MntFruits=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits < 35 then BIN_MntFruits=3;
57262     +else if MntFruits >= 35 then BIN_MntFruits=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntFruits >= 35 then BIN_MntFruits=4;
57263     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57264     +if MntGoldProds eq . then BIN_MntGoldProds= .;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds eq . then BIN_MntGoldProds= .;
57265     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57266     +if MntGoldProds < 9 then BIN_MntGoldProds=1;
MPRINT(EM_QUANTILE_BINNING):   if MntGoldProds < 9 then BIN_MntGoldProds=1;
57267     +else if MntGoldProds < 25 then BIN_MntGoldProds=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 25 then BIN_MntGoldProds=2;
57268     +else if MntGoldProds < 59 then BIN_MntGoldProds=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds < 59 then BIN_MntGoldProds=3;
57269     +else if MntGoldProds >= 59 then BIN_MntGoldProds=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntGoldProds >= 59 then BIN_MntGoldProds=4;
57270     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57271     +if MntMeatProducts eq . then BIN_MntMeatProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts eq . then BIN_MntMeatProducts= .;
57272     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57273     +if MntMeatProducts < 17 then BIN_MntMeatProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntMeatProducts < 17 then BIN_MntMeatProducts=1;
57274     +else if MntMeatProducts < 72 then BIN_MntMeatProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 72 then BIN_MntMeatProducts=2;
57275     +else if MntMeatProducts < 246 then BIN_MntMeatProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts < 246 then BIN_MntMeatProducts=3;
57276     +else if MntMeatProducts >= 246 then BIN_MntMeatProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntMeatProducts >= 246 then BIN_MntMeatProducts=4;
57277     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57278     +if MntSweetProducts eq . then BIN_MntSweetProducts= .;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts eq . then BIN_MntSweetProducts= .;
57279     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57280     +if MntSweetProducts < 2 then BIN_MntSweetProducts=1;
MPRINT(EM_QUANTILE_BINNING):   if MntSweetProducts < 2 then BIN_MntSweetProducts=1;
57281     +else if MntSweetProducts < 9 then BIN_MntSweetProducts=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 9 then BIN_MntSweetProducts=2;
57282     +else if MntSweetProducts < 35 then BIN_MntSweetProducts=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts < 35 then BIN_MntSweetProducts=3;
57283     +else if MntSweetProducts >= 35 then BIN_MntSweetProducts=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntSweetProducts >= 35 then BIN_MntSweetProducts=4;
57284     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57285     +if MntWines eq . then BIN_MntWines= .;
MPRINT(EM_QUANTILE_BINNING):   if MntWines eq . then BIN_MntWines= .;
57286     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57287     +if MntWines < 24 then BIN_MntWines=1;
MPRINT(EM_QUANTILE_BINNING):   if MntWines < 24 then BIN_MntWines=1;
57288     +else if MntWines < 183.5 then BIN_MntWines=2;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 183.5 then BIN_MntWines=2;
57289     +else if MntWines < 508 then BIN_MntWines=3;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines < 508 then BIN_MntWines=3;
57290     +else if MntWines >= 508 then BIN_MntWines=4;
MPRINT(EM_QUANTILE_BINNING):   else if MntWines >= 508 then BIN_MntWines=4;
57291     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57292     +if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer eq . then BIN_MonthsAsCustomer= .;
57293     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57294     +if MonthsAsCustomer < 69 then BIN_MonthsAsCustomer=1;
MPRINT(EM_QUANTILE_BINNING):   if MonthsAsCustomer < 69 then BIN_MonthsAsCustomer=1;
57295     +else if MonthsAsCustomer < 83 then BIN_MonthsAsCustomer=2;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 83 then BIN_MonthsAsCustomer=2;
57296     +else if MonthsAsCustomer < 98 then BIN_MonthsAsCustomer=3;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer < 98 then BIN_MonthsAsCustomer=3;
57297     +else if MonthsAsCustomer >= 98 then BIN_MonthsAsCustomer=4;
MPRINT(EM_QUANTILE_BINNING):   else if MonthsAsCustomer >= 98 then BIN_MonthsAsCustomer=4;
57298     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57299     +if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases eq . then BIN_NumCatalogPurchases= .;
57300     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57301     +if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumCatalogPurchases < 0 then BIN_NumCatalogPurchases=1;
57302     +else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 2 then BIN_NumCatalogPurchases=2;
57303     +else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases < 4 then BIN_NumCatalogPurchases=3;
57304     +else if NumCatalogPurchases >= 4 then BIN_NumCatalogPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumCatalogPurchases >= 4 then BIN_NumCatalogPurchases=4;
57305     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57306     +if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases eq . then BIN_NumDealsPurchases= .;
57307     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57308     +if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDealsPurchases < 1 then BIN_NumDealsPurchases=1;
57309     +else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 2 then BIN_NumDealsPurchases=2;
57310     +else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases < 3 then BIN_NumDealsPurchases=3;
57311     +else if NumDealsPurchases >= 3 then BIN_NumDealsPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDealsPurchases >= 3 then BIN_NumDealsPurchases=4;
57312     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57313     +if NumDistPurchases eq . then BIN_NumDistPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases eq . then BIN_NumDistPurchases= .;
57314     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57315     +if NumDistPurchases < 3 then BIN_NumDistPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumDistPurchases < 3 then BIN_NumDistPurchases=1;
57316     +else if NumDistPurchases < 6 then BIN_NumDistPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 6 then BIN_NumDistPurchases=2;
57317     +else if NumDistPurchases < 10 then BIN_NumDistPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases < 10 then BIN_NumDistPurchases=3;
57318     +else if NumDistPurchases >= 10 then BIN_NumDistPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumDistPurchases >= 10 then BIN_NumDistPurchases=4;
57319     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57320     +if NumStorePurchases eq . then BIN_NumStorePurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases eq . then BIN_NumStorePurchases= .;
57321     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57322     +if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumStorePurchases < 3 then BIN_NumStorePurchases=1;
57323     +else if NumStorePurchases < 5 then BIN_NumStorePurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 5 then BIN_NumStorePurchases=2;
57324     +else if NumStorePurchases < 8 then BIN_NumStorePurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases < 8 then BIN_NumStorePurchases=3;
57325     +else if NumStorePurchases >= 8 then BIN_NumStorePurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumStorePurchases >= 8 then BIN_NumStorePurchases=4;
57326     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57327     +if NumWebPurchases eq . then BIN_NumWebPurchases= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases eq . then BIN_NumWebPurchases= .;
57328     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57329     +if NumWebPurchases < 2 then BIN_NumWebPurchases=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebPurchases < 2 then BIN_NumWebPurchases=1;
57330     +else if NumWebPurchases < 4 then BIN_NumWebPurchases=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 4 then BIN_NumWebPurchases=2;
57331     +else if NumWebPurchases < 6 then BIN_NumWebPurchases=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases < 6 then BIN_NumWebPurchases=3;
57332     +else if NumWebPurchases >= 6 then BIN_NumWebPurchases=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebPurchases >= 6 then BIN_NumWebPurchases=4;
57333     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57334     +if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth eq . then BIN_NumWebVisitsMonth= .;
57335     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57336     +if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=1;
MPRINT(EM_QUANTILE_BINNING):   if NumWebVisitsMonth < 3 then BIN_NumWebVisitsMonth=1;
57337     +else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=2;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 6 then BIN_NumWebVisitsMonth=2;
57338     +else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=3;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth < 7 then BIN_NumWebVisitsMonth=3;
57339     +else if NumWebVisitsMonth >= 7 then BIN_NumWebVisitsMonth=4;
MPRINT(EM_QUANTILE_BINNING):   else if NumWebVisitsMonth >= 7 then BIN_NumWebVisitsMonth=4;
57340     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57341     +if RFMstat eq . then BIN_RFMstat= .;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat eq . then BIN_RFMstat= .;
57342     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57343     +if RFMstat < 10.34 then BIN_RFMstat=1;
MPRINT(EM_QUANTILE_BINNING):   if RFMstat < 10.34 then BIN_RFMstat=1;
57344     +else if RFMstat < 128.09 then BIN_RFMstat=2;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 128.09 then BIN_RFMstat=2;
57345     +else if RFMstat < 455.22 then BIN_RFMstat=3;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat < 455.22 then BIN_RFMstat=3;
57346     +else if RFMstat >= 455.22 then BIN_RFMstat=4;
MPRINT(EM_QUANTILE_BINNING):   else if RFMstat >= 455.22 then BIN_RFMstat=4;
57347     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57348     +if RMntFrq eq . then BIN_RMntFrq= .;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq eq . then BIN_RMntFrq= .;
57349     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57350     +if RMntFrq < 13.25 then BIN_RMntFrq=1;
MPRINT(EM_QUANTILE_BINNING):   if RMntFrq < 13.25 then BIN_RMntFrq=1;
57351     +else if RMntFrq < 30.4 then BIN_RMntFrq=2;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 30.4 then BIN_RMntFrq=2;
57352     +else if RMntFrq < 52.86 then BIN_RMntFrq=3;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq < 52.86 then BIN_RMntFrq=3;
57353     +else if RMntFrq >= 52.86 then BIN_RMntFrq=4;
MPRINT(EM_QUANTILE_BINNING):   else if RMntFrq >= 52.86 then BIN_RMntFrq=4;
57354     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57355     +if Recency eq . then BIN_Recency= .;
MPRINT(EM_QUANTILE_BINNING):   if Recency eq . then BIN_Recency= .;
57356     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57357     +if Recency < 24 then BIN_Recency=1;
MPRINT(EM_QUANTILE_BINNING):   if Recency < 24 then BIN_Recency=1;
57358     +else if Recency < 48 then BIN_Recency=2;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 48 then BIN_Recency=2;
57359     +else if Recency < 73 then BIN_Recency=3;
MPRINT(EM_QUANTILE_BINNING):   else if Recency < 73 then BIN_Recency=3;
57360     +else if Recency >= 73 then BIN_Recency=4;
MPRINT(EM_QUANTILE_BINNING):   else if Recency >= 73 then BIN_Recency=4;
57361     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57362     +if Teenhome eq . then BIN_Teenhome= .;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome eq . then BIN_Teenhome= .;
57363     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
57364     +if Teenhome < 0 then BIN_Teenhome=1;
MPRINT(EM_QUANTILE_BINNING):   if Teenhome < 0 then BIN_Teenhome=1;
57365     +else if Teenhome < 1 then BIN_Teenhome=2;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome < 1 then BIN_Teenhome=2;
57366     +else if Teenhome >= 1 then BIN_Teenhome=3;
MPRINT(EM_QUANTILE_BINNING):   else if Teenhome >= 1 then BIN_Teenhome=3;
57367     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
57368     +drop
57369     +AcceptedCmpTotal
57370     +Age
57371     +Frq
57372     +Income
57373     +Kidhome
57374     +Mnt
57375     +MntFishProducts
57376     +MntFruits
57377     +MntGoldProds
57378     +MntMeatProducts
57379     +MntSweetProducts
57380     +MntWines
57381     +MonthsAsCustomer
57382     +NumCatalogPurchases
57383     +NumDealsPurchases
57384     +NumDistPurchases
57385     +NumStorePurchases
57386     +NumWebPurchases
57387     +NumWebVisitsMonth
57388     +RFMstat
57389     +RMntFrq
57390     +Recency
57391     +Teenhome
57392     +;
MPRINT(EM_QUANTILE_BINNING):   drop AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.BINNING_BINDATA has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_BINMAPPINGS tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   length newgroup _group_ _order_ 8 _level_ $8;
MPRINT(EM_QUANTILE_BINNING):   newgroup =.;
MPRINT(EM_QUANTILE_BINNING):   _LEVEL_ = 'ORDINAL';
MPRINT(EM_QUANTILE_BINNING):   _Group_ = grp;
MPRINT(EM_QUANTILE_BINNING):   rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
MPRINT(EM_QUANTILE_BINNING):   keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      264:11   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: There were 23 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 111 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   _order_ = _N_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set WORK.TEMPSPLITVALS has 111 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals ;
MPRINT(EM_QUANTILE_BINNING):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 111 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 111 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data tempvariableset;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_VariableSet;
MPRINT(EM_QUANTILE_BINNING):   where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 2 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') and (TYPE='C') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data =EMWS8.BINNING_BINDATA classout=_classout nonorm;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc dmdb data=EMWS8.BINNING_BINDATA classout=_classout2;
MPRINT(EM_QUANTILE_BINNING):   class Education Marital_Status;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout2;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT2 has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data _classout;
MPRINT(EM_QUANTILE_BINNING):   length _variable_ $32;
MPRINT(EM_QUANTILE_BINNING):   merge _classout _classout2 (rename=(LEVEL=_split_value_));
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   _variable_ = NAME;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 10 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 111 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 111 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   length _norm_level_ $200 _split_value_ $200;
MPRINT(EM_QUANTILE_BINNING):   merge EMWS8.BINNING_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   LEVEL = trim(left(LEVEL));
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = trim(left(_split_value_));
MPRINT(EM_QUANTILE_BINNING):   _norm_level_ = trim(left(_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   drop NAME FREQUENCY TYPE CRAW NRAW;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      478:19   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      478:9   
NOTE: There were 111 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 10 observations read from the data set WORK._CLASSOUT.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete _classout _classout2;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT2 (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_QUANTILE_BINNING):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by DISPLAY_VAR _Group_;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete sortedmapping tempsplitvals tempmissvalues ;
MPRINT(EM_QUANTILE_BINNING):   run;

NOTE: Deleting WORK.SORTEDMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 9 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE LEVEL in ('BINARY', 'NOMINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 9 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc dmdb data=EMWS8.Part_TRAIN classout=tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   class AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL='MISSING' then level='Missing';
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=tempclassout nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by NAME descending FREQUENCY LEVEL;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPCLASSOUT has 24 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds(keep=NAME NOBS);
MPRINT(EM_CLASSVARS_GROUP):   retain NOBS;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if first.NAME then NOBS = frequency;
MPRINT(EM_CLASSVARS_GROUP):   else NOBS=NOBS+frequency;
MPRINT(EM_CLASSVARS_GROUP):   if last.name then do;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPDS has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempds;
MPRINT(EM_CLASSVARS_GROUP):   merge tempclassout tempds;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if ((LEVEL ne '') AND (LEVEL ne "."));
MPRINT(EM_CLASSVARS_GROUP):   PCT = 100 * (FREQUENCY/NOBS);
MPRINT(EM_CLASSVARS_GROUP):   if PCT < 0.5 then flag=1;
MPRINT(EM_CLASSVARS_GROUP):   else flag=0;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPDS.
NOTE: The data set WORK.TEMPDS has 24 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempmissvalues;
MPRINT(EM_CLASSVARS_GROUP):   length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp1";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp2";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp3";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp4";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="AcceptedCmp5";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Complain";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Education";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="HigherEducationBinary";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="Marital_Status";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The data set WORK.TEMPMISSVALUES has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data tempsplitvals;
MPRINT(EM_CLASSVARS_GROUP):   length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   if ((level ne '') AND (level ne '.'));
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp1" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp2" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp3" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp4" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "AcceptedCmp5" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Complain" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Education" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "GRADUATION" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "PHD" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "MASTER" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "2N CYCLE" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "BASIC" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "HigherEducationBinary" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "1" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "0" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "Marital_Status" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "MARRIED" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "TOGETHER" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "SINGLE" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "DIVORCED" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "WIDOW" then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 7;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   _VARIABLE_ = NAME;
MPRINT(EM_CLASSVARS_GROUP):   newgroup = .;
MPRINT(EM_CLASSVARS_GROUP):   rename NAME = DISPLAY_VAR LEVEL = _SPLIT_VALUE_;
MPRINT(EM_CLASSVARS_GROUP):   keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: Variable _Split_value_ is uninitialized.
NOTE: There were 24 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 9 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
The SAS System

      

MPRINT(EM_CLASSVARS_GROUP):   proc sql;
MPRINT(EM_CLASSVARS_GROUP):   reset noprint;
MPRINT(EM_CLASSVARS_GROUP):   select count(*) into :nobs from EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 121 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data = tempsplitvals nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_Value_ _group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 33 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   data EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   merge EMWS8.BINNING_SPLITVALS tempsplitvals ;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_ ;
MPRINT(EM_CLASSVARS_GROUP):   if display_var eq "" then delete;
MPRINT(EM_CLASSVARS_GROUP):   if _norm_level_ eq "" then _norm_level_ = _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 121 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: There were 33 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 144 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set EMWS8.BINNING_SPLITVALS has 144 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CLASSVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_CLASSVARS_GROUP):   delete tempsplitvals tempds tempclassout tempvariableset tempvars tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   run;

NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPDS (memtype=DATA).
NOTE: Deleting WORK.TEMPCLASSOUT (memtype=DATA).
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_CLASSVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_ORDVARS_GROUP):   by NAME;
MPRINT(EM_ORDVARS_GROUP):   where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS8.BINNING_VARIABLESET.
      WHERE (LEVEL='ORDINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS8.BINNING_SPLITVALS;
MPRINT(EM_ORDVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_ORDVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_ORDVARS_GROUP):   delete tempsplitvals varvals tempvariableset tempvars ;
MPRINT(EM_ORDVARS_GROUP):   run;

NOTE: The file WORK.TEMPSPLITVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.VARVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
MPRINT(EM_ORDVARS_GROUP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc print data=EMWS8.BINNING_VARMAPPINGS label;
MPRINT(TRAIN):   var _VARIABLE_ _GRP_VARIABLE_ ;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The PROCEDURE PRINT printed page 16.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS8.BINNING_SPLITVALS out=tempsplitvals nodupkey;
MPRINT(TRAIN):   by _VARIABLE_;
MPRINT(TRAIN):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: 112 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 32 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   length _proc_var_ $32;
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP1" then _proc_var_ = "AcceptedCmp1";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP2" then _proc_var_ = "AcceptedCmp2";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP3" then _proc_var_ = "AcceptedCmp3";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP4" then _proc_var_ = "AcceptedCmp4";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMP5" then _proc_var_ = "AcceptedCmp5";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "ACCEPTEDCMPTOTAL" then _proc_var_ = "BIN_AcceptedCmpTotal";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "AGE" then _proc_var_ = "BIN_Age";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "FRQ" then _proc_var_ = "BIN_Frq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "INCOME" then _proc_var_ = "BIN_Income";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "KIDHOME" then _proc_var_ = "BIN_Kidhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNT" then _proc_var_ = "BIN_Mnt";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFISHPRODUCTS" then _proc_var_ = "BIN_MntFishProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTFRUITS" then _proc_var_ = "BIN_MntFruits";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTGOLDPRODS" then _proc_var_ = "BIN_MntGoldProds";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTMEATPRODUCTS" then _proc_var_ = "BIN_MntMeatProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTSWEETPRODUCTS" then _proc_var_ = "BIN_MntSweetProducts";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MNTWINES" then _proc_var_ = "BIN_MntWines";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MONTHSASCUSTOMER" then _proc_var_ = "BIN_MonthsAsCustomer";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMCATALOGPURCHASES" then _proc_var_ = "BIN_NumCatalogPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDEALSPURCHASES" then _proc_var_ = "BIN_NumDealsPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMDISTPURCHASES" then _proc_var_ = "BIN_NumDistPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMSTOREPURCHASES" then _proc_var_ = "BIN_NumStorePurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBPURCHASES" then _proc_var_ = "BIN_NumWebPurchases";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "NUMWEBVISITSMONTH" then _proc_var_ = "BIN_NumWebVisitsMonth";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RFMSTAT" then _proc_var_ = "BIN_RFMstat";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RMNTFRQ" then _proc_var_ = "BIN_RMntFrq";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "RECENCY" then _proc_var_ = "BIN_Recency";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "TEENHOME" then _proc_var_ = "BIN_Teenhome";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "COMPLAIN" then _proc_var_ = "Complain";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "EDUCATION" then _proc_var_ = "Education";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "HIGHEREDUCATIONBINARY" then _proc_var_ = "HigherEducationBinary";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "MARITAL_STATUS" then _proc_var_ = "Marital_Status";
MPRINT(TRAIN):   if missing(_proc_var_) then _proc_var_=_variable_;
MPRINT(TRAIN):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set EMWS8.BINNING_VARMAPPINGS has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete sortedbin tempsplitvals;
MPRINT(TRAIN):   run;

NOTE: The file WORK.SORTEDBIN (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_FINE_DETAIL):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_FINE_DETAIL):   / missing out=temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETB has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete temptargetB;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TEMPTARGETB (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data temptrain ;
MPRINT(EM_SUMMARIZE_TABLE):   set EMWS8.BINNING_BINDATA;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTRAIN has 2374 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_PRENORMALIZECLASSVARS.SOURCE.
57393     +%macro em_PreNormalizeClassVars(incmeta=, outcmeta=);
57395     +   data &outcmeta(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
57396     +      length INDEXVAR $32; retain _index 0;
57397     +      set &incmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
57398     +      if strip(LEVEL) eq 'INTERVAL' then delete;
57399     +      else do;
57400     +         _index+1;
57401     +         INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
57402     +      end;
57403     +   run;
57404     +%mend em_PreNormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_NORMALIZECLASSVARS.SOURCE.
57405     +%macro em_NormalizeClassVars(indata=,
57406     +                          cmeta=,
57407     +                          encodedTarget=N,
57408     +                          target=,
57409     +                          targetEvent=,
57410     +                          targetNonEvent=,
57411     +                          outdata=);
57412     + %let dsid = %sysfunc(open(&cmeta));
57413     + %let vn_name =%sysfunc(varnum(&dsid, NAME));
57414     + %let vn_indexvar =%sysfunc(varnum(&dsid, INDEXVAR));
57415     + %let vn_format =%sysfunc(varnum(&dsid, FORMAT));
57416     + %let vn_type =%sysfunc(varnum(&dsid, TYPE));
57418     + data &outdata/view=&outdata;
57419     +      length _normedvar32 $32.;
57420     +      set &indata( rename = (
57421     +      %let k = 1;
57422     +      %do %while(^%sysfunc(fetch(&dsid)));
57423     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
57424     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
57425     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
57426     +          &_name = &_indexvar
57427     +          %let k = %eval(&k+1);
57428     +      %end;
57429     +      ));
57430     +      drop  _normedvar32;
57432     +      %let rc=%sysfunc(rewind(&dsid));
57433     +      %let k = 1;
57434     +      %do %while(^%sysfunc(fetch(&dsid)));
57435     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
57436     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
57437     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
57438     +          %let _type     = %sysfunc(getvarc(&dsid, &vn_type));
57439     +          %if &_format ne %then %do;
57440     +              _normedvar32 = put(&_indexvar, &_format);
57441     +          %end;
57442     +          %else %do;
57443     +              %if &_type = N %then %do;
57444     +                  _normedvar32 = put(&_indexvar, Best12.);
57445     +              %end;
57446     +              %else %do;
57447     +                  _normedvar32 = put(&_indexvar, $32.);
57448     +              %end;
57449     +          %end;
57450     +          %DMNORMIP(_normedvar32);
57451     +          &_name = _normedvar32;
57452     +          drop &_indexvar;
57453     +          %let k = %eval(&k+1);
57454     +      %end;
57455     +      %let dsid = %sysfunc(close(&dsid));
57457     +      %if &encodedTarget = Y %then %do;
57458     +          %let qtargetEvent = %sysfunc(quote(&targetEvent));
57459     +          %let qtargetNonEvent = %sysfunc(quote(&targetNonEvent));
57460     +          if upcase(strip(&target)) = &qtargetEvent then _EncodedTarget_ =1;
57461     +          else if upcase(strip(&target)) = &qtargetNonEvent then _EncodedTarget_ = 0;
57462     +      %end;
57463     + run;
57465     +%mend em_NormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=tempmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAP has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _cmeta;
MPRINT(EM_SUMMARIZE_TABLE):   merge tempvarset tempmap(in=_a rename=(_variable_=name ));
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   if ((_a) or (role="TARGET"));
MPRINT(EM_SUMMARIZE_TABLE):   if role="INPUT" then name=_proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if role="TARGET" then role="INPUT";
MPRINT(EM_SUMMARIZE_TABLE):   level = procLevel;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(name, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      110:9   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      115:4   
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: There were 32 observations read from the data set WORK.TEMPMAP.
NOTE: The data set WORK._CMETA has 33 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PRENORMALIZECLASSVARS):   data _cmetatmp(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
MPRINT(EM_PRENORMALIZECLASSVARS):   length INDEXVAR $32;
MPRINT(EM_PRENORMALIZECLASSVARS):   retain _index 0;
MPRINT(EM_PRENORMALIZECLASSVARS):   set _cmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRENORMALIZECLASSVARS):   if strip(LEVEL) eq 'INTERVAL' then delete;
MPRINT(EM_PRENORMALIZECLASSVARS):   else do;
MPRINT(EM_PRENORMALIZECLASSVARS):   _index+1;
MPRINT(EM_PRENORMALIZECLASSVARS):   INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
MPRINT(EM_PRENORMALIZECLASSVARS):   end;
MPRINT(EM_PRENORMALIZECLASSVARS):   run;

NOTE: There were 33 observations read from the data set WORK._CMETA.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK._CMETATMP has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_NORMALIZECLASSVARS):   data _tmp_train/view=_tmp_train;
MPRINT(EM_NORMALIZECLASSVARS):   length _normedvar32 $32.;
MPRINT(EM_NORMALIZECLASSVARS):   set work.temptrain( rename = ( AcceptedCmp1 = _INDEXVAR1 AcceptedCmp2 = _INDEXVAR2 AcceptedCmp3 = _INDEXVAR3 AcceptedCmp4 = _INDEXVAR4 AcceptedCmp5 = _INDEXVAR5 BIN_AcceptedCmpTotal = _INDEXVAR6 BIN_Age = _INDEXVAR7 
Complain = _INDEXVAR8 DepVar = _INDEXVAR9 Education = _INDEXVAR10 BIN_Frq = _INDEXVAR11 HigherEducationBinary = _INDEXVAR12 BIN_Income = _INDEXVAR13 BIN_Kidhome = _INDEXVAR14 Marital_Status = _INDEXVAR15 BIN_Mnt = _INDEXVAR16 BIN_MntFishProducts = 
_INDEXVAR17 BIN_MntFruits = _INDEXVAR18 BIN_MntGoldProds = _INDEXVAR19 BIN_MntMeatProducts = _INDEXVAR20 BIN_MntSweetProducts = _INDEXVAR21 BIN_MntWines = _INDEXVAR22 BIN_MonthsAsCustomer = _INDEXVAR23 BIN_NumCatalogPurchases = _INDEXVAR24 
BIN_NumDealsPurchases = _INDEXVAR25 BIN_NumDistPurchases = _INDEXVAR26 BIN_NumStorePurchases = _INDEXVAR27 BIN_NumWebPurchases = _INDEXVAR28 BIN_NumWebVisitsMonth = _INDEXVAR29 BIN_RFMstat = _INDEXVAR30 BIN_RMntFrq = _INDEXVAR31 BIN_Recency = _INDEXVAR32 
BIN_Teenhome = _INDEXVAR33 ));
MPRINT(EM_NORMALIZECLASSVARS):   drop _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR1, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp1 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR1;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR2, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp2 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR2;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR3, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp3 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR3;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR4, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp4 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR4;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR5, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   AcceptedCmp5 = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR5;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR6, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_AcceptedCmpTotal = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR6;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR7, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Age = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR7;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR8, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Complain = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR8;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR9, BEST.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   DepVar = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR9;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR10, $10.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Education = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR10;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR11, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Frq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR11;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR12, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   HigherEducationBinary = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR12;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR13, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Income = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR13;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR14, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Kidhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR14;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR15, $8.0);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   Marital_Status = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR15;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR16, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Mnt = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR16;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR17, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFishProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR17;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR18, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntFruits = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR18;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR19, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntGoldProds = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR19;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR20, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntMeatProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR20;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR21, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntSweetProducts = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR21;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR22, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MntWines = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR22;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR23, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_MonthsAsCustomer = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR23;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR24, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumCatalogPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR24;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR25, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDealsPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR25;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR26, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumDistPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR26;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR27, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumStorePurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR27;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR28, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebPurchases = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR28;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR29, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_NumWebVisitsMonth = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR29;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR30, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RFMstat = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR30;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR31, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_RMntFrq = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR31;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR32, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Recency = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR33, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_Teenhome = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR33;
MPRINT(EM_NORMALIZECLASSVARS):   run;

NOTE: DATA STEP view saved on file WORK._TMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VARMAPPINGS out=sortedmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.SORTEDMAP has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output CrossTabFreqs=crosstabfreq ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("proc freq data=_tmp_train order=formatted addnames;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("tables ("||_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  ") * DepVar/ missing;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output close;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   proc freq data=_tmp_train order=formatted addnames;
MPRINT(EM_SUMMARIZE_TABLE):   ) * DepVar/ missing;
MPRINT(EM_SUMMARIZE_TABLE):   run;
MPRINT(EM_SUMMARIZE_TABLE):   ods output close;
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   CrossTabFreqs ;
2         + proc freq data=_tmp_train order=formatted addnames;
3         + tables (AcceptedCmp1
4         + AcceptedCmp2
5         + AcceptedCmp3
6         + AcceptedCmp4
7         + AcceptedCmp5
8         + BIN_AcceptedCmpTotal
9         + BIN_Age
10        + BIN_Frq
11        + BIN_Income
12        + BIN_Kidhome
13        + BIN_Mnt
14        + BIN_MntFishProducts
15        + BIN_MntFruits
16        + BIN_MntGoldProds
17        + BIN_MntMeatProducts
18        + BIN_MntSweetProducts
19        + BIN_MntWines
20        + BIN_MonthsAsCustomer
21        + BIN_NumCatalogPurchases
22        + BIN_NumDealsPurchases
23        + BIN_NumDistPurchases
24        + BIN_NumStorePurchases
25        + BIN_NumWebPurchases
26        + BIN_NumWebVisitsMonth
27        + BIN_RFMstat
28        + BIN_RMntFrq
29        + BIN_Recency
30        + BIN_Teenhome
31        + Complain
32        + Education
33        + HigherEducationBinary
34        + Marital_Status
35        + ) * DepVar/ missing;
36        + run;

NOTE: View WORK._TMP_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
      
NOTE: There were 2374 observations read from the data set WORK.TEMPTRAIN.
NOTE: The data set WORK.CROSSTABFREQ has 420 observations and 43 variables.
NOTE: There were 2374 observations read from the data set WORK._TMP_TRAIN.
NOTE: The PROCEDURE FREQ printed pages 17-48.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.17 seconds
      cpu time            0.14 seconds
      

37        + ods output close;
MPRINT(EM_SUMMARIZE_TABLE):   close
MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("data crosstabs;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  length _variable_ _split_value_  $200 ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  set crosstabfreq(where=(_type_='11'));");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _variable_= RowVariable;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _split_value_="||_proc_var_||";");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("end;");
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(
MPRINT(EM_SUMMARIZE_TABLE):  "keep _variable_ _split_value_ DepVar Frequency Percent display_var;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabfreq(where=(_type_='11'));
MPRINT(EM_SUMMARIZE_TABLE):   _variable_= RowVariable;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp1' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp1 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp2' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp2 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp3' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp3 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp4' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp4 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'AcceptedCmp5' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=AcceptedCmp5 ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_AcceptedCmpTotal ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Age' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Age ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Frq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Frq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Income' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Income ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Kidhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Kidhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Mnt' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Mnt ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFishProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFishProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntFruits' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntFruits ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntGoldProds' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntGoldProds ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntMeatProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntSweetProducts ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MntWines' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MntWines ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_MonthsAsCustomer ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumCatalogPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDealsPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumDistPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumStorePurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebPurchases ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_NumWebVisitsMonth ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RFMstat' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RFMstat ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_RMntFrq' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_RMntFrq ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Recency' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Recency ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_Teenhome' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_Teenhome ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Complain' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Complain ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Education' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Education ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'HigherEducationBinary' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=HigherEducationBinary ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'Marital_Status' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=Marital_Status ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   keep _variable_ _split_value_ DepVar Frequency Percent display_var;
MPRINT(EM_SUMMARIZE_TABLE):   run;
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data crosstabs;
2         +   length _variable_ _split_value_  $200 ;
MPRINT(EM_SUMMARIZE_TABLE):  200
3         +   set crosstabfreq(where=(_type_='11'));
4         +   _variable_= RowVariable;
5         + if strip(RowVariable) = 'AcceptedCmp1' then do;
6         +   _split_value_=AcceptedCmp1                    ;
7         + end;
8         + if strip(RowVariable) = 'AcceptedCmp2' then do;
9         +   _split_value_=AcceptedCmp2                    ;
10        + end;
11        + if strip(RowVariable) = 'AcceptedCmp3' then do;
12        +   _split_value_=AcceptedCmp3                    ;
13        + end;
14        + if strip(RowVariable) = 'AcceptedCmp4' then do;
15        +   _split_value_=AcceptedCmp4                    ;
16        + end;
17        + if strip(RowVariable) = 'AcceptedCmp5' then do;
18        +   _split_value_=AcceptedCmp5                    ;
19        + end;
20        + if strip(RowVariable) = 'BIN_AcceptedCmpTotal' then do;
21        +   _split_value_=BIN_AcceptedCmpTotal            ;
22        + end;
23        + if strip(RowVariable) = 'BIN_Age' then do;
24        +   _split_value_=BIN_Age                         ;
25        + end;
26        + if strip(RowVariable) = 'BIN_Frq' then do;
27        +   _split_value_=BIN_Frq                         ;
28        + end;
29        + if strip(RowVariable) = 'BIN_Income' then do;
30        +   _split_value_=BIN_Income                      ;
31        + end;
32        + if strip(RowVariable) = 'BIN_Kidhome' then do;
33        +   _split_value_=BIN_Kidhome                     ;
34        + end;
35        + if strip(RowVariable) = 'BIN_Mnt' then do;
36        +   _split_value_=BIN_Mnt                         ;
37        + end;
38        + if strip(RowVariable) = 'BIN_MntFishProducts' then do;
39        +   _split_value_=BIN_MntFishProducts             ;
40        + end;
41        + if strip(RowVariable) = 'BIN_MntFruits' then do;
42        +   _split_value_=BIN_MntFruits                   ;
43        + end;
44        + if strip(RowVariable) = 'BIN_MntGoldProds' then do;
45        +   _split_value_=BIN_MntGoldProds                ;
46        + end;
47        + if strip(RowVariable) = 'BIN_MntMeatProducts' then do;
48        +   _split_value_=BIN_MntMeatProducts             ;
49        + end;
50        + if strip(RowVariable) = 'BIN_MntSweetProducts' then do;
51        +   _split_value_=BIN_MntSweetProducts            ;
52        + end;
53        + if strip(RowVariable) = 'BIN_MntWines' then do;
54        +   _split_value_=BIN_MntWines                    ;
55        + end;
56        + if strip(RowVariable) = 'BIN_MonthsAsCustomer' then do;
57        +   _split_value_=BIN_MonthsAsCustomer            ;
58        + end;
59        + if strip(RowVariable) = 'BIN_NumCatalogPurchases' then do;
60        +   _split_value_=BIN_NumCatalogPurchases         ;
61        + end;
62        + if strip(RowVariable) = 'BIN_NumDealsPurchases' then do;
63        +   _split_value_=BIN_NumDealsPurchases           ;
64        + end;
65        + if strip(RowVariable) = 'BIN_NumDistPurchases' then do;
66        +   _split_value_=BIN_NumDistPurchases            ;
67        + end;
68        + if strip(RowVariable) = 'BIN_NumStorePurchases' then do;
69        +   _split_value_=BIN_NumStorePurchases           ;
70        + end;
71        + if strip(RowVariable) = 'BIN_NumWebPurchases' then do;
72        +   _split_value_=BIN_NumWebPurchases             ;
73        + end;
74        + if strip(RowVariable) = 'BIN_NumWebVisitsMonth' then do;
75        +   _split_value_=BIN_NumWebVisitsMonth           ;
76        + end;
77        + if strip(RowVariable) = 'BIN_RFMstat' then do;
78        +   _split_value_=BIN_RFMstat                     ;
79        + end;
80        + if strip(RowVariable) = 'BIN_RMntFrq' then do;
81        +   _split_value_=BIN_RMntFrq                     ;
82        + end;
83        + if strip(RowVariable) = 'BIN_Recency' then do;
84        +   _split_value_=BIN_Recency                     ;
85        + end;
86        + if strip(RowVariable) = 'BIN_Teenhome' then do;
87        +   _split_value_=BIN_Teenhome                    ;
88        + end;
89        + if strip(RowVariable) = 'Complain' then do;
90        +   _split_value_=Complain                        ;
91        + end;
92        + if strip(RowVariable) = 'Education' then do;
93        +   _split_value_=Education                       ;
94        + end;
95        + if strip(RowVariable) = 'HigherEducationBinary' then do;
96        +   _split_value_=HigherEducationBinary           ;
97        + end;
98        + if strip(RowVariable) = 'Marital_Status' then do;
99        +   _split_value_=Marital_Status                  ;
100       + end;
101       + keep _variable_ _split_value_ DepVar Frequency Percent display_var;
102       + run;

WARNING: The variable display_var in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 216 observations read from the data set WORK.CROSSTABFREQ.
      WHERE _type_='11';
NOTE: The data set WORK.CROSSTABS has 216 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 216 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length display_var $32;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: There were 32 observations read from the data set WORK.SORTEDMAP.
NOTE: The data set WORK.CROSSTABS has 216 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by display_var _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 216 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS8.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 36 observations read from the data set EMWS8.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 36 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
MPRINT(EM_SUMMARIZE_TABLE):   by display_var;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(_variable_, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   _temp =
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_var by input data sets. This may cause unexpected results.
NOTE: There were 216 observations read from the data set WORK.CROSSTABS.
NOTE: There were 36 observations read from the data set WORK.TEMPVARSET.
NOTE: The data set WORK.CROSSTABS has 220 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: There were 220 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 220 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SUMMARIZE_TABLE):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate 8 type $1 valfmt $20 ;
MPRINT(EM_SUMMARIZE_TABLE):   retain eventCount noneventCount ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   if first._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total=0;
MPRINT(EM_SUMMARIZE_TABLE):   eventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   noneventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if upcase(strip(_temp))="1" then eventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   else noneventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   if last._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total = eventCount + noneventCount;
MPRINT(EM_SUMMARIZE_TABLE):   if total ne 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = eventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = nonEventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   output;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   valfmt = format;
MPRINT(EM_SUMMARIZE_TABLE):   drop _temp Frequency percent;
MPRINT(EM_SUMMARIZE_TABLE):   run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 553:20   1 at 565:24   1 at 570:30   
NOTE: There were 220 observations read from the data set WORK.CROSSTABS.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 109 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):  ;
MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   length display_var $32 newgroup numsplitval 8;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   display_var = _variable_;
MPRINT(EM_FINE_DETAIL):   index = kindex(display_var, "BIN_");
MPRINT(EM_FINE_DETAIL):   if index gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 5);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   index2 = kindex(display_var, "SV_");
MPRINT(EM_FINE_DETAIL):   if index2 gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 4);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
MPRINT(EM_FINE_DETAIL):   _index_ = _N_;
MPRINT(EM_FINE_DETAIL):   newgroup = .;
MPRINT(EM_FINE_DETAIL):   drop index index2 ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Variable numsplitval is uninitialized.
NOTE: There were 109 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 109 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 109 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 109 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_SPLITVALS;
MPRINT(EM_FINE_DETAIL):   _norm_level_ = upcase(_norm_level_);
MPRINT(EM_FINE_DETAIL):   if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
MPRINT(EM_FINE_DETAIL):   * drop _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.TMPSPLITVALS has 144 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=tmpsplitvals out=sortedsplit;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set WORK.TMPSPLITVALS.
NOTE: The data set WORK.SORTEDSPLIT has 144 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets library=work nolist;
MPRINT(EM_FINE_DETAIL):   delete tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.TMPSPLITVALS (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_BINMAPPINGS out=sortedbin;
MPRINT(EM_FINE_DETAIL):   by BIN_NAME BIN;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.SORTEDBIN has 88 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   merge EMWS8.BINNING_FINEDETAILDATA(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   if _a then do;
MPRINT(EM_FINE_DETAIL):   binFlag = 1;
MPRINT(EM_FINE_DETAIL):   VALUE=EM_BIN_LABEL;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   else do;
MPRINT(EM_FINE_DETAIL):   binFlag = 0;
MPRINT(EM_FINE_DETAIL):   *VALUE=strip(display_var)!!"="!!strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   VALUE=strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((eventCount=.) or (nonEventCount=.)) then do;
MPRINT(EM_FINE_DETAIL):   eventCount=0;
MPRINT(EM_FINE_DETAIL):   nonEventCount=0;
MPRINT(EM_FINE_DETAIL):   total = 0;
MPRINT(EM_FINE_DETAIL):   eventRate= 0;
MPRINT(EM_FINE_DETAIL):   nonEventRate = 0;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   eventCount = round(eventCount, .001);
MPRINT(EM_FINE_DETAIL):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_FINE_DETAIL):   total= round(total, .001);
MPRINT(EM_FINE_DETAIL):   eventRate = round(eventRate, .001);
MPRINT(EM_FINE_DETAIL):   nonEventRate = round(nonEventRate, .001);
MPRINT(EM_FINE_DETAIL):   if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then numsplitval = _split_value_;
MPRINT(EM_FINE_DETAIL):   else if ((type='N') AND (valfmt ne "")) then numsplitval = _order_;
MPRINT(EM_FINE_DETAIL):   else numsplitval=.;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
MPRINT(EM_FINE_DETAIL):   if _a and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   if _c and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   drop NAME EM_BIN_LABEL valfmt;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      439:15   
NOTE: Variable _order_ is uninitialized.
NOTE: There were 109 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: There were 144 observations read from the data set WORK.SORTEDSPLIT.
NOTE: There were 88 observations read from the data set WORK.SORTEDBIN.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 144 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   data EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   set EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp1" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp2" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp3" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp4" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmp5" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "AcceptedCmpTotal" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Age" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Complain" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Education" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Frq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "HigherEducationBinary" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Income" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Kidhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Marital_Status" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Mnt" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFishProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntFruits" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntGoldProds" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntMeatProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntSweetProducts" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MntWines" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "MonthsAsCustomer" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumCatalogPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDealsPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumDistPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumStorePurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebPurchases" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "NumWebVisitsMonth" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RFMstat" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "RMntFrq" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Recency" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "Teenhome" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then delete;
MPRINT(EM_FINE_DETAIL):   * if binFlag=1 and UB=LB then delete;
MPRINT(EM_FINE_DETAIL):   * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 144 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS8.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by DISPLAY_VAR _index_;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS8.BINNING_FINEDETAILDATA has 144 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete sortedsplit sortedbin ;
MPRINT(EM_FINE_DETAIL):   run;

NOTE: Deleting WORK.SORTEDSPLIT (memtype=DATA).
NOTE: Deleting WORK.SORTEDBIN (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_CREATE_GROUPING):   proc freq data=EMWS8.BINNING_BINDATA noprint;
MPRINT(EM_CREATE_GROUPING):   table
MPRINT(EM_BINARY_TARGET):   DepVar
MPRINT(EM_CREATE_GROUPING):   / missing out=temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 2374 observations read from the data set EMWS8.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETC has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets lib=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPTARGETC (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc means data=EMWS8.BINNING_FINEDETAILDATA noprint;
MPRINT(EM_CREATE_GROUPING):   var eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   class _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_FINEDETAILDATA.
NOTE: The data set WORK.SUMM has 176 observations and 6 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=summ(drop=_type_ _freq_);
MPRINT(EM_CREATE_GROUPING):   by _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 176 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 176 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep=_variable_ eventCount nonEventCount groupresprate) tempcoarse(keep=_variable_ _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
MPRINT(EM_CREATE_GROUPING):   set summ;
MPRINT(EM_CREATE_GROUPING):   format groupresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   format groupnonresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   by _variable_ ;
MPRINT(EM_CREATE_GROUPING):   if _group_=. then do;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   respper = eventCount / 359;
MPRINT(EM_CREATE_GROUPING):   nrespper = nonEventCount / 2015;
MPRINT(EM_CREATE_GROUPING):   if ((nonEventCount = 0) AND (eventCount = 0)) then do;
MPRINT(EM_CREATE_GROUPING):   groupresprate=0;
MPRINT(EM_CREATE_GROUPING):   groupNonresprate = 0;
MPRINT(EM_CREATE_GROUPING):   eventRate = 0;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   groupresprate = eventCount / (eventCount + nonEventCount) * 100;
MPRINT(EM_CREATE_GROUPING):   groupNonRespRate = 100 - groupRespRate;
MPRINT(EM_CREATE_GROUPING):   eventRate = eventCount / 359 * 100;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = nonEventCount / 2015 * 100;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   output gini tempcoarse;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 176 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.GINI has 144 observations and 4 variables.
NOTE: The data set WORK.TEMPCOARSE has 144 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=gini;
MPRINT(EM_CREATE_GROUPING):   by _variable_ descending groupresprate;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 144 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 144 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data gini(keep= _variable_ _gini_);
MPRINT(EM_CREATE_GROUPING):   retain between within cumresp cumnresp;
MPRINT(EM_CREATE_GROUPING):   set gini(keep=_variable_ eventCount nonEventCount);
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   if first._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   between = 0;
MPRINT(EM_CREATE_GROUPING):   within = 0;
MPRINT(EM_CREATE_GROUPING):   cumresp = 0;
MPRINT(EM_CREATE_GROUPING):   cumnresp = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   between + 2 * cumnresp * eventCount;
MPRINT(EM_CREATE_GROUPING):   within + nonEventCount * eventCount;
MPRINT(EM_CREATE_GROUPING):   cumresp + eventCount;
MPRINT(EM_CREATE_GROUPING):   cumnresp + nonEventCount;
MPRINT(EM_CREATE_GROUPING):   if last._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   if ^(cumnresp=0 or cumresp=0) then do;
MPRINT(EM_CREATE_GROUPING):   _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
MPRINT(EM_CREATE_GROUPING):   output;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 144 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 32 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   set EMWS8.BINNING_VARMAPPINGS;
MPRINT(EM_CREATE_GROUPING):   rename _variable_ = display_var _proc_var_ = _variable_;
MPRINT(EM_CREATE_GROUPING):   keep _variable_ _proc_var_ label;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 32 observations read from the data set EMWS8.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPDISPLAYVAR has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc sort data=tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: There were 32 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: The data set WORK.TEMPDISPLAYVAR has 32 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CREATE_GROUPING):   data EMWS8.BINNING_COARSE;
MPRINT(EM_CREATE_GROUPING):   length display_Var $32 label _label_ $200 role $10 _group_ 8;
MPRINT(EM_CREATE_GROUPING):   merge tempdisplayvar tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   label display_var = "Variable" eventRate = "Event Rate" nonEventRate = "Non-Event Rate" _group_ = "Group" role = "Role" _gini_ = "Gini Coefficient" eventcount = "Event Count" noneventcount = "Non-Event Count" groupresprate = 
"Group Event Rate" groupnonresprate = "Group Non-Event Rate" ;
MPRINT(EM_CREATE_GROUPING):   eventCount = round(eventCount, .001);
MPRINT(EM_CREATE_GROUPING):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_CREATE_GROUPING):   groupRespRate = round(groupRespRate, .001);
MPRINT(EM_CREATE_GROUPING):   drop _variable_ index index2 respper nrespper;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Variable _label_ is uninitialized.
NOTE: Variable role is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _variable_ by input data sets. This may cause unexpected results.
WARNING: The variable index in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable index2 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 32 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: There were 144 observations read from the data set WORK.TEMPCOARSE.
NOTE: There were 32 observations read from the data set WORK.GINI.
NOTE: The data set EMWS8.BINNING_COARSE has 144 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CREATE_GROUPING):   proc datasets library=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   run;

NOTE: Deleting WORK.TEMPCOARSE (memtype=DATA).
NOTE: Deleting WORK.GINI (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas";
MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   FILE Y;
MPRINT(EM_GENERATE_LABELVALUES):   put " length _LABEL_ $200;";
MPRINT(EM_GENERATE_LABELVALUES):   put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 12.26 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 2 records were written to the file Y.
      The minimum record length was 21.
      The maximum record length was 83.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_SPLITVALS out=work.sortedsplitval;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var _split_Value_;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_SPLITVALS.
NOTE: The data set WORK.SORTEDSPLITVAL has 144 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS8.BINNING_BINMAPPINGS;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var bin;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set EMWS8.BINNING_BINMAPPINGS has 88 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   if display_var eq '' then delete;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 112 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) EMWS8.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   keep _variable_ display_var missgrp;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 88 observations read from the data set EMWS8.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=temp out=class;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_ LB;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 112 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 112 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   file Y MOD;
MPRINT(EM_GENERATE_LABELVALUES):   length string $200 flag 8;
MPRINT(EM_GENERATE_LABELVALUES):   retain string flag;
MPRINT(EM_GENERATE_LABELVALUES):   set class end=eof;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_;
MPRINT(EM_GENERATE_LABELVALUES):   index = kindex(_variable_, "BIN_");
MPRINT(EM_GENERATE_LABELVALUES):   if index gt 0 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then do;';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   if LB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 1;
MPRINT(EM_GENERATE_LABELVALUES):   *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._Group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   if UB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!'< '!!strip(UB)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag=1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string= " UB="!!strip(UB)!!";";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   put "end;";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string = "_LABEL_='"!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag ne 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   tempstring = strip(string)!!', '!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   length = length(tempstring);
MPRINT(EM_GENERATE_LABELVALUES):   if length < 195 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = tempstring;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)||",...";
MPRINT(EM_GENERATE_LABELVALUES):   flag=1;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      243:30   295:37   355:23   
NOTE: The file Y is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=108,
      Last Modified=19. April 2016 12.26 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 512 records were written to the file Y.
      The minimum record length was 1.
      The maximum record length was 61.
NOTE: There were 112 observations read from the data set WORK.CLASS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
NOTE: %INCLUDE (level 1) file Y is file C:\\predictive-models-project\Workspaces\EMWS8\BINNING\GROUPMAPPINGSCORECODE.sas.
57466     + length _LABEL_ $200;
MPRINT(EM_GENERATE_LABELVALUES):   length _LABEL_ $200;
57467     + label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";
MPRINT(EM_GENERATE_LABELVALUES):   label _LABEL_= "Group Values";
57468     +
57469     +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then
57470     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 2 then _LABEL_='0';
57471     +else
57472     +if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then
57473     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp1' and _GROUP_ = 3 then _LABEL_='1';
57474     +
57475     +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then
57476     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 2 then _LABEL_='0';
57477     +else
57478     +if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then
57479     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp2' and _GROUP_ = 3 then _LABEL_='1';
57480     +
57481     +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then
57482     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 2 then _LABEL_='0';
57483     +else
57484     +if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then
57485     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp3' and _GROUP_ = 3 then _LABEL_='1';
57486     +
57487     +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then
57488     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 2 then _LABEL_='0';
57489     +else
57490     +if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then
57491     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp4' and _GROUP_ = 3 then _LABEL_='1';
57492     +
57493     +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then
57494     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 2 then _LABEL_='0';
57495     +else
57496     +if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then
57497     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmp5' and _GROUP_ = 3 then _LABEL_='1';
57498     +
57499     +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 2 then do;
57500     +_LABEL_='AcceptedCmpTotal< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='AcceptedCmpTotal< 0';
57501     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
57502     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57503     +else
57504     +if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='AcceptedCmpTotal' and _GROUP_ = 3 then do;
57505     +_LABEL_='0<= AcceptedCmpTotal';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= AcceptedCmpTotal';
57506     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57507     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57508     +
57509     +if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Age' and _GROUP_ = 2 then do;
57510     +_LABEL_='Age< 38';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Age< 38';
57511     +UB=38;
MPRINT(EM_GENERATE_LABELVALUES):   UB=38;
57512     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57513     +else
57514     +if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 3 then do;
57515     +_LABEL_='38<= Age< 46';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='38<= Age< 46';
57516     +UB=46;
MPRINT(EM_GENERATE_LABELVALUES):   UB=46;
57517     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57518     +else
57519     +if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 4 then do;
57520     +_LABEL_='46<= Age< 57';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='46<= Age< 57';
57521     +UB=57;
MPRINT(EM_GENERATE_LABELVALUES):   UB=57;
57522     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57523     +else
57524     +if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Age' and _GROUP_ = 5 then do;
57525     +_LABEL_='57<= Age';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='57<= Age';
57526     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57527     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57528     +
57529     +if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Frq' and _GROUP_ = 2 then do;
57530     +_LABEL_='Frq< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Frq< 6';
57531     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
57532     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57533     +else
57534     +if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 3 then do;
57535     +_LABEL_='6<= Frq< 12';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= Frq< 12';
57536     +UB=12;
MPRINT(EM_GENERATE_LABELVALUES):   UB=12;
57537     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57538     +else
57539     +if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 4 then do;
57540     +_LABEL_='12<= Frq< 18';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='12<= Frq< 18';
57541     +UB=18;
MPRINT(EM_GENERATE_LABELVALUES):   UB=18;
57542     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57543     +else
57544     +if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Frq' and _GROUP_ = 5 then do;
57545     +_LABEL_='18<= Frq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='18<= Frq';
57546     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57547     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57548     +
57549     +if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Income' and _GROUP_ = 2 then do;
57550     +_LABEL_='Income< 35268';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Income< 35268';
57551     +UB=35268;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35268;
57552     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57553     +else
57554     +if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 3 then do;
57555     +_LABEL_='35268<= Income< 52157';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35268<= Income< 52157';
57556     +UB=52157;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52157;
57557     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57558     +else
57559     +if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 4 then do;
57560     +_LABEL_='52157<= Income< 69486';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52157<= Income< 69486';
57561     +UB=69486;
MPRINT(EM_GENERATE_LABELVALUES):   UB=69486;
57562     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57563     +else
57564     +if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Income' and _GROUP_ = 5 then do;
57565     +_LABEL_='69486<= Income';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='69486<= Income';
57566     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57567     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57568     +
57569     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Kidhome' and _GROUP_ = 2 then do;
57570     +_LABEL_='Kidhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Kidhome< 0';
57571     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
57572     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57573     +else
57574     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 3 then do;
57575     +_LABEL_='0<= Kidhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Kidhome< 1';
57576     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
57577     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57578     +else
57579     +if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Kidhome' and _GROUP_ = 4 then do;
57580     +_LABEL_='1<= Kidhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Kidhome';
57581     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57582     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57583     +
57584     +if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Mnt' and _GROUP_ = 2 then do;
57585     +_LABEL_='Mnt< 72';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Mnt< 72';
57586     +UB=72;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72;
57587     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57588     +else
57589     +if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 3 then do;
57590     +_LABEL_='72<= Mnt< 405.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72<= Mnt< 405.5';
57591     +UB=405.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=405.5;
57592     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57593     +else
57594     +if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 4 then do;
57595     +_LABEL_='405.5<= Mnt< 1064';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='405.5<= Mnt< 1064';
57596     +UB=1064;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1064;
57597     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57598     +else
57599     +if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Mnt' and _GROUP_ = 5 then do;
57600     +_LABEL_='1064<= Mnt';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1064<= Mnt';
57601     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57602     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57603     +
57604     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 2 then do;
57605     +_LABEL_='MntFishProducts< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFishProducts< 3';
57606     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
57607     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57608     +else
57609     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 3 then do;
57610     +_LABEL_='3<= MntFishProducts< 13';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= MntFishProducts< 13';
57611     +UB=13;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13;
57612     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57613     +else
57614     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 4 then do;
57615     +_LABEL_='13<= MntFishProducts< 47';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13<= MntFishProducts< 47';
57616     +UB=47;
MPRINT(EM_GENERATE_LABELVALUES):   UB=47;
57617     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57618     +else
57619     +if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFishProducts' and _GROUP_ = 5 then do;
57620     +_LABEL_='47<= MntFishProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='47<= MntFishProducts';
57621     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57622     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57623     +
57624     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntFruits' and _GROUP_ = 2 then do;
57625     +_LABEL_='MntFruits< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntFruits< 2';
57626     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
57627     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57628     +else
57629     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 3 then do;
57630     +_LABEL_='2<= MntFruits< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= MntFruits< 9';
57631     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
57632     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57633     +else
57634     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 4 then do;
57635     +_LABEL_='9<= MntFruits< 35';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntFruits< 35';
57636     +UB=35;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35;
57637     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57638     +else
57639     +if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntFruits' and _GROUP_ = 5 then do;
57640     +_LABEL_='35<= MntFruits';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35<= MntFruits';
57641     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57642     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57643     +
57644     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 2 then do;
57645     +_LABEL_='MntGoldProds< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntGoldProds< 9';
57646     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
57647     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57648     +else
57649     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 3 then do;
57650     +_LABEL_='9<= MntGoldProds< 25';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntGoldProds< 25';
57651     +UB=25;
MPRINT(EM_GENERATE_LABELVALUES):   UB=25;
57652     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57653     +else
57654     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 4 then do;
57655     +_LABEL_='25<= MntGoldProds< 59';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='25<= MntGoldProds< 59';
57656     +UB=59;
MPRINT(EM_GENERATE_LABELVALUES):   UB=59;
57657     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57658     +else
57659     +if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntGoldProds' and _GROUP_ = 5 then do;
57660     +_LABEL_='59<= MntGoldProds';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='59<= MntGoldProds';
57661     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57662     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57663     +
57664     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 2 then do;
57665     +_LABEL_='MntMeatProducts< 17';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntMeatProducts< 17';
57666     +UB=17;
MPRINT(EM_GENERATE_LABELVALUES):   UB=17;
57667     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57668     +else
57669     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 3 then do;
57670     +_LABEL_='17<= MntMeatProducts< 72';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='17<= MntMeatProducts< 72';
57671     +UB=72;
MPRINT(EM_GENERATE_LABELVALUES):   UB=72;
57672     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57673     +else
57674     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 4 then do;
57675     +_LABEL_='72<= MntMeatProducts< 246';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='72<= MntMeatProducts< 246';
57676     +UB=246;
MPRINT(EM_GENERATE_LABELVALUES):   UB=246;
57677     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57678     +else
57679     +if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntMeatProducts' and _GROUP_ = 5 then do;
57680     +_LABEL_='246<= MntMeatProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='246<= MntMeatProducts';
57681     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57682     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57683     +
57684     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 2 then do;
57685     +_LABEL_='MntSweetProducts< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntSweetProducts< 2';
57686     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
57687     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57688     +else
57689     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 3 then do;
57690     +_LABEL_='2<= MntSweetProducts< 9';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= MntSweetProducts< 9';
57691     +UB=9;
MPRINT(EM_GENERATE_LABELVALUES):   UB=9;
57692     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57693     +else
57694     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 4 then do;
57695     +_LABEL_='9<= MntSweetProducts< 35';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='9<= MntSweetProducts< 35';
57696     +UB=35;
MPRINT(EM_GENERATE_LABELVALUES):   UB=35;
57697     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57698     +else
57699     +if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntSweetProducts' and _GROUP_ = 5 then do;
57700     +_LABEL_='35<= MntSweetProducts';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='35<= MntSweetProducts';
57701     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57702     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57703     +
57704     +if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MntWines' and _GROUP_ = 2 then do;
57705     +_LABEL_='MntWines< 24';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MntWines< 24';
57706     +UB=24;
MPRINT(EM_GENERATE_LABELVALUES):   UB=24;
57707     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57708     +else
57709     +if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 3 then do;
57710     +_LABEL_='24<= MntWines< 183.5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='24<= MntWines< 183.5';
57711     +UB=183.5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=183.5;
57712     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57713     +else
57714     +if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 4 then do;
57715     +_LABEL_='183.5<= MntWines< 508';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='183.5<= MntWines< 508';
57716     +UB=508;
MPRINT(EM_GENERATE_LABELVALUES):   UB=508;
57717     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57718     +else
57719     +if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MntWines' and _GROUP_ = 5 then do;
57720     +_LABEL_='508<= MntWines';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='508<= MntWines';
57721     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57722     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57723     +
57724     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 2 then do;
57725     +_LABEL_='MonthsAsCustomer< 69';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='MonthsAsCustomer< 69';
57726     +UB=69;
MPRINT(EM_GENERATE_LABELVALUES):   UB=69;
57727     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57728     +else
57729     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 3 then do;
57730     +_LABEL_='69<= MonthsAsCustomer< 83';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='69<= MonthsAsCustomer< 83';
57731     +UB=83;
MPRINT(EM_GENERATE_LABELVALUES):   UB=83;
57732     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57733     +else
57734     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 4 then do;
57735     +_LABEL_='83<= MonthsAsCustomer< 98';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='83<= MonthsAsCustomer< 98';
57736     +UB=98;
MPRINT(EM_GENERATE_LABELVALUES):   UB=98;
57737     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57738     +else
57739     +if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='MonthsAsCustomer' and _GROUP_ = 5 then do;
57740     +_LABEL_='98<= MonthsAsCustomer';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='98<= MonthsAsCustomer';
57741     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57742     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57743     +
57744     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 2 then do;
57745     +_LABEL_='NumCatalogPurchases< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumCatalogPurchases< 0';
57746     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
57747     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57748     +else
57749     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 3 then do;
57750     +_LABEL_='0<= NumCatalogPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= NumCatalogPurchases< 2';
57751     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
57752     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57753     +else
57754     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 4 then do;
57755     +_LABEL_='2<= NumCatalogPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumCatalogPurchases< 4';
57756     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
57757     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57758     +else
57759     +if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumCatalogPurchases' and _GROUP_ = 5 then do;
57760     +_LABEL_='4<= NumCatalogPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumCatalogPurchases';
57761     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57762     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57763     +
57764     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 2 then do;
57765     +_LABEL_='NumDealsPurchases< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDealsPurchases< 1';
57766     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
57767     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57768     +else
57769     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 3 then do;
57770     +_LABEL_='1<= NumDealsPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= NumDealsPurchases< 2';
57771     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
57772     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57773     +else
57774     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 4 then do;
57775     +_LABEL_='2<= NumDealsPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumDealsPurchases< 3';
57776     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
57777     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57778     +else
57779     +if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDealsPurchases' and _GROUP_ = 5 then do;
57780     +_LABEL_='3<= NumDealsPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDealsPurchases';
57781     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57782     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57783     +
57784     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 2 then do;
57785     +_LABEL_='NumDistPurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumDistPurchases< 3';
57786     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
57787     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57788     +else
57789     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 3 then do;
57790     +_LABEL_='3<= NumDistPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumDistPurchases< 6';
57791     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
57792     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57793     +else
57794     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 4 then do;
57795     +_LABEL_='6<= NumDistPurchases< 10';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumDistPurchases< 10';
57796     +UB=10;
MPRINT(EM_GENERATE_LABELVALUES):   UB=10;
57797     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57798     +else
57799     +if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumDistPurchases' and _GROUP_ = 5 then do;
57800     +_LABEL_='10<= NumDistPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='10<= NumDistPurchases';
57801     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57802     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57803     +
57804     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 2 then do;
57805     +_LABEL_='NumStorePurchases< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumStorePurchases< 3';
57806     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
57807     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57808     +else
57809     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 3 then do;
57810     +_LABEL_='3<= NumStorePurchases< 5';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumStorePurchases< 5';
57811     +UB=5;
MPRINT(EM_GENERATE_LABELVALUES):   UB=5;
57812     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57813     +else
57814     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 4 then do;
57815     +_LABEL_='5<= NumStorePurchases< 8';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='5<= NumStorePurchases< 8';
57816     +UB=8;
MPRINT(EM_GENERATE_LABELVALUES):   UB=8;
57817     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57818     +else
57819     +if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumStorePurchases' and _GROUP_ = 5 then do;
57820     +_LABEL_='8<= NumStorePurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='8<= NumStorePurchases';
57821     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57822     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57823     +
57824     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 2 then do;
57825     +_LABEL_='NumWebPurchases< 2';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebPurchases< 2';
57826     +UB=2;
MPRINT(EM_GENERATE_LABELVALUES):   UB=2;
57827     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57828     +else
57829     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 3 then do;
57830     +_LABEL_='2<= NumWebPurchases< 4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='2<= NumWebPurchases< 4';
57831     +UB=4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=4;
57832     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57833     +else
57834     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 4 then do;
57835     +_LABEL_='4<= NumWebPurchases< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='4<= NumWebPurchases< 6';
57836     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
57837     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57838     +else
57839     +if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebPurchases' and _GROUP_ = 5 then do;
57840     +_LABEL_='6<= NumWebPurchases';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebPurchases';
57841     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57842     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57843     +
57844     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 2 then do;
57845     +_LABEL_='NumWebVisitsMonth< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='NumWebVisitsMonth< 3';
57846     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
57847     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57848     +else
57849     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 3 then do;
57850     +_LABEL_='3<= NumWebVisitsMonth< 6';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= NumWebVisitsMonth< 6';
57851     +UB=6;
MPRINT(EM_GENERATE_LABELVALUES):   UB=6;
57852     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57853     +else
57854     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 4 then do;
57855     +_LABEL_='6<= NumWebVisitsMonth< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='6<= NumWebVisitsMonth< 7';
57856     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
57857     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57858     +else
57859     +if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='NumWebVisitsMonth' and _GROUP_ = 5 then do;
57860     +_LABEL_='7<= NumWebVisitsMonth';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= NumWebVisitsMonth';
57861     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57862     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57863     +
57864     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RFMstat' and _GROUP_ = 2 then do;
57865     +_LABEL_='RFMstat< 10.34';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RFMstat< 10.34';
57866     +UB=10.34;
MPRINT(EM_GENERATE_LABELVALUES):   UB=10.34;
57867     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57868     +else
57869     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 3 then do;
57870     +_LABEL_='10.34<= RFMstat< 128.09';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='10.34<= RFMstat< 128.09';
57871     +UB=128.09;
MPRINT(EM_GENERATE_LABELVALUES):   UB=128.09;
57872     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57873     +else
57874     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 4 then do;
57875     +_LABEL_='128.09<= RFMstat< 455.22';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='128.09<= RFMstat< 455.22';
57876     +UB=455.22;
MPRINT(EM_GENERATE_LABELVALUES):   UB=455.22;
57877     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57878     +else
57879     +if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RFMstat' and _GROUP_ = 5 then do;
57880     +_LABEL_='455.22<= RFMstat';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='455.22<= RFMstat';
57881     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57882     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57883     +
57884     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='RMntFrq' and _GROUP_ = 2 then do;
57885     +_LABEL_='RMntFrq< 13.25';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='RMntFrq< 13.25';
57886     +UB=13.25;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13.25;
57887     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57888     +else
57889     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 3 then do;
57890     +_LABEL_='13.25<= RMntFrq< 30.4';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13.25<= RMntFrq< 30.4';
57891     +UB=30.4;
MPRINT(EM_GENERATE_LABELVALUES):   UB=30.4;
57892     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57893     +else
57894     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 4 then do;
57895     +_LABEL_='30.4<= RMntFrq< 52.86';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='30.4<= RMntFrq< 52.86';
57896     +UB=52.86;
MPRINT(EM_GENERATE_LABELVALUES):   UB=52.86;
57897     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57898     +else
57899     +if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='RMntFrq' and _GROUP_ = 5 then do;
57900     +_LABEL_='52.86<= RMntFrq';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='52.86<= RMntFrq';
57901     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57902     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57903     +
57904     +if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Recency' and _GROUP_ = 2 then do;
57905     +_LABEL_='Recency< 24';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Recency< 24';
57906     +UB=24;
MPRINT(EM_GENERATE_LABELVALUES):   UB=24;
57907     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57908     +else
57909     +if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 3 then do;
57910     +_LABEL_='24<= Recency< 48';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='24<= Recency< 48';
57911     +UB=48;
MPRINT(EM_GENERATE_LABELVALUES):   UB=48;
57912     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57913     +else
57914     +if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 4 then do;
57915     +_LABEL_='48<= Recency< 73';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='48<= Recency< 73';
57916     +UB=73;
MPRINT(EM_GENERATE_LABELVALUES):   UB=73;
57917     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57918     +else
57919     +if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Recency' and _GROUP_ = 5 then do;
57920     +_LABEL_='73<= Recency';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='73<= Recency';
57921     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57922     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57923     +
57924     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Teenhome' and _GROUP_ = 2 then do;
57925     +_LABEL_='Teenhome< 0';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='Teenhome< 0';
57926     +UB=0;
MPRINT(EM_GENERATE_LABELVALUES):   UB=0;
57927     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57928     +else
57929     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 3 then do;
57930     +_LABEL_='0<= Teenhome< 1';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='0<= Teenhome< 1';
57931     +UB=1;
MPRINT(EM_GENERATE_LABELVALUES):   UB=1;
57932     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57933     +else
57934     +if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Teenhome' and _GROUP_ = 4 then do;
57935     +_LABEL_='1<= Teenhome';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='1<= Teenhome';
57936     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
57937     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
57938     +
57939     +if DISPLAY_VAR='Complain' and _GROUP_ = 2 then
57940     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Complain' and _GROUP_ = 2 then _LABEL_='0';
57941     +else
57942     +if DISPLAY_VAR='Complain' and _GROUP_ = 3 then
57943     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Complain' and _GROUP_ = 3 then _LABEL_='1';
57944     +
57945     +if DISPLAY_VAR='Education' and _GROUP_ = 2 then
57946     +_LABEL_='GRADUATION';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Education' and _GROUP_ = 2 then _LABEL_='GRADUATION';
57947     +else
57948     +if DISPLAY_VAR='Education' and _GROUP_ = 3 then
57949     +_LABEL_='PHD';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 3 then _LABEL_='PHD';
57950     +else
57951     +if DISPLAY_VAR='Education' and _GROUP_ = 4 then
57952     +_LABEL_='MASTER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 4 then _LABEL_='MASTER';
57953     +else
57954     +if DISPLAY_VAR='Education' and _GROUP_ = 5 then
57955     +_LABEL_='2N CYCLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 5 then _LABEL_='2N CYCLE';
57956     +else
57957     +if DISPLAY_VAR='Education' and _GROUP_ = 6 then
57958     +_LABEL_='BASIC';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Education' and _GROUP_ = 6 then _LABEL_='BASIC';
57959     +
57960     +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then
57961     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 2 then _LABEL_='1';
57962     +else
57963     +if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then
57964     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='HigherEducationBinary' and _GROUP_ = 3 then _LABEL_='0';
57965     +
57966     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then
57967     +_LABEL_='MARRIED';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='Marital_Status' and _GROUP_ = 2 then _LABEL_='MARRIED';
57968     +else
57969     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then
57970     +_LABEL_='TOGETHER';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 3 then _LABEL_='TOGETHER';
57971     +else
57972     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then
57973     +_LABEL_='SINGLE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 4 then _LABEL_='SINGLE';
57974     +else
57975     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then
57976     +_LABEL_='DIVORCED';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 5 then _LABEL_='DIVORCED';
57977     +else
57978     +if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then
57979     +_LABEL_='WIDOW';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='Marital_Status' and _GROUP_ = 6 then _LABEL_='WIDOW';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 144 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   *filename Y;
MPRINT(EM_GENERATE_LABELVALUES):   data EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS8.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp1" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp2" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp3" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp4" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmp5" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "AcceptedCmpTotal" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Age" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Complain" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Education" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Frq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "HigherEducationBinary" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Income" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Kidhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Marital_Status" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Mnt" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFishProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntFruits" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntGoldProds" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntMeatProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntSweetProducts" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MntWines" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "MonthsAsCustomer" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumCatalogPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDealsPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumDistPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumStorePurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebPurchases" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "NumWebVisitsMonth" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RFMstat" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "RMntFrq" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Recency" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "Teenhome" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: There were 144 observations read from the data set EMWS8.BINNING_COARSE.
NOTE: The data set EMWS8.BINNING_COARSE has 144 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_LABELVALUES):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_LABELVALUES):   delete class temp temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
MPRINT(EM_GENERATE_LABELVALUES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATESTAT";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.29396922713796;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
57980      
57981      *------------------------------------------------------------*;
57982      * End TRAIN: BINNING;
57983      *------------------------------------------------------------*;

57984      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
57985      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
57986      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
57987      ;
MPRINT(EM_DIAGRAM):   ;
57988      ;
MPRINT(EM_DIAGRAM):   ;
57989      ;
MPRINT(EM_DIAGRAM):   ;
57990      ;
MPRINT(EM_DIAGRAM):   ;
57991      quit;
MPRINT(EM_DIAGRAM):   quit;
57992      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
57993      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
57994      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
57995      /*; *"; *'; */
57996      ;
MPRINT(EM_DIAGRAM):   ;
57997      run;
MPRINT(EM_DIAGRAM):   run;
57998      quit;
MPRINT(EM_DIAGRAM):   quit;
57999      /* Reset EM Options */
58000      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
58001      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
58002      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
58003      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
58004      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
58005      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
