MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.47 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                15.47 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1MLLO54 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1MLLO54 new;
MPRINT(EM_DIAGRAM):   run;
38155      %let EMEXCEPTIONSTRING=;
38156      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
38157      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
38158      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
38159      %let EM_ACTION = REPORT;
38160      %let syscc = 0;
38161      %macro main;
38162      
38163        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
38164        %include temp;
38165        filename temp;
38166      
38167        %setProperties;
38168      
38169        %if %upcase(&EM_ACTION) = CREATE %then %do;
38170          filename temp catalog 'sashelp.emmdfy.binning_create.source';
38171          %include temp;
38172          filename temp;
38173      
38174          %create;
38175        %end;
38176      
38177         %else
38178         %if %upcase(&EM_ACTION) = TRAIN %then %do;
38179      
38180             filename temp catalog 'sashelp.emmdfy.binning_train.source';
38181             %include temp;
38182             filename temp;
38183             %train;
38184         %end;
38185      
38186        %else
38187        %if %upcase(&EM_ACTION) = SCORE %then %do;
38188          filename temp catalog 'sashelp.emmdfy.binning_score.source';
38189          %include temp;
38190          filename temp;
38191      
38192          %score;
38193      
38194        %end;
38195      
38196        %else
38197        %if %upcase(&EM_ACTION) = REPORT %then %do;
38198      
38199             filename temp catalog 'sashelp.emmdfy.binning_report.source';
38200             %include temp;
38201             filename temp;
38202      
38203             %report;
38204         %end;
38205      
38206         %doendm:
38207      %mend main;
38208      
38209      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
38211     +%macro SetProperties;
38213     +     /* IGN options */
38214     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
38215     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
38216     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
38218     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
38219     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
38220     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
38221     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
38222     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
38223     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
38224     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
38225     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
38226     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
38227     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
38228     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
38229     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
38230     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
38231     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
38234     +%mend SetProperties;
38235     +%macro appendfiles(fileref1, fileref2);
38236     +     data _null_;
38237     +       length c $256;
38238     +       fid1=fopen("&fileref1",'A');
38239     +       fid2=fopen("&fileref2",'I');
38240     +       cval = finfo(fid2,'lrecl');
38241     +       put cval= fid1= fid2=;
38242     +       if (fid2 > 0) then
38243     +         do while(fread(fid2)=0);
38244     +           rc = fget(fid2,c,256);
38245     +           _msg_=sysmsg();
38246     +           /* put rc= c= _msg_=; */
38247     +           rc = fput(fid1,strip(c));
38248     +           rc = fwrite(fid1);
38249     +         end;
38250     +         _msg_=sysmsg();
38251     +         put _msg_=;
38252     +       rc = fclose(fid1);
38253     +       rc = fclose(fid2);
38254     +     run;
38255     +%mend appendfiles;
38257     +%macro buildOptScoreCode;
38259     +    %em_register(key=BINCODE, type=FOLDER);
38261     +    filename x catalog 'sashelp.emutil.em_deldir.source';
38262     +    %inc x;
38263     +    filename x;
38264     +    %delDir(folder=%nrbquote(&em_user_bincode));
38266     +    data _null_; length rc $200;
38267     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
38268     +    run;
38270     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
38272     +    %let dsid = %sysfunc(open(class_nosv));
38273     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
38274     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
38276     +    %let oldname=;
38277     +    %do %while(^%sysfunc(fetch(&dsid)));
38278     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
38279     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
38281     +        %if &name ne &oldname %then %do;
38282     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
38283     +             data _null_;
38284     +                length string $200 flag endflag 8;
38285     +                retain string flag endflag;
38286     +                set class_nosv end=eof;
38287     +                where DISPLAY_VAR ="&name";
38288     +                by _variable_ _group_;
38289     +                file _F1;
38290     +                index = kindex(_variable_, "BIN_");
38291     +                if index gt 0 then do;
38292     +                   if first._variable_ then do;
38293     +                      put ' ';
38294     +                      put "&EM_CODEBAR;";
38295     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
38296     +                      put string;
38297     +                      put "&EM_CODEBAR;";
38299     +                      if origLabel ne "" then do;
38300     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
38301     +                            put string;
38302     +                            string = tranwrd(origLabel,"'","''");
38303     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
38304     +                            put string;
38305     +                      end;
38306     +                      else do;
38307     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
38308     +                             put string;
38309     +                      end;
38311     +                      put ' ';
38313     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38314     +                      put string;
38315     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38316     +                      put string;
38317     +                      put "end;";
38318     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38319     +                      put string;
38320     +                   end;
38321     +                   if first._group_ then do;
38322     +                      flag = 0;
38323     +                      endflag = 1;
38324     +                      if ^first._variable_ then do;
38325     +                         put "else";
38326     +                      end;
38327     +                      if LB ne . then do;
38328     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
38329     +                      end;
38330     +                      else do;
38331     +                         flag = 1;
38332     +                         string = "if";
38333     +                      end;
38334     +                   end;
38335     +                   if last._Group_ then do;
38336     +                      if UB ne . then do;
38337     +                        if flag ne 1 then do;
38338     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
38339     +                        end;
38340     +                        else do;
38341     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
38342     +                        end;
38343     +                      end;
38344     +                      else do;
38345     +                         if flag=1 then do;
38346     +                            string = strip(DISPLAY_VAR) ;
38347     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
38348     +                            endflag=0;
38349     +                            string="";
38350     +                         end;
38351     +                         else do;
38352     +                            string = strip(string)!!" then do;";
38353     +                         end;
38354     +                      end;
38355     +                      put string;
38356     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38357     +                      put string;
38358     +                      if endflag eq 1 then do;
38359     +                        put "end;";
38360     +                      end;
38361     +                   end;
38362     +                   if last._variable_ then do;
38363     +                     string = "end;";
38364     +                     put string;
38365     +                   end;
38367     +                end;
38368     +                else do;
38369     +                   _split_value_ = tranwrd(_split_value_,"'","''");
38370     +                   if first._group_ then do;
38371     +                      flag=0;
38372     +                      if ^first._variable_ then
38373     +                         put 'else';
38374     +                      else do;
38375     +                         put ' ';
38376     +                         put "&EM_CODEBAR;";
38377     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
38378     +                         put string;
38379     +                         put "&EM_CODEBAR;";
38381     +                         if origLabel ne "" then do;
38382     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
38383     +                               put string;
38384     +                               string = tranwrd(origLabel,"'","''");
38385     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
38386     +                               put string;
38387     +                         end;
38388     +                         else do;
38389     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
38390     +                               put string;
38391     +                         end;
38393     +                         put ' ';
38395     +                         if format ne '' then do;
38396     +                            if first._variable_ then do;
38397     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
38398     +                               put string;
38399     +                               string = '%dmnormip(_UFormat);';
38400     +                               put string;
38402     +                               string ="if MISSING(_UFORMAT) then do;";
38403     +                               put string;
38404     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38405     +                               put string;
38406     +                               put "end;";
38408     +                               string="else if NOT MISSING(_UFORMAT) then do;";
38409     +                               put string;
38411     +                            end;
38412     +                         end;
38413     +                         else do;
38414     +                            if type = 'N' then do;
38415     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38416     +                              put string;
38417     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38418     +                              put string;
38419     +                              put "end;";
38421     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38422     +                              put string;
38423     +                            end;
38424     +                            else if type='C' then do;
38425     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
38426     +                              put string;
38427     +                              string = '%dmnormip(_UFormat);';
38428     +                              put string;
38430     +                              string ="if MISSING(_UFORMAT) then do;";
38431     +                              put string;
38432     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38433     +                              put string;
38434     +                              put "end;";
38436     +                              string="else if NOT MISSING(_UFORMAT) then do;";
38437     +                              put string;
38438     +                              string = '%dmnormip(_UFormat);';
38439     +                              put string;
38440     +                           end;
38441     +                         end;
38442     +                      end;
38443     +                      if format ne '' OR type='C' then do;
38444     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
38445     +                      end;
38446     +                      else do;
38447     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38448     +                      end;
38449     +                   end;
38450     +                   else do;
38451     +                      if flag ne 1 then do;
38452     +                       if format ne '' OR type='C' then do;
38453     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
38454     +                       end;
38455     +                       else do;
38456     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38457     +                       end;
38458     +                         length = length(tempstring);
38460     +                         if length < 195 then do;
38461     +                            string = tempstring;
38462     +                         end;
38463     +                         else do;
38465     +                            string = strip(string);
38466     +                            put string;
38467     +                            string = ") then do;";
38468     +                            put string;
38470     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38471     +                            put string;
38472     +                            put "end;";
38474     +                            put 'else';
38475     +                            if format ne '' OR type='C' then do;
38476     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
38477     +                            end;
38478     +                            else do;
38479     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
38480     +                            end;
38481     +                         end;
38482     +                      end;
38483     +                   end;
38485     +                   if last._group_ then do;
38486     +                      string = strip(string);
38487     +                      put string;
38489     +                      string = ") then do;";
38490     +                      put string;
38492     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38493     +                      put string;
38494     +                      put "end;";
38495     +                   end;
38497     +                   if last._variable_ then do;
38498     +                     put "else do;";
38500     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38501     +                     put string;
38503     +                     put "end;";
38504     +                     put "end;";
38505     +                   end;
38506     +                end;
38507     +             run;
38509     +             %let oldname = &name;
38510     +        %end;
38511     +    %end;
38512     +    %let dsid = %sysfunc(close(&dsid));
38514     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
38515     +    data _null_;
38516     +       file _F1;
38517     +       put "length _UFormat $200;";
38518     +       put "drop _UFormat;";
38519     +       put "_UFormat='';";
38520     +    run;
38521     +    filename _F1;
38523     +   %em_register(key=EMSCOREVAR, type=DATA);
38524     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
38525     +   proc datasets lib=&em_lib nolist;
38526     +      delete &scorevarDs;
38527     +   run;
38528     +   quit;
38530     +   %let filrf=mydir;
38531     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
38532     +   %let did=%sysfunc(dopen(&filrf));
38534     +   %if &did %then %do;  %PUT  did= &did;
38535     +       %let memcount=%sysfunc(dnum(&did));
38536     +       %if &memcount > 0 %then %do;
38537     +           data &em_user_emscorevar;
38538     +              length Name $32 formula $70 file $200;
38539     +              keep NAME Formula file;
38540     +              formula  = '';
38541     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
38542     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
38543     +               output;
38544     +           %end;
38545     +           %do i=1 %to &memcount;
38546     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
38547     +               %let newvar = %scan(&name, 1, .);
38548     +               %if "&newvar" ne "_ALL_" %then %do;
38549     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
38550     +                   output;
38551     +               %end;
38552     +           %end;
38554     +           run;
38555     +       %end;
38556     +       %let did = %sysfunc(dclose(&did));
38557     +  %end;
38559     +   %doendu:
38560     +%mend buildOptScoreCode;
38563     +%macro buildScoreCode(flowCode, publishCode);
38566     +  filename x "&flowCode";
38568     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
38569     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
38570     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
38572     +  data temp;
38573     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
38574     +    by display_var _Split_value_;
38575     +     if upcase(_Split_value_) ne 'MISSING';
38576     +   run;
38578     +   data temp_missing;
38579     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
38580     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
38581     +     by display_var _Split_value_;
38582     +     if upcase(_Split_value_) eq 'MISSING';
38583     +     keep _variable_ display_var missgrp;
38584     +   run;
38586     +   proc sort data=temp_missing; by display_var missgrp; run;
38588     +   data temp_missing;
38589     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
38590     +     by display_var missgrp;
38591     +     if ^_a then delete;
38592     +     keep _variable_ display_var missgrp ;
38593     +   run;
38595     +   data temp;
38596     +     merge temp temp_missing;
38597     +     by display_var;
38598     +     if display_Var eq '' then delete;
38599     +    run;
38601     +    /* pull in wtev values */
38602     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
38603     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
38604     +    proc sort data=temp;  by display_var _group_; run;
38606     +   data temp;
38607     +      merge temp tempcoarse(keep=display_var _group_  role) ;
38608     +      by display_var _group_;
38609     +    run;
38611     +    data temp;
38612     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
38613     +      by display_var;
38615     +      if _group_ = . then delete;
38616     +      if _variable_ = '' then delete;
38617     +    run;
38619     +    proc sort data=temp out=class;
38620     +       by _variable_ _group_ LB;
38621     +    run;
38623     +    data _null_;
38624     +      file X;
38626     +      put "length _UFormat $200;";
38627     +      put "drop _UFormat;";
38628     +      put "_UFormat='';";
38629     +    run;
38631     +    data class_nosv;
38632     +      set class;
38633     +      if upcase(role)="INPUT";
38634     +    run;
38636     +    data _null_;
38637     +       file X MOD;
38638     +       length string $200 flag endflag 8;
38639     +       retain string flag endflag;
38640     +       set class_nosv end=eof;
38641     +       by _variable_ _group_;
38643     +       index = kindex(_variable_, "BIN_");
38644     +       if index gt 0 then do;
38646     +         if first._variable_ then do;
38647     +            put ' ';
38648     +            put "&EM_CODEBAR;";
38649     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
38650     +            put string;
38651     +            put "&EM_CODEBAR;";
38654     +            if origLabel ne "" then do;
38655     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
38656     +              put string;
38657     +              string = tranwrd(origLabel,"'","''");
38658     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
38659     +              put string;
38660     +            end;
38661     +            else do;
38662     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
38663     +             put string;
38664     +            end;
38666     +            put ' ';
38668     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38669     +            put string;
38670     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38671     +            put string;
38672     +            put "end;";
38673     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38674     +            put string;
38675     +          end;
38676     +           if first._group_ then do;
38677     +              flag = 0;
38678     +              endflag = 1;
38679     +              if ^first._variable_ then do;
38680     +                put "else";
38681     +              end;
38682     +              if LB ne . then do;
38683     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
38684     +              end;
38685     +              else do;
38686     +                 flag = 1;
38687     +                 string = "if";
38688     +              end;
38690     +           end;
38691     +           if last._Group_ then do;
38692     +              if UB ne . then do;
38693     +                if flag ne 1 then do;
38694     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
38695     +                end;
38696     +                else do;
38697     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
38698     +                end;
38699     +              end;
38700     +              else do;
38701     +                 if flag=1 then do;
38702     +                   string = strip(DISPLAY_VAR) ;
38703     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
38704     +                   endflag = 0;
38705     +                   string="";
38706     +                 end;
38707     +                 else do;
38708     +                   string = strip(string)!!" then do;";
38709     +                 end;
38710     +              end;
38711     +              put string;
38713     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38714     +              put string;
38715     +              if endflag eq 1 then do;
38716     +                put "end;";
38717     +              end;
38718     +           end;
38719     +           if last._variable_ then do;
38720     +             string = "end;";
38721     +             put string;
38722     +           end;
38723     +       end;
38724     +       else do;
38725     +           _split_value_ = tranwrd(_split_value_,"'","''");
38726     +           if first._group_ then do;
38727     +              flag=0;
38728     +              if ^first._variable_ then
38729     +                 put 'else';
38730     +              else do;
38731     +                 put ' ';
38732     +                 put "&EM_CODEBAR;";
38733     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
38734     +                 put string;
38735     +                 put "&EM_CODEBAR;";
38737     +                 if origLabel ne "" then do;
38738     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
38739     +                   put string;
38740     +                   string = tranwrd(origLabel,"'","''");
38741     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
38742     +                   put string;
38743     +                 end;
38744     +                 else do;
38745     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
38746     +                   put string;
38747     +                 end;
38749     +                 put ' ';
38751     +                if format ne '' then do;
38752     +                  if first._variable_ then do;
38753     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
38754     +                    put string;
38755     +                    string = '%dmnormip(_UFormat);';
38756     +                    put string;
38758     +                     string ="if MISSING(_UFORMAT) then do;";
38759     +                     put string;
38760     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38761     +                     put string;
38762     +                     put "end;";
38764     +                     string="else if NOT MISSING(_UFORMAT) then do;";
38765     +                     put string;
38767     +                  end;
38768     +                end;
38769     +                else do;
38770     +                     if type = 'N' then do;
38771     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38772     +                       put string;
38773     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38774     +                       put string;
38775     +                       put "end;";
38777     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38778     +                       put string;
38780     +                     end;
38781     +                     else if type='C' then do;
38782     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
38783     +                        put string;
38784     +                        string = '%dmnormip(_UFormat);';
38785     +                        put string;
38787     +                        string ="if MISSING(_UFORMAT) then do;";
38788     +                        put string;
38789     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38790     +                        put string;
38791     +                        put "end;";
38793     +                        string="else if NOT MISSING(_UFORMAT) then do;";
38794     +                        put string;
38795     +                        string = '%dmnormip(_UFormat);';
38796     +                        put string;
38797     +                    end;
38798     +                end;
38799     +              end;
38800     +              if format ne '' OR type='C' then do;
38801     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
38802     +              end;
38803     +              else do;
38804     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38805     +              end;
38806     +           end;
38807     +           else do;
38808     +              if flag ne 1 then do;
38809     +                if format ne '' OR type='C' then do;
38810     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
38811     +                end;
38812     +                else do;
38813     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38814     +                end;
38815     +                length = klength(tempstring);
38817     +                if length < 195 then do;
38818     +                   string = tempstring;
38819     +                end;
38820     +                else do;
38822     +                   string = strip(string);
38823     +                   put string;
38824     +                   string = ") then do;";
38825     +                   put string;
38827     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38828     +                   put string;
38829     +                   put "end;";
38831     +                 /*  string = strip(string)||",'...';"; */
38833     +                   put 'else';
38834     +                   if format ne '' OR type='C' then do;
38835     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
38836     +                   end;
38837     +                   else do;
38838     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38839     +                   end;
38842     +                end;
38843     +              end;
38844     +           end;
38846     +           if last._group_ then do;
38847     +              string = strip(string);
38848     +              put string;
38849     +              string = ") then do;";
38850     +              put string;
38852     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38853     +              put string;
38854     +              put "end;";
38855     +           end;
38857     +           if last._variable_ then do;
38858     +             put "else do;";
38860     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38861     +             put string;
38863     +             put "end;";
38864     +             put "end;";
38865     +           end;
38866     +         *end;
38867     +       end;
38868     +    run;
38870     +    /* generate PublishCode the same as flowscorecode */
38871     +    filename Y "&publishCode";
38873     +    /* if publishCode already exists, wipe it out first */
38874     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
38875     +      %let rc = %sysfunc(fdelete(Y));
38876     +    %end;
38878     +    %appendfiles(Y, X);
38880     +    filename X;
38881     +    filename Y;
38883     +    %buildOptScoreCode;
38885     +    proc datasets library=work nolist;
38886     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
38887     +    run;
38888     +    quit;
38890     +%mend buildScoreCode;
38892     +%macro buildMetaCode(DeltaCodeFile=);
38894     +   /* set variable roles based on New Role column in the Results table */
38895     +   data _null_;
38896     +      file &DeltaCodeFile;
38897     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
38898     +      %if &dsid %then %do;
38899     +        %let obs = %sysfunc(fetch(&dsid));
38900     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
38901     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
38902     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
38904     +        %do %while(&obs=0);
38905     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
38906     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
38907     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
38909     +          /* retrieve grp and woe names from varmappings dataset */
38910     +          %let choice = _VARIABLE_ = "&inputname";
38911     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
38912     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
38913     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
38914     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
38915     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
38917     +          put "if name = '&inputname' then role='REJECTED';";
38918     +          %if "&role" ne "DEFAULT" %then %do;
38919     +            put "if name = '&grpname' then role='&role';";
38920     +          %end;
38921     +          %else %do;
38922     +            put "if name = '&grpname' then role='&oldrole';";
38923     +          %end;
38924     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
38926     +          %let obs = %sysfunc(fetch(&dsid));
38927     +        %end;
38928     +      %end;
38929     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
38930     +   run;
38932     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
38933     +   data _null_;
38934     +      file &DeltaCodeFile MOD;
38936     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
38937     +      %if &sdsid %then %do;
38938     +        %let sobs = %sysfunc(fetch(&sdsid));
38939     +        %do %while(&sobs=0);
38940     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
38941     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
38942     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
38943     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
38945     +          %let checkgrp = GRP_&checkname;
38946     +          %let lenname = %length(&checkgrp);
38947     +          %if %eval(&lenname-32) > 0 %then %do;
38948     +            %let checkgrp = %substr(&checkgrp, 1, 32);
38949     +          %end;
38951     +          %let choice = _VARIABLE_ ="&checkname";
38952     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
38954     +          /* if var not found in varmappings, delete variables; */
38955     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
38956     +          %if &vdsid eq 0 %then %do;
38957     +            put 'if name="&displayvar" then delete;';
38958     +            %let dispgrp = GRP_&displayvar;
38959     +            put 'if name="&dispgrp" then delete;';
38960     +          %end;
38962     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
38963     +          %let sobs = %sysfunc(fetch(&sdsid));
38964     +        %end;
38965     +      %end;
38966     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
38967     +   run;
38969     +%mend buildMetaCode;
38971     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
38973     +   proc sort data=&coarse out=sortedcoarse nodupkey;
38974     +     by display_var;
38975     +   run;
38976     +   proc sort data=&varmappings nodupkey;
38977     +     by _variable_;
38978     +   run;
38979     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
38980     +     proc sort data=&resultstable; by display_var; run;
38981     +   %end;
38983     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
38984     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
38985     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
38986     +        &resultstable (keep = display_var _new_role_ )
38987     +     %end;
38988     +     ;
38989     +     by display_var;
38990     +     length _role_ _new_role_ $10;
38991     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
38992     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
38993     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
38994     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
38995     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
38996     +           ;
38998     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
38999     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
39000     +                _role_ = "Rejected";
39001     +             else _role_ = "Input";
39002     +           %end;
39003     +           %else %do;
39004     +             _role_ = "Input";
39005     +           %end;
39006     +           if _new_role_ eq "" then _new_role_="Default";
39007     +      if ^_a then do;
39008     +        _gini_ = 0;
39009     +        _role_ = 'Rejected';
39010     +        if _new_role_ eq "" then _new_role_="Default";
39011     +      end;
39012     +   run;
39013     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
39014     +     by NAME;
39015     +   run;
39016     +   data outlabel;
39017     +     set outlabel;
39018     +     if _label_ = '' then _label_ = _variable_;
39019     +   run;
39020     +   data &resultstable;
39021     +     merge &resultstable(in=_a_) outlabel;
39022     +     by display_Var;
39023     +     if _a_ then output;
39024     +   run;
39025     +   proc datasets library=work nolist;
39026     +     delete sortedcoarse outlabel;
39027     +   run;
39028     +   quit;
39029     +   proc sort data=&resultstable nodupkey;
39030     +      by DESCENDING
39031     +        _gini_ display_Var;
39032     +   run;
39033     +   data &resultstable;
39034     +     set &resultstable;
39036     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
39037     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
39038     +     giniOrder = _N_;
39039     +     _gini_ = round(_GINI_, .001);
39040     +     drop _variable_;
39041     +   run;
39043     +   proc print data=&resultstable label;
39044     +   run;
39046     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
39047     +   data &coarse;
39048     +     set &coarse;
39049     +     length role $10;
39050     +     %let dsid = %sysfunc(open(&resultstable));
39051     +     %if &dsid %then %do;
39052     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
39053     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
39054     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
39056     +       %let obs = %sysfunc(fetch(&dsid));
39057     +       %do %while(&obs=0);
39058     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
39059     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
39060     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
39062     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
39063     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
39064     +            giniOrder = &order;
39065     +            role = "&role";
39066     +          end;
39068     +          %let obs = %sysfunc(fetch(&dsid));
39069     +       %end;
39070     +     %end;
39071     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
39072     +   run;
39075     +%mend EM_GENERATE_RESULTSTABLE;
39077     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
39079     +    /* instantiate the zchar macro to be used in adding bin definition */
39080     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
39081     +    %inc _temp;
39082     +    filename _temp;
39084     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
39085     +      by _variable_ binFlag _group_ LB;
39086     +    run;
39088     +    data tempExport;
39089     +      set sortedFine;
39090     +      by _variable_ binFlag _group_;
39091     +      length _split_value_ $200;
39093     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
39094     +      if binFlag = 0 then do;
39095     +        index = kindex(_variable_, "BIN_");
39096     +        if index gt 0 then do;
39097     +          _LEVEL_ = "INTERVAL";
39098     +        end;
39099     +        _Split_value_ = _split_value_;
39100     +        output;
39101     +      end;
39102     +      else do;
39103     +         * if last._group_ then do;
39104     +          index = kindex(_variable_, "BIN_");
39105     +          if index gt 0 then do;
39106     +            _LEVEL_ = "INTERVAL";
39107     +          end;
39108     +          _Split_value_ = %zchar(UB);
39109     +          output;
39110     +         * end;
39111     +      end;
39113     +      rename display_Var = _variable_;
39114     +      keep display_var _level_ _group_ _split_value_ binFlag;
39115     +    run;
39117     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
39118     +       data &EXPORTGROUPING;
39119     +         set tempexport;
39120     +       run;
39121     +    %end;
39122     +    %else %do;
39123     +       /* determine if EXPORTGROUPING already exists */
39124     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
39125     +         data &EXPORTGROUPING;
39126     +            set &EXPORTGROUPING tempexport;
39127     +         run;
39128     +       %end;
39129     +       %else %do;
39130     +         data &EXPORTGROUPING;
39131     +            set tempexport;
39132     +         run;
39133     +       %end;
39134     +    %end;
39136     +    proc datasets lib=work nolist;
39137     +      delete sortedFine tempexport;
39138     +    run;
39139     +    quit;
39141     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
39146     +%macro report;
39148     +   /* if createGrouping then create a dataset for export */
39149     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
39150     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
39151     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
39152     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
39153     +   %end;
39154     +   %else %do;
39155     +     proc datasets library=&EM_LIB nolist;
39156     +       delete &EM_NODEID._EXPORTGROUP;
39157     +     run;
39158     +     quit;
39159     +   %end;
39162     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
39163     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
39164     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
39165     +   %end;
39166     +   %else %do;
39167     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
39168     +   %end;
39170     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
39171     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
39174     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS8 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS8.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.24 seconds
      cpu time            0.18 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.97849246299755;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39175      
39176      *------------------------------------------------------------*;
39177      * End REPORT: BINNING;
39178      *------------------------------------------------------------*;

39179      /* Reset EM Options */
39180      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
39181      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
39182      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
39183      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
39184      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
39185      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 128 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
