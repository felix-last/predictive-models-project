MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.28 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                21. April 2016
Time:                18.28 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2IVM38W "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2IVM38W new;
MPRINT(EM_DIAGRAM):   run;
132391     %let EMEXCEPTIONSTRING=;
132392     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
132393     * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
132394     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
132395     %let EM_ACTION = REPORT;
132396     %let syscc = 0;
132397     %macro main;
132398     
132399       filename temp catalog 'sashelp.emmdfy.binning_macros.source';
132400       %include temp;
132401       filename temp;
132402     
132403       %setProperties;
132404     
132405       %if %upcase(&EM_ACTION) = CREATE %then %do;
132406         filename temp catalog 'sashelp.emmdfy.binning_create.source';
132407         %include temp;
132408         filename temp;
132409     
132410         %create;
132411       %end;
132412     
132413        %else
132414        %if %upcase(&EM_ACTION) = TRAIN %then %do;
132415     
132416            filename temp catalog 'sashelp.emmdfy.binning_train.source';
132417            %include temp;
132418            filename temp;
132419            %train;
132420        %end;
The SAS System

132421     
132422       %else
132423       %if %upcase(&EM_ACTION) = SCORE %then %do;
132424         filename temp catalog 'sashelp.emmdfy.binning_score.source';
132425         %include temp;
132426         filename temp;
132427     
132428         %score;
132429     
132430       %end;
132431     
132432       %else
132433       %if %upcase(&EM_ACTION) = REPORT %then %do;
132434     
132435            filename temp catalog 'sashelp.emmdfy.binning_report.source';
132436            %include temp;
132437            filename temp;
132438     
132439            %report;
132440        %end;
132441     
132442        %doendm:
132443     %mend main;
132444     
132445     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
132447    +%macro SetProperties;
132449    +     /* IGN options */
132450    +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
132451    +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
132452    +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
132454    +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
132455    +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
132456    +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
132457    +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
132458    +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
132459    +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
132460    +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
132461    +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
132462    +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
132463    +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
132464    +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
132465    +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
132466    +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
132467    +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
132470    +%mend SetProperties;
132471    +%macro appendfiles(fileref1, fileref2);
132472    +     data _null_;
132473    +       length c $256;
132474    +       fid1=fopen("&fileref1",'A');
132475    +       fid2=fopen("&fileref2",'I');
132476    +       cval = finfo(fid2,'lrecl');
132477    +       put cval= fid1= fid2=;
132478    +       if (fid2 > 0) then
132479    +         do while(fread(fid2)=0);
132480    +           rc = fget(fid2,c,256);
132481    +           _msg_=sysmsg();
132482    +           /* put rc= c= _msg_=; */
132483    +           rc = fput(fid1,strip(c));
132484    +           rc = fwrite(fid1);
132485    +         end;
132486    +         _msg_=sysmsg();
132487    +         put _msg_=;
132488    +       rc = fclose(fid1);
132489    +       rc = fclose(fid2);
132490    +     run;
132491    +%mend appendfiles;
132493    +%macro buildOptScoreCode;
132495    +    %em_register(key=BINCODE, type=FOLDER);
132497    +    filename x catalog 'sashelp.emutil.em_deldir.source';
132498    +    %inc x;
132499    +    filename x;
132500    +    %delDir(folder=%nrbquote(&em_user_bincode));
132502    +    data _null_; length rc $200;
132503    +       rc = dcreate('BINCODE', "&EM_NODEDIR");
132504    +    run;
132506    +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
132508    +    %let dsid = %sysfunc(open(class_nosv));
132509    +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
132510    +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
132512    +    %let oldname=;
132513    +    %do %while(^%sysfunc(fetch(&dsid)));
132514    +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
132515    +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
132517    +        %if &name ne &oldname %then %do;
132518    +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
132519    +             data _null_;
132520    +                length string $200 flag endflag 8;
132521    +                retain string flag endflag;
132522    +                set class_nosv end=eof;
132523    +                where DISPLAY_VAR ="&name";
132524    +                by _variable_ _group_;
132525    +                file _F1;
132526    +                index = kindex(_variable_, "BIN_");
132527    +                if index gt 0 then do;
132528    +                   if first._variable_ then do;
132529    +                      put ' ';
132530    +                      put "&EM_CODEBAR;";
132531    +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
132532    +                      put string;
132533    +                      put "&EM_CODEBAR;";
132535    +                      if origLabel ne "" then do;
132536    +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
132537    +                            put string;
132538    +                            string = tranwrd(origLabel,"'","''");
132539    +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
132540    +                            put string;
132541    +                      end;
132542    +                      else do;
132543    +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
132544    +                             put string;
132545    +                      end;
132547    +                      put ' ';
132549    +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
132550    +                      put string;
132551    +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
132552    +                      put string;
132553    +                      put "end;";
132554    +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
132555    +                      put string;
132556    +                   end;
132557    +                   if first._group_ then do;
132558    +                      flag = 0;
132559    +                      endflag = 1;
132560    +                      if ^first._variable_ then do;
132561    +                         put "else";
132562    +                      end;
132563    +                      if LB ne . then do;
132564    +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
132565    +                      end;
132566    +                      else do;
132567    +                         flag = 1;
132568    +                         string = "if";
132569    +                      end;
132570    +                   end;
132571    +                   if last._Group_ then do;
132572    +                      if UB ne . then do;
132573    +                        if flag ne 1 then do;
132574    +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
132575    +                        end;
132576    +                        else do;
132577    +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
132578    +                        end;
132579    +                      end;
132580    +                      else do;
132581    +                         if flag=1 then do;
132582    +                            string = strip(DISPLAY_VAR) ;
132583    +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
132584    +                            endflag=0;
132585    +                            string="";
132586    +                         end;
132587    +                         else do;
132588    +                            string = strip(string)!!" then do;";
132589    +                         end;
132590    +                      end;
132591    +                      put string;
132592    +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
132593    +                      put string;
132594    +                      if endflag eq 1 then do;
132595    +                        put "end;";
132596    +                      end;
132597    +                   end;
132598    +                   if last._variable_ then do;
132599    +                     string = "end;";
132600    +                     put string;
132601    +                   end;
132603    +                end;
132604    +                else do;
132605    +                   _split_value_ = tranwrd(_split_value_,"'","''");
132606    +                   if first._group_ then do;
132607    +                      flag=0;
132608    +                      if ^first._variable_ then
132609    +                         put 'else';
132610    +                      else do;
132611    +                         put ' ';
132612    +                         put "&EM_CODEBAR;";
132613    +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
132614    +                         put string;
132615    +                         put "&EM_CODEBAR;";
132617    +                         if origLabel ne "" then do;
132618    +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
132619    +                               put string;
132620    +                               string = tranwrd(origLabel,"'","''");
132621    +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
132622    +                               put string;
132623    +                         end;
132624    +                         else do;
132625    +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
132626    +                               put string;
132627    +                         end;
132629    +                         put ' ';
132631    +                         if format ne '' then do;
132632    +                            if first._variable_ then do;
132633    +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
132634    +                               put string;
132635    +                               string = '%dmnormip(_UFormat);';
132636    +                               put string;
132638    +                               string ="if MISSING(_UFORMAT) then do;";
132639    +                               put string;
132640    +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
132641    +                               put string;
132642    +                               put "end;";
132644    +                               string="else if NOT MISSING(_UFORMAT) then do;";
132645    +                               put string;
132647    +                            end;
132648    +                         end;
132649    +                         else do;
132650    +                            if type = 'N' then do;
132651    +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
132652    +                              put string;
132653    +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
132654    +                              put string;
132655    +                              put "end;";
132657    +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
132658    +                              put string;
132659    +                            end;
132660    +                            else if type='C' then do;
132661    +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
132662    +                              put string;
132663    +                              string = '%dmnormip(_UFormat);';
132664    +                              put string;
132666    +                              string ="if MISSING(_UFORMAT) then do;";
132667    +                              put string;
132668    +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
132669    +                              put string;
132670    +                              put "end;";
132672    +                              string="else if NOT MISSING(_UFORMAT) then do;";
132673    +                              put string;
132674    +                              string = '%dmnormip(_UFormat);';
132675    +                              put string;
132676    +                           end;
132677    +                         end;
132678    +                      end;
132679    +                      if format ne '' OR type='C' then do;
132680    +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
132681    +                      end;
132682    +                      else do;
132683    +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
132684    +                      end;
132685    +                   end;
132686    +                   else do;
132687    +                      if flag ne 1 then do;
132688    +                       if format ne '' OR type='C' then do;
132689    +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
132690    +                       end;
132691    +                       else do;
132692    +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
132693    +                       end;
132694    +                         length = length(tempstring);
132696    +                         if length < 195 then do;
132697    +                            string = tempstring;
132698    +                         end;
132699    +                         else do;
132701    +                            string = strip(string);
132702    +                            put string;
132703    +                            string = ") then do;";
132704    +                            put string;
132706    +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
132707    +                            put string;
132708    +                            put "end;";
132710    +                            put 'else';
132711    +                            if format ne '' OR type='C' then do;
132712    +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
132713    +                            end;
132714    +                            else do;
132715    +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
132716    +                            end;
132717    +                         end;
132718    +                      end;
132719    +                   end;
132721    +                   if last._group_ then do;
132722    +                      string = strip(string);
132723    +                      put string;
132725    +                      string = ") then do;";
132726    +                      put string;
132728    +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
132729    +                      put string;
132730    +                      put "end;";
132731    +                   end;
132733    +                   if last._variable_ then do;
132734    +                     put "else do;";
132736    +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
132737    +                     put string;
132739    +                     put "end;";
132740    +                     put "end;";
132741    +                   end;
132742    +                end;
132743    +             run;
132745    +             %let oldname = &name;
132746    +        %end;
132747    +    %end;
132748    +    %let dsid = %sysfunc(close(&dsid));
132750    +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
132751    +    data _null_;
132752    +       file _F1;
132753    +       put "length _UFormat $200;";
132754    +       put "drop _UFormat;";
132755    +       put "_UFormat='';";
132756    +    run;
132757    +    filename _F1;
132759    +   %em_register(key=EMSCOREVAR, type=DATA);
132760    +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
132761    +   proc datasets lib=&em_lib nolist;
132762    +      delete &scorevarDs;
132763    +   run;
132764    +   quit;
132766    +   %let filrf=mydir;
132767    +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
132768    +   %let did=%sysfunc(dopen(&filrf));
132770    +   %if &did %then %do;  %PUT  did= &did;
132771    +       %let memcount=%sysfunc(dnum(&did));
132772    +       %if &memcount > 0 %then %do;
132773    +           data &em_user_emscorevar;
132774    +              length Name $32 formula $70 file $200;
132775    +              keep NAME Formula file;
132776    +              formula  = '';
132777    +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
132778    +               name=''; file="BINCODE&em_dsep._ALL_.sas";
132779    +               output;
132780    +           %end;
132781    +           %do i=1 %to &memcount;
132782    +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
132783    +               %let newvar = %scan(&name, 1, .);
132784    +               %if "&newvar" ne "_ALL_" %then %do;
132785    +                   name = "&newvar"; file="BINCODE&em_dsep&name";
132786    +                   output;
132787    +               %end;
132788    +           %end;
132790    +           run;
132791    +       %end;
132792    +       %let did = %sysfunc(dclose(&did));
132793    +  %end;
132795    +   %doendu:
132796    +%mend buildOptScoreCode;
132799    +%macro buildScoreCode(flowCode, publishCode);
132802    +  filename x "&flowCode";
132804    +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
132805    +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
132806    +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
132808    +  data temp;
132809    +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
132810    +    by display_var _Split_value_;
132811    +     if upcase(_Split_value_) ne 'MISSING';
132812    +   run;
132814    +   data temp_missing;
132815    +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
132816    +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
132817    +     by display_var _Split_value_;
132818    +     if upcase(_Split_value_) eq 'MISSING';
132819    +     keep _variable_ display_var missgrp;
132820    +   run;
132822    +   proc sort data=temp_missing; by display_var missgrp; run;
132824    +   data temp_missing;
132825    +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
132826    +     by display_var missgrp;
132827    +     if ^_a then delete;
132828    +     keep _variable_ display_var missgrp ;
132829    +   run;
132831    +   data temp;
132832    +     merge temp temp_missing;
132833    +     by display_var;
132834    +     if display_Var eq '' then delete;
132835    +    run;
132837    +    /* pull in wtev values */
132838    +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
132839    +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
132840    +    proc sort data=temp;  by display_var _group_; run;
132842    +   data temp;
132843    +      merge temp tempcoarse(keep=display_var _group_  role) ;
132844    +      by display_var _group_;
132845    +    run;
132847    +    data temp;
132848    +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
132849    +      by display_var;
132851    +      if _group_ = . then delete;
132852    +      if _variable_ = '' then delete;
132853    +    run;
132855    +    proc sort data=temp out=class;
132856    +       by _variable_ _group_ LB;
132857    +    run;
132859    +    data _null_;
132860    +      file X;
132862    +      put "length _UFormat $200;";
132863    +      put "drop _UFormat;";
132864    +      put "_UFormat='';";
132865    +    run;
132867    +    data class_nosv;
132868    +      set class;
132869    +      if upcase(role)="INPUT";
132870    +    run;
132872    +    data _null_;
132873    +       file X MOD;
132874    +       length string $200 flag endflag 8;
132875    +       retain string flag endflag;
132876    +       set class_nosv end=eof;
132877    +       by _variable_ _group_;
132879    +       index = kindex(_variable_, "BIN_");
132880    +       if index gt 0 then do;
132882    +         if first._variable_ then do;
132883    +            put ' ';
132884    +            put "&EM_CODEBAR;";
132885    +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
132886    +            put string;
132887    +            put "&EM_CODEBAR;";
132890    +            if origLabel ne "" then do;
132891    +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
132892    +              put string;
132893    +              string = tranwrd(origLabel,"'","''");
132894    +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
132895    +              put string;
132896    +            end;
132897    +            else do;
132898    +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
132899    +             put string;
132900    +            end;
132902    +            put ' ';
132904    +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
132905    +            put string;
132906    +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
132907    +            put string;
132908    +            put "end;";
132909    +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
132910    +            put string;
132911    +          end;
132912    +           if first._group_ then do;
132913    +              flag = 0;
132914    +              endflag = 1;
132915    +              if ^first._variable_ then do;
132916    +                put "else";
132917    +              end;
132918    +              if LB ne . then do;
132919    +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
132920    +              end;
132921    +              else do;
132922    +                 flag = 1;
132923    +                 string = "if";
132924    +              end;
132926    +           end;
132927    +           if last._Group_ then do;
132928    +              if UB ne . then do;
132929    +                if flag ne 1 then do;
132930    +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
132931    +                end;
132932    +                else do;
132933    +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
132934    +                end;
132935    +              end;
132936    +              else do;
132937    +                 if flag=1 then do;
132938    +                   string = strip(DISPLAY_VAR) ;
132939    +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
132940    +                   endflag = 0;
132941    +                   string="";
132942    +                 end;
132943    +                 else do;
132944    +                   string = strip(string)!!" then do;";
132945    +                 end;
132946    +              end;
132947    +              put string;
132949    +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
132950    +              put string;
132951    +              if endflag eq 1 then do;
132952    +                put "end;";
132953    +              end;
132954    +           end;
132955    +           if last._variable_ then do;
132956    +             string = "end;";
132957    +             put string;
132958    +           end;
132959    +       end;
132960    +       else do;
132961    +           _split_value_ = tranwrd(_split_value_,"'","''");
132962    +           if first._group_ then do;
132963    +              flag=0;
132964    +              if ^first._variable_ then
132965    +                 put 'else';
132966    +              else do;
132967    +                 put ' ';
132968    +                 put "&EM_CODEBAR;";
132969    +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
132970    +                 put string;
132971    +                 put "&EM_CODEBAR;";
132973    +                 if origLabel ne "" then do;
132974    +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
132975    +                   put string;
132976    +                   string = tranwrd(origLabel,"'","''");
132977    +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
132978    +                   put string;
132979    +                 end;
132980    +                 else do;
132981    +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
132982    +                   put string;
132983    +                 end;
132985    +                 put ' ';
132987    +                if format ne '' then do;
132988    +                  if first._variable_ then do;
132989    +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
132990    +                    put string;
132991    +                    string = '%dmnormip(_UFormat);';
132992    +                    put string;
132994    +                     string ="if MISSING(_UFORMAT) then do;";
132995    +                     put string;
132996    +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
132997    +                     put string;
132998    +                     put "end;";
133000    +                     string="else if NOT MISSING(_UFORMAT) then do;";
133001    +                     put string;
133003    +                  end;
133004    +                end;
133005    +                else do;
133006    +                     if type = 'N' then do;
133007    +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
133008    +                       put string;
133009    +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
133010    +                       put string;
133011    +                       put "end;";
133013    +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
133014    +                       put string;
133016    +                     end;
133017    +                     else if type='C' then do;
133018    +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
133019    +                        put string;
133020    +                        string = '%dmnormip(_UFormat);';
133021    +                        put string;
133023    +                        string ="if MISSING(_UFORMAT) then do;";
133024    +                        put string;
133025    +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
133026    +                        put string;
133027    +                        put "end;";
133029    +                        string="else if NOT MISSING(_UFORMAT) then do;";
133030    +                        put string;
133031    +                        string = '%dmnormip(_UFormat);';
133032    +                        put string;
133033    +                    end;
133034    +                end;
133035    +              end;
133036    +              if format ne '' OR type='C' then do;
133037    +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
133038    +              end;
133039    +              else do;
133040    +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
133041    +              end;
133042    +           end;
133043    +           else do;
133044    +              if flag ne 1 then do;
133045    +                if format ne '' OR type='C' then do;
133046    +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
133047    +                end;
133048    +                else do;
133049    +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
133050    +                end;
133051    +                length = klength(tempstring);
133053    +                if length < 195 then do;
133054    +                   string = tempstring;
133055    +                end;
133056    +                else do;
133058    +                   string = strip(string);
133059    +                   put string;
133060    +                   string = ") then do;";
133061    +                   put string;
133063    +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
133064    +                   put string;
133065    +                   put "end;";
133067    +                 /*  string = strip(string)||",'...';"; */
133069    +                   put 'else';
133070    +                   if format ne '' OR type='C' then do;
133071    +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
133072    +                   end;
133073    +                   else do;
133074    +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
133075    +                   end;
133078    +                end;
133079    +              end;
133080    +           end;
133082    +           if last._group_ then do;
133083    +              string = strip(string);
133084    +              put string;
133085    +              string = ") then do;";
133086    +              put string;
133088    +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
133089    +              put string;
133090    +              put "end;";
133091    +           end;
133093    +           if last._variable_ then do;
133094    +             put "else do;";
133096    +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
133097    +             put string;
133099    +             put "end;";
133100    +             put "end;";
133101    +           end;
133102    +         *end;
133103    +       end;
133104    +    run;
133106    +    /* generate PublishCode the same as flowscorecode */
133107    +    filename Y "&publishCode";
133109    +    /* if publishCode already exists, wipe it out first */
133110    +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
133111    +      %let rc = %sysfunc(fdelete(Y));
133112    +    %end;
133114    +    %appendfiles(Y, X);
133116    +    filename X;
133117    +    filename Y;
133119    +    %buildOptScoreCode;
133121    +    proc datasets library=work nolist;
133122    +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
133123    +    run;
133124    +    quit;
133126    +%mend buildScoreCode;
133128    +%macro buildMetaCode(DeltaCodeFile=);
133130    +   /* set variable roles based on New Role column in the Results table */
133131    +   data _null_;
133132    +      file &DeltaCodeFile;
133133    +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
133134    +      %if &dsid %then %do;
133135    +        %let obs = %sysfunc(fetch(&dsid));
133136    +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
133137    +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
133138    +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
133140    +        %do %while(&obs=0);
133141    +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
133142    +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
133143    +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
133145    +          /* retrieve grp and woe names from varmappings dataset */
133146    +          %let choice = _VARIABLE_ = "&inputname";
133147    +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
133148    +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
133149    +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
133150    +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
133151    +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
133153    +          put "if name = '&inputname' then role='REJECTED';";
133154    +          %if "&role" ne "DEFAULT" %then %do;
133155    +            put "if name = '&grpname' then role='&role';";
133156    +          %end;
133157    +          %else %do;
133158    +            put "if name = '&grpname' then role='&oldrole';";
133159    +          %end;
133160    +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
133162    +          %let obs = %sysfunc(fetch(&dsid));
133163    +        %end;
133164    +      %end;
133165    +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
133166    +   run;
133168    +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
133169    +   data _null_;
133170    +      file &DeltaCodeFile MOD;
133172    +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
133173    +      %if &sdsid %then %do;
133174    +        %let sobs = %sysfunc(fetch(&sdsid));
133175    +        %do %while(&sobs=0);
133176    +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
133177    +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
133178    +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
133179    +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
133181    +          %let checkgrp = GRP_&checkname;
133182    +          %let lenname = %length(&checkgrp);
133183    +          %if %eval(&lenname-32) > 0 %then %do;
133184    +            %let checkgrp = %substr(&checkgrp, 1, 32);
133185    +          %end;
133187    +          %let choice = _VARIABLE_ ="&checkname";
133188    +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
133190    +          /* if var not found in varmappings, delete variables; */
133191    +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
133192    +          %if &vdsid eq 0 %then %do;
133193    +            put 'if name="&displayvar" then delete;';
133194    +            %let dispgrp = GRP_&displayvar;
133195    +            put 'if name="&dispgrp" then delete;';
133196    +          %end;
133198    +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
133199    +          %let sobs = %sysfunc(fetch(&sdsid));
133200    +        %end;
133201    +      %end;
133202    +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
133203    +   run;
133205    +%mend buildMetaCode;
133207    +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
133209    +   proc sort data=&coarse out=sortedcoarse nodupkey;
133210    +     by display_var;
133211    +   run;
133212    +   proc sort data=&varmappings nodupkey;
133213    +     by _variable_;
133214    +   run;
133215    +   %if %sysfunc(exist(&resultstable, data)) %then %do;
133216    +     proc sort data=&resultstable; by display_var; run;
133217    +   %end;
133219    +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
133220    +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
133221    +     %if %sysfunc(exist(&resultstable, data)) %then %do;
133222    +        &resultstable (keep = display_var _new_role_ )
133223    +     %end;
133224    +     ;
133225    +     by display_var;
133226    +     length _role_ _new_role_ $10;
133227    +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
133228    +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
133229    +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
133230    +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
133231    +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
133232    +           ;
133234    +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
133235    +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
133236    +                _role_ = "Rejected";
133237    +             else _role_ = "Input";
133238    +           %end;
133239    +           %else %do;
133240    +             _role_ = "Input";
133241    +           %end;
133242    +           if _new_role_ eq "" then _new_role_="Default";
133243    +      if ^_a then do;
133244    +        _gini_ = 0;
133245    +        _role_ = 'Rejected';
133246    +        if _new_role_ eq "" then _new_role_="Default";
133247    +      end;
133248    +   run;
133249    +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
133250    +     by NAME;
133251    +   run;
133252    +   data outlabel;
133253    +     set outlabel;
133254    +     if _label_ = '' then _label_ = _variable_;
133255    +   run;
133256    +   data &resultstable;
133257    +     merge &resultstable(in=_a_) outlabel;
133258    +     by display_Var;
133259    +     if _a_ then output;
133260    +   run;
133261    +   proc datasets library=work nolist;
133262    +     delete sortedcoarse outlabel;
133263    +   run;
133264    +   quit;
133265    +   proc sort data=&resultstable nodupkey;
133266    +      by DESCENDING
133267    +        _gini_ display_Var;
133268    +   run;
133269    +   data &resultstable;
133270    +     set &resultstable;
133272    +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
133273    +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
133274    +     giniOrder = _N_;
133275    +     _gini_ = round(_GINI_, .001);
133276    +     drop _variable_;
133277    +   run;
133279    +   proc print data=&resultstable label;
133280    +   run;
133282    +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
133283    +   data &coarse;
133284    +     set &coarse;
133285    +     length role $10;
133286    +     %let dsid = %sysfunc(open(&resultstable));
133287    +     %if &dsid %then %do;
133288    +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
133289    +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
133290    +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
133292    +       %let obs = %sysfunc(fetch(&dsid));
133293    +       %do %while(&obs=0);
133294    +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
133295    +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
133296    +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
133298    +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
133299    +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
133300    +            giniOrder = &order;
133301    +            role = "&role";
133302    +          end;
133304    +          %let obs = %sysfunc(fetch(&dsid));
133305    +       %end;
133306    +     %end;
133307    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
133308    +   run;
133311    +%mend EM_GENERATE_RESULTSTABLE;
133313    +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
133315    +    /* instantiate the zchar macro to be used in adding bin definition */
133316    +    filename _temp catalog 'sashelp.emmacs.zchar.source';
133317    +    %inc _temp;
133318    +    filename _temp;
133320    +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
133321    +      by _variable_ binFlag _group_ LB;
133322    +    run;
133324    +    data tempExport;
133325    +      set sortedFine;
133326    +      by _variable_ binFlag _group_;
133327    +      length _split_value_ $200;
133329    +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
133330    +      if binFlag = 0 then do;
133331    +        index = kindex(_variable_, "BIN_");
133332    +        if index gt 0 then do;
133333    +          _LEVEL_ = "INTERVAL";
133334    +        end;
133335    +        _Split_value_ = _split_value_;
133336    +        output;
133337    +      end;
133338    +      else do;
133339    +         * if last._group_ then do;
133340    +          index = kindex(_variable_, "BIN_");
133341    +          if index gt 0 then do;
133342    +            _LEVEL_ = "INTERVAL";
133343    +          end;
133344    +          _Split_value_ = %zchar(UB);
133345    +          output;
133346    +         * end;
133347    +      end;
133349    +      rename display_Var = _variable_;
133350    +      keep display_var _level_ _group_ _split_value_ binFlag;
133351    +    run;
133353    +    %if &CREATEMETHOD eq OVERWRITE %then %do;
133354    +       data &EXPORTGROUPING;
133355    +         set tempexport;
133356    +       run;
133357    +    %end;
133358    +    %else %do;
133359    +       /* determine if EXPORTGROUPING already exists */
133360    +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
133361    +         data &EXPORTGROUPING;
133362    +            set &EXPORTGROUPING tempexport;
133363    +         run;
133364    +       %end;
133365    +       %else %do;
133366    +         data &EXPORTGROUPING;
133367    +            set tempexport;
133368    +         run;
133369    +       %end;
133370    +    %end;
133372    +    proc datasets lib=work nolist;
133373    +      delete sortedFine tempexport;
133374    +    run;
133375    +    quit;
133377    +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
133382    +%macro report;
133384    +   /* if createGrouping then create a dataset for export */
133385    +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
133386    +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
133387    +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
133388    +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
133389    +   %end;
133390    +   %else %do;
133391    +     proc datasets library=&EM_LIB nolist;
133392    +       delete &EM_NODEID._EXPORTGROUP;
133393    +     run;
133394    +     quit;
133395    +   %end;
133398    +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
133399    +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
133400    +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
133401    +   %end;
133402    +   %else %do;
133403    +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
133404    +   %end;
133406    +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
133407    +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
133410    +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS8 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS8.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92612911384838;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
133411     
133412     *------------------------------------------------------------*;
133413     * End REPORT: BINNING;
133414     *------------------------------------------------------------*;

133415     /* Reset EM Options */
133416     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
133417     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
133418     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
133419     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
133420     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
133421     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 128 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
