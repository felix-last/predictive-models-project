MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.21 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                19. April 2016
Time:                17.21 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O22HP_MS "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O22HP_MS new;
MPRINT(EM_DIAGRAM):   run;
81527      %let EMEXCEPTIONSTRING=;
81528      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
81529      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
81530      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
81531      %let EM_ACTION = REPORT;
81532      %let syscc = 0;
81533      %macro main;
81534      
81535        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
81536        %include temp;
81537        filename temp;
81538      
81539        %setProperties;
81540      
81541        %if %upcase(&EM_ACTION) = CREATE %then %do;
81542          filename temp catalog 'sashelp.emmdfy.binning_create.source';
81543          %include temp;
81544          filename temp;
81545      
81546          %create;
81547        %end;
81548      
81549         %else
81550         %if %upcase(&EM_ACTION) = TRAIN %then %do;
81551      
81552             filename temp catalog 'sashelp.emmdfy.binning_train.source';
81553             %include temp;
81554             filename temp;
81555             %train;
81556         %end;
81557      
81558        %else
81559        %if %upcase(&EM_ACTION) = SCORE %then %do;
81560          filename temp catalog 'sashelp.emmdfy.binning_score.source';
81561          %include temp;
81562          filename temp;
81563      
81564          %score;
81565      
81566        %end;
81567      
81568        %else
81569        %if %upcase(&EM_ACTION) = REPORT %then %do;
81570      
81571             filename temp catalog 'sashelp.emmdfy.binning_report.source';
81572             %include temp;
81573             filename temp;
81574      
81575             %report;
81576         %end;
81577      
81578         %doendm:
81579      %mend main;
81580      
81581      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
81583     +%macro SetProperties;
81585     +     /* IGN options */
81586     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
81587     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
81588     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
81590     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
81591     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
81592     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
81593     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
81594     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
81595     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
81596     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
81597     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
81598     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
81599     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
81600     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
81601     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
81602     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
81603     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
81606     +%mend SetProperties;
81607     +%macro appendfiles(fileref1, fileref2);
81608     +     data _null_;
81609     +       length c $256;
81610     +       fid1=fopen("&fileref1",'A');
81611     +       fid2=fopen("&fileref2",'I');
81612     +       cval = finfo(fid2,'lrecl');
81613     +       put cval= fid1= fid2=;
81614     +       if (fid2 > 0) then
81615     +         do while(fread(fid2)=0);
81616     +           rc = fget(fid2,c,256);
81617     +           _msg_=sysmsg();
81618     +           /* put rc= c= _msg_=; */
81619     +           rc = fput(fid1,strip(c));
81620     +           rc = fwrite(fid1);
81621     +         end;
81622     +         _msg_=sysmsg();
81623     +         put _msg_=;
81624     +       rc = fclose(fid1);
81625     +       rc = fclose(fid2);
81626     +     run;
81627     +%mend appendfiles;
81629     +%macro buildOptScoreCode;
81631     +    %em_register(key=BINCODE, type=FOLDER);
81633     +    filename x catalog 'sashelp.emutil.em_deldir.source';
81634     +    %inc x;
81635     +    filename x;
81636     +    %delDir(folder=%nrbquote(&em_user_bincode));
81638     +    data _null_; length rc $200;
81639     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
81640     +    run;
81642     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
81644     +    %let dsid = %sysfunc(open(class_nosv));
81645     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
81646     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
81648     +    %let oldname=;
81649     +    %do %while(^%sysfunc(fetch(&dsid)));
81650     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
81651     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
81653     +        %if &name ne &oldname %then %do;
81654     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
81655     +             data _null_;
81656     +                length string $200 flag endflag 8;
81657     +                retain string flag endflag;
81658     +                set class_nosv end=eof;
81659     +                where DISPLAY_VAR ="&name";
81660     +                by _variable_ _group_;
81661     +                file _F1;
81662     +                index = kindex(_variable_, "BIN_");
81663     +                if index gt 0 then do;
81664     +                   if first._variable_ then do;
81665     +                      put ' ';
81666     +                      put "&EM_CODEBAR;";
81667     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
81668     +                      put string;
81669     +                      put "&EM_CODEBAR;";
81671     +                      if origLabel ne "" then do;
81672     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
81673     +                            put string;
81674     +                            string = tranwrd(origLabel,"'","''");
81675     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
81676     +                            put string;
81677     +                      end;
81678     +                      else do;
81679     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
81680     +                             put string;
81681     +                      end;
81683     +                      put ' ';
81685     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
81686     +                      put string;
81687     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
81688     +                      put string;
81689     +                      put "end;";
81690     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
81691     +                      put string;
81692     +                   end;
81693     +                   if first._group_ then do;
81694     +                      flag = 0;
81695     +                      endflag = 1;
81696     +                      if ^first._variable_ then do;
81697     +                         put "else";
81698     +                      end;
81699     +                      if LB ne . then do;
81700     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
81701     +                      end;
81702     +                      else do;
81703     +                         flag = 1;
81704     +                         string = "if";
81705     +                      end;
81706     +                   end;
81707     +                   if last._Group_ then do;
81708     +                      if UB ne . then do;
81709     +                        if flag ne 1 then do;
81710     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
81711     +                        end;
81712     +                        else do;
81713     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
81714     +                        end;
81715     +                      end;
81716     +                      else do;
81717     +                         if flag=1 then do;
81718     +                            string = strip(DISPLAY_VAR) ;
81719     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
81720     +                            endflag=0;
81721     +                            string="";
81722     +                         end;
81723     +                         else do;
81724     +                            string = strip(string)!!" then do;";
81725     +                         end;
81726     +                      end;
81727     +                      put string;
81728     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
81729     +                      put string;
81730     +                      if endflag eq 1 then do;
81731     +                        put "end;";
81732     +                      end;
81733     +                   end;
81734     +                   if last._variable_ then do;
81735     +                     string = "end;";
81736     +                     put string;
81737     +                   end;
81739     +                end;
81740     +                else do;
81741     +                   _split_value_ = tranwrd(_split_value_,"'","''");
81742     +                   if first._group_ then do;
81743     +                      flag=0;
81744     +                      if ^first._variable_ then
81745     +                         put 'else';
81746     +                      else do;
81747     +                         put ' ';
81748     +                         put "&EM_CODEBAR;";
81749     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
81750     +                         put string;
81751     +                         put "&EM_CODEBAR;";
81753     +                         if origLabel ne "" then do;
81754     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
81755     +                               put string;
81756     +                               string = tranwrd(origLabel,"'","''");
81757     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
81758     +                               put string;
81759     +                         end;
81760     +                         else do;
81761     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
81762     +                               put string;
81763     +                         end;
81765     +                         put ' ';
81767     +                         if format ne '' then do;
81768     +                            if first._variable_ then do;
81769     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
81770     +                               put string;
81771     +                               string = '%dmnormip(_UFormat);';
81772     +                               put string;
81774     +                               string ="if MISSING(_UFORMAT) then do;";
81775     +                               put string;
81776     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
81777     +                               put string;
81778     +                               put "end;";
81780     +                               string="else if NOT MISSING(_UFORMAT) then do;";
81781     +                               put string;
81783     +                            end;
81784     +                         end;
81785     +                         else do;
81786     +                            if type = 'N' then do;
81787     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
81788     +                              put string;
81789     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
81790     +                              put string;
81791     +                              put "end;";
81793     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
81794     +                              put string;
81795     +                            end;
81796     +                            else if type='C' then do;
81797     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
81798     +                              put string;
81799     +                              string = '%dmnormip(_UFormat);';
81800     +                              put string;
81802     +                              string ="if MISSING(_UFORMAT) then do;";
81803     +                              put string;
81804     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
81805     +                              put string;
81806     +                              put "end;";
81808     +                              string="else if NOT MISSING(_UFORMAT) then do;";
81809     +                              put string;
81810     +                              string = '%dmnormip(_UFormat);';
81811     +                              put string;
81812     +                           end;
81813     +                         end;
81814     +                      end;
81815     +                      if format ne '' OR type='C' then do;
81816     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
81817     +                      end;
81818     +                      else do;
81819     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
81820     +                      end;
81821     +                   end;
81822     +                   else do;
81823     +                      if flag ne 1 then do;
81824     +                       if format ne '' OR type='C' then do;
81825     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
81826     +                       end;
81827     +                       else do;
81828     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
81829     +                       end;
81830     +                         length = length(tempstring);
81832     +                         if length < 195 then do;
81833     +                            string = tempstring;
81834     +                         end;
81835     +                         else do;
81837     +                            string = strip(string);
81838     +                            put string;
81839     +                            string = ") then do;";
81840     +                            put string;
81842     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
81843     +                            put string;
81844     +                            put "end;";
81846     +                            put 'else';
81847     +                            if format ne '' OR type='C' then do;
81848     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
81849     +                            end;
81850     +                            else do;
81851     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
81852     +                            end;
81853     +                         end;
81854     +                      end;
81855     +                   end;
81857     +                   if last._group_ then do;
81858     +                      string = strip(string);
81859     +                      put string;
81861     +                      string = ") then do;";
81862     +                      put string;
81864     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
81865     +                      put string;
81866     +                      put "end;";
81867     +                   end;
81869     +                   if last._variable_ then do;
81870     +                     put "else do;";
81872     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
81873     +                     put string;
81875     +                     put "end;";
81876     +                     put "end;";
81877     +                   end;
81878     +                end;
81879     +             run;
81881     +             %let oldname = &name;
81882     +        %end;
81883     +    %end;
81884     +    %let dsid = %sysfunc(close(&dsid));
81886     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
81887     +    data _null_;
81888     +       file _F1;
81889     +       put "length _UFormat $200;";
81890     +       put "drop _UFormat;";
81891     +       put "_UFormat='';";
81892     +    run;
81893     +    filename _F1;
81895     +   %em_register(key=EMSCOREVAR, type=DATA);
81896     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
81897     +   proc datasets lib=&em_lib nolist;
81898     +      delete &scorevarDs;
81899     +   run;
81900     +   quit;
81902     +   %let filrf=mydir;
81903     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
81904     +   %let did=%sysfunc(dopen(&filrf));
81906     +   %if &did %then %do;  %PUT  did= &did;
81907     +       %let memcount=%sysfunc(dnum(&did));
81908     +       %if &memcount > 0 %then %do;
81909     +           data &em_user_emscorevar;
81910     +              length Name $32 formula $70 file $200;
81911     +              keep NAME Formula file;
81912     +              formula  = '';
81913     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
81914     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
81915     +               output;
81916     +           %end;
81917     +           %do i=1 %to &memcount;
81918     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
81919     +               %let newvar = %scan(&name, 1, .);
81920     +               %if "&newvar" ne "_ALL_" %then %do;
81921     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
81922     +                   output;
81923     +               %end;
81924     +           %end;
81926     +           run;
81927     +       %end;
81928     +       %let did = %sysfunc(dclose(&did));
81929     +  %end;
81931     +   %doendu:
81932     +%mend buildOptScoreCode;
81935     +%macro buildScoreCode(flowCode, publishCode);
81938     +  filename x "&flowCode";
81940     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
81941     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
81942     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
81944     +  data temp;
81945     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
81946     +    by display_var _Split_value_;
81947     +     if upcase(_Split_value_) ne 'MISSING';
81948     +   run;
81950     +   data temp_missing;
81951     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
81952     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
81953     +     by display_var _Split_value_;
81954     +     if upcase(_Split_value_) eq 'MISSING';
81955     +     keep _variable_ display_var missgrp;
81956     +   run;
81958     +   proc sort data=temp_missing; by display_var missgrp; run;
81960     +   data temp_missing;
81961     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
81962     +     by display_var missgrp;
81963     +     if ^_a then delete;
81964     +     keep _variable_ display_var missgrp ;
81965     +   run;
81967     +   data temp;
81968     +     merge temp temp_missing;
81969     +     by display_var;
81970     +     if display_Var eq '' then delete;
81971     +    run;
81973     +    /* pull in wtev values */
81974     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
81975     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
81976     +    proc sort data=temp;  by display_var _group_; run;
81978     +   data temp;
81979     +      merge temp tempcoarse(keep=display_var _group_  role) ;
81980     +      by display_var _group_;
81981     +    run;
81983     +    data temp;
81984     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
81985     +      by display_var;
81987     +      if _group_ = . then delete;
81988     +      if _variable_ = '' then delete;
81989     +    run;
81991     +    proc sort data=temp out=class;
81992     +       by _variable_ _group_ LB;
81993     +    run;
81995     +    data _null_;
81996     +      file X;
81998     +      put "length _UFormat $200;";
81999     +      put "drop _UFormat;";
82000     +      put "_UFormat='';";
82001     +    run;
82003     +    data class_nosv;
82004     +      set class;
82005     +      if upcase(role)="INPUT";
82006     +    run;
82008     +    data _null_;
82009     +       file X MOD;
82010     +       length string $200 flag endflag 8;
82011     +       retain string flag endflag;
82012     +       set class_nosv end=eof;
82013     +       by _variable_ _group_;
82015     +       index = kindex(_variable_, "BIN_");
82016     +       if index gt 0 then do;
82018     +         if first._variable_ then do;
82019     +            put ' ';
82020     +            put "&EM_CODEBAR;";
82021     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
82022     +            put string;
82023     +            put "&EM_CODEBAR;";
82026     +            if origLabel ne "" then do;
82027     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
82028     +              put string;
82029     +              string = tranwrd(origLabel,"'","''");
82030     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
82031     +              put string;
82032     +            end;
82033     +            else do;
82034     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
82035     +             put string;
82036     +            end;
82038     +            put ' ';
82040     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
82041     +            put string;
82042     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
82043     +            put string;
82044     +            put "end;";
82045     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
82046     +            put string;
82047     +          end;
82048     +           if first._group_ then do;
82049     +              flag = 0;
82050     +              endflag = 1;
82051     +              if ^first._variable_ then do;
82052     +                put "else";
82053     +              end;
82054     +              if LB ne . then do;
82055     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
82056     +              end;
82057     +              else do;
82058     +                 flag = 1;
82059     +                 string = "if";
82060     +              end;
82062     +           end;
82063     +           if last._Group_ then do;
82064     +              if UB ne . then do;
82065     +                if flag ne 1 then do;
82066     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
82067     +                end;
82068     +                else do;
82069     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
82070     +                end;
82071     +              end;
82072     +              else do;
82073     +                 if flag=1 then do;
82074     +                   string = strip(DISPLAY_VAR) ;
82075     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
82076     +                   endflag = 0;
82077     +                   string="";
82078     +                 end;
82079     +                 else do;
82080     +                   string = strip(string)!!" then do;";
82081     +                 end;
82082     +              end;
82083     +              put string;
82085     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
82086     +              put string;
82087     +              if endflag eq 1 then do;
82088     +                put "end;";
82089     +              end;
82090     +           end;
82091     +           if last._variable_ then do;
82092     +             string = "end;";
82093     +             put string;
82094     +           end;
82095     +       end;
82096     +       else do;
82097     +           _split_value_ = tranwrd(_split_value_,"'","''");
82098     +           if first._group_ then do;
82099     +              flag=0;
82100     +              if ^first._variable_ then
82101     +                 put 'else';
82102     +              else do;
82103     +                 put ' ';
82104     +                 put "&EM_CODEBAR;";
82105     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
82106     +                 put string;
82107     +                 put "&EM_CODEBAR;";
82109     +                 if origLabel ne "" then do;
82110     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
82111     +                   put string;
82112     +                   string = tranwrd(origLabel,"'","''");
82113     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
82114     +                   put string;
82115     +                 end;
82116     +                 else do;
82117     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
82118     +                   put string;
82119     +                 end;
82121     +                 put ' ';
82123     +                if format ne '' then do;
82124     +                  if first._variable_ then do;
82125     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
82126     +                    put string;
82127     +                    string = '%dmnormip(_UFormat);';
82128     +                    put string;
82130     +                     string ="if MISSING(_UFORMAT) then do;";
82131     +                     put string;
82132     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
82133     +                     put string;
82134     +                     put "end;";
82136     +                     string="else if NOT MISSING(_UFORMAT) then do;";
82137     +                     put string;
82139     +                  end;
82140     +                end;
82141     +                else do;
82142     +                     if type = 'N' then do;
82143     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
82144     +                       put string;
82145     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
82146     +                       put string;
82147     +                       put "end;";
82149     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
82150     +                       put string;
82152     +                     end;
82153     +                     else if type='C' then do;
82154     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
82155     +                        put string;
82156     +                        string = '%dmnormip(_UFormat);';
82157     +                        put string;
82159     +                        string ="if MISSING(_UFORMAT) then do;";
82160     +                        put string;
82161     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
82162     +                        put string;
82163     +                        put "end;";
82165     +                        string="else if NOT MISSING(_UFORMAT) then do;";
82166     +                        put string;
82167     +                        string = '%dmnormip(_UFormat);';
82168     +                        put string;
82169     +                    end;
82170     +                end;
82171     +              end;
82172     +              if format ne '' OR type='C' then do;
82173     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
82174     +              end;
82175     +              else do;
82176     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
82177     +              end;
82178     +           end;
82179     +           else do;
82180     +              if flag ne 1 then do;
82181     +                if format ne '' OR type='C' then do;
82182     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
82183     +                end;
82184     +                else do;
82185     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
82186     +                end;
82187     +                length = klength(tempstring);
82189     +                if length < 195 then do;
82190     +                   string = tempstring;
82191     +                end;
82192     +                else do;
82194     +                   string = strip(string);
82195     +                   put string;
82196     +                   string = ") then do;";
82197     +                   put string;
82199     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
82200     +                   put string;
82201     +                   put "end;";
82203     +                 /*  string = strip(string)||",'...';"; */
82205     +                   put 'else';
82206     +                   if format ne '' OR type='C' then do;
82207     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
82208     +                   end;
82209     +                   else do;
82210     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
82211     +                   end;
82214     +                end;
82215     +              end;
82216     +           end;
82218     +           if last._group_ then do;
82219     +              string = strip(string);
82220     +              put string;
82221     +              string = ") then do;";
82222     +              put string;
82224     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
82225     +              put string;
82226     +              put "end;";
82227     +           end;
82229     +           if last._variable_ then do;
82230     +             put "else do;";
82232     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
82233     +             put string;
82235     +             put "end;";
82236     +             put "end;";
82237     +           end;
82238     +         *end;
82239     +       end;
82240     +    run;
82242     +    /* generate PublishCode the same as flowscorecode */
82243     +    filename Y "&publishCode";
82245     +    /* if publishCode already exists, wipe it out first */
82246     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
82247     +      %let rc = %sysfunc(fdelete(Y));
82248     +    %end;
82250     +    %appendfiles(Y, X);
82252     +    filename X;
82253     +    filename Y;
82255     +    %buildOptScoreCode;
82257     +    proc datasets library=work nolist;
82258     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
82259     +    run;
82260     +    quit;
82262     +%mend buildScoreCode;
82264     +%macro buildMetaCode(DeltaCodeFile=);
82266     +   /* set variable roles based on New Role column in the Results table */
82267     +   data _null_;
82268     +      file &DeltaCodeFile;
82269     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
82270     +      %if &dsid %then %do;
82271     +        %let obs = %sysfunc(fetch(&dsid));
82272     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
82273     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
82274     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
82276     +        %do %while(&obs=0);
82277     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
82278     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
82279     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
82281     +          /* retrieve grp and woe names from varmappings dataset */
82282     +          %let choice = _VARIABLE_ = "&inputname";
82283     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
82284     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
82285     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
82286     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
82287     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
82289     +          put "if name = '&inputname' then role='REJECTED';";
82290     +          %if "&role" ne "DEFAULT" %then %do;
82291     +            put "if name = '&grpname' then role='&role';";
82292     +          %end;
82293     +          %else %do;
82294     +            put "if name = '&grpname' then role='&oldrole';";
82295     +          %end;
82296     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
82298     +          %let obs = %sysfunc(fetch(&dsid));
82299     +        %end;
82300     +      %end;
82301     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
82302     +   run;
82304     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
82305     +   data _null_;
82306     +      file &DeltaCodeFile MOD;
82308     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
82309     +      %if &sdsid %then %do;
82310     +        %let sobs = %sysfunc(fetch(&sdsid));
82311     +        %do %while(&sobs=0);
82312     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
82313     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
82314     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
82315     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
82317     +          %let checkgrp = GRP_&checkname;
82318     +          %let lenname = %length(&checkgrp);
82319     +          %if %eval(&lenname-32) > 0 %then %do;
82320     +            %let checkgrp = %substr(&checkgrp, 1, 32);
82321     +          %end;
82323     +          %let choice = _VARIABLE_ ="&checkname";
82324     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
82326     +          /* if var not found in varmappings, delete variables; */
82327     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
82328     +          %if &vdsid eq 0 %then %do;
82329     +            put 'if name="&displayvar" then delete;';
82330     +            %let dispgrp = GRP_&displayvar;
82331     +            put 'if name="&dispgrp" then delete;';
82332     +          %end;
82334     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
82335     +          %let sobs = %sysfunc(fetch(&sdsid));
82336     +        %end;
82337     +      %end;
82338     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
82339     +   run;
82341     +%mend buildMetaCode;
82343     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
82345     +   proc sort data=&coarse out=sortedcoarse nodupkey;
82346     +     by display_var;
82347     +   run;
82348     +   proc sort data=&varmappings nodupkey;
82349     +     by _variable_;
82350     +   run;
82351     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
82352     +     proc sort data=&resultstable; by display_var; run;
82353     +   %end;
82355     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
82356     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
82357     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
82358     +        &resultstable (keep = display_var _new_role_ )
82359     +     %end;
82360     +     ;
82361     +     by display_var;
82362     +     length _role_ _new_role_ $10;
82363     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
82364     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
82365     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
82366     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
82367     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
82368     +           ;
82370     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
82371     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
82372     +                _role_ = "Rejected";
82373     +             else _role_ = "Input";
82374     +           %end;
82375     +           %else %do;
82376     +             _role_ = "Input";
82377     +           %end;
82378     +           if _new_role_ eq "" then _new_role_="Default";
82379     +      if ^_a then do;
82380     +        _gini_ = 0;
82381     +        _role_ = 'Rejected';
82382     +        if _new_role_ eq "" then _new_role_="Default";
82383     +      end;
82384     +   run;
82385     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
82386     +     by NAME;
82387     +   run;
82388     +   data outlabel;
82389     +     set outlabel;
82390     +     if _label_ = '' then _label_ = _variable_;
82391     +   run;
82392     +   data &resultstable;
82393     +     merge &resultstable(in=_a_) outlabel;
82394     +     by display_Var;
82395     +     if _a_ then output;
82396     +   run;
82397     +   proc datasets library=work nolist;
82398     +     delete sortedcoarse outlabel;
82399     +   run;
82400     +   quit;
82401     +   proc sort data=&resultstable nodupkey;
82402     +      by DESCENDING
82403     +        _gini_ display_Var;
82404     +   run;
82405     +   data &resultstable;
82406     +     set &resultstable;
82408     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
82409     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
82410     +     giniOrder = _N_;
82411     +     _gini_ = round(_GINI_, .001);
82412     +     drop _variable_;
82413     +   run;
82415     +   proc print data=&resultstable label;
82416     +   run;
82418     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
82419     +   data &coarse;
82420     +     set &coarse;
82421     +     length role $10;
82422     +     %let dsid = %sysfunc(open(&resultstable));
82423     +     %if &dsid %then %do;
82424     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
82425     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
82426     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
82428     +       %let obs = %sysfunc(fetch(&dsid));
82429     +       %do %while(&obs=0);
82430     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
82431     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
82432     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
82434     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
82435     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
82436     +            giniOrder = &order;
82437     +            role = "&role";
82438     +          end;
82440     +          %let obs = %sysfunc(fetch(&dsid));
82441     +       %end;
82442     +     %end;
82443     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
82444     +   run;
82447     +%mend EM_GENERATE_RESULTSTABLE;
82449     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
82451     +    /* instantiate the zchar macro to be used in adding bin definition */
82452     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
82453     +    %inc _temp;
82454     +    filename _temp;
82456     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
82457     +      by _variable_ binFlag _group_ LB;
82458     +    run;
82460     +    data tempExport;
82461     +      set sortedFine;
82462     +      by _variable_ binFlag _group_;
82463     +      length _split_value_ $200;
82465     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
82466     +      if binFlag = 0 then do;
82467     +        index = kindex(_variable_, "BIN_");
82468     +        if index gt 0 then do;
82469     +          _LEVEL_ = "INTERVAL";
82470     +        end;
82471     +        _Split_value_ = _split_value_;
82472     +        output;
82473     +      end;
82474     +      else do;
82475     +         * if last._group_ then do;
82476     +          index = kindex(_variable_, "BIN_");
82477     +          if index gt 0 then do;
82478     +            _LEVEL_ = "INTERVAL";
82479     +          end;
82480     +          _Split_value_ = %zchar(UB);
82481     +          output;
82482     +         * end;
82483     +      end;
82485     +      rename display_Var = _variable_;
82486     +      keep display_var _level_ _group_ _split_value_ binFlag;
82487     +    run;
82489     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
82490     +       data &EXPORTGROUPING;
82491     +         set tempexport;
82492     +       run;
82493     +    %end;
82494     +    %else %do;
82495     +       /* determine if EXPORTGROUPING already exists */
82496     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
82497     +         data &EXPORTGROUPING;
82498     +            set &EXPORTGROUPING tempexport;
82499     +         run;
82500     +       %end;
82501     +       %else %do;
82502     +         data &EXPORTGROUPING;
82503     +            set tempexport;
82504     +         run;
82505     +       %end;
82506     +    %end;
82508     +    proc datasets lib=work nolist;
82509     +      delete sortedFine tempexport;
82510     +    run;
82511     +    quit;
82513     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
82518     +%macro report;
82520     +   /* if createGrouping then create a dataset for export */
82521     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
82522     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
82523     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
82524     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
82525     +   %end;
82526     +   %else %do;
82527     +     proc datasets library=&EM_LIB nolist;
82528     +       delete &EM_NODEID._EXPORTGROUP;
82529     +     run;
82530     +     quit;
82531     +   %end;
82534     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
82535     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
82536     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
82537     +   %end;
82538     +   %else %do;
82539     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
82540     +   %end;
82542     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
82543     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
82546     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS8 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS8.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.16615608388844;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
82547      
82548      *------------------------------------------------------------*;
82549      * End REPORT: BINNING;
82550      *------------------------------------------------------------*;

82551      /* Reset EM Options */
82552      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
82553      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
82554      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
82555      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
82556      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
82557      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 128 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
