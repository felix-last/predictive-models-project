MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.10 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                16. April 2016
Time:                20.10 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O18O62P7 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O18O62P7 new;
MPRINT(EM_DIAGRAM):   run;
69946      %let EMEXCEPTIONSTRING=;
69947      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
69948      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
69949      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
69950      %let EM_ACTION = REPORT;
69951      %let syscc = 0;
69952      %macro main;
69953      
69954        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
69955        %include temp;
69956        filename temp;
69957      
69958        %setProperties;
69959      
69960        %if %upcase(&EM_ACTION) = CREATE %then %do;
69961          filename temp catalog 'sashelp.emmdfy.binning_create.source';
69962          %include temp;
69963          filename temp;
69964      
69965          %create;
69966        %end;
69967      
69968         %else
69969         %if %upcase(&EM_ACTION) = TRAIN %then %do;
69970      
69971             filename temp catalog 'sashelp.emmdfy.binning_train.source';
69972             %include temp;
69973             filename temp;
69974             %train;
69975         %end;
69976      
69977        %else
69978        %if %upcase(&EM_ACTION) = SCORE %then %do;
69979          filename temp catalog 'sashelp.emmdfy.binning_score.source';
69980          %include temp;
69981          filename temp;
69982      
69983          %score;
69984      
69985        %end;
69986      
69987        %else
69988        %if %upcase(&EM_ACTION) = REPORT %then %do;
69989      
69990             filename temp catalog 'sashelp.emmdfy.binning_report.source';
69991             %include temp;
69992             filename temp;
69993      
69994             %report;
69995         %end;
69996      
69997         %doendm:
69998      %mend main;
69999      
70000      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
70002     +%macro SetProperties;
70004     +     /* IGN options */
70005     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
70006     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
70007     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
70009     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
70010     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
70011     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
70012     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
70013     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
70014     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
70015     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
70016     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
70017     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
70018     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
70019     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
70020     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
70021     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
70022     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
70025     +%mend SetProperties;
70026     +%macro appendfiles(fileref1, fileref2);
70027     +     data _null_;
70028     +       length c $256;
70029     +       fid1=fopen("&fileref1",'A');
70030     +       fid2=fopen("&fileref2",'I');
70031     +       cval = finfo(fid2,'lrecl');
70032     +       put cval= fid1= fid2=;
70033     +       if (fid2 > 0) then
70034     +         do while(fread(fid2)=0);
70035     +           rc = fget(fid2,c,256);
70036     +           _msg_=sysmsg();
70037     +           /* put rc= c= _msg_=; */
70038     +           rc = fput(fid1,strip(c));
70039     +           rc = fwrite(fid1);
70040     +         end;
70041     +         _msg_=sysmsg();
70042     +         put _msg_=;
70043     +       rc = fclose(fid1);
70044     +       rc = fclose(fid2);
70045     +     run;
70046     +%mend appendfiles;
70048     +%macro buildOptScoreCode;
70050     +    %em_register(key=BINCODE, type=FOLDER);
70052     +    filename x catalog 'sashelp.emutil.em_deldir.source';
70053     +    %inc x;
70054     +    filename x;
70055     +    %delDir(folder=%nrbquote(&em_user_bincode));
70057     +    data _null_; length rc $200;
70058     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
70059     +    run;
70061     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
70063     +    %let dsid = %sysfunc(open(class_nosv));
70064     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
70065     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
70067     +    %let oldname=;
70068     +    %do %while(^%sysfunc(fetch(&dsid)));
70069     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
70070     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
70072     +        %if &name ne &oldname %then %do;
70073     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
70074     +             data _null_;
70075     +                length string $200 flag endflag 8;
70076     +                retain string flag endflag;
70077     +                set class_nosv end=eof;
70078     +                where DISPLAY_VAR ="&name";
70079     +                by _variable_ _group_;
70080     +                file _F1;
70081     +                index = kindex(_variable_, "BIN_");
70082     +                if index gt 0 then do;
70083     +                   if first._variable_ then do;
70084     +                      put ' ';
70085     +                      put "&EM_CODEBAR;";
70086     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
70087     +                      put string;
70088     +                      put "&EM_CODEBAR;";
70090     +                      if origLabel ne "" then do;
70091     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
70092     +                            put string;
70093     +                            string = tranwrd(origLabel,"'","''");
70094     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
70095     +                            put string;
70096     +                      end;
70097     +                      else do;
70098     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
70099     +                             put string;
70100     +                      end;
70102     +                      put ' ';
70104     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70105     +                      put string;
70106     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70107     +                      put string;
70108     +                      put "end;";
70109     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70110     +                      put string;
70111     +                   end;
70112     +                   if first._group_ then do;
70113     +                      flag = 0;
70114     +                      endflag = 1;
70115     +                      if ^first._variable_ then do;
70116     +                         put "else";
70117     +                      end;
70118     +                      if LB ne . then do;
70119     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
70120     +                      end;
70121     +                      else do;
70122     +                         flag = 1;
70123     +                         string = "if";
70124     +                      end;
70125     +                   end;
70126     +                   if last._Group_ then do;
70127     +                      if UB ne . then do;
70128     +                        if flag ne 1 then do;
70129     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
70130     +                        end;
70131     +                        else do;
70132     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
70133     +                        end;
70134     +                      end;
70135     +                      else do;
70136     +                         if flag=1 then do;
70137     +                            string = strip(DISPLAY_VAR) ;
70138     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
70139     +                            endflag=0;
70140     +                            string="";
70141     +                         end;
70142     +                         else do;
70143     +                            string = strip(string)!!" then do;";
70144     +                         end;
70145     +                      end;
70146     +                      put string;
70147     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
70148     +                      put string;
70149     +                      if endflag eq 1 then do;
70150     +                        put "end;";
70151     +                      end;
70152     +                   end;
70153     +                   if last._variable_ then do;
70154     +                     string = "end;";
70155     +                     put string;
70156     +                   end;
70158     +                end;
70159     +                else do;
70160     +                   _split_value_ = tranwrd(_split_value_,"'","''");
70161     +                   if first._group_ then do;
70162     +                      flag=0;
70163     +                      if ^first._variable_ then
70164     +                         put 'else';
70165     +                      else do;
70166     +                         put ' ';
70167     +                         put "&EM_CODEBAR;";
70168     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
70169     +                         put string;
70170     +                         put "&EM_CODEBAR;";
70172     +                         if origLabel ne "" then do;
70173     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
70174     +                               put string;
70175     +                               string = tranwrd(origLabel,"'","''");
70176     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
70177     +                               put string;
70178     +                         end;
70179     +                         else do;
70180     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
70181     +                               put string;
70182     +                         end;
70184     +                         put ' ';
70186     +                         if format ne '' then do;
70187     +                            if first._variable_ then do;
70188     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
70189     +                               put string;
70190     +                               string = '%dmnormip(_UFormat);';
70191     +                               put string;
70193     +                               string ="if MISSING(_UFORMAT) then do;";
70194     +                               put string;
70195     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70196     +                               put string;
70197     +                               put "end;";
70199     +                               string="else if NOT MISSING(_UFORMAT) then do;";
70200     +                               put string;
70202     +                            end;
70203     +                         end;
70204     +                         else do;
70205     +                            if type = 'N' then do;
70206     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70207     +                              put string;
70208     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70209     +                              put string;
70210     +                              put "end;";
70212     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70213     +                              put string;
70214     +                            end;
70215     +                            else if type='C' then do;
70216     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
70217     +                              put string;
70218     +                              string = '%dmnormip(_UFormat);';
70219     +                              put string;
70221     +                              string ="if MISSING(_UFORMAT) then do;";
70222     +                              put string;
70223     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70224     +                              put string;
70225     +                              put "end;";
70227     +                              string="else if NOT MISSING(_UFORMAT) then do;";
70228     +                              put string;
70229     +                              string = '%dmnormip(_UFormat);';
70230     +                              put string;
70231     +                           end;
70232     +                         end;
70233     +                      end;
70234     +                      if format ne '' OR type='C' then do;
70235     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
70236     +                      end;
70237     +                      else do;
70238     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
70239     +                      end;
70240     +                   end;
70241     +                   else do;
70242     +                      if flag ne 1 then do;
70243     +                       if format ne '' OR type='C' then do;
70244     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
70245     +                       end;
70246     +                       else do;
70247     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
70248     +                       end;
70249     +                         length = length(tempstring);
70251     +                         if length < 195 then do;
70252     +                            string = tempstring;
70253     +                         end;
70254     +                         else do;
70256     +                            string = strip(string);
70257     +                            put string;
70258     +                            string = ") then do;";
70259     +                            put string;
70261     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
70262     +                            put string;
70263     +                            put "end;";
70265     +                            put 'else';
70266     +                            if format ne '' OR type='C' then do;
70267     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
70268     +                            end;
70269     +                            else do;
70270     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
70271     +                            end;
70272     +                         end;
70273     +                      end;
70274     +                   end;
70276     +                   if last._group_ then do;
70277     +                      string = strip(string);
70278     +                      put string;
70280     +                      string = ") then do;";
70281     +                      put string;
70283     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
70284     +                      put string;
70285     +                      put "end;";
70286     +                   end;
70288     +                   if last._variable_ then do;
70289     +                     put "else do;";
70291     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70292     +                     put string;
70294     +                     put "end;";
70295     +                     put "end;";
70296     +                   end;
70297     +                end;
70298     +             run;
70300     +             %let oldname = &name;
70301     +        %end;
70302     +    %end;
70303     +    %let dsid = %sysfunc(close(&dsid));
70305     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
70306     +    data _null_;
70307     +       file _F1;
70308     +       put "length _UFormat $200;";
70309     +       put "drop _UFormat;";
70310     +       put "_UFormat='';";
70311     +    run;
70312     +    filename _F1;
70314     +   %em_register(key=EMSCOREVAR, type=DATA);
70315     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
70316     +   proc datasets lib=&em_lib nolist;
70317     +      delete &scorevarDs;
70318     +   run;
70319     +   quit;
70321     +   %let filrf=mydir;
70322     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
70323     +   %let did=%sysfunc(dopen(&filrf));
70325     +   %if &did %then %do;  %PUT  did= &did;
70326     +       %let memcount=%sysfunc(dnum(&did));
70327     +       %if &memcount > 0 %then %do;
70328     +           data &em_user_emscorevar;
70329     +              length Name $32 formula $70 file $200;
70330     +              keep NAME Formula file;
70331     +              formula  = '';
70332     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
70333     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
70334     +               output;
70335     +           %end;
70336     +           %do i=1 %to &memcount;
70337     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
70338     +               %let newvar = %scan(&name, 1, .);
70339     +               %if "&newvar" ne "_ALL_" %then %do;
70340     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
70341     +                   output;
70342     +               %end;
70343     +           %end;
70345     +           run;
70346     +       %end;
70347     +       %let did = %sysfunc(dclose(&did));
70348     +  %end;
70350     +   %doendu:
70351     +%mend buildOptScoreCode;
70354     +%macro buildScoreCode(flowCode, publishCode);
70357     +  filename x "&flowCode";
70359     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
70360     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
70361     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
70363     +  data temp;
70364     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
70365     +    by display_var _Split_value_;
70366     +     if upcase(_Split_value_) ne 'MISSING';
70367     +   run;
70369     +   data temp_missing;
70370     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
70371     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
70372     +     by display_var _Split_value_;
70373     +     if upcase(_Split_value_) eq 'MISSING';
70374     +     keep _variable_ display_var missgrp;
70375     +   run;
70377     +   proc sort data=temp_missing; by display_var missgrp; run;
70379     +   data temp_missing;
70380     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
70381     +     by display_var missgrp;
70382     +     if ^_a then delete;
70383     +     keep _variable_ display_var missgrp ;
70384     +   run;
70386     +   data temp;
70387     +     merge temp temp_missing;
70388     +     by display_var;
70389     +     if display_Var eq '' then delete;
70390     +    run;
70392     +    /* pull in wtev values */
70393     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
70394     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
70395     +    proc sort data=temp;  by display_var _group_; run;
70397     +   data temp;
70398     +      merge temp tempcoarse(keep=display_var _group_  role) ;
70399     +      by display_var _group_;
70400     +    run;
70402     +    data temp;
70403     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
70404     +      by display_var;
70406     +      if _group_ = . then delete;
70407     +      if _variable_ = '' then delete;
70408     +    run;
70410     +    proc sort data=temp out=class;
70411     +       by _variable_ _group_ LB;
70412     +    run;
70414     +    data _null_;
70415     +      file X;
70417     +      put "length _UFormat $200;";
70418     +      put "drop _UFormat;";
70419     +      put "_UFormat='';";
70420     +    run;
70422     +    data class_nosv;
70423     +      set class;
70424     +      if upcase(role)="INPUT";
70425     +    run;
70427     +    data _null_;
70428     +       file X MOD;
70429     +       length string $200 flag endflag 8;
70430     +       retain string flag endflag;
70431     +       set class_nosv end=eof;
70432     +       by _variable_ _group_;
70434     +       index = kindex(_variable_, "BIN_");
70435     +       if index gt 0 then do;
70437     +         if first._variable_ then do;
70438     +            put ' ';
70439     +            put "&EM_CODEBAR;";
70440     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
70441     +            put string;
70442     +            put "&EM_CODEBAR;";
70445     +            if origLabel ne "" then do;
70446     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
70447     +              put string;
70448     +              string = tranwrd(origLabel,"'","''");
70449     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
70450     +              put string;
70451     +            end;
70452     +            else do;
70453     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
70454     +             put string;
70455     +            end;
70457     +            put ' ';
70459     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70460     +            put string;
70461     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70462     +            put string;
70463     +            put "end;";
70464     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70465     +            put string;
70466     +          end;
70467     +           if first._group_ then do;
70468     +              flag = 0;
70469     +              endflag = 1;
70470     +              if ^first._variable_ then do;
70471     +                put "else";
70472     +              end;
70473     +              if LB ne . then do;
70474     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
70475     +              end;
70476     +              else do;
70477     +                 flag = 1;
70478     +                 string = "if";
70479     +              end;
70481     +           end;
70482     +           if last._Group_ then do;
70483     +              if UB ne . then do;
70484     +                if flag ne 1 then do;
70485     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
70486     +                end;
70487     +                else do;
70488     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
70489     +                end;
70490     +              end;
70491     +              else do;
70492     +                 if flag=1 then do;
70493     +                   string = strip(DISPLAY_VAR) ;
70494     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
70495     +                   endflag = 0;
70496     +                   string="";
70497     +                 end;
70498     +                 else do;
70499     +                   string = strip(string)!!" then do;";
70500     +                 end;
70501     +              end;
70502     +              put string;
70504     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
70505     +              put string;
70506     +              if endflag eq 1 then do;
70507     +                put "end;";
70508     +              end;
70509     +           end;
70510     +           if last._variable_ then do;
70511     +             string = "end;";
70512     +             put string;
70513     +           end;
70514     +       end;
70515     +       else do;
70516     +           _split_value_ = tranwrd(_split_value_,"'","''");
70517     +           if first._group_ then do;
70518     +              flag=0;
70519     +              if ^first._variable_ then
70520     +                 put 'else';
70521     +              else do;
70522     +                 put ' ';
70523     +                 put "&EM_CODEBAR;";
70524     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
70525     +                 put string;
70526     +                 put "&EM_CODEBAR;";
70528     +                 if origLabel ne "" then do;
70529     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
70530     +                   put string;
70531     +                   string = tranwrd(origLabel,"'","''");
70532     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
70533     +                   put string;
70534     +                 end;
70535     +                 else do;
70536     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
70537     +                   put string;
70538     +                 end;
70540     +                 put ' ';
70542     +                if format ne '' then do;
70543     +                  if first._variable_ then do;
70544     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
70545     +                    put string;
70546     +                    string = '%dmnormip(_UFormat);';
70547     +                    put string;
70549     +                     string ="if MISSING(_UFORMAT) then do;";
70550     +                     put string;
70551     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70552     +                     put string;
70553     +                     put "end;";
70555     +                     string="else if NOT MISSING(_UFORMAT) then do;";
70556     +                     put string;
70558     +                  end;
70559     +                end;
70560     +                else do;
70561     +                     if type = 'N' then do;
70562     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70563     +                       put string;
70564     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70565     +                       put string;
70566     +                       put "end;";
70568     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
70569     +                       put string;
70571     +                     end;
70572     +                     else if type='C' then do;
70573     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
70574     +                        put string;
70575     +                        string = '%dmnormip(_UFormat);';
70576     +                        put string;
70578     +                        string ="if MISSING(_UFORMAT) then do;";
70579     +                        put string;
70580     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70581     +                        put string;
70582     +                        put "end;";
70584     +                        string="else if NOT MISSING(_UFORMAT) then do;";
70585     +                        put string;
70586     +                        string = '%dmnormip(_UFormat);';
70587     +                        put string;
70588     +                    end;
70589     +                end;
70590     +              end;
70591     +              if format ne '' OR type='C' then do;
70592     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
70593     +              end;
70594     +              else do;
70595     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
70596     +              end;
70597     +           end;
70598     +           else do;
70599     +              if flag ne 1 then do;
70600     +                if format ne '' OR type='C' then do;
70601     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
70602     +                end;
70603     +                else do;
70604     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
70605     +                end;
70606     +                length = klength(tempstring);
70608     +                if length < 195 then do;
70609     +                   string = tempstring;
70610     +                end;
70611     +                else do;
70613     +                   string = strip(string);
70614     +                   put string;
70615     +                   string = ") then do;";
70616     +                   put string;
70618     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
70619     +                   put string;
70620     +                   put "end;";
70622     +                 /*  string = strip(string)||",'...';"; */
70624     +                   put 'else';
70625     +                   if format ne '' OR type='C' then do;
70626     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
70627     +                   end;
70628     +                   else do;
70629     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
70630     +                   end;
70633     +                end;
70634     +              end;
70635     +           end;
70637     +           if last._group_ then do;
70638     +              string = strip(string);
70639     +              put string;
70640     +              string = ") then do;";
70641     +              put string;
70643     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
70644     +              put string;
70645     +              put "end;";
70646     +           end;
70648     +           if last._variable_ then do;
70649     +             put "else do;";
70651     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
70652     +             put string;
70654     +             put "end;";
70655     +             put "end;";
70656     +           end;
70657     +         *end;
70658     +       end;
70659     +    run;
70661     +    /* generate PublishCode the same as flowscorecode */
70662     +    filename Y "&publishCode";
70664     +    /* if publishCode already exists, wipe it out first */
70665     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
70666     +      %let rc = %sysfunc(fdelete(Y));
70667     +    %end;
70669     +    %appendfiles(Y, X);
70671     +    filename X;
70672     +    filename Y;
70674     +    %buildOptScoreCode;
70676     +    proc datasets library=work nolist;
70677     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
70678     +    run;
70679     +    quit;
70681     +%mend buildScoreCode;
70683     +%macro buildMetaCode(DeltaCodeFile=);
70685     +   /* set variable roles based on New Role column in the Results table */
70686     +   data _null_;
70687     +      file &DeltaCodeFile;
70688     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
70689     +      %if &dsid %then %do;
70690     +        %let obs = %sysfunc(fetch(&dsid));
70691     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
70692     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
70693     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
70695     +        %do %while(&obs=0);
70696     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
70697     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
70698     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
70700     +          /* retrieve grp and woe names from varmappings dataset */
70701     +          %let choice = _VARIABLE_ = "&inputname";
70702     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
70703     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
70704     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
70705     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
70706     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
70708     +          put "if name = '&inputname' then role='REJECTED';";
70709     +          %if "&role" ne "DEFAULT" %then %do;
70710     +            put "if name = '&grpname' then role='&role';";
70711     +          %end;
70712     +          %else %do;
70713     +            put "if name = '&grpname' then role='&oldrole';";
70714     +          %end;
70715     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
70717     +          %let obs = %sysfunc(fetch(&dsid));
70718     +        %end;
70719     +      %end;
70720     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
70721     +   run;
70723     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
70724     +   data _null_;
70725     +      file &DeltaCodeFile MOD;
70727     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
70728     +      %if &sdsid %then %do;
70729     +        %let sobs = %sysfunc(fetch(&sdsid));
70730     +        %do %while(&sobs=0);
70731     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
70732     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
70733     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
70734     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
70736     +          %let checkgrp = GRP_&checkname;
70737     +          %let lenname = %length(&checkgrp);
70738     +          %if %eval(&lenname-32) > 0 %then %do;
70739     +            %let checkgrp = %substr(&checkgrp, 1, 32);
70740     +          %end;
70742     +          %let choice = _VARIABLE_ ="&checkname";
70743     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
70745     +          /* if var not found in varmappings, delete variables; */
70746     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
70747     +          %if &vdsid eq 0 %then %do;
70748     +            put 'if name="&displayvar" then delete;';
70749     +            %let dispgrp = GRP_&displayvar;
70750     +            put 'if name="&dispgrp" then delete;';
70751     +          %end;
70753     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
70754     +          %let sobs = %sysfunc(fetch(&sdsid));
70755     +        %end;
70756     +      %end;
70757     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
70758     +   run;
70760     +%mend buildMetaCode;
70762     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
70764     +   proc sort data=&coarse out=sortedcoarse nodupkey;
70765     +     by display_var;
70766     +   run;
70767     +   proc sort data=&varmappings nodupkey;
70768     +     by _variable_;
70769     +   run;
70770     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
70771     +     proc sort data=&resultstable; by display_var; run;
70772     +   %end;
70774     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
70775     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
70776     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
70777     +        &resultstable (keep = display_var _new_role_ )
70778     +     %end;
70779     +     ;
70780     +     by display_var;
70781     +     length _role_ _new_role_ $10;
70782     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
70783     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
70784     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
70785     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
70786     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
70787     +           ;
70789     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
70790     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
70791     +                _role_ = "Rejected";
70792     +             else _role_ = "Input";
70793     +           %end;
70794     +           %else %do;
70795     +             _role_ = "Input";
70796     +           %end;
70797     +           if _new_role_ eq "" then _new_role_="Default";
70798     +      if ^_a then do;
70799     +        _gini_ = 0;
70800     +        _role_ = 'Rejected';
70801     +        if _new_role_ eq "" then _new_role_="Default";
70802     +      end;
70803     +   run;
70804     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
70805     +     by NAME;
70806     +   run;
70807     +   data outlabel;
70808     +     set outlabel;
70809     +     if _label_ = '' then _label_ = _variable_;
70810     +   run;
70811     +   data &resultstable;
70812     +     merge &resultstable(in=_a_) outlabel;
70813     +     by display_Var;
70814     +     if _a_ then output;
70815     +   run;
70816     +   proc datasets library=work nolist;
70817     +     delete sortedcoarse outlabel;
70818     +   run;
70819     +   quit;
70820     +   proc sort data=&resultstable nodupkey;
70821     +      by DESCENDING
70822     +        _gini_ display_Var;
70823     +   run;
70824     +   data &resultstable;
70825     +     set &resultstable;
70827     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
70828     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
70829     +     giniOrder = _N_;
70830     +     _gini_ = round(_GINI_, .001);
70831     +     drop _variable_;
70832     +   run;
70834     +   proc print data=&resultstable label;
70835     +   run;
70837     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
70838     +   data &coarse;
70839     +     set &coarse;
70840     +     length role $10;
70841     +     %let dsid = %sysfunc(open(&resultstable));
70842     +     %if &dsid %then %do;
70843     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
70844     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
70845     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
70847     +       %let obs = %sysfunc(fetch(&dsid));
70848     +       %do %while(&obs=0);
70849     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
70850     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
70851     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
70853     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
70854     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
70855     +            giniOrder = &order;
70856     +            role = "&role";
70857     +          end;
70859     +          %let obs = %sysfunc(fetch(&dsid));
70860     +       %end;
70861     +     %end;
70862     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
70863     +   run;
70866     +%mend EM_GENERATE_RESULTSTABLE;
70868     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
70870     +    /* instantiate the zchar macro to be used in adding bin definition */
70871     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
70872     +    %inc _temp;
70873     +    filename _temp;
70875     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
70876     +      by _variable_ binFlag _group_ LB;
70877     +    run;
70879     +    data tempExport;
70880     +      set sortedFine;
70881     +      by _variable_ binFlag _group_;
70882     +      length _split_value_ $200;
70884     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
70885     +      if binFlag = 0 then do;
70886     +        index = kindex(_variable_, "BIN_");
70887     +        if index gt 0 then do;
70888     +          _LEVEL_ = "INTERVAL";
70889     +        end;
70890     +        _Split_value_ = _split_value_;
70891     +        output;
70892     +      end;
70893     +      else do;
70894     +         * if last._group_ then do;
70895     +          index = kindex(_variable_, "BIN_");
70896     +          if index gt 0 then do;
70897     +            _LEVEL_ = "INTERVAL";
70898     +          end;
70899     +          _Split_value_ = %zchar(UB);
70900     +          output;
70901     +         * end;
70902     +      end;
70904     +      rename display_Var = _variable_;
70905     +      keep display_var _level_ _group_ _split_value_ binFlag;
70906     +    run;
70908     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
70909     +       data &EXPORTGROUPING;
70910     +         set tempexport;
70911     +       run;
70912     +    %end;
70913     +    %else %do;
70914     +       /* determine if EXPORTGROUPING already exists */
70915     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
70916     +         data &EXPORTGROUPING;
70917     +            set &EXPORTGROUPING tempexport;
70918     +         run;
70919     +       %end;
70920     +       %else %do;
70921     +         data &EXPORTGROUPING;
70922     +            set tempexport;
70923     +         run;
70924     +       %end;
70925     +    %end;
70927     +    proc datasets lib=work nolist;
70928     +      delete sortedFine tempexport;
70929     +    run;
70930     +    quit;
70932     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
70937     +%macro report;
70939     +   /* if createGrouping then create a dataset for export */
70940     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
70941     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
70942     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
70943     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
70944     +   %end;
70945     +   %else %do;
70946     +     proc datasets library=&EM_LIB nolist;
70947     +       delete &EM_NODEID._EXPORTGROUP;
70948     +     run;
70949     +     quit;
70950     +   %end;
70953     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
70954     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
70955     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
70956     +   %end;
70957     +   %else %do;
70958     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
70959     +   %end;
70961     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
70962     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
70965     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS8 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS8.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37003112787847;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
70966      
70967      *------------------------------------------------------------*;
70968      * End REPORT: BINNING;
70969      *------------------------------------------------------------*;

70970      /* Reset EM Options */
70971      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
70972      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
70973      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
70974      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
70975      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
70976      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 128 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
