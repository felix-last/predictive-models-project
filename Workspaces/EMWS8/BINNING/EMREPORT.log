MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.01 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                19. April 2016
Time:                11.01 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1WKXFC8 "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1WKXFC8 new;
MPRINT(EM_DIAGRAM):   run;
60424      %let EMEXCEPTIONSTRING=;
60425      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
60426      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
60427      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60428      %let EM_ACTION = REPORT;
60429      %let syscc = 0;
60430      %macro main;
60431      
60432        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
60433        %include temp;
60434        filename temp;
60435      
60436        %setProperties;
60437      
60438        %if %upcase(&EM_ACTION) = CREATE %then %do;
60439          filename temp catalog 'sashelp.emmdfy.binning_create.source';
60440          %include temp;
60441          filename temp;
60442      
60443          %create;
60444        %end;
60445      
60446         %else
60447         %if %upcase(&EM_ACTION) = TRAIN %then %do;
60448      
60449             filename temp catalog 'sashelp.emmdfy.binning_train.source';
60450             %include temp;
60451             filename temp;
60452             %train;
60453         %end;
60454      
60455        %else
60456        %if %upcase(&EM_ACTION) = SCORE %then %do;
60457          filename temp catalog 'sashelp.emmdfy.binning_score.source';
60458          %include temp;
60459          filename temp;
60460      
60461          %score;
60462      
60463        %end;
60464      
60465        %else
60466        %if %upcase(&EM_ACTION) = REPORT %then %do;
60467      
60468             filename temp catalog 'sashelp.emmdfy.binning_report.source';
60469             %include temp;
60470             filename temp;
60471      
60472             %report;
60473         %end;
60474      
60475         %doendm:
60476      %mend main;
60477      
60478      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
60480     +%macro SetProperties;
60482     +     /* IGN options */
60483     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
60484     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
60485     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
60487     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
60488     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
60489     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
60490     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
60491     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
60492     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
60493     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
60494     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
60495     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
60496     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
60497     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
60498     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
60499     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
60500     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
60503     +%mend SetProperties;
60504     +%macro appendfiles(fileref1, fileref2);
60505     +     data _null_;
60506     +       length c $256;
60507     +       fid1=fopen("&fileref1",'A');
60508     +       fid2=fopen("&fileref2",'I');
60509     +       cval = finfo(fid2,'lrecl');
60510     +       put cval= fid1= fid2=;
60511     +       if (fid2 > 0) then
60512     +         do while(fread(fid2)=0);
60513     +           rc = fget(fid2,c,256);
60514     +           _msg_=sysmsg();
60515     +           /* put rc= c= _msg_=; */
60516     +           rc = fput(fid1,strip(c));
60517     +           rc = fwrite(fid1);
60518     +         end;
60519     +         _msg_=sysmsg();
60520     +         put _msg_=;
60521     +       rc = fclose(fid1);
60522     +       rc = fclose(fid2);
60523     +     run;
60524     +%mend appendfiles;
60526     +%macro buildOptScoreCode;
60528     +    %em_register(key=BINCODE, type=FOLDER);
60530     +    filename x catalog 'sashelp.emutil.em_deldir.source';
60531     +    %inc x;
60532     +    filename x;
60533     +    %delDir(folder=%nrbquote(&em_user_bincode));
60535     +    data _null_; length rc $200;
60536     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
60537     +    run;
60539     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
60541     +    %let dsid = %sysfunc(open(class_nosv));
60542     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
60543     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
60545     +    %let oldname=;
60546     +    %do %while(^%sysfunc(fetch(&dsid)));
60547     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
60548     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
60550     +        %if &name ne &oldname %then %do;
60551     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
60552     +             data _null_;
60553     +                length string $200 flag endflag 8;
60554     +                retain string flag endflag;
60555     +                set class_nosv end=eof;
60556     +                where DISPLAY_VAR ="&name";
60557     +                by _variable_ _group_;
60558     +                file _F1;
60559     +                index = kindex(_variable_, "BIN_");
60560     +                if index gt 0 then do;
60561     +                   if first._variable_ then do;
60562     +                      put ' ';
60563     +                      put "&EM_CODEBAR;";
60564     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
60565     +                      put string;
60566     +                      put "&EM_CODEBAR;";
60568     +                      if origLabel ne "" then do;
60569     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
60570     +                            put string;
60571     +                            string = tranwrd(origLabel,"'","''");
60572     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
60573     +                            put string;
60574     +                      end;
60575     +                      else do;
60576     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
60577     +                             put string;
60578     +                      end;
60580     +                      put ' ';
60582     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60583     +                      put string;
60584     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60585     +                      put string;
60586     +                      put "end;";
60587     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60588     +                      put string;
60589     +                   end;
60590     +                   if first._group_ then do;
60591     +                      flag = 0;
60592     +                      endflag = 1;
60593     +                      if ^first._variable_ then do;
60594     +                         put "else";
60595     +                      end;
60596     +                      if LB ne . then do;
60597     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
60598     +                      end;
60599     +                      else do;
60600     +                         flag = 1;
60601     +                         string = "if";
60602     +                      end;
60603     +                   end;
60604     +                   if last._Group_ then do;
60605     +                      if UB ne . then do;
60606     +                        if flag ne 1 then do;
60607     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60608     +                        end;
60609     +                        else do;
60610     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60611     +                        end;
60612     +                      end;
60613     +                      else do;
60614     +                         if flag=1 then do;
60615     +                            string = strip(DISPLAY_VAR) ;
60616     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
60617     +                            endflag=0;
60618     +                            string="";
60619     +                         end;
60620     +                         else do;
60621     +                            string = strip(string)!!" then do;";
60622     +                         end;
60623     +                      end;
60624     +                      put string;
60625     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60626     +                      put string;
60627     +                      if endflag eq 1 then do;
60628     +                        put "end;";
60629     +                      end;
60630     +                   end;
60631     +                   if last._variable_ then do;
60632     +                     string = "end;";
60633     +                     put string;
60634     +                   end;
60636     +                end;
60637     +                else do;
60638     +                   _split_value_ = tranwrd(_split_value_,"'","''");
60639     +                   if first._group_ then do;
60640     +                      flag=0;
60641     +                      if ^first._variable_ then
60642     +                         put 'else';
60643     +                      else do;
60644     +                         put ' ';
60645     +                         put "&EM_CODEBAR;";
60646     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
60647     +                         put string;
60648     +                         put "&EM_CODEBAR;";
60650     +                         if origLabel ne "" then do;
60651     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
60652     +                               put string;
60653     +                               string = tranwrd(origLabel,"'","''");
60654     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
60655     +                               put string;
60656     +                         end;
60657     +                         else do;
60658     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
60659     +                               put string;
60660     +                         end;
60662     +                         put ' ';
60664     +                         if format ne '' then do;
60665     +                            if first._variable_ then do;
60666     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
60667     +                               put string;
60668     +                               string = '%dmnormip(_UFormat);';
60669     +                               put string;
60671     +                               string ="if MISSING(_UFORMAT) then do;";
60672     +                               put string;
60673     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60674     +                               put string;
60675     +                               put "end;";
60677     +                               string="else if NOT MISSING(_UFORMAT) then do;";
60678     +                               put string;
60680     +                            end;
60681     +                         end;
60682     +                         else do;
60683     +                            if type = 'N' then do;
60684     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60685     +                              put string;
60686     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60687     +                              put string;
60688     +                              put "end;";
60690     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60691     +                              put string;
60692     +                            end;
60693     +                            else if type='C' then do;
60694     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
60695     +                              put string;
60696     +                              string = '%dmnormip(_UFormat);';
60697     +                              put string;
60699     +                              string ="if MISSING(_UFORMAT) then do;";
60700     +                              put string;
60701     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60702     +                              put string;
60703     +                              put "end;";
60705     +                              string="else if NOT MISSING(_UFORMAT) then do;";
60706     +                              put string;
60707     +                              string = '%dmnormip(_UFormat);';
60708     +                              put string;
60709     +                           end;
60710     +                         end;
60711     +                      end;
60712     +                      if format ne '' OR type='C' then do;
60713     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
60714     +                      end;
60715     +                      else do;
60716     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
60717     +                      end;
60718     +                   end;
60719     +                   else do;
60720     +                      if flag ne 1 then do;
60721     +                       if format ne '' OR type='C' then do;
60722     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
60723     +                       end;
60724     +                       else do;
60725     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
60726     +                       end;
60727     +                         length = length(tempstring);
60729     +                         if length < 195 then do;
60730     +                            string = tempstring;
60731     +                         end;
60732     +                         else do;
60734     +                            string = strip(string);
60735     +                            put string;
60736     +                            string = ") then do;";
60737     +                            put string;
60739     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60740     +                            put string;
60741     +                            put "end;";
60743     +                            put 'else';
60744     +                            if format ne '' OR type='C' then do;
60745     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
60746     +                            end;
60747     +                            else do;
60748     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
60749     +                            end;
60750     +                         end;
60751     +                      end;
60752     +                   end;
60754     +                   if last._group_ then do;
60755     +                      string = strip(string);
60756     +                      put string;
60758     +                      string = ") then do;";
60759     +                      put string;
60761     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60762     +                      put string;
60763     +                      put "end;";
60764     +                   end;
60766     +                   if last._variable_ then do;
60767     +                     put "else do;";
60769     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60770     +                     put string;
60772     +                     put "end;";
60773     +                     put "end;";
60774     +                   end;
60775     +                end;
60776     +             run;
60778     +             %let oldname = &name;
60779     +        %end;
60780     +    %end;
60781     +    %let dsid = %sysfunc(close(&dsid));
60783     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
60784     +    data _null_;
60785     +       file _F1;
60786     +       put "length _UFormat $200;";
60787     +       put "drop _UFormat;";
60788     +       put "_UFormat='';";
60789     +    run;
60790     +    filename _F1;
60792     +   %em_register(key=EMSCOREVAR, type=DATA);
60793     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
60794     +   proc datasets lib=&em_lib nolist;
60795     +      delete &scorevarDs;
60796     +   run;
60797     +   quit;
60799     +   %let filrf=mydir;
60800     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
60801     +   %let did=%sysfunc(dopen(&filrf));
60803     +   %if &did %then %do;  %PUT  did= &did;
60804     +       %let memcount=%sysfunc(dnum(&did));
60805     +       %if &memcount > 0 %then %do;
60806     +           data &em_user_emscorevar;
60807     +              length Name $32 formula $70 file $200;
60808     +              keep NAME Formula file;
60809     +              formula  = '';
60810     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
60811     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
60812     +               output;
60813     +           %end;
60814     +           %do i=1 %to &memcount;
60815     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
60816     +               %let newvar = %scan(&name, 1, .);
60817     +               %if "&newvar" ne "_ALL_" %then %do;
60818     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
60819     +                   output;
60820     +               %end;
60821     +           %end;
60823     +           run;
60824     +       %end;
60825     +       %let did = %sysfunc(dclose(&did));
60826     +  %end;
60828     +   %doendu:
60829     +%mend buildOptScoreCode;
60832     +%macro buildScoreCode(flowCode, publishCode);
60835     +  filename x "&flowCode";
60837     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
60838     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
60839     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
60841     +  data temp;
60842     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
60843     +    by display_var _Split_value_;
60844     +     if upcase(_Split_value_) ne 'MISSING';
60845     +   run;
60847     +   data temp_missing;
60848     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
60849     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
60850     +     by display_var _Split_value_;
60851     +     if upcase(_Split_value_) eq 'MISSING';
60852     +     keep _variable_ display_var missgrp;
60853     +   run;
60855     +   proc sort data=temp_missing; by display_var missgrp; run;
60857     +   data temp_missing;
60858     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
60859     +     by display_var missgrp;
60860     +     if ^_a then delete;
60861     +     keep _variable_ display_var missgrp ;
60862     +   run;
60864     +   data temp;
60865     +     merge temp temp_missing;
60866     +     by display_var;
60867     +     if display_Var eq '' then delete;
60868     +    run;
60870     +    /* pull in wtev values */
60871     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
60872     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
60873     +    proc sort data=temp;  by display_var _group_; run;
60875     +   data temp;
60876     +      merge temp tempcoarse(keep=display_var _group_  role) ;
60877     +      by display_var _group_;
60878     +    run;
60880     +    data temp;
60881     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
60882     +      by display_var;
60884     +      if _group_ = . then delete;
60885     +      if _variable_ = '' then delete;
60886     +    run;
60888     +    proc sort data=temp out=class;
60889     +       by _variable_ _group_ LB;
60890     +    run;
60892     +    data _null_;
60893     +      file X;
60895     +      put "length _UFormat $200;";
60896     +      put "drop _UFormat;";
60897     +      put "_UFormat='';";
60898     +    run;
60900     +    data class_nosv;
60901     +      set class;
60902     +      if upcase(role)="INPUT";
60903     +    run;
60905     +    data _null_;
60906     +       file X MOD;
60907     +       length string $200 flag endflag 8;
60908     +       retain string flag endflag;
60909     +       set class_nosv end=eof;
60910     +       by _variable_ _group_;
60912     +       index = kindex(_variable_, "BIN_");
60913     +       if index gt 0 then do;
60915     +         if first._variable_ then do;
60916     +            put ' ';
60917     +            put "&EM_CODEBAR;";
60918     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
60919     +            put string;
60920     +            put "&EM_CODEBAR;";
60923     +            if origLabel ne "" then do;
60924     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
60925     +              put string;
60926     +              string = tranwrd(origLabel,"'","''");
60927     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
60928     +              put string;
60929     +            end;
60930     +            else do;
60931     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
60932     +             put string;
60933     +            end;
60935     +            put ' ';
60937     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60938     +            put string;
60939     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60940     +            put string;
60941     +            put "end;";
60942     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60943     +            put string;
60944     +          end;
60945     +           if first._group_ then do;
60946     +              flag = 0;
60947     +              endflag = 1;
60948     +              if ^first._variable_ then do;
60949     +                put "else";
60950     +              end;
60951     +              if LB ne . then do;
60952     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
60953     +              end;
60954     +              else do;
60955     +                 flag = 1;
60956     +                 string = "if";
60957     +              end;
60959     +           end;
60960     +           if last._Group_ then do;
60961     +              if UB ne . then do;
60962     +                if flag ne 1 then do;
60963     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60964     +                end;
60965     +                else do;
60966     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60967     +                end;
60968     +              end;
60969     +              else do;
60970     +                 if flag=1 then do;
60971     +                   string = strip(DISPLAY_VAR) ;
60972     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
60973     +                   endflag = 0;
60974     +                   string="";
60975     +                 end;
60976     +                 else do;
60977     +                   string = strip(string)!!" then do;";
60978     +                 end;
60979     +              end;
60980     +              put string;
60982     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60983     +              put string;
60984     +              if endflag eq 1 then do;
60985     +                put "end;";
60986     +              end;
60987     +           end;
60988     +           if last._variable_ then do;
60989     +             string = "end;";
60990     +             put string;
60991     +           end;
60992     +       end;
60993     +       else do;
60994     +           _split_value_ = tranwrd(_split_value_,"'","''");
60995     +           if first._group_ then do;
60996     +              flag=0;
60997     +              if ^first._variable_ then
60998     +                 put 'else';
60999     +              else do;
61000     +                 put ' ';
61001     +                 put "&EM_CODEBAR;";
61002     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
61003     +                 put string;
61004     +                 put "&EM_CODEBAR;";
61006     +                 if origLabel ne "" then do;
61007     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
61008     +                   put string;
61009     +                   string = tranwrd(origLabel,"'","''");
61010     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
61011     +                   put string;
61012     +                 end;
61013     +                 else do;
61014     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
61015     +                   put string;
61016     +                 end;
61018     +                 put ' ';
61020     +                if format ne '' then do;
61021     +                  if first._variable_ then do;
61022     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
61023     +                    put string;
61024     +                    string = '%dmnormip(_UFormat);';
61025     +                    put string;
61027     +                     string ="if MISSING(_UFORMAT) then do;";
61028     +                     put string;
61029     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61030     +                     put string;
61031     +                     put "end;";
61033     +                     string="else if NOT MISSING(_UFORMAT) then do;";
61034     +                     put string;
61036     +                  end;
61037     +                end;
61038     +                else do;
61039     +                     if type = 'N' then do;
61040     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61041     +                       put string;
61042     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61043     +                       put string;
61044     +                       put "end;";
61046     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61047     +                       put string;
61049     +                     end;
61050     +                     else if type='C' then do;
61051     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
61052     +                        put string;
61053     +                        string = '%dmnormip(_UFormat);';
61054     +                        put string;
61056     +                        string ="if MISSING(_UFORMAT) then do;";
61057     +                        put string;
61058     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61059     +                        put string;
61060     +                        put "end;";
61062     +                        string="else if NOT MISSING(_UFORMAT) then do;";
61063     +                        put string;
61064     +                        string = '%dmnormip(_UFormat);';
61065     +                        put string;
61066     +                    end;
61067     +                end;
61068     +              end;
61069     +              if format ne '' OR type='C' then do;
61070     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
61071     +              end;
61072     +              else do;
61073     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61074     +              end;
61075     +           end;
61076     +           else do;
61077     +              if flag ne 1 then do;
61078     +                if format ne '' OR type='C' then do;
61079     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
61080     +                end;
61081     +                else do;
61082     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61083     +                end;
61084     +                length = klength(tempstring);
61086     +                if length < 195 then do;
61087     +                   string = tempstring;
61088     +                end;
61089     +                else do;
61091     +                   string = strip(string);
61092     +                   put string;
61093     +                   string = ") then do;";
61094     +                   put string;
61096     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61097     +                   put string;
61098     +                   put "end;";
61100     +                 /*  string = strip(string)||",'...';"; */
61102     +                   put 'else';
61103     +                   if format ne '' OR type='C' then do;
61104     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
61105     +                   end;
61106     +                   else do;
61107     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61108     +                   end;
61111     +                end;
61112     +              end;
61113     +           end;
61115     +           if last._group_ then do;
61116     +              string = strip(string);
61117     +              put string;
61118     +              string = ") then do;";
61119     +              put string;
61121     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61122     +              put string;
61123     +              put "end;";
61124     +           end;
61126     +           if last._variable_ then do;
61127     +             put "else do;";
61129     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61130     +             put string;
61132     +             put "end;";
61133     +             put "end;";
61134     +           end;
61135     +         *end;
61136     +       end;
61137     +    run;
61139     +    /* generate PublishCode the same as flowscorecode */
61140     +    filename Y "&publishCode";
61142     +    /* if publishCode already exists, wipe it out first */
61143     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
61144     +      %let rc = %sysfunc(fdelete(Y));
61145     +    %end;
61147     +    %appendfiles(Y, X);
61149     +    filename X;
61150     +    filename Y;
61152     +    %buildOptScoreCode;
61154     +    proc datasets library=work nolist;
61155     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
61156     +    run;
61157     +    quit;
61159     +%mend buildScoreCode;
61161     +%macro buildMetaCode(DeltaCodeFile=);
61163     +   /* set variable roles based on New Role column in the Results table */
61164     +   data _null_;
61165     +      file &DeltaCodeFile;
61166     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
61167     +      %if &dsid %then %do;
61168     +        %let obs = %sysfunc(fetch(&dsid));
61169     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
61170     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
61171     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
61173     +        %do %while(&obs=0);
61174     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
61175     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
61176     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
61178     +          /* retrieve grp and woe names from varmappings dataset */
61179     +          %let choice = _VARIABLE_ = "&inputname";
61180     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
61181     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
61182     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
61183     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
61184     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
61186     +          put "if name = '&inputname' then role='REJECTED';";
61187     +          %if "&role" ne "DEFAULT" %then %do;
61188     +            put "if name = '&grpname' then role='&role';";
61189     +          %end;
61190     +          %else %do;
61191     +            put "if name = '&grpname' then role='&oldrole';";
61192     +          %end;
61193     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
61195     +          %let obs = %sysfunc(fetch(&dsid));
61196     +        %end;
61197     +      %end;
61198     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
61199     +   run;
61201     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
61202     +   data _null_;
61203     +      file &DeltaCodeFile MOD;
61205     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
61206     +      %if &sdsid %then %do;
61207     +        %let sobs = %sysfunc(fetch(&sdsid));
61208     +        %do %while(&sobs=0);
61209     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
61210     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
61211     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
61212     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
61214     +          %let checkgrp = GRP_&checkname;
61215     +          %let lenname = %length(&checkgrp);
61216     +          %if %eval(&lenname-32) > 0 %then %do;
61217     +            %let checkgrp = %substr(&checkgrp, 1, 32);
61218     +          %end;
61220     +          %let choice = _VARIABLE_ ="&checkname";
61221     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
61223     +          /* if var not found in varmappings, delete variables; */
61224     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
61225     +          %if &vdsid eq 0 %then %do;
61226     +            put 'if name="&displayvar" then delete;';
61227     +            %let dispgrp = GRP_&displayvar;
61228     +            put 'if name="&dispgrp" then delete;';
61229     +          %end;
61231     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
61232     +          %let sobs = %sysfunc(fetch(&sdsid));
61233     +        %end;
61234     +      %end;
61235     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
61236     +   run;
61238     +%mend buildMetaCode;
61240     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
61242     +   proc sort data=&coarse out=sortedcoarse nodupkey;
61243     +     by display_var;
61244     +   run;
61245     +   proc sort data=&varmappings nodupkey;
61246     +     by _variable_;
61247     +   run;
61248     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
61249     +     proc sort data=&resultstable; by display_var; run;
61250     +   %end;
61252     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
61253     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
61254     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
61255     +        &resultstable (keep = display_var _new_role_ )
61256     +     %end;
61257     +     ;
61258     +     by display_var;
61259     +     length _role_ _new_role_ $10;
61260     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
61261     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
61262     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
61263     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
61264     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
61265     +           ;
61267     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
61268     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
61269     +                _role_ = "Rejected";
61270     +             else _role_ = "Input";
61271     +           %end;
61272     +           %else %do;
61273     +             _role_ = "Input";
61274     +           %end;
61275     +           if _new_role_ eq "" then _new_role_="Default";
61276     +      if ^_a then do;
61277     +        _gini_ = 0;
61278     +        _role_ = 'Rejected';
61279     +        if _new_role_ eq "" then _new_role_="Default";
61280     +      end;
61281     +   run;
61282     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
61283     +     by NAME;
61284     +   run;
61285     +   data outlabel;
61286     +     set outlabel;
61287     +     if _label_ = '' then _label_ = _variable_;
61288     +   run;
61289     +   data &resultstable;
61290     +     merge &resultstable(in=_a_) outlabel;
61291     +     by display_Var;
61292     +     if _a_ then output;
61293     +   run;
61294     +   proc datasets library=work nolist;
61295     +     delete sortedcoarse outlabel;
61296     +   run;
61297     +   quit;
61298     +   proc sort data=&resultstable nodupkey;
61299     +      by DESCENDING
61300     +        _gini_ display_Var;
61301     +   run;
61302     +   data &resultstable;
61303     +     set &resultstable;
61305     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
61306     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
61307     +     giniOrder = _N_;
61308     +     _gini_ = round(_GINI_, .001);
61309     +     drop _variable_;
61310     +   run;
61312     +   proc print data=&resultstable label;
61313     +   run;
61315     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
61316     +   data &coarse;
61317     +     set &coarse;
61318     +     length role $10;
61319     +     %let dsid = %sysfunc(open(&resultstable));
61320     +     %if &dsid %then %do;
61321     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
61322     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
61323     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
61325     +       %let obs = %sysfunc(fetch(&dsid));
61326     +       %do %while(&obs=0);
61327     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
61328     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
61329     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
61331     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
61332     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
61333     +            giniOrder = &order;
61334     +            role = "&role";
61335     +          end;
61337     +          %let obs = %sysfunc(fetch(&dsid));
61338     +       %end;
61339     +     %end;
61340     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
61341     +   run;
61344     +%mend EM_GENERATE_RESULTSTABLE;
61346     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
61348     +    /* instantiate the zchar macro to be used in adding bin definition */
61349     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
61350     +    %inc _temp;
61351     +    filename _temp;
61353     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
61354     +      by _variable_ binFlag _group_ LB;
61355     +    run;
61357     +    data tempExport;
61358     +      set sortedFine;
61359     +      by _variable_ binFlag _group_;
61360     +      length _split_value_ $200;
61362     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
61363     +      if binFlag = 0 then do;
61364     +        index = kindex(_variable_, "BIN_");
61365     +        if index gt 0 then do;
61366     +          _LEVEL_ = "INTERVAL";
61367     +        end;
61368     +        _Split_value_ = _split_value_;
61369     +        output;
61370     +      end;
61371     +      else do;
61372     +         * if last._group_ then do;
61373     +          index = kindex(_variable_, "BIN_");
61374     +          if index gt 0 then do;
61375     +            _LEVEL_ = "INTERVAL";
61376     +          end;
61377     +          _Split_value_ = %zchar(UB);
61378     +          output;
61379     +         * end;
61380     +      end;
61382     +      rename display_Var = _variable_;
61383     +      keep display_var _level_ _group_ _split_value_ binFlag;
61384     +    run;
61386     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
61387     +       data &EXPORTGROUPING;
61388     +         set tempexport;
61389     +       run;
61390     +    %end;
61391     +    %else %do;
61392     +       /* determine if EXPORTGROUPING already exists */
61393     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
61394     +         data &EXPORTGROUPING;
61395     +            set &EXPORTGROUPING tempexport;
61396     +         run;
61397     +       %end;
61398     +       %else %do;
61399     +         data &EXPORTGROUPING;
61400     +            set tempexport;
61401     +         run;
61402     +       %end;
61403     +    %end;
61405     +    proc datasets lib=work nolist;
61406     +      delete sortedFine tempexport;
61407     +    run;
61408     +    quit;
61410     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
61415     +%macro report;
61417     +   /* if createGrouping then create a dataset for export */
61418     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
61419     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
61420     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
61421     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
61422     +   %end;
61423     +   %else %do;
61424     +     proc datasets library=&EM_LIB nolist;
61425     +       delete &EM_NODEID._EXPORTGROUP;
61426     +     run;
61427     +     quit;
61428     +   %end;
61431     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
61432     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
61433     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
61434     +   %end;
61435     +   %else %do;
61436     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
61437     +   %end;
61439     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
61440     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
61443     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS8 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS8.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70544754280962;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.11 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61444      
61445      *------------------------------------------------------------*;
61446      * End REPORT: BINNING;
61447      *------------------------------------------------------------*;

61448      /* Reset EM Options */
61449      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
61450      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
61451      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
61452      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
61453      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
61454      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 128 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
