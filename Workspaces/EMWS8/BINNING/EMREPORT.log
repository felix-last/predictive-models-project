MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "06H10m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                10 de Março de 2016
Time:                06H10m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1105S4X "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1105S4X new;
MPRINT(EM_DIAGRAM):   run;
68711      %let EMEXCEPTIONSTRING=;
68712      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
68713      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
68714      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
68715      %let EM_ACTION = REPORT;
68716      %let syscc = 0;
68717      %macro main;
68718      
68719        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
68720        %include temp;
68721        filename temp;
68722      
68723        %setProperties;
68724      
68725        %if %upcase(&EM_ACTION) = CREATE %then %do;
68726          filename temp catalog 'sashelp.emmdfy.binning_create.source';
68727          %include temp;
68728          filename temp;
68729      
68730          %create;
68731        %end;
68732      
68733         %else
68734         %if %upcase(&EM_ACTION) = TRAIN %then %do;
68735      
68736             filename temp catalog 'sashelp.emmdfy.binning_train.source';
68737             %include temp;
68738             filename temp;
68739             %train;
68740         %end;
68741      
68742        %else
68743        %if %upcase(&EM_ACTION) = SCORE %then %do;
68744          filename temp catalog 'sashelp.emmdfy.binning_score.source';
68745          %include temp;
68746          filename temp;
68747      
68748          %score;
68749      
68750        %end;
68751      
68752        %else
68753        %if %upcase(&EM_ACTION) = REPORT %then %do;
68754      
68755             filename temp catalog 'sashelp.emmdfy.binning_report.source';
68756             %include temp;
68757             filename temp;
68758      
68759             %report;
68760         %end;
68761      
68762         %doendm:
68763      %mend main;
68764      
68765      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
68767     +%macro SetProperties;
68769     +     /* IGN options */
68770     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
68771     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
68772     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
68774     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
68775     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
68776     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
68777     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
68778     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
68779     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
68780     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
68781     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
68782     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
68783     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
68784     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
68785     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
68786     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
68787     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
68790     +%mend SetProperties;
68791     +%macro appendfiles(fileref1, fileref2);
68792     +     data _null_;
68793     +       length c $256;
68794     +       fid1=fopen("&fileref1",'A');
68795     +       fid2=fopen("&fileref2",'I');
68796     +       cval = finfo(fid2,'lrecl');
68797     +       put cval= fid1= fid2=;
68798     +       if (fid2 > 0) then
68799     +         do while(fread(fid2)=0);
68800     +           rc = fget(fid2,c,256);
68801     +           _msg_=sysmsg();
68802     +           /* put rc= c= _msg_=; */
68803     +           rc = fput(fid1,strip(c));
68804     +           rc = fwrite(fid1);
68805     +         end;
68806     +         _msg_=sysmsg();
68807     +         put _msg_=;
68808     +       rc = fclose(fid1);
68809     +       rc = fclose(fid2);
68810     +     run;
68811     +%mend appendfiles;
68813     +%macro buildOptScoreCode;
68815     +    %em_register(key=BINCODE, type=FOLDER);
68817     +    filename x catalog 'sashelp.emutil.em_deldir.source';
68818     +    %inc x;
68819     +    filename x;
68820     +    %delDir(folder=%nrbquote(&em_user_bincode));
68822     +    data _null_; length rc $200;
68823     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
68824     +    run;
68826     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
68828     +    %let dsid = %sysfunc(open(class_nosv));
68829     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
68830     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
68832     +    %let oldname=;
68833     +    %do %while(^%sysfunc(fetch(&dsid)));
68834     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
68835     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
68837     +        %if &name ne &oldname %then %do;
68838     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
68839     +             data _null_;
68840     +                length string $200 flag endflag 8;
68841     +                retain string flag endflag;
68842     +                set class_nosv end=eof;
68843     +                where DISPLAY_VAR ="&name";
68844     +                by _variable_ _group_;
68845     +                file _F1;
68846     +                index = kindex(_variable_, "BIN_");
68847     +                if index gt 0 then do;
68848     +                   if first._variable_ then do;
68849     +                      put ' ';
68850     +                      put "&EM_CODEBAR;";
68851     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
68852     +                      put string;
68853     +                      put "&EM_CODEBAR;";
68855     +                      if origLabel ne "" then do;
68856     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
68857     +                            put string;
68858     +                            string = tranwrd(origLabel,"'","''");
68859     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
68860     +                            put string;
68861     +                      end;
68862     +                      else do;
68863     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
68864     +                             put string;
68865     +                      end;
68867     +                      put ' ';
68869     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
68870     +                      put string;
68871     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
68872     +                      put string;
68873     +                      put "end;";
68874     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
68875     +                      put string;
68876     +                   end;
68877     +                   if first._group_ then do;
68878     +                      flag = 0;
68879     +                      endflag = 1;
68880     +                      if ^first._variable_ then do;
68881     +                         put "else";
68882     +                      end;
68883     +                      if LB ne . then do;
68884     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
68885     +                      end;
68886     +                      else do;
68887     +                         flag = 1;
68888     +                         string = "if";
68889     +                      end;
68890     +                   end;
68891     +                   if last._Group_ then do;
68892     +                      if UB ne . then do;
68893     +                        if flag ne 1 then do;
68894     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
68895     +                        end;
68896     +                        else do;
68897     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
68898     +                        end;
68899     +                      end;
68900     +                      else do;
68901     +                         if flag=1 then do;
68902     +                            string = strip(DISPLAY_VAR) ;
68903     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
68904     +                            endflag=0;
68905     +                            string="";
68906     +                         end;
68907     +                         else do;
68908     +                            string = strip(string)!!" then do;";
68909     +                         end;
68910     +                      end;
68911     +                      put string;
68912     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
68913     +                      put string;
68914     +                      if endflag eq 1 then do;
68915     +                        put "end;";
68916     +                      end;
68917     +                   end;
68918     +                   if last._variable_ then do;
68919     +                     string = "end;";
68920     +                     put string;
68921     +                   end;
68923     +                end;
68924     +                else do;
68925     +                   _split_value_ = tranwrd(_split_value_,"'","''");
68926     +                   if first._group_ then do;
68927     +                      flag=0;
68928     +                      if ^first._variable_ then
68929     +                         put 'else';
68930     +                      else do;
68931     +                         put ' ';
68932     +                         put "&EM_CODEBAR;";
68933     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
68934     +                         put string;
68935     +                         put "&EM_CODEBAR;";
68937     +                         if origLabel ne "" then do;
68938     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
68939     +                               put string;
68940     +                               string = tranwrd(origLabel,"'","''");
68941     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
68942     +                               put string;
68943     +                         end;
68944     +                         else do;
68945     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
68946     +                               put string;
68947     +                         end;
68949     +                         put ' ';
68951     +                         if format ne '' then do;
68952     +                            if first._variable_ then do;
68953     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
68954     +                               put string;
68955     +                               string = '%dmnormip(_UFormat);';
68956     +                               put string;
68958     +                               string ="if MISSING(_UFORMAT) then do;";
68959     +                               put string;
68960     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
68961     +                               put string;
68962     +                               put "end;";
68964     +                               string="else if NOT MISSING(_UFORMAT) then do;";
68965     +                               put string;
68967     +                            end;
68968     +                         end;
68969     +                         else do;
68970     +                            if type = 'N' then do;
68971     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
68972     +                              put string;
68973     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
68974     +                              put string;
68975     +                              put "end;";
68977     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
68978     +                              put string;
68979     +                            end;
68980     +                            else if type='C' then do;
68981     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
68982     +                              put string;
68983     +                              string = '%dmnormip(_UFormat);';
68984     +                              put string;
68986     +                              string ="if MISSING(_UFORMAT) then do;";
68987     +                              put string;
68988     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
68989     +                              put string;
68990     +                              put "end;";
68992     +                              string="else if NOT MISSING(_UFORMAT) then do;";
68993     +                              put string;
68994     +                              string = '%dmnormip(_UFormat);';
68995     +                              put string;
68996     +                           end;
68997     +                         end;
68998     +                      end;
68999     +                      if format ne '' OR type='C' then do;
69000     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
69001     +                      end;
69002     +                      else do;
69003     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
69004     +                      end;
69005     +                   end;
69006     +                   else do;
69007     +                      if flag ne 1 then do;
69008     +                       if format ne '' OR type='C' then do;
69009     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
69010     +                       end;
69011     +                       else do;
69012     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
69013     +                       end;
69014     +                         length = length(tempstring);
69016     +                         if length < 195 then do;
69017     +                            string = tempstring;
69018     +                         end;
69019     +                         else do;
69021     +                            string = strip(string);
69022     +                            put string;
69023     +                            string = ") then do;";
69024     +                            put string;
69026     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
69027     +                            put string;
69028     +                            put "end;";
69030     +                            put 'else';
69031     +                            if format ne '' OR type='C' then do;
69032     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
69033     +                            end;
69034     +                            else do;
69035     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
69036     +                            end;
69037     +                         end;
69038     +                      end;
69039     +                   end;
69041     +                   if last._group_ then do;
69042     +                      string = strip(string);
69043     +                      put string;
69045     +                      string = ") then do;";
69046     +                      put string;
69048     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
69049     +                      put string;
69050     +                      put "end;";
69051     +                   end;
69053     +                   if last._variable_ then do;
69054     +                     put "else do;";
69056     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
69057     +                     put string;
69059     +                     put "end;";
69060     +                     put "end;";
69061     +                   end;
69062     +                end;
69063     +             run;
69065     +             %let oldname = &name;
69066     +        %end;
69067     +    %end;
69068     +    %let dsid = %sysfunc(close(&dsid));
69070     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
69071     +    data _null_;
69072     +       file _F1;
69073     +       put "length _UFormat $200;";
69074     +       put "drop _UFormat;";
69075     +       put "_UFormat='';";
69076     +    run;
69077     +    filename _F1;
69079     +   %em_register(key=EMSCOREVAR, type=DATA);
69080     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
69081     +   proc datasets lib=&em_lib nolist;
69082     +      delete &scorevarDs;
69083     +   run;
69084     +   quit;
69086     +   %let filrf=mydir;
69087     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
69088     +   %let did=%sysfunc(dopen(&filrf));
69090     +   %if &did %then %do;  %PUT  did= &did;
69091     +       %let memcount=%sysfunc(dnum(&did));
69092     +       %if &memcount > 0 %then %do;
69093     +           data &em_user_emscorevar;
69094     +              length Name $32 formula $70 file $200;
69095     +              keep NAME Formula file;
69096     +              formula  = '';
69097     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
69098     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
69099     +               output;
69100     +           %end;
69101     +           %do i=1 %to &memcount;
69102     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
69103     +               %let newvar = %scan(&name, 1, .);
69104     +               %if "&newvar" ne "_ALL_" %then %do;
69105     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
69106     +                   output;
69107     +               %end;
69108     +           %end;
69110     +           run;
69111     +       %end;
69112     +       %let did = %sysfunc(dclose(&did));
69113     +  %end;
69115     +   %doendu:
69116     +%mend buildOptScoreCode;
69119     +%macro buildScoreCode(flowCode, publishCode);
69122     +  filename x "&flowCode";
69124     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
69125     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
69126     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
69128     +  data temp;
69129     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
69130     +    by display_var _Split_value_;
69131     +     if upcase(_Split_value_) ne 'MISSING';
69132     +   run;
69134     +   data temp_missing;
69135     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
69136     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
69137     +     by display_var _Split_value_;
69138     +     if upcase(_Split_value_) eq 'MISSING';
69139     +     keep _variable_ display_var missgrp;
69140     +   run;
69142     +   proc sort data=temp_missing; by display_var missgrp; run;
69144     +   data temp_missing;
69145     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
69146     +     by display_var missgrp;
69147     +     if ^_a then delete;
69148     +     keep _variable_ display_var missgrp ;
69149     +   run;
69151     +   data temp;
69152     +     merge temp temp_missing;
69153     +     by display_var;
69154     +     if display_Var eq '' then delete;
69155     +    run;
69157     +    /* pull in wtev values */
69158     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
69159     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
69160     +    proc sort data=temp;  by display_var _group_; run;
69162     +   data temp;
69163     +      merge temp tempcoarse(keep=display_var _group_  role) ;
69164     +      by display_var _group_;
69165     +    run;
69167     +    data temp;
69168     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
69169     +      by display_var;
69171     +      if _group_ = . then delete;
69172     +      if _variable_ = '' then delete;
69173     +    run;
69175     +    proc sort data=temp out=class;
69176     +       by _variable_ _group_ LB;
69177     +    run;
69179     +    data _null_;
69180     +      file X;
69182     +      put "length _UFormat $200;";
69183     +      put "drop _UFormat;";
69184     +      put "_UFormat='';";
69185     +    run;
69187     +    data class_nosv;
69188     +      set class;
69189     +      if upcase(role)="INPUT";
69190     +    run;
69192     +    data _null_;
69193     +       file X MOD;
69194     +       length string $200 flag endflag 8;
69195     +       retain string flag endflag;
69196     +       set class_nosv end=eof;
69197     +       by _variable_ _group_;
69199     +       index = kindex(_variable_, "BIN_");
69200     +       if index gt 0 then do;
69202     +         if first._variable_ then do;
69203     +            put ' ';
69204     +            put "&EM_CODEBAR;";
69205     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
69206     +            put string;
69207     +            put "&EM_CODEBAR;";
69210     +            if origLabel ne "" then do;
69211     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
69212     +              put string;
69213     +              string = tranwrd(origLabel,"'","''");
69214     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
69215     +              put string;
69216     +            end;
69217     +            else do;
69218     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
69219     +             put string;
69220     +            end;
69222     +            put ' ';
69224     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
69225     +            put string;
69226     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
69227     +            put string;
69228     +            put "end;";
69229     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
69230     +            put string;
69231     +          end;
69232     +           if first._group_ then do;
69233     +              flag = 0;
69234     +              endflag = 1;
69235     +              if ^first._variable_ then do;
69236     +                put "else";
69237     +              end;
69238     +              if LB ne . then do;
69239     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
69240     +              end;
69241     +              else do;
69242     +                 flag = 1;
69243     +                 string = "if";
69244     +              end;
69246     +           end;
69247     +           if last._Group_ then do;
69248     +              if UB ne . then do;
69249     +                if flag ne 1 then do;
69250     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
69251     +                end;
69252     +                else do;
69253     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
69254     +                end;
69255     +              end;
69256     +              else do;
69257     +                 if flag=1 then do;
69258     +                   string = strip(DISPLAY_VAR) ;
69259     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
69260     +                   endflag = 0;
69261     +                   string="";
69262     +                 end;
69263     +                 else do;
69264     +                   string = strip(string)!!" then do;";
69265     +                 end;
69266     +              end;
69267     +              put string;
69269     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
69270     +              put string;
69271     +              if endflag eq 1 then do;
69272     +                put "end;";
69273     +              end;
69274     +           end;
69275     +           if last._variable_ then do;
69276     +             string = "end;";
69277     +             put string;
69278     +           end;
69279     +       end;
69280     +       else do;
69281     +           _split_value_ = tranwrd(_split_value_,"'","''");
69282     +           if first._group_ then do;
69283     +              flag=0;
69284     +              if ^first._variable_ then
69285     +                 put 'else';
69286     +              else do;
69287     +                 put ' ';
69288     +                 put "&EM_CODEBAR;";
69289     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
69290     +                 put string;
69291     +                 put "&EM_CODEBAR;";
69293     +                 if origLabel ne "" then do;
69294     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
69295     +                   put string;
69296     +                   string = tranwrd(origLabel,"'","''");
69297     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
69298     +                   put string;
69299     +                 end;
69300     +                 else do;
69301     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
69302     +                   put string;
69303     +                 end;
69305     +                 put ' ';
69307     +                if format ne '' then do;
69308     +                  if first._variable_ then do;
69309     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
69310     +                    put string;
69311     +                    string = '%dmnormip(_UFormat);';
69312     +                    put string;
69314     +                     string ="if MISSING(_UFORMAT) then do;";
69315     +                     put string;
69316     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
69317     +                     put string;
69318     +                     put "end;";
69320     +                     string="else if NOT MISSING(_UFORMAT) then do;";
69321     +                     put string;
69323     +                  end;
69324     +                end;
69325     +                else do;
69326     +                     if type = 'N' then do;
69327     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
69328     +                       put string;
69329     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
69330     +                       put string;
69331     +                       put "end;";
69333     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
69334     +                       put string;
69336     +                     end;
69337     +                     else if type='C' then do;
69338     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
69339     +                        put string;
69340     +                        string = '%dmnormip(_UFormat);';
69341     +                        put string;
69343     +                        string ="if MISSING(_UFORMAT) then do;";
69344     +                        put string;
69345     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
69346     +                        put string;
69347     +                        put "end;";
69349     +                        string="else if NOT MISSING(_UFORMAT) then do;";
69350     +                        put string;
69351     +                        string = '%dmnormip(_UFormat);';
69352     +                        put string;
69353     +                    end;
69354     +                end;
69355     +              end;
69356     +              if format ne '' OR type='C' then do;
69357     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
69358     +              end;
69359     +              else do;
69360     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
69361     +              end;
69362     +           end;
69363     +           else do;
69364     +              if flag ne 1 then do;
69365     +                if format ne '' OR type='C' then do;
69366     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
69367     +                end;
69368     +                else do;
69369     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
69370     +                end;
69371     +                length = klength(tempstring);
69373     +                if length < 195 then do;
69374     +                   string = tempstring;
69375     +                end;
69376     +                else do;
69378     +                   string = strip(string);
69379     +                   put string;
69380     +                   string = ") then do;";
69381     +                   put string;
69383     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
69384     +                   put string;
69385     +                   put "end;";
69387     +                 /*  string = strip(string)||",'...';"; */
69389     +                   put 'else';
69390     +                   if format ne '' OR type='C' then do;
69391     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
69392     +                   end;
69393     +                   else do;
69394     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
69395     +                   end;
69398     +                end;
69399     +              end;
69400     +           end;
69402     +           if last._group_ then do;
69403     +              string = strip(string);
69404     +              put string;
69405     +              string = ") then do;";
69406     +              put string;
69408     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
69409     +              put string;
69410     +              put "end;";
69411     +           end;
69413     +           if last._variable_ then do;
69414     +             put "else do;";
69416     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
69417     +             put string;
69419     +             put "end;";
69420     +             put "end;";
69421     +           end;
69422     +         *end;
69423     +       end;
69424     +    run;
69426     +    /* generate PublishCode the same as flowscorecode */
69427     +    filename Y "&publishCode";
69429     +    /* if publishCode already exists, wipe it out first */
69430     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
69431     +      %let rc = %sysfunc(fdelete(Y));
69432     +    %end;
69434     +    %appendfiles(Y, X);
69436     +    filename X;
69437     +    filename Y;
69439     +    %buildOptScoreCode;
69441     +    proc datasets library=work nolist;
69442     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
69443     +    run;
69444     +    quit;
69446     +%mend buildScoreCode;
69448     +%macro buildMetaCode(DeltaCodeFile=);
69450     +   /* set variable roles based on New Role column in the Results table */
69451     +   data _null_;
69452     +      file &DeltaCodeFile;
69453     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
69454     +      %if &dsid %then %do;
69455     +        %let obs = %sysfunc(fetch(&dsid));
69456     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
69457     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
69458     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
69460     +        %do %while(&obs=0);
69461     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
69462     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
69463     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
69465     +          /* retrieve grp and woe names from varmappings dataset */
69466     +          %let choice = _VARIABLE_ = "&inputname";
69467     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
69468     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
69469     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
69470     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
69471     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
69473     +          put "if name = '&inputname' then role='REJECTED';";
69474     +          %if "&role" ne "DEFAULT" %then %do;
69475     +            put "if name = '&grpname' then role='&role';";
69476     +          %end;
69477     +          %else %do;
69478     +            put "if name = '&grpname' then role='&oldrole';";
69479     +          %end;
69480     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
69482     +          %let obs = %sysfunc(fetch(&dsid));
69483     +        %end;
69484     +      %end;
69485     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
69486     +   run;
69488     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
69489     +   data _null_;
69490     +      file &DeltaCodeFile MOD;
69492     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
69493     +      %if &sdsid %then %do;
69494     +        %let sobs = %sysfunc(fetch(&sdsid));
69495     +        %do %while(&sobs=0);
69496     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
69497     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
69498     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
69499     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
69501     +          %let checkgrp = GRP_&checkname;
69502     +          %let lenname = %length(&checkgrp);
69503     +          %if %eval(&lenname-32) > 0 %then %do;
69504     +            %let checkgrp = %substr(&checkgrp, 1, 32);
69505     +          %end;
69507     +          %let choice = _VARIABLE_ ="&checkname";
69508     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
69510     +          /* if var not found in varmappings, delete variables; */
69511     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
69512     +          %if &vdsid eq 0 %then %do;
69513     +            put 'if name="&displayvar" then delete;';
69514     +            %let dispgrp = GRP_&displayvar;
69515     +            put 'if name="&dispgrp" then delete;';
69516     +          %end;
69518     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
69519     +          %let sobs = %sysfunc(fetch(&sdsid));
69520     +        %end;
69521     +      %end;
69522     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
69523     +   run;
69525     +%mend buildMetaCode;
69527     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
69529     +   proc sort data=&coarse out=sortedcoarse nodupkey;
69530     +     by display_var;
69531     +   run;
69532     +   proc sort data=&varmappings nodupkey;
69533     +     by _variable_;
69534     +   run;
69535     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
69536     +     proc sort data=&resultstable; by display_var; run;
69537     +   %end;
69539     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
69540     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
69541     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
69542     +        &resultstable (keep = display_var _new_role_ )
69543     +     %end;
69544     +     ;
69545     +     by display_var;
69546     +     length _role_ _new_role_ $10;
69547     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
69548     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
69549     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
69550     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
69551     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
69552     +           ;
69554     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
69555     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
69556     +                _role_ = "Rejected";
69557     +             else _role_ = "Input";
69558     +           %end;
69559     +           %else %do;
69560     +             _role_ = "Input";
69561     +           %end;
69562     +           if _new_role_ eq "" then _new_role_="Default";
69563     +      if ^_a then do;
69564     +        _gini_ = 0;
69565     +        _role_ = 'Rejected';
69566     +        if _new_role_ eq "" then _new_role_="Default";
69567     +      end;
69568     +   run;
69569     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
69570     +     by NAME;
69571     +   run;
69572     +   data outlabel;
69573     +     set outlabel;
69574     +     if _label_ = '' then _label_ = _variable_;
69575     +   run;
69576     +   data &resultstable;
69577     +     merge &resultstable(in=_a_) outlabel;
69578     +     by display_Var;
69579     +     if _a_ then output;
69580     +   run;
69581     +   proc datasets library=work nolist;
69582     +     delete sortedcoarse outlabel;
69583     +   run;
69584     +   quit;
69585     +   proc sort data=&resultstable nodupkey;
69586     +      by DESCENDING
69587     +        _gini_ display_Var;
69588     +   run;
69589     +   data &resultstable;
69590     +     set &resultstable;
69592     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
69593     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
69594     +     giniOrder = _N_;
69595     +     _gini_ = round(_GINI_, .001);
69596     +     drop _variable_;
69597     +   run;
69599     +   proc print data=&resultstable label;
69600     +   run;
69602     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
69603     +   data &coarse;
69604     +     set &coarse;
69605     +     length role $10;
69606     +     %let dsid = %sysfunc(open(&resultstable));
69607     +     %if &dsid %then %do;
69608     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
69609     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
69610     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
69612     +       %let obs = %sysfunc(fetch(&dsid));
69613     +       %do %while(&obs=0);
69614     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
69615     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
69616     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
69618     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
69619     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
69620     +            giniOrder = &order;
69621     +            role = "&role";
69622     +          end;
69624     +          %let obs = %sysfunc(fetch(&dsid));
69625     +       %end;
69626     +     %end;
69627     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
69628     +   run;
69631     +%mend EM_GENERATE_RESULTSTABLE;
69633     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
69635     +    /* instantiate the zchar macro to be used in adding bin definition */
69636     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
69637     +    %inc _temp;
69638     +    filename _temp;
69640     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
69641     +      by _variable_ binFlag _group_ LB;
69642     +    run;
69644     +    data tempExport;
69645     +      set sortedFine;
69646     +      by _variable_ binFlag _group_;
69647     +      length _split_value_ $200;
69649     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
69650     +      if binFlag = 0 then do;
69651     +        index = kindex(_variable_, "BIN_");
69652     +        if index gt 0 then do;
69653     +          _LEVEL_ = "INTERVAL";
69654     +        end;
69655     +        _Split_value_ = _split_value_;
69656     +        output;
69657     +      end;
69658     +      else do;
69659     +         * if last._group_ then do;
69660     +          index = kindex(_variable_, "BIN_");
69661     +          if index gt 0 then do;
69662     +            _LEVEL_ = "INTERVAL";
69663     +          end;
69664     +          _Split_value_ = %zchar(UB);
69665     +          output;
69666     +         * end;
69667     +      end;
69669     +      rename display_Var = _variable_;
69670     +      keep display_var _level_ _group_ _split_value_ binFlag;
69671     +    run;
69673     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
69674     +       data &EXPORTGROUPING;
69675     +         set tempexport;
69676     +       run;
69677     +    %end;
69678     +    %else %do;
69679     +       /* determine if EXPORTGROUPING already exists */
69680     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
69681     +         data &EXPORTGROUPING;
69682     +            set &EXPORTGROUPING tempexport;
69683     +         run;
69684     +       %end;
69685     +       %else %do;
69686     +         data &EXPORTGROUPING;
69687     +            set tempexport;
69688     +         run;
69689     +       %end;
69690     +    %end;
69692     +    proc datasets lib=work nolist;
69693     +      delete sortedFine tempexport;
69694     +    run;
69695     +    quit;
69697     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
69702     +%macro report;
69704     +   /* if createGrouping then create a dataset for export */
69705     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
69706     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
69707     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
69708     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
69709     +   %end;
69710     +   %else %do;
69711     +     proc datasets library=&EM_LIB nolist;
69712     +       delete &EM_NODEID._EXPORTGROUP;
69713     +     run;
69714     +     quit;
69715     +   %end;
69718     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
69719     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
69720     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
69721     +   %end;
69722     +   %else %do;
69723     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
69724     +   %end;
69726     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
69727     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
69730     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS8 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS8.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.42 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44186214005661;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
69731      
69732      *------------------------------------------------------------*;
69733      * End REPORT: BINNING;
69734      *------------------------------------------------------------*;

69735      /* Reset EM Options */
69736      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
69737      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
69738      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
69739      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
69740      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
69741      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 128 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
