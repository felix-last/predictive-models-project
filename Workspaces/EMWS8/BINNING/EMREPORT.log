MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                19. April 2016
Time:                12.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3OP_8BT "C:\\predictive-models-project\Workspaces\EMWS8\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3OP_8BT new;
MPRINT(EM_DIAGRAM):   run;
60422      %let EMEXCEPTIONSTRING=;
60423      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
60424      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
60425      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60426      %let EM_ACTION = REPORT;
60427      %let syscc = 0;
60428      %macro main;
60429      
60430        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
60431        %include temp;
60432        filename temp;
60433      
60434        %setProperties;
60435      
60436        %if %upcase(&EM_ACTION) = CREATE %then %do;
60437          filename temp catalog 'sashelp.emmdfy.binning_create.source';
60438          %include temp;
60439          filename temp;
60440      
60441          %create;
60442        %end;
60443      
60444         %else
60445         %if %upcase(&EM_ACTION) = TRAIN %then %do;
60446      
60447             filename temp catalog 'sashelp.emmdfy.binning_train.source';
60448             %include temp;
60449             filename temp;
60450             %train;
60451         %end;
60452      
60453        %else
60454        %if %upcase(&EM_ACTION) = SCORE %then %do;
60455          filename temp catalog 'sashelp.emmdfy.binning_score.source';
60456          %include temp;
60457          filename temp;
60458      
60459          %score;
60460      
60461        %end;
60462      
60463        %else
60464        %if %upcase(&EM_ACTION) = REPORT %then %do;
60465      
60466             filename temp catalog 'sashelp.emmdfy.binning_report.source';
60467             %include temp;
60468             filename temp;
60469      
60470             %report;
60471         %end;
60472      
60473         %doendm:
60474      %mend main;
60475      
60476      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
60478     +%macro SetProperties;
60480     +     /* IGN options */
60481     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
60482     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
60483     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
60485     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
60486     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
60487     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
60488     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
60489     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
60490     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
60491     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
60492     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
60493     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
60494     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
60495     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
60496     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
60497     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
60498     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
60501     +%mend SetProperties;
60502     +%macro appendfiles(fileref1, fileref2);
60503     +     data _null_;
60504     +       length c $256;
60505     +       fid1=fopen("&fileref1",'A');
60506     +       fid2=fopen("&fileref2",'I');
60507     +       cval = finfo(fid2,'lrecl');
60508     +       put cval= fid1= fid2=;
60509     +       if (fid2 > 0) then
60510     +         do while(fread(fid2)=0);
60511     +           rc = fget(fid2,c,256);
60512     +           _msg_=sysmsg();
60513     +           /* put rc= c= _msg_=; */
60514     +           rc = fput(fid1,strip(c));
60515     +           rc = fwrite(fid1);
60516     +         end;
60517     +         _msg_=sysmsg();
60518     +         put _msg_=;
60519     +       rc = fclose(fid1);
60520     +       rc = fclose(fid2);
60521     +     run;
60522     +%mend appendfiles;
60524     +%macro buildOptScoreCode;
60526     +    %em_register(key=BINCODE, type=FOLDER);
60528     +    filename x catalog 'sashelp.emutil.em_deldir.source';
60529     +    %inc x;
60530     +    filename x;
60531     +    %delDir(folder=%nrbquote(&em_user_bincode));
60533     +    data _null_; length rc $200;
60534     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
60535     +    run;
60537     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
60539     +    %let dsid = %sysfunc(open(class_nosv));
60540     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
60541     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
60543     +    %let oldname=;
60544     +    %do %while(^%sysfunc(fetch(&dsid)));
60545     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
60546     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
60548     +        %if &name ne &oldname %then %do;
60549     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
60550     +             data _null_;
60551     +                length string $200 flag endflag 8;
60552     +                retain string flag endflag;
60553     +                set class_nosv end=eof;
60554     +                where DISPLAY_VAR ="&name";
60555     +                by _variable_ _group_;
60556     +                file _F1;
60557     +                index = kindex(_variable_, "BIN_");
60558     +                if index gt 0 then do;
60559     +                   if first._variable_ then do;
60560     +                      put ' ';
60561     +                      put "&EM_CODEBAR;";
60562     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
60563     +                      put string;
60564     +                      put "&EM_CODEBAR;";
60566     +                      if origLabel ne "" then do;
60567     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
60568     +                            put string;
60569     +                            string = tranwrd(origLabel,"'","''");
60570     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
60571     +                            put string;
60572     +                      end;
60573     +                      else do;
60574     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
60575     +                             put string;
60576     +                      end;
60578     +                      put ' ';
60580     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60581     +                      put string;
60582     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60583     +                      put string;
60584     +                      put "end;";
60585     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60586     +                      put string;
60587     +                   end;
60588     +                   if first._group_ then do;
60589     +                      flag = 0;
60590     +                      endflag = 1;
60591     +                      if ^first._variable_ then do;
60592     +                         put "else";
60593     +                      end;
60594     +                      if LB ne . then do;
60595     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
60596     +                      end;
60597     +                      else do;
60598     +                         flag = 1;
60599     +                         string = "if";
60600     +                      end;
60601     +                   end;
60602     +                   if last._Group_ then do;
60603     +                      if UB ne . then do;
60604     +                        if flag ne 1 then do;
60605     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60606     +                        end;
60607     +                        else do;
60608     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60609     +                        end;
60610     +                      end;
60611     +                      else do;
60612     +                         if flag=1 then do;
60613     +                            string = strip(DISPLAY_VAR) ;
60614     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
60615     +                            endflag=0;
60616     +                            string="";
60617     +                         end;
60618     +                         else do;
60619     +                            string = strip(string)!!" then do;";
60620     +                         end;
60621     +                      end;
60622     +                      put string;
60623     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60624     +                      put string;
60625     +                      if endflag eq 1 then do;
60626     +                        put "end;";
60627     +                      end;
60628     +                   end;
60629     +                   if last._variable_ then do;
60630     +                     string = "end;";
60631     +                     put string;
60632     +                   end;
60634     +                end;
60635     +                else do;
60636     +                   _split_value_ = tranwrd(_split_value_,"'","''");
60637     +                   if first._group_ then do;
60638     +                      flag=0;
60639     +                      if ^first._variable_ then
60640     +                         put 'else';
60641     +                      else do;
60642     +                         put ' ';
60643     +                         put "&EM_CODEBAR;";
60644     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
60645     +                         put string;
60646     +                         put "&EM_CODEBAR;";
60648     +                         if origLabel ne "" then do;
60649     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
60650     +                               put string;
60651     +                               string = tranwrd(origLabel,"'","''");
60652     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
60653     +                               put string;
60654     +                         end;
60655     +                         else do;
60656     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
60657     +                               put string;
60658     +                         end;
60660     +                         put ' ';
60662     +                         if format ne '' then do;
60663     +                            if first._variable_ then do;
60664     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
60665     +                               put string;
60666     +                               string = '%dmnormip(_UFormat);';
60667     +                               put string;
60669     +                               string ="if MISSING(_UFORMAT) then do;";
60670     +                               put string;
60671     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60672     +                               put string;
60673     +                               put "end;";
60675     +                               string="else if NOT MISSING(_UFORMAT) then do;";
60676     +                               put string;
60678     +                            end;
60679     +                         end;
60680     +                         else do;
60681     +                            if type = 'N' then do;
60682     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60683     +                              put string;
60684     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60685     +                              put string;
60686     +                              put "end;";
60688     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60689     +                              put string;
60690     +                            end;
60691     +                            else if type='C' then do;
60692     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
60693     +                              put string;
60694     +                              string = '%dmnormip(_UFormat);';
60695     +                              put string;
60697     +                              string ="if MISSING(_UFORMAT) then do;";
60698     +                              put string;
60699     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60700     +                              put string;
60701     +                              put "end;";
60703     +                              string="else if NOT MISSING(_UFORMAT) then do;";
60704     +                              put string;
60705     +                              string = '%dmnormip(_UFormat);';
60706     +                              put string;
60707     +                           end;
60708     +                         end;
60709     +                      end;
60710     +                      if format ne '' OR type='C' then do;
60711     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
60712     +                      end;
60713     +                      else do;
60714     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
60715     +                      end;
60716     +                   end;
60717     +                   else do;
60718     +                      if flag ne 1 then do;
60719     +                       if format ne '' OR type='C' then do;
60720     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
60721     +                       end;
60722     +                       else do;
60723     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
60724     +                       end;
60725     +                         length = length(tempstring);
60727     +                         if length < 195 then do;
60728     +                            string = tempstring;
60729     +                         end;
60730     +                         else do;
60732     +                            string = strip(string);
60733     +                            put string;
60734     +                            string = ") then do;";
60735     +                            put string;
60737     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60738     +                            put string;
60739     +                            put "end;";
60741     +                            put 'else';
60742     +                            if format ne '' OR type='C' then do;
60743     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
60744     +                            end;
60745     +                            else do;
60746     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
60747     +                            end;
60748     +                         end;
60749     +                      end;
60750     +                   end;
60752     +                   if last._group_ then do;
60753     +                      string = strip(string);
60754     +                      put string;
60756     +                      string = ") then do;";
60757     +                      put string;
60759     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60760     +                      put string;
60761     +                      put "end;";
60762     +                   end;
60764     +                   if last._variable_ then do;
60765     +                     put "else do;";
60767     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60768     +                     put string;
60770     +                     put "end;";
60771     +                     put "end;";
60772     +                   end;
60773     +                end;
60774     +             run;
60776     +             %let oldname = &name;
60777     +        %end;
60778     +    %end;
60779     +    %let dsid = %sysfunc(close(&dsid));
60781     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
60782     +    data _null_;
60783     +       file _F1;
60784     +       put "length _UFormat $200;";
60785     +       put "drop _UFormat;";
60786     +       put "_UFormat='';";
60787     +    run;
60788     +    filename _F1;
60790     +   %em_register(key=EMSCOREVAR, type=DATA);
60791     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
60792     +   proc datasets lib=&em_lib nolist;
60793     +      delete &scorevarDs;
60794     +   run;
60795     +   quit;
60797     +   %let filrf=mydir;
60798     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
60799     +   %let did=%sysfunc(dopen(&filrf));
60801     +   %if &did %then %do;  %PUT  did= &did;
60802     +       %let memcount=%sysfunc(dnum(&did));
60803     +       %if &memcount > 0 %then %do;
60804     +           data &em_user_emscorevar;
60805     +              length Name $32 formula $70 file $200;
60806     +              keep NAME Formula file;
60807     +              formula  = '';
60808     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
60809     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
60810     +               output;
60811     +           %end;
60812     +           %do i=1 %to &memcount;
60813     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
60814     +               %let newvar = %scan(&name, 1, .);
60815     +               %if "&newvar" ne "_ALL_" %then %do;
60816     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
60817     +                   output;
60818     +               %end;
60819     +           %end;
60821     +           run;
60822     +       %end;
60823     +       %let did = %sysfunc(dclose(&did));
60824     +  %end;
60826     +   %doendu:
60827     +%mend buildOptScoreCode;
60830     +%macro buildScoreCode(flowCode, publishCode);
60833     +  filename x "&flowCode";
60835     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
60836     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
60837     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
60839     +  data temp;
60840     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
60841     +    by display_var _Split_value_;
60842     +     if upcase(_Split_value_) ne 'MISSING';
60843     +   run;
60845     +   data temp_missing;
60846     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
60847     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
60848     +     by display_var _Split_value_;
60849     +     if upcase(_Split_value_) eq 'MISSING';
60850     +     keep _variable_ display_var missgrp;
60851     +   run;
60853     +   proc sort data=temp_missing; by display_var missgrp; run;
60855     +   data temp_missing;
60856     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
60857     +     by display_var missgrp;
60858     +     if ^_a then delete;
60859     +     keep _variable_ display_var missgrp ;
60860     +   run;
60862     +   data temp;
60863     +     merge temp temp_missing;
60864     +     by display_var;
60865     +     if display_Var eq '' then delete;
60866     +    run;
60868     +    /* pull in wtev values */
60869     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
60870     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
60871     +    proc sort data=temp;  by display_var _group_; run;
60873     +   data temp;
60874     +      merge temp tempcoarse(keep=display_var _group_  role) ;
60875     +      by display_var _group_;
60876     +    run;
60878     +    data temp;
60879     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
60880     +      by display_var;
60882     +      if _group_ = . then delete;
60883     +      if _variable_ = '' then delete;
60884     +    run;
60886     +    proc sort data=temp out=class;
60887     +       by _variable_ _group_ LB;
60888     +    run;
60890     +    data _null_;
60891     +      file X;
60893     +      put "length _UFormat $200;";
60894     +      put "drop _UFormat;";
60895     +      put "_UFormat='';";
60896     +    run;
60898     +    data class_nosv;
60899     +      set class;
60900     +      if upcase(role)="INPUT";
60901     +    run;
60903     +    data _null_;
60904     +       file X MOD;
60905     +       length string $200 flag endflag 8;
60906     +       retain string flag endflag;
60907     +       set class_nosv end=eof;
60908     +       by _variable_ _group_;
60910     +       index = kindex(_variable_, "BIN_");
60911     +       if index gt 0 then do;
60913     +         if first._variable_ then do;
60914     +            put ' ';
60915     +            put "&EM_CODEBAR;";
60916     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
60917     +            put string;
60918     +            put "&EM_CODEBAR;";
60921     +            if origLabel ne "" then do;
60922     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
60923     +              put string;
60924     +              string = tranwrd(origLabel,"'","''");
60925     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
60926     +              put string;
60927     +            end;
60928     +            else do;
60929     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
60930     +             put string;
60931     +            end;
60933     +            put ' ';
60935     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60936     +            put string;
60937     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
60938     +            put string;
60939     +            put "end;";
60940     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
60941     +            put string;
60942     +          end;
60943     +           if first._group_ then do;
60944     +              flag = 0;
60945     +              endflag = 1;
60946     +              if ^first._variable_ then do;
60947     +                put "else";
60948     +              end;
60949     +              if LB ne . then do;
60950     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
60951     +              end;
60952     +              else do;
60953     +                 flag = 1;
60954     +                 string = "if";
60955     +              end;
60957     +           end;
60958     +           if last._Group_ then do;
60959     +              if UB ne . then do;
60960     +                if flag ne 1 then do;
60961     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60962     +                end;
60963     +                else do;
60964     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
60965     +                end;
60966     +              end;
60967     +              else do;
60968     +                 if flag=1 then do;
60969     +                   string = strip(DISPLAY_VAR) ;
60970     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
60971     +                   endflag = 0;
60972     +                   string="";
60973     +                 end;
60974     +                 else do;
60975     +                   string = strip(string)!!" then do;";
60976     +                 end;
60977     +              end;
60978     +              put string;
60980     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
60981     +              put string;
60982     +              if endflag eq 1 then do;
60983     +                put "end;";
60984     +              end;
60985     +           end;
60986     +           if last._variable_ then do;
60987     +             string = "end;";
60988     +             put string;
60989     +           end;
60990     +       end;
60991     +       else do;
60992     +           _split_value_ = tranwrd(_split_value_,"'","''");
60993     +           if first._group_ then do;
60994     +              flag=0;
60995     +              if ^first._variable_ then
60996     +                 put 'else';
60997     +              else do;
60998     +                 put ' ';
60999     +                 put "&EM_CODEBAR;";
61000     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
61001     +                 put string;
61002     +                 put "&EM_CODEBAR;";
61004     +                 if origLabel ne "" then do;
61005     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
61006     +                   put string;
61007     +                   string = tranwrd(origLabel,"'","''");
61008     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
61009     +                   put string;
61010     +                 end;
61011     +                 else do;
61012     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
61013     +                   put string;
61014     +                 end;
61016     +                 put ' ';
61018     +                if format ne '' then do;
61019     +                  if first._variable_ then do;
61020     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
61021     +                    put string;
61022     +                    string = '%dmnormip(_UFormat);';
61023     +                    put string;
61025     +                     string ="if MISSING(_UFORMAT) then do;";
61026     +                     put string;
61027     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61028     +                     put string;
61029     +                     put "end;";
61031     +                     string="else if NOT MISSING(_UFORMAT) then do;";
61032     +                     put string;
61034     +                  end;
61035     +                end;
61036     +                else do;
61037     +                     if type = 'N' then do;
61038     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61039     +                       put string;
61040     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61041     +                       put string;
61042     +                       put "end;";
61044     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
61045     +                       put string;
61047     +                     end;
61048     +                     else if type='C' then do;
61049     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
61050     +                        put string;
61051     +                        string = '%dmnormip(_UFormat);';
61052     +                        put string;
61054     +                        string ="if MISSING(_UFORMAT) then do;";
61055     +                        put string;
61056     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61057     +                        put string;
61058     +                        put "end;";
61060     +                        string="else if NOT MISSING(_UFORMAT) then do;";
61061     +                        put string;
61062     +                        string = '%dmnormip(_UFormat);';
61063     +                        put string;
61064     +                    end;
61065     +                end;
61066     +              end;
61067     +              if format ne '' OR type='C' then do;
61068     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
61069     +              end;
61070     +              else do;
61071     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61072     +              end;
61073     +           end;
61074     +           else do;
61075     +              if flag ne 1 then do;
61076     +                if format ne '' OR type='C' then do;
61077     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
61078     +                end;
61079     +                else do;
61080     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61081     +                end;
61082     +                length = klength(tempstring);
61084     +                if length < 195 then do;
61085     +                   string = tempstring;
61086     +                end;
61087     +                else do;
61089     +                   string = strip(string);
61090     +                   put string;
61091     +                   string = ") then do;";
61092     +                   put string;
61094     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61095     +                   put string;
61096     +                   put "end;";
61098     +                 /*  string = strip(string)||",'...';"; */
61100     +                   put 'else';
61101     +                   if format ne '' OR type='C' then do;
61102     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
61103     +                   end;
61104     +                   else do;
61105     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
61106     +                   end;
61109     +                end;
61110     +              end;
61111     +           end;
61113     +           if last._group_ then do;
61114     +              string = strip(string);
61115     +              put string;
61116     +              string = ") then do;";
61117     +              put string;
61119     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
61120     +              put string;
61121     +              put "end;";
61122     +           end;
61124     +           if last._variable_ then do;
61125     +             put "else do;";
61127     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
61128     +             put string;
61130     +             put "end;";
61131     +             put "end;";
61132     +           end;
61133     +         *end;
61134     +       end;
61135     +    run;
61137     +    /* generate PublishCode the same as flowscorecode */
61138     +    filename Y "&publishCode";
61140     +    /* if publishCode already exists, wipe it out first */
61141     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
61142     +      %let rc = %sysfunc(fdelete(Y));
61143     +    %end;
61145     +    %appendfiles(Y, X);
61147     +    filename X;
61148     +    filename Y;
61150     +    %buildOptScoreCode;
61152     +    proc datasets library=work nolist;
61153     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
61154     +    run;
61155     +    quit;
61157     +%mend buildScoreCode;
61159     +%macro buildMetaCode(DeltaCodeFile=);
61161     +   /* set variable roles based on New Role column in the Results table */
61162     +   data _null_;
61163     +      file &DeltaCodeFile;
61164     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
61165     +      %if &dsid %then %do;
61166     +        %let obs = %sysfunc(fetch(&dsid));
61167     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
61168     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
61169     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
61171     +        %do %while(&obs=0);
61172     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
61173     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
61174     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
61176     +          /* retrieve grp and woe names from varmappings dataset */
61177     +          %let choice = _VARIABLE_ = "&inputname";
61178     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
61179     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
61180     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
61181     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
61182     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
61184     +          put "if name = '&inputname' then role='REJECTED';";
61185     +          %if "&role" ne "DEFAULT" %then %do;
61186     +            put "if name = '&grpname' then role='&role';";
61187     +          %end;
61188     +          %else %do;
61189     +            put "if name = '&grpname' then role='&oldrole';";
61190     +          %end;
61191     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
61193     +          %let obs = %sysfunc(fetch(&dsid));
61194     +        %end;
61195     +      %end;
61196     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
61197     +   run;
61199     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
61200     +   data _null_;
61201     +      file &DeltaCodeFile MOD;
61203     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
61204     +      %if &sdsid %then %do;
61205     +        %let sobs = %sysfunc(fetch(&sdsid));
61206     +        %do %while(&sobs=0);
61207     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
61208     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
61209     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
61210     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
61212     +          %let checkgrp = GRP_&checkname;
61213     +          %let lenname = %length(&checkgrp);
61214     +          %if %eval(&lenname-32) > 0 %then %do;
61215     +            %let checkgrp = %substr(&checkgrp, 1, 32);
61216     +          %end;
61218     +          %let choice = _VARIABLE_ ="&checkname";
61219     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
61221     +          /* if var not found in varmappings, delete variables; */
61222     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
61223     +          %if &vdsid eq 0 %then %do;
61224     +            put 'if name="&displayvar" then delete;';
61225     +            %let dispgrp = GRP_&displayvar;
61226     +            put 'if name="&dispgrp" then delete;';
61227     +          %end;
61229     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
61230     +          %let sobs = %sysfunc(fetch(&sdsid));
61231     +        %end;
61232     +      %end;
61233     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
61234     +   run;
61236     +%mend buildMetaCode;
61238     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
61240     +   proc sort data=&coarse out=sortedcoarse nodupkey;
61241     +     by display_var;
61242     +   run;
61243     +   proc sort data=&varmappings nodupkey;
61244     +     by _variable_;
61245     +   run;
61246     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
61247     +     proc sort data=&resultstable; by display_var; run;
61248     +   %end;
61250     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
61251     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
61252     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
61253     +        &resultstable (keep = display_var _new_role_ )
61254     +     %end;
61255     +     ;
61256     +     by display_var;
61257     +     length _role_ _new_role_ $10;
61258     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
61259     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
61260     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, calcrole_vlabel_vlabel , NOQUOTE))"
61261     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
61262     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
61263     +           ;
61265     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
61266     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
61267     +                _role_ = "Rejected";
61268     +             else _role_ = "Input";
61269     +           %end;
61270     +           %else %do;
61271     +             _role_ = "Input";
61272     +           %end;
61273     +           if _new_role_ eq "" then _new_role_="Default";
61274     +      if ^_a then do;
61275     +        _gini_ = 0;
61276     +        _role_ = 'Rejected';
61277     +        if _new_role_ eq "" then _new_role_="Default";
61278     +      end;
61279     +   run;
61280     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
61281     +     by NAME;
61282     +   run;
61283     +   data outlabel;
61284     +     set outlabel;
61285     +     if _label_ = '' then _label_ = _variable_;
61286     +   run;
61287     +   data &resultstable;
61288     +     merge &resultstable(in=_a_) outlabel;
61289     +     by display_Var;
61290     +     if _a_ then output;
61291     +   run;
61292     +   proc datasets library=work nolist;
61293     +     delete sortedcoarse outlabel;
61294     +   run;
61295     +   quit;
61296     +   proc sort data=&resultstable nodupkey;
61297     +      by DESCENDING
61298     +        _gini_ display_Var;
61299     +   run;
61300     +   data &resultstable;
61301     +     set &resultstable;
61303     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
61304     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
61305     +     giniOrder = _N_;
61306     +     _gini_ = round(_GINI_, .001);
61307     +     drop _variable_;
61308     +   run;
61310     +   proc print data=&resultstable label;
61311     +   run;
61313     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
61314     +   data &coarse;
61315     +     set &coarse;
61316     +     length role $10;
61317     +     %let dsid = %sysfunc(open(&resultstable));
61318     +     %if &dsid %then %do;
61319     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
61320     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
61321     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
61323     +       %let obs = %sysfunc(fetch(&dsid));
61324     +       %do %while(&obs=0);
61325     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
61326     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
61327     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
61329     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
61330     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
61331     +            giniOrder = &order;
61332     +            role = "&role";
61333     +          end;
61335     +          %let obs = %sysfunc(fetch(&dsid));
61336     +       %end;
61337     +     %end;
61338     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
61339     +   run;
61342     +%mend EM_GENERATE_RESULTSTABLE;
61344     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
61346     +    /* instantiate the zchar macro to be used in adding bin definition */
61347     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
61348     +    %inc _temp;
61349     +    filename _temp;
61351     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
61352     +      by _variable_ binFlag _group_ LB;
61353     +    run;
61355     +    data tempExport;
61356     +      set sortedFine;
61357     +      by _variable_ binFlag _group_;
61358     +      length _split_value_ $200;
61360     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
61361     +      if binFlag = 0 then do;
61362     +        index = kindex(_variable_, "BIN_");
61363     +        if index gt 0 then do;
61364     +          _LEVEL_ = "INTERVAL";
61365     +        end;
61366     +        _Split_value_ = _split_value_;
61367     +        output;
61368     +      end;
61369     +      else do;
61370     +         * if last._group_ then do;
61371     +          index = kindex(_variable_, "BIN_");
61372     +          if index gt 0 then do;
61373     +            _LEVEL_ = "INTERVAL";
61374     +          end;
61375     +          _Split_value_ = %zchar(UB);
61376     +          output;
61377     +         * end;
61378     +      end;
61380     +      rename display_Var = _variable_;
61381     +      keep display_var _level_ _group_ _split_value_ binFlag;
61382     +    run;
61384     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
61385     +       data &EXPORTGROUPING;
61386     +         set tempexport;
61387     +       run;
61388     +    %end;
61389     +    %else %do;
61390     +       /* determine if EXPORTGROUPING already exists */
61391     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
61392     +         data &EXPORTGROUPING;
61393     +            set &EXPORTGROUPING tempexport;
61394     +         run;
61395     +       %end;
61396     +       %else %do;
61397     +         data &EXPORTGROUPING;
61398     +            set tempexport;
61399     +         run;
61400     +       %end;
61401     +    %end;
61403     +    proc datasets lib=work nolist;
61404     +      delete sortedFine tempexport;
61405     +    run;
61406     +    quit;
61408     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
61413     +%macro report;
61415     +   /* if createGrouping then create a dataset for export */
61416     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
61417     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
61418     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
61419     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
61420     +   %end;
61421     +   %else %do;
61422     +     proc datasets library=&EM_LIB nolist;
61423     +       delete &EM_NODEID._EXPORTGROUP;
61424     +     run;
61425     +     quit;
61426     +   %end;
61429     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
61430     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
61431     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
61432     +   %end;
61433     +   %else %do;
61434     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
61435     +   %end;
61437     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
61438     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
61441     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS8 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS8.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.66939469271776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61442      
61443      *------------------------------------------------------------*;
61444      * End REPORT: BINNING;
61445      *------------------------------------------------------------*;

61446      /* Reset EM Options */
61447      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
61448      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
61449      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
61450      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
61451      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
61452      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 128 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
