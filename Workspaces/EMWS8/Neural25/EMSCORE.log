MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20.12 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                16. April 2016
Time:                20.12 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1S1I3Q3 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural25\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1S1I3Q3 new;
MPRINT(EM_DIAGRAM):   run;
318497     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
318498     set EMWS8.Neural25_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural25_OUTKEY;
318499     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
318500     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set EMWS8.NEURAL25_OUTKEY.
NOTE: The data set WORK.OUTKEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

318501     filename emflow
318501   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural25\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural25\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural25: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
318502     *------------------------------------------------------------*;
318503     * Neural25: Scoring DATA data;
318504     *------------------------------------------------------------*;
318505     data EMWS8.Neural25_TRAIN
318506     / view=EMWS8.Neural25_TRAIN
318507     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural25_TRAIN / view=EMWS8.Neural25_TRAIN ;
318508     set EMWS8.Varsel_TRAIN
318509     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
318510     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural25\EMFLOWSCORE.sas.
318511    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
318512    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
318513    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
318514    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
318515    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
318516    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
318517    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
318518    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
318519    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
318520    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
318521    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
318522    +LENGTH _WARN_ $4
318523    +      F_DepVar  $ 12
318524    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
318525    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
318526    +
318527    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
318528    +
318529    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
318530    +
318531    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
318532    +
318533    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
318534    +
318535    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
318536    +
318537    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
318538    +
318539    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
318540    +
318541    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
318542    +
318543    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
318544    +
318545    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
318546    +
318547    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
318548    +
318549    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
318550    +
318551    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
318552    +
318553    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
318554    +
318555    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
318556    +
318557    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
318558    +
318559    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
318560    +
318561    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
318562    +
318563    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
318564    +
318565    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
318566    +
318567    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
318568    +
318569    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
318570    +
318571    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
318572    +
318573    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
318574    +
318575    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
318576    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
318577    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
318578    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
318579    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
318580    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
318581    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
318582    +end;
MPRINT(EM_DIAGRAM):   end;
318583    +else do;
MPRINT(EM_DIAGRAM):   else do;
318584    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
318585    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
318586    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
318587    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
318588    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
318589    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
318590    +   end;
MPRINT(EM_DIAGRAM):   end;
318591    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
318592    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
318593    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
318594    +   end;
MPRINT(EM_DIAGRAM):   end;
318595    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
318596    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
318597    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
318598    +   end;
MPRINT(EM_DIAGRAM):   end;
318599    +   else do;
MPRINT(EM_DIAGRAM):   else do;
318600    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
318601    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
318602    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
318603    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
318604    +   end;
MPRINT(EM_DIAGRAM):   end;
318605    +end;
MPRINT(EM_DIAGRAM):   end;
318606    +
318607    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318608    +*** Checking missing input Interval
318609    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
318610    +
318611    +IF NMISS(
318612    +   AcceptedCmpTotal ,
318613    +   Frq ,
318614    +   Income ,
318615    +   Mnt ,
318616    +   MntFruits ,
318617    +   MntGoldProds ,
318618    +   MntMeatProducts ,
318619    +   MntSweetProducts ,
318620    +   NumCatalogPurchases ,
318621    +   NumWebPurchases ,
318622    +   RFMstat ,
318623    +   RMntFrq ,
318624    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
318625    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
318626    +
318627    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
318628    +END;
MPRINT(EM_DIAGRAM):   END;
318629    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318630    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
318631    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318632    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
318633    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
318634    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
318635    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
318636    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
318637    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
318638    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
318639    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
318640    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
318641    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
318642    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
318643    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
318644    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
318645    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
318646    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
318647    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
318648    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
318649    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
318650    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
318651    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
318652    +END;
MPRINT(EM_DIAGRAM):   END;
318653    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
318654    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
318655    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
318656    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
318657    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
318658    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
318659    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
318660    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
318661    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
318662    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
318663    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
318664    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
318665    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
318666    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
318667    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
318668    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
318669    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
318670    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
318671    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
318672    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
318673    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
318674    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
318675    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
318676    +   ELSE S_NumCatalogPurchases
318677    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
318678    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
318679    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
318680    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
318681    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
318682    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
318683    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
318684    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
318685    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
318686    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
318687    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
318688    +END;
MPRINT(EM_DIAGRAM):   END;
318689    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318690    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
318691    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318692    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318693    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
318694    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318695    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
318696    +   H11  =    -0.23012961341552 * S_AcceptedCmpTotal  +     0.46196798170863 *
318697    +        S_Frq  +     0.10792957007496 * S_Income  +     0.01598495816724 *
318698    +        S_Mnt  +     0.04110199082094 * S_MntFruits  +    -0.03861520815517 *
318699    +        S_MntGoldProds  +    -0.21282606264093 * S_MntMeatProducts
318700    +          +     0.01715600461602 * S_MntSweetProducts
318701    +          +    -0.23329547812839 * S_NumCatalogPurchases
318702    +          +    -0.11507537772092 * S_NumWebPurchases
318703    +          +    -0.03410149182919 * S_RFMstat  +     0.14966504694497 *
318704    +        S_RMntFrq  +     0.28566269847001 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.23012961341552 * S_AcceptedCmpTotal + 0.46196798170863 * S_Frq 
+ 0.10792957007496 * S_Income + 0.01598495816724 * S_Mnt + 0.04110199082094 * S_MntFruits + 
-0.03861520815517 * S_MntGoldProds + -0.21282606264093 * S_MntMeatProducts + 0.01715600461602 
* S_MntSweetProducts + -0.23329547812839 * S_NumCatalogPurchases + -0.11507537772092 * 
S_NumWebPurchases + -0.03410149182919 * S_RFMstat + 0.14966504694497 * S_RMntFrq + 
0.28566269847001 * S_Recency ;
318705    +   H12  =     0.05540254918167 * S_AcceptedCmpTotal  +     1.29235531722682 *
318706    +        S_Frq  +     0.06366828093255 * S_Income  +    -0.26947825948002 *
318707    +        S_Mnt  +     0.21714508305015 * S_MntFruits  +     0.26812345284438 *
318708    +        S_MntGoldProds  +    -4.04479521582802 * S_MntMeatProducts
318709    +          +     0.04792709763034 * S_MntSweetProducts
318710    +          +    -1.08549455020763 * S_NumCatalogPurchases
318711    +          +    -0.48337305556946 * S_NumWebPurchases
318712    +          +    -0.22222278831599 * S_RFMstat  +    -0.23407358569927 *
318713    +        S_RMntFrq  +    -0.01186280761112 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.05540254918167 * S_AcceptedCmpTotal + 1.29235531722682 * S_Frq + 
0.06366828093255 * S_Income + -0.26947825948002 * S_Mnt + 0.21714508305015 * S_MntFruits + 
0.26812345284438 * S_MntGoldProds + -4.04479521582802 * S_MntMeatProducts + 0.04792709763034 * 
S_MntSweetProducts + -1.08549455020763 * S_NumCatalogPurchases + -0.48337305556946 * 
S_NumWebPurchases + -0.22222278831599 * S_RFMstat + -0.23407358569927 * S_RMntFrq + 
-0.01186280761112 * S_Recency ;
318714    +   H11  = H11  +    -0.14627707216264 * G_Marital_Status0
318715    +          +    -0.05689581037738 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14627707216264 * G_Marital_Status0 + -0.05689581037738 * 
G_Marital_Status1 ;
318716    +   H12  = H12  +     0.20389328110579 * G_Marital_Status0
318717    +          +     0.12863423712687 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.20389328110579 * G_Marital_Status0 + 0.12863423712687 * 
G_Marital_Status1 ;
318718    +   H11  =     0.26937694072834 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.26937694072834 + H11 ;
318719    +   H12  =    -3.07173299704836 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -3.07173299704836 + H12 ;
318720    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
318721    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
318722    +END;
MPRINT(EM_DIAGRAM):   END;
318723    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
318724    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
318725    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
318726    +END;
MPRINT(EM_DIAGRAM):   END;
318727    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318728    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
318729    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318730    +
318731    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
318732    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
318733    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
318734    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
318735    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
318736    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
318737    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
318738    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
318739    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
318740    +end;
MPRINT(EM_DIAGRAM):   end;
318741    +else do;
MPRINT(EM_DIAGRAM):   else do;
318742    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
318743    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
318744    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
318745    +   end;
MPRINT(EM_DIAGRAM):   end;
318746    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
318747    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
318748    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
318749    +   end;
MPRINT(EM_DIAGRAM):   end;
318750    +   else do;
MPRINT(EM_DIAGRAM):   else do;
318751    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
318752    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
318753    +   end;
MPRINT(EM_DIAGRAM):   end;
318754    +end;
MPRINT(EM_DIAGRAM):   end;
318755    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
318756    +   P_DepVar1  =    -8.61120981649634 * H11  +    -5.72570140806215 * H12 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.61120981649634 * H11 + -5.72570140806215 * H12 ;
318757    +   P_DepVar1  =    -4.82159913495753 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -4.82159913495753 + P_DepVar1 ;
318758    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
318759    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
318760    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
318761    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
318762    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
318763    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
318764    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
318765    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
318766    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
318767    +END;
MPRINT(EM_DIAGRAM):   END;
318768    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
318769    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
318770    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
318771    +END;
MPRINT(EM_DIAGRAM):   END;
318772    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
318773    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
318774    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
318775    +END;
MPRINT(EM_DIAGRAM):   END;
318776    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
318777    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
318778    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
318779    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
318780    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
318781    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
318782    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
318783    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318784    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
318785    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318786    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
318787    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
318788    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
318789    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
318790    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
318791    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
318792    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
318793    +END;
MPRINT(EM_DIAGRAM):   END;
318794    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
318795    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
318796    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
318797    +drop
318798    +H11
318799    +H12
318800    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 ;
318801    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
318802     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL25_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
318803     quit;
318804     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
318805     filename emflow
318805   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural25\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural25\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural25: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
318806     *------------------------------------------------------------*;
318807     * Neural25: Scoring VALIDATE data;
318808     *------------------------------------------------------------*;
318809     data EMWS8.Neural25_VALIDATE
318810     / view=EMWS8.Neural25_VALIDATE
318811     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural25_VALIDATE / view=EMWS8.Neural25_VALIDATE ;
318812     set EMWS8.Varsel_VALIDATE
318813     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
318814     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural25\EMFLOWSCORE.sas.
318815    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
318816    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
318817    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
318818    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
318819    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
318820    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
318821    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
318822    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
318823    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
318824    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
318825    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
318826    +LENGTH _WARN_ $4
318827    +      F_DepVar  $ 12
318828    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
318829    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
318830    +
318831    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
318832    +
318833    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
318834    +
318835    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
318836    +
318837    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
318838    +
318839    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
318840    +
318841    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
318842    +
318843    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
318844    +
318845    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
318846    +
318847    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
318848    +
318849    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
318850    +
318851    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
318852    +
318853    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
318854    +
318855    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
318856    +
318857    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
318858    +
318859    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
318860    +
318861    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
318862    +
318863    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
318864    +
318865    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
318866    +
318867    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
318868    +
318869    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
318870    +
318871    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
318872    +
318873    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
318874    +
318875    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
318876    +
318877    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
318878    +
318879    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
318880    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
318881    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
318882    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
318883    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
318884    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
318885    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
318886    +end;
MPRINT(EM_DIAGRAM):   end;
318887    +else do;
MPRINT(EM_DIAGRAM):   else do;
318888    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
318889    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
318890    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
318891    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
318892    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
318893    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
318894    +   end;
MPRINT(EM_DIAGRAM):   end;
318895    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
318896    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
318897    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
318898    +   end;
MPRINT(EM_DIAGRAM):   end;
318899    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
318900    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
318901    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
318902    +   end;
MPRINT(EM_DIAGRAM):   end;
318903    +   else do;
MPRINT(EM_DIAGRAM):   else do;
318904    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
318905    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
318906    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
318907    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
318908    +   end;
MPRINT(EM_DIAGRAM):   end;
318909    +end;
MPRINT(EM_DIAGRAM):   end;
318910    +
318911    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318912    +*** Checking missing input Interval
318913    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
318914    +
318915    +IF NMISS(
318916    +   AcceptedCmpTotal ,
318917    +   Frq ,
318918    +   Income ,
318919    +   Mnt ,
318920    +   MntFruits ,
318921    +   MntGoldProds ,
318922    +   MntMeatProducts ,
318923    +   MntSweetProducts ,
318924    +   NumCatalogPurchases ,
318925    +   NumWebPurchases ,
318926    +   RFMstat ,
318927    +   RMntFrq ,
318928    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
318929    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
318930    +
318931    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
318932    +END;
MPRINT(EM_DIAGRAM):   END;
318933    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318934    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
318935    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318936    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
318937    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
318938    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
318939    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
318940    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
318941    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
318942    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
318943    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
318944    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
318945    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
318946    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
318947    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
318948    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
318949    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
318950    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
318951    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
318952    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
318953    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
318954    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
318955    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
318956    +END;
MPRINT(EM_DIAGRAM):   END;
318957    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
318958    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
318959    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
318960    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
318961    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
318962    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
318963    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
318964    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
318965    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
318966    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
318967    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
318968    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
318969    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
318970    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
318971    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
318972    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
318973    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
318974    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
318975    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
318976    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
318977    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
318978    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
318979    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
318980    +   ELSE S_NumCatalogPurchases
318981    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
318982    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
318983    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
318984    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
318985    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
318986    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
318987    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
318988    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
318989    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
318990    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
318991    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
318992    +END;
MPRINT(EM_DIAGRAM):   END;
318993    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318994    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
318995    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318996    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318997    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
318998    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
318999    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
319000    +   H11  =    -0.23012961341552 * S_AcceptedCmpTotal  +     0.46196798170863 *
319001    +        S_Frq  +     0.10792957007496 * S_Income  +     0.01598495816724 *
319002    +        S_Mnt  +     0.04110199082094 * S_MntFruits  +    -0.03861520815517 *
319003    +        S_MntGoldProds  +    -0.21282606264093 * S_MntMeatProducts
319004    +          +     0.01715600461602 * S_MntSweetProducts
319005    +          +    -0.23329547812839 * S_NumCatalogPurchases
319006    +          +    -0.11507537772092 * S_NumWebPurchases
319007    +          +    -0.03410149182919 * S_RFMstat  +     0.14966504694497 *
319008    +        S_RMntFrq  +     0.28566269847001 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.23012961341552 * S_AcceptedCmpTotal + 0.46196798170863 * S_Frq 
+ 0.10792957007496 * S_Income + 0.01598495816724 * S_Mnt + 0.04110199082094 * S_MntFruits + 
-0.03861520815517 * S_MntGoldProds + -0.21282606264093 * S_MntMeatProducts + 0.01715600461602 
* S_MntSweetProducts + -0.23329547812839 * S_NumCatalogPurchases + -0.11507537772092 * 
S_NumWebPurchases + -0.03410149182919 * S_RFMstat + 0.14966504694497 * S_RMntFrq + 
0.28566269847001 * S_Recency ;
319009    +   H12  =     0.05540254918167 * S_AcceptedCmpTotal  +     1.29235531722682 *
319010    +        S_Frq  +     0.06366828093255 * S_Income  +    -0.26947825948002 *
319011    +        S_Mnt  +     0.21714508305015 * S_MntFruits  +     0.26812345284438 *
319012    +        S_MntGoldProds  +    -4.04479521582802 * S_MntMeatProducts
319013    +          +     0.04792709763034 * S_MntSweetProducts
319014    +          +    -1.08549455020763 * S_NumCatalogPurchases
319015    +          +    -0.48337305556946 * S_NumWebPurchases
319016    +          +    -0.22222278831599 * S_RFMstat  +    -0.23407358569927 *
319017    +        S_RMntFrq  +    -0.01186280761112 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.05540254918167 * S_AcceptedCmpTotal + 1.29235531722682 * S_Frq + 
0.06366828093255 * S_Income + -0.26947825948002 * S_Mnt + 0.21714508305015 * S_MntFruits + 
0.26812345284438 * S_MntGoldProds + -4.04479521582802 * S_MntMeatProducts + 0.04792709763034 * 
S_MntSweetProducts + -1.08549455020763 * S_NumCatalogPurchases + -0.48337305556946 * 
S_NumWebPurchases + -0.22222278831599 * S_RFMstat + -0.23407358569927 * S_RMntFrq + 
-0.01186280761112 * S_Recency ;
319018    +   H11  = H11  +    -0.14627707216264 * G_Marital_Status0
319019    +          +    -0.05689581037738 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14627707216264 * G_Marital_Status0 + -0.05689581037738 * 
G_Marital_Status1 ;
319020    +   H12  = H12  +     0.20389328110579 * G_Marital_Status0
319021    +          +     0.12863423712687 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.20389328110579 * G_Marital_Status0 + 0.12863423712687 * 
G_Marital_Status1 ;
319022    +   H11  =     0.26937694072834 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.26937694072834 + H11 ;
319023    +   H12  =    -3.07173299704836 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -3.07173299704836 + H12 ;
319024    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
319025    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
319026    +END;
MPRINT(EM_DIAGRAM):   END;
319027    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
319028    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
319029    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
319030    +END;
MPRINT(EM_DIAGRAM):   END;
319031    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
319032    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
319033    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
319034    +
319035    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
319036    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
319037    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
319038    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
319039    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
319040    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
319041    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
319042    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
319043    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
319044    +end;
MPRINT(EM_DIAGRAM):   end;
319045    +else do;
MPRINT(EM_DIAGRAM):   else do;
319046    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
319047    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
319048    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
319049    +   end;
MPRINT(EM_DIAGRAM):   end;
319050    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
319051    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
319052    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
319053    +   end;
MPRINT(EM_DIAGRAM):   end;
319054    +   else do;
MPRINT(EM_DIAGRAM):   else do;
319055    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
319056    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
319057    +   end;
MPRINT(EM_DIAGRAM):   end;
319058    +end;
MPRINT(EM_DIAGRAM):   end;
319059    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
319060    +   P_DepVar1  =    -8.61120981649634 * H11  +    -5.72570140806215 * H12 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.61120981649634 * H11 + -5.72570140806215 * H12 ;
319061    +   P_DepVar1  =    -4.82159913495753 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -4.82159913495753 + P_DepVar1 ;
319062    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
319063    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
319064    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
319065    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
319066    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
319067    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
319068    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
319069    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
319070    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
319071    +END;
MPRINT(EM_DIAGRAM):   END;
319072    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
319073    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
319074    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
319075    +END;
MPRINT(EM_DIAGRAM):   END;
319076    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
319077    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
319078    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
319079    +END;
MPRINT(EM_DIAGRAM):   END;
319080    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
319081    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
319082    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
319083    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
319084    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
319085    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
319086    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
319087    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
319088    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
319089    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
319090    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
319091    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
319092    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
319093    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
319094    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
319095    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
319096    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
319097    +END;
MPRINT(EM_DIAGRAM):   END;
319098    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
319099    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
319100    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
319101    +drop
319102    +H11
319103    +H12
319104    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 ;
319105    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
319106     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL25_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
319107     quit;
319108     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
319109     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
319110     * Neural25: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural25: Computing metadata for TRAIN data;
319111     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL25_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural25\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural25_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural25_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural25_TRAIN out=WORK.M2BMPJEJ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2BMPJEJ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2BMPJEJ(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2BMPJEJ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2BMPJEJ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1LOXD4F NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LOXD4F;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1LOXD4F;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3N10NUL(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1LOXD4F;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LOXD4F;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1LOXD4F;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LOXD4F;
MPRINT(EMADVISECOLUMNS):   set WORK.M1LOXD4F;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural25_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural25";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural25";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural25";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural25: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
319423     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
319424     set EMWS8.Neural25_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural25_EMINFO;
319425     where DATA='Neural25' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural25' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
319426     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL25_EMINFO.
      WHERE (DATA='Neural25') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

319427     data EMWS8.Neural25_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural25_EMINFO;
319428     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
319429     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
319430     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL25_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
319434     run;
319435     data EMWS8.Neural25_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural25_EMINFO;
319436     set EMWS8.Neural25_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural25_EMINFO WORK.MODELTEMP_INFO;
319437     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL25_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL25_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

319438     proc sort data = EMWS8.Neural25_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural25_EMINFO NOTHREADS;
319439     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
319440     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL25_EMINFO.
NOTE: The data set EMWS8.NEURAL25_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

319441     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
319442     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
319443     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

319444     proc sort data = EMWS8.Neural25_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural25_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
319445     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
319446     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL25_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

319447     data EMWS8.Neural25_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural25_EMINFO;
319448     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
319449     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
319450     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL25_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

319451     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
319452     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
319453     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
319454     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL25_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL25_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
