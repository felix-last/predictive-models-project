MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                17.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2YHSIT3 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural14\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2YHSIT3 new;
MPRINT(EM_DIAGRAM):   run;
728383     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
728384     set EMWS8.Neural14_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural14_OUTKEY;
728385     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
728386     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS8.NEURAL14_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

728387     filename emflow
728387   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural14\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural14\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural14: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
728388     *------------------------------------------------------------*;
728389     * Neural14: Scoring DATA data;
728390     *------------------------------------------------------------*;
728391     data EMWS8.Neural14_TRAIN
728392     / view=EMWS8.Neural14_TRAIN
728393     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural14_TRAIN / view=EMWS8.Neural14_TRAIN ;
728394     set EMWS8.PRINCOMP_TRAIN
728395     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
728396     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural14\EMFLOWSCORE.sas.
728397    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
728398    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
728399    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
728400    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
728401    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
728402    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
728403    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
728404    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
728405    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
728406    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
728407    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
728408    +LENGTH _WARN_ $4
728409    +      F_DepVar  $ 12
728410    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
728411    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
728412    +
728413    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
728414    +
728415    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
728416    +
728417    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
728418    +
728419    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
728420    +
728421    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
728422    +
728423    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
728424    +
728425    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
728426    +
728427    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
728428    +
728429    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
728430    +
728431    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
728432    +
728433    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
728434    +
728435    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
728436    +
728437    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
728438    +
728439    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
728440    +
728441    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
728442    +
728443    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
728444    +
728445    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
728446    +
728447    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
728448    +
728449    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
728450    +
728451    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
728452    +
728453    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
728454    +
728455    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
728456    +
728457    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
728458    +
728459    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
728460    +
728461    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
728462    +
728463    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
728464    +
728465    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
728466    +
728467    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
728468    +
728469    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728470    +*** Checking missing input Interval
728471    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
728472    +
728473    +IF NMISS(
728474    +   PC_1 ,
728475    +   PC_10 ,
728476    +   PC_11 ,
728477    +   PC_12 ,
728478    +   PC_13 ,
728479    +   PC_14 ,
728480    +   PC_15 ,
728481    +   PC_16 ,
728482    +   PC_17 ,
728483    +   PC_2 ,
728484    +   PC_3 ,
728485    +   PC_4 ,
728486    +   PC_5 ,
728487    +   PC_6 ,
728488    +   PC_7 ,
728489    +   PC_8 ,
728490    +   PC_9 ,
728491    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
728492    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
728493    +
728494    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
728495    +END;
MPRINT(EM_DIAGRAM):   END;
728496    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728497    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
728498    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728499    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
728500    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
728501    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
728502    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
728503    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
728504    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
728505    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
728506    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
728507    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
728508    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
728509    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
728510    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
728511    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
728512    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
728513    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
728514    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
728515    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
728516    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
728517    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
728518    +END;
MPRINT(EM_DIAGRAM):   END;
728519    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
728520    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
728521    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
728522    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
728523    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
728524    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
728525    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
728526    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
728527    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
728528    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
728529    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
728530    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
728531    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
728532    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
728533    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
728534    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
728535    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
728536    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
728537    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
728538    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
728539    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
728540    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
728541    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
728542    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
728543    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
728544    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
728545    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
728546    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
728547    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
728548    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
728549    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
728550    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
728551    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
728552    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
728553    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
728554    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
728555    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
728556    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
728557    +END;
MPRINT(EM_DIAGRAM):   END;
728558    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728559    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
728560    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728561    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
728562    +   H11  =     0.65368855138007 * S_PC_1  +    -0.43858642808571 * S_PC_10
728563    +          +     0.44774257597401 * S_PC_11  +     0.56119426236744 * S_PC_12
728564    +          +    -1.34625423578418 * S_PC_13  +      0.4490046335198 * S_PC_14
728565    +          +    -0.57321494670986 * S_PC_15  +     0.28275827920588 * S_PC_16
728566    +          +    -0.10465984705187 * S_PC_17  +     0.00124260485648 * S_PC_2
728567    +          +    -0.36103408936447 * S_PC_3  +      0.0188794550105 * S_PC_4
728568    +          +    -0.31176267972644 * S_PC_5  +    -0.62130750777774 * S_PC_6
728569    +          +     0.01824618528563 * S_PC_7  +     0.27990971778731 * S_PC_8
728570    +          +     0.25285684344446 * S_PC_9  +     0.72536510891281 *
728571    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.65368855138007 * S_PC_1 + -0.43858642808571 * S_PC_10 + 
0.44774257597401 * S_PC_11 + 0.56119426236744 * S_PC_12 + -1.34625423578418 * S_PC_13 + 
0.4490046335198 * S_PC_14 + -0.57321494670986 * S_PC_15 + 0.28275827920588 * S_PC_16 + 
-0.10465984705187 * S_PC_17 + 0.00124260485648 * S_PC_2 + -0.36103408936447 * S_PC_3 + 
0.0188794550105 * S_PC_4 + -0.31176267972644 * S_PC_5 + -0.62130750777774 * S_PC_6 + 
0.01824618528563 * S_PC_7 + 0.27990971778731 * S_PC_8 + 0.25285684344446 * S_PC_9 + 
0.72536510891281 * S_Year_Birth ;
728572    +   H12  =     0.64877140978178 * S_PC_1  +    -0.23504836576679 * S_PC_10
728573    +          +    -0.13900995660374 * S_PC_11  +    -0.25644128958673 * S_PC_12
728574    +          +    -0.15892471251011 * S_PC_13  +    -0.02058583158074 * S_PC_14
728575    +          +      0.0190008534305 * S_PC_15  +         0.0411166186 * S_PC_16
728576    +          +     0.11535891526057 * S_PC_17  +     -0.2275840979411 * S_PC_2
728577    +          +     0.24657353117273 * S_PC_3  +     -0.1402758814142 * S_PC_4
728578    +          +    -0.01079222352767 * S_PC_5  +    -0.01020091925976 * S_PC_6
728579    +          +    -0.01153586471853 * S_PC_7  +    -0.10556442094722 * S_PC_8
728580    +          +     0.21806440355982 * S_PC_9  +    -0.06957405892099 *
728581    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.64877140978178 * S_PC_1 + -0.23504836576679 * S_PC_10 + 
-0.13900995660374 * S_PC_11 + -0.25644128958673 * S_PC_12 + -0.15892471251011 * S_PC_13 + 
-0.02058583158074 * S_PC_14 + 0.0190008534305 * S_PC_15 + 0.0411166186 * S_PC_16 + 
0.11535891526057 * S_PC_17 + -0.2275840979411 * S_PC_2 + 0.24657353117273 * S_PC_3 + 
-0.1402758814142 * S_PC_4 + -0.01079222352767 * S_PC_5 + -0.01020091925976 * S_PC_6 + 
-0.01153586471853 * S_PC_7 + -0.10556442094722 * S_PC_8 + 0.21806440355982 * S_PC_9 + 
-0.06957405892099 * S_Year_Birth ;
728582    +   H13  =    -0.78080294183158 * S_PC_1  +    -0.15293405793931 * S_PC_10
728583    +          +     0.20496805235629 * S_PC_11  +     0.21305808748543 * S_PC_12
728584    +          +    -0.21539525830977 * S_PC_13  +     0.36295087844437 * S_PC_14
728585    +          +     0.00204662406445 * S_PC_15  +    -0.03331017668692 * S_PC_16
728586    +          +    -0.30636245037495 * S_PC_17  +    -0.67006286184773 * S_PC_2
728587    +          +    -0.45540841394297 * S_PC_3  +     0.60411563445926 * S_PC_4
728588    +          +     -0.1886380547418 * S_PC_5  +      0.9282932671333 * S_PC_6
728589    +          +     0.13390016494386 * S_PC_7  +     0.48785671386504 * S_PC_8
728590    +          +     0.07675156489007 * S_PC_9  +    -0.35190414343645 *
728591    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.78080294183158 * S_PC_1 + -0.15293405793931 * S_PC_10 + 
0.20496805235629 * S_PC_11 + 0.21305808748543 * S_PC_12 + -0.21539525830977 * S_PC_13 + 
0.36295087844437 * S_PC_14 + 0.00204662406445 * S_PC_15 + -0.03331017668692 * S_PC_16 + 
-0.30636245037495 * S_PC_17 + -0.67006286184773 * S_PC_2 + -0.45540841394297 * S_PC_3 + 
0.60411563445926 * S_PC_4 + -0.1886380547418 * S_PC_5 + 0.9282932671333 * S_PC_6 + 
0.13390016494386 * S_PC_7 + 0.48785671386504 * S_PC_8 + 0.07675156489007 * S_PC_9 + 
-0.35190414343645 * S_Year_Birth ;
728592    +   H11  =    -0.68382506756513 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.68382506756513 + H11 ;
728593    +   H12  =    -1.19130754752045 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.19130754752045 + H12 ;
728594    +   H13  =    -1.06127071029416 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.06127071029416 + H13 ;
728595    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
728596    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
728597    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
728598    +END;
MPRINT(EM_DIAGRAM):   END;
728599    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
728600    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
728601    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
728602    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
728603    +END;
MPRINT(EM_DIAGRAM):   END;
728604    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728605    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
728606    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728607    +
728608    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
728609    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
728610    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
728611    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
728612    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
728613    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
728614    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
728615    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
728616    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
728617    +end;
MPRINT(EM_DIAGRAM):   end;
728618    +else do;
MPRINT(EM_DIAGRAM):   else do;
728619    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
728620    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
728621    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
728622    +   end;
MPRINT(EM_DIAGRAM):   end;
728623    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
728624    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
728625    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
728626    +   end;
MPRINT(EM_DIAGRAM):   end;
728627    +   else do;
MPRINT(EM_DIAGRAM):   else do;
728628    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
728629    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
728630    +   end;
MPRINT(EM_DIAGRAM):   end;
728631    +end;
MPRINT(EM_DIAGRAM):   end;
728632    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
728633    +   P_DepVar1  =     1.89593445155806 * H11  +     3.94511888903906 * H12
728634    +          +     2.29198413143453 * H13 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.89593445155806 * H11 + 3.94511888903906 * H12 + 
2.29198413143453 * H13 ;
728635    +   P_DepVar1  =     0.86637040219244 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.86637040219244 + P_DepVar1 ;
728636    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
728637    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
728638    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
728639    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
728640    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
728641    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
728642    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
728643    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
728644    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
728645    +END;
MPRINT(EM_DIAGRAM):   END;
728646    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
728647    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
728648    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
728649    +END;
MPRINT(EM_DIAGRAM):   END;
728650    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
728651    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
728652    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
728653    +END;
MPRINT(EM_DIAGRAM):   END;
728654    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
728655    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
728656    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
728657    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
728658    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
728659    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
728660    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
728661    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728662    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
728663    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728664    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
728665    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
728666    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
728667    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
728668    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
728669    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
728670    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
728671    +END;
MPRINT(EM_DIAGRAM):   END;
728672    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
728673    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
728674    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
728675    +drop
728676    +H11
728677    +H12
728678    +H13
728679    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
728680    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
728681     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL14_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
728682     quit;
728683     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
728684     filename emflow
728684   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural14\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural14\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural14: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
728685     *------------------------------------------------------------*;
728686     * Neural14: Scoring VALIDATE data;
728687     *------------------------------------------------------------*;
728688     data EMWS8.Neural14_VALIDATE
728689     / view=EMWS8.Neural14_VALIDATE
728690     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural14_VALIDATE / view=EMWS8.Neural14_VALIDATE ;
728691     set EMWS8.PRINCOMP_VALIDATE
728692     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
728693     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural14\EMFLOWSCORE.sas.
728694    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
728695    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
728696    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
728697    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
728698    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
728699    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
728700    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
728701    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
728702    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
728703    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
728704    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
728705    +LENGTH _WARN_ $4
728706    +      F_DepVar  $ 12
728707    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
728708    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
728709    +
728710    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
728711    +
728712    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
728713    +
728714    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
728715    +
728716    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
728717    +
728718    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
728719    +
728720    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
728721    +
728722    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
728723    +
728724    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
728725    +
728726    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
728727    +
728728    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
728729    +
728730    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
728731    +
728732    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
728733    +
728734    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
728735    +
728736    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
728737    +
728738    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
728739    +
728740    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
728741    +
728742    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
728743    +
728744    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
728745    +
728746    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
728747    +
728748    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
728749    +
728750    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
728751    +
728752    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
728753    +
728754    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
728755    +
728756    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
728757    +
728758    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
728759    +
728760    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
728761    +
728762    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
728763    +
728764    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
728765    +
728766    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728767    +*** Checking missing input Interval
728768    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
728769    +
728770    +IF NMISS(
728771    +   PC_1 ,
728772    +   PC_10 ,
728773    +   PC_11 ,
728774    +   PC_12 ,
728775    +   PC_13 ,
728776    +   PC_14 ,
728777    +   PC_15 ,
728778    +   PC_16 ,
728779    +   PC_17 ,
728780    +   PC_2 ,
728781    +   PC_3 ,
728782    +   PC_4 ,
728783    +   PC_5 ,
728784    +   PC_6 ,
728785    +   PC_7 ,
728786    +   PC_8 ,
728787    +   PC_9 ,
728788    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
728789    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
728790    +
728791    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
728792    +END;
MPRINT(EM_DIAGRAM):   END;
728793    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728794    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
728795    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728796    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
728797    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
728798    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
728799    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
728800    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
728801    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
728802    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
728803    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
728804    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
728805    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
728806    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
728807    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
728808    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
728809    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
728810    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
728811    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
728812    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
728813    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
728814    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
728815    +END;
MPRINT(EM_DIAGRAM):   END;
728816    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
728817    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
728818    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
728819    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
728820    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
728821    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
728822    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
728823    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
728824    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
728825    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
728826    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
728827    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
728828    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
728829    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
728830    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
728831    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
728832    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
728833    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
728834    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
728835    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
728836    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
728837    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
728838    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
728839    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
728840    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
728841    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
728842    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
728843    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
728844    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
728845    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
728846    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
728847    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
728848    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
728849    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
728850    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
728851    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
728852    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
728853    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
728854    +END;
MPRINT(EM_DIAGRAM):   END;
728855    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728856    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
728857    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728858    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
728859    +   H11  =     0.65368855138007 * S_PC_1  +    -0.43858642808571 * S_PC_10
728860    +          +     0.44774257597401 * S_PC_11  +     0.56119426236744 * S_PC_12
728861    +          +    -1.34625423578418 * S_PC_13  +      0.4490046335198 * S_PC_14
728862    +          +    -0.57321494670986 * S_PC_15  +     0.28275827920588 * S_PC_16
728863    +          +    -0.10465984705187 * S_PC_17  +     0.00124260485648 * S_PC_2
728864    +          +    -0.36103408936447 * S_PC_3  +      0.0188794550105 * S_PC_4
728865    +          +    -0.31176267972644 * S_PC_5  +    -0.62130750777774 * S_PC_6
728866    +          +     0.01824618528563 * S_PC_7  +     0.27990971778731 * S_PC_8
728867    +          +     0.25285684344446 * S_PC_9  +     0.72536510891281 *
728868    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = 0.65368855138007 * S_PC_1 + -0.43858642808571 * S_PC_10 + 
0.44774257597401 * S_PC_11 + 0.56119426236744 * S_PC_12 + -1.34625423578418 * S_PC_13 + 
0.4490046335198 * S_PC_14 + -0.57321494670986 * S_PC_15 + 0.28275827920588 * S_PC_16 + 
-0.10465984705187 * S_PC_17 + 0.00124260485648 * S_PC_2 + -0.36103408936447 * S_PC_3 + 
0.0188794550105 * S_PC_4 + -0.31176267972644 * S_PC_5 + -0.62130750777774 * S_PC_6 + 
0.01824618528563 * S_PC_7 + 0.27990971778731 * S_PC_8 + 0.25285684344446 * S_PC_9 + 
0.72536510891281 * S_Year_Birth ;
728869    +   H12  =     0.64877140978178 * S_PC_1  +    -0.23504836576679 * S_PC_10
728870    +          +    -0.13900995660374 * S_PC_11  +    -0.25644128958673 * S_PC_12
728871    +          +    -0.15892471251011 * S_PC_13  +    -0.02058583158074 * S_PC_14
728872    +          +      0.0190008534305 * S_PC_15  +         0.0411166186 * S_PC_16
728873    +          +     0.11535891526057 * S_PC_17  +     -0.2275840979411 * S_PC_2
728874    +          +     0.24657353117273 * S_PC_3  +     -0.1402758814142 * S_PC_4
728875    +          +    -0.01079222352767 * S_PC_5  +    -0.01020091925976 * S_PC_6
728876    +          +    -0.01153586471853 * S_PC_7  +    -0.10556442094722 * S_PC_8
728877    +          +     0.21806440355982 * S_PC_9  +    -0.06957405892099 *
728878    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = 0.64877140978178 * S_PC_1 + -0.23504836576679 * S_PC_10 + 
-0.13900995660374 * S_PC_11 + -0.25644128958673 * S_PC_12 + -0.15892471251011 * S_PC_13 + 
-0.02058583158074 * S_PC_14 + 0.0190008534305 * S_PC_15 + 0.0411166186 * S_PC_16 + 
0.11535891526057 * S_PC_17 + -0.2275840979411 * S_PC_2 + 0.24657353117273 * S_PC_3 + 
-0.1402758814142 * S_PC_4 + -0.01079222352767 * S_PC_5 + -0.01020091925976 * S_PC_6 + 
-0.01153586471853 * S_PC_7 + -0.10556442094722 * S_PC_8 + 0.21806440355982 * S_PC_9 + 
-0.06957405892099 * S_Year_Birth ;
728879    +   H13  =    -0.78080294183158 * S_PC_1  +    -0.15293405793931 * S_PC_10
728880    +          +     0.20496805235629 * S_PC_11  +     0.21305808748543 * S_PC_12
728881    +          +    -0.21539525830977 * S_PC_13  +     0.36295087844437 * S_PC_14
728882    +          +     0.00204662406445 * S_PC_15  +    -0.03331017668692 * S_PC_16
728883    +          +    -0.30636245037495 * S_PC_17  +    -0.67006286184773 * S_PC_2
728884    +          +    -0.45540841394297 * S_PC_3  +     0.60411563445926 * S_PC_4
728885    +          +     -0.1886380547418 * S_PC_5  +      0.9282932671333 * S_PC_6
728886    +          +     0.13390016494386 * S_PC_7  +     0.48785671386504 * S_PC_8
728887    +          +     0.07675156489007 * S_PC_9  +    -0.35190414343645 *
728888    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.78080294183158 * S_PC_1 + -0.15293405793931 * S_PC_10 + 
0.20496805235629 * S_PC_11 + 0.21305808748543 * S_PC_12 + -0.21539525830977 * S_PC_13 + 
0.36295087844437 * S_PC_14 + 0.00204662406445 * S_PC_15 + -0.03331017668692 * S_PC_16 + 
-0.30636245037495 * S_PC_17 + -0.67006286184773 * S_PC_2 + -0.45540841394297 * S_PC_3 + 
0.60411563445926 * S_PC_4 + -0.1886380547418 * S_PC_5 + 0.9282932671333 * S_PC_6 + 
0.13390016494386 * S_PC_7 + 0.48785671386504 * S_PC_8 + 0.07675156489007 * S_PC_9 + 
-0.35190414343645 * S_Year_Birth ;
728889    +   H11  =    -0.68382506756513 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.68382506756513 + H11 ;
728890    +   H12  =    -1.19130754752045 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.19130754752045 + H12 ;
728891    +   H13  =    -1.06127071029416 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.06127071029416 + H13 ;
728892    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
728893    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
728894    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
728895    +END;
MPRINT(EM_DIAGRAM):   END;
728896    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
728897    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
728898    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
728899    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
728900    +END;
MPRINT(EM_DIAGRAM):   END;
728901    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728902    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
728903    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728904    +
728905    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
728906    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
728907    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
728908    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
728909    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
728910    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
728911    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
728912    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
728913    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
728914    +end;
MPRINT(EM_DIAGRAM):   end;
728915    +else do;
MPRINT(EM_DIAGRAM):   else do;
728916    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
728917    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
728918    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
728919    +   end;
MPRINT(EM_DIAGRAM):   end;
728920    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
728921    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
728922    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
728923    +   end;
MPRINT(EM_DIAGRAM):   end;
728924    +   else do;
MPRINT(EM_DIAGRAM):   else do;
728925    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
728926    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
728927    +   end;
MPRINT(EM_DIAGRAM):   end;
728928    +end;
MPRINT(EM_DIAGRAM):   end;
728929    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
728930    +   P_DepVar1  =     1.89593445155806 * H11  +     3.94511888903906 * H12
728931    +          +     2.29198413143453 * H13 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.89593445155806 * H11 + 3.94511888903906 * H12 + 
2.29198413143453 * H13 ;
728932    +   P_DepVar1  =     0.86637040219244 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.86637040219244 + P_DepVar1 ;
728933    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
728934    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
728935    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
728936    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
728937    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
728938    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
728939    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
728940    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
728941    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
728942    +END;
MPRINT(EM_DIAGRAM):   END;
728943    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
728944    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
728945    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
728946    +END;
MPRINT(EM_DIAGRAM):   END;
728947    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
728948    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
728949    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
728950    +END;
MPRINT(EM_DIAGRAM):   END;
728951    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
728952    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
728953    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
728954    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
728955    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
728956    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
728957    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
728958    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728959    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
728960    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
728961    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
728962    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
728963    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
728964    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
728965    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
728966    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
728967    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
728968    +END;
MPRINT(EM_DIAGRAM):   END;
728969    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
728970    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
728971    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
728972    +drop
728973    +H11
728974    +H12
728975    +H13
728976    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
728977    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
728978     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL14_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
728979     quit;
728980     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
728981     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
728982     * Neural14: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural14: Computing metadata for TRAIN data;
728983     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL14_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural14\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural14_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural14_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural14_TRAIN out=WORK.M3I5Q3Z2 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3I5Q3Z2;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3I5Q3Z2(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3I5Q3Z2;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3I5Q3Z2;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1I12O4I NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1I12O4I;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1I12O4I;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1O0272G(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1I12O4I;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1I12O4I;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1I12O4I;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1I12O4I;
MPRINT(EMADVISECOLUMNS):   set WORK.M1I12O4I;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural14_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural14";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural14";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural14";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural14: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
729295     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
729296     set EMWS8.Neural14_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural14_EMINFO;
729297     where DATA='Neural14' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural14' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
729298     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL14_EMINFO.
      WHERE (DATA='Neural14') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

729299     data EMWS8.Neural14_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural14_EMINFO;
729300     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
729301     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
729302     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL14_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
729306     run;
729307     data EMWS8.Neural14_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural14_EMINFO;
729308     set EMWS8.Neural14_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural14_EMINFO WORK.MODELTEMP_INFO;
729309     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL14_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL14_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

729310     proc sort data = EMWS8.Neural14_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural14_EMINFO NOTHREADS;
729311     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
729312     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL14_EMINFO.
NOTE: The data set EMWS8.NEURAL14_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

729313     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
729314     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
729315     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

729316     proc sort data = EMWS8.Neural14_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural14_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
729317     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
729318     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL14_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

729319     data EMWS8.Neural14_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural14_EMINFO;
729320     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
729321     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
729322     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL14_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

729323     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
729324     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
729325     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
729326     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL14_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL14_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
