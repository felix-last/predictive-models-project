*------------------------------------------------------------*;
* Rule Induction Scoring Code;
*------------------------------------------------------------*;
length _bin $12 I__bin $12 I_DepVar $32;
label I_DepVar = 'Into: DepVar';
*;
I_DepVar = '';
I__bin= '0';
*;
*------------------------------------------------------------*;
* No Ripping Models were created;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* Binary model for DepVar = 0;
*------------------------------------------------------------*;
*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I__bin $ 12;
label I__bin = 'Into: _bin' ;
*** Target Values;
array RULE3_1DRF [2] $12 _temporary_ ('1' '0' );
label U__bin = 'Unnormalized Into: _bin' ;
length U__bin $ 12;
*** Unnormalized target values;
array RULE3_1DRU[2] $ 12 _temporary_ ('1           '  '0           ' );

drop _DM_BAD;
_DM_BAD=0;

*** Check Year_Birth for missing values ;
if missing( Year_Birth ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for GRP_AcceptedCmp5 ;
drop _1_0 ;
if missing( GRP_AcceptedCmp5 ) then do;
   _1_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '2'  then do;
      _1_0 = 1;
   end;
   else if _dm12 = '3'  then do;
      _1_0 = -1;
   end;
   else do;
      _1_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_AcceptedCmpTotal ;
drop _2_0 ;
if missing( GRP_AcceptedCmpTotal ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_AcceptedCmpTotal , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '3'  then do;
      _2_0 = 1;
   end;
   else if _dm12 = '4'  then do;
      _2_0 = -1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Frq ;
drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 ;
*** encoding is sparse, initialize to zero;
_3_0 = 0;
_3_1 = 0;
_3_2 = 0;
_3_3 = 0;
_3_4 = 0;
_3_5 = 0;
_3_6 = 0;
_3_7 = 0;
_3_8 = 0;
if missing( GRP_Frq ) then do;
   _3_0 = .;
   _3_1 = .;
   _3_2 = .;
   _3_3 = .;
   _3_4 = .;
   _3_5 = .;
   _3_6 = .;
   _3_7 = .;
   _3_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Frq , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _3_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _3_0 = -1;
                  _3_1 = -1;
                  _3_2 = -1;
                  _3_3 = -1;
                  _3_4 = -1;
                  _3_5 = -1;
                  _3_6 = -1;
                  _3_7 = -1;
                  _3_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _3_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _3_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _3_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _3_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _3_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _3_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _3_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _3_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _3_0 = .;
      _3_1 = .;
      _3_2 = .;
      _3_3 = .;
      _3_4 = .;
      _3_5 = .;
      _3_6 = .;
      _3_7 = .;
      _3_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Income ;
drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 ;
*** encoding is sparse, initialize to zero;
_4_0 = 0;
_4_1 = 0;
_4_2 = 0;
_4_3 = 0;
_4_4 = 0;
_4_5 = 0;
_4_6 = 0;
_4_7 = 0;
_4_8 = 0;
if missing( GRP_Income ) then do;
   _4_0 = .;
   _4_1 = .;
   _4_2 = .;
   _4_3 = .;
   _4_4 = .;
   _4_5 = .;
   _4_6 = .;
   _4_7 = .;
   _4_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Income , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _4_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _4_0 = -1;
                  _4_1 = -1;
                  _4_2 = -1;
                  _4_3 = -1;
                  _4_4 = -1;
                  _4_5 = -1;
                  _4_6 = -1;
                  _4_7 = -1;
                  _4_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _4_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _4_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _4_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _4_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _4_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _4_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _4_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _4_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _4_0 = .;
      _4_1 = .;
      _4_2 = .;
      _4_3 = .;
      _4_4 = .;
      _4_5 = .;
      _4_6 = .;
      _4_7 = .;
      _4_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Mnt ;
drop _5_0 _5_1 _5_2 _5_3 _5_4 _5_5 _5_6 _5_7 _5_8 ;
*** encoding is sparse, initialize to zero;
_5_0 = 0;
_5_1 = 0;
_5_2 = 0;
_5_3 = 0;
_5_4 = 0;
_5_5 = 0;
_5_6 = 0;
_5_7 = 0;
_5_8 = 0;
if missing( GRP_Mnt ) then do;
   _5_0 = .;
   _5_1 = .;
   _5_2 = .;
   _5_3 = .;
   _5_4 = .;
   _5_5 = .;
   _5_6 = .;
   _5_7 = .;
   _5_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Mnt , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _5_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _5_0 = -1;
                  _5_1 = -1;
                  _5_2 = -1;
                  _5_3 = -1;
                  _5_4 = -1;
                  _5_5 = -1;
                  _5_6 = -1;
                  _5_7 = -1;
                  _5_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _5_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _5_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _5_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _5_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _5_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _5_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _5_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _5_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _5_0 = .;
      _5_1 = .;
      _5_2 = .;
      _5_3 = .;
      _5_4 = .;
      _5_5 = .;
      _5_6 = .;
      _5_7 = .;
      _5_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntFishProducts ;
drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 ;
*** encoding is sparse, initialize to zero;
_6_0 = 0;
_6_1 = 0;
_6_2 = 0;
_6_3 = 0;
_6_4 = 0;
_6_5 = 0;
_6_6 = 0;
_6_7 = 0;
if missing( GRP_MntFishProducts ) then do;
   _6_0 = .;
   _6_1 = .;
   _6_2 = .;
   _6_3 = .;
   _6_4 = .;
   _6_5 = .;
   _6_6 = .;
   _6_7 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntFishProducts , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _6_7 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _6_0 = -1;
                  _6_1 = -1;
                  _6_2 = -1;
                  _6_3 = -1;
                  _6_4 = -1;
                  _6_5 = -1;
                  _6_6 = -1;
                  _6_7 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '3'  then do;
               _6_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _6_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _6_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _6_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _6_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _6_5 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _6_6 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _6_0 = .;
      _6_1 = .;
      _6_2 = .;
      _6_3 = .;
      _6_4 = .;
      _6_5 = .;
      _6_6 = .;
      _6_7 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntGoldProds ;
drop _7_0 _7_1 _7_2 _7_3 _7_4 _7_5 _7_6 _7_7 _7_8 ;
*** encoding is sparse, initialize to zero;
_7_0 = 0;
_7_1 = 0;
_7_2 = 0;
_7_3 = 0;
_7_4 = 0;
_7_5 = 0;
_7_6 = 0;
_7_7 = 0;
_7_8 = 0;
if missing( GRP_MntGoldProds ) then do;
   _7_0 = .;
   _7_1 = .;
   _7_2 = .;
   _7_3 = .;
   _7_4 = .;
   _7_5 = .;
   _7_6 = .;
   _7_7 = .;
   _7_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntGoldProds , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _7_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _7_0 = -1;
                  _7_1 = -1;
                  _7_2 = -1;
                  _7_3 = -1;
                  _7_4 = -1;
                  _7_5 = -1;
                  _7_6 = -1;
                  _7_7 = -1;
                  _7_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _7_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _7_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _7_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _7_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _7_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _7_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _7_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _7_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _7_0 = .;
      _7_1 = .;
      _7_2 = .;
      _7_3 = .;
      _7_4 = .;
      _7_5 = .;
      _7_6 = .;
      _7_7 = .;
      _7_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntMeatProducts ;
drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 ;
*** encoding is sparse, initialize to zero;
_8_0 = 0;
_8_1 = 0;
_8_2 = 0;
_8_3 = 0;
_8_4 = 0;
_8_5 = 0;
_8_6 = 0;
_8_7 = 0;
_8_8 = 0;
if missing( GRP_MntMeatProducts ) then do;
   _8_0 = .;
   _8_1 = .;
   _8_2 = .;
   _8_3 = .;
   _8_4 = .;
   _8_5 = .;
   _8_6 = .;
   _8_7 = .;
   _8_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntMeatProducts , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _8_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _8_0 = -1;
                  _8_1 = -1;
                  _8_2 = -1;
                  _8_3 = -1;
                  _8_4 = -1;
                  _8_5 = -1;
                  _8_6 = -1;
                  _8_7 = -1;
                  _8_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _8_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _8_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _8_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _8_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _8_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _8_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _8_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _8_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _8_0 = .;
      _8_1 = .;
      _8_2 = .;
      _8_3 = .;
      _8_4 = .;
      _8_5 = .;
      _8_6 = .;
      _8_7 = .;
      _8_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntSweetProducts ;
drop _9_0 _9_1 _9_2 _9_3 _9_4 _9_5 _9_6 _9_7 ;
*** encoding is sparse, initialize to zero;
_9_0 = 0;
_9_1 = 0;
_9_2 = 0;
_9_3 = 0;
_9_4 = 0;
_9_5 = 0;
_9_6 = 0;
_9_7 = 0;
if missing( GRP_MntSweetProducts ) then do;
   _9_0 = .;
   _9_1 = .;
   _9_2 = .;
   _9_3 = .;
   _9_4 = .;
   _9_5 = .;
   _9_6 = .;
   _9_7 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntSweetProducts , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _9_7 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _9_0 = -1;
                  _9_1 = -1;
                  _9_2 = -1;
                  _9_3 = -1;
                  _9_4 = -1;
                  _9_5 = -1;
                  _9_6 = -1;
                  _9_7 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '3'  then do;
               _9_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _9_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _9_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _9_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _9_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _9_5 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _9_6 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _9_0 = .;
      _9_1 = .;
      _9_2 = .;
      _9_3 = .;
      _9_4 = .;
      _9_5 = .;
      _9_6 = .;
      _9_7 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntWines ;
drop _10_0 _10_1 _10_2 _10_3 _10_4 _10_5 _10_6 _10_7 _10_8 ;
*** encoding is sparse, initialize to zero;
_10_0 = 0;
_10_1 = 0;
_10_2 = 0;
_10_3 = 0;
_10_4 = 0;
_10_5 = 0;
_10_6 = 0;
_10_7 = 0;
_10_8 = 0;
if missing( GRP_MntWines ) then do;
   _10_0 = .;
   _10_1 = .;
   _10_2 = .;
   _10_3 = .;
   _10_4 = .;
   _10_5 = .;
   _10_6 = .;
   _10_7 = .;
   _10_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntWines , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _10_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _10_0 = -1;
                  _10_1 = -1;
                  _10_2 = -1;
                  _10_3 = -1;
                  _10_4 = -1;
                  _10_5 = -1;
                  _10_6 = -1;
                  _10_7 = -1;
                  _10_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _10_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _10_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _10_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _10_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _10_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _10_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _10_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _10_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _10_0 = .;
      _10_1 = .;
      _10_2 = .;
      _10_3 = .;
      _10_4 = .;
      _10_5 = .;
      _10_6 = .;
      _10_7 = .;
      _10_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumCatalogPurchases ;
drop _11_0 _11_1 _11_2 _11_3 _11_4 ;
*** encoding is sparse, initialize to zero;
_11_0 = 0;
_11_1 = 0;
_11_2 = 0;
_11_3 = 0;
_11_4 = 0;
if missing( GRP_NumCatalogPurchases ) then do;
   _11_0 = .;
   _11_1 = .;
   _11_2 = .;
   _11_3 = .;
   _11_4 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '4'  then do;
         if _dm12 = '3'  then do;
            _11_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _11_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '5'  then do;
            _11_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _11_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _11_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _11_0 = -1;
            _11_1 = -1;
            _11_2 = -1;
            _11_3 = -1;
            _11_4 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _11_0 = .;
      _11_1 = .;
      _11_2 = .;
      _11_3 = .;
      _11_4 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumDistPurchases ;
drop _12_0 _12_1 _12_2 _12_3 _12_4 _12_5 _12_6 _12_7 _12_8 ;
*** encoding is sparse, initialize to zero;
_12_0 = 0;
_12_1 = 0;
_12_2 = 0;
_12_3 = 0;
_12_4 = 0;
_12_5 = 0;
_12_6 = 0;
_12_7 = 0;
_12_8 = 0;
if missing( GRP_NumDistPurchases ) then do;
   _12_0 = .;
   _12_1 = .;
   _12_2 = .;
   _12_3 = .;
   _12_4 = .;
   _12_5 = .;
   _12_6 = .;
   _12_7 = .;
   _12_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumDistPurchases , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _12_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _12_0 = -1;
                  _12_1 = -1;
                  _12_2 = -1;
                  _12_3 = -1;
                  _12_4 = -1;
                  _12_5 = -1;
                  _12_6 = -1;
                  _12_7 = -1;
                  _12_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _12_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _12_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _12_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _12_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _12_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _12_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _12_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _12_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _12_0 = .;
      _12_1 = .;
      _12_2 = .;
      _12_3 = .;
      _12_4 = .;
      _12_5 = .;
      _12_6 = .;
      _12_7 = .;
      _12_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumWebPurchases ;
drop _13_0 _13_1 _13_2 _13_3 _13_4 _13_5 _13_6 ;
*** encoding is sparse, initialize to zero;
_13_0 = 0;
_13_1 = 0;
_13_2 = 0;
_13_3 = 0;
_13_4 = 0;
_13_5 = 0;
_13_6 = 0;
if missing( GRP_NumWebPurchases ) then do;
   _13_0 = .;
   _13_1 = .;
   _13_2 = .;
   _13_3 = .;
   _13_4 = .;
   _13_5 = .;
   _13_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumWebPurchases , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 = '2'  then do;
            _13_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '3'  then do;
               _13_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _13_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _13_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _13_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _13_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _13_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _13_0 = -1;
               _13_1 = -1;
               _13_2 = -1;
               _13_3 = -1;
               _13_4 = -1;
               _13_5 = -1;
               _13_6 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _13_0 = .;
      _13_1 = .;
      _13_2 = .;
      _13_3 = .;
      _13_4 = .;
      _13_5 = .;
      _13_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumWebVisitsMonth ;
drop _14_0 _14_1 _14_2 _14_3 _14_4 _14_5 _14_6 ;
*** encoding is sparse, initialize to zero;
_14_0 = 0;
_14_1 = 0;
_14_2 = 0;
_14_3 = 0;
_14_4 = 0;
_14_5 = 0;
_14_6 = 0;
if missing( GRP_NumWebVisitsMonth ) then do;
   _14_0 = .;
   _14_1 = .;
   _14_2 = .;
   _14_3 = .;
   _14_4 = .;
   _14_5 = .;
   _14_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumWebVisitsMonth , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 = '2'  then do;
            _14_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '3'  then do;
               _14_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _14_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _14_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _14_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _14_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _14_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _14_0 = -1;
               _14_1 = -1;
               _14_2 = -1;
               _14_3 = -1;
               _14_4 = -1;
               _14_5 = -1;
               _14_6 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _14_0 = .;
      _14_1 = .;
      _14_2 = .;
      _14_3 = .;
      _14_4 = .;
      _14_5 = .;
      _14_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_RFMstat ;
drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 _15_7 _15_8 ;
*** encoding is sparse, initialize to zero;
_15_0 = 0;
_15_1 = 0;
_15_2 = 0;
_15_3 = 0;
_15_4 = 0;
_15_5 = 0;
_15_6 = 0;
_15_7 = 0;
_15_8 = 0;
if missing( GRP_RFMstat ) then do;
   _15_0 = .;
   _15_1 = .;
   _15_2 = .;
   _15_3 = .;
   _15_4 = .;
   _15_5 = .;
   _15_6 = .;
   _15_7 = .;
   _15_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_RFMstat , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _15_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _15_0 = -1;
                  _15_1 = -1;
                  _15_2 = -1;
                  _15_3 = -1;
                  _15_4 = -1;
                  _15_5 = -1;
                  _15_6 = -1;
                  _15_7 = -1;
                  _15_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _15_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _15_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _15_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _15_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _15_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _15_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _15_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _15_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _15_0 = .;
      _15_1 = .;
      _15_2 = .;
      _15_3 = .;
      _15_4 = .;
      _15_5 = .;
      _15_6 = .;
      _15_7 = .;
      _15_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_RMntFrq ;
drop _16_0 _16_1 _16_2 _16_3 _16_4 _16_5 _16_6 _16_7 _16_8 ;
*** encoding is sparse, initialize to zero;
_16_0 = 0;
_16_1 = 0;
_16_2 = 0;
_16_3 = 0;
_16_4 = 0;
_16_5 = 0;
_16_6 = 0;
_16_7 = 0;
_16_8 = 0;
if missing( GRP_RMntFrq ) then do;
   _16_0 = .;
   _16_1 = .;
   _16_2 = .;
   _16_3 = .;
   _16_4 = .;
   _16_5 = .;
   _16_6 = .;
   _16_7 = .;
   _16_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_RMntFrq , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _16_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _16_0 = -1;
                  _16_1 = -1;
                  _16_2 = -1;
                  _16_3 = -1;
                  _16_4 = -1;
                  _16_5 = -1;
                  _16_6 = -1;
                  _16_7 = -1;
                  _16_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _16_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _16_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _16_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _16_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _16_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _16_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _16_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _16_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _16_0 = .;
      _16_1 = .;
      _16_2 = .;
      _16_3 = .;
      _16_4 = .;
      _16_5 = .;
      _16_6 = .;
      _16_7 = .;
      _16_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Recency ;
drop _17_0 _17_1 _17_2 _17_3 _17_4 _17_5 _17_6 _17_7 _17_8 ;
*** encoding is sparse, initialize to zero;
_17_0 = 0;
_17_1 = 0;
_17_2 = 0;
_17_3 = 0;
_17_4 = 0;
_17_5 = 0;
_17_6 = 0;
_17_7 = 0;
_17_8 = 0;
if missing( GRP_Recency ) then do;
   _17_0 = .;
   _17_1 = .;
   _17_2 = .;
   _17_3 = .;
   _17_4 = .;
   _17_5 = .;
   _17_6 = .;
   _17_7 = .;
   _17_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Recency , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _17_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _17_0 = -1;
                  _17_1 = -1;
                  _17_2 = -1;
                  _17_3 = -1;
                  _17_4 = -1;
                  _17_5 = -1;
                  _17_6 = -1;
                  _17_7 = -1;
                  _17_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _17_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _17_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _17_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _17_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _17_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _17_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _17_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _17_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _17_0 = .;
      _17_1 = .;
      _17_2 = .;
      _17_3 = .;
      _17_4 = .;
      _17_5 = .;
      _17_6 = .;
      _17_7 = .;
      _17_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.848778433;
   _P1 = 0.151221567;
   goto RULE3_1DR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: GRP_AcceptedCmp5 ;
_TEMP = 1;
_LP0 = _LP0 + (    0.74141692255177) * _TEMP * _1_0;

***  Effect: GRP_AcceptedCmpTotal ;
_TEMP = 1;
_LP0 = _LP0 + (    1.59624734553992) * _TEMP * _2_0;

***  Effect: GRP_Frq ;
_TEMP = 1;
_LP0 = _LP0 + (   -4.14145881247634) * _TEMP * _3_0;
_LP0 = _LP0 + (   -4.57146889919068) * _TEMP * _3_1;
_LP0 = _LP0 + (   -2.66904910539364) * _TEMP * _3_2;
_LP0 = _LP0 + (   -1.09024140572917) * _TEMP * _3_3;
_LP0 = _LP0 + (    0.07877817175853) * _TEMP * _3_4;
_LP0 = _LP0 + (    1.26848989532364) * _TEMP * _3_5;
_LP0 = _LP0 + (    1.31481557574677) * _TEMP * _3_6;
_LP0 = _LP0 + (    2.65397111712982) * _TEMP * _3_7;
_LP0 = _LP0 + (    2.71654229549815) * _TEMP * _3_8;

***  Effect: GRP_Income ;
_TEMP = 1;
_LP0 = _LP0 + (    1.01813434944738) * _TEMP * _4_0;
_LP0 = _LP0 + (    0.92418580020671) * _TEMP * _4_1;
_LP0 = _LP0 + (    0.38062410023242) * _TEMP * _4_2;
_LP0 = _LP0 + (   -0.80741780795769) * _TEMP * _4_3;
_LP0 = _LP0 + (   -0.55185071713069) * _TEMP * _4_4;
_LP0 = _LP0 + (    0.38723805736506) * _TEMP * _4_5;
_LP0 = _LP0 + (    0.81583963309807) * _TEMP * _4_6;
_LP0 = _LP0 + (    0.06866486518975) * _TEMP * _4_7;
_LP0 = _LP0 + (   -0.59250985540336) * _TEMP * _4_8;

***  Effect: GRP_Mnt ;
_TEMP = 1;
_LP0 = _LP0 + (   -3.31344684758065) * _TEMP * _5_0;
_LP0 = _LP0 + (   -1.17001141342449) * _TEMP * _5_1;
_LP0 = _LP0 + (    0.35910217556254) * _TEMP * _5_2;
_LP0 = _LP0 + (    0.83379852832078) * _TEMP * _5_3;
_LP0 = _LP0 + (    0.97207866951446) * _TEMP * _5_4;
_LP0 = _LP0 + (    0.50882459969215) * _TEMP * _5_5;
_LP0 = _LP0 + (    0.49418142349579) * _TEMP * _5_6;
_LP0 = _LP0 + (    0.27766938335455) * _TEMP * _5_7;
_LP0 = _LP0 + (     0.1262961791418) * _TEMP * _5_8;

***  Effect: GRP_MntFishProducts ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.85521806103067) * _TEMP * _6_0;
_LP0 = _LP0 + (   -0.24860480826778) * _TEMP * _6_1;
_LP0 = _LP0 + (   -0.21671673992177) * _TEMP * _6_2;
_LP0 = _LP0 + (    0.20385335272992) * _TEMP * _6_3;
_LP0 = _LP0 + (   -0.00688384985229) * _TEMP * _6_4;
_LP0 = _LP0 + (   -0.65749044837842) * _TEMP * _6_5;
_LP0 = _LP0 + (    0.48017596740962) * _TEMP * _6_6;
_LP0 = _LP0 + (    0.41842592335496) * _TEMP * _6_7;

***  Effect: GRP_MntGoldProds ;
_TEMP = 1;
_LP0 = _LP0 + (    0.43281222752221) * _TEMP * _7_0;
_LP0 = _LP0 + (    -0.5367321980981) * _TEMP * _7_1;
_LP0 = _LP0 + (   -0.29639046187402) * _TEMP * _7_2;
_LP0 = _LP0 + (   -0.24391819041097) * _TEMP * _7_3;
_LP0 = _LP0 + (    0.28872267024634) * _TEMP * _7_4;
_LP0 = _LP0 + (    0.05666953114091) * _TEMP * _7_5;
_LP0 = _LP0 + (    0.12161844024234) * _TEMP * _7_6;
_LP0 = _LP0 + (   -0.00100788314819) * _TEMP * _7_7;
_LP0 = _LP0 + (    0.45469397915457) * _TEMP * _7_8;

***  Effect: GRP_MntMeatProducts ;
_TEMP = 1;
_LP0 = _LP0 + (    10.1947038275619) * _TEMP * _8_0;
_LP0 = _LP0 + (    4.59128657720935) * _TEMP * _8_1;
_LP0 = _LP0 + (    3.17232514647908) * _TEMP * _8_2;
_LP0 = _LP0 + (    1.37265790426902) * _TEMP * _8_3;
_LP0 = _LP0 + (   -1.09441226377866) * _TEMP * _8_4;
_LP0 = _LP0 + (   -1.58974545741869) * _TEMP * _8_5;
_LP0 = _LP0 + (   -3.05576384509731) * _TEMP * _8_6;
_LP0 = _LP0 + (   -3.13972212474999) * _TEMP * _8_7;
_LP0 = _LP0 + (   -4.51774447656857) * _TEMP * _8_8;

***  Effect: GRP_MntSweetProducts ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.35758525356214) * _TEMP * _9_0;
_LP0 = _LP0 + (   -0.60737872000358) * _TEMP * _9_1;
_LP0 = _LP0 + (   -0.25521537837146) * _TEMP * _9_2;
_LP0 = _LP0 + (   -0.04228779387262) * _TEMP * _9_3;
_LP0 = _LP0 + (   -0.78862681084654) * _TEMP * _9_4;
_LP0 = _LP0 + (    0.36324153837345) * _TEMP * _9_5;
_LP0 = _LP0 + (    0.25850096362497) * _TEMP * _9_6;
_LP0 = _LP0 + (    0.21381753198292) * _TEMP * _9_7;

***  Effect: GRP_MntWines ;
_TEMP = 1;
_LP0 = _LP0 + (   -4.21064801117787) * _TEMP * _10_0;
_LP0 = _LP0 + (   -3.02926225573684) * _TEMP * _10_1;
_LP0 = _LP0 + (   -2.54444499235731) * _TEMP * _10_2;
_LP0 = _LP0 + (   -1.66931331440296) * _TEMP * _10_3;
_LP0 = _LP0 + (   -0.22034295431194) * _TEMP * _10_4;
_LP0 = _LP0 + (    0.53798906620145) * _TEMP * _10_5;
_LP0 = _LP0 + (    1.76906043716591) * _TEMP * _10_6;
_LP0 = _LP0 + (    2.43561586900249) * _TEMP * _10_7;
_LP0 = _LP0 + (    3.15954334002932) * _TEMP * _10_8;

***  Effect: GRP_NumCatalogPurchases ;
_TEMP = 1;
_LP0 = _LP0 + (    6.41757796723457) * _TEMP * _11_0;
_LP0 = _LP0 + (    2.37594270242232) * _TEMP * _11_1;
_LP0 = _LP0 + (   -0.27834659685629) * _TEMP * _11_2;
_LP0 = _LP0 + (   -1.81570317885417) * _TEMP * _11_3;
_LP0 = _LP0 + (   -2.46638288354975) * _TEMP * _11_4;

***  Effect: GRP_NumDistPurchases ;
_TEMP = 1;
_LP0 = _LP0 + (    0.55283414037158) * _TEMP * _12_0;
_LP0 = _LP0 + (    3.27097388241921) * _TEMP * _12_1;
_LP0 = _LP0 + (    0.94072178616059) * _TEMP * _12_2;
_LP0 = _LP0 + (   -0.09009783313685) * _TEMP * _12_3;
_LP0 = _LP0 + (    0.08042181610226) * _TEMP * _12_4;
_LP0 = _LP0 + (   -0.13530455805974) * _TEMP * _12_5;
_LP0 = _LP0 + (    0.54818707638156) * _TEMP * _12_6;
_LP0 = _LP0 + (   -1.41687315825521) * _TEMP * _12_7;
_LP0 = _LP0 + (   -1.58362125456952) * _TEMP * _12_8;

***  Effect: GRP_NumWebPurchases ;
_TEMP = 1;
_LP0 = _LP0 + (    1.97321392048961) * _TEMP * _13_0;
_LP0 = _LP0 + (   -0.12335268191252) * _TEMP * _13_1;
_LP0 = _LP0 + (   -0.50868672249892) * _TEMP * _13_2;
_LP0 = _LP0 + (   -1.30356288675996) * _TEMP * _13_3;
_LP0 = _LP0 + (   -0.82276414409502) * _TEMP * _13_4;
_LP0 = _LP0 + (   -0.43347096574738) * _TEMP * _13_5;
_LP0 = _LP0 + (    0.23648001097332) * _TEMP * _13_6;

***  Effect: GRP_NumWebVisitsMonth ;
_TEMP = 1;
_LP0 = _LP0 + (    3.88368431247037) * _TEMP * _14_0;
_LP0 = _LP0 + (    2.42660268380077) * _TEMP * _14_1;
_LP0 = _LP0 + (    1.76838037276973) * _TEMP * _14_2;
_LP0 = _LP0 + (    0.75037830520122) * _TEMP * _14_3;
_LP0 = _LP0 + (   -0.73933774419514) * _TEMP * _14_4;
_LP0 = _LP0 + (   -0.92592648560637) * _TEMP * _14_5;
_LP0 = _LP0 + (   -2.43583752743525) * _TEMP * _14_6;

***  Effect: GRP_RFMstat ;
_TEMP = 1;
_LP0 = _LP0 + (    1.57139304617058) * _TEMP * _15_0;
_LP0 = _LP0 + (    2.83514875415073) * _TEMP * _15_1;
_LP0 = _LP0 + (    0.87941878305708) * _TEMP * _15_2;
_LP0 = _LP0 + (    0.55267911605273) * _TEMP * _15_3;
_LP0 = _LP0 + (   -0.12355686494821) * _TEMP * _15_4;
_LP0 = _LP0 + (   -1.42172112880321) * _TEMP * _15_5;
_LP0 = _LP0 + (   -0.55130165544817) * _TEMP * _15_6;
_LP0 = _LP0 + (   -0.63137146619788) * _TEMP * _15_7;
_LP0 = _LP0 + (   -1.32788243693715) * _TEMP * _15_8;

***  Effect: GRP_RMntFrq ;
_TEMP = 1;
_LP0 = _LP0 + (   -2.66554014714227) * _TEMP * _16_0;
_LP0 = _LP0 + (   -1.78605424534404) * _TEMP * _16_1;
_LP0 = _LP0 + (   -1.50178831909013) * _TEMP * _16_2;
_LP0 = _LP0 + (    0.46268243969679) * _TEMP * _16_3;
_LP0 = _LP0 + (    0.26357998237165) * _TEMP * _16_4;
_LP0 = _LP0 + (    1.85931116854175) * _TEMP * _16_5;
_LP0 = _LP0 + (    1.75368531592139) * _TEMP * _16_6;
_LP0 = _LP0 + (     0.5208155745723) * _TEMP * _16_7;
_LP0 = _LP0 + (    1.21221932144493) * _TEMP * _16_8;

***  Effect: GRP_Recency ;
_TEMP = 1;
_LP0 = _LP0 + (    -3.4910215472858) * _TEMP * _17_0;
_LP0 = _LP0 + (   -2.70936556301198) * _TEMP * _17_1;
_LP0 = _LP0 + (   -2.71666279841253) * _TEMP * _17_2;
_LP0 = _LP0 + (   -1.44636415236273) * _TEMP * _17_3;
_LP0 = _LP0 + (    0.02860971953941) * _TEMP * _17_4;
_LP0 = _LP0 + (    0.40412310933424) * _TEMP * _17_5;
_LP0 = _LP0 + (    1.26174288832449) * _TEMP * _17_6;
_LP0 = _LP0 + (     1.2442640924645) * _TEMP * _17_7;
_LP0 = _LP0 + (    3.43353916679477) * _TEMP * _17_8;

***  Effect: Year_Birth ;
_TEMP = Year_Birth ;
_LP0 = _LP0 + (   -0.01443062337018 * _TEMP);

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1;
_TEMP =     32.5155729717711 + _LP0;
if (_TEMP < 0) then do;
   _TEMP = exp(_TEMP);
   _P0 = _TEMP / (1 + _TEMP);
end;
else _P0 = 1 / (1 + exp(-_TEMP));
_P1 = 1.0 - _P0;

RULE3_1DR1:


*** Posterior Probabilities and Predicted Level;
label P__bin1 = 'Predicted: _bin=1' ;
label P__bin0 = 'Predicted: _bin=0' ;
P__bin1 = _P0;
_MAXP = _P0;
_IY = 1;
P__bin0 = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
I__bin = RULE3_1DRF[_IY];
U__bin = RULE3_1DRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;
*;
%DMNORMIP(I__bin);
if I__bin eq '1' then do;
I_DepVar = ("0");
%DMNORMCP(I_DepVar, I_DepVar);
P_DepVar0=P__bin1;
P_DepVar1 = 1-P__bin1;
end;
*;
*;
* END Binary Model for DepVar = 0;
;
*;
DROP P__bin1 P__bin0;
*------------------------------------------------------------*;
* Binary model for DepVar = 1;
*------------------------------------------------------------*;
*;
%DMNORMIP(I__bin);
if I__bin ne '1' then do;
*;
*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I__bin $ 12;
label I__bin = 'Into: _bin' ;
*** Target Values;
array RULE3_2DRF [2] $12 _temporary_ ('1' '0' );
label U__bin = 'Unnormalized Into: _bin' ;
length U__bin $ 12;
*** Unnormalized target values;
array RULE3_2DRU[2] $ 12 _temporary_ ('1           '  '0           ' );

drop _DM_BAD;
_DM_BAD=0;

*** Check Year_Birth for missing values ;
if missing( Year_Birth ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for GRP_AcceptedCmp5 ;
drop _1_0 ;
if missing( GRP_AcceptedCmp5 ) then do;
   _1_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '2'  then do;
      _1_0 = 1;
   end;
   else if _dm12 = '3'  then do;
      _1_0 = -1;
   end;
   else do;
      _1_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_AcceptedCmpTotal ;
drop _2_0 ;
if missing( GRP_AcceptedCmpTotal ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_AcceptedCmpTotal , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '4'  then do;
      _2_0 = -1;
   end;
   else if _dm12 = '3'  then do;
      _2_0 = 1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Frq ;
drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 ;
*** encoding is sparse, initialize to zero;
_3_0 = 0;
_3_1 = 0;
_3_2 = 0;
_3_3 = 0;
_3_4 = 0;
_3_5 = 0;
_3_6 = 0;
_3_7 = 0;
_3_8 = 0;
if missing( GRP_Frq ) then do;
   _3_0 = .;
   _3_1 = .;
   _3_2 = .;
   _3_3 = .;
   _3_4 = .;
   _3_5 = .;
   _3_6 = .;
   _3_7 = .;
   _3_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Frq , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _3_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _3_0 = -1;
                  _3_1 = -1;
                  _3_2 = -1;
                  _3_3 = -1;
                  _3_4 = -1;
                  _3_5 = -1;
                  _3_6 = -1;
                  _3_7 = -1;
                  _3_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _3_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _3_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _3_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _3_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _3_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _3_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _3_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _3_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _3_0 = .;
      _3_1 = .;
      _3_2 = .;
      _3_3 = .;
      _3_4 = .;
      _3_5 = .;
      _3_6 = .;
      _3_7 = .;
      _3_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Income ;
drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 ;
*** encoding is sparse, initialize to zero;
_4_0 = 0;
_4_1 = 0;
_4_2 = 0;
_4_3 = 0;
_4_4 = 0;
_4_5 = 0;
_4_6 = 0;
_4_7 = 0;
_4_8 = 0;
if missing( GRP_Income ) then do;
   _4_0 = .;
   _4_1 = .;
   _4_2 = .;
   _4_3 = .;
   _4_4 = .;
   _4_5 = .;
   _4_6 = .;
   _4_7 = .;
   _4_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Income , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _4_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _4_0 = -1;
                  _4_1 = -1;
                  _4_2 = -1;
                  _4_3 = -1;
                  _4_4 = -1;
                  _4_5 = -1;
                  _4_6 = -1;
                  _4_7 = -1;
                  _4_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _4_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _4_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _4_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _4_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _4_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _4_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _4_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _4_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _4_0 = .;
      _4_1 = .;
      _4_2 = .;
      _4_3 = .;
      _4_4 = .;
      _4_5 = .;
      _4_6 = .;
      _4_7 = .;
      _4_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Mnt ;
drop _5_0 _5_1 _5_2 _5_3 _5_4 _5_5 _5_6 _5_7 _5_8 ;
*** encoding is sparse, initialize to zero;
_5_0 = 0;
_5_1 = 0;
_5_2 = 0;
_5_3 = 0;
_5_4 = 0;
_5_5 = 0;
_5_6 = 0;
_5_7 = 0;
_5_8 = 0;
if missing( GRP_Mnt ) then do;
   _5_0 = .;
   _5_1 = .;
   _5_2 = .;
   _5_3 = .;
   _5_4 = .;
   _5_5 = .;
   _5_6 = .;
   _5_7 = .;
   _5_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Mnt , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _5_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _5_0 = -1;
                  _5_1 = -1;
                  _5_2 = -1;
                  _5_3 = -1;
                  _5_4 = -1;
                  _5_5 = -1;
                  _5_6 = -1;
                  _5_7 = -1;
                  _5_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _5_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _5_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _5_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _5_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _5_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _5_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _5_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _5_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _5_0 = .;
      _5_1 = .;
      _5_2 = .;
      _5_3 = .;
      _5_4 = .;
      _5_5 = .;
      _5_6 = .;
      _5_7 = .;
      _5_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntFishProducts ;
drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 ;
*** encoding is sparse, initialize to zero;
_6_0 = 0;
_6_1 = 0;
_6_2 = 0;
_6_3 = 0;
_6_4 = 0;
_6_5 = 0;
_6_6 = 0;
_6_7 = 0;
if missing( GRP_MntFishProducts ) then do;
   _6_0 = .;
   _6_1 = .;
   _6_2 = .;
   _6_3 = .;
   _6_4 = .;
   _6_5 = .;
   _6_6 = .;
   _6_7 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntFishProducts , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _6_7 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _6_0 = -1;
                  _6_1 = -1;
                  _6_2 = -1;
                  _6_3 = -1;
                  _6_4 = -1;
                  _6_5 = -1;
                  _6_6 = -1;
                  _6_7 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '3'  then do;
               _6_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _6_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _6_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _6_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _6_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _6_5 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _6_6 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _6_0 = .;
      _6_1 = .;
      _6_2 = .;
      _6_3 = .;
      _6_4 = .;
      _6_5 = .;
      _6_6 = .;
      _6_7 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntGoldProds ;
drop _7_0 _7_1 _7_2 _7_3 _7_4 _7_5 _7_6 _7_7 _7_8 ;
*** encoding is sparse, initialize to zero;
_7_0 = 0;
_7_1 = 0;
_7_2 = 0;
_7_3 = 0;
_7_4 = 0;
_7_5 = 0;
_7_6 = 0;
_7_7 = 0;
_7_8 = 0;
if missing( GRP_MntGoldProds ) then do;
   _7_0 = .;
   _7_1 = .;
   _7_2 = .;
   _7_3 = .;
   _7_4 = .;
   _7_5 = .;
   _7_6 = .;
   _7_7 = .;
   _7_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntGoldProds , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _7_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _7_0 = -1;
                  _7_1 = -1;
                  _7_2 = -1;
                  _7_3 = -1;
                  _7_4 = -1;
                  _7_5 = -1;
                  _7_6 = -1;
                  _7_7 = -1;
                  _7_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _7_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _7_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _7_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _7_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _7_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _7_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _7_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _7_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _7_0 = .;
      _7_1 = .;
      _7_2 = .;
      _7_3 = .;
      _7_4 = .;
      _7_5 = .;
      _7_6 = .;
      _7_7 = .;
      _7_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntMeatProducts ;
drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 ;
*** encoding is sparse, initialize to zero;
_8_0 = 0;
_8_1 = 0;
_8_2 = 0;
_8_3 = 0;
_8_4 = 0;
_8_5 = 0;
_8_6 = 0;
_8_7 = 0;
_8_8 = 0;
if missing( GRP_MntMeatProducts ) then do;
   _8_0 = .;
   _8_1 = .;
   _8_2 = .;
   _8_3 = .;
   _8_4 = .;
   _8_5 = .;
   _8_6 = .;
   _8_7 = .;
   _8_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntMeatProducts , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _8_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _8_0 = -1;
                  _8_1 = -1;
                  _8_2 = -1;
                  _8_3 = -1;
                  _8_4 = -1;
                  _8_5 = -1;
                  _8_6 = -1;
                  _8_7 = -1;
                  _8_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _8_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _8_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _8_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _8_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _8_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _8_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _8_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _8_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _8_0 = .;
      _8_1 = .;
      _8_2 = .;
      _8_3 = .;
      _8_4 = .;
      _8_5 = .;
      _8_6 = .;
      _8_7 = .;
      _8_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntSweetProducts ;
drop _9_0 _9_1 _9_2 _9_3 _9_4 _9_5 _9_6 _9_7 ;
*** encoding is sparse, initialize to zero;
_9_0 = 0;
_9_1 = 0;
_9_2 = 0;
_9_3 = 0;
_9_4 = 0;
_9_5 = 0;
_9_6 = 0;
_9_7 = 0;
if missing( GRP_MntSweetProducts ) then do;
   _9_0 = .;
   _9_1 = .;
   _9_2 = .;
   _9_3 = .;
   _9_4 = .;
   _9_5 = .;
   _9_6 = .;
   _9_7 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntSweetProducts , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _9_7 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _9_0 = -1;
                  _9_1 = -1;
                  _9_2 = -1;
                  _9_3 = -1;
                  _9_4 = -1;
                  _9_5 = -1;
                  _9_6 = -1;
                  _9_7 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '3'  then do;
               _9_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _9_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _9_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _9_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _9_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _9_5 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _9_6 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _9_0 = .;
      _9_1 = .;
      _9_2 = .;
      _9_3 = .;
      _9_4 = .;
      _9_5 = .;
      _9_6 = .;
      _9_7 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_MntWines ;
drop _10_0 _10_1 _10_2 _10_3 _10_4 _10_5 _10_6 _10_7 _10_8 ;
*** encoding is sparse, initialize to zero;
_10_0 = 0;
_10_1 = 0;
_10_2 = 0;
_10_3 = 0;
_10_4 = 0;
_10_5 = 0;
_10_6 = 0;
_10_7 = 0;
_10_8 = 0;
if missing( GRP_MntWines ) then do;
   _10_0 = .;
   _10_1 = .;
   _10_2 = .;
   _10_3 = .;
   _10_4 = .;
   _10_5 = .;
   _10_6 = .;
   _10_7 = .;
   _10_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_MntWines , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _10_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _10_0 = -1;
                  _10_1 = -1;
                  _10_2 = -1;
                  _10_3 = -1;
                  _10_4 = -1;
                  _10_5 = -1;
                  _10_6 = -1;
                  _10_7 = -1;
                  _10_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _10_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _10_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _10_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _10_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _10_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _10_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _10_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _10_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _10_0 = .;
      _10_1 = .;
      _10_2 = .;
      _10_3 = .;
      _10_4 = .;
      _10_5 = .;
      _10_6 = .;
      _10_7 = .;
      _10_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumCatalogPurchases ;
drop _11_0 _11_1 _11_2 _11_3 _11_4 ;
*** encoding is sparse, initialize to zero;
_11_0 = 0;
_11_1 = 0;
_11_2 = 0;
_11_3 = 0;
_11_4 = 0;
if missing( GRP_NumCatalogPurchases ) then do;
   _11_0 = .;
   _11_1 = .;
   _11_2 = .;
   _11_3 = .;
   _11_4 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '4'  then do;
         if _dm12 = '3'  then do;
            _11_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _11_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '5'  then do;
            _11_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _11_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _11_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _11_0 = -1;
            _11_1 = -1;
            _11_2 = -1;
            _11_3 = -1;
            _11_4 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _11_0 = .;
      _11_1 = .;
      _11_2 = .;
      _11_3 = .;
      _11_4 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumDistPurchases ;
drop _12_0 _12_1 _12_2 _12_3 _12_4 _12_5 _12_6 _12_7 ;
*** encoding is sparse, initialize to zero;
_12_0 = 0;
_12_1 = 0;
_12_2 = 0;
_12_3 = 0;
_12_4 = 0;
_12_5 = 0;
_12_6 = 0;
_12_7 = 0;
if missing( GRP_NumDistPurchases ) then do;
   _12_0 = .;
   _12_1 = .;
   _12_2 = .;
   _12_3 = .;
   _12_4 = .;
   _12_5 = .;
   _12_6 = .;
   _12_7 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumDistPurchases , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _12_7 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _12_0 = -1;
                  _12_1 = -1;
                  _12_2 = -1;
                  _12_3 = -1;
                  _12_4 = -1;
                  _12_5 = -1;
                  _12_6 = -1;
                  _12_7 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '3'  then do;
               _12_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _12_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _12_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _12_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _12_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _12_5 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _12_6 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _12_0 = .;
      _12_1 = .;
      _12_2 = .;
      _12_3 = .;
      _12_4 = .;
      _12_5 = .;
      _12_6 = .;
      _12_7 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumWebPurchases ;
drop _13_0 _13_1 _13_2 _13_3 _13_4 _13_5 ;
*** encoding is sparse, initialize to zero;
_13_0 = 0;
_13_1 = 0;
_13_2 = 0;
_13_3 = 0;
_13_4 = 0;
_13_5 = 0;
if missing( GRP_NumWebPurchases ) then do;
   _13_0 = .;
   _13_1 = .;
   _13_2 = .;
   _13_3 = .;
   _13_4 = .;
   _13_5 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumWebPurchases , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '6'  then do;
      if _dm12 <= '4'  then do;
         if _dm12 = '3'  then do;
            _13_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _13_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '5'  then do;
            _13_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '6'  then do;
               _13_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '8'  then do;
         if _dm12 = '7'  then do;
            _13_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '8'  then do;
               _13_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '9'  then do;
            _13_0 = -1;
            _13_1 = -1;
            _13_2 = -1;
            _13_3 = -1;
            _13_4 = -1;
            _13_5 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _13_0 = .;
      _13_1 = .;
      _13_2 = .;
      _13_3 = .;
      _13_4 = .;
      _13_5 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_NumWebVisitsMonth ;
drop _14_0 _14_1 _14_2 _14_3 _14_4 _14_5 _14_6 ;
*** encoding is sparse, initialize to zero;
_14_0 = 0;
_14_1 = 0;
_14_2 = 0;
_14_3 = 0;
_14_4 = 0;
_14_5 = 0;
_14_6 = 0;
if missing( GRP_NumWebVisitsMonth ) then do;
   _14_0 = .;
   _14_1 = .;
   _14_2 = .;
   _14_3 = .;
   _14_4 = .;
   _14_5 = .;
   _14_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_NumWebVisitsMonth , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '5'  then do;
      if _dm12 <= '3'  then do;
         if _dm12 = '2'  then do;
            _14_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '3'  then do;
               _14_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '4'  then do;
            _14_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _14_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 = '6'  then do;
            _14_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '7'  then do;
               _14_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _14_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _14_0 = -1;
               _14_1 = -1;
               _14_2 = -1;
               _14_3 = -1;
               _14_4 = -1;
               _14_5 = -1;
               _14_6 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _14_0 = .;
      _14_1 = .;
      _14_2 = .;
      _14_3 = .;
      _14_4 = .;
      _14_5 = .;
      _14_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_RFMstat ;
drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 _15_7 _15_8 ;
*** encoding is sparse, initialize to zero;
_15_0 = 0;
_15_1 = 0;
_15_2 = 0;
_15_3 = 0;
_15_4 = 0;
_15_5 = 0;
_15_6 = 0;
_15_7 = 0;
_15_8 = 0;
if missing( GRP_RFMstat ) then do;
   _15_0 = .;
   _15_1 = .;
   _15_2 = .;
   _15_3 = .;
   _15_4 = .;
   _15_5 = .;
   _15_6 = .;
   _15_7 = .;
   _15_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_RFMstat , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _15_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _15_0 = -1;
                  _15_1 = -1;
                  _15_2 = -1;
                  _15_3 = -1;
                  _15_4 = -1;
                  _15_5 = -1;
                  _15_6 = -1;
                  _15_7 = -1;
                  _15_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _15_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _15_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _15_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _15_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _15_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _15_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _15_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _15_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _15_0 = .;
      _15_1 = .;
      _15_2 = .;
      _15_3 = .;
      _15_4 = .;
      _15_5 = .;
      _15_6 = .;
      _15_7 = .;
      _15_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_RMntFrq ;
drop _16_0 _16_1 _16_2 _16_3 _16_4 _16_5 _16_6 _16_7 _16_8 ;
*** encoding is sparse, initialize to zero;
_16_0 = 0;
_16_1 = 0;
_16_2 = 0;
_16_3 = 0;
_16_4 = 0;
_16_5 = 0;
_16_6 = 0;
_16_7 = 0;
_16_8 = 0;
if missing( GRP_RMntFrq ) then do;
   _16_0 = .;
   _16_1 = .;
   _16_2 = .;
   _16_3 = .;
   _16_4 = .;
   _16_5 = .;
   _16_6 = .;
   _16_7 = .;
   _16_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_RMntFrq , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _16_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _16_0 = -1;
                  _16_1 = -1;
                  _16_2 = -1;
                  _16_3 = -1;
                  _16_4 = -1;
                  _16_5 = -1;
                  _16_6 = -1;
                  _16_7 = -1;
                  _16_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _16_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _16_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _16_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _16_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _16_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _16_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _16_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _16_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _16_0 = .;
      _16_1 = .;
      _16_2 = .;
      _16_3 = .;
      _16_4 = .;
      _16_5 = .;
      _16_6 = .;
      _16_7 = .;
      _16_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GRP_Recency ;
drop _17_0 _17_1 _17_2 _17_3 _17_4 _17_5 _17_6 _17_7 _17_8 ;
*** encoding is sparse, initialize to zero;
_17_0 = 0;
_17_1 = 0;
_17_2 = 0;
_17_3 = 0;
_17_4 = 0;
_17_5 = 0;
_17_6 = 0;
_17_7 = 0;
_17_8 = 0;
if missing( GRP_Recency ) then do;
   _17_0 = .;
   _17_1 = .;
   _17_2 = .;
   _17_3 = .;
   _17_4 = .;
   _17_5 = .;
   _17_6 = .;
   _17_7 = .;
   _17_8 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GRP_Recency , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 <= '11'  then do;
            if _dm12 = '10'  then do;
               _17_8 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '11'  then do;
                  _17_0 = -1;
                  _17_1 = -1;
                  _17_2 = -1;
                  _17_3 = -1;
                  _17_4 = -1;
                  _17_5 = -1;
                  _17_6 = -1;
                  _17_7 = -1;
                  _17_8 = -1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '2'  then do;
               _17_0 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _17_1 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _17_2 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '7'  then do;
         if _dm12 <= '6'  then do;
            if _dm12 = '5'  then do;
               _17_3 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm12 = '6'  then do;
                  _17_4 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm12 = '7'  then do;
               _17_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '8'  then do;
            _17_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '9'  then do;
               _17_7 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _17_0 = .;
      _17_1 = .;
      _17_2 = .;
      _17_3 = .;
      _17_4 = .;
      _17_5 = .;
      _17_6 = .;
      _17_7 = .;
      _17_8 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.8777506112;
   _P1 = 0.1222493888;
   goto RULE3_2DR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: GRP_AcceptedCmp5 ;
_TEMP = 1;
_LP0 = _LP0 + (    0.00444190014245) * _TEMP * _1_0;

***  Effect: GRP_AcceptedCmpTotal ;
_TEMP = 1;
_LP0 = _LP0 + (    0.18350650056782) * _TEMP * _2_0;

***  Effect: GRP_Frq ;
_TEMP = 1;
_LP0 = _LP0 + (    32.8370527745968) * _TEMP * _3_0;
_LP0 = _LP0 + (    6.86909637693433) * _TEMP * _3_1;
_LP0 = _LP0 + (    5.86583015714992) * _TEMP * _3_2;
_LP0 = _LP0 + (   -15.6071220830607) * _TEMP * _3_3;
_LP0 = _LP0 + (   -6.56440170949815) * _TEMP * _3_4;
_LP0 = _LP0 + (   -4.58868472086152) * _TEMP * _3_5;
_LP0 = _LP0 + (   -5.32192145698409) * _TEMP * _3_6;
_LP0 = _LP0 + (   -3.10915153847937) * _TEMP * _3_7;
_LP0 = _LP0 + (   -4.88704461014076) * _TEMP * _3_8;

***  Effect: GRP_Income ;
_TEMP = 1;
_LP0 = _LP0 + (    22.5551460256921) * _TEMP * _4_0;
_LP0 = _LP0 + (   -11.3238206593554) * _TEMP * _4_1;
_LP0 = _LP0 + (   -6.51047890144913) * _TEMP * _4_2;
_LP0 = _LP0 + (   -1.22361321333127) * _TEMP * _4_3;
_LP0 = _LP0 + (   -3.16250533789471) * _TEMP * _4_4;
_LP0 = _LP0 + (   -4.81385828233832) * _TEMP * _4_5;
_LP0 = _LP0 + (    3.73898021836148) * _TEMP * _4_6;
_LP0 = _LP0 + (   -0.45323449226505) * _TEMP * _4_7;
_LP0 = _LP0 + (   -0.00023778892198) * _TEMP * _4_8;

***  Effect: GRP_Mnt ;
_TEMP = 1;
_LP0 = _LP0 + (   -30.0292084306303) * _TEMP * _5_0;
_LP0 = _LP0 + (   -21.3291353078395) * _TEMP * _5_1;
_LP0 = _LP0 + (    8.73846770622595) * _TEMP * _5_2;
_LP0 = _LP0 + (    19.9145633717111) * _TEMP * _5_3;
_LP0 = _LP0 + (    8.80131899851639) * _TEMP * _5_4;
_LP0 = _LP0 + (    10.2869444037957) * _TEMP * _5_5;
_LP0 = _LP0 + (    4.19743910320494) * _TEMP * _5_6;
_LP0 = _LP0 + (    0.34883189798175) * _TEMP * _5_7;
_LP0 = _LP0 + (    0.45689260353943) * _TEMP * _5_8;

***  Effect: GRP_MntFishProducts ;
_TEMP = 1;
_LP0 = _LP0 + (   -3.00668787347323) * _TEMP * _6_0;
_LP0 = _LP0 + (    2.96417425407214) * _TEMP * _6_1;
_LP0 = _LP0 + (   -1.71721151367998) * _TEMP * _6_2;
_LP0 = _LP0 + (    6.03535381214856) * _TEMP * _6_3;
_LP0 = _LP0 + (    0.61903298130611) * _TEMP * _6_4;
_LP0 = _LP0 + (   -0.73262590085098) * _TEMP * _6_5;
_LP0 = _LP0 + (   -1.33821497422998) * _TEMP * _6_6;
_LP0 = _LP0 + (   -1.38842600337823) * _TEMP * _6_7;

***  Effect: GRP_MntGoldProds ;
_TEMP = 1;
_LP0 = _LP0 + (     2.6351513698044) * _TEMP * _7_0;
_LP0 = _LP0 + (   -0.29077886820992) * _TEMP * _7_1;
_LP0 = _LP0 + (   -0.38154189637193) * _TEMP * _7_2;
_LP0 = _LP0 + (    0.09263647001917) * _TEMP * _7_3;
_LP0 = _LP0 + (   -1.27266053940252) * _TEMP * _7_4;
_LP0 = _LP0 + (    1.93835878296485) * _TEMP * _7_5;
_LP0 = _LP0 + (   -0.40624773112737) * _TEMP * _7_6;
_LP0 = _LP0 + (    1.22573033175833) * _TEMP * _7_7;
_LP0 = _LP0 + (   -2.54273316291271) * _TEMP * _7_8;

***  Effect: GRP_MntMeatProducts ;
_TEMP = 1;
_LP0 = _LP0 + (   -43.6169577705322) * _TEMP * _8_0;
_LP0 = _LP0 + (   -5.26570226343573) * _TEMP * _8_1;
_LP0 = _LP0 + (    1.10809246332714) * _TEMP * _8_2;
_LP0 = _LP0 + (    11.5602841577036) * _TEMP * _8_3;
_LP0 = _LP0 + (    8.79176358307111) * _TEMP * _8_4;
_LP0 = _LP0 + (    8.32806599457603) * _TEMP * _8_5;
_LP0 = _LP0 + (    5.12997277383786) * _TEMP * _8_6;
_LP0 = _LP0 + (    6.16543779628607) * _TEMP * _8_7;
_LP0 = _LP0 + (    3.12418780332108) * _TEMP * _8_8;

***  Effect: GRP_MntSweetProducts ;
_TEMP = 1;
_LP0 = _LP0 + (    1.99796179900468) * _TEMP * _9_0;
_LP0 = _LP0 + (    1.35825043263724) * _TEMP * _9_1;
_LP0 = _LP0 + (   -2.80847132574822) * _TEMP * _9_2;
_LP0 = _LP0 + (   -0.31198573160807) * _TEMP * _9_3;
_LP0 = _LP0 + (   -0.50872070519772) * _TEMP * _9_4;
_LP0 = _LP0 + (    0.41828699751515) * _TEMP * _9_5;
_LP0 = _LP0 + (   -0.76007088792181) * _TEMP * _9_6;
_LP0 = _LP0 + (    0.33605751989472) * _TEMP * _9_7;

***  Effect: GRP_MntWines ;
_TEMP = 1;
_LP0 = _LP0 + (    1.92606092418007) * _TEMP * _10_0;
_LP0 = _LP0 + (    9.01482765457798) * _TEMP * _10_1;
_LP0 = _LP0 + (   -0.48091761928251) * _TEMP * _10_2;
_LP0 = _LP0 + (    8.77232512763663) * _TEMP * _10_3;
_LP0 = _LP0 + (    3.19826538871518) * _TEMP * _10_4;
_LP0 = _LP0 + (   -2.27467215267902) * _TEMP * _10_5;
_LP0 = _LP0 + (   -4.86951830761304) * _TEMP * _10_6;
_LP0 = _LP0 + (   -5.12365236823539) * _TEMP * _10_7;
_LP0 = _LP0 + (   -5.82387510068754) * _TEMP * _10_8;

***  Effect: GRP_NumCatalogPurchases ;
_TEMP = 1;
_LP0 = _LP0 + (   -8.34890175680791) * _TEMP * _11_0;
_LP0 = _LP0 + (    0.88967748906628) * _TEMP * _11_1;
_LP0 = _LP0 + (    2.26756809891051) * _TEMP * _11_2;
_LP0 = _LP0 + (    0.99377802194965) * _TEMP * _11_3;
_LP0 = _LP0 + (    2.19463923023328) * _TEMP * _11_4;

***  Effect: GRP_NumDistPurchases ;
_TEMP = 1;
_LP0 = _LP0 + (   -2.41385238128166) * _TEMP * _12_0;
_LP0 = _LP0 + (    9.28987897579509) * _TEMP * _12_1;
_LP0 = _LP0 + (   -3.21145296161548) * _TEMP * _12_2;
_LP0 = _LP0 + (   -0.17086370941516) * _TEMP * _12_3;
_LP0 = _LP0 + (   -3.32079881855381) * _TEMP * _12_4;
_LP0 = _LP0 + (   -2.65189466690898) * _TEMP * _12_5;
_LP0 = _LP0 + (   -0.04654094678263) * _TEMP * _12_6;
_LP0 = _LP0 + (    1.22475760045094) * _TEMP * _12_7;

***  Effect: GRP_NumWebPurchases ;
_TEMP = 1;
_LP0 = _LP0 + (     26.233811101038) * _TEMP * _13_0;
_LP0 = _LP0 + (   -1.50041032256655) * _TEMP * _13_1;
_LP0 = _LP0 + (   -3.72985607988996) * _TEMP * _13_2;
_LP0 = _LP0 + (   -3.87587308085798) * _TEMP * _13_3;
_LP0 = _LP0 + (   -6.47752067457898) * _TEMP * _13_4;
_LP0 = _LP0 + (   -6.85368374429549) * _TEMP * _13_5;

***  Effect: GRP_NumWebVisitsMonth ;
_TEMP = 1;
_LP0 = _LP0 + (   -3.31885884923534) * _TEMP * _14_0;
_LP0 = _LP0 + (    0.21461870199874) * _TEMP * _14_1;
_LP0 = _LP0 + (   -0.60664686038299) * _TEMP * _14_2;
_LP0 = _LP0 + (   -0.41709701928719) * _TEMP * _14_3;
_LP0 = _LP0 + (   -3.04026737539157) * _TEMP * _14_4;
_LP0 = _LP0 + (    0.47625251298332) * _TEMP * _14_5;
_LP0 = _LP0 + (    3.35007151170327) * _TEMP * _14_6;

***  Effect: GRP_RFMstat ;
_TEMP = 1;
_LP0 = _LP0 + (   -13.4692718179908) * _TEMP * _15_0;
_LP0 = _LP0 + (   -2.71954455433654) * _TEMP * _15_1;
_LP0 = _LP0 + (    15.2244549376545) * _TEMP * _15_2;
_LP0 = _LP0 + (    6.06021588159925) * _TEMP * _15_3;
_LP0 = _LP0 + (    -2.3684654799514) * _TEMP * _15_4;
_LP0 = _LP0 + (   -3.63374694971658) * _TEMP * _15_5;
_LP0 = _LP0 + (    0.35694720057402) * _TEMP * _15_6;
_LP0 = _LP0 + (   -1.55370900151806) * _TEMP * _15_7;
_LP0 = _LP0 + (                   0) * _TEMP * _15_8;

***  Effect: GRP_RMntFrq ;
_TEMP = 1;
_LP0 = _LP0 + (    6.74554339410865) * _TEMP * _16_0;
_LP0 = _LP0 + (    10.1879048271018) * _TEMP * _16_1;
_LP0 = _LP0 + (   -7.81781983353313) * _TEMP * _16_2;
_LP0 = _LP0 + (   -15.0541100578888) * _TEMP * _16_3;
_LP0 = _LP0 + (   -5.68714216195974) * _TEMP * _16_4;
_LP0 = _LP0 + (   -5.94272213091022) * _TEMP * _16_5;
_LP0 = _LP0 + (     3.3643969249116) * _TEMP * _16_6;
_LP0 = _LP0 + (    3.47525844569505) * _TEMP * _16_7;
_LP0 = _LP0 + (    5.69938162873725) * _TEMP * _16_8;

***  Effect: GRP_Recency ;
_TEMP = 1;
_LP0 = _LP0 + (    0.57973451550141) * _TEMP * _17_0;
_LP0 = _LP0 + (   -0.04745238223776) * _TEMP * _17_1;
_LP0 = _LP0 + (   -1.78139794035817) * _TEMP * _17_2;
_LP0 = _LP0 + (    0.24986851788908) * _TEMP * _17_3;
_LP0 = _LP0 + (     1.8015094134961) * _TEMP * _17_4;
_LP0 = _LP0 + (   -0.89313773834128) * _TEMP * _17_5;
_LP0 = _LP0 + (    2.29852775473883) * _TEMP * _17_6;
_LP0 = _LP0 + (   -1.39718491246846) * _TEMP * _17_7;
_LP0 = _LP0 + (    1.06687756876902) * _TEMP * _17_8;

***  Effect: Year_Birth ;
_TEMP = Year_Birth ;
_LP0 = _LP0 + (   -0.00030719213241 * _TEMP);

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1;
_TEMP =     8.21232604596334 + _LP0;
if (_TEMP < 0) then do;
   _TEMP = exp(_TEMP);
   _P0 = _TEMP / (1 + _TEMP);
end;
else _P0 = 1 / (1 + exp(-_TEMP));
_P1 = 1.0 - _P0;

RULE3_2DR1:


*** Posterior Probabilities and Predicted Level;
label P__bin1 = 'Predicted: _bin=1' ;
label P__bin0 = 'Predicted: _bin=0' ;
P__bin1 = _P0;
_MAXP = _P0;
_IY = 1;
P__bin0 = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
I__bin = RULE3_2DRF[_IY];
U__bin = RULE3_2DRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;
*;
%DMNORMIP(I__bin);
if I__bin eq '1' then do;
I_DepVar = ("1");
%DMNORMCP(I_DepVar, I_DepVar);
P_DepVar1=P__bin1;
P_DepVar0 = 1-P__bin1;
end;
*;
*;
end;
*;
DROP P__bin1 P__bin0;
*------------------------------------------------------------*;
* Cleanup Model for DepVar * Null Model based on training frequencies;
*------------------------------------------------------------*;
%DMNORMIP(I__bin);
if I__bin ne '1' then do;
I_DepVar = ("1");
%DMNORMCP(I_DepVar, I_DepVar);
P_DepVar1 = 0.15122156697556;
P_DepVar0 = 0.84877843302443;
*;
end;
*;
drop I__bin U__bin;
