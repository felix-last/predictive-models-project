*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                08.46 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.46 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                08.46 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O20MHUXL
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O20MHUXL new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.46 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.46 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
681822     proc freq data=EMWS8.Rule_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Rule_VariableSet noprint;
681823     table ROLE*LEVEL/out=WORK.RuleMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.RuleMETA;
681824     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.RULE_VARIABLESET.
NOTE: The data set WORK.RULEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
681825     proc print data=WORK.RuleMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RuleMETA label noobs;
681826     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
681827     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
681827   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
681827   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
681828     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
681829     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
681830     run;
 
NOTE: There were 5 observations read from the data set WORK.RULEMETA.
NOTE: The PROCEDURE PRINT printed page 627.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
681831     title10;
MPRINT(EM_DIAGRAM):   title10;
681832     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN EMWS8 Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN EMWS8 Meta_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Rule_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Rule_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Rule_DepVar_DD
out=EMWS8.Rule_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
681879     data WORK.Rule_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Rule_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
681880     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
681881     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
681881   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
681881   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
681882        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
681882   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
681882   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
681883     set EMWS8.RULE_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.RULE_DEPVAR_DM( where=(_TYPE_="TARGET"));
681884     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
681885     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
681886     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
681887     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
681888     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
681889     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
681890     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
681891     end;
MPRINT(EM_DIAGRAM):   end;
681892     output;
MPRINT(EM_DIAGRAM):   output;
681893     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.RULE_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.RULE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
681894     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
681895     proc print data=WORK.Rule_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Rule_EVENT noobs label;
681896     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
681897     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
681898     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
681899     run;
 
NOTE: There were 1 observations read from the data set WORK.RULE_EVENT.
NOTE: The PROCEDURE PRINT printed page 628.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
681900     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
681901     proc print data = EMWS8.Rule_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Rule_DepVar_DM noobs label;
681902     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
681903     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
681904     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
681904   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
681904   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
681905     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
681906     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
681907     run;
 
NOTE: There were 7 observations read from the data set EMWS8.RULE_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 629.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
681908     title10;
MPRINT(EM_DIAGRAM):   title10;
681909     data WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):    data WORK.M1KMIG57;
681910     set WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):   set WORK.M1KMIG57;
681911     where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
681912     if (role='REJECTED') then role='INPUT';
MPRINT(EM_DIAGRAM):   if (role='REJECTED') then role='INPUT';
681913     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.M1KMIG57.
      WHERE (use='Y') or ((role='INPUT') and (use='D'));
NOTE: The data set WORK.M1KMIG57 has 33 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
681914     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
681915     * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
681916     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
681917     %macro DMDBClass;
681918         AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
681919        AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC)
681920        HigherEducationBinary(ASC) Marital_Status(ASC)
681921     %mend DMDBClass;
681922     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
681923     * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
681924     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
681925     %macro DMDBVar;
681926         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
681927        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
681928        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
681929        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
681930     %mend DMDBVar;
681931     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
681932     * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
681933     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
681934     proc dmdb batch data=EMWS8.Meta_TRAIN
681935     dmdbcat=WORK.EM_DMDB
681936     maxlevel = 513
681937     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta_TRAIN dmdbcat=WORK.EM_DMDB maxlevel =
513 ;
MPRINT(EM_DIAGRAM):   class
681938     class %DMDBClass;
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
681939     var %DMDBVar;
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
681940     target
681941     DepVar
681942     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
681943     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
681944     quit;
681945     *--- end code ---*;
 
681946     data WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):    data WORK.M1KMIG57;
681947     set WORK.M1KMIG57 end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M1KMIG57 end=eof;
681948     output;
MPRINT(EM_DIAGRAM):   output;
681949     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
681950     NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
681951     ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
681952     LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
681953     TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
681954     output;
MPRINT(EM_DIAGRAM):   output;
681955     end;
MPRINT(EM_DIAGRAM):   end;
681956     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.M1KMIG57.
NOTE: The data set WORK.M1KMIG57 has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.RULE_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
681957     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
681958     * Rule: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule: Create decision matrix;
681959     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
681960     data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
681961       length   DepVar                           $  32
681962                COUNT                                8
681963                DATAPRIOR                            8
681964                TRAINPRIOR                           8
681965                DECPRIOR                             8
681966                DECISION1                            8
681967                DECISION2                            8
681968                ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
681969
681970       label    COUNT="Level Counts"
681971                DATAPRIOR="Data Proportions"
681972                TRAINPRIOR="Training Proportions"
681973                DECPRIOR="Decision Priors"
681974                DECISION1="1"
681975                DECISION2="0"
681976                ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
681977       format   COUNT 10.
681978                ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
681979     DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
681979   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.151221567;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
681980     output;
MPRINT(EM_DIAGRAM):   output;
681981     DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
681981   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.848778433;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
681982     output;
MPRINT(EM_DIAGRAM):   output;
681983     ;
MPRINT(EM_DIAGRAM):   ;
681984     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
681985     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
681986     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
681987     label DECISION1= '1';
681988     label DECISION2= '0';
681989     run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
681990     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
681991     *------------------------------------------------------------* ;
681992     * Rule: DMDBClass Macro ;
681993     *------------------------------------------------------------* ;
681994     %macro DMDBClass;
681995         AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
681996        AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC)
681997        HigherEducationBinary(ASC) Marital_Status(ASC)
681998     %mend DMDBClass;
681999     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682000     * Rule: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBVar Macro ;
682001     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682002     %macro DMDBVar;
682003         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
682004        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
682005        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
682006        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
682007     %mend DMDBVar;
682008     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682009     * Rule: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule: Create DMDB;
682010     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682011     proc dmdb batch data=EMWS8.Meta_TRAIN
682012     dmdbcat=WORK.Rule_DMDB
682013     maxlevel = 513
682014     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta_TRAIN dmdbcat=WORK.Rule_DMDB maxlevel =
513 ;
MPRINT(EM_DIAGRAM):   class
682015     class %DMDBClass;
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
682016     var %DMDBVar;
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
682017     target
682018     DepVar
682019     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
682020     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
682021     quit;
682022     *--- end code ---*;
 
682023     data WORK.M0416Q30;
MPRINT(EM_DIAGRAM):    data WORK.M0416Q30;
682024     set WORK.M0416Q30;
MPRINT(EM_DIAGRAM):   set WORK.M0416Q30;
682025     if NAME^='DepVar' then delete;
MPRINT(EM_DIAGRAM):   if NAME^='DepVar' then delete;
682026     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M0416Q30.
NOTE: The data set WORK.M0416Q30 has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
682027     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
682028     * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
682029     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682030     %macro DMDBClass;
682031         DepVar(DESC)
682032     %mend DMDBClass;
682033     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682034     * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
682035     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682036     %macro DMDBVar;
682037
682038     %mend DMDBVar;
682039     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682040     * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
682041     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682042     proc dmdb batch data=EMWS8.Meta_TRAIN
682043     dmdbcat=WORK.EM_DMDB
682044     maxlevel = 513
682045     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta_TRAIN dmdbcat=WORK.EM_DMDB maxlevel =
513 ;
MPRINT(EM_DIAGRAM):   class
682046     class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
682047     target
682048     DepVar
682049     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
682050     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
682051     quit;
682052     *--- end code ---*;
 
682053     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
682054     * Rule Induction Training;
MPRINT(EM_DIAGRAM):   * Rule Induction Training;
682055     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
682056     * Get counts for DepVar;
MPRINT(EM_DIAGRAM):    * Get counts for DepVar;
682057     ;
MPRINT(EM_DIAGRAM):   ;
682058     data _scr(keep= _level_ DepVar);
MPRINT(EM_DIAGRAM):   data _scr(keep= _level_ DepVar);
682059     set EMWS8.Meta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_TRAIN;
682060     length _level_ $16;
MPRINT(EM_DIAGRAM):   length _level_ $16;
682061     label _level_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_rulelevel_vlabel, NOQUOTE,
682061   ! DepVar))";
MPRINT(EM_DIAGRAM):   label _level_ = "DepVar";
682062     _tmp=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp=putn(DepVar, 'best.');
682063     %DMNORMCP(_tmp, _level_);
MPRINT(DMNORMCP):   _level_=dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
682064     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: The data set WORK._SCR has 2374 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
682065     proc freq data=_scr noprint;
MPRINT(EM_DIAGRAM):   proc freq data=_scr noprint;
682066     table _level_ / out=_count;
MPRINT(EM_DIAGRAM):   table _level_ / out=_count;
682067     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._SCR.
NOTE: The data set WORK._COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682068     * Get Normalized counts for DepVar;
MPRINT(EM_DIAGRAM):    * Get Normalized counts for DepVar;
682069     ;
MPRINT(EM_DIAGRAM):   ;
682070     data _scr(keep= _level_ DepVar);
MPRINT(EM_DIAGRAM):   data _scr(keep= _level_ DepVar);
682071     set EMWS8.Meta_VALIDATE;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_VALIDATE;
682072     length _level_ $16;
MPRINT(EM_DIAGRAM):   length _level_ $16;
682073     label _level_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_rulelevel_vlabel, NOQUOTE,
682073   ! DepVar))";
MPRINT(EM_DIAGRAM):   label _level_ = "DepVar";
682074     _tmp = putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp = putn(DepVar, 'best.');
682075     %DMNORMCP(_tmp, _level_);
MPRINT(DMNORMCP):   _level_=dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
682076     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.META_VALIDATE.
NOTE: The data set WORK._SCR has 1018 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
682077     proc freq data=_scr noprint;
MPRINT(EM_DIAGRAM):   proc freq data=_scr noprint;
682078     table _level_ / out= _vcount;
MPRINT(EM_DIAGRAM):   table _level_ / out= _vcount;
682079     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._SCR.
NOTE: The data set WORK._VCOUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682080     data _vcount;
MPRINT(EM_DIAGRAM):    data _vcount;
682081     set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
682082     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
682083     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
682084     rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
682085     rename percent = vpercent;
MPRINT(EM_DIAGRAM):   rename percent = vpercent;
682086     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682087     data _count;
MPRINT(EM_DIAGRAM):   data _count;
682088     merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
682089     by _level_;
MPRINT(EM_DIAGRAM):   by _level_;
682090     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682091     data _count;
MPRINT(EM_DIAGRAM):    data _count;
682092     set _count;
MPRINT(EM_DIAGRAM):   set _count;
682093     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
682094     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
682095     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
682096     proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
682097     by DESCENDING count;
MPRINT(EM_DIAGRAM):   by DESCENDING count;
682098     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
682099     *;
682100     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_tarfreq_title, NOQUOTE, DepVar))";
MPRINT(EM_DIAGRAM):   title9 "Target=DepVar: Frequencies";
MPRINT(EM_DIAGRAM):   *;
682101     *;
682102     proc print data=_count noobs label;
MPRINT(EM_DIAGRAM):   proc print data=_count noobs label;
682103     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 630.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682104     title9;
MPRINT(EM_DIAGRAM):   title9;
682105     data WORK.M2Y696F5;
MPRINT(EM_DIAGRAM):    data WORK.M2Y696F5;
682106     set WORK.M2Y696F5;
MPRINT(EM_DIAGRAM):   set WORK.M2Y696F5;
682107     if NAME^='DepVar' then delete;
MPRINT(EM_DIAGRAM):   if NAME^='DepVar' then delete;
682108     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M2Y696F5.
NOTE: The data set WORK.M2Y696F5 has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682109     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
682110     * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
682111     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682112     %macro DMDBClass;
682113         DepVar(DESC)
682114     %mend DMDBClass;
682115     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682116     * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
682117     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682118     %macro DMDBVar;
682119
682120     %mend DMDBVar;
682121     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682122     * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
682123     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682124     proc dmdb batch data=EMWS8.Meta_TRAIN
682125     dmdbcat=WORK.EM_DMDB
682126     maxlevel = 513
682127     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta_TRAIN dmdbcat=WORK.EM_DMDB maxlevel =
513 ;
MPRINT(EM_DIAGRAM):   class
682128     class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
682129     target
682130     DepVar
682131     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
682132     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
682133     quit;
682134     *--- end code ---*;
 
682135     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
682136     * Rip Model 1;
MPRINT(EM_DIAGRAM):   * Rip Model 1;
682137     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682138     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682139     * TREE MODEL DepVar BINARY RIP1;
MPRINT(EM_DIAGRAM):   * TREE MODEL DepVar BINARY RIP1;
682140     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS8.Meta_TRAIN;
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
682141     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
682142     * Rule: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule: Create decision matrix;
682143     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682144     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682145     * Rule: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Tree Variables Macro ;
682146     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682147     %macro EM_TREEVARS;
682148         AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
682149        AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income
682150        Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
682151        MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
682152        NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
682153        NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
682154     %mend EM_TREEVARS;
682155     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682156     * Rule: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Tree Targets Macro ;
682157     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682158     %macro EM_TREETARGETS;
682159         DepVar
682160     %mend EM_TREETARGETS;
682161     data WORK.EM_Rule / view=WORK.EM_Rule;
MPRINT(EM_DIAGRAM):   data WORK.EM_Rule / view=WORK.EM_Rule;
682162     set
682162   ! EMWS8.Meta_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_TRAIN(keep
MPRINT(EM_DIAGRAM):  =AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar);
682163     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_RULE.
The SAS System
 
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682164     *------------------------------------------------------------* ;
682165     * Rule: Interval Inputs Macro ;
682166     *------------------------------------------------------------* ;
682167     %macro INTINPUTS;
682168         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
682169        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
682170        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
682171        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
682172     %mend INTINPUTS;
682173     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682174     * Rule: Binary and Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Binary and Nominal Inputs Macro ;
682175     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682176     %macro NOMINPUTS;
682177         AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
682178        Education HigherEducationBinary Marital_Status
682179     %mend NOMINPUTS;
682180     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682181     * Rule: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Ordinal Inputs Macro ;
682182     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682183     %macro ORDINPUTS;
682184
682185     %mend ORDINPUTS;
682186     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682187     * Rule: Run ARBOR procedure;
MPRINT(EM_DIAGRAM):   * Rule: Run ARBOR procedure;
682188     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
682189     proc arbor data=WORK.EM_Rule
682190     Leafsize=50
682191     Mincatsize = 5
682192     Maxdepth=4
682193     Missing=USEINSEARCH
682194     ;
MPRINT(EM_DIAGRAM):    proc arbor data=WORK.EM_Rule Leafsize=50 Mincatsize = 5 Maxdepth=4
Missing=USEINSEARCH ;
682195     ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
682196     input %INTINPUTS
MPRINT(INTINPUTS):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
682197     / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
MPRINT(EM_DIAGRAM):   input
682198     input %NOMINPUTS
MPRINT(NOMINPUTS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
Education HigherEducationBinary Marital_Status
682199     / level=nominal;
MPRINT(EM_DIAGRAM):   / level=nominal;
682200     target DepVar / level=BINARY
682201     Criterion=GINI
682202     ;
MPRINT(EM_DIAGRAM):   target DepVar / level=BINARY Criterion=GINI ;
682203     ;
MPRINT(EM_DIAGRAM):   ;
682204     Performance DISK
682205     ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
682206     Assess
682207     Validata=EMWS8.Meta_VALIDATE
682208     measure=ASE
682209     ;
MPRINT(EM_DIAGRAM):   Assess Validata=EMWS8.Meta_VALIDATE measure=ASE ;
NOTE: 1438156 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 171226112 bytes.
NOTE: Will not search for split on variable AcceptedCmp2.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Will not search for split on variable Complain.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 8 times.
NOTE: Training used 1943128 bytes of work memory.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The subtree sequence contains 13 subtrees. The largest has 25 nodes and 13 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
682210     MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: Created macro variable NLEAVES equal to 12.
682211     save
682212     MODEL=WORK.OUTTREE_TREE_22N934O
682213     SEQUENCE=WORK.OUTSEQ_TREE_22N934O
682214     IMPORTANCE=WORK.OUTIMPORT_TREE_22N934O
682215     NODESTAT=WORK.OUTNODES_TREE_22N934O
682216     SUMMARY=WORK.OUTSUMMARY_TREE_22N934O
682217     STATSBYNODE=WORK.OUTSTATS_TREE_22N934O
682218     Pathlistnonmissing = WORK.OUTPATH_TREE_22N934O
682219     Rules = WORK.OUTRULES_TREE_22N934O
682220     ;
MPRINT(EM_DIAGRAM):   save MODEL=WORK.OUTTREE_TREE_22N934O SEQUENCE=WORK.OUTSEQ_TREE_22N934O
IMPORTANCE=WORK.OUTIMPORT_TREE_22N934O NODESTAT=WORK.OUTNODES_TREE_22N934O
SUMMARY=WORK.OUTSUMMARY_TREE_22N934O STATSBYNODE=WORK.OUTSTATS_TREE_22N934O Pathlistnonmissing
= WORK.OUTPATH_TREE_22N934O Rules = WORK.OUTRULES_TREE_22N934O ;
NOTE: The data set WORK.OUTIMPORT_TREE_22N934O has 32 observations and 6 variables.
NOTE: The data set WORK.OUTTREE_TREE_22N934O has 929 observations and 4 variables.
NOTE: The data set WORK.OUTNODES_TREE_22N934O has 23 observations and 24 variables.
NOTE: The data set WORK.OUTPATH_TREE_22N934O has 89 observations and 7 variables.
NOTE: The data set WORK.OUTRULES_TREE_22N934O has 226 observations and 6 variables.
NOTE: The data set WORK.OUTSEQ_TREE_22N934O has 13 observations and 20 variables.
NOTE: The data set WORK.OUTSTATS_TREE_22N934O has 161 observations and 5 variables.
NOTE: The data set WORK.OUTSUMMARY_TREE_22N934O has 24 observations and 6 variables.
682221     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
682221   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1.sas"
682222     group=Rule
682223     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1.sas" group=Rule ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1.sas opened.
682224     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
682224   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1_res.sas"
682225     group=Rule
682226     residual
682227     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1_res.sas" group=Rule residual ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1_res.sas opened.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
682228     score data=EMWS8.Meta_TRAIN out=_ptrain
682229     ;
MPRINT(EM_DIAGRAM):   score data=EMWS8.Meta_TRAIN out=_ptrain ;
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK._PTRAIN has 2374 observations and 59 variables.
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
682230     score data=EMWS8.Meta_VALIDATE out=_pvalid
682231     ;
MPRINT(EM_DIAGRAM):   score data=EMWS8.Meta_VALIDATE out=_pvalid ;
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set WORK._PVALID has 1018 observations and 59 variables.
682232     run;
MPRINT(EM_DIAGRAM):   run;
 
682233     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View WORK.EM_RULE.VIEW used (Total process time):
      real time           0.35 seconds
      cpu time            0.34 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_RULE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.36 seconds
      cpu time            0.36 seconds
 
 
682234     data WORK.OUTIMPORT_TREE_22N934O;
MPRINT(EM_DIAGRAM):    data WORK.OUTIMPORT_TREE_22N934O;
682235     set WORK.OUTIMPORT_TREE_22N934O;
MPRINT(EM_DIAGRAM):   set WORK.OUTIMPORT_TREE_22N934O;
682236     label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL =
682236   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES =
682236   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
682237        "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES =
682237   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
682238     VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
682238   ! RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
682239     ;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of
Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules"
VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training Importance" ;
682240     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: There were 32 observations read from the data set WORK.OUTIMPORT_TREE_22N934O.
NOTE: The data set WORK.OUTIMPORT_TREE_22N934O has 32 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
682241     filename x "C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
682241   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\DESCRIBE.SOURCE" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\DESCRIBE.SOURCE" encoding='utf-8' NOBOM;
682242     data temp;
MPRINT(EM_DIAGRAM):    data temp;
682243     length varname $21;
MPRINT(EM_DIAGRAM):   length varname $21;
682244     retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
682245     set WORK.OUTPATH_TREE_22N934O;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_22N934O;
682246     if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
682247     else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
682248     output;
MPRINT(EM_DIAGRAM):   output;
682249     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 89 observations read from the data set WORK.OUTPATH_TREE_22N934O.
NOTE: The data set WORK.TEMP has 89 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
682250     proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
682251     by node;
MPRINT(EM_DIAGRAM):   by node;
682252     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 89 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 89 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682253     proc sort data=WORK.OUTNODES_TREE_22N934O out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.OUTNODES_TREE_22N934O out=outnodes;
682254     by node;
MPRINT(EM_DIAGRAM):   by node;
682255     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.OUTNODES_TREE_22N934O.
NOTE: The data set WORK.OUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682256     data temp;
MPRINT(EM_DIAGRAM):   data temp;
682257     merge temp(in=_a) outnodes(keep= node
682258     NPRIORS
682259     P_DepVar0
682260     P_DepVar1
682261     );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P_DepVar0 P_DepVar1 );
682262     by node;
MPRINT(EM_DIAGRAM):   by node;
682263     if _a;
MPRINT(EM_DIAGRAM):   if _a;
682264     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 89 observations read from the data set WORK.TEMP.
NOTE: There were 23 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 89 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
682265     proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
682266     by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
682267     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 89 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 89 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682268     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
682269     file x;
MPRINT(EM_DIAGRAM):   file x;
682270     set temp;
MPRINT(EM_DIAGRAM):   set temp;
682271     by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
682272     retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
682273     length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
682274     if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
682275     origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
682276     oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
682277     end;
MPRINT(EM_DIAGRAM):   end;
682278     if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
682279     put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
682280     put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
682281     put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
682282     end;
MPRINT(EM_DIAGRAM):   end;
682283     if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
682284     if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
682285     if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
682286     if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
682287     if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
682288     string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
682289     end;
MPRINT(EM_DIAGRAM):   end;
682290     else do;
MPRINT(EM_DIAGRAM):   else do;
682291     string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
682292     end;
MPRINT(EM_DIAGRAM):   end;
682293     end;
MPRINT(EM_DIAGRAM):   end;
682294     end;
MPRINT(EM_DIAGRAM):   end;
682295     else do;
MPRINT(EM_DIAGRAM):   else do;
682296     if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
682297     string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
682298     end;
MPRINT(EM_DIAGRAM):   end;
682299     else do;
MPRINT(EM_DIAGRAM):   else do;
682300     string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
682301     end;
MPRINT(EM_DIAGRAM):   end;
682302     end;
MPRINT(EM_DIAGRAM):   end;
682303     end;
MPRINT(EM_DIAGRAM):   end;
682304     else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
682305     if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
682306     string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
682307     end;
MPRINT(EM_DIAGRAM):   end;
682308     else do;
MPRINT(EM_DIAGRAM):   else do;
682309     string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
682310     end;
MPRINT(EM_DIAGRAM):   end;
682311     end;
MPRINT(EM_DIAGRAM):   end;
682312     else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
682313     if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
682314     string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
682315     end;
MPRINT(EM_DIAGRAM):   end;
682316     else do;
MPRINT(EM_DIAGRAM):   else do;
682317     string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
682318     end;
MPRINT(EM_DIAGRAM):   end;
682319     end;
MPRINT(EM_DIAGRAM):   end;
682320     else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
682321     if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
682322     string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
682323     end;
MPRINT(EM_DIAGRAM):   end;
682324     else do;
MPRINT(EM_DIAGRAM):   else do;
682325     string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
682326     end;
MPRINT(EM_DIAGRAM):   end;
682327     end;
MPRINT(EM_DIAGRAM):   end;
682328     if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
682329     oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
682330     end;
MPRINT(EM_DIAGRAM):   end;
682331     else do;
MPRINT(EM_DIAGRAM):   else do;
682332     if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
682333     if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
682334     if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
682335     if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||"
682335   ! "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
682336     else string= " if "|| strip(varname)||" "||strip(relation)||"
682336   ! "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
682337     end;
MPRINT(EM_DIAGRAM):   end;
682338     end;
MPRINT(EM_DIAGRAM):   end;
682339     else do;
MPRINT(EM_DIAGRAM):   else do;
682340     if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||"
682340   ! "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(character_value);
682341     else string= " if "|| strip(varname)||" "||strip(relation)||"
682341   ! "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
682342     end;
MPRINT(EM_DIAGRAM):   end;
682343     end;
MPRINT(EM_DIAGRAM):   end;
682344     else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
682345     string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
682346     end;
MPRINT(EM_DIAGRAM):   end;
682347     else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
682348     end;
MPRINT(EM_DIAGRAM):   end;
682349     if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
682350     oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
682351     end;
MPRINT(EM_DIAGRAM):   end;
682352     if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
682353     if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
682354     if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
682355     string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
682356     end;
MPRINT(EM_DIAGRAM):   end;
682357     end;
MPRINT(EM_DIAGRAM):   end;
682358     put string;
MPRINT(EM_DIAGRAM):   put string;
682359     if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
682360     oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
682361     end;
MPRINT(EM_DIAGRAM):   end;
682362     if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
682363     put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
682364     put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
682365     put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
682366     put " Predicted: DepVar=0  = " P_DepVar0;
MPRINT(EM_DIAGRAM):   put " Predicted: DepVar=0  = " P_DepVar0;
682367     put " Predicted: DepVar=1  = " P_DepVar1;
MPRINT(EM_DIAGRAM):   put " Predicted: DepVar=1  = " P_DepVar1;
682368     put " ";
MPRINT(EM_DIAGRAM):   put " ";
682369     if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
682370     oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
682371     end;
MPRINT(EM_DIAGRAM):   end;
682372     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      682288:67    682291:66    682335:108   682336:72
NOTE: The file X is:
 
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\DESCRIBE.SOURCE,
      RECFM=V,LRECL=1536,File Size (bytes)=0,
      Last Modified=28. April 2016 08.46 Uhr,
      Create Time=28. April 2016 08.46 Uhr
 
NOTE: 142 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 68.
NOTE: There were 89 observations read from the data set WORK.TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682373     filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
682374     data leafds;
MPRINT(EM_DIAGRAM):    data leafds;
682375     set WORK.OUTNODES_TREE_22N934O;
MPRINT(EM_DIAGRAM):   set WORK.OUTNODES_TREE_22N934O;
682376     if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
682377     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.OUTNODES_TREE_22N934O.
NOTE: The data set WORK.LEAFDS has 12 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682378     proc sort data=leafds;
MPRINT(EM_DIAGRAM):   proc sort data=leafds;
682379     by descending N;
MPRINT(EM_DIAGRAM):   by descending N;
682380     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.LEAFDS.
NOTE: The data set WORK.LEAFDS has 12 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Argument three to KSUBSTR exceeds the length of the input string, the function has
      recalculated the length of the string.
RIP LEAF: N=1  varid=17  nodeid=19  val=0.99159663865546  count=1071
RIP LEAF: N=2  varid=18  nodeid=19  val=0.00840336134453  count=1071
RIP LEAF: N=1  varid=17  nodeid=16  val=0.90114942528735  count=435
RIP LEAF: N=2  varid=18  nodeid=16  val=0.09885057471264  count=435
RIP LEAF: N=1  varid=17  nodeid=12  val=0.42944785276073  count=163
RIP LEAF: N=2  varid=18  nodeid=12  val=0.57055214723926  count=163
RIP LEAF: N=1  varid=17  nodeid=23  val=0.91156462585034  count=147
RIP LEAF: N=2  varid=18  nodeid=23  val=0.08843537414965  count=147
RIP LEAF: N=1  varid=17  nodeid=17  val=0.64  count=125
RIP LEAF: N=2  varid=18  nodeid=17  val=0.36  count=125
RIP LEAF: N=1  varid=17  nodeid=18  val=0.94285714285714  count=105
RIP LEAF: N=2  varid=18  nodeid=18  val=0.05714285714285  count=105
RIP LEAF: N=1  varid=17  nodeid=22  val=0.75806451612903  count=62
RIP LEAF: N=2  varid=18  nodeid=22  val=0.24193548387096  count=62
RIP LEAF: N=1  varid=17  nodeid=9  val=0.46551724137931  count=58
RIP LEAF: N=2  varid=18  nodeid=9  val=0.53448275862068  count=58
RIP LEAF: N=1  varid=17  nodeid=13  val=0.05263157894736  count=57
RIP LEAF: N=2  varid=18  nodeid=13  val=0.94736842105263  count=57
RIP LEAF: N=1  varid=17  nodeid=24  val=0.47058823529411  count=51
RIP LEAF: N=2  varid=18  nodeid=24  val=0.52941176470588  count=51
RIP LEAF: N=1  varid=17  nodeid=11  val=0.82  count=50
RIP LEAF: N=2  varid=18  nodeid=11  val=0.18  count=50
RIP LEAF: N=1  varid=17  nodeid=25  val=0.72  count=50
RIP LEAF: N=2  varid=18  nodeid=25  val=0.28  count=50
682381     * RIP1: Print leaf table;
MPRINT(EM_DIAGRAM):    * RIP1: Print leaf table;
682382     ;
MPRINT(EM_DIAGRAM):   ;
682383     data leafds;
MPRINT(EM_DIAGRAM):   data leafds;
682384     set leafds;
MPRINT(EM_DIAGRAM):   set leafds;
682385     format P_DEPVAR0 8.4;
MPRINT(EM_DIAGRAM):   format P_DEPVAR0 8.4;
682386     format P_DEPVAR1 8.4;
MPRINT(EM_DIAGRAM):   format P_DEPVAR1 8.4;
682387     ;
MPRINT(EM_DIAGRAM):   ;
682388     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.LEAFDS.
NOTE: The data set WORK.LEAFDS has 12 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682389     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_leaftable_title, NOQUOTE, RIP1, 100))";
MPRINT(EM_DIAGRAM):   title9 "RIP1 Leaf Table: Threshold= 100";
682390     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE, %nrbquote(No leaf
682390   ! was ripped from the model.)))";
MPRINT(EM_DIAGRAM):   title10 "No leaf was ripped from the model.";
682391     proc print data = leafds NOOBS LABEL;
MPRINT(EM_DIAGRAM):   proc print data = leafds NOOBS LABEL;
682392     var NODE N
682393     P_DEPVAR0
682394     P_DEPVAR1
682395     ;
MPRINT(EM_DIAGRAM):   var NODE N P_DEPVAR0 P_DEPVAR1 ;
682396     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.LEAFDS.
NOTE: The PROCEDURE PRINT printed page 631.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682397     title9;
MPRINT(EM_DIAGRAM):   title9;
682398     title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   * Create training data set with binary target for modeling;
MPRINT(EM_DIAGRAM):   ;
682399     * Create training data set with binary target for modeling;
682400     ;
682401     data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
682402     length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
682403     set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
682404     _tmp=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp=putn(DepVar, 'best.');
682405     %DMNORMIP(_tmp);
MPRINT(DMNORMIP):   call dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
682406     _tmpLevel = '0';
MPRINT(EM_DIAGRAM):   _tmpLevel = '0';
682407     %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
682408     if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
682409     else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
682410     drop _tmp _tmpLevel
682411     ;
MPRINT(EM_DIAGRAM):   drop _tmp _tmpLevel ;
682412     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 2374 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682413     * Create validation data set with binary target for modeling;
MPRINT(EM_DIAGRAM):    * Create validation data set with binary target for modeling;
682414     ;
MPRINT(EM_DIAGRAM):   ;
682415     data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
682416     length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
682417     set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
682418     _tmp = putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp = putn(DepVar, 'best.');
682419     %DMNORMIP(_TMP);
MPRINT(DMNORMIP):   call dmnorm(_TMP,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
682420     _tmpLevel = '0';
MPRINT(EM_DIAGRAM):   _tmpLevel = '0';
682421     %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
682422     if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
682423     else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
682424     drop _tmp
682425     ;
MPRINT(EM_DIAGRAM):   drop _tmp ;
682426     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 1018 observations and 61 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
682427     data _train;
MPRINT(EM_DIAGRAM):    data _train;
682428     set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
682429     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._TRAIN has 2374 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682430     data _valid;
MPRINT(EM_DIAGRAM):   data _valid;
682431     set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
682432     options validvarname=any;
MPRINT(EM_DIAGRAM):   options validvarname=any;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VALID has 1018 observations and 61 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
682433     proc contents data=work._train out=_tempAdvisor noprint;
MPRINT(EM_DIAGRAM):   proc contents data=work._train out=_tempAdvisor noprint;
682434     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 60 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682435     options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
682436     %let _dsidTable = 0;
682437     %let _engineTable =;
682438     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
682439     dsid = open('work._train');
MPRINT(EM_DIAGRAM):   dsid = open('work._train');
682440     call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EM_DIAGRAM):   call symput('_dsidTable', strip(put(dsid, best.)));
682441     if dsid then do;
MPRINT(EM_DIAGRAM):   if dsid then do;
682442     call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
682443     dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
682444     end;
MPRINT(EM_DIAGRAM):   end;
682445     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682446     options fmterr;
MPRINT(EM_DIAGRAM):    options fmterr;
682447     data _metaTestView;
MPRINT(EM_DIAGRAM):   data _metaTestView;
682448     set work._train;
MPRINT(EM_DIAGRAM):   set work._train;
682449     if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
682450     output;
MPRINT(EM_DIAGRAM):   output;
682451     stop;
MPRINT(EM_DIAGRAM):   stop;
682452     end;
MPRINT(EM_DIAGRAM):   end;
682453     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682454     proc contents data=work._train
682455     out=WORK.M30MLRKL noprint;
MPRINT(EM_DIAGRAM):    proc contents data=work._train out=WORK.M30MLRKL noprint;
682456     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.M30MLRKL has 60 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
682457     data WORK.M30MLRKL;
MPRINT(EM_DIAGRAM):    data WORK.M30MLRKL;
682458     length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $
682458   !  9;
MPRINT(EM_DIAGRAM):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1
INDEXTYPE $ 9;
682459     label NAME =;
MPRINT(EM_DIAGRAM):   label NAME =;
682460     set WORK.M30MLRKL(keep=name type length label format formatl formatd informat
682460   ! informl informd idxusage rename=(type=itype));
MPRINT(EM_DIAGRAM):   set WORK.M30MLRKL(keep=name type length label format formatl formatd
informat informl informd idxusage rename=(type=itype));
682461     if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
682462     else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
682463     if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
682464     if format ne ' ' then format = strip(format)!!strip(put(formatl,
682464   ! best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
682465     else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
682466     end;
MPRINT(EM_DIAGRAM):   end;
682467     else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
682468     if informl > 0 then do;
MPRINT(EM_DIAGRAM):   if informl > 0 then do;
682469     if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
682469   ! best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
682470     else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd,
best12.));
682471     end;
MPRINT(EM_DIAGRAM):   end;
682472     else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EM_DIAGRAM):   else if informat ne '' then informat = strip(informat)!!'.';
682473     if idxusage = 'NONE' then index ="N";
MPRINT(EM_DIAGRAM):   if idxusage = 'NONE' then index ="N";
682474     else index = "Y";
MPRINT(EM_DIAGRAM):   else index = "Y";
682475     indextype = idxusage;
MPRINT(EM_DIAGRAM):   indextype = idxusage;
682476     drop idxusage itype formatl formatd informl informd;
MPRINT(EM_DIAGRAM):   drop idxusage itype formatl formatd informl informd;
682477     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK.M30MLRKL.
NOTE: The data set WORK.M30MLRKL has 60 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682478     data WORK.M30MLRKL;
MPRINT(EM_DIAGRAM):    data WORK.M30MLRKL;
682479     length UNAME $64;
MPRINT(EM_DIAGRAM):   length UNAME $64;
682480     set WORK.M30MLRKL;
MPRINT(EM_DIAGRAM):   set WORK.M30MLRKL;
682481     UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
682482     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK.M30MLRKL.
NOTE: The data set WORK.M30MLRKL has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3C0AJ12 NOTHREADS;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
682486     data WORK.M3C0AJ12;
MPRINT(EM_DIAGRAM):    data WORK.M3C0AJ12;
682487     drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
682488     set WORK.M3C0AJ12;
MPRINT(EM_DIAGRAM):   set WORK.M3C0AJ12;
682489     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK.M3C0AJ12.
NOTE: The data set WORK.M3C0AJ12 has 60 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK.M1MKL7WO(keep=NAME ATTR);
MPRINT(EM_DIAGRAM):   length ATTR $ 20;
MPRINT(EM_DIAGRAM):   set WORK.M3C0AJ12;
MPRINT(EM_DIAGRAM):   if level ne "INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if order = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ORDER';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'FORMATTYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ROLE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'LEVEL';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if type = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'TYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if index = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'INDEX';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if report = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'REPORT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort NOTHREADS;
MPRINT(EM_DIAGRAM):   by attr;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M3C0AJ12;
MPRINT(EM_DIAGRAM):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $
10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EM_DIAGRAM):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EM_DIAGRAM):   set WORK.M3C0AJ12;
MPRINT(EM_DIAGRAM):   if formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
MPRINT(EM_DIAGRAM):   pos = indexc(format,'.1234567890');
MPRINT(EM_DIAGRAM):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EM_DIAGRAM):   else tempfmt = ' ';
MPRINT(EM_DIAGRAM):   flen = length(tempfmt);
MPRINT(EM_DIAGRAM):   select;
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype =
"TIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN"
"Z" "ZD")) formattype = "CODING";
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   formattype = "USER";
MPRINT(EM_DIAGRAM):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EM_DIAGRAM):   else if flen >= 4 then do;
MPRINT(EM_DIAGRAM):   str = substr(tempfmt,1,4);
MPRINT(EM_DIAGRAM):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EM_DIAGRAM):   else if str = "S370" then formattype = "CODING";
MPRINT(EM_DIAGRAM):   else if str = "BEST" then formattype = "NUM";
MPRINT(EM_DIAGRAM):   drop str;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop flen tempfmt pos;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   formatType = "CATEGORY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if formatType = "NUM" then do;
MPRINT(EM_DIAGRAM):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EM_DIAGRAM):   else formatType = "QUANTITY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level =
"NOMINAL";
MPRINT(EM_DIAGRAM):   else level = "INTERVAL";
MPRINT(EM_DIAGRAM):   levelAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else level = upcase(level);
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   length name_prefix $8 _uname $64;
MPRINT(EM_DIAGRAM):   drop name_prefix _uname _freqflag;
MPRINT(EM_DIAGRAM):   retain _freqflag;
MPRINT(EM_DIAGRAM):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EM_DIAGRAM):   _uname = upcase(NAME);
MPRINT(EM_DIAGRAM):   select(_uname);
MPRINT(EM_DIAGRAM):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('_NODE_') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('URI') ROLE = 'URL';
MPRINT(EM_DIAGRAM):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'FREQ';
MPRINT(EM_DIAGRAM):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(_uname, 1, '_');
MPRINT(EM_DIAGRAM):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS',
'RAT') then ROLE = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix ='B' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI',
'IC') then ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR',
'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EM_DIAGRAM):   drop _found_ i;
MPRINT(EM_DIAGRAM):   _found_=0;
MPRINT(EM_DIAGRAM):   do i=1 to 19 until(_found_=1);
MPRINT(EM_DIAGRAM):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EM_DIAGRAM):   ROLE=_ROLE_{i};
MPRINT(EM_DIAGRAM):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   _found_=1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if length(_uname)>2 then do;
MPRINT(EM_DIAGRAM):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'ID';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EM_DIAGRAM):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EM_DIAGRAM):   else role = 'INPUT';
MPRINT(EM_DIAGRAM):   roleAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else role = upcase(role);
MPRINT(EM_DIAGRAM):   if REPORT = '' then REPORT = 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc dmdb data=work._train(obs=1000000) batch classOut=_DMDB3NQ9C5N
maxLevel=22;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Custid DepVar Dt_Customer Education Element1 Element2 Element3
Element4 Frq F_DepVar Group HigherEducation HigherEducationBinary Income I_DepVar Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth P_DepVar0 P_DepVar1 Q_DepVar0 Q_DepVar1
Recency RFMstat RMntFrq R_DepVar0 R_DepVar1 Teenhome U_DepVar V_DepVar0 V_DepVar1 Year_Birth
Z_CostContact Z_Revenue _bin _dataobs_ _LEAF_ _NODE_ _WARN_
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=_DMDB3NQ9C5N noprint;
MPRINT(EM_DIAGRAM):   table name / out=_DMDBCOUNT3NQ9C5N(drop=percent rename=(count=NLEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _MISS3NQ9C5N(rename=(frequency=NMISS));
MPRINT(EM_DIAGRAM):   set _DMDB3NQ9C5N(where=(NRAW=. and CRAW=''));
MPRINT(EM_DIAGRAM):   keep name frequency;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_MISS3NQ9C5N;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_DMDBCOUNT3NQ9C5N;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _COUNTS3NQ9C5N;
MPRINT(EM_DIAGRAM):   merge _DMDBCOUNT3NQ9C5N _MISS3NQ9C5N;
MPRINT(EM_DIAGRAM):   label NLEVEL= 'Number of Category';
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if NMISS > 0 then do;
MPRINT(EM_DIAGRAM):   NLEVEL= NLEVEL-1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else NMISS = 0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=_COUNTS3NQ9C5N NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M3C0AJ12 NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.M3C0AJ12;
MPRINT(EM_DIAGRAM):   length NLEVEL 8 nmiss 8;
MPRINT(EM_DIAGRAM):   update WORK.M3C0AJ12 _COUNTS3NQ9C5N;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if name='' then name='_';
MPRINT(EM_DIAGRAM):   if levelAssigned and ROLE ne 'FREQ' then do;
MPRINT(EM_DIAGRAM):   select(NLEVEL);
MPRINT(EM_DIAGRAM):   when(.) do;
MPRINT(EM_DIAGRAM):   if type eq 'C' then level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when(0) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(1) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(2) level = 'BINARY';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if roleAssigned then do;
MPRINT(EM_DIAGRAM):   if level = 'NOMINAL' and NLEVEL > 20 then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Exceeds maximum number of levels cutoff";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = 'UNARY' and ROLE ne 'FREQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   drop NLEVEL nmiss;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EM_DIAGRAM):   drop levelAssigned roleAssigned;
MPRINT(EM_DIAGRAM):   run;
682779     data WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):    data WORK.M1KMIG57;
682780     set WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):   set WORK.M1KMIG57;
682781     if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
682782     if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
682783     if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
682784     if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
682785     if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
682786     if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
682787     if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
682788     if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
682789     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M1KMIG57.
NOTE: The data set WORK.M1KMIG57 has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
682790     data WORK.M1W6VCWY;
MPRINT(EM_DIAGRAM):    data WORK.M1W6VCWY;
682791     set WORK.M1W6VCWY;
MPRINT(EM_DIAGRAM):   set WORK.M1W6VCWY;
682792     if role='INPUT' and use='D' then use='Y';
MPRINT(EM_DIAGRAM):   if role='INPUT' and use='D' then use='Y';
682793     if NAME='_bin' then do;
MPRINT(EM_DIAGRAM):   if NAME='_bin' then do;
682794     ROLE='TARGET';
MPRINT(EM_DIAGRAM):   ROLE='TARGET';
682795     LEVEL='BINARY';
MPRINT(EM_DIAGRAM):   LEVEL='BINARY';
682796     USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
682797     end;
MPRINT(EM_DIAGRAM):   end;
682798     if NAME='DepVar' then do;
MPRINT(EM_DIAGRAM):   if NAME='DepVar' then do;
682799     ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
682800     end;
MPRINT(EM_DIAGRAM):   end;
682801     if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
682802     if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
682803     if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
682804     if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
682805     if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
682806     if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
682807     if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
682808     if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
682809     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.M1W6VCWY.
NOTE: The data set WORK.M1W6VCWY has 35 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682810     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
682811     * Binary Model DepVar = 0;
MPRINT(EM_DIAGRAM):   * Binary Model DepVar = 0;
682812     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682813     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682814     * REGRESSION MODEL DepVar binary BIN1;
MPRINT(EM_DIAGRAM):   * REGRESSION MODEL DepVar binary BIN1;
682815     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682816     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682817     * Rule: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule: Create decision matrix;
682818     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682819     data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
682820     set work._train(keep=
682821     AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
682822     AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income
682823     Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
682824     MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
682825     NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
682826     NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome _bin);
MPRINT(EM_DIAGRAM):   set work._train(keep= AcceptedCmp1 AcceptedCmp2 AcceptedCmp3
AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain DepVar Education Frq
HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome _bin);
682827     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682828     *------------------------------------------------------------* ;
682829     * Rule: DMDBClass Macro ;
682830     *------------------------------------------------------------* ;
682831     %macro DMDBClass;
682832         AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
682833        AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC)
682834        HigherEducationBinary(ASC) Marital_Status(ASC) _bin(DESC)
682835     %mend DMDBClass;
682836     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682837     * Rule: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBVar Macro ;
682838     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
682839     %macro DMDBVar;
682840         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
682841        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
682842        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
682843        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
682844     %mend DMDBVar;
682845     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682846     * Rule: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule: Create DMDB;
682847     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682848     proc dmdb batch data=WORK.EM_DMREG
682849     dmdbcat=WORK.Rule_DMDB
682850     maxlevel = 513
682851     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Rule_DMDB maxlevel = 513
;
MPRINT(EM_DIAGRAM):   class
682852     class %DMDBClass;
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC) _bin(DESC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
682853     var %DMDBVar;
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
682854     target
682855     _bin
682856     ;
MPRINT(EM_DIAGRAM):   target _bin ;
682857     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set WORK._TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
682858     quit;
682859     *--- end code ---*;
 
682860     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
682861     * Rule: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Rule: Run DMREG procedure;
682862     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
682863     proc dmreg data=EM_DMREG dmdbcat=WORK.Rule_DMDB
682864     validata = work._valid
682865     outest = WORK.DMREG_0M3J979_OUTEST
682866     outterms = WORK.DMREG_0M3J979_OUTTERMS
682867     outmap= WORK.DMREG_0M3J979_MAP namelen=200
682868     ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Rule_DMDB validata = work._valid
outest = WORK.DMREG_0M3J979_OUTEST outterms = WORK.DMREG_0M3J979_OUTTERMS outmap=
WORK.DMREG_0M3J979_MAP namelen=200 ;
682869     class
682870     _bin
682871     AcceptedCmp1
682872     AcceptedCmp2
682873     AcceptedCmp3
682874     AcceptedCmp4
682875     AcceptedCmp5
682876     Complain
682877     Education
682878     HigherEducationBinary
682879     Marital_Status
682880     ;
MPRINT(EM_DIAGRAM):   class _bin AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
682881     model _bin =
682882     AcceptedCmp1
682883     AcceptedCmp2
682884     AcceptedCmp3
682885     AcceptedCmp4
682886     AcceptedCmp5
682887     AcceptedCmpTotal
682888     Age
682889     Complain
682890     Education
682891     Frq
682892     HigherEducationBinary
682893     Income
682894     Kidhome
682895     Marital_Status
682896     Mnt
682897     MntFishProducts
682898     MntFruits
682899     MntGoldProds
682900     MntMeatProducts
682901     MntSweetProducts
682902     MntWines
682903     MonthsAsCustomer
682904     NumCatalogPurchases
682905     NumDealsPurchases
682906     NumDistPurchases
682907     NumStorePurchases
682908     NumWebPurchases
682909     NumWebVisitsMonth
682910     RFMstat
682911     RMntFrq
682912     Recency
682913     Teenhome
682914     /error=binomial link=LOGIT
682915     coding=DEVIATION
682916     nodesignprint
682917     ;
MPRINT(EM_DIAGRAM):   model _bin = AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
/error=binomial link=LOGIT coding=DEVIATION nodesignprint ;
682918     ;
MPRINT(EM_DIAGRAM):   ;
682919     score data=_train
682920     out=_ptrain(label="")
682921     ;
MPRINT(EM_DIAGRAM):   score data=_train out=_ptrain(label="") ;
682922     score data=_valid
682923     out=_pvalid(label="")
682924     ;
MPRINT(EM_DIAGRAM):   score data=_valid out=_pvalid(label="") ;
682925     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
682925   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1.sas"
682926     group=Rule_1
682927     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1.sas" group=Rule_1 ;
682928     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
682928   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1_res.sas"
682929     group=Rule_1
682930     residual
682931     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1_res.sas" group=Rule_1 residual ;
682932     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ already exists on file WORK._PTRAIN, using _WARN_2 instead.
NOTE: Variable _WARN_ already exists on file WORK._PVALID, using _WARN_2 instead.
 
NOTE: PROC DMREG is modeling the probability that _bin='1'.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1.sas opened.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1_res.sas opened.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.23 seconds
 
NOTE: There were 2374 observations read from the data set WORK._TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1018 observations read from the data set WORK._VALID.
NOTE: There were 2374 observations read from the data set WORK._TRAIN.
NOTE: There were 1018 observations read from the data set WORK._VALID.
NOTE: The data set WORK.DMREG_0M3J979_OUTEST has 3 observations and 73 variables.
NOTE: The data set WORK.DMREG_0M3J979_OUTTERMS has 39 observations and 6 variables.
NOTE: The data set WORK.DMREG_0M3J979_MAP has 2 observations and 40 variables.
NOTE: The data set WORK._PTRAIN has 2374 observations and 69 variables.
NOTE: The data set WORK._PVALID has 1018 observations and 70 variables.
NOTE: The PROCEDURE DMREG printed pages 632-633.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.23 seconds
      cpu time            0.24 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
682933     quit;
 
682934     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
682935     delete Rule_DMDB;
MPRINT(EM_DIAGRAM):   delete Rule_DMDB;
682936     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.RULE_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
682937     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
682938     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
682939     delete Rule_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Rule_DMDB / memtype=catalog;
682940     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.RULE_DMDB (memtype=CATALOG).
682941     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
682942     * BINARY: Training Classification;
MPRINT(EM_DIAGRAM):    * BINARY: Training Classification;
682943     ;
MPRINT(EM_DIAGRAM):   ;
682944     proc freq data = _ptrain noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _ptrain noprint;
682945     tables F__bin * I__bin / out = _count;
MPRINT(EM_DIAGRAM):   tables F__bin * I__bin / out = _count;
682946     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._COUNT has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
682947     data _count;
MPRINT(EM_DIAGRAM):   data _count;
682948     set _count;
MPRINT(EM_DIAGRAM):   set _count;
682949     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
682950     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
682951     label F__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F__bin = "From";
682952     label I__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I__bin = "Into";
682953     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * BINARY: Validation Classification;
MPRINT(EM_DIAGRAM):   ;
682954     * BINARY: Validation Classification;
682955     ;
682956     proc freq data = _pvalid noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _pvalid noprint;
682957     tables f__bin * i__bin / out=_vcount;
MPRINT(EM_DIAGRAM):   tables f__bin * i__bin / out=_vcount;
682958     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VCOUNT has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
682959     data _vcount;
MPRINT(EM_DIAGRAM):   data _vcount;
682960     set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
682961     length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
682962     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
682963     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
682964     label f__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label f__bin = "From";
682965     label i__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label i__bin = "Into";
682966     rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
682967     rename percent= vpercent;
MPRINT(EM_DIAGRAM):   rename percent= vpercent;
682968     key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
682969     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
682970     *;
682971     data _count;
MPRINT(EM_DIAGRAM):   data _count;
682972     set _count;
MPRINT(EM_DIAGRAM):   set _count;
682973     length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
682974     key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
682975     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Merge Train and Valid classification;
MPRINT(EM_DIAGRAM):   ;
682976     * Merge Train and Valid classification;
682977     ;
682978     proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
682979     by key;
MPRINT(EM_DIAGRAM):   by key;
682980     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
682981     proc sort data=_vcount;
MPRINT(EM_DIAGRAM):   proc sort data=_vcount;
682982     by key;
MPRINT(EM_DIAGRAM):   by key;
682983     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
682984     *;
682985     data _count;
MPRINT(EM_DIAGRAM):   data _count;
682986     merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
682987     by key;
MPRINT(EM_DIAGRAM):   by key;
682988     drop key;
MPRINT(EM_DIAGRAM):   drop key;
682989     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: There were 4 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 4 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *BINARY: Print Classification;
MPRINT(EM_DIAGRAM):   ;
682990     *BINARY: Print Classification;
682991     ;
682992     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_binmodel_title, NOQUOTE, DepVar,
682992   ! %nrbquote(0)))";
MPRINT(EM_DIAGRAM):   title9 "Binary Model DepVar = 0";
682993     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
682994     proc print data = _count noobs label;
MPRINT(EM_DIAGRAM):   proc print data = _count noobs label;
682995     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 634.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
682996     title9;
MPRINT(EM_DIAGRAM):   title9;
682997     title10;
MPRINT(EM_DIAGRAM):   title10;
682998     * Extract misfit training values;
MPRINT(EM_DIAGRAM):    * Extract misfit training values;
682999     ;
MPRINT(EM_DIAGRAM):   ;
683000     data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
683001     set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
683002     if not ( I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not ( I__bin eq '1' and F__bin eq '1') then output;
683003     keep
683004     AcceptedCmp1
683005     AcceptedCmp2
683006     AcceptedCmp3
683007     AcceptedCmp4
683008     AcceptedCmp5
683009     AcceptedCmpTotal
683010     Age
683011     Complain
683012     Education
683013     Frq
683014     HigherEducationBinary
683015     Income
683016     Kidhome
683017     Marital_Status
683018     Mnt
683019     MntFishProducts
683020     MntFruits
683021     MntGoldProds
683022     MntMeatProducts
683023     MntSweetProducts
683024     MntWines
683025     MonthsAsCustomer
683026     NumCatalogPurchases
683027     NumDealsPurchases
683028     NumDistPurchases
683029     NumStorePurchases
683030     NumWebPurchases
683031     NumWebVisitsMonth
683032     RFMstat
683033     RMntFrq
683034     Recency
683035     Teenhome
683036     DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
683037     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 410 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Extract misfit validation values;
MPRINT(EM_DIAGRAM):   ;
683038     * Extract misfit validation values;
683039     ;
683040     data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
683041     set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
683042     if not (I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not (I__bin eq '1' and F__bin eq '1') then output;
683043     keep
683044     AcceptedCmp1
683045     AcceptedCmp2
683046     AcceptedCmp3
683047     AcceptedCmp4
683048     AcceptedCmp5
683049     AcceptedCmpTotal
683050     Age
683051     Complain
683052     Education
683053     Frq
683054     HigherEducationBinary
683055     Income
683056     Kidhome
683057     Marital_Status
683058     Mnt
683059     MntFishProducts
683060     MntFruits
683061     MntGoldProds
683062     MntMeatProducts
683063     MntSweetProducts
683064     MntWines
683065     MonthsAsCustomer
683066     NumCatalogPurchases
683067     NumDealsPurchases
683068     NumDistPurchases
683069     NumStorePurchases
683070     NumWebPurchases
683071     NumWebVisitsMonth
683072     RFMstat
683073     RMntFrq
683074     Recency
683075     Teenhome
683076     DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
683077     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 180 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683078     * Create training data set with binary target for modeling;
MPRINT(EM_DIAGRAM):    * Create training data set with binary target for modeling;
683079     ;
MPRINT(EM_DIAGRAM):   ;
683080     data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
683081     length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
683082     set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
683083     _tmp=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp=putn(DepVar, 'best.');
683084     %DMNORMIP(_tmp);
MPRINT(DMNORMIP):   call dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
683085     _tmpLevel = '1';
MPRINT(EM_DIAGRAM):   _tmpLevel = '1';
683086     %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
683087     if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
683088     else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
683089     drop _tmp _tmpLevel
683090     ;
MPRINT(EM_DIAGRAM):   drop _tmp _tmpLevel ;
683091     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 410 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 410 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683092     * Create validation data set with binary target for modeling;
MPRINT(EM_DIAGRAM):    * Create validation data set with binary target for modeling;
683093     ;
MPRINT(EM_DIAGRAM):   ;
683094     data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
683095     length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
683096     set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
683097     _tmp = putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp = putn(DepVar, 'best.');
683098     %DMNORMIP(_TMP);
MPRINT(DMNORMIP):   call dmnorm(_TMP,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
683099     _tmpLevel = '1';
MPRINT(EM_DIAGRAM):   _tmpLevel = '1';
683100     %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
683101     if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
683102     else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
683103     drop _tmp
683104     ;
MPRINT(EM_DIAGRAM):   drop _tmp ;
683105     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 180 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683106     data _train;
MPRINT(EM_DIAGRAM):    data _train;
683107     set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
683108     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 410 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._TRAIN has 410 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683109     data _valid;
MPRINT(EM_DIAGRAM):   data _valid;
683110     set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
683111     options validvarname=any;
MPRINT(EM_DIAGRAM):   options validvarname=any;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VALID has 180 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683112     proc contents data=work._train out=_tempAdvisor noprint;
MPRINT(EM_DIAGRAM):   proc contents data=work._train out=_tempAdvisor noprint;
683113     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683114     options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
683115     %let _dsidTable = 0;
683116     %let _engineTable =;
683117     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
683118     dsid = open('work._train');
MPRINT(EM_DIAGRAM):   dsid = open('work._train');
683119     call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EM_DIAGRAM):   call symput('_dsidTable', strip(put(dsid, best.)));
683120     if dsid then do;
MPRINT(EM_DIAGRAM):   if dsid then do;
683121     call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
683122     dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
683123     end;
MPRINT(EM_DIAGRAM):   end;
683124     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683125     options fmterr;
MPRINT(EM_DIAGRAM):    options fmterr;
683126     data _metaTestView;
MPRINT(EM_DIAGRAM):   data _metaTestView;
683127     set work._train;
MPRINT(EM_DIAGRAM):   set work._train;
683128     if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
683129     output;
MPRINT(EM_DIAGRAM):   output;
683130     stop;
MPRINT(EM_DIAGRAM):   stop;
683131     end;
MPRINT(EM_DIAGRAM):   end;
683132     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683133     proc contents data=work._train
683134     out=WORK.M3E5T67Q noprint;
MPRINT(EM_DIAGRAM):    proc contents data=work._train out=WORK.M3E5T67Q noprint;
683135     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.M3E5T67Q has 34 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683136     data WORK.M3E5T67Q;
MPRINT(EM_DIAGRAM):    data WORK.M3E5T67Q;
683137     length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $
683137   !  9;
MPRINT(EM_DIAGRAM):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1
INDEXTYPE $ 9;
683138     label NAME =;
MPRINT(EM_DIAGRAM):   label NAME =;
683139     set WORK.M3E5T67Q(keep=name type length label format formatl formatd informat
683139   ! informl informd idxusage rename=(type=itype));
MPRINT(EM_DIAGRAM):   set WORK.M3E5T67Q(keep=name type length label format formatl formatd
informat informl informd idxusage rename=(type=itype));
683140     if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
683141     else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
683142     if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
683143     if format ne ' ' then format = strip(format)!!strip(put(formatl,
683143   ! best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
683144     else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
683145     end;
MPRINT(EM_DIAGRAM):   end;
683146     else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
683147     if informl > 0 then do;
MPRINT(EM_DIAGRAM):   if informl > 0 then do;
683148     if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
683148   ! best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
683149     else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd,
best12.));
683150     end;
MPRINT(EM_DIAGRAM):   end;
683151     else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EM_DIAGRAM):   else if informat ne '' then informat = strip(informat)!!'.';
683152     if idxusage = 'NONE' then index ="N";
MPRINT(EM_DIAGRAM):   if idxusage = 'NONE' then index ="N";
683153     else index = "Y";
MPRINT(EM_DIAGRAM):   else index = "Y";
683154     indextype = idxusage;
MPRINT(EM_DIAGRAM):   indextype = idxusage;
683155     drop idxusage itype formatl formatd informl informd;
MPRINT(EM_DIAGRAM):   drop idxusage itype formatl formatd informl informd;
683156     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M3E5T67Q.
NOTE: The data set WORK.M3E5T67Q has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683157     data WORK.M3E5T67Q;
MPRINT(EM_DIAGRAM):    data WORK.M3E5T67Q;
683158     length UNAME $64;
MPRINT(EM_DIAGRAM):   length UNAME $64;
683159     set WORK.M3E5T67Q;
MPRINT(EM_DIAGRAM):   set WORK.M3E5T67Q;
683160     UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
683161     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M3E5T67Q.
NOTE: The data set WORK.M3E5T67Q has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M2NM5GS2 NOTHREADS;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
683165     data WORK.M2NM5GS2;
MPRINT(EM_DIAGRAM):    data WORK.M2NM5GS2;
683166     drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
683167     set WORK.M2NM5GS2;
MPRINT(EM_DIAGRAM):   set WORK.M2NM5GS2;
683168     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M2NM5GS2.
NOTE: The data set WORK.M2NM5GS2 has 34 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK.M2_0FITZ(keep=NAME ATTR);
MPRINT(EM_DIAGRAM):   length ATTR $ 20;
MPRINT(EM_DIAGRAM):   set WORK.M2NM5GS2;
MPRINT(EM_DIAGRAM):   if level ne "INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if order = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ORDER';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'FORMATTYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ROLE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'LEVEL';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if type = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'TYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if index = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'INDEX';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if report = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'REPORT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort NOTHREADS;
MPRINT(EM_DIAGRAM):   by attr;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M2NM5GS2;
MPRINT(EM_DIAGRAM):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $
10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EM_DIAGRAM):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EM_DIAGRAM):   set WORK.M2NM5GS2;
MPRINT(EM_DIAGRAM):   if formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
MPRINT(EM_DIAGRAM):   pos = indexc(format,'.1234567890');
MPRINT(EM_DIAGRAM):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EM_DIAGRAM):   else tempfmt = ' ';
MPRINT(EM_DIAGRAM):   flen = length(tempfmt);
MPRINT(EM_DIAGRAM):   select;
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype =
"TIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN"
"Z" "ZD")) formattype = "CODING";
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   formattype = "USER";
MPRINT(EM_DIAGRAM):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EM_DIAGRAM):   else if flen >= 4 then do;
MPRINT(EM_DIAGRAM):   str = substr(tempfmt,1,4);
MPRINT(EM_DIAGRAM):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EM_DIAGRAM):   else if str = "S370" then formattype = "CODING";
MPRINT(EM_DIAGRAM):   else if str = "BEST" then formattype = "NUM";
MPRINT(EM_DIAGRAM):   drop str;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop flen tempfmt pos;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   formatType = "CATEGORY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if formatType = "NUM" then do;
MPRINT(EM_DIAGRAM):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EM_DIAGRAM):   else formatType = "QUANTITY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level =
"NOMINAL";
MPRINT(EM_DIAGRAM):   else level = "INTERVAL";
MPRINT(EM_DIAGRAM):   levelAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else level = upcase(level);
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   length name_prefix $8 _uname $64;
MPRINT(EM_DIAGRAM):   drop name_prefix _uname _freqflag;
MPRINT(EM_DIAGRAM):   retain _freqflag;
MPRINT(EM_DIAGRAM):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EM_DIAGRAM):   _uname = upcase(NAME);
MPRINT(EM_DIAGRAM):   select(_uname);
MPRINT(EM_DIAGRAM):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('_NODE_') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('URI') ROLE = 'URL';
MPRINT(EM_DIAGRAM):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'FREQ';
MPRINT(EM_DIAGRAM):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(_uname, 1, '_');
MPRINT(EM_DIAGRAM):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS',
'RAT') then ROLE = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix ='B' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI',
'IC') then ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR',
'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EM_DIAGRAM):   drop _found_ i;
MPRINT(EM_DIAGRAM):   _found_=0;
MPRINT(EM_DIAGRAM):   do i=1 to 19 until(_found_=1);
MPRINT(EM_DIAGRAM):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EM_DIAGRAM):   ROLE=_ROLE_{i};
MPRINT(EM_DIAGRAM):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   _found_=1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if length(_uname)>2 then do;
MPRINT(EM_DIAGRAM):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'ID';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EM_DIAGRAM):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EM_DIAGRAM):   else role = 'INPUT';
MPRINT(EM_DIAGRAM):   roleAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else role = upcase(role);
MPRINT(EM_DIAGRAM):   if REPORT = '' then REPORT = 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc dmdb data=work._train(obs=1000000) batch classOut=_DMDB3OOB33S
maxLevel=22;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth Recency RFMstat RMntFrq Teenhome _bin
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=_DMDB3OOB33S noprint;
MPRINT(EM_DIAGRAM):   table name / out=_DMDBCOUNT3OOB33S(drop=percent rename=(count=NLEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _MISS3OOB33S(rename=(frequency=NMISS));
MPRINT(EM_DIAGRAM):   set _DMDB3OOB33S(where=(NRAW=. and CRAW=''));
MPRINT(EM_DIAGRAM):   keep name frequency;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_MISS3OOB33S;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_DMDBCOUNT3OOB33S;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _COUNTS3OOB33S;
MPRINT(EM_DIAGRAM):   merge _DMDBCOUNT3OOB33S _MISS3OOB33S;
MPRINT(EM_DIAGRAM):   label NLEVEL= 'Number of Category';
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if NMISS > 0 then do;
MPRINT(EM_DIAGRAM):   NLEVEL= NLEVEL-1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else NMISS = 0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=_COUNTS3OOB33S NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M2NM5GS2 NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.M2NM5GS2;
MPRINT(EM_DIAGRAM):   length NLEVEL 8 nmiss 8;
MPRINT(EM_DIAGRAM):   update WORK.M2NM5GS2 _COUNTS3OOB33S;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if name='' then name='_';
MPRINT(EM_DIAGRAM):   if levelAssigned and ROLE ne 'FREQ' then do;
MPRINT(EM_DIAGRAM):   select(NLEVEL);
MPRINT(EM_DIAGRAM):   when(.) do;
MPRINT(EM_DIAGRAM):   if type eq 'C' then level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when(0) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(1) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(2) level = 'BINARY';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if roleAssigned then do;
MPRINT(EM_DIAGRAM):   if level = 'NOMINAL' and NLEVEL > 20 then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Exceeds maximum number of levels cutoff";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = 'UNARY' and ROLE ne 'FREQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   drop NLEVEL nmiss;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EM_DIAGRAM):   drop levelAssigned roleAssigned;
MPRINT(EM_DIAGRAM):   run;
683454     data WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):    data WORK.M1KMIG57;
683455     set WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):   set WORK.M1KMIG57;
683456     if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
683457     if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
683458     if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
683459     if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
683460     if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
683461     if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
683462     if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
683463     if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
683464     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M1KMIG57.
NOTE: The data set WORK.M1KMIG57 has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683465     data WORK.M0T9VXF1;
MPRINT(EM_DIAGRAM):    data WORK.M0T9VXF1;
683466     set WORK.M0T9VXF1;
MPRINT(EM_DIAGRAM):   set WORK.M0T9VXF1;
683467     if role='INPUT' and use='D' then use='Y';
MPRINT(EM_DIAGRAM):   if role='INPUT' and use='D' then use='Y';
683468     if NAME='_bin' then do;
MPRINT(EM_DIAGRAM):   if NAME='_bin' then do;
683469     ROLE='TARGET';
MPRINT(EM_DIAGRAM):   ROLE='TARGET';
683470     LEVEL='BINARY';
MPRINT(EM_DIAGRAM):   LEVEL='BINARY';
683471     USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
683472     end;
MPRINT(EM_DIAGRAM):   end;
683473     if NAME='DepVar' then do;
MPRINT(EM_DIAGRAM):   if NAME='DepVar' then do;
683474     ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
683475     end;
MPRINT(EM_DIAGRAM):   end;
683476     if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
683477     if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
683478     if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
683479     if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
683480     if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
683481     if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
683482     if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
683483     if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
683484     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.M0T9VXF1.
NOTE: The data set WORK.M0T9VXF1 has 35 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683485     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
683486     * Binary Model DepVar = 1;
MPRINT(EM_DIAGRAM):   * Binary Model DepVar = 1;
683487     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683488     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683489     * REGRESSION MODEL DepVar binary BIN2;
MPRINT(EM_DIAGRAM):   * REGRESSION MODEL DepVar binary BIN2;
683490     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683491     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683492     * Rule: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule: Create decision matrix;
683493     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683494     data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
683495     set work._train(keep=
683496     AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
683497     AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income
683498     Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
683499     MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
683500     NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
683501     NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome _bin);
MPRINT(EM_DIAGRAM):   set work._train(keep= AcceptedCmp1 AcceptedCmp2 AcceptedCmp3
AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain DepVar Education Frq
HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome _bin);
683502     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
683503     *------------------------------------------------------------* ;
683504     * Rule: DMDBClass Macro ;
683505     *------------------------------------------------------------* ;
683506     %macro DMDBClass;
683507         AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
683508        AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC)
683509        HigherEducationBinary(ASC) Marital_Status(ASC) _bin(DESC)
683510     %mend DMDBClass;
683511     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
683512     * Rule: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBVar Macro ;
683513     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
683514     %macro DMDBVar;
683515         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
683516        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
683517        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
683518        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
683519     %mend DMDBVar;
683520     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683521     * Rule: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule: Create DMDB;
683522     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683523     proc dmdb batch data=WORK.EM_DMREG
683524     dmdbcat=WORK.Rule_DMDB
683525     maxlevel = 513
683526     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Rule_DMDB maxlevel = 513
;
MPRINT(EM_DIAGRAM):   class
683527     class %DMDBClass;
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC) _bin(DESC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
683528     var %DMDBVar;
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
683529     target
683530     _bin
683531     ;
MPRINT(EM_DIAGRAM):   target _bin ;
683532     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 410   Memory used = 511K.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 410 observations read from the data set WORK._TRAIN.
NOTE: There were 410 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
683533     quit;
683534     *--- end code ---*;
 
683535     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
683536     * Rule: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Rule: Run DMREG procedure;
683537     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
683538     proc dmreg data=EM_DMREG dmdbcat=WORK.Rule_DMDB
683539     validata = work._valid
683540     outest = WORK.DMREG_2650AFG_OUTEST
683541     outterms = WORK.DMREG_2650AFG_OUTTERMS
683542     outmap= WORK.DMREG_2650AFG_MAP namelen=200
683543     ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Rule_DMDB validata = work._valid
outest = WORK.DMREG_2650AFG_OUTEST outterms = WORK.DMREG_2650AFG_OUTTERMS outmap=
WORK.DMREG_2650AFG_MAP namelen=200 ;
683544     class
683545     _bin
683546     AcceptedCmp1
683547     AcceptedCmp2
683548     AcceptedCmp3
683549     AcceptedCmp4
683550     AcceptedCmp5
683551     Complain
683552     Education
683553     HigherEducationBinary
683554     Marital_Status
683555     ;
MPRINT(EM_DIAGRAM):   class _bin AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
683556     model _bin =
683557     AcceptedCmp1
683558     AcceptedCmp2
683559     AcceptedCmp3
683560     AcceptedCmp4
683561     AcceptedCmp5
683562     AcceptedCmpTotal
683563     Age
683564     Complain
683565     Education
683566     Frq
683567     HigherEducationBinary
683568     Income
683569     Kidhome
683570     Marital_Status
683571     Mnt
683572     MntFishProducts
683573     MntFruits
683574     MntGoldProds
683575     MntMeatProducts
683576     MntSweetProducts
683577     MntWines
683578     MonthsAsCustomer
683579     NumCatalogPurchases
683580     NumDealsPurchases
683581     NumDistPurchases
683582     NumStorePurchases
683583     NumWebPurchases
683584     NumWebVisitsMonth
683585     RFMstat
683586     RMntFrq
683587     Recency
683588     Teenhome
683589     /error=binomial link=LOGIT
683590     coding=DEVIATION
683591     nodesignprint
683592     ;
MPRINT(EM_DIAGRAM):   model _bin = AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
/error=binomial link=LOGIT coding=DEVIATION nodesignprint ;
683593     ;
MPRINT(EM_DIAGRAM):   ;
683594     score data=_train
683595     out=_ptrain(label="")
683596     ;
MPRINT(EM_DIAGRAM):   score data=_train out=_ptrain(label="") ;
683597     score data=_valid
683598     out=_pvalid(label="")
683599     ;
MPRINT(EM_DIAGRAM):   score data=_valid out=_pvalid(label="") ;
683600     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
683600   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2.sas"
683601     group=Rule_2
683602     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2.sas" group=Rule_2 ;
683603     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
683603   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2_res.sas"
683604     group=Rule_2
683605     residual
683606     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2_res.sas" group=Rule_2 residual ;
683607     run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that _bin='1'.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2.sas opened.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2_res.sas opened.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 410 observations read from the data set WORK._TRAIN.
NOTE: There were 410 observations read from the data set WORK.EM_DMREG.
NOTE: There were 180 observations read from the data set WORK._VALID.
NOTE: There were 410 observations read from the data set WORK._TRAIN.
NOTE: There were 180 observations read from the data set WORK._VALID.
NOTE: The data set WORK.DMREG_2650AFG_OUTEST has 3 observations and 73 variables.
NOTE: The data set WORK.DMREG_2650AFG_OUTTERMS has 39 observations and 6 variables.
NOTE: The data set WORK.DMREG_2650AFG_MAP has 2 observations and 40 variables.
NOTE: The data set WORK._PTRAIN has 410 observations and 43 variables.
NOTE: The data set WORK._PVALID has 180 observations and 44 variables.
NOTE: The PROCEDURE DMREG printed pages 635-636.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
683608     quit;
 
683609     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
683610     delete Rule_DMDB;
MPRINT(EM_DIAGRAM):   delete Rule_DMDB;
683611     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.RULE_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
683612     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
683613     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
683614     delete Rule_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Rule_DMDB / memtype=catalog;
683615     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.RULE_DMDB (memtype=CATALOG).
683616     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
683617     * BINARY: Training Classification;
MPRINT(EM_DIAGRAM):    * BINARY: Training Classification;
683618     ;
MPRINT(EM_DIAGRAM):   ;
683619     proc freq data = _ptrain noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _ptrain noprint;
683620     tables F__bin * I__bin / out = _count;
MPRINT(EM_DIAGRAM):   tables F__bin * I__bin / out = _count;
683621     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 410 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._COUNT has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
683622     data _count;
MPRINT(EM_DIAGRAM):   data _count;
683623     set _count;
MPRINT(EM_DIAGRAM):   set _count;
683624     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
683625     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
683626     label F__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F__bin = "From";
683627     label I__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I__bin = "Into";
683628     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   * BINARY: Validation Classification;
MPRINT(EM_DIAGRAM):   ;
683629     * BINARY: Validation Classification;
683630     ;
683631     proc freq data = _pvalid noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _pvalid noprint;
683632     tables f__bin * i__bin / out=_vcount;
MPRINT(EM_DIAGRAM):   tables f__bin * i__bin / out=_vcount;
683633     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VCOUNT has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
683634     data _vcount;
MPRINT(EM_DIAGRAM):   data _vcount;
683635     set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
683636     length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
683637     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
683638     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
683639     label f__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label f__bin = "From";
683640     label i__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label i__bin = "Into";
683641     rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
683642     rename percent= vpercent;
MPRINT(EM_DIAGRAM):   rename percent= vpercent;
683643     key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
683644     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
683645     *;
683646     data _count;
MPRINT(EM_DIAGRAM):   data _count;
683647     set _count;
MPRINT(EM_DIAGRAM):   set _count;
683648     length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
683649     key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
683650     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 3 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Merge Train and Valid classification;
MPRINT(EM_DIAGRAM):   ;
683651     * Merge Train and Valid classification;
683652     ;
683653     proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
683654     by key;
MPRINT(EM_DIAGRAM):   by key;
683655     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683656     proc sort data=_vcount;
MPRINT(EM_DIAGRAM):   proc sort data=_vcount;
683657     by key;
MPRINT(EM_DIAGRAM):   by key;
683658     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
683659     *;
683660     data _count;
MPRINT(EM_DIAGRAM):   data _count;
683661     merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
683662     by key;
MPRINT(EM_DIAGRAM):   by key;
683663     drop key;
MPRINT(EM_DIAGRAM):   drop key;
683664     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *BINARY: Print Classification;
MPRINT(EM_DIAGRAM):   ;
683665     *BINARY: Print Classification;
683666     ;
683667     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_binmodel_title, NOQUOTE, DepVar,
683667   ! %nrbquote(1)))";
MPRINT(EM_DIAGRAM):   title9 "Binary Model DepVar = 1";
683668     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
683669     proc print data = _count noobs label;
MPRINT(EM_DIAGRAM):   proc print data = _count noobs label;
683670     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 637.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683671     title9;
MPRINT(EM_DIAGRAM):   title9;
683672     title10;
MPRINT(EM_DIAGRAM):   title10;
683673     * Extract misfit training values;
MPRINT(EM_DIAGRAM):    * Extract misfit training values;
683674     ;
MPRINT(EM_DIAGRAM):   ;
683675     data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
683676     set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
683677     if not ( I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not ( I__bin eq '1' and F__bin eq '1') then output;
683678     keep
683679     AcceptedCmp1
683680     AcceptedCmp2
683681     AcceptedCmp3
683682     AcceptedCmp4
683683     AcceptedCmp5
683684     AcceptedCmpTotal
683685     Age
683686     Complain
683687     Education
683688     Frq
683689     HigherEducationBinary
683690     Income
683691     Kidhome
683692     Marital_Status
683693     Mnt
683694     MntFishProducts
683695     MntFruits
683696     MntGoldProds
683697     MntMeatProducts
683698     MntSweetProducts
683699     MntWines
683700     MonthsAsCustomer
683701     NumCatalogPurchases
683702     NumDealsPurchases
683703     NumDistPurchases
683704     NumStorePurchases
683705     NumWebPurchases
683706     NumWebVisitsMonth
683707     RFMstat
683708     RMntFrq
683709     Recency
683710     Teenhome
683711     DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
683712     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 410 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 52 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Extract misfit validation values;
MPRINT(EM_DIAGRAM):   ;
683713     * Extract misfit validation values;
683714     ;
683715     data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
683716     set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
683717     if not (I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not (I__bin eq '1' and F__bin eq '1') then output;
683718     keep
683719     AcceptedCmp1
683720     AcceptedCmp2
683721     AcceptedCmp3
683722     AcceptedCmp4
683723     AcceptedCmp5
683724     AcceptedCmpTotal
683725     Age
683726     Complain
683727     Education
683728     Frq
683729     HigherEducationBinary
683730     Income
683731     Kidhome
683732     Marital_Status
683733     Mnt
683734     MntFishProducts
683735     MntFruits
683736     MntGoldProds
683737     MntMeatProducts
683738     MntSweetProducts
683739     MntWines
683740     MonthsAsCustomer
683741     NumCatalogPurchases
683742     NumDealsPurchases
683743     NumDistPurchases
683744     NumStorePurchases
683745     NumWebPurchases
683746     NumWebVisitsMonth
683747     RFMstat
683748     RMntFrq
683749     Recency
683750     Teenhome
683751     DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
683752     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 25 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683753     data _train;
MPRINT(EM_DIAGRAM):    data _train;
683754     set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
683755     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._TRAIN has 52 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683756     data _valid;
MPRINT(EM_DIAGRAM):   data _valid;
683757     set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
683758     options validvarname=any;
MPRINT(EM_DIAGRAM):   options validvarname=any;
 
NOTE: There were 25 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VALID has 25 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683759     proc contents data=work._train out=_tempAdvisor noprint;
MPRINT(EM_DIAGRAM):   proc contents data=work._train out=_tempAdvisor noprint;
683760     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 33 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683761     options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
683762     %let _dsidTable = 0;
683763     %let _engineTable =;
683764     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
683765     dsid = open('work._train');
MPRINT(EM_DIAGRAM):   dsid = open('work._train');
683766     call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EM_DIAGRAM):   call symput('_dsidTable', strip(put(dsid, best.)));
683767     if dsid then do;
MPRINT(EM_DIAGRAM):   if dsid then do;
683768     call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
683769     dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
683770     end;
MPRINT(EM_DIAGRAM):   end;
683771     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683772     options fmterr;
MPRINT(EM_DIAGRAM):    options fmterr;
683773     data _metaTestView;
MPRINT(EM_DIAGRAM):   data _metaTestView;
683774     set work._train;
MPRINT(EM_DIAGRAM):   set work._train;
683775     if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
683776     output;
MPRINT(EM_DIAGRAM):   output;
683777     stop;
MPRINT(EM_DIAGRAM):   stop;
683778     end;
MPRINT(EM_DIAGRAM):   end;
683779     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683780     proc contents data=work._train
683781     out=WORK.M136G1HC noprint;
MPRINT(EM_DIAGRAM):    proc contents data=work._train out=WORK.M136G1HC noprint;
683782     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.M136G1HC has 33 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
683783     data WORK.M136G1HC;
MPRINT(EM_DIAGRAM):    data WORK.M136G1HC;
683784     length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $
683784   !  9;
MPRINT(EM_DIAGRAM):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1
INDEXTYPE $ 9;
683785     label NAME =;
MPRINT(EM_DIAGRAM):   label NAME =;
683786     set WORK.M136G1HC(keep=name type length label format formatl formatd informat
683786   ! informl informd idxusage rename=(type=itype));
MPRINT(EM_DIAGRAM):   set WORK.M136G1HC(keep=name type length label format formatl formatd
informat informl informd idxusage rename=(type=itype));
683787     if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
683788     else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
683789     if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
683790     if format ne ' ' then format = strip(format)!!strip(put(formatl,
683790   ! best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
683791     else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
683792     end;
MPRINT(EM_DIAGRAM):   end;
683793     else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
683794     if informl > 0 then do;
MPRINT(EM_DIAGRAM):   if informl > 0 then do;
683795     if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
683795   ! best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
683796     else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd,
best12.));
683797     end;
MPRINT(EM_DIAGRAM):   end;
683798     else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EM_DIAGRAM):   else if informat ne '' then informat = strip(informat)!!'.';
683799     if idxusage = 'NONE' then index ="N";
MPRINT(EM_DIAGRAM):   if idxusage = 'NONE' then index ="N";
683800     else index = "Y";
MPRINT(EM_DIAGRAM):   else index = "Y";
683801     indextype = idxusage;
MPRINT(EM_DIAGRAM):   indextype = idxusage;
683802     drop idxusage itype formatl formatd informl informd;
MPRINT(EM_DIAGRAM):   drop idxusage itype formatl formatd informl informd;
683803     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.M136G1HC.
NOTE: The data set WORK.M136G1HC has 33 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
683804     data WORK.M136G1HC;
MPRINT(EM_DIAGRAM):    data WORK.M136G1HC;
683805     length UNAME $64;
MPRINT(EM_DIAGRAM):   length UNAME $64;
683806     set WORK.M136G1HC;
MPRINT(EM_DIAGRAM):   set WORK.M136G1HC;
683807     UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
683808     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.M136G1HC.
NOTE: The data set WORK.M136G1HC has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M2EC5EXE NOTHREADS;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
683812     data WORK.M2EC5EXE;
MPRINT(EM_DIAGRAM):    data WORK.M2EC5EXE;
683813     drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
683814     set WORK.M2EC5EXE;
MPRINT(EM_DIAGRAM):   set WORK.M2EC5EXE;
683815     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.M2EC5EXE.
NOTE: The data set WORK.M2EC5EXE has 33 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK.M18EFBH2(keep=NAME ATTR);
MPRINT(EM_DIAGRAM):   length ATTR $ 20;
MPRINT(EM_DIAGRAM):   set WORK.M2EC5EXE;
MPRINT(EM_DIAGRAM):   if level ne "INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if order = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ORDER';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'FORMATTYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ROLE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'LEVEL';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if type = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'TYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if index = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'INDEX';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if report = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'REPORT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort NOTHREADS;
MPRINT(EM_DIAGRAM):   by attr;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M2EC5EXE;
MPRINT(EM_DIAGRAM):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $
10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EM_DIAGRAM):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EM_DIAGRAM):   set WORK.M2EC5EXE;
MPRINT(EM_DIAGRAM):   if formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
MPRINT(EM_DIAGRAM):   pos = indexc(format,'.1234567890');
MPRINT(EM_DIAGRAM):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EM_DIAGRAM):   else tempfmt = ' ';
MPRINT(EM_DIAGRAM):   flen = length(tempfmt);
MPRINT(EM_DIAGRAM):   select;
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype =
"TIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN"
"Z" "ZD")) formattype = "CODING";
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   formattype = "USER";
MPRINT(EM_DIAGRAM):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EM_DIAGRAM):   else if flen >= 4 then do;
MPRINT(EM_DIAGRAM):   str = substr(tempfmt,1,4);
MPRINT(EM_DIAGRAM):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EM_DIAGRAM):   else if str = "S370" then formattype = "CODING";
MPRINT(EM_DIAGRAM):   else if str = "BEST" then formattype = "NUM";
MPRINT(EM_DIAGRAM):   drop str;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop flen tempfmt pos;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   formatType = "CATEGORY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if formatType = "NUM" then do;
MPRINT(EM_DIAGRAM):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EM_DIAGRAM):   else formatType = "QUANTITY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level =
"NOMINAL";
MPRINT(EM_DIAGRAM):   else level = "INTERVAL";
MPRINT(EM_DIAGRAM):   levelAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else level = upcase(level);
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   length name_prefix $8 _uname $64;
MPRINT(EM_DIAGRAM):   drop name_prefix _uname _freqflag;
MPRINT(EM_DIAGRAM):   retain _freqflag;
MPRINT(EM_DIAGRAM):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EM_DIAGRAM):   _uname = upcase(NAME);
MPRINT(EM_DIAGRAM):   select(_uname);
MPRINT(EM_DIAGRAM):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('_NODE_') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('URI') ROLE = 'URL';
MPRINT(EM_DIAGRAM):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'FREQ';
MPRINT(EM_DIAGRAM):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(_uname, 1, '_');
MPRINT(EM_DIAGRAM):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS',
'RAT') then ROLE = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix ='B' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI',
'IC') then ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR',
'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EM_DIAGRAM):   drop _found_ i;
MPRINT(EM_DIAGRAM):   _found_=0;
MPRINT(EM_DIAGRAM):   do i=1 to 19 until(_found_=1);
MPRINT(EM_DIAGRAM):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EM_DIAGRAM):   ROLE=_ROLE_{i};
MPRINT(EM_DIAGRAM):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   _found_=1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if length(_uname)>2 then do;
MPRINT(EM_DIAGRAM):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'ID';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EM_DIAGRAM):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EM_DIAGRAM):   else role = 'INPUT';
MPRINT(EM_DIAGRAM):   roleAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else role = upcase(role);
MPRINT(EM_DIAGRAM):   if REPORT = '' then REPORT = 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc dmdb data=work._train(obs=1000000) batch classOut=_DMDB0AEUFJM
maxLevel=22;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth Recency RFMstat RMntFrq Teenhome
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=_DMDB0AEUFJM noprint;
MPRINT(EM_DIAGRAM):   table name / out=_DMDBCOUNT0AEUFJM(drop=percent rename=(count=NLEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _MISS0AEUFJM(rename=(frequency=NMISS));
MPRINT(EM_DIAGRAM):   set _DMDB0AEUFJM(where=(NRAW=. and CRAW=''));
MPRINT(EM_DIAGRAM):   keep name frequency;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_MISS0AEUFJM;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_DMDBCOUNT0AEUFJM;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _COUNTS0AEUFJM;
MPRINT(EM_DIAGRAM):   merge _DMDBCOUNT0AEUFJM _MISS0AEUFJM;
MPRINT(EM_DIAGRAM):   label NLEVEL= 'Number of Category';
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if NMISS > 0 then do;
MPRINT(EM_DIAGRAM):   NLEVEL= NLEVEL-1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else NMISS = 0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=_COUNTS0AEUFJM NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M2EC5EXE NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.M2EC5EXE;
MPRINT(EM_DIAGRAM):   length NLEVEL 8 nmiss 8;
MPRINT(EM_DIAGRAM):   update WORK.M2EC5EXE _COUNTS0AEUFJM;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if name='' then name='_';
MPRINT(EM_DIAGRAM):   if levelAssigned and ROLE ne 'FREQ' then do;
MPRINT(EM_DIAGRAM):   select(NLEVEL);
MPRINT(EM_DIAGRAM):   when(.) do;
MPRINT(EM_DIAGRAM):   if type eq 'C' then level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when(0) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(1) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(2) level = 'BINARY';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if roleAssigned then do;
MPRINT(EM_DIAGRAM):   if level = 'NOMINAL' and NLEVEL > 20 then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Exceeds maximum number of levels cutoff";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = 'UNARY' and ROLE ne 'FREQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   drop NLEVEL nmiss;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EM_DIAGRAM):   drop levelAssigned roleAssigned;
MPRINT(EM_DIAGRAM):   run;
684101     title8 "%sysfunc(sasmsg(sashelp.dmine, rpt_clean_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):    title8 "Cleanup Model";
684102     data WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):   data WORK.M1KMIG57;
684103     set WORK.M1KMIG57;
MPRINT(EM_DIAGRAM):   set WORK.M1KMIG57;
684104     if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
684105     if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
684106     if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
684107     if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
684108     if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
684109     if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
684110     if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
684111     if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
684112     if NAME='Complain' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Complain' then delete;
684113     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK.M1KMIG57.
NOTE: The data set WORK.M1KMIG57 has 33 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
684114     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
684115     * Cleanup Model;
MPRINT(EM_DIAGRAM):   * Cleanup Model;
684116     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684117     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684118     * NEURAL MODEL DepVar BINARY CM;
MPRINT(EM_DIAGRAM):   * NEURAL MODEL DepVar BINARY CM;
684119     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684120     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684121     * Rule: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule: Create decision matrix;
684122     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684123     data EM_Rule;
MPRINT(EM_DIAGRAM):   data EM_Rule;
684124     set work._train(keep=
684125     AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
684126     AcceptedCmpTotal Age DepVar Education Frq HigherEducationBinary Income Kidhome
684127     Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts
684128     MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
684129     NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
684130     NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome );
MPRINT(EM_DIAGRAM):   set work._train(keep= AcceptedCmp1 AcceptedCmp2 AcceptedCmp3
AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age DepVar Education Frq HigherEducationBinary
Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts
MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases
NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
Teenhome );
684131     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK.EM_RULE has 52 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684132     *------------------------------------------------------------* ;
684133     * Rule: DMDBClass Macro ;
684134     *------------------------------------------------------------* ;
684135     %macro DMDBClass;
684136         AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
684137        AcceptedCmp5(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC)
684138        Marital_Status(ASC)
684139     %mend DMDBClass;
684140     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684141     * Rule: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule: DMDBVar Macro ;
684142     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684143     %macro DMDBVar;
684144         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
684145        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
684146        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
684147        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
684148     %mend DMDBVar;
684149     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684150     * Rule: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule: Create DMDB;
684151     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684152     proc dmdb batch data=WORK.EM_Rule
684153     dmdbcat=WORK.Rule_DMDB
684154     maxlevel = 513
684155     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Rule dmdbcat=WORK.Rule_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
684156     class %DMDBClass;
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC) Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
684157     var %DMDBVar;
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
684158     target
684159     DepVar
684160     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
684161     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 52   Memory used = 511K.
NOTE: There were 52 observations read from the data set WORK.EM_RULE.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
684162     quit;
684163     *--- end code ---*;
 
684164     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
684165     * Rule: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Interval Input Variables Macro ;
684166     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684167     %macro INTINPUTS;
684168         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
684169        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
684170        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
684171        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
684172     %mend INTINPUTS;
684173     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684174     * Rule: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Binary Inputs Macro ;
684175     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684176     %macro BININPUTS;
684177         AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
684178        HigherEducationBinary
684179     %mend BININPUTS;
684180     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684181     * Rule: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Nominal Inputs Macro ;
684182     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684183     %macro NOMINPUTS;
684184         Education Marital_Status
684185     %mend NOMINPUTS;
684186     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684187     * Rule: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule: Ordinal Inputs Macro ;
684188     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
684189     %macro ORDINPUTS;
684190
684191     %mend ORDINPUTS;
684192     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684193     * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
684194     ;
MPRINT(EM_DIAGRAM):   ;
684195     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684196     proc neural data=EM_Rule dmdbcat=WORK.Rule_DMDB
684197     validdata = work._valid
684198     random=12345
684199     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Rule dmdbcat=WORK.Rule_DMDB validdata = work._valid
random=12345 ;
684200     nloptions
684201     noprint
684202     ;
MPRINT(EM_DIAGRAM):   nloptions noprint ;
684203     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
684204     netopts
684205     decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
684206     input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
684207     ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
684208     input %BININPUTS / level=nominal id=bin
MPRINT(BININPUTS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
HigherEducationBinary
684209     ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
MPRINT(EM_DIAGRAM):   input
684210     input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   Education Marital_Status
684211     ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
684212     target DepVar / level=NOMINAL id=DepVar
684213     bias
684214     ;
MPRINT(EM_DIAGRAM):   target DepVar / level=NOMINAL id=DepVar bias ;
684215     arch NRBFEQ
684216     Hidden=3
684217     ;
MPRINT(EM_DIAGRAM):   arch NRBFEQ Hidden=3 ;
684218     Prelim 8 preiter=10
684219     pretime=3600
684220     Outest=WORK.PRELIMOUTEST_EMNEURAL_3O2EZJZ
684221     ;
MPRINT(EM_DIAGRAM):   Prelim 8 preiter=10 pretime=3600
Outest=WORK.PRELIMOUTEST_EMNEURAL_3O2EZJZ ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: Convergence criterion (ABSGCONV=0.00001) satisfied.
NOTE: Convergence criterion (ABSCONV=0.0039706618) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: Convergence criterion (ABSCONV=0.0039706618) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (ABSCONV=0.0039706618) satisfied.
NOTE: Convergence criterion (ABSCONV=0.0039706618) satisfied.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set WORK.PRELIMOUTEST_EMNEURAL_3O2EZJZ has 17 observations and 127 variables.
684222     save network=WORK.NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=WORK.NETWORK.dm_neural;
NOTE: Creating a new Catalogue with entry WORK.NETWORK.DM_NEURAL.
NOTE: Entry WORK.NETWORK.DM_NEURAL has been opened.
NOTE: Entry WORK.NETWORK.DM_NEURAL has been closed.
684223     train Maxiter=20
684224     maxtime=14400
684225     Outest=WORK.Rule_outest estiter=1
684226     Outfit=_rnfit
684227     ;
MPRINT(EM_DIAGRAM):   train Maxiter=20 maxtime=14400 Outest=WORK.Rule_outest estiter=1
Outfit=_rnfit ;
NOTE: Convergence criterion (ABSCONV=0.0039706618) satisfied.
NOTE: The data set WORK.RULE_OUTEST has 3 observations and 127 variables.
NOTE: The data set WORK._RNFIT has 4 observations and 36 variables.
684228     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_RULE has 52 observations and 32 variables.
NOTE: The data set WORK._VALID has 25 observations and 33 variables.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed page 638.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
684229     quit;
 
684230     proc sort data=_rnfit(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Rule;
MPRINT(EM_DIAGRAM):    proc sort data=_rnfit(where=(_iter_ ne . and _NAME_="OVERALL"))
out=fit_Rule;
684231     by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
684232     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._RNFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_RULE has 2 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
684233     %GLOBAL ITER;
684234     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
684235     set fit_Rule(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Rule(obs=1);
684236     call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
684237     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_RULE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
684238     data WORK.INITIAL_EMNEURAL_3O2EZJZ;
MPRINT(EM_DIAGRAM):   data WORK.INITIAL_EMNEURAL_3O2EZJZ;
684239     set WORK.Rule_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set WORK.Rule_outest(where=(_ITER_ eq 0 and _OBJ_ ne .));
684240     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.RULE_OUTEST.
      WHERE (_ITER_=0) and (_OBJ_ not = .);
NOTE: The data set WORK.INITIAL_EMNEURAL_3O2EZJZ has 2 observations and 127 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
684241     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
684242     * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
684243     ;
MPRINT(EM_DIAGRAM):   ;
684244     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684245     proc neural data=EM_Rule dmdbcat=WORK.Rule_DMDB
684246     validdata = work._valid
684247     network = WORK.NETWORK.dm_neural
684248     random=12345
684249     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Rule dmdbcat=WORK.Rule_DMDB validdata = work._valid
network = WORK.NETWORK.dm_neural random=12345 ;
NOTE: Entry WORK.NETWORK.DM_NEURAL has been opened.
NOTE: Entry WORK.NETWORK.DM_NEURAL has been closed.
684250     nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
684251     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
684252     initial inest=WORK.INITIAL_EMNEURAL_3O2EZJZ;
MPRINT(EM_DIAGRAM):   initial inest=WORK.INITIAL_EMNEURAL_3O2EZJZ;
NOTE: The data set WORK.INITIAL_EMNEURAL_3O2EZJZ has 2 observations and 127 variables.
684253     train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
684254     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
684254   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\CM.sas"
684255     group=Rule
684256     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\CM.sas" group=Rule ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\CM.sas opened.
684257     ;
MPRINT(EM_DIAGRAM):   ;
684258     code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
684258   ! Files\_TD9752_WN7LF-LEAVE_\Prc2\CM_res.sas"
684259     group=Rule
684260     residual
684261     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\CM_res.sas" group=Rule residual ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\CM_res.sas opened.
684262     ;
MPRINT(EM_DIAGRAM):   ;
684263     score data=_train out=_ptrain
684264     outkey=WORK.OUTKEY_EMNEURAL_3O2EZJZ;
MPRINT(EM_DIAGRAM):   score data=_train out=_ptrain outkey=WORK.OUTKEY_EMNEURAL_3O2EZJZ;
NOTE: The data set WORK.OUTKEY_EMNEURAL_3O2EZJZ has 36 observations and 8 variables.
NOTE: The data set WORK._TRAIN has 52 observations and 33 variables.
NOTE: The data set WORK._PTRAIN has 52 observations and 69 variables.
684265     score data=_valid out=_pvalid
684266     outkey=WORK.OUTKEY_EMNEURAL_3O2EZJZ;
MPRINT(EM_DIAGRAM):   score data=_valid out=_pvalid outkey=WORK.OUTKEY_EMNEURAL_3O2EZJZ;
NOTE: The data set WORK.OUTKEY_EMNEURAL_3O2EZJZ has 36 observations and 8 variables.
NOTE: The data set WORK._VALID has 25 observations and 33 variables.
NOTE: The data set WORK._PVALID has 25 observations and 69 variables.
684267     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_RULE has 52 observations and 32 variables.
NOTE: The data set WORK._VALID has 25 observations and 33 variables.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
684268     quit;
684269     data _rnest;
MPRINT(EM_DIAGRAM):   data _rnest;
684270     set WORK.Rule_outest;
MPRINT(EM_DIAGRAM):   set WORK.Rule_outest;
684271     if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
684272     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.RULE_OUTEST.
NOTE: The data set WORK._RNEST has 2 observations and 127 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
684273     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
684274     delete EM_Rule;
MPRINT(EM_DIAGRAM):   delete EM_Rule;
684275     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_RULE (memtype=DATA).
684276     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
684277     * CLEANUP: Training Classification;
MPRINT(EM_DIAGRAM):    * CLEANUP: Training Classification;
684278     ;
MPRINT(EM_DIAGRAM):   ;
684279     proc freq data= _ptrain noprint;
MPRINT(EM_DIAGRAM):   proc freq data= _ptrain noprint;
684280     tables F_DepVar * I_DepVar / out = _count;
MPRINT(EM_DIAGRAM):   tables F_DepVar * I_DepVar / out = _count;
684281     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._COUNT has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.43 seconds
      cpu time            0.03 seconds
 
 
684282     data _count;
MPRINT(EM_DIAGRAM):   data _count;
684283     set _count;
MPRINT(EM_DIAGRAM):   set _count;
684284     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
684285     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
684286     label F_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F_DepVar = "Target";
684287     label I_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_predict_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I_DepVar = "Predict";
684288     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * CLEANUP: Validation Classification;
MPRINT(EM_DIAGRAM):   ;
684289     * CLEANUP: Validation Classification;
684290     ;
684291     proc freq data= _pvalid noprint;
MPRINT(EM_DIAGRAM):   proc freq data= _pvalid noprint;
684292     tables F_DepVar * I_DepVar / out = _vcount;
MPRINT(EM_DIAGRAM):   tables F_DepVar * I_DepVar / out = _vcount;
684293     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VCOUNT has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
684294     data _vcount;
MPRINT(EM_DIAGRAM):   data _vcount;
684295     set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
684296     length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
684297     label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
684298     label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
684299     label F_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F_DepVar = "Target";
684300     label I_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_predict_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I_DepVar = "Predict";
684301     rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
684302     rename percent= vpercent;
MPRINT(EM_DIAGRAM):   rename percent= vpercent;
684303     key = ktrim(kleft(F_DepVar) !! '_' !! ktrim(kleft(I_DepVar)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(F_DepVar) !! '_' !! ktrim(kleft(I_DepVar)));
684304     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
684305     *;
684306     data _count;
MPRINT(EM_DIAGRAM):   data _count;
684307     set _count;
MPRINT(EM_DIAGRAM):   set _count;
684308     length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
684309     key = ktrim(kleft(F_DepVar) !!'_' !!ktrim(kleft(I_DepVar)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(F_DepVar) !!'_' !!ktrim(kleft(I_DepVar)));
684310     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Merge Train and Valid classification;
MPRINT(EM_DIAGRAM):   ;
684311     * Merge Train and Valid classification;
684312     ;
684313     proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
684314     by key;
MPRINT(EM_DIAGRAM):   by key;
684315     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
684316     proc sort data=_vcount;
MPRINT(EM_DIAGRAM):   proc sort data=_vcount;
684317     by key;
MPRINT(EM_DIAGRAM):   by key;
684318     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
684319     *;
684320     data _count;
MPRINT(EM_DIAGRAM):   data _count;
684321     merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
684322     by key;
MPRINT(EM_DIAGRAM):   by key;
684323     drop key;
MPRINT(EM_DIAGRAM):   drop key;
684324     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: There were 1 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * CLEANUP: Print Classification;
MPRINT(EM_DIAGRAM):   ;
684325     * CLEANUP: Print Classification;
684326     ;
684327     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_cleanup_title, NOQUOTE, DepVar))";
MPRINT(EM_DIAGRAM):   title9 "TARGET=DepVar : Cleanup Model";
684328     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
684329     proc print data = _count noobs label;
MPRINT(EM_DIAGRAM):   proc print data = _count noobs label;
684330     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 639.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
684331     title9;
MPRINT(EM_DIAGRAM):   title9;
684332     title10;
MPRINT(EM_DIAGRAM):   title10;
684333     title8;
MPRINT(EM_DIAGRAM):    title8;
684334     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
684335     delete _train;
MPRINT(EM_DIAGRAM):   delete _train;
684336     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._TRAIN (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
684337     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
684338     delete _ptrain;
MPRINT(EM_DIAGRAM):   delete _ptrain;
684339     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._PTRAIN (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
684340     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
684341     delete _valid;
MPRINT(EM_DIAGRAM):   delete _valid;
684342     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
684343     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
684344     delete _pvalid;
MPRINT(EM_DIAGRAM):   delete _pvalid;
684345     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._PVALID (memtype=DATA).
684346     %makeResidualVars(target=DepVar, decmeta=EMWS8.Rule_DepVar_DM , fref=#LN08628);
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.Rule_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.Rule_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.Rule_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file #LN08628;
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: The file #LN08628 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Rule\RESIDUALCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 08.46 Uhr,
      Create Time=26. April 2016 20.22 Uhr
 
NOTE: 21 records were written to the file #LN08628.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.46 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                08.46 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2M_ADKI
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2M_ADKI new;
MPRINT(EM_DIAGRAM):   run;
684448     filename emflow
684448   ! "C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rule: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684449     *------------------------------------------------------------*;
684450     * Rule: Scoring DATA data;
684451     *------------------------------------------------------------*;
684452     data EMWS8.Rule_TRAIN
684453     / view=EMWS8.Rule_TRAIN
684454     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_TRAIN / view=EMWS8.Rule_TRAIN ;
684455     set EMWS8.Meta_TRAIN
684456     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_TRAIN ;
684457     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMFLOWSCORE.sas.
684458    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684459    +* Rule Induction Scoring Code;
MPRINT(EM_DIAGRAM):   * Rule Induction Scoring Code;
684460    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684461    +length _bin $12 I__bin $12 I_DepVar $32;
MPRINT(EM_DIAGRAM):   length _bin $12 I__bin $12 I_DepVar $32;
684462    +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
684463    +label F_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label F_DepVar = 'Into: DepVar';
684464    +*;
MPRINT(EM_DIAGRAM):   *;
684465    +drop I__bin;
MPRINT(EM_DIAGRAM):   drop I__bin;
684466    +*;
MPRINT(EM_DIAGRAM):   *;
684467    +F_DepVar=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   F_DepVar=putn(DepVar, 'best.');
684468    +%DMNORMIP(F_DepVar);
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
684469    +I_DepVar = '';
MPRINT(EM_DIAGRAM):   I_DepVar = '';
684470    +I__bin= '0';
MPRINT(EM_DIAGRAM):   I__bin= '0';
684471    +*;
MPRINT(EM_DIAGRAM):   *;
684472    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684473    +* Null Model;
MPRINT(EM_DIAGRAM):   * Null Model;
684474    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684475    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684476    +*Binary model for DepVar = 0;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 0;
684477    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
684478    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
684479    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
684480    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
684481    +
684482    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
684483    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
684484    +
684485    +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
684486    +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
684487    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
684488    +array RULE_1DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE_1DRF [2] $12 _temporary_ ('1' '0' );
684489    +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
684490    +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
684491    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
684492    +array RULE_1DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE_1DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
684493    +
684494    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
684495    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
684496    +
684497    +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
684498    +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
684499    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684500    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684501    +end;
MPRINT(EM_DIAGRAM):   end;
684502    +
684503    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
684504    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
684505    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684506    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684507    +end;
MPRINT(EM_DIAGRAM):   end;
684508    +
684509    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
684510    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
684511    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684512    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684513    +end;
MPRINT(EM_DIAGRAM):   end;
684514    +
684515    +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
684516    +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
684517    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684518    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684519    +end;
MPRINT(EM_DIAGRAM):   end;
684520    +
684521    +*** Check Mnt for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Mnt for missing values ;
684522    +if missing( Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( Mnt ) then do;
684523    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684524    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684525    +end;
MPRINT(EM_DIAGRAM):   end;
684526    +
684527    +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
684528    +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
684529    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684530    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684531    +end;
MPRINT(EM_DIAGRAM):   end;
684532    +
684533    +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
684534    +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
684535    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684536    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684537    +end;
MPRINT(EM_DIAGRAM):   end;
684538    +
684539    +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
684540    +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
684541    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684542    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684543    +end;
MPRINT(EM_DIAGRAM):   end;
684544    +
684545    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
684546    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
684547    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684548    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684549    +end;
MPRINT(EM_DIAGRAM):   end;
684550    +
684551    +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
684552    +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
684553    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684554    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684555    +end;
MPRINT(EM_DIAGRAM):   end;
684556    +
684557    +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
684558    +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
684559    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684560    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684561    +end;
MPRINT(EM_DIAGRAM):   end;
684562    +
684563    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
684564    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
684565    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684566    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684567    +end;
MPRINT(EM_DIAGRAM):   end;
684568    +
684569    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
684570    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
684571    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684572    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684573    +end;
MPRINT(EM_DIAGRAM):   end;
684574    +
684575    +*** Check NumDistPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDistPurchases for missing values ;
684576    +if missing( NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDistPurchases ) then do;
684577    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684578    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684579    +end;
MPRINT(EM_DIAGRAM):   end;
684580    +
684581    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
684582    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
684583    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684584    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684585    +end;
MPRINT(EM_DIAGRAM):   end;
684586    +
684587    +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
684588    +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
684589    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684590    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684591    +end;
MPRINT(EM_DIAGRAM):   end;
684592    +
684593    +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
684594    +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
684595    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684596    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684597    +end;
MPRINT(EM_DIAGRAM):   end;
684598    +
684599    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
684600    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
684601    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684602    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684603    +end;
MPRINT(EM_DIAGRAM):   end;
684604    +
684605    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
684606    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
684607    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684608    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684609    +end;
MPRINT(EM_DIAGRAM):   end;
684610    +
684611    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
684612    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
684613    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
684614    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
684615    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684616    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684617    +end;
MPRINT(EM_DIAGRAM):   end;
684618    +else do;
MPRINT(EM_DIAGRAM):   else do;
684619    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
684620    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
684621    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684622    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
684623    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
684624    +   end;
MPRINT(EM_DIAGRAM):   end;
684625    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
684626    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
684627    +   end;
MPRINT(EM_DIAGRAM):   end;
684628    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684629    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
684630    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684631    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684632    +   end;
MPRINT(EM_DIAGRAM):   end;
684633    +end;
MPRINT(EM_DIAGRAM):   end;
684634    +
684635    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
684636    +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
684637    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
684638    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
684639    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684640    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684641    +end;
MPRINT(EM_DIAGRAM):   end;
684642    +else do;
MPRINT(EM_DIAGRAM):   else do;
684643    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
684644    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
684645    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684646    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
684647    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
684648    +   end;
MPRINT(EM_DIAGRAM):   end;
684649    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
684650    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
684651    +   end;
MPRINT(EM_DIAGRAM):   end;
684652    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684653    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
684654    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684655    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684656    +   end;
MPRINT(EM_DIAGRAM):   end;
684657    +end;
MPRINT(EM_DIAGRAM):   end;
684658    +
684659    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
684660    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
684661    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
684662    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
684663    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684664    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684665    +end;
MPRINT(EM_DIAGRAM):   end;
684666    +else do;
MPRINT(EM_DIAGRAM):   else do;
684667    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
684668    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
684669    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684670    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
684671    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
684672    +   end;
MPRINT(EM_DIAGRAM):   end;
684673    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
684674    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
684675    +   end;
MPRINT(EM_DIAGRAM):   end;
684676    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684677    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
684678    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684679    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684680    +   end;
MPRINT(EM_DIAGRAM):   end;
684681    +end;
MPRINT(EM_DIAGRAM):   end;
684682    +
684683    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
684684    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
684685    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
684686    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
684687    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684688    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684689    +end;
MPRINT(EM_DIAGRAM):   end;
684690    +else do;
MPRINT(EM_DIAGRAM):   else do;
684691    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
684692    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
684693    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684694    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
684695    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
684696    +   end;
MPRINT(EM_DIAGRAM):   end;
684697    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
684698    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
684699    +   end;
MPRINT(EM_DIAGRAM):   end;
684700    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684701    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
684702    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684703    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684704    +   end;
MPRINT(EM_DIAGRAM):   end;
684705    +end;
MPRINT(EM_DIAGRAM):   end;
684706    +
684707    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
684708    +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
684709    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
684710    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
684711    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684712    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684713    +end;
MPRINT(EM_DIAGRAM):   end;
684714    +else do;
MPRINT(EM_DIAGRAM):   else do;
684715    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
684716    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
684717    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684718    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
684719    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
684720    +   end;
MPRINT(EM_DIAGRAM):   end;
684721    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
684722    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
684723    +   end;
MPRINT(EM_DIAGRAM):   end;
684724    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684725    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
684726    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684727    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684728    +   end;
MPRINT(EM_DIAGRAM):   end;
684729    +end;
MPRINT(EM_DIAGRAM):   end;
684730    +
684731    +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
684732    +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
684733    +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
684734    +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
684735    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684736    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684737    +end;
MPRINT(EM_DIAGRAM):   end;
684738    +else do;
MPRINT(EM_DIAGRAM):   else do;
684739    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
684740    +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
684741    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684742    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
684743    +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
684744    +   end;
MPRINT(EM_DIAGRAM):   end;
684745    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
684746    +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
684747    +   end;
MPRINT(EM_DIAGRAM):   end;
684748    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684749    +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
684750    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684751    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684752    +   end;
MPRINT(EM_DIAGRAM):   end;
684753    +end;
MPRINT(EM_DIAGRAM):   end;
684754    +
684755    +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
684756    +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
684757    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
684758    +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
684759    +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
684760    +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
684761    +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
684762    +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
684763    +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
684764    +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
684765    +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
684766    +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
684767    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684768    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684769    +end;
MPRINT(EM_DIAGRAM):   end;
684770    +else do;
MPRINT(EM_DIAGRAM):   else do;
684771    +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
684772    +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
684773    +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684774    +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
684775    +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
684776    +   end;
MPRINT(EM_DIAGRAM):   end;
684777    +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
684778    +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
684779    +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
684780    +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
684781    +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
684782    +   end;
MPRINT(EM_DIAGRAM):   end;
684783    +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
684784    +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
684785    +   end;
MPRINT(EM_DIAGRAM):   end;
684786    +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
684787    +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
684788    +   end;
MPRINT(EM_DIAGRAM):   end;
684789    +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
684790    +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
684791    +   end;
MPRINT(EM_DIAGRAM):   end;
684792    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684793    +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
684794    +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
684795    +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
684796    +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
684797    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684798    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684799    +   end;
MPRINT(EM_DIAGRAM):   end;
684800    +end;
MPRINT(EM_DIAGRAM):   end;
684801    +
684802    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
684803    +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
684804    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
684805    +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
684806    +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
684807    +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
684808    +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
684809    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
684810    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
684811    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
684812    +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
684813    +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
684814    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
684815    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684816    +end;
MPRINT(EM_DIAGRAM):   end;
684817    +else do;
MPRINT(EM_DIAGRAM):   else do;
684818    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
684819    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
684820    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
684821    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
684822    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
684823    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
684824    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
684825    +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
684826    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
684827    +         end;
MPRINT(EM_DIAGRAM):   end;
684828    +         else do;
MPRINT(EM_DIAGRAM):   else do;
684829    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
684830    +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
684831    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
684832    +            end;
MPRINT(EM_DIAGRAM):   end;
684833    +         end;
MPRINT(EM_DIAGRAM):   end;
684834    +      end;
MPRINT(EM_DIAGRAM):   end;
684835    +      else do;
MPRINT(EM_DIAGRAM):   else do;
684836    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
684837    +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
684838    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
684839    +         end;
MPRINT(EM_DIAGRAM):   end;
684840    +      end;
MPRINT(EM_DIAGRAM):   end;
684841    +   end;
MPRINT(EM_DIAGRAM):   end;
684842    +   else do;
MPRINT(EM_DIAGRAM):   else do;
684843    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
684844    +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
684845    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
684846    +      end;
MPRINT(EM_DIAGRAM):   end;
684847    +      else do;
MPRINT(EM_DIAGRAM):   else do;
684848    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
684849    +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
684850    +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
684851    +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
684852    +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
684853    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
684854    +         end;
MPRINT(EM_DIAGRAM):   end;
684855    +      end;
MPRINT(EM_DIAGRAM):   end;
684856    +   end;
MPRINT(EM_DIAGRAM):   end;
684857    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
684858    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
684859    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
684860    +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
684861    +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
684862    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
684863    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
684864    +   end;
MPRINT(EM_DIAGRAM):   end;
684865    +end;
MPRINT(EM_DIAGRAM):   end;
684866    +
684867    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
684868    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
684869    +   _P0 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P0 = 0.848778433;
684870    +   _P1 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P1 = 0.151221567;
684871    +   goto RULE_1DR1;
MPRINT(EM_DIAGRAM):   goto RULE_1DR1;
684872    +end;
MPRINT(EM_DIAGRAM):   end;
684873    +
684874    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
684875    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
684876    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
684877    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
684878    +
684879    +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
684880    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684881    +_LP0 = _LP0 + (    1.37959490891636) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.37959490891636) * _TEMP * _1_0;
684882    +
684883    +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
684884    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684885    +_LP0 = _LP0 + (    1.38881644367343) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.38881644367343) * _TEMP * _2_0;
684886    +
684887    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
684888    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684889    +_LP0 = _LP0 + (    1.49836425611786) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.49836425611786) * _TEMP * _3_0;
684890    +
684891    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
684892    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684893    +_LP0 = _LP0 + (    1.18986757703774) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.18986757703774) * _TEMP * _4_0;
684894    +
684895    +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
684896    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684897    +_LP0 = _LP0 + (    1.88753592135037) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.88753592135037) * _TEMP * _5_0;
684898    +
684899    +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
684900    +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
684901    +_LP0 = _LP0 + (    0.02031375470687 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02031375470687 * _TEMP);
684902    +
684903    +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
684904    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684905    +_LP0 = _LP0 + (   -0.40204765702117) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40204765702117) * _TEMP * _6_0;
684906    +
684907    +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
684908    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684909    +_LP0 = _LP0 + (    0.02225506337329) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02225506337329) * _TEMP * _7_0;
684910    +_LP0 = _LP0 + (    0.61176531164578) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.61176531164578) * _TEMP * _7_1;
684911    +_LP0 = _LP0 + (   -0.36644839378194) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36644839378194) * _TEMP * _7_2;
684912    +_LP0 = _LP0 + (   -0.12231177702126) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.12231177702126) * _TEMP * _7_3;
684913    +
684914    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
684915    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
684916    +_LP0 = _LP0 + (     0.3666224217102 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.3666224217102 * _TEMP);
684917    +
684918    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
684919    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
684920    +_LP0 = _LP0 + (   -0.00005713252434 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00005713252434 * _TEMP);
684921    +
684922    +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
684923    +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
684924    +_LP0 = _LP0 + (    0.41057471857215 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.41057471857215 * _TEMP);
684925    +
684926    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
684927    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
684928    +_LP0 = _LP0 + (   -0.27437867955027) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27437867955027) * _TEMP * _9_0;
684929    +_LP0 = _LP0 + (    1.02225430661359) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.02225430661359) * _TEMP * _9_1;
684930    +_LP0 = _LP0 + (   -0.75468142744006) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.75468142744006) * _TEMP * _9_2;
684931    +_LP0 = _LP0 + (    1.04712905781542) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.04712905781542) * _TEMP * _9_3;
684932    +
684933    +***  Effect: Mnt ;
MPRINT(EM_DIAGRAM):   *** Effect: Mnt ;
684934    +_TEMP = Mnt ;
MPRINT(EM_DIAGRAM):   _TEMP = Mnt ;
684935    +_LP0 = _LP0 + (    0.00461659402024 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00461659402024 * _TEMP);
684936    +
684937    +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
684938    +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
684939    +_LP0 = _LP0 + (    0.00251764049354 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00251764049354 * _TEMP);
684940    +
684941    +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
684942    +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
684943    +_LP0 = _LP0 + (    0.00413411554031 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00413411554031 * _TEMP);
684944    +
684945    +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
684946    +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
684947    +_LP0 = _LP0 + (   -0.00602352418747 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00602352418747 * _TEMP);
684948    +
684949    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
684950    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
684951    +_LP0 = _LP0 + (   -0.01296976269642 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01296976269642 * _TEMP);
684952    +
684953    +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
684954    +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
684955    +_LP0 = _LP0 + (    0.00105376667989 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00105376667989 * _TEMP);
684956    +
684957    +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
684958    +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
684959    +_LP0 = _LP0 + (    0.00973147761427 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00973147761427 * _TEMP);
684960    +
684961    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
684962    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
684963    +_LP0 = _LP0 + (   -1.19498863276998 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.19498863276998 * _TEMP);
684964    +
684965    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
684966    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
684967    +_LP0 = _LP0 + (   -0.75556665247436 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.75556665247436 * _TEMP);
684968    +
684969    +***  Effect: NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDistPurchases ;
684970    +_TEMP = NumDistPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDistPurchases ;
684971    +_LP0 = _LP0 + (    0.04468116637826 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04468116637826 * _TEMP);
684972    +
684973    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
684974    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
684975    +_LP0 = _LP0 + (   -1.08435727343224 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.08435727343224 * _TEMP);
684976    +
684977    +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
684978    +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
684979    +_LP0 = _LP0 + (   -0.00028375117498 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00028375117498 * _TEMP);
684980    +
684981    +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
684982    +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
684983    +_LP0 = _LP0 + (   -0.01569409100668 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01569409100668 * _TEMP);
684984    +
684985    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
684986    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
684987    +_LP0 = _LP0 + (    0.09810556470719 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09810556470719 * _TEMP);
684988    +
684989    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
684990    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
684991    +_LP0 = _LP0 + (    1.19606402340833 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.19606402340833 * _TEMP);
684992    +
684993    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
684994    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
684995    +_TEMP =      0.3380565978551 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 0.3380565978551 + _LP0;
684996    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
684997    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
684998    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
684999    +end;
MPRINT(EM_DIAGRAM):   end;
685000    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
685001    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
685002    +
685003    +RULE_1DR1:
685004    +
685005    +
685006    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE_1DR1: *** Posterior Probabilities and Predicted Level;
685007    +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
685008    +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
685009    +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
685010    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
685011    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
685012    +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
685013    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
685014    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
685015    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
685016    +end;
MPRINT(EM_DIAGRAM):   end;
685017    +I__bin = RULE_1DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE_1DRF[_IY];
685018    +U__bin = RULE_1DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE_1DRU[_IY];
685019    +
685020    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685021    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
685022    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685023    +*;
MPRINT(EM_DIAGRAM):   *;
685024    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
685025    +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
685026    +I_DepVar = ("0");
MPRINT(EM_DIAGRAM):   I_DepVar = ("0");
685027    +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
685028    +P_DepVar0=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0=P__bin1;
685029    +P_DepVar1 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1-P__bin1;
685030    +end;
MPRINT(EM_DIAGRAM):   end;
685031    +*;
MPRINT(EM_DIAGRAM):   *;
685032    +*;
MPRINT(EM_DIAGRAM):   *;
685033    +* END Binary Model for DepVar = 0;
MPRINT(EM_DIAGRAM):   * END Binary Model for DepVar = 0;
685034    +;
MPRINT(EM_DIAGRAM):   ;
685035    +*;
MPRINT(EM_DIAGRAM):   *;
685036    +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
685037    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685038    +*Binary model for DepVar = 1;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 1;
685039    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685040    +*;
MPRINT(EM_DIAGRAM):   *;
685041    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
685042    +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
685043    +*;
MPRINT(EM_DIAGRAM):   *;
685044    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685045    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
685046    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685047    +
685048    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
685049    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
685050    +
685051    +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
685052    +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
685053    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
685054    +array RULE_2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE_2DRF [2] $12 _temporary_ ('1' '0' );
685055    +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
685056    +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
685057    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
685058    +array RULE_2DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE_2DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
685059    +
685060    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
685061    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
685062    +
685063    +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
685064    +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
685065    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685066    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685067    +end;
MPRINT(EM_DIAGRAM):   end;
685068    +
685069    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
685070    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
685071    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685072    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685073    +end;
MPRINT(EM_DIAGRAM):   end;
685074    +
685075    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
685076    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
685077    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685078    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685079    +end;
MPRINT(EM_DIAGRAM):   end;
685080    +
685081    +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
685082    +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
685083    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685084    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685085    +end;
MPRINT(EM_DIAGRAM):   end;
685086    +
685087    +*** Check Mnt for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Mnt for missing values ;
685088    +if missing( Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( Mnt ) then do;
685089    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685090    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685091    +end;
MPRINT(EM_DIAGRAM):   end;
685092    +
685093    +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
685094    +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
685095    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685096    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685097    +end;
MPRINT(EM_DIAGRAM):   end;
685098    +
685099    +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
685100    +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
685101    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685102    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685103    +end;
MPRINT(EM_DIAGRAM):   end;
685104    +
685105    +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
685106    +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
685107    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685108    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685109    +end;
MPRINT(EM_DIAGRAM):   end;
685110    +
685111    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
685112    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
685113    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685114    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685115    +end;
MPRINT(EM_DIAGRAM):   end;
685116    +
685117    +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
685118    +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
685119    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685120    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685121    +end;
MPRINT(EM_DIAGRAM):   end;
685122    +
685123    +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
685124    +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
685125    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685126    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685127    +end;
MPRINT(EM_DIAGRAM):   end;
685128    +
685129    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
685130    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
685131    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685132    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685133    +end;
MPRINT(EM_DIAGRAM):   end;
685134    +
685135    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
685136    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
685137    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685138    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685139    +end;
MPRINT(EM_DIAGRAM):   end;
685140    +
685141    +*** Check NumDistPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDistPurchases for missing values ;
685142    +if missing( NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDistPurchases ) then do;
685143    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685144    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685145    +end;
MPRINT(EM_DIAGRAM):   end;
685146    +
685147    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
685148    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
685149    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685150    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685151    +end;
MPRINT(EM_DIAGRAM):   end;
685152    +
685153    +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
685154    +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
685155    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685156    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685157    +end;
MPRINT(EM_DIAGRAM):   end;
685158    +
685159    +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
685160    +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
685161    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685162    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685163    +end;
MPRINT(EM_DIAGRAM):   end;
685164    +
685165    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
685166    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
685167    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685168    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685169    +end;
MPRINT(EM_DIAGRAM):   end;
685170    +
685171    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
685172    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
685173    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685174    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685175    +end;
MPRINT(EM_DIAGRAM):   end;
685176    +
685177    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
685178    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
685179    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
685180    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
685181    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685182    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685183    +end;
MPRINT(EM_DIAGRAM):   end;
685184    +else do;
MPRINT(EM_DIAGRAM):   else do;
685185    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685186    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
685187    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685188    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685189    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
685190    +   end;
MPRINT(EM_DIAGRAM):   end;
685191    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685192    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
685193    +   end;
MPRINT(EM_DIAGRAM):   end;
685194    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685195    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
685196    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685197    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685198    +   end;
MPRINT(EM_DIAGRAM):   end;
685199    +end;
MPRINT(EM_DIAGRAM):   end;
685200    +
685201    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
685202    +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
685203    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
685204    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
685205    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685206    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685207    +end;
MPRINT(EM_DIAGRAM):   end;
685208    +else do;
MPRINT(EM_DIAGRAM):   else do;
685209    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685210    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
685211    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685212    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685213    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
685214    +   end;
MPRINT(EM_DIAGRAM):   end;
685215    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685216    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
685217    +   end;
MPRINT(EM_DIAGRAM):   end;
685218    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685219    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
685220    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685221    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685222    +   end;
MPRINT(EM_DIAGRAM):   end;
685223    +end;
MPRINT(EM_DIAGRAM):   end;
685224    +
685225    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
685226    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
685227    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
685228    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
685229    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685230    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685231    +end;
MPRINT(EM_DIAGRAM):   end;
685232    +else do;
MPRINT(EM_DIAGRAM):   else do;
685233    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685234    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
685235    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685236    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685237    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
685238    +   end;
MPRINT(EM_DIAGRAM):   end;
685239    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685240    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
685241    +   end;
MPRINT(EM_DIAGRAM):   end;
685242    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685243    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
685244    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685245    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685246    +   end;
MPRINT(EM_DIAGRAM):   end;
685247    +end;
MPRINT(EM_DIAGRAM):   end;
685248    +
685249    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
685250    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
685251    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
685252    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
685253    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685254    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685255    +end;
MPRINT(EM_DIAGRAM):   end;
685256    +else do;
MPRINT(EM_DIAGRAM):   else do;
685257    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685258    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
685259    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685260    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685261    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
685262    +   end;
MPRINT(EM_DIAGRAM):   end;
685263    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685264    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
685265    +   end;
MPRINT(EM_DIAGRAM):   end;
685266    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685267    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
685268    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685269    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685270    +   end;
MPRINT(EM_DIAGRAM):   end;
685271    +end;
MPRINT(EM_DIAGRAM):   end;
685272    +
685273    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
685274    +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
685275    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
685276    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
685277    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685278    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685279    +end;
MPRINT(EM_DIAGRAM):   end;
685280    +else do;
MPRINT(EM_DIAGRAM):   else do;
685281    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685282    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
685283    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685284    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685285    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
685286    +   end;
MPRINT(EM_DIAGRAM):   end;
685287    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685288    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
685289    +   end;
MPRINT(EM_DIAGRAM):   end;
685290    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685291    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
685292    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685293    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685294    +   end;
MPRINT(EM_DIAGRAM):   end;
685295    +end;
MPRINT(EM_DIAGRAM):   end;
685296    +
685297    +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
685298    +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
685299    +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
685300    +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
685301    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685302    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685303    +end;
MPRINT(EM_DIAGRAM):   end;
685304    +else do;
MPRINT(EM_DIAGRAM):   else do;
685305    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685306    +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
685307    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685308    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685309    +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
685310    +   end;
MPRINT(EM_DIAGRAM):   end;
685311    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685312    +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
685313    +   end;
MPRINT(EM_DIAGRAM):   end;
685314    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685315    +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
685316    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685317    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685318    +   end;
MPRINT(EM_DIAGRAM):   end;
685319    +end;
MPRINT(EM_DIAGRAM):   end;
685320    +
685321    +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
685322    +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
685323    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
685324    +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
685325    +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
685326    +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
685327    +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
685328    +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
685329    +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
685330    +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
685331    +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
685332    +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
685333    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685334    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685335    +end;
MPRINT(EM_DIAGRAM):   end;
685336    +else do;
MPRINT(EM_DIAGRAM):   else do;
685337    +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
685338    +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
685339    +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685340    +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
685341    +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
685342    +   end;
MPRINT(EM_DIAGRAM):   end;
685343    +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
685344    +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
685345    +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
685346    +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
685347    +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
685348    +   end;
MPRINT(EM_DIAGRAM):   end;
685349    +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
685350    +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
685351    +   end;
MPRINT(EM_DIAGRAM):   end;
685352    +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
685353    +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
685354    +   end;
MPRINT(EM_DIAGRAM):   end;
685355    +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
685356    +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
685357    +   end;
MPRINT(EM_DIAGRAM):   end;
685358    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685359    +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
685360    +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
685361    +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
685362    +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
685363    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685364    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685365    +   end;
MPRINT(EM_DIAGRAM):   end;
685366    +end;
MPRINT(EM_DIAGRAM):   end;
685367    +
685368    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
685369    +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
685370    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
685371    +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
685372    +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
685373    +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
685374    +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
685375    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
685376    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
685377    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
685378    +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
685379    +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
685380    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685381    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685382    +end;
MPRINT(EM_DIAGRAM):   end;
685383    +else do;
MPRINT(EM_DIAGRAM):   else do;
685384    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
685385    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
685386    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685387    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
685388    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
685389    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
685390    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
685391    +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
685392    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
685393    +         end;
MPRINT(EM_DIAGRAM):   end;
685394    +         else do;
MPRINT(EM_DIAGRAM):   else do;
685395    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
685396    +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
685397    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
685398    +            end;
MPRINT(EM_DIAGRAM):   end;
685399    +         end;
MPRINT(EM_DIAGRAM):   end;
685400    +      end;
MPRINT(EM_DIAGRAM):   end;
685401    +      else do;
MPRINT(EM_DIAGRAM):   else do;
685402    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
685403    +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
685404    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
685405    +         end;
MPRINT(EM_DIAGRAM):   end;
685406    +      end;
MPRINT(EM_DIAGRAM):   end;
685407    +   end;
MPRINT(EM_DIAGRAM):   end;
685408    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685409    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
685410    +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
685411    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
685412    +      end;
MPRINT(EM_DIAGRAM):   end;
685413    +      else do;
MPRINT(EM_DIAGRAM):   else do;
685414    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
685415    +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
685416    +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
685417    +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
685418    +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
685419    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
685420    +         end;
MPRINT(EM_DIAGRAM):   end;
685421    +      end;
MPRINT(EM_DIAGRAM):   end;
685422    +   end;
MPRINT(EM_DIAGRAM):   end;
685423    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
685424    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
685425    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
685426    +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
685427    +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
685428    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685429    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685430    +   end;
MPRINT(EM_DIAGRAM):   end;
685431    +end;
MPRINT(EM_DIAGRAM):   end;
685432    +
685433    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
685434    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
685435    +   _P0 = 0.8756097561;
MPRINT(EM_DIAGRAM):   _P0 = 0.8756097561;
685436    +   _P1 = 0.1243902439;
MPRINT(EM_DIAGRAM):   _P1 = 0.1243902439;
685437    +   goto RULE_2DR1;
MPRINT(EM_DIAGRAM):   goto RULE_2DR1;
685438    +end;
MPRINT(EM_DIAGRAM):   end;
685439    +
685440    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
685441    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
685442    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
685443    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
685444    +
685445    +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
685446    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685447    +_LP0 = _LP0 + (    -0.1560157255964) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.1560157255964) * _TEMP * _1_0;
685448    +
685449    +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
685450    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685451    +_LP0 = _LP0 + (   -0.45585868445985) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45585868445985) * _TEMP * _2_0;
685452    +
685453    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
685454    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685455    +_LP0 = _LP0 + (   -0.09256541025262) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09256541025262) * _TEMP * _3_0;
685456    +
685457    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
685458    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685459    +_LP0 = _LP0 + (   -0.02746921818988) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02746921818988) * _TEMP * _4_0;
685460    +
685461    +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
685462    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685463    +_LP0 = _LP0 + (   -0.31324699318634) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31324699318634) * _TEMP * _5_0;
685464    +
685465    +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
685466    +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
685467    +_LP0 = _LP0 + (   -0.01233910301688 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01233910301688 * _TEMP);
685468    +
685469    +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
685470    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685471    +_LP0 = _LP0 + (   -4.78491003199989) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.78491003199989) * _TEMP * _6_0;
685472    +
685473    +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
685474    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685475    +_LP0 = _LP0 + (   -2.09470486754483) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.09470486754483) * _TEMP * _7_0;
685476    +_LP0 = _LP0 + (    8.12871813379221) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.12871813379221) * _TEMP * _7_1;
685477    +_LP0 = _LP0 + (   -2.30296879488845) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.30296879488845) * _TEMP * _7_2;
685478    +_LP0 = _LP0 + (   -1.63396724403952) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63396724403952) * _TEMP * _7_3;
685479    +
685480    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
685481    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
685482    +_LP0 = _LP0 + (    0.06442984333557 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06442984333557 * _TEMP);
685483    +
685484    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
685485    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
685486    +_LP0 = _LP0 + (   -0.00001376677759 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00001376677759 * _TEMP);
685487    +
685488    +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
685489    +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
685490    +_LP0 = _LP0 + (    0.08875349087295 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.08875349087295 * _TEMP);
685491    +
685492    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
685493    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
685494    +_LP0 = _LP0 + (   -0.45011480517718) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45011480517718) * _TEMP * _9_0;
685495    +_LP0 = _LP0 + (    0.15483279258714) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15483279258714) * _TEMP * _9_1;
685496    +_LP0 = _LP0 + (    -0.2468727722526) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2468727722526) * _TEMP * _9_2;
685497    +_LP0 = _LP0 + (   -0.28864137282061) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.28864137282061) * _TEMP * _9_3;
685498    +
685499    +***  Effect: Mnt ;
MPRINT(EM_DIAGRAM):   *** Effect: Mnt ;
685500    +_TEMP = Mnt ;
MPRINT(EM_DIAGRAM):   _TEMP = Mnt ;
685501    +_LP0 = _LP0 + (    -0.0013080231894 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0013080231894 * _TEMP);
685502    +
685503    +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
685504    +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
685505    +_LP0 = _LP0 + (    0.00563408454282 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00563408454282 * _TEMP);
685506    +
685507    +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
685508    +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
685509    +_LP0 = _LP0 + (   -0.00309262350043 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00309262350043 * _TEMP);
685510    +
685511    +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
685512    +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
685513    +_LP0 = _LP0 + (   -0.00216177411858 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00216177411858 * _TEMP);
685514    +
685515    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
685516    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
685517    +_LP0 = _LP0 + (     0.0014025197451 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0014025197451 * _TEMP);
685518    +
685519    +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
685520    +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
685521    +_LP0 = _LP0 + (    -0.0007597608107 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0007597608107 * _TEMP);
685522    +
685523    +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
685524    +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
685525    +_LP0 = _LP0 + (    0.00377704914646 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00377704914646 * _TEMP);
685526    +
685527    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
685528    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
685529    +_LP0 = _LP0 + (    0.15620596239343 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15620596239343 * _TEMP);
685530    +
685531    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
685532    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
685533    +_LP0 = _LP0 + (   -0.00896675317907 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00896675317907 * _TEMP);
685534    +
685535    +***  Effect: NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDistPurchases ;
685536    +_TEMP = NumDistPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDistPurchases ;
685537    +_LP0 = _LP0 + (   -0.03831045196563 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03831045196563 * _TEMP);
685538    +
685539    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
685540    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
685541    +_LP0 = _LP0 + (    0.09632223979394 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09632223979394 * _TEMP);
685542    +
685543    +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
685544    +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
685545    +_LP0 = _LP0 + (    0.00013291850521 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00013291850521 * _TEMP);
685546    +
685547    +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
685548    +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
685549    +_LP0 = _LP0 + (    0.01868482592683 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01868482592683 * _TEMP);
685550    +
685551    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
685552    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
685553    +_LP0 = _LP0 + (   -0.01553167210852 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01553167210852 * _TEMP);
685554    +
685555    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
685556    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
685557    +_LP0 = _LP0 + (   -0.04288376179124 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04288376179124 * _TEMP);
685558    +
685559    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
685560    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
685561    +_TEMP =     9.22221204098894 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 9.22221204098894 + _LP0;
685562    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
685563    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
685564    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
685565    +end;
MPRINT(EM_DIAGRAM):   end;
685566    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
685567    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
685568    +
685569    +RULE_2DR1:
685570    +
685571    +
685572    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE_2DR1: *** Posterior Probabilities and Predicted Level;
685573    +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
685574    +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
685575    +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
685576    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
685577    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
685578    +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
685579    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
685580    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
685581    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
685582    +end;
MPRINT(EM_DIAGRAM):   end;
685583    +I__bin = RULE_2DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE_2DRF[_IY];
685584    +U__bin = RULE_2DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE_2DRU[_IY];
685585    +
685586    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685587    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
685588    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685589    +*;
MPRINT(EM_DIAGRAM):   *;
685590    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
685591    +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
685592    +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
685593    +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
685594    +P_DepVar1=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1=P__bin1;
685595    +P_DepVar0 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1-P__bin1;
685596    +end;
MPRINT(EM_DIAGRAM):   end;
685597    +*;
MPRINT(EM_DIAGRAM):   *;
685598    +*;
MPRINT(EM_DIAGRAM):   *;
685599    +end;
MPRINT(EM_DIAGRAM):   end;
685600    +*;
MPRINT(EM_DIAGRAM):   *;
685601    +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
685602    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685603    +* Cleanup Model for DepVar;
MPRINT(EM_DIAGRAM):   * Cleanup Model for DepVar;
685604    +* Null Model based on training frequencies;
MPRINT(EM_DIAGRAM):   * Null Model based on training frequencies;
685605    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685606    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
685607    +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
685608    +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
685609    +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
685610    +P_DepVar1 = 0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
685611    +P_DepVar0 = 0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
685612    +*;
MPRINT(EM_DIAGRAM):   *;
685613    +end;
MPRINT(EM_DIAGRAM):   end;
685614    +*;
MPRINT(EM_DIAGRAM):   *;
685615    +*;
MPRINT(EM_DIAGRAM):   *;
685616    +drop U__bin _bin;
MPRINT(EM_DIAGRAM):   drop U__bin _bin;
685617    +*;
MPRINT(EM_DIAGRAM):   *;
685618    +_FORMAT = PUT(DepVar, BEST.);
MPRINT(EM_DIAGRAM):   _FORMAT = PUT(DepVar, BEST.);
685619    +%DMNORMCP(_FORMAT, F_DepVar);
MPRINT(DMNORMCP):   F_DepVar=dmnorm(_FORMAT,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
685620    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685621    +*Computing Residual Vars: DepVar;
MPRINT(EM_DIAGRAM):   *Computing Residual Vars: DepVar;
685622    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685623    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(EM_DIAGRAM):   Label R_DepVar1= 'Residual: DepVar=1';
685624    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(EM_DIAGRAM):   Label R_DepVar0= 'Residual: DepVar=0';
685625    +if
685626    + F_DepVar ne '1'
685627    +and F_DepVar ne '0'
685628    + then do;
MPRINT(EM_DIAGRAM):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
685629    +R_DepVar1=.;
MPRINT(EM_DIAGRAM):   R_DepVar1=.;
685630    +R_DepVar0=.;
MPRINT(EM_DIAGRAM):   R_DepVar0=.;
685631    +end;
MPRINT(EM_DIAGRAM):   end;
685632    +else do;
MPRINT(EM_DIAGRAM):   else do;
685633    +R_DepVar1= - P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1= - P_DepVar1;
685634    +R_DepVar0= - P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0= - P_DepVar0;
685635    +select(F_DepVar);
MPRINT(EM_DIAGRAM):   select(F_DepVar);
685636    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(EM_DIAGRAM):   when('1')R_DepVar1= R_DepVar1+1;
685637    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(EM_DIAGRAM):   when('0')R_DepVar0= R_DepVar0+1;
685638    +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
685639    +end;
MPRINT(EM_DIAGRAM):   end;
685640    +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
685641     run;
 
NOTE: DATA STEP view saved on file EMWS8.RULE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
685642     quit;
685643     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
685644     filename emflow
685644   ! "C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rule: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685645     *------------------------------------------------------------*;
685646     * Rule: Scoring VALIDATE data;
685647     *------------------------------------------------------------*;
685648     data EMWS8.Rule_VALIDATE
685649     / view=EMWS8.Rule_VALIDATE
685650     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_VALIDATE / view=EMWS8.Rule_VALIDATE ;
685651     set EMWS8.Meta_VALIDATE
685652     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_VALIDATE ;
685653     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMFLOWSCORE.sas.
685654    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685655    +* Rule Induction Scoring Code;
MPRINT(EM_DIAGRAM):   * Rule Induction Scoring Code;
685656    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685657    +length _bin $12 I__bin $12 I_DepVar $32;
MPRINT(EM_DIAGRAM):   length _bin $12 I__bin $12 I_DepVar $32;
685658    +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
685659    +label F_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label F_DepVar = 'Into: DepVar';
685660    +*;
MPRINT(EM_DIAGRAM):   *;
685661    +drop I__bin;
MPRINT(EM_DIAGRAM):   drop I__bin;
685662    +*;
MPRINT(EM_DIAGRAM):   *;
685663    +F_DepVar=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   F_DepVar=putn(DepVar, 'best.');
685664    +%DMNORMIP(F_DepVar);
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
685665    +I_DepVar = '';
MPRINT(EM_DIAGRAM):   I_DepVar = '';
685666    +I__bin= '0';
MPRINT(EM_DIAGRAM):   I__bin= '0';
685667    +*;
MPRINT(EM_DIAGRAM):   *;
685668    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685669    +* Null Model;
MPRINT(EM_DIAGRAM):   * Null Model;
685670    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685671    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685672    +*Binary model for DepVar = 0;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 0;
685673    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
685674    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685675    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
685676    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
685677    +
685678    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
685679    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
685680    +
685681    +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
685682    +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
685683    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
685684    +array RULE_1DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE_1DRF [2] $12 _temporary_ ('1' '0' );
685685    +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
685686    +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
685687    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
685688    +array RULE_1DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE_1DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
685689    +
685690    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
685691    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
685692    +
685693    +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
685694    +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
685695    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685696    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685697    +end;
MPRINT(EM_DIAGRAM):   end;
685698    +
685699    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
685700    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
685701    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685702    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685703    +end;
MPRINT(EM_DIAGRAM):   end;
685704    +
685705    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
685706    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
685707    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685708    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685709    +end;
MPRINT(EM_DIAGRAM):   end;
685710    +
685711    +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
685712    +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
685713    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685714    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685715    +end;
MPRINT(EM_DIAGRAM):   end;
685716    +
685717    +*** Check Mnt for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Mnt for missing values ;
685718    +if missing( Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( Mnt ) then do;
685719    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685720    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685721    +end;
MPRINT(EM_DIAGRAM):   end;
685722    +
685723    +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
685724    +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
685725    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685726    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685727    +end;
MPRINT(EM_DIAGRAM):   end;
685728    +
685729    +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
685730    +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
685731    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685732    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685733    +end;
MPRINT(EM_DIAGRAM):   end;
685734    +
685735    +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
685736    +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
685737    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685738    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685739    +end;
MPRINT(EM_DIAGRAM):   end;
685740    +
685741    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
685742    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
685743    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685744    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685745    +end;
MPRINT(EM_DIAGRAM):   end;
685746    +
685747    +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
685748    +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
685749    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685750    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685751    +end;
MPRINT(EM_DIAGRAM):   end;
685752    +
685753    +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
685754    +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
685755    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685756    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685757    +end;
MPRINT(EM_DIAGRAM):   end;
685758    +
685759    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
685760    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
685761    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685762    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685763    +end;
MPRINT(EM_DIAGRAM):   end;
685764    +
685765    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
685766    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
685767    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685768    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685769    +end;
MPRINT(EM_DIAGRAM):   end;
685770    +
685771    +*** Check NumDistPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDistPurchases for missing values ;
685772    +if missing( NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDistPurchases ) then do;
685773    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685774    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685775    +end;
MPRINT(EM_DIAGRAM):   end;
685776    +
685777    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
685778    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
685779    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685780    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685781    +end;
MPRINT(EM_DIAGRAM):   end;
685782    +
685783    +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
685784    +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
685785    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685786    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685787    +end;
MPRINT(EM_DIAGRAM):   end;
685788    +
685789    +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
685790    +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
685791    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685792    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685793    +end;
MPRINT(EM_DIAGRAM):   end;
685794    +
685795    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
685796    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
685797    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685798    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685799    +end;
MPRINT(EM_DIAGRAM):   end;
685800    +
685801    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
685802    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
685803    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685804    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685805    +end;
MPRINT(EM_DIAGRAM):   end;
685806    +
685807    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
685808    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
685809    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
685810    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
685811    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685812    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685813    +end;
MPRINT(EM_DIAGRAM):   end;
685814    +else do;
MPRINT(EM_DIAGRAM):   else do;
685815    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685816    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
685817    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685818    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685819    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
685820    +   end;
MPRINT(EM_DIAGRAM):   end;
685821    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685822    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
685823    +   end;
MPRINT(EM_DIAGRAM):   end;
685824    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685825    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
685826    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685827    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685828    +   end;
MPRINT(EM_DIAGRAM):   end;
685829    +end;
MPRINT(EM_DIAGRAM):   end;
685830    +
685831    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
685832    +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
685833    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
685834    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
685835    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685836    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685837    +end;
MPRINT(EM_DIAGRAM):   end;
685838    +else do;
MPRINT(EM_DIAGRAM):   else do;
685839    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685840    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
685841    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685842    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685843    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
685844    +   end;
MPRINT(EM_DIAGRAM):   end;
685845    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685846    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
685847    +   end;
MPRINT(EM_DIAGRAM):   end;
685848    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685849    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
685850    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685851    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685852    +   end;
MPRINT(EM_DIAGRAM):   end;
685853    +end;
MPRINT(EM_DIAGRAM):   end;
685854    +
685855    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
685856    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
685857    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
685858    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
685859    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685860    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685861    +end;
MPRINT(EM_DIAGRAM):   end;
685862    +else do;
MPRINT(EM_DIAGRAM):   else do;
685863    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685864    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
685865    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685866    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685867    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
685868    +   end;
MPRINT(EM_DIAGRAM):   end;
685869    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685870    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
685871    +   end;
MPRINT(EM_DIAGRAM):   end;
685872    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685873    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
685874    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685875    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685876    +   end;
MPRINT(EM_DIAGRAM):   end;
685877    +end;
MPRINT(EM_DIAGRAM):   end;
685878    +
685879    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
685880    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
685881    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
685882    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
685883    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685884    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685885    +end;
MPRINT(EM_DIAGRAM):   end;
685886    +else do;
MPRINT(EM_DIAGRAM):   else do;
685887    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685888    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
685889    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685890    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685891    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
685892    +   end;
MPRINT(EM_DIAGRAM):   end;
685893    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685894    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
685895    +   end;
MPRINT(EM_DIAGRAM):   end;
685896    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685897    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
685898    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685899    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685900    +   end;
MPRINT(EM_DIAGRAM):   end;
685901    +end;
MPRINT(EM_DIAGRAM):   end;
685902    +
685903    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
685904    +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
685905    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
685906    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
685907    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685908    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685909    +end;
MPRINT(EM_DIAGRAM):   end;
685910    +else do;
MPRINT(EM_DIAGRAM):   else do;
685911    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685912    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
685913    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685914    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685915    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
685916    +   end;
MPRINT(EM_DIAGRAM):   end;
685917    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685918    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
685919    +   end;
MPRINT(EM_DIAGRAM):   end;
685920    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685921    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
685922    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685923    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685924    +   end;
MPRINT(EM_DIAGRAM):   end;
685925    +end;
MPRINT(EM_DIAGRAM):   end;
685926    +
685927    +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
685928    +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
685929    +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
685930    +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
685931    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685932    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685933    +end;
MPRINT(EM_DIAGRAM):   end;
685934    +else do;
MPRINT(EM_DIAGRAM):   else do;
685935    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
685936    +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
685937    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685938    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
685939    +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
685940    +   end;
MPRINT(EM_DIAGRAM):   end;
685941    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
685942    +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
685943    +   end;
MPRINT(EM_DIAGRAM):   end;
685944    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685945    +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
685946    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685947    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685948    +   end;
MPRINT(EM_DIAGRAM):   end;
685949    +end;
MPRINT(EM_DIAGRAM):   end;
685950    +
685951    +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
685952    +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
685953    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
685954    +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
685955    +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
685956    +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
685957    +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
685958    +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
685959    +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
685960    +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
685961    +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
685962    +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
685963    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
685964    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685965    +end;
MPRINT(EM_DIAGRAM):   end;
685966    +else do;
MPRINT(EM_DIAGRAM):   else do;
685967    +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
685968    +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
685969    +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
685970    +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
685971    +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
685972    +   end;
MPRINT(EM_DIAGRAM):   end;
685973    +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
685974    +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
685975    +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
685976    +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
685977    +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
685978    +   end;
MPRINT(EM_DIAGRAM):   end;
685979    +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
685980    +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
685981    +   end;
MPRINT(EM_DIAGRAM):   end;
685982    +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
685983    +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
685984    +   end;
MPRINT(EM_DIAGRAM):   end;
685985    +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
685986    +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
685987    +   end;
MPRINT(EM_DIAGRAM):   end;
685988    +   else do;
MPRINT(EM_DIAGRAM):   else do;
685989    +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
685990    +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
685991    +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
685992    +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
685993    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
685994    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
685995    +   end;
MPRINT(EM_DIAGRAM):   end;
685996    +end;
MPRINT(EM_DIAGRAM):   end;
685997    +
685998    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
685999    +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
686000    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
686001    +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
686002    +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
686003    +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
686004    +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
686005    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
686006    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
686007    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
686008    +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
686009    +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
686010    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686011    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686012    +end;
MPRINT(EM_DIAGRAM):   end;
686013    +else do;
MPRINT(EM_DIAGRAM):   else do;
686014    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
686015    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
686016    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686017    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
686018    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
686019    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
686020    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
686021    +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
686022    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686023    +         end;
MPRINT(EM_DIAGRAM):   end;
686024    +         else do;
MPRINT(EM_DIAGRAM):   else do;
686025    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
686026    +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
686027    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686028    +            end;
MPRINT(EM_DIAGRAM):   end;
686029    +         end;
MPRINT(EM_DIAGRAM):   end;
686030    +      end;
MPRINT(EM_DIAGRAM):   end;
686031    +      else do;
MPRINT(EM_DIAGRAM):   else do;
686032    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
686033    +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
686034    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686035    +         end;
MPRINT(EM_DIAGRAM):   end;
686036    +      end;
MPRINT(EM_DIAGRAM):   end;
686037    +   end;
MPRINT(EM_DIAGRAM):   end;
686038    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686039    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
686040    +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
686041    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686042    +      end;
MPRINT(EM_DIAGRAM):   end;
686043    +      else do;
MPRINT(EM_DIAGRAM):   else do;
686044    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
686045    +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
686046    +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
686047    +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
686048    +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
686049    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686050    +         end;
MPRINT(EM_DIAGRAM):   end;
686051    +      end;
MPRINT(EM_DIAGRAM):   end;
686052    +   end;
MPRINT(EM_DIAGRAM):   end;
686053    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
686054    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
686055    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
686056    +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
686057    +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
686058    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686059    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686060    +   end;
MPRINT(EM_DIAGRAM):   end;
686061    +end;
MPRINT(EM_DIAGRAM):   end;
686062    +
686063    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
686064    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
686065    +   _P0 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P0 = 0.848778433;
686066    +   _P1 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P1 = 0.151221567;
686067    +   goto RULE_1DR1;
MPRINT(EM_DIAGRAM):   goto RULE_1DR1;
686068    +end;
MPRINT(EM_DIAGRAM):   end;
686069    +
686070    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
686071    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
686072    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
686073    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
686074    +
686075    +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
686076    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686077    +_LP0 = _LP0 + (    1.37959490891636) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.37959490891636) * _TEMP * _1_0;
686078    +
686079    +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
686080    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686081    +_LP0 = _LP0 + (    1.38881644367343) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.38881644367343) * _TEMP * _2_0;
686082    +
686083    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
686084    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686085    +_LP0 = _LP0 + (    1.49836425611786) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.49836425611786) * _TEMP * _3_0;
686086    +
686087    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
686088    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686089    +_LP0 = _LP0 + (    1.18986757703774) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.18986757703774) * _TEMP * _4_0;
686090    +
686091    +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
686092    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686093    +_LP0 = _LP0 + (    1.88753592135037) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.88753592135037) * _TEMP * _5_0;
686094    +
686095    +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
686096    +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
686097    +_LP0 = _LP0 + (    0.02031375470687 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02031375470687 * _TEMP);
686098    +
686099    +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
686100    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686101    +_LP0 = _LP0 + (   -0.40204765702117) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40204765702117) * _TEMP * _6_0;
686102    +
686103    +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
686104    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686105    +_LP0 = _LP0 + (    0.02225506337329) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02225506337329) * _TEMP * _7_0;
686106    +_LP0 = _LP0 + (    0.61176531164578) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.61176531164578) * _TEMP * _7_1;
686107    +_LP0 = _LP0 + (   -0.36644839378194) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36644839378194) * _TEMP * _7_2;
686108    +_LP0 = _LP0 + (   -0.12231177702126) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.12231177702126) * _TEMP * _7_3;
686109    +
686110    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
686111    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
686112    +_LP0 = _LP0 + (     0.3666224217102 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.3666224217102 * _TEMP);
686113    +
686114    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
686115    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
686116    +_LP0 = _LP0 + (   -0.00005713252434 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00005713252434 * _TEMP);
686117    +
686118    +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
686119    +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
686120    +_LP0 = _LP0 + (    0.41057471857215 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.41057471857215 * _TEMP);
686121    +
686122    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
686123    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686124    +_LP0 = _LP0 + (   -0.27437867955027) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27437867955027) * _TEMP * _9_0;
686125    +_LP0 = _LP0 + (    1.02225430661359) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.02225430661359) * _TEMP * _9_1;
686126    +_LP0 = _LP0 + (   -0.75468142744006) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.75468142744006) * _TEMP * _9_2;
686127    +_LP0 = _LP0 + (    1.04712905781542) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.04712905781542) * _TEMP * _9_3;
686128    +
686129    +***  Effect: Mnt ;
MPRINT(EM_DIAGRAM):   *** Effect: Mnt ;
686130    +_TEMP = Mnt ;
MPRINT(EM_DIAGRAM):   _TEMP = Mnt ;
686131    +_LP0 = _LP0 + (    0.00461659402024 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00461659402024 * _TEMP);
686132    +
686133    +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
686134    +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
686135    +_LP0 = _LP0 + (    0.00251764049354 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00251764049354 * _TEMP);
686136    +
686137    +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
686138    +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
686139    +_LP0 = _LP0 + (    0.00413411554031 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00413411554031 * _TEMP);
686140    +
686141    +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
686142    +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
686143    +_LP0 = _LP0 + (   -0.00602352418747 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00602352418747 * _TEMP);
686144    +
686145    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
686146    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
686147    +_LP0 = _LP0 + (   -0.01296976269642 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01296976269642 * _TEMP);
686148    +
686149    +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
686150    +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
686151    +_LP0 = _LP0 + (    0.00105376667989 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00105376667989 * _TEMP);
686152    +
686153    +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
686154    +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
686155    +_LP0 = _LP0 + (    0.00973147761427 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00973147761427 * _TEMP);
686156    +
686157    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
686158    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
686159    +_LP0 = _LP0 + (   -1.19498863276998 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.19498863276998 * _TEMP);
686160    +
686161    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
686162    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
686163    +_LP0 = _LP0 + (   -0.75556665247436 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.75556665247436 * _TEMP);
686164    +
686165    +***  Effect: NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDistPurchases ;
686166    +_TEMP = NumDistPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDistPurchases ;
686167    +_LP0 = _LP0 + (    0.04468116637826 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04468116637826 * _TEMP);
686168    +
686169    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
686170    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
686171    +_LP0 = _LP0 + (   -1.08435727343224 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.08435727343224 * _TEMP);
686172    +
686173    +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
686174    +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
686175    +_LP0 = _LP0 + (   -0.00028375117498 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00028375117498 * _TEMP);
686176    +
686177    +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
686178    +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
686179    +_LP0 = _LP0 + (   -0.01569409100668 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01569409100668 * _TEMP);
686180    +
686181    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
686182    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
686183    +_LP0 = _LP0 + (    0.09810556470719 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09810556470719 * _TEMP);
686184    +
686185    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
686186    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
686187    +_LP0 = _LP0 + (    1.19606402340833 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.19606402340833 * _TEMP);
686188    +
686189    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
686190    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
686191    +_TEMP =      0.3380565978551 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 0.3380565978551 + _LP0;
686192    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
686193    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
686194    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
686195    +end;
MPRINT(EM_DIAGRAM):   end;
686196    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
686197    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
686198    +
686199    +RULE_1DR1:
686200    +
686201    +
686202    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE_1DR1: *** Posterior Probabilities and Predicted Level;
686203    +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
686204    +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
686205    +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
686206    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
686207    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
686208    +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
686209    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
686210    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
686211    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
686212    +end;
MPRINT(EM_DIAGRAM):   end;
686213    +I__bin = RULE_1DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE_1DRF[_IY];
686214    +U__bin = RULE_1DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE_1DRU[_IY];
686215    +
686216    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
686217    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
686218    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
686219    +*;
MPRINT(EM_DIAGRAM):   *;
686220    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
686221    +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
686222    +I_DepVar = ("0");
MPRINT(EM_DIAGRAM):   I_DepVar = ("0");
686223    +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
686224    +P_DepVar0=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0=P__bin1;
686225    +P_DepVar1 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1-P__bin1;
686226    +end;
MPRINT(EM_DIAGRAM):   end;
686227    +*;
MPRINT(EM_DIAGRAM):   *;
686228    +*;
MPRINT(EM_DIAGRAM):   *;
686229    +* END Binary Model for DepVar = 0;
MPRINT(EM_DIAGRAM):   * END Binary Model for DepVar = 0;
686230    +;
MPRINT(EM_DIAGRAM):   ;
686231    +*;
MPRINT(EM_DIAGRAM):   *;
686232    +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
686233    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
686234    +*Binary model for DepVar = 1;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 1;
686235    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
686236    +*;
MPRINT(EM_DIAGRAM):   *;
686237    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
686238    +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
686239    +*;
MPRINT(EM_DIAGRAM):   *;
686240    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
686241    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
686242    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
686243    +
686244    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
686245    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
686246    +
686247    +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
686248    +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
686249    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
686250    +array RULE_2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE_2DRF [2] $12 _temporary_ ('1' '0' );
686251    +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
686252    +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
686253    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
686254    +array RULE_2DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE_2DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
686255    +
686256    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
686257    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
686258    +
686259    +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
686260    +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
686261    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686262    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686263    +end;
MPRINT(EM_DIAGRAM):   end;
686264    +
686265    +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
686266    +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
686267    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686268    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686269    +end;
MPRINT(EM_DIAGRAM):   end;
686270    +
686271    +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
686272    +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
686273    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686274    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686275    +end;
MPRINT(EM_DIAGRAM):   end;
686276    +
686277    +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
686278    +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
686279    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686280    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686281    +end;
MPRINT(EM_DIAGRAM):   end;
686282    +
686283    +*** Check Mnt for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Mnt for missing values ;
686284    +if missing( Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( Mnt ) then do;
686285    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686286    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686287    +end;
MPRINT(EM_DIAGRAM):   end;
686288    +
686289    +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
686290    +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
686291    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686292    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686293    +end;
MPRINT(EM_DIAGRAM):   end;
686294    +
686295    +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
686296    +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
686297    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686298    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686299    +end;
MPRINT(EM_DIAGRAM):   end;
686300    +
686301    +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
686302    +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
686303    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686304    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686305    +end;
MPRINT(EM_DIAGRAM):   end;
686306    +
686307    +*** Check MntMeatProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntMeatProducts for missing values ;
686308    +if missing( MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntMeatProducts ) then do;
686309    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686310    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686311    +end;
MPRINT(EM_DIAGRAM):   end;
686312    +
686313    +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
686314    +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
686315    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686316    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686317    +end;
MPRINT(EM_DIAGRAM):   end;
686318    +
686319    +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
686320    +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
686321    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686322    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686323    +end;
MPRINT(EM_DIAGRAM):   end;
686324    +
686325    +*** Check NumCatalogPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumCatalogPurchases for missing values ;
686326    +if missing( NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumCatalogPurchases ) then do;
686327    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686328    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686329    +end;
MPRINT(EM_DIAGRAM):   end;
686330    +
686331    +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
686332    +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
686333    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686334    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686335    +end;
MPRINT(EM_DIAGRAM):   end;
686336    +
686337    +*** Check NumDistPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDistPurchases for missing values ;
686338    +if missing( NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDistPurchases ) then do;
686339    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686340    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686341    +end;
MPRINT(EM_DIAGRAM):   end;
686342    +
686343    +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
686344    +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
686345    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686346    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686347    +end;
MPRINT(EM_DIAGRAM):   end;
686348    +
686349    +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
686350    +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
686351    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686352    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686353    +end;
MPRINT(EM_DIAGRAM):   end;
686354    +
686355    +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
686356    +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
686357    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686358    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686359    +end;
MPRINT(EM_DIAGRAM):   end;
686360    +
686361    +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
686362    +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
686363    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686364    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686365    +end;
MPRINT(EM_DIAGRAM):   end;
686366    +
686367    +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
686368    +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
686369    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686370    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686371    +end;
MPRINT(EM_DIAGRAM):   end;
686372    +
686373    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
686374    +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
686375    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
686376    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
686377    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686378    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686379    +end;
MPRINT(EM_DIAGRAM):   end;
686380    +else do;
MPRINT(EM_DIAGRAM):   else do;
686381    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
686382    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
686383    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686384    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
686385    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
686386    +   end;
MPRINT(EM_DIAGRAM):   end;
686387    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
686388    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
686389    +   end;
MPRINT(EM_DIAGRAM):   end;
686390    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686391    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
686392    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686393    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686394    +   end;
MPRINT(EM_DIAGRAM):   end;
686395    +end;
MPRINT(EM_DIAGRAM):   end;
686396    +
686397    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
686398    +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
686399    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
686400    +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
686401    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686402    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686403    +end;
MPRINT(EM_DIAGRAM):   end;
686404    +else do;
MPRINT(EM_DIAGRAM):   else do;
686405    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
686406    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
686407    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686408    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
686409    +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
686410    +   end;
MPRINT(EM_DIAGRAM):   end;
686411    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
686412    +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
686413    +   end;
MPRINT(EM_DIAGRAM):   end;
686414    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686415    +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
686416    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686417    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686418    +   end;
MPRINT(EM_DIAGRAM):   end;
686419    +end;
MPRINT(EM_DIAGRAM):   end;
686420    +
686421    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
686422    +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
686423    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
686424    +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
686425    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686426    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686427    +end;
MPRINT(EM_DIAGRAM):   end;
686428    +else do;
MPRINT(EM_DIAGRAM):   else do;
686429    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
686430    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
686431    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686432    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
686433    +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
686434    +   end;
MPRINT(EM_DIAGRAM):   end;
686435    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
686436    +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
686437    +   end;
MPRINT(EM_DIAGRAM):   end;
686438    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686439    +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
686440    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686441    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686442    +   end;
MPRINT(EM_DIAGRAM):   end;
686443    +end;
MPRINT(EM_DIAGRAM):   end;
686444    +
686445    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
686446    +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
686447    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
686448    +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
686449    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686450    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686451    +end;
MPRINT(EM_DIAGRAM):   end;
686452    +else do;
MPRINT(EM_DIAGRAM):   else do;
686453    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
686454    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
686455    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686456    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
686457    +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
686458    +   end;
MPRINT(EM_DIAGRAM):   end;
686459    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
686460    +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
686461    +   end;
MPRINT(EM_DIAGRAM):   end;
686462    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686463    +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
686464    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686465    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686466    +   end;
MPRINT(EM_DIAGRAM):   end;
686467    +end;
MPRINT(EM_DIAGRAM):   end;
686468    +
686469    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
686470    +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
686471    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
686472    +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
686473    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686474    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686475    +end;
MPRINT(EM_DIAGRAM):   end;
686476    +else do;
MPRINT(EM_DIAGRAM):   else do;
686477    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
686478    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
686479    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686480    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
686481    +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
686482    +   end;
MPRINT(EM_DIAGRAM):   end;
686483    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
686484    +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
686485    +   end;
MPRINT(EM_DIAGRAM):   end;
686486    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686487    +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
686488    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686489    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686490    +   end;
MPRINT(EM_DIAGRAM):   end;
686491    +end;
MPRINT(EM_DIAGRAM):   end;
686492    +
686493    +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
686494    +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
686495    +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
686496    +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
686497    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686498    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686499    +end;
MPRINT(EM_DIAGRAM):   end;
686500    +else do;
MPRINT(EM_DIAGRAM):   else do;
686501    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
686502    +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
686503    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686504    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
686505    +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
686506    +   end;
MPRINT(EM_DIAGRAM):   end;
686507    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
686508    +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
686509    +   end;
MPRINT(EM_DIAGRAM):   end;
686510    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686511    +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
686512    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686513    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686514    +   end;
MPRINT(EM_DIAGRAM):   end;
686515    +end;
MPRINT(EM_DIAGRAM):   end;
686516    +
686517    +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
686518    +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
686519    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
686520    +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
686521    +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
686522    +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
686523    +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
686524    +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
686525    +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
686526    +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
686527    +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
686528    +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
686529    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686530    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686531    +end;
MPRINT(EM_DIAGRAM):   end;
686532    +else do;
MPRINT(EM_DIAGRAM):   else do;
686533    +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
686534    +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
686535    +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686536    +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
686537    +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
686538    +   end;
MPRINT(EM_DIAGRAM):   end;
686539    +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
686540    +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
686541    +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
686542    +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
686543    +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
686544    +   end;
MPRINT(EM_DIAGRAM):   end;
686545    +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
686546    +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
686547    +   end;
MPRINT(EM_DIAGRAM):   end;
686548    +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
686549    +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
686550    +   end;
MPRINT(EM_DIAGRAM):   end;
686551    +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
686552    +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
686553    +   end;
MPRINT(EM_DIAGRAM):   end;
686554    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686555    +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
686556    +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
686557    +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
686558    +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
686559    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686560    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686561    +   end;
MPRINT(EM_DIAGRAM):   end;
686562    +end;
MPRINT(EM_DIAGRAM):   end;
686563    +
686564    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
686565    +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
686566    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
686567    +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
686568    +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
686569    +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
686570    +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
686571    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
686572    +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
686573    +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
686574    +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
686575    +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
686576    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
686577    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686578    +end;
MPRINT(EM_DIAGRAM):   end;
686579    +else do;
MPRINT(EM_DIAGRAM):   else do;
686580    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
686581    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
686582    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
686583    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
686584    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
686585    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
686586    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
686587    +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
686588    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686589    +         end;
MPRINT(EM_DIAGRAM):   end;
686590    +         else do;
MPRINT(EM_DIAGRAM):   else do;
686591    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
686592    +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
686593    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686594    +            end;
MPRINT(EM_DIAGRAM):   end;
686595    +         end;
MPRINT(EM_DIAGRAM):   end;
686596    +      end;
MPRINT(EM_DIAGRAM):   end;
686597    +      else do;
MPRINT(EM_DIAGRAM):   else do;
686598    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
686599    +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
686600    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686601    +         end;
MPRINT(EM_DIAGRAM):   end;
686602    +      end;
MPRINT(EM_DIAGRAM):   end;
686603    +   end;
MPRINT(EM_DIAGRAM):   end;
686604    +   else do;
MPRINT(EM_DIAGRAM):   else do;
686605    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
686606    +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
686607    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686608    +      end;
MPRINT(EM_DIAGRAM):   end;
686609    +      else do;
MPRINT(EM_DIAGRAM):   else do;
686610    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
686611    +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
686612    +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
686613    +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
686614    +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
686615    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
686616    +         end;
MPRINT(EM_DIAGRAM):   end;
686617    +      end;
MPRINT(EM_DIAGRAM):   end;
686618    +   end;
MPRINT(EM_DIAGRAM):   end;
686619    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
686620    +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
686621    +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
686622    +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
686623    +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
686624    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
686625    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
686626    +   end;
MPRINT(EM_DIAGRAM):   end;
686627    +end;
MPRINT(EM_DIAGRAM):   end;
686628    +
686629    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
686630    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
686631    +   _P0 = 0.8756097561;
MPRINT(EM_DIAGRAM):   _P0 = 0.8756097561;
686632    +   _P1 = 0.1243902439;
MPRINT(EM_DIAGRAM):   _P1 = 0.1243902439;
686633    +   goto RULE_2DR1;
MPRINT(EM_DIAGRAM):   goto RULE_2DR1;
686634    +end;
MPRINT(EM_DIAGRAM):   end;
686635    +
686636    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
686637    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
686638    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
686639    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
686640    +
686641    +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
686642    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686643    +_LP0 = _LP0 + (    -0.1560157255964) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.1560157255964) * _TEMP * _1_0;
686644    +
686645    +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
686646    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686647    +_LP0 = _LP0 + (   -0.45585868445985) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45585868445985) * _TEMP * _2_0;
686648    +
686649    +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
686650    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686651    +_LP0 = _LP0 + (   -0.09256541025262) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09256541025262) * _TEMP * _3_0;
686652    +
686653    +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
686654    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686655    +_LP0 = _LP0 + (   -0.02746921818988) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02746921818988) * _TEMP * _4_0;
686656    +
686657    +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
686658    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686659    +_LP0 = _LP0 + (   -0.31324699318634) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31324699318634) * _TEMP * _5_0;
686660    +
686661    +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
686662    +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
686663    +_LP0 = _LP0 + (   -0.01233910301688 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01233910301688 * _TEMP);
686664    +
686665    +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
686666    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686667    +_LP0 = _LP0 + (   -4.78491003199989) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.78491003199989) * _TEMP * _6_0;
686668    +
686669    +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
686670    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686671    +_LP0 = _LP0 + (   -2.09470486754483) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.09470486754483) * _TEMP * _7_0;
686672    +_LP0 = _LP0 + (    8.12871813379221) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.12871813379221) * _TEMP * _7_1;
686673    +_LP0 = _LP0 + (   -2.30296879488845) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.30296879488845) * _TEMP * _7_2;
686674    +_LP0 = _LP0 + (   -1.63396724403952) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63396724403952) * _TEMP * _7_3;
686675    +
686676    +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
686677    +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
686678    +_LP0 = _LP0 + (    0.06442984333557 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06442984333557 * _TEMP);
686679    +
686680    +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
686681    +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
686682    +_LP0 = _LP0 + (   -0.00001376677759 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00001376677759 * _TEMP);
686683    +
686684    +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
686685    +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
686686    +_LP0 = _LP0 + (    0.08875349087295 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.08875349087295 * _TEMP);
686687    +
686688    +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
686689    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
686690    +_LP0 = _LP0 + (   -0.45011480517718) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45011480517718) * _TEMP * _9_0;
686691    +_LP0 = _LP0 + (    0.15483279258714) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15483279258714) * _TEMP * _9_1;
686692    +_LP0 = _LP0 + (    -0.2468727722526) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2468727722526) * _TEMP * _9_2;
686693    +_LP0 = _LP0 + (   -0.28864137282061) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.28864137282061) * _TEMP * _9_3;
686694    +
686695    +***  Effect: Mnt ;
MPRINT(EM_DIAGRAM):   *** Effect: Mnt ;
686696    +_TEMP = Mnt ;
MPRINT(EM_DIAGRAM):   _TEMP = Mnt ;
686697    +_LP0 = _LP0 + (    -0.0013080231894 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0013080231894 * _TEMP);
686698    +
686699    +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
686700    +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
686701    +_LP0 = _LP0 + (    0.00563408454282 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00563408454282 * _TEMP);
686702    +
686703    +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
686704    +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
686705    +_LP0 = _LP0 + (   -0.00309262350043 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00309262350043 * _TEMP);
686706    +
686707    +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
686708    +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
686709    +_LP0 = _LP0 + (   -0.00216177411858 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00216177411858 * _TEMP);
686710    +
686711    +***  Effect: MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntMeatProducts ;
686712    +_TEMP = MntMeatProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntMeatProducts ;
686713    +_LP0 = _LP0 + (     0.0014025197451 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0014025197451 * _TEMP);
686714    +
686715    +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
686716    +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
686717    +_LP0 = _LP0 + (    -0.0007597608107 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0007597608107 * _TEMP);
686718    +
686719    +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
686720    +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
686721    +_LP0 = _LP0 + (    0.00377704914646 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00377704914646 * _TEMP);
686722    +
686723    +***  Effect: NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumCatalogPurchases ;
686724    +_TEMP = NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumCatalogPurchases ;
686725    +_LP0 = _LP0 + (    0.15620596239343 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15620596239343 * _TEMP);
686726    +
686727    +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
686728    +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
686729    +_LP0 = _LP0 + (   -0.00896675317907 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00896675317907 * _TEMP);
686730    +
686731    +***  Effect: NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDistPurchases ;
686732    +_TEMP = NumDistPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDistPurchases ;
686733    +_LP0 = _LP0 + (   -0.03831045196563 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03831045196563 * _TEMP);
686734    +
686735    +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
686736    +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
686737    +_LP0 = _LP0 + (    0.09632223979394 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09632223979394 * _TEMP);
686738    +
686739    +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
686740    +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
686741    +_LP0 = _LP0 + (    0.00013291850521 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00013291850521 * _TEMP);
686742    +
686743    +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
686744    +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
686745    +_LP0 = _LP0 + (    0.01868482592683 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01868482592683 * _TEMP);
686746    +
686747    +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
686748    +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
686749    +_LP0 = _LP0 + (   -0.01553167210852 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01553167210852 * _TEMP);
686750    +
686751    +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
686752    +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
686753    +_LP0 = _LP0 + (   -0.04288376179124 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04288376179124 * _TEMP);
686754    +
686755    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
686756    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
686757    +_TEMP =     9.22221204098894 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 9.22221204098894 + _LP0;
686758    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
686759    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
686760    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
686761    +end;
MPRINT(EM_DIAGRAM):   end;
686762    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
686763    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
686764    +
686765    +RULE_2DR1:
686766    +
686767    +
686768    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE_2DR1: *** Posterior Probabilities and Predicted Level;
686769    +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
686770    +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
686771    +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
686772    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
686773    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
686774    +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
686775    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
686776    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
686777    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
686778    +end;
MPRINT(EM_DIAGRAM):   end;
686779    +I__bin = RULE_2DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE_2DRF[_IY];
686780    +U__bin = RULE_2DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE_2DRU[_IY];
686781    +
686782    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
686783    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
686784    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
686785    +*;
MPRINT(EM_DIAGRAM):   *;
686786    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
686787    +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
686788    +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
686789    +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
686790    +P_DepVar1=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1=P__bin1;
686791    +P_DepVar0 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1-P__bin1;
686792    +end;
MPRINT(EM_DIAGRAM):   end;
686793    +*;
MPRINT(EM_DIAGRAM):   *;
686794    +*;
MPRINT(EM_DIAGRAM):   *;
686795    +end;
MPRINT(EM_DIAGRAM):   end;
686796    +*;
MPRINT(EM_DIAGRAM):   *;
686797    +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
686798    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
686799    +* Cleanup Model for DepVar;
MPRINT(EM_DIAGRAM):   * Cleanup Model for DepVar;
686800    +* Null Model based on training frequencies;
MPRINT(EM_DIAGRAM):   * Null Model based on training frequencies;
686801    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
686802    +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
686803    +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
686804    +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
686805    +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
686806    +P_DepVar1 = 0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
686807    +P_DepVar0 = 0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
686808    +*;
MPRINT(EM_DIAGRAM):   *;
686809    +end;
MPRINT(EM_DIAGRAM):   end;
686810    +*;
MPRINT(EM_DIAGRAM):   *;
686811    +*;
MPRINT(EM_DIAGRAM):   *;
686812    +drop U__bin _bin;
MPRINT(EM_DIAGRAM):   drop U__bin _bin;
686813    +*;
MPRINT(EM_DIAGRAM):   *;
686814    +_FORMAT = PUT(DepVar, BEST.);
MPRINT(EM_DIAGRAM):   _FORMAT = PUT(DepVar, BEST.);
686815    +%DMNORMCP(_FORMAT, F_DepVar);
MPRINT(DMNORMCP):   F_DepVar=dmnorm(_FORMAT,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
686816    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
686817    +*Computing Residual Vars: DepVar;
MPRINT(EM_DIAGRAM):   *Computing Residual Vars: DepVar;
686818    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
686819    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(EM_DIAGRAM):   Label R_DepVar1= 'Residual: DepVar=1';
686820    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(EM_DIAGRAM):   Label R_DepVar0= 'Residual: DepVar=0';
686821    +if
686822    + F_DepVar ne '1'
686823    +and F_DepVar ne '0'
686824    + then do;
MPRINT(EM_DIAGRAM):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
686825    +R_DepVar1=.;
MPRINT(EM_DIAGRAM):   R_DepVar1=.;
686826    +R_DepVar0=.;
MPRINT(EM_DIAGRAM):   R_DepVar0=.;
686827    +end;
MPRINT(EM_DIAGRAM):   end;
686828    +else do;
MPRINT(EM_DIAGRAM):   else do;
686829    +R_DepVar1= - P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1= - P_DepVar1;
686830    +R_DepVar0= - P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0= - P_DepVar0;
686831    +select(F_DepVar);
MPRINT(EM_DIAGRAM):   select(F_DepVar);
686832    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(EM_DIAGRAM):   when('1')R_DepVar1= R_DepVar1+1;
686833    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(EM_DIAGRAM):   when('0')R_DepVar0= R_DepVar0+1;
686834    +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
686835    +end;
MPRINT(EM_DIAGRAM):   end;
686836    +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
686837     run;
 
NOTE: DATA STEP view saved on file EMWS8.RULE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
686838     quit;
686839     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Rule_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Rule_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of
Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error"
_DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong Classifications" _DISF_=
"Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid:
Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMOUTFIT;
MPRINT(EM_DIAGRAM):   merge EMWS8.Rule_EMOUTFIT _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
686899     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
686900     * Rule: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Rule: Computing metadata for TRAIN data;
686901     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.RULE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Rule_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Rule_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Rule_TRAIN out=WORK.M0TSB135 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0TSB135;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0TSB135(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0TSB135;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0TSB135;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1VLLX9D NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VLLX9D;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VLLX9D;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1J7KD0B(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VLLX9D;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VLLX9D;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VLLX9D;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VLLX9D;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VLLX9D;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Rule";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Rule";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Rule";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rule: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = '_NODE_' then role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   if name = '_LEAF_' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
687215     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
687216     set EMWS8.Rule_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMINFO;
687217     where DATA='Rule' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Rule' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
687218     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.RULE_EMINFO.
      WHERE (DATA='Rule') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687219     data EMWS8.Rule_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule_EMINFO;
687220     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
687221     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
687222     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.RULE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
687226     run;
687227     data EMWS8.Rule_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMINFO;
687228     set EMWS8.Rule_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMINFO WORK.MODELTEMP_INFO;
687229     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.RULE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.RULE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687230     proc sort data = EMWS8.Rule_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Rule_EMINFO NOTHREADS;
687231     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
687232     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.RULE_EMINFO.
NOTE: The data set EMWS8.RULE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687233     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
687234     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
687235     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687236     proc sort data = EMWS8.Rule_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Rule_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
687237     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
687238     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.RULE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687239     data EMWS8.Rule_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMINFO;
687240     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
687241     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
687242     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.RULE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
687243     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
687244     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
687245     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
687246     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS8.RULE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS8.RULE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "08.46 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                08.46 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0Y1DAEM
"C:\\predictive-models-project\Workspaces\EMWS8\Rule\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0Y1DAEM new;
MPRINT(EM_DIAGRAM):   run;
687270     data EMWS8.Rule_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule_EMOUTFIT;
687271     set EMWS8.Rule_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMOUTFIT;
687272     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
687273     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
687273   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
687274     if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
687275     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.RULE_EMOUTFIT.
NOTE: The data set EMWS8.RULE_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687276     proc sort data=EMWS8.Rule_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Rule_EMREPORTFIT nothreads;
687277     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
687278     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.RULE_EMREPORTFIT.
NOTE: The data set EMWS8.RULE_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687279     %let _EMwarndup = 0;
687280     %let _EMtargetdup =;
687281     %let _EMASEtargetdup =;
687282     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
687283     set EMWS8.Rule_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMOUTFIT;
687284     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
687285     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
687286     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
687287     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
687288     end;
MPRINT(EM_DIAGRAM):   end;
687289     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.RULE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687290     proc sort data=EMWS8.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
687291     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
687292     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS8.META_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 36 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
687293     proc sort data=EMWS8.Rule_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Rule_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
687294     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
687295     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.RULE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687296     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
687297     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
687298     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
687299     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 34 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 36 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687300     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
687301     set EMWS8.Rule_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_CMeta_TRAIN;
687302     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
687302   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
687303     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.RULE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
687304     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
687305     set EMWS8.Rule_TRAIN(keep=
687306     F_DepVar
687307     I_DepVar
687308     P_DepVar0
687309     P_DepVar1
687310     R_DepVar0
687311     R_DepVar1
687312     _WARN_
687313     DepVar
687314     );
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 _WARN_ DepVar );
687315     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _bin is uninitialized.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.RULE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.RULE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Rule_1KX2INM nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Rule_1KX2INM;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Rule_1KX2INM(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Rule_1KX2INM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Rule_1KX2INM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
The SAS System
 
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 1.7827154E-8 OVLMAX 0.9999990477 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
691581     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
691582     set EMWS8.Rule_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_CMeta_TRAIN;
691583     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
691583   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
691584     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.RULE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
691585     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
691586     set EMWS8.Rule_VALIDATE(keep=
691587     F_DepVar
691588     I_DepVar
691589     P_DepVar0
691590     P_DepVar1
691591     R_DepVar0
691592     R_DepVar1
691593     _WARN_
691594     DepVar
691595     );
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 _WARN_ DepVar );
691596     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _bin is uninitialized.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.RULE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.META_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.RULE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Rule_35R9BO7 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Rule_35R9BO7;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Rule_35R9BO7(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMCLASSIFICATION WORK.Rule_35R9BO7;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Rule_35R9BO7;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 3.6861479E-8 OVLMAX 0.9998539151 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
695871     %let _cn = %sysfunc(getoption(CENTER));
695872     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
695873     proc print data=EMWS8.Rule_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule_EMREPORTFIT noobs label;
695874     var STAT LABEL TRAIN
695875     VALIDATE
695876     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
695877     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
695878     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
695879     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
695880     run;
 
NOTE: There were 9 observations read from the data set EMWS8.RULE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 640.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
695881     title10;
MPRINT(EM_DIAGRAM):   title10;
695882     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
695883     proc sort data=EMWS8.Rule_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Rule_EMCLASSIFICATION nothreads;
695884     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
695885     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.RULE_EMCLASSIFICATION.
NOTE: The data set EMWS8.RULE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
695886     %let _cn = %sysfunc(getoption(CENTER));
695887     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
695888     proc print data=EMWS8.Rule_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule_EMCLASSIFICATION noobs label;
695889     var from into pct_row pct_col count percent
695890     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
695891     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
695892     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
695893     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
695894     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
695895     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
695896     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
695897     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
695898     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
695899     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
695900     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
695901     run;
 
NOTE: There were 8 observations read from the data set EMWS8.RULE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 641.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
695902     title9;
MPRINT(EM_DIAGRAM):   title9;
695903     title10;
MPRINT(EM_DIAGRAM):   title10;
695904     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
695905     %let _cn = %sysfunc(getoption(CENTER));
695906     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
695907     data EMWS8.Rule_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule_EMEVENTREPORT;
695908     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
695908   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
695909     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
695909   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
695909   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
695909   ! FALSEEVENT
695910     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
695910   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
695910   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
695911        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
695912     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
695913     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
695914     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
695915     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
695916     set EMWS8.Rule_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule_EMEVENTREPORT;
695917     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE_EMEVENTREPORT.
NOTE: The data set EMWS8.RULE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
695918     proc print data=EMWS8.Rule_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule_EMEVENTREPORT noobs label;
695919     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
695920     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
695921     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
695922     run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 642.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
695923     title10;
MPRINT(EM_DIAGRAM):   title10;
695924     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
695925     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
695926     modify Rule_EMRANK;
MPRINT(EM_DIAGRAM):   modify Rule_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
695927     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
695928     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
695928   ! ;
MPRINT(EM_DIAGRAM):   run;
695929     run;
 
NOTE: MODIFY was successful for EMWS8.RULE_EMRANK.DATA.
695930     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
 
695931     %let _cn = %sysfunc(getoption(CENTER));
695932     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
695933     proc print data=EMWS8.Rule_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule_EMRANK label noobs;
695934     var
695935     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
695936     by
695937     notsorted DATAROLE
695938     notsorted TARGET
695939     notsorted TARGETLABEL
695940     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
695941     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
695942     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
695943     run;
 
NOTE: There were 40 observations read from the data set EMWS8.RULE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 643.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
695944     title10;
MPRINT(EM_DIAGRAM):   title10;
695945     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
695946     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
695947     modify Rule_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Rule_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
695948     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
695948   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
695949     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
695949   ! ;
MPRINT(EM_DIAGRAM):   run;
695950     run;
 
NOTE: MODIFY was successful for EMWS8.RULE_EMSCOREDIST.DATA.
695951     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
