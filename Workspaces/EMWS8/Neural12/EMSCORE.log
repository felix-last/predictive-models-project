MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.30 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                12.30 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2AU8U0W 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2AU8U0W new;
MPRINT(EM_DIAGRAM):   run;
674747     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
674748     set EMWS8.Neural12_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_OUTKEY;
674749     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
674750     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 37 observations read from the data set EMWS8.NEURAL12_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

674751     filename emflow
674751   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
674752     *------------------------------------------------------------*;
674753     * Neural12: Scoring DATA data;
674754     *------------------------------------------------------------*;
674755     data EMWS8.Neural12_TRAIN
674756     / view=EMWS8.Neural12_TRAIN
674757     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_TRAIN / view=EMWS8.Neural12_TRAIN ;
674758     set EMWS8.PRINCOMP_TRAIN
674759     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
674760     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
674761    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
674762    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
674763    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
674764    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
674765    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
674766    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
674767    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
674768    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
674769    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
674770    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
674771    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
674772    +LENGTH _WARN_ $4
674773    +      F_DepVar  $ 12
674774    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
674775    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
674776    +
674777    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
674778    +
674779    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
674780    +
674781    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
674782    +
674783    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
674784    +
674785    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
674786    +
674787    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
674788    +
674789    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
674790    +
674791    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
674792    +
674793    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
674794    +
674795    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
674796    +
674797    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
674798    +
674799    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
674800    +
674801    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
674802    +
674803    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
674804    +
674805    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
674806    +
674807    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
674808    +
674809    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
674810    +
674811    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
674812    +
674813    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
674814    +
674815    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
674816    +
674817    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
674818    +
674819    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
674820    +
674821    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
674822    +
674823    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
674824    +
674825    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
674826    +
674827    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
674828    +
674829    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
674830    +
674831    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
674832    +
674833    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
674834    +
674835    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
674836    +
674837    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
674838    +
674839    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
674840    +
674841    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674842    +*** Checking missing input Interval
674843    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
674844    +
674845    +IF NMISS(
674846    +   PC_1 ,
674847    +   PC_10 ,
674848    +   PC_11 ,
674849    +   PC_12 ,
674850    +   PC_13 ,
674851    +   PC_14 ,
674852    +   PC_15 ,
674853    +   PC_16 ,
674854    +   PC_17 ,
674855    +   PC_2 ,
674856    +   PC_3 ,
674857    +   PC_4 ,
674858    +   PC_5 ,
674859    +   PC_6 ,
674860    +   PC_7 ,
674861    +   PC_8 ,
674862    +   PC_9 ,
674863    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
674864    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
674865    +
674866    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
674867    +END;
MPRINT(EM_DIAGRAM):   END;
674868    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674869    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
674870    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674871    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
674872    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
674873    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
674874    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
674875    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
674876    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
674877    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
674878    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
674879    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
674880    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
674881    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
674882    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
674883    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
674884    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
674885    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
674886    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
674887    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
674888    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
674889    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
674890    +END;
MPRINT(EM_DIAGRAM):   END;
674891    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
674892    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
674893    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
674894    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
674895    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
674896    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
674897    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
674898    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
674899    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
674900    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
674901    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
674902    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
674903    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
674904    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
674905    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
674906    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
674907    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
674908    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
674909    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
674910    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
674911    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
674912    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
674913    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
674914    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
674915    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
674916    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
674917    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
674918    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
674919    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
674920    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
674921    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
674922    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
674923    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
674924    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
674925    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
674926    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
674927    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
674928    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
674929    +END;
MPRINT(EM_DIAGRAM):   END;
674930    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674931    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
674932    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674933    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
674934    +   H11  =    -0.55342153424625 * S_PC_1  +    -0.29323467331544 * S_PC_10
674935    +          +     0.33965172324926 * S_PC_11  +     0.49000556060396 * S_PC_12
674936    +          +    -0.34110824735492 * S_PC_13  +    -0.24287054403528 * S_PC_14
674937    +          +    -0.02501080366447 * S_PC_15  +    -0.02679419599111 * S_PC_16
674938    +          +     0.09844374274586 * S_PC_17  +     0.13878811412798 * S_PC_2
674939    +          +     0.10801571799328 * S_PC_3  +    -0.58531553567813 * S_PC_4
674940    +          +     0.31533819069473 * S_PC_5  +    -0.19214671008198 * S_PC_6
674941    +          +    -0.51179938713553 * S_PC_7  +    -0.50670206584236 * S_PC_8
674942    +          +    -0.97231420794389 * S_PC_9  +    -0.16137966362464 *
674943    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.55342153424625 * S_PC_1 + -0.29323467331544 * S_PC_10 + 
0.33965172324926 * S_PC_11 + 0.49000556060396 * S_PC_12 + -0.34110824735492 * S_PC_13 + 
-0.24287054403528 * S_PC_14 + -0.02501080366447 * S_PC_15 + -0.02679419599111 * S_PC_16 + 
0.09844374274586 * S_PC_17 + 0.13878811412798 * S_PC_2 + 0.10801571799328 * S_PC_3 + 
-0.58531553567813 * S_PC_4 + 0.31533819069473 * S_PC_5 + -0.19214671008198 * S_PC_6 + 
-0.51179938713553 * S_PC_7 + -0.50670206584236 * S_PC_8 + -0.97231420794389 * S_PC_9 + 
-0.16137966362464 * S_Year_Birth ;
674944    +   H12  =    -0.99502274940017 * S_PC_1  +     0.49237671874688 * S_PC_10
674945    +          +     0.12210745945974 * S_PC_11  +     0.72021579354775 * S_PC_12
674946    +          +      0.3393754550733 * S_PC_13  +     0.13986168240251 * S_PC_14
674947    +          +     0.04811901065181 * S_PC_15  +    -0.53520625287765 * S_PC_16
674948    +          +    -0.19673918666042 * S_PC_17  +     -0.2054947890231 * S_PC_2
674949    +          +    -0.43750641244546 * S_PC_3  +    -0.30212148993997 * S_PC_4
674950    +          +     0.15193420944594 * S_PC_5  +     0.41173144589147 * S_PC_6
674951    +          +     0.30810633295335 * S_PC_7  +     0.12469809630723 * S_PC_8
674952    +          +    -0.64078531647299 * S_PC_9  +    -0.19774667470024 *
674953    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.99502274940017 * S_PC_1 + 0.49237671874688 * S_PC_10 + 
0.12210745945974 * S_PC_11 + 0.72021579354775 * S_PC_12 + 0.3393754550733 * S_PC_13 + 
0.13986168240251 * S_PC_14 + 0.04811901065181 * S_PC_15 + -0.53520625287765 * S_PC_16 + 
-0.19673918666042 * S_PC_17 + -0.2054947890231 * S_PC_2 + -0.43750641244546 * S_PC_3 + 
-0.30212148993997 * S_PC_4 + 0.15193420944594 * S_PC_5 + 0.41173144589147 * S_PC_6 + 
0.30810633295335 * S_PC_7 + 0.12469809630723 * S_PC_8 + -0.64078531647299 * S_PC_9 + 
-0.19774667470024 * S_Year_Birth ;
674954    +   H13  =    -1.08978244664773 * S_PC_1  +     0.03100578006881 * S_PC_10
674955    +          +    -0.86965903394255 * S_PC_11  +    -1.12965112824775 * S_PC_12
674956    +          +     0.22635891501443 * S_PC_13  +      -0.370668142629 * S_PC_14
674957    +          +     0.30597502081665 * S_PC_15  +    -0.15658987227197 * S_PC_16
674958    +          +      0.2668499246416 * S_PC_17  +     0.19436681461642 * S_PC_2
674959    +          +     0.44869442712318 * S_PC_3  +     0.57307437095431 * S_PC_4
674960    +          +     0.80776612713283 * S_PC_5  +    -0.08822515374977 * S_PC_6
674961    +          +    -0.09284418945373 * S_PC_7  +    -0.06028855495338 * S_PC_8
674962    +          +     0.21586614421723 * S_PC_9  +     0.04888429457745 *
674963    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -1.08978244664773 * S_PC_1 + 0.03100578006881 * S_PC_10 + 
-0.86965903394255 * S_PC_11 + -1.12965112824775 * S_PC_12 + 0.22635891501443 * S_PC_13 + 
-0.370668142629 * S_PC_14 + 0.30597502081665 * S_PC_15 + -0.15658987227197 * S_PC_16 + 
0.2668499246416 * S_PC_17 + 0.19436681461642 * S_PC_2 + 0.44869442712318 * S_PC_3 + 
0.57307437095431 * S_PC_4 + 0.80776612713283 * S_PC_5 + -0.08822515374977 * S_PC_6 + 
-0.09284418945373 * S_PC_7 + -0.06028855495338 * S_PC_8 + 0.21586614421723 * S_PC_9 + 
0.04888429457745 * S_Year_Birth ;
674964    +   H14  =    -0.28593618538042 * S_PC_1  +     0.59937027421068 * S_PC_10
674965    +          +    -0.55184433419032 * S_PC_11  +     -0.2301871208647 * S_PC_12
674966    +          +     1.01178018574556 * S_PC_13  +    -0.48252128489132 * S_PC_14
674967    +          +     0.48647706305442 * S_PC_15  +     0.38826674709309 * S_PC_16
674968    +          +     0.06640068764932 * S_PC_17  +      0.0476622971963 * S_PC_2
674969    +          +     0.02272352093671 * S_PC_3  +     0.10081179767275 * S_PC_4
674970    +          +    -0.13769487622721 * S_PC_5  +    -0.24922377953623 * S_PC_6
674971    +          +    -0.05671479273459 * S_PC_7  +    -0.13408005038028 * S_PC_8
674972    +          +    -0.06327123090628 * S_PC_9  +    -0.10370487024911 *
674973    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.28593618538042 * S_PC_1 + 0.59937027421068 * S_PC_10 + 
-0.55184433419032 * S_PC_11 + -0.2301871208647 * S_PC_12 + 1.01178018574556 * S_PC_13 + 
-0.48252128489132 * S_PC_14 + 0.48647706305442 * S_PC_15 + 0.38826674709309 * S_PC_16 + 
0.06640068764932 * S_PC_17 + 0.0476622971963 * S_PC_2 + 0.02272352093671 * S_PC_3 + 
0.10081179767275 * S_PC_4 + -0.13769487622721 * S_PC_5 + -0.24922377953623 * S_PC_6 + 
-0.05671479273459 * S_PC_7 + -0.13408005038028 * S_PC_8 + -0.06327123090628 * S_PC_9 + 
-0.10370487024911 * S_Year_Birth ;
674974    +   H15  =    -0.33708904537859 * S_PC_1  +     0.37424167610601 * S_PC_10
674975    +          +    -0.31135313745496 * S_PC_11  +     0.30453947982614 * S_PC_12
674976    +          +    -0.49544019618096 * S_PC_13  +    -0.26793473780514 * S_PC_14
674977    +          +     0.33164121549835 * S_PC_15  +    -0.31758743327631 * S_PC_16
674978    +          +    -0.05779041880921 * S_PC_17  +    -0.76996955995367 * S_PC_2
674979    +          +     0.13746794831625 * S_PC_3  +     0.46608112761099 * S_PC_4
674980    +          +     0.27002996418456 * S_PC_5  +     0.23180249614069 * S_PC_6
674981    +          +    -0.08059651309604 * S_PC_7  +    -0.03561134620766 * S_PC_8
674982    +          +    -0.03059416422876 * S_PC_9  +     0.26625248867973 *
674983    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.33708904537859 * S_PC_1 + 0.37424167610601 * S_PC_10 + 
-0.31135313745496 * S_PC_11 + 0.30453947982614 * S_PC_12 + -0.49544019618096 * S_PC_13 + 
-0.26793473780514 * S_PC_14 + 0.33164121549835 * S_PC_15 + -0.31758743327631 * S_PC_16 + 
-0.05779041880921 * S_PC_17 + -0.76996955995367 * S_PC_2 + 0.13746794831625 * S_PC_3 + 
0.46608112761099 * S_PC_4 + 0.27002996418456 * S_PC_5 + 0.23180249614069 * S_PC_6 + 
-0.08059651309604 * S_PC_7 + -0.03561134620766 * S_PC_8 + -0.03059416422876 * S_PC_9 + 
0.26625248867973 * S_Year_Birth ;
674984    +   H16  =     0.15017999188962 * S_PC_1  +    -0.33783019008081 * S_PC_10
674985    +          +     0.03105737534224 * S_PC_11  +     0.26111468755191 * S_PC_12
674986    +          +    -0.41128593451888 * S_PC_13  +     0.20048648875339 * S_PC_14
674987    +          +     0.45863219433154 * S_PC_15  +    -0.01258422577707 * S_PC_16
674988    +          +    -0.40610693500982 * S_PC_17  +    -0.15850867686128 * S_PC_2
674989    +          +     0.36950881975001 * S_PC_3  +    -0.17134002892283 * S_PC_4
674990    +          +      -0.628869137697 * S_PC_5  +    -0.23379385585096 * S_PC_6
674991    +          +    -0.08458064547675 * S_PC_7  +     0.74760782214014 * S_PC_8
674992    +          +     0.56234207099634 * S_PC_9  +    -0.14984712441736 *
674993    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.15017999188962 * S_PC_1 + -0.33783019008081 * S_PC_10 + 
0.03105737534224 * S_PC_11 + 0.26111468755191 * S_PC_12 + -0.41128593451888 * S_PC_13 + 
0.20048648875339 * S_PC_14 + 0.45863219433154 * S_PC_15 + -0.01258422577707 * S_PC_16 + 
-0.40610693500982 * S_PC_17 + -0.15850867686128 * S_PC_2 + 0.36950881975001 * S_PC_3 + 
-0.17134002892283 * S_PC_4 + -0.628869137697 * S_PC_5 + -0.23379385585096 * S_PC_6 + 
-0.08458064547675 * S_PC_7 + 0.74760782214014 * S_PC_8 + 0.56234207099634 * S_PC_9 + 
-0.14984712441736 * S_Year_Birth ;
674994    +   H17  =     0.30849857328204 * S_PC_1  +     0.33064134865883 * S_PC_10
674995    +          +     0.23827611784637 * S_PC_11  +     0.13303512224297 * S_PC_12
674996    +          +     0.28560416047256 * S_PC_13  +    -0.15117991713253 * S_PC_14
674997    +          +    -0.08257856642011 * S_PC_15  +    -0.50665244726973 * S_PC_16
674998    +          +      0.0274411962906 * S_PC_17  +     0.74919575098467 * S_PC_2
674999    +          +     0.57348166343361 * S_PC_3  +     0.03517396803125 * S_PC_4
675000    +          +     0.21522947410365 * S_PC_5  +    -0.17904742140357 * S_PC_6
675001    +          +    -0.28202941925014 * S_PC_7  +    -0.28392079981156 * S_PC_8
675002    +          +     0.15375921681792 * S_PC_9  +     0.37391488433781 *
675003    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.30849857328204 * S_PC_1 + 0.33064134865883 * S_PC_10 + 
0.23827611784637 * S_PC_11 + 0.13303512224297 * S_PC_12 + 0.28560416047256 * S_PC_13 + 
-0.15117991713253 * S_PC_14 + -0.08257856642011 * S_PC_15 + -0.50665244726973 * S_PC_16 + 
0.0274411962906 * S_PC_17 + 0.74919575098467 * S_PC_2 + 0.57348166343361 * S_PC_3 + 
0.03517396803125 * S_PC_4 + 0.21522947410365 * S_PC_5 + -0.17904742140357 * S_PC_6 + 
-0.28202941925014 * S_PC_7 + -0.28392079981156 * S_PC_8 + 0.15375921681792 * S_PC_9 + 
0.37391488433781 * S_Year_Birth ;
675004    +   H11  =     -1.1594247768044 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.1594247768044 + H11 ;
675005    +   H12  =     1.34180472342355 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.34180472342355 + H12 ;
675006    +   H13  =     -0.4765158697282 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.4765158697282 + H13 ;
675007    +   H14  =     0.12408462982581 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.12408462982581 + H14 ;
675008    +   H15  =    -1.51733223495167 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.51733223495167 + H15 ;
675009    +   H16  =     0.70412113613226 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.70412113613226 + H16 ;
675010    +   H17  =     0.56926526451324 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.56926526451324 + H17 ;
675011    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
675012    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
675013    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
675014    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
675015    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
675016    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
675017    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
675018    +END;
MPRINT(EM_DIAGRAM):   END;
675019    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
675020    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
675021    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
675022    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
675023    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
675024    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
675025    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
675026    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
675027    +END;
MPRINT(EM_DIAGRAM):   END;
675028    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675029    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
675030    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675031    +
675032    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
675033    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
675034    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
675035    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
675036    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
675037    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
675038    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
675039    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
675040    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
675041    +end;
MPRINT(EM_DIAGRAM):   end;
675042    +else do;
MPRINT(EM_DIAGRAM):   else do;
675043    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
675044    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
675045    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
675046    +   end;
MPRINT(EM_DIAGRAM):   end;
675047    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
675048    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
675049    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
675050    +   end;
MPRINT(EM_DIAGRAM):   end;
675051    +   else do;
MPRINT(EM_DIAGRAM):   else do;
675052    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
675053    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
675054    +   end;
MPRINT(EM_DIAGRAM):   end;
675055    +end;
MPRINT(EM_DIAGRAM):   end;
675056    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
675057    +   P_DepVar1  =    -1.58910967945868 * H11  +    -2.05915787974985 * H12
675058    +          +     -1.9012823868264 * H13  +    -2.18074438153672 * H14
675059    +          +     1.75831238575242 * H15  +     0.98715125973424 * H16
675060    +          +    -1.91091089802337 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.58910967945868 * H11 + -2.05915787974985 * H12 + 
-1.9012823868264 * H13 + -2.18074438153672 * H14 + 1.75831238575242 * H15 + 0.98715125973424 * 
H16 + -1.91091089802337 * H17 ;
675061    +   P_DepVar1  =     -2.2147071267261 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.2147071267261 + P_DepVar1 ;
675062    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
675063    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
675064    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
675065    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
675066    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
675067    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
675068    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
675069    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
675070    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
675071    +END;
MPRINT(EM_DIAGRAM):   END;
675072    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
675073    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
675074    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
675075    +END;
MPRINT(EM_DIAGRAM):   END;
675076    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
675077    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
675078    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
675079    +END;
MPRINT(EM_DIAGRAM):   END;
675080    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
675081    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
675082    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
675083    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
675084    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
675085    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
675086    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
675087    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675088    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
675089    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675090    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
675091    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
675092    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
675093    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
675094    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
675095    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
675096    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
675097    +END;
MPRINT(EM_DIAGRAM):   END;
675098    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
675099    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
675100    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
675101    +drop
675102    +H11
675103    +H12
675104    +H13
675105    +H14
675106    +H15
675107    +H16
675108    +H17
675109    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
675110    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
675111     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
675112     quit;
675113     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
675114     filename emflow
675114   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
675115     *------------------------------------------------------------*;
675116     * Neural12: Scoring VALIDATE data;
675117     *------------------------------------------------------------*;
675118     data EMWS8.Neural12_VALIDATE
675119     / view=EMWS8.Neural12_VALIDATE
675120     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_VALIDATE / view=EMWS8.Neural12_VALIDATE ;
675121     set EMWS8.PRINCOMP_VALIDATE
675122     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
675123     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
675124    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
675125    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
675126    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
675127    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
675128    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
675129    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
675130    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
675131    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
675132    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
675133    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
675134    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
675135    +LENGTH _WARN_ $4
675136    +      F_DepVar  $ 12
675137    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
675138    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
675139    +
675140    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
675141    +
675142    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
675143    +
675144    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
675145    +
675146    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
675147    +
675148    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
675149    +
675150    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
675151    +
675152    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
675153    +
675154    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
675155    +
675156    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
675157    +
675158    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
675159    +
675160    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
675161    +
675162    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
675163    +
675164    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
675165    +
675166    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
675167    +
675168    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
675169    +
675170    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
675171    +
675172    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
675173    +
675174    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
675175    +
675176    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
675177    +
675178    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
675179    +
675180    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
675181    +
675182    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
675183    +
675184    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
675185    +
675186    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
675187    +
675188    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
675189    +
675190    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
675191    +
675192    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
675193    +
675194    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
675195    +
675196    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
675197    +
675198    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
675199    +
675200    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
675201    +
675202    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
675203    +
675204    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675205    +*** Checking missing input Interval
675206    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
675207    +
675208    +IF NMISS(
675209    +   PC_1 ,
675210    +   PC_10 ,
675211    +   PC_11 ,
675212    +   PC_12 ,
675213    +   PC_13 ,
675214    +   PC_14 ,
675215    +   PC_15 ,
675216    +   PC_16 ,
675217    +   PC_17 ,
675218    +   PC_2 ,
675219    +   PC_3 ,
675220    +   PC_4 ,
675221    +   PC_5 ,
675222    +   PC_6 ,
675223    +   PC_7 ,
675224    +   PC_8 ,
675225    +   PC_9 ,
675226    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
675227    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
675228    +
675229    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
675230    +END;
MPRINT(EM_DIAGRAM):   END;
675231    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675232    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
675233    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675234    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
675235    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
675236    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
675237    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
675238    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
675239    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
675240    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
675241    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
675242    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
675243    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
675244    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
675245    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
675246    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
675247    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
675248    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
675249    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
675250    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
675251    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
675252    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
675253    +END;
MPRINT(EM_DIAGRAM):   END;
675254    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
675255    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
675256    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
675257    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
675258    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
675259    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
675260    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
675261    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
675262    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
675263    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
675264    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
675265    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
675266    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
675267    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
675268    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
675269    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
675270    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
675271    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
675272    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
675273    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
675274    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
675275    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
675276    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
675277    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
675278    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
675279    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
675280    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
675281    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
675282    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
675283    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
675284    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
675285    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
675286    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
675287    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
675288    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
675289    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
675290    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
675291    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
675292    +END;
MPRINT(EM_DIAGRAM):   END;
675293    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675294    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
675295    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675296    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
675297    +   H11  =    -0.55342153424625 * S_PC_1  +    -0.29323467331544 * S_PC_10
675298    +          +     0.33965172324926 * S_PC_11  +     0.49000556060396 * S_PC_12
675299    +          +    -0.34110824735492 * S_PC_13  +    -0.24287054403528 * S_PC_14
675300    +          +    -0.02501080366447 * S_PC_15  +    -0.02679419599111 * S_PC_16
675301    +          +     0.09844374274586 * S_PC_17  +     0.13878811412798 * S_PC_2
675302    +          +     0.10801571799328 * S_PC_3  +    -0.58531553567813 * S_PC_4
675303    +          +     0.31533819069473 * S_PC_5  +    -0.19214671008198 * S_PC_6
675304    +          +    -0.51179938713553 * S_PC_7  +    -0.50670206584236 * S_PC_8
675305    +          +    -0.97231420794389 * S_PC_9  +    -0.16137966362464 *
675306    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.55342153424625 * S_PC_1 + -0.29323467331544 * S_PC_10 + 
0.33965172324926 * S_PC_11 + 0.49000556060396 * S_PC_12 + -0.34110824735492 * S_PC_13 + 
-0.24287054403528 * S_PC_14 + -0.02501080366447 * S_PC_15 + -0.02679419599111 * S_PC_16 + 
0.09844374274586 * S_PC_17 + 0.13878811412798 * S_PC_2 + 0.10801571799328 * S_PC_3 + 
-0.58531553567813 * S_PC_4 + 0.31533819069473 * S_PC_5 + -0.19214671008198 * S_PC_6 + 
-0.51179938713553 * S_PC_7 + -0.50670206584236 * S_PC_8 + -0.97231420794389 * S_PC_9 + 
-0.16137966362464 * S_Year_Birth ;
675307    +   H12  =    -0.99502274940017 * S_PC_1  +     0.49237671874688 * S_PC_10
675308    +          +     0.12210745945974 * S_PC_11  +     0.72021579354775 * S_PC_12
675309    +          +      0.3393754550733 * S_PC_13  +     0.13986168240251 * S_PC_14
675310    +          +     0.04811901065181 * S_PC_15  +    -0.53520625287765 * S_PC_16
675311    +          +    -0.19673918666042 * S_PC_17  +     -0.2054947890231 * S_PC_2
675312    +          +    -0.43750641244546 * S_PC_3  +    -0.30212148993997 * S_PC_4
675313    +          +     0.15193420944594 * S_PC_5  +     0.41173144589147 * S_PC_6
675314    +          +     0.30810633295335 * S_PC_7  +     0.12469809630723 * S_PC_8
675315    +          +    -0.64078531647299 * S_PC_9  +    -0.19774667470024 *
675316    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.99502274940017 * S_PC_1 + 0.49237671874688 * S_PC_10 + 
0.12210745945974 * S_PC_11 + 0.72021579354775 * S_PC_12 + 0.3393754550733 * S_PC_13 + 
0.13986168240251 * S_PC_14 + 0.04811901065181 * S_PC_15 + -0.53520625287765 * S_PC_16 + 
-0.19673918666042 * S_PC_17 + -0.2054947890231 * S_PC_2 + -0.43750641244546 * S_PC_3 + 
-0.30212148993997 * S_PC_4 + 0.15193420944594 * S_PC_5 + 0.41173144589147 * S_PC_6 + 
0.30810633295335 * S_PC_7 + 0.12469809630723 * S_PC_8 + -0.64078531647299 * S_PC_9 + 
-0.19774667470024 * S_Year_Birth ;
675317    +   H13  =    -1.08978244664773 * S_PC_1  +     0.03100578006881 * S_PC_10
675318    +          +    -0.86965903394255 * S_PC_11  +    -1.12965112824775 * S_PC_12
675319    +          +     0.22635891501443 * S_PC_13  +      -0.370668142629 * S_PC_14
675320    +          +     0.30597502081665 * S_PC_15  +    -0.15658987227197 * S_PC_16
675321    +          +      0.2668499246416 * S_PC_17  +     0.19436681461642 * S_PC_2
675322    +          +     0.44869442712318 * S_PC_3  +     0.57307437095431 * S_PC_4
675323    +          +     0.80776612713283 * S_PC_5  +    -0.08822515374977 * S_PC_6
675324    +          +    -0.09284418945373 * S_PC_7  +    -0.06028855495338 * S_PC_8
675325    +          +     0.21586614421723 * S_PC_9  +     0.04888429457745 *
675326    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -1.08978244664773 * S_PC_1 + 0.03100578006881 * S_PC_10 + 
-0.86965903394255 * S_PC_11 + -1.12965112824775 * S_PC_12 + 0.22635891501443 * S_PC_13 + 
-0.370668142629 * S_PC_14 + 0.30597502081665 * S_PC_15 + -0.15658987227197 * S_PC_16 + 
0.2668499246416 * S_PC_17 + 0.19436681461642 * S_PC_2 + 0.44869442712318 * S_PC_3 + 
0.57307437095431 * S_PC_4 + 0.80776612713283 * S_PC_5 + -0.08822515374977 * S_PC_6 + 
-0.09284418945373 * S_PC_7 + -0.06028855495338 * S_PC_8 + 0.21586614421723 * S_PC_9 + 
0.04888429457745 * S_Year_Birth ;
675327    +   H14  =    -0.28593618538042 * S_PC_1  +     0.59937027421068 * S_PC_10
675328    +          +    -0.55184433419032 * S_PC_11  +     -0.2301871208647 * S_PC_12
675329    +          +     1.01178018574556 * S_PC_13  +    -0.48252128489132 * S_PC_14
675330    +          +     0.48647706305442 * S_PC_15  +     0.38826674709309 * S_PC_16
675331    +          +     0.06640068764932 * S_PC_17  +      0.0476622971963 * S_PC_2
675332    +          +     0.02272352093671 * S_PC_3  +     0.10081179767275 * S_PC_4
675333    +          +    -0.13769487622721 * S_PC_5  +    -0.24922377953623 * S_PC_6
675334    +          +    -0.05671479273459 * S_PC_7  +    -0.13408005038028 * S_PC_8
675335    +          +    -0.06327123090628 * S_PC_9  +    -0.10370487024911 *
675336    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.28593618538042 * S_PC_1 + 0.59937027421068 * S_PC_10 + 
-0.55184433419032 * S_PC_11 + -0.2301871208647 * S_PC_12 + 1.01178018574556 * S_PC_13 + 
-0.48252128489132 * S_PC_14 + 0.48647706305442 * S_PC_15 + 0.38826674709309 * S_PC_16 + 
0.06640068764932 * S_PC_17 + 0.0476622971963 * S_PC_2 + 0.02272352093671 * S_PC_3 + 
0.10081179767275 * S_PC_4 + -0.13769487622721 * S_PC_5 + -0.24922377953623 * S_PC_6 + 
-0.05671479273459 * S_PC_7 + -0.13408005038028 * S_PC_8 + -0.06327123090628 * S_PC_9 + 
-0.10370487024911 * S_Year_Birth ;
675337    +   H15  =    -0.33708904537859 * S_PC_1  +     0.37424167610601 * S_PC_10
675338    +          +    -0.31135313745496 * S_PC_11  +     0.30453947982614 * S_PC_12
675339    +          +    -0.49544019618096 * S_PC_13  +    -0.26793473780514 * S_PC_14
675340    +          +     0.33164121549835 * S_PC_15  +    -0.31758743327631 * S_PC_16
675341    +          +    -0.05779041880921 * S_PC_17  +    -0.76996955995367 * S_PC_2
675342    +          +     0.13746794831625 * S_PC_3  +     0.46608112761099 * S_PC_4
675343    +          +     0.27002996418456 * S_PC_5  +     0.23180249614069 * S_PC_6
675344    +          +    -0.08059651309604 * S_PC_7  +    -0.03561134620766 * S_PC_8
675345    +          +    -0.03059416422876 * S_PC_9  +     0.26625248867973 *
675346    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.33708904537859 * S_PC_1 + 0.37424167610601 * S_PC_10 + 
-0.31135313745496 * S_PC_11 + 0.30453947982614 * S_PC_12 + -0.49544019618096 * S_PC_13 + 
-0.26793473780514 * S_PC_14 + 0.33164121549835 * S_PC_15 + -0.31758743327631 * S_PC_16 + 
-0.05779041880921 * S_PC_17 + -0.76996955995367 * S_PC_2 + 0.13746794831625 * S_PC_3 + 
0.46608112761099 * S_PC_4 + 0.27002996418456 * S_PC_5 + 0.23180249614069 * S_PC_6 + 
-0.08059651309604 * S_PC_7 + -0.03561134620766 * S_PC_8 + -0.03059416422876 * S_PC_9 + 
0.26625248867973 * S_Year_Birth ;
675347    +   H16  =     0.15017999188962 * S_PC_1  +    -0.33783019008081 * S_PC_10
675348    +          +     0.03105737534224 * S_PC_11  +     0.26111468755191 * S_PC_12
675349    +          +    -0.41128593451888 * S_PC_13  +     0.20048648875339 * S_PC_14
675350    +          +     0.45863219433154 * S_PC_15  +    -0.01258422577707 * S_PC_16
675351    +          +    -0.40610693500982 * S_PC_17  +    -0.15850867686128 * S_PC_2
675352    +          +     0.36950881975001 * S_PC_3  +    -0.17134002892283 * S_PC_4
675353    +          +      -0.628869137697 * S_PC_5  +    -0.23379385585096 * S_PC_6
675354    +          +    -0.08458064547675 * S_PC_7  +     0.74760782214014 * S_PC_8
675355    +          +     0.56234207099634 * S_PC_9  +    -0.14984712441736 *
675356    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.15017999188962 * S_PC_1 + -0.33783019008081 * S_PC_10 + 
0.03105737534224 * S_PC_11 + 0.26111468755191 * S_PC_12 + -0.41128593451888 * S_PC_13 + 
0.20048648875339 * S_PC_14 + 0.45863219433154 * S_PC_15 + -0.01258422577707 * S_PC_16 + 
-0.40610693500982 * S_PC_17 + -0.15850867686128 * S_PC_2 + 0.36950881975001 * S_PC_3 + 
-0.17134002892283 * S_PC_4 + -0.628869137697 * S_PC_5 + -0.23379385585096 * S_PC_6 + 
-0.08458064547675 * S_PC_7 + 0.74760782214014 * S_PC_8 + 0.56234207099634 * S_PC_9 + 
-0.14984712441736 * S_Year_Birth ;
675357    +   H17  =     0.30849857328204 * S_PC_1  +     0.33064134865883 * S_PC_10
675358    +          +     0.23827611784637 * S_PC_11  +     0.13303512224297 * S_PC_12
675359    +          +     0.28560416047256 * S_PC_13  +    -0.15117991713253 * S_PC_14
675360    +          +    -0.08257856642011 * S_PC_15  +    -0.50665244726973 * S_PC_16
675361    +          +      0.0274411962906 * S_PC_17  +     0.74919575098467 * S_PC_2
675362    +          +     0.57348166343361 * S_PC_3  +     0.03517396803125 * S_PC_4
675363    +          +     0.21522947410365 * S_PC_5  +    -0.17904742140357 * S_PC_6
675364    +          +    -0.28202941925014 * S_PC_7  +    -0.28392079981156 * S_PC_8
675365    +          +     0.15375921681792 * S_PC_9  +     0.37391488433781 *
675366    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.30849857328204 * S_PC_1 + 0.33064134865883 * S_PC_10 + 
0.23827611784637 * S_PC_11 + 0.13303512224297 * S_PC_12 + 0.28560416047256 * S_PC_13 + 
-0.15117991713253 * S_PC_14 + -0.08257856642011 * S_PC_15 + -0.50665244726973 * S_PC_16 + 
0.0274411962906 * S_PC_17 + 0.74919575098467 * S_PC_2 + 0.57348166343361 * S_PC_3 + 
0.03517396803125 * S_PC_4 + 0.21522947410365 * S_PC_5 + -0.17904742140357 * S_PC_6 + 
-0.28202941925014 * S_PC_7 + -0.28392079981156 * S_PC_8 + 0.15375921681792 * S_PC_9 + 
0.37391488433781 * S_Year_Birth ;
675367    +   H11  =     -1.1594247768044 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.1594247768044 + H11 ;
675368    +   H12  =     1.34180472342355 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.34180472342355 + H12 ;
675369    +   H13  =     -0.4765158697282 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.4765158697282 + H13 ;
675370    +   H14  =     0.12408462982581 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.12408462982581 + H14 ;
675371    +   H15  =    -1.51733223495167 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.51733223495167 + H15 ;
675372    +   H16  =     0.70412113613226 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.70412113613226 + H16 ;
675373    +   H17  =     0.56926526451324 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.56926526451324 + H17 ;
675374    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
675375    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
675376    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
675377    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
675378    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
675379    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
675380    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
675381    +END;
MPRINT(EM_DIAGRAM):   END;
675382    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
675383    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
675384    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
675385    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
675386    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
675387    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
675388    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
675389    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
675390    +END;
MPRINT(EM_DIAGRAM):   END;
675391    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675392    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
675393    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675394    +
675395    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
675396    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
675397    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
675398    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
675399    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
675400    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
675401    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
675402    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
675403    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
675404    +end;
MPRINT(EM_DIAGRAM):   end;
675405    +else do;
MPRINT(EM_DIAGRAM):   else do;
675406    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
675407    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
675408    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
675409    +   end;
MPRINT(EM_DIAGRAM):   end;
675410    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
675411    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
675412    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
675413    +   end;
MPRINT(EM_DIAGRAM):   end;
675414    +   else do;
MPRINT(EM_DIAGRAM):   else do;
675415    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
675416    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
675417    +   end;
MPRINT(EM_DIAGRAM):   end;
675418    +end;
MPRINT(EM_DIAGRAM):   end;
675419    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
675420    +   P_DepVar1  =    -1.58910967945868 * H11  +    -2.05915787974985 * H12
675421    +          +     -1.9012823868264 * H13  +    -2.18074438153672 * H14
675422    +          +     1.75831238575242 * H15  +     0.98715125973424 * H16
675423    +          +    -1.91091089802337 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.58910967945868 * H11 + -2.05915787974985 * H12 + 
-1.9012823868264 * H13 + -2.18074438153672 * H14 + 1.75831238575242 * H15 + 0.98715125973424 * 
H16 + -1.91091089802337 * H17 ;
675424    +   P_DepVar1  =     -2.2147071267261 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.2147071267261 + P_DepVar1 ;
675425    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
675426    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
675427    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
675428    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
675429    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
675430    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
675431    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
675432    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
675433    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
675434    +END;
MPRINT(EM_DIAGRAM):   END;
675435    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
675436    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
675437    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
675438    +END;
MPRINT(EM_DIAGRAM):   END;
675439    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
675440    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
675441    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
675442    +END;
MPRINT(EM_DIAGRAM):   END;
675443    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
675444    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
675445    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
675446    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
675447    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
675448    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
675449    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
675450    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675451    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
675452    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675453    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
675454    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
675455    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
675456    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
675457    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
675458    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
675459    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
675460    +END;
MPRINT(EM_DIAGRAM):   END;
675461    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
675462    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
675463    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
675464    +drop
675465    +H11
675466    +H12
675467    +H13
675468    +H14
675469    +H15
675470    +H16
675471    +H17
675472    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
675473    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
675474     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
675475     quit;
675476     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
675477     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
675478     * Neural12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural12: Computing metadata for TRAIN data;
675479     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural12_TRAIN out=WORK.M2X53AFP noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2X53AFP;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2X53AFP(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2X53AFP;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2X53AFP;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M16HHRAD NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M16HHRAD;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M16HHRAD;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2E051R_(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M16HHRAD;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M16HHRAD;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M16HHRAD;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M16HHRAD;
MPRINT(EMADVISECOLUMNS):   set WORK.M16HHRAD;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural12";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural12";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
675791     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
675792     set EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO;
675793     where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
675794     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL12_EMINFO.
      WHERE (DATA='Neural12') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675795     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural12_EMINFO;
675796     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
675797     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
675798     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
675802     run;
675803     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
675804     set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
675805     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675806     proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
675807     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675808     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675809     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
675810     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675811     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675812     proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
675813     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675814     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675815     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
675816     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
675817     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675818     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675819     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
675820     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
675821     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
675822     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.NEURAL12_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
