MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.12 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                11.12 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1JN4CT1 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1JN4CT1 new;
MPRINT(EM_DIAGRAM):   run;
674427     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
674428     set EMWS8.Neural12_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_OUTKEY;
674429     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
674430     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 37 observations read from the data set EMWS8.NEURAL12_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

674431     filename emflow
674431   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
674432     *------------------------------------------------------------*;
674433     * Neural12: Scoring DATA data;
674434     *------------------------------------------------------------*;
674435     data EMWS8.Neural12_TRAIN
674436     / view=EMWS8.Neural12_TRAIN
674437     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_TRAIN / view=EMWS8.Neural12_TRAIN ;
674438     set EMWS8.PRINCOMP_TRAIN
674439     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
674440     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
674441    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
674442    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
674443    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
674444    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
674445    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
674446    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
674447    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
674448    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
674449    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
674450    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
674451    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
674452    +LENGTH _WARN_ $4
674453    +      F_DepVar  $ 12
674454    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
674455    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
674456    +
674457    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
674458    +
674459    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
674460    +
674461    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
674462    +
674463    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
674464    +
674465    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
674466    +
674467    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
674468    +
674469    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
674470    +
674471    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
674472    +
674473    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
674474    +
674475    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
674476    +
674477    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
674478    +
674479    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
674480    +
674481    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
674482    +
674483    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
674484    +
674485    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
674486    +
674487    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
674488    +
674489    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
674490    +
674491    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
674492    +
674493    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
674494    +
674495    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
674496    +
674497    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
674498    +
674499    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
674500    +
674501    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
674502    +
674503    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
674504    +
674505    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
674506    +
674507    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
674508    +
674509    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
674510    +
674511    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
674512    +
674513    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
674514    +
674515    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
674516    +
674517    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
674518    +
674519    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
674520    +
674521    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674522    +*** Checking missing input Interval
674523    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
674524    +
674525    +IF NMISS(
674526    +   PC_1 ,
674527    +   PC_10 ,
674528    +   PC_11 ,
674529    +   PC_12 ,
674530    +   PC_13 ,
674531    +   PC_14 ,
674532    +   PC_15 ,
674533    +   PC_16 ,
674534    +   PC_17 ,
674535    +   PC_2 ,
674536    +   PC_3 ,
674537    +   PC_4 ,
674538    +   PC_5 ,
674539    +   PC_6 ,
674540    +   PC_7 ,
674541    +   PC_8 ,
674542    +   PC_9 ,
674543    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
674544    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
674545    +
674546    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
674547    +END;
MPRINT(EM_DIAGRAM):   END;
674548    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674549    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
674550    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674551    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
674552    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
674553    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
674554    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
674555    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
674556    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
674557    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
674558    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
674559    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
674560    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
674561    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
674562    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
674563    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
674564    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
674565    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
674566    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
674567    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
674568    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
674569    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
674570    +END;
MPRINT(EM_DIAGRAM):   END;
674571    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
674572    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
674573    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
674574    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
674575    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
674576    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
674577    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
674578    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
674579    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
674580    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
674581    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
674582    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
674583    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
674584    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
674585    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
674586    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
674587    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
674588    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
674589    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
674590    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
674591    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
674592    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
674593    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
674594    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
674595    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
674596    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
674597    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
674598    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
674599    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
674600    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
674601    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
674602    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
674603    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
674604    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
674605    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
674606    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
674607    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
674608    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
674609    +END;
MPRINT(EM_DIAGRAM):   END;
674610    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674611    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
674612    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674613    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
674614    +   H11  =    -0.55342153424625 * S_PC_1  +    -0.29323467331544 * S_PC_10
674615    +          +     0.33965172324926 * S_PC_11  +     0.49000556060396 * S_PC_12
674616    +          +    -0.34110824735492 * S_PC_13  +    -0.24287054403528 * S_PC_14
674617    +          +    -0.02501080366447 * S_PC_15  +    -0.02679419599111 * S_PC_16
674618    +          +     0.09844374274586 * S_PC_17  +     0.13878811412798 * S_PC_2
674619    +          +     0.10801571799328 * S_PC_3  +    -0.58531553567813 * S_PC_4
674620    +          +     0.31533819069473 * S_PC_5  +    -0.19214671008198 * S_PC_6
674621    +          +    -0.51179938713553 * S_PC_7  +    -0.50670206584236 * S_PC_8
674622    +          +    -0.97231420794389 * S_PC_9  +    -0.16137966362464 *
674623    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.55342153424625 * S_PC_1 + -0.29323467331544 * S_PC_10 + 
0.33965172324926 * S_PC_11 + 0.49000556060396 * S_PC_12 + -0.34110824735492 * S_PC_13 + 
-0.24287054403528 * S_PC_14 + -0.02501080366447 * S_PC_15 + -0.02679419599111 * S_PC_16 + 
0.09844374274586 * S_PC_17 + 0.13878811412798 * S_PC_2 + 0.10801571799328 * S_PC_3 + 
-0.58531553567813 * S_PC_4 + 0.31533819069473 * S_PC_5 + -0.19214671008198 * S_PC_6 + 
-0.51179938713553 * S_PC_7 + -0.50670206584236 * S_PC_8 + -0.97231420794389 * S_PC_9 + 
-0.16137966362464 * S_Year_Birth ;
674624    +   H12  =    -0.99502274940017 * S_PC_1  +     0.49237671874688 * S_PC_10
674625    +          +     0.12210745945974 * S_PC_11  +     0.72021579354775 * S_PC_12
674626    +          +      0.3393754550733 * S_PC_13  +     0.13986168240251 * S_PC_14
674627    +          +     0.04811901065181 * S_PC_15  +    -0.53520625287765 * S_PC_16
674628    +          +    -0.19673918666042 * S_PC_17  +     -0.2054947890231 * S_PC_2
674629    +          +    -0.43750641244546 * S_PC_3  +    -0.30212148993997 * S_PC_4
674630    +          +     0.15193420944594 * S_PC_5  +     0.41173144589147 * S_PC_6
674631    +          +     0.30810633295335 * S_PC_7  +     0.12469809630723 * S_PC_8
674632    +          +    -0.64078531647299 * S_PC_9  +    -0.19774667470024 *
674633    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.99502274940017 * S_PC_1 + 0.49237671874688 * S_PC_10 + 
0.12210745945974 * S_PC_11 + 0.72021579354775 * S_PC_12 + 0.3393754550733 * S_PC_13 + 
0.13986168240251 * S_PC_14 + 0.04811901065181 * S_PC_15 + -0.53520625287765 * S_PC_16 + 
-0.19673918666042 * S_PC_17 + -0.2054947890231 * S_PC_2 + -0.43750641244546 * S_PC_3 + 
-0.30212148993997 * S_PC_4 + 0.15193420944594 * S_PC_5 + 0.41173144589147 * S_PC_6 + 
0.30810633295335 * S_PC_7 + 0.12469809630723 * S_PC_8 + -0.64078531647299 * S_PC_9 + 
-0.19774667470024 * S_Year_Birth ;
674634    +   H13  =    -1.08978244664773 * S_PC_1  +     0.03100578006881 * S_PC_10
674635    +          +    -0.86965903394255 * S_PC_11  +    -1.12965112824775 * S_PC_12
674636    +          +     0.22635891501443 * S_PC_13  +      -0.370668142629 * S_PC_14
674637    +          +     0.30597502081665 * S_PC_15  +    -0.15658987227197 * S_PC_16
674638    +          +      0.2668499246416 * S_PC_17  +     0.19436681461642 * S_PC_2
674639    +          +     0.44869442712318 * S_PC_3  +     0.57307437095431 * S_PC_4
674640    +          +     0.80776612713283 * S_PC_5  +    -0.08822515374977 * S_PC_6
674641    +          +    -0.09284418945373 * S_PC_7  +    -0.06028855495338 * S_PC_8
674642    +          +     0.21586614421723 * S_PC_9  +     0.04888429457745 *
674643    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -1.08978244664773 * S_PC_1 + 0.03100578006881 * S_PC_10 + 
-0.86965903394255 * S_PC_11 + -1.12965112824775 * S_PC_12 + 0.22635891501443 * S_PC_13 + 
-0.370668142629 * S_PC_14 + 0.30597502081665 * S_PC_15 + -0.15658987227197 * S_PC_16 + 
0.2668499246416 * S_PC_17 + 0.19436681461642 * S_PC_2 + 0.44869442712318 * S_PC_3 + 
0.57307437095431 * S_PC_4 + 0.80776612713283 * S_PC_5 + -0.08822515374977 * S_PC_6 + 
-0.09284418945373 * S_PC_7 + -0.06028855495338 * S_PC_8 + 0.21586614421723 * S_PC_9 + 
0.04888429457745 * S_Year_Birth ;
674644    +   H14  =    -0.28593618538042 * S_PC_1  +     0.59937027421068 * S_PC_10
674645    +          +    -0.55184433419032 * S_PC_11  +     -0.2301871208647 * S_PC_12
674646    +          +     1.01178018574556 * S_PC_13  +    -0.48252128489132 * S_PC_14
674647    +          +     0.48647706305442 * S_PC_15  +     0.38826674709309 * S_PC_16
674648    +          +     0.06640068764932 * S_PC_17  +      0.0476622971963 * S_PC_2
674649    +          +     0.02272352093671 * S_PC_3  +     0.10081179767275 * S_PC_4
674650    +          +    -0.13769487622721 * S_PC_5  +    -0.24922377953623 * S_PC_6
674651    +          +    -0.05671479273459 * S_PC_7  +    -0.13408005038028 * S_PC_8
674652    +          +    -0.06327123090628 * S_PC_9  +    -0.10370487024911 *
674653    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.28593618538042 * S_PC_1 + 0.59937027421068 * S_PC_10 + 
-0.55184433419032 * S_PC_11 + -0.2301871208647 * S_PC_12 + 1.01178018574556 * S_PC_13 + 
-0.48252128489132 * S_PC_14 + 0.48647706305442 * S_PC_15 + 0.38826674709309 * S_PC_16 + 
0.06640068764932 * S_PC_17 + 0.0476622971963 * S_PC_2 + 0.02272352093671 * S_PC_3 + 
0.10081179767275 * S_PC_4 + -0.13769487622721 * S_PC_5 + -0.24922377953623 * S_PC_6 + 
-0.05671479273459 * S_PC_7 + -0.13408005038028 * S_PC_8 + -0.06327123090628 * S_PC_9 + 
-0.10370487024911 * S_Year_Birth ;
674654    +   H15  =    -0.33708904537859 * S_PC_1  +     0.37424167610601 * S_PC_10
674655    +          +    -0.31135313745496 * S_PC_11  +     0.30453947982614 * S_PC_12
674656    +          +    -0.49544019618096 * S_PC_13  +    -0.26793473780514 * S_PC_14
674657    +          +     0.33164121549835 * S_PC_15  +    -0.31758743327631 * S_PC_16
674658    +          +    -0.05779041880921 * S_PC_17  +    -0.76996955995367 * S_PC_2
674659    +          +     0.13746794831625 * S_PC_3  +     0.46608112761099 * S_PC_4
674660    +          +     0.27002996418456 * S_PC_5  +     0.23180249614069 * S_PC_6
674661    +          +    -0.08059651309604 * S_PC_7  +    -0.03561134620766 * S_PC_8
674662    +          +    -0.03059416422876 * S_PC_9  +     0.26625248867973 *
674663    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.33708904537859 * S_PC_1 + 0.37424167610601 * S_PC_10 + 
-0.31135313745496 * S_PC_11 + 0.30453947982614 * S_PC_12 + -0.49544019618096 * S_PC_13 + 
-0.26793473780514 * S_PC_14 + 0.33164121549835 * S_PC_15 + -0.31758743327631 * S_PC_16 + 
-0.05779041880921 * S_PC_17 + -0.76996955995367 * S_PC_2 + 0.13746794831625 * S_PC_3 + 
0.46608112761099 * S_PC_4 + 0.27002996418456 * S_PC_5 + 0.23180249614069 * S_PC_6 + 
-0.08059651309604 * S_PC_7 + -0.03561134620766 * S_PC_8 + -0.03059416422876 * S_PC_9 + 
0.26625248867973 * S_Year_Birth ;
674664    +   H16  =     0.15017999188962 * S_PC_1  +    -0.33783019008081 * S_PC_10
674665    +          +     0.03105737534224 * S_PC_11  +     0.26111468755191 * S_PC_12
674666    +          +    -0.41128593451888 * S_PC_13  +     0.20048648875339 * S_PC_14
674667    +          +     0.45863219433154 * S_PC_15  +    -0.01258422577707 * S_PC_16
674668    +          +    -0.40610693500982 * S_PC_17  +    -0.15850867686128 * S_PC_2
674669    +          +     0.36950881975001 * S_PC_3  +    -0.17134002892283 * S_PC_4
674670    +          +      -0.628869137697 * S_PC_5  +    -0.23379385585096 * S_PC_6
674671    +          +    -0.08458064547675 * S_PC_7  +     0.74760782214014 * S_PC_8
674672    +          +     0.56234207099634 * S_PC_9  +    -0.14984712441736 *
674673    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.15017999188962 * S_PC_1 + -0.33783019008081 * S_PC_10 + 
0.03105737534224 * S_PC_11 + 0.26111468755191 * S_PC_12 + -0.41128593451888 * S_PC_13 + 
0.20048648875339 * S_PC_14 + 0.45863219433154 * S_PC_15 + -0.01258422577707 * S_PC_16 + 
-0.40610693500982 * S_PC_17 + -0.15850867686128 * S_PC_2 + 0.36950881975001 * S_PC_3 + 
-0.17134002892283 * S_PC_4 + -0.628869137697 * S_PC_5 + -0.23379385585096 * S_PC_6 + 
-0.08458064547675 * S_PC_7 + 0.74760782214014 * S_PC_8 + 0.56234207099634 * S_PC_9 + 
-0.14984712441736 * S_Year_Birth ;
674674    +   H17  =     0.30849857328204 * S_PC_1  +     0.33064134865883 * S_PC_10
674675    +          +     0.23827611784637 * S_PC_11  +     0.13303512224297 * S_PC_12
674676    +          +     0.28560416047256 * S_PC_13  +    -0.15117991713253 * S_PC_14
674677    +          +    -0.08257856642011 * S_PC_15  +    -0.50665244726973 * S_PC_16
674678    +          +      0.0274411962906 * S_PC_17  +     0.74919575098467 * S_PC_2
674679    +          +     0.57348166343361 * S_PC_3  +     0.03517396803125 * S_PC_4
674680    +          +     0.21522947410365 * S_PC_5  +    -0.17904742140357 * S_PC_6
674681    +          +    -0.28202941925014 * S_PC_7  +    -0.28392079981156 * S_PC_8
674682    +          +     0.15375921681792 * S_PC_9  +     0.37391488433781 *
674683    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.30849857328204 * S_PC_1 + 0.33064134865883 * S_PC_10 + 
0.23827611784637 * S_PC_11 + 0.13303512224297 * S_PC_12 + 0.28560416047256 * S_PC_13 + 
-0.15117991713253 * S_PC_14 + -0.08257856642011 * S_PC_15 + -0.50665244726973 * S_PC_16 + 
0.0274411962906 * S_PC_17 + 0.74919575098467 * S_PC_2 + 0.57348166343361 * S_PC_3 + 
0.03517396803125 * S_PC_4 + 0.21522947410365 * S_PC_5 + -0.17904742140357 * S_PC_6 + 
-0.28202941925014 * S_PC_7 + -0.28392079981156 * S_PC_8 + 0.15375921681792 * S_PC_9 + 
0.37391488433781 * S_Year_Birth ;
674684    +   H11  =     -1.1594247768044 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.1594247768044 + H11 ;
674685    +   H12  =     1.34180472342355 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.34180472342355 + H12 ;
674686    +   H13  =     -0.4765158697282 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.4765158697282 + H13 ;
674687    +   H14  =     0.12408462982581 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.12408462982581 + H14 ;
674688    +   H15  =    -1.51733223495167 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.51733223495167 + H15 ;
674689    +   H16  =     0.70412113613226 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.70412113613226 + H16 ;
674690    +   H17  =     0.56926526451324 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.56926526451324 + H17 ;
674691    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
674692    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
674693    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
674694    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
674695    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
674696    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
674697    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
674698    +END;
MPRINT(EM_DIAGRAM):   END;
674699    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
674700    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
674701    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
674702    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
674703    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
674704    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
674705    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
674706    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
674707    +END;
MPRINT(EM_DIAGRAM):   END;
674708    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674709    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
674710    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674711    +
674712    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
674713    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
674714    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
674715    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
674716    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
674717    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
674718    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
674719    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
674720    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
674721    +end;
MPRINT(EM_DIAGRAM):   end;
674722    +else do;
MPRINT(EM_DIAGRAM):   else do;
674723    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
674724    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
674725    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
674726    +   end;
MPRINT(EM_DIAGRAM):   end;
674727    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
674728    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
674729    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
674730    +   end;
MPRINT(EM_DIAGRAM):   end;
674731    +   else do;
MPRINT(EM_DIAGRAM):   else do;
674732    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
674733    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
674734    +   end;
MPRINT(EM_DIAGRAM):   end;
674735    +end;
MPRINT(EM_DIAGRAM):   end;
674736    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
674737    +   P_DepVar1  =    -1.58910967945868 * H11  +    -2.05915787974985 * H12
674738    +          +     -1.9012823868264 * H13  +    -2.18074438153672 * H14
674739    +          +     1.75831238575242 * H15  +     0.98715125973424 * H16
674740    +          +    -1.91091089802337 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.58910967945868 * H11 + -2.05915787974985 * H12 + 
-1.9012823868264 * H13 + -2.18074438153672 * H14 + 1.75831238575242 * H15 + 0.98715125973424 * 
H16 + -1.91091089802337 * H17 ;
674741    +   P_DepVar1  =     -2.2147071267261 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.2147071267261 + P_DepVar1 ;
674742    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
674743    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
674744    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
674745    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
674746    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
674747    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
674748    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
674749    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
674750    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
674751    +END;
MPRINT(EM_DIAGRAM):   END;
674752    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
674753    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
674754    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
674755    +END;
MPRINT(EM_DIAGRAM):   END;
674756    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
674757    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
674758    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
674759    +END;
MPRINT(EM_DIAGRAM):   END;
674760    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
674761    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
674762    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
674763    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
674764    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
674765    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
674766    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
674767    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674768    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
674769    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674770    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
674771    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
674772    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
674773    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
674774    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
674775    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
674776    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
674777    +END;
MPRINT(EM_DIAGRAM):   END;
674778    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
674779    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
674780    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
674781    +drop
674782    +H11
674783    +H12
674784    +H13
674785    +H14
674786    +H15
674787    +H16
674788    +H17
674789    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
674790    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
674791     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
674792     quit;
674793     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
674794     filename emflow
674794   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
674795     *------------------------------------------------------------*;
674796     * Neural12: Scoring VALIDATE data;
674797     *------------------------------------------------------------*;
674798     data EMWS8.Neural12_VALIDATE
674799     / view=EMWS8.Neural12_VALIDATE
674800     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_VALIDATE / view=EMWS8.Neural12_VALIDATE ;
674801     set EMWS8.PRINCOMP_VALIDATE
674802     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
674803     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
674804    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
674805    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
674806    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
674807    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
674808    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
674809    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
674810    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
674811    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
674812    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
674813    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
674814    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
674815    +LENGTH _WARN_ $4
674816    +      F_DepVar  $ 12
674817    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
674818    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
674819    +
674820    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
674821    +
674822    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
674823    +
674824    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
674825    +
674826    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
674827    +
674828    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
674829    +
674830    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
674831    +
674832    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
674833    +
674834    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
674835    +
674836    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
674837    +
674838    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
674839    +
674840    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
674841    +
674842    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
674843    +
674844    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
674845    +
674846    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
674847    +
674848    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
674849    +
674850    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
674851    +
674852    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
674853    +
674854    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
674855    +
674856    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
674857    +
674858    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
674859    +
674860    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
674861    +
674862    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
674863    +
674864    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
674865    +
674866    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
674867    +
674868    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
674869    +
674870    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
674871    +
674872    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
674873    +
674874    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
674875    +
674876    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
674877    +
674878    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
674879    +
674880    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
674881    +
674882    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
674883    +
674884    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674885    +*** Checking missing input Interval
674886    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
674887    +
674888    +IF NMISS(
674889    +   PC_1 ,
674890    +   PC_10 ,
674891    +   PC_11 ,
674892    +   PC_12 ,
674893    +   PC_13 ,
674894    +   PC_14 ,
674895    +   PC_15 ,
674896    +   PC_16 ,
674897    +   PC_17 ,
674898    +   PC_2 ,
674899    +   PC_3 ,
674900    +   PC_4 ,
674901    +   PC_5 ,
674902    +   PC_6 ,
674903    +   PC_7 ,
674904    +   PC_8 ,
674905    +   PC_9 ,
674906    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
674907    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
674908    +
674909    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
674910    +END;
MPRINT(EM_DIAGRAM):   END;
674911    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674912    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
674913    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674914    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
674915    +   S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
674916    +   S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
674917    +   S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
674918    +   S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
674919    +   S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
674920    +   S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
674921    +   S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
674922    +   S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
674923    +   S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
674924    +   S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
674925    +   S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
674926    +   S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
674927    +   S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
674928    +   S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
674929    +   S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
674930    +   S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
674931    +   S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
674932    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
674933    +END;
MPRINT(EM_DIAGRAM):   END;
674934    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
674935    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
674936    +   ELSE S_PC_1  = -3.6488918403387E-15 +     0.29892759566822 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6488918403387E-15 + 0.29892759566822 * PC_1 ;
674937    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
674938    +   ELSE S_PC_10  = -6.1105909646702E-15 +     0.82174055927533 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.1105909646702E-15 + 0.82174055927533 * PC_10 ;
674939    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
674940    +   ELSE S_PC_11  =  5.5953279603159E-15 +       0.856249156402 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.5953279603159E-15 + 0.856249156402 * PC_11 ;
674941    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
674942    +   ELSE S_PC_12  = -4.1145821078075E-15 +     0.88806609097186 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1145821078075E-15 + 0.88806609097186 * PC_12 ;
674943    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
674944    +   ELSE S_PC_13  =  1.4849812030115E-15 +     0.89678852922943 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4849812030115E-15 + 0.89678852922943 * PC_13 ;
674945    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
674946    +   ELSE S_PC_14  = -6.2973928075572E-15 +     0.90339751679168 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2973928075572E-15 + 0.90339751679168 * PC_14 ;
674947    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
674948    +   ELSE S_PC_15  = -5.8948982757007E-16 +     0.92999222699092 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.8948982757007E-16 + 0.92999222699092 * PC_15 ;
674949    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
674950    +   ELSE S_PC_16  = -2.5957971712491E-15 +      0.9511809992322 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.5957971712491E-15 + 0.9511809992322 * PC_16 ;
674951    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
674952    +   ELSE S_PC_17  =  3.6303451348395E-15 +     0.99884839954107 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.6303451348395E-15 + 0.99884839954107 * PC_17 ;
674953    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
674954    +   ELSE S_PC_2  =  6.4135165190946E-15 +     0.54372947518581 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4135165190946E-15 + 0.54372947518581 * PC_2 ;
674955    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
674956    +   ELSE S_PC_3  =  2.2514555608207E-15 +     0.55367420195889 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2514555608207E-15 + 0.55367420195889 * PC_3 ;
674957    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
674958    +   ELSE S_PC_4  = -3.8797382198993E-15 +     0.63693509045378 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.8797382198993E-15 + 0.63693509045378 * PC_4 ;
674959    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
674960    +   ELSE S_PC_5  = -4.8238591945923E-15 +      0.6666904967587 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.8238591945923E-15 + 0.6666904967587 * PC_5 ;
674961    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
674962    +   ELSE S_PC_6  =  1.5849559140428E-15 +     0.70534780307004 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5849559140428E-15 + 0.70534780307004 * PC_6 ;
674963    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
674964    +   ELSE S_PC_7  =  3.1562291763867E-16 +     0.74930538239816 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.1562291763867E-16 + 0.74930538239816 * PC_7 ;
674965    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
674966    +   ELSE S_PC_8  = -2.4599196832342E-15 +     0.77164443961071 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4599196832342E-15 + 0.77164443961071 * PC_8 ;
674967    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
674968    +   ELSE S_PC_9  = -4.1449869562181E-15 +      0.8081978480865 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1449869562181E-15 + 0.8081978480865 * PC_9 ;
674969    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
674970    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
674971    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
674972    +END;
MPRINT(EM_DIAGRAM):   END;
674973    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674974    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
674975    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
674976    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
674977    +   H11  =    -0.55342153424625 * S_PC_1  +    -0.29323467331544 * S_PC_10
674978    +          +     0.33965172324926 * S_PC_11  +     0.49000556060396 * S_PC_12
674979    +          +    -0.34110824735492 * S_PC_13  +    -0.24287054403528 * S_PC_14
674980    +          +    -0.02501080366447 * S_PC_15  +    -0.02679419599111 * S_PC_16
674981    +          +     0.09844374274586 * S_PC_17  +     0.13878811412798 * S_PC_2
674982    +          +     0.10801571799328 * S_PC_3  +    -0.58531553567813 * S_PC_4
674983    +          +     0.31533819069473 * S_PC_5  +    -0.19214671008198 * S_PC_6
674984    +          +    -0.51179938713553 * S_PC_7  +    -0.50670206584236 * S_PC_8
674985    +          +    -0.97231420794389 * S_PC_9  +    -0.16137966362464 *
674986    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.55342153424625 * S_PC_1 + -0.29323467331544 * S_PC_10 + 
0.33965172324926 * S_PC_11 + 0.49000556060396 * S_PC_12 + -0.34110824735492 * S_PC_13 + 
-0.24287054403528 * S_PC_14 + -0.02501080366447 * S_PC_15 + -0.02679419599111 * S_PC_16 + 
0.09844374274586 * S_PC_17 + 0.13878811412798 * S_PC_2 + 0.10801571799328 * S_PC_3 + 
-0.58531553567813 * S_PC_4 + 0.31533819069473 * S_PC_5 + -0.19214671008198 * S_PC_6 + 
-0.51179938713553 * S_PC_7 + -0.50670206584236 * S_PC_8 + -0.97231420794389 * S_PC_9 + 
-0.16137966362464 * S_Year_Birth ;
674987    +   H12  =    -0.99502274940017 * S_PC_1  +     0.49237671874688 * S_PC_10
674988    +          +     0.12210745945974 * S_PC_11  +     0.72021579354775 * S_PC_12
674989    +          +      0.3393754550733 * S_PC_13  +     0.13986168240251 * S_PC_14
674990    +          +     0.04811901065181 * S_PC_15  +    -0.53520625287765 * S_PC_16
674991    +          +    -0.19673918666042 * S_PC_17  +     -0.2054947890231 * S_PC_2
674992    +          +    -0.43750641244546 * S_PC_3  +    -0.30212148993997 * S_PC_4
674993    +          +     0.15193420944594 * S_PC_5  +     0.41173144589147 * S_PC_6
674994    +          +     0.30810633295335 * S_PC_7  +     0.12469809630723 * S_PC_8
674995    +          +    -0.64078531647299 * S_PC_9  +    -0.19774667470024 *
674996    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.99502274940017 * S_PC_1 + 0.49237671874688 * S_PC_10 + 
0.12210745945974 * S_PC_11 + 0.72021579354775 * S_PC_12 + 0.3393754550733 * S_PC_13 + 
0.13986168240251 * S_PC_14 + 0.04811901065181 * S_PC_15 + -0.53520625287765 * S_PC_16 + 
-0.19673918666042 * S_PC_17 + -0.2054947890231 * S_PC_2 + -0.43750641244546 * S_PC_3 + 
-0.30212148993997 * S_PC_4 + 0.15193420944594 * S_PC_5 + 0.41173144589147 * S_PC_6 + 
0.30810633295335 * S_PC_7 + 0.12469809630723 * S_PC_8 + -0.64078531647299 * S_PC_9 + 
-0.19774667470024 * S_Year_Birth ;
674997    +   H13  =    -1.08978244664773 * S_PC_1  +     0.03100578006881 * S_PC_10
674998    +          +    -0.86965903394255 * S_PC_11  +    -1.12965112824775 * S_PC_12
674999    +          +     0.22635891501443 * S_PC_13  +      -0.370668142629 * S_PC_14
675000    +          +     0.30597502081665 * S_PC_15  +    -0.15658987227197 * S_PC_16
675001    +          +      0.2668499246416 * S_PC_17  +     0.19436681461642 * S_PC_2
675002    +          +     0.44869442712318 * S_PC_3  +     0.57307437095431 * S_PC_4
675003    +          +     0.80776612713283 * S_PC_5  +    -0.08822515374977 * S_PC_6
675004    +          +    -0.09284418945373 * S_PC_7  +    -0.06028855495338 * S_PC_8
675005    +          +     0.21586614421723 * S_PC_9  +     0.04888429457745 *
675006    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -1.08978244664773 * S_PC_1 + 0.03100578006881 * S_PC_10 + 
-0.86965903394255 * S_PC_11 + -1.12965112824775 * S_PC_12 + 0.22635891501443 * S_PC_13 + 
-0.370668142629 * S_PC_14 + 0.30597502081665 * S_PC_15 + -0.15658987227197 * S_PC_16 + 
0.2668499246416 * S_PC_17 + 0.19436681461642 * S_PC_2 + 0.44869442712318 * S_PC_3 + 
0.57307437095431 * S_PC_4 + 0.80776612713283 * S_PC_5 + -0.08822515374977 * S_PC_6 + 
-0.09284418945373 * S_PC_7 + -0.06028855495338 * S_PC_8 + 0.21586614421723 * S_PC_9 + 
0.04888429457745 * S_Year_Birth ;
675007    +   H14  =    -0.28593618538042 * S_PC_1  +     0.59937027421068 * S_PC_10
675008    +          +    -0.55184433419032 * S_PC_11  +     -0.2301871208647 * S_PC_12
675009    +          +     1.01178018574556 * S_PC_13  +    -0.48252128489132 * S_PC_14
675010    +          +     0.48647706305442 * S_PC_15  +     0.38826674709309 * S_PC_16
675011    +          +     0.06640068764932 * S_PC_17  +      0.0476622971963 * S_PC_2
675012    +          +     0.02272352093671 * S_PC_3  +     0.10081179767275 * S_PC_4
675013    +          +    -0.13769487622721 * S_PC_5  +    -0.24922377953623 * S_PC_6
675014    +          +    -0.05671479273459 * S_PC_7  +    -0.13408005038028 * S_PC_8
675015    +          +    -0.06327123090628 * S_PC_9  +    -0.10370487024911 *
675016    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.28593618538042 * S_PC_1 + 0.59937027421068 * S_PC_10 + 
-0.55184433419032 * S_PC_11 + -0.2301871208647 * S_PC_12 + 1.01178018574556 * S_PC_13 + 
-0.48252128489132 * S_PC_14 + 0.48647706305442 * S_PC_15 + 0.38826674709309 * S_PC_16 + 
0.06640068764932 * S_PC_17 + 0.0476622971963 * S_PC_2 + 0.02272352093671 * S_PC_3 + 
0.10081179767275 * S_PC_4 + -0.13769487622721 * S_PC_5 + -0.24922377953623 * S_PC_6 + 
-0.05671479273459 * S_PC_7 + -0.13408005038028 * S_PC_8 + -0.06327123090628 * S_PC_9 + 
-0.10370487024911 * S_Year_Birth ;
675017    +   H15  =    -0.33708904537859 * S_PC_1  +     0.37424167610601 * S_PC_10
675018    +          +    -0.31135313745496 * S_PC_11  +     0.30453947982614 * S_PC_12
675019    +          +    -0.49544019618096 * S_PC_13  +    -0.26793473780514 * S_PC_14
675020    +          +     0.33164121549835 * S_PC_15  +    -0.31758743327631 * S_PC_16
675021    +          +    -0.05779041880921 * S_PC_17  +    -0.76996955995367 * S_PC_2
675022    +          +     0.13746794831625 * S_PC_3  +     0.46608112761099 * S_PC_4
675023    +          +     0.27002996418456 * S_PC_5  +     0.23180249614069 * S_PC_6
675024    +          +    -0.08059651309604 * S_PC_7  +    -0.03561134620766 * S_PC_8
675025    +          +    -0.03059416422876 * S_PC_9  +     0.26625248867973 *
675026    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.33708904537859 * S_PC_1 + 0.37424167610601 * S_PC_10 + 
-0.31135313745496 * S_PC_11 + 0.30453947982614 * S_PC_12 + -0.49544019618096 * S_PC_13 + 
-0.26793473780514 * S_PC_14 + 0.33164121549835 * S_PC_15 + -0.31758743327631 * S_PC_16 + 
-0.05779041880921 * S_PC_17 + -0.76996955995367 * S_PC_2 + 0.13746794831625 * S_PC_3 + 
0.46608112761099 * S_PC_4 + 0.27002996418456 * S_PC_5 + 0.23180249614069 * S_PC_6 + 
-0.08059651309604 * S_PC_7 + -0.03561134620766 * S_PC_8 + -0.03059416422876 * S_PC_9 + 
0.26625248867973 * S_Year_Birth ;
675027    +   H16  =     0.15017999188962 * S_PC_1  +    -0.33783019008081 * S_PC_10
675028    +          +     0.03105737534224 * S_PC_11  +     0.26111468755191 * S_PC_12
675029    +          +    -0.41128593451888 * S_PC_13  +     0.20048648875339 * S_PC_14
675030    +          +     0.45863219433154 * S_PC_15  +    -0.01258422577707 * S_PC_16
675031    +          +    -0.40610693500982 * S_PC_17  +    -0.15850867686128 * S_PC_2
675032    +          +     0.36950881975001 * S_PC_3  +    -0.17134002892283 * S_PC_4
675033    +          +      -0.628869137697 * S_PC_5  +    -0.23379385585096 * S_PC_6
675034    +          +    -0.08458064547675 * S_PC_7  +     0.74760782214014 * S_PC_8
675035    +          +     0.56234207099634 * S_PC_9  +    -0.14984712441736 *
675036    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.15017999188962 * S_PC_1 + -0.33783019008081 * S_PC_10 + 
0.03105737534224 * S_PC_11 + 0.26111468755191 * S_PC_12 + -0.41128593451888 * S_PC_13 + 
0.20048648875339 * S_PC_14 + 0.45863219433154 * S_PC_15 + -0.01258422577707 * S_PC_16 + 
-0.40610693500982 * S_PC_17 + -0.15850867686128 * S_PC_2 + 0.36950881975001 * S_PC_3 + 
-0.17134002892283 * S_PC_4 + -0.628869137697 * S_PC_5 + -0.23379385585096 * S_PC_6 + 
-0.08458064547675 * S_PC_7 + 0.74760782214014 * S_PC_8 + 0.56234207099634 * S_PC_9 + 
-0.14984712441736 * S_Year_Birth ;
675037    +   H17  =     0.30849857328204 * S_PC_1  +     0.33064134865883 * S_PC_10
675038    +          +     0.23827611784637 * S_PC_11  +     0.13303512224297 * S_PC_12
675039    +          +     0.28560416047256 * S_PC_13  +    -0.15117991713253 * S_PC_14
675040    +          +    -0.08257856642011 * S_PC_15  +    -0.50665244726973 * S_PC_16
675041    +          +      0.0274411962906 * S_PC_17  +     0.74919575098467 * S_PC_2
675042    +          +     0.57348166343361 * S_PC_3  +     0.03517396803125 * S_PC_4
675043    +          +     0.21522947410365 * S_PC_5  +    -0.17904742140357 * S_PC_6
675044    +          +    -0.28202941925014 * S_PC_7  +    -0.28392079981156 * S_PC_8
675045    +          +     0.15375921681792 * S_PC_9  +     0.37391488433781 *
675046    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.30849857328204 * S_PC_1 + 0.33064134865883 * S_PC_10 + 
0.23827611784637 * S_PC_11 + 0.13303512224297 * S_PC_12 + 0.28560416047256 * S_PC_13 + 
-0.15117991713253 * S_PC_14 + -0.08257856642011 * S_PC_15 + -0.50665244726973 * S_PC_16 + 
0.0274411962906 * S_PC_17 + 0.74919575098467 * S_PC_2 + 0.57348166343361 * S_PC_3 + 
0.03517396803125 * S_PC_4 + 0.21522947410365 * S_PC_5 + -0.17904742140357 * S_PC_6 + 
-0.28202941925014 * S_PC_7 + -0.28392079981156 * S_PC_8 + 0.15375921681792 * S_PC_9 + 
0.37391488433781 * S_Year_Birth ;
675047    +   H11  =     -1.1594247768044 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.1594247768044 + H11 ;
675048    +   H12  =     1.34180472342355 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.34180472342355 + H12 ;
675049    +   H13  =     -0.4765158697282 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.4765158697282 + H13 ;
675050    +   H14  =     0.12408462982581 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.12408462982581 + H14 ;
675051    +   H15  =    -1.51733223495167 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.51733223495167 + H15 ;
675052    +   H16  =     0.70412113613226 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.70412113613226 + H16 ;
675053    +   H17  =     0.56926526451324 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.56926526451324 + H17 ;
675054    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
675055    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
675056    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
675057    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
675058    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
675059    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
675060    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
675061    +END;
MPRINT(EM_DIAGRAM):   END;
675062    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
675063    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
675064    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
675065    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
675066    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
675067    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
675068    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
675069    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
675070    +END;
MPRINT(EM_DIAGRAM):   END;
675071    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675072    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
675073    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675074    +
675075    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
675076    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
675077    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
675078    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
675079    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
675080    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
675081    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
675082    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
675083    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
675084    +end;
MPRINT(EM_DIAGRAM):   end;
675085    +else do;
MPRINT(EM_DIAGRAM):   else do;
675086    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
675087    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
675088    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
675089    +   end;
MPRINT(EM_DIAGRAM):   end;
675090    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
675091    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
675092    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
675093    +   end;
MPRINT(EM_DIAGRAM):   end;
675094    +   else do;
MPRINT(EM_DIAGRAM):   else do;
675095    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
675096    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
675097    +   end;
MPRINT(EM_DIAGRAM):   end;
675098    +end;
MPRINT(EM_DIAGRAM):   end;
675099    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
675100    +   P_DepVar1  =    -1.58910967945868 * H11  +    -2.05915787974985 * H12
675101    +          +     -1.9012823868264 * H13  +    -2.18074438153672 * H14
675102    +          +     1.75831238575242 * H15  +     0.98715125973424 * H16
675103    +          +    -1.91091089802337 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.58910967945868 * H11 + -2.05915787974985 * H12 + 
-1.9012823868264 * H13 + -2.18074438153672 * H14 + 1.75831238575242 * H15 + 0.98715125973424 * 
H16 + -1.91091089802337 * H17 ;
675104    +   P_DepVar1  =     -2.2147071267261 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.2147071267261 + P_DepVar1 ;
675105    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
675106    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
675107    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
675108    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
675109    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
675110    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
675111    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
675112    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
675113    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
675114    +END;
MPRINT(EM_DIAGRAM):   END;
675115    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
675116    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
675117    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
675118    +END;
MPRINT(EM_DIAGRAM):   END;
675119    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
675120    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
675121    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
675122    +END;
MPRINT(EM_DIAGRAM):   END;
675123    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
675124    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
675125    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
675126    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
675127    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
675128    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
675129    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
675130    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675131    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
675132    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
675133    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
675134    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
675135    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
675136    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
675137    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
675138    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
675139    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
675140    +END;
MPRINT(EM_DIAGRAM):   END;
675141    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
675142    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
675143    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
675144    +drop
675145    +H11
675146    +H12
675147    +H13
675148    +H14
675149    +H15
675150    +H16
675151    +H17
675152    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
675153    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
675154     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
675155     quit;
675156     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
675157     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
675158     * Neural12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural12: Computing metadata for TRAIN data;
675159     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural12_TRAIN out=WORK.M19T44AV noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M19T44AV;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M19T44AV(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M19T44AV;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M19T44AV;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3GE0YYA NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GE0YYA;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GE0YYA;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2X8KYV2(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GE0YYA;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GE0YYA;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GE0YYA;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GE0YYA;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GE0YYA;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural12";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural12";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
675471     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
675472     set EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO;
675473     where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
675474     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL12_EMINFO.
      WHERE (DATA='Neural12') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675475     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural12_EMINFO;
675476     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
675477     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
675478     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
675482     run;
675483     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
675484     set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
675485     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

675486     proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
675487     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675488     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

675489     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
675490     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675491     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

675492     proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
675493     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675494     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

675495     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
675496     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
675497     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
675498     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

675499     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
675500     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
675501     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
675502     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
NOTE: View EMWS8.NEURAL12_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
