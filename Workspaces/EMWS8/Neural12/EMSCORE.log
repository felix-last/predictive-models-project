MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2A7YX62 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2A7YX62 new;
MPRINT(EM_DIAGRAM):   run;
650031     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
650032     set EMWS8.Neural12_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_OUTKEY;
650033     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
650034     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 37 observations read from the data set EMWS8.NEURAL12_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

650035     filename emflow
650035   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
650036     *------------------------------------------------------------*;
650037     * Neural12: Scoring DATA data;
650038     *------------------------------------------------------------*;
650039     data EMWS8.Neural12_TRAIN
650040     / view=EMWS8.Neural12_TRAIN
650041     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_TRAIN / view=EMWS8.Neural12_TRAIN ;
650042     set EMWS8.PRINCOMP_TRAIN
650043     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
650044     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
650045    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
650046    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
650047    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
650048    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
650049    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
650050    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
650051    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
650052    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
650053    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
650054    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
650055    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
650056    +LENGTH _WARN_ $4
650057    +      F_DepVar  $ 12
650058    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
650059    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
650060    +
650061    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
650062    +
650063    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
650064    +
650065    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
650066    +
650067    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
650068    +
650069    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
650070    +
650071    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
650072    +
650073    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
650074    +
650075    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
650076    +
650077    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
650078    +
650079    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
650080    +
650081    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
650082    +
650083    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
650084    +
650085    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
650086    +
650087    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
650088    +
650089    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
650090    +
650091    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
650092    +
650093    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
650094    +
650095    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
650096    +
650097    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
650098    +
650099    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
650100    +
650101    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
650102    +
650103    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
650104    +
650105    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
650106    +
650107    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
650108    +
650109    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
650110    +
650111    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
650112    +
650113    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
650114    +
650115    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
650116    +
650117    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
650118    +
650119    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
650120    +
650121    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
650122    +
650123    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
650124    +
650125    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650126    +*** Checking missing input Interval
650127    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
650128    +
650129    +IF NMISS(
650130    +   PC_1 ,
650131    +   PC_10 ,
650132    +   PC_11 ,
650133    +   PC_12 ,
650134    +   PC_13 ,
650135    +   PC_14 ,
650136    +   PC_15 ,
650137    +   PC_16 ,
650138    +   PC_17 ,
650139    +   PC_2 ,
650140    +   PC_3 ,
650141    +   PC_4 ,
650142    +   PC_5 ,
650143    +   PC_6 ,
650144    +   PC_7 ,
650145    +   PC_8 ,
650146    +   PC_9 ,
650147    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
650148    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
650149    +
650150    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
650151    +END;
MPRINT(EM_DIAGRAM):   END;
650152    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650153    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
650154    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650155    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
650156    +   S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
650157    +   S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
650158    +   S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
650159    +   S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
650160    +   S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
650161    +   S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
650162    +   S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
650163    +   S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
650164    +   S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
650165    +   S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
650166    +   S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
650167    +   S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
650168    +   S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
650169    +   S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
650170    +   S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
650171    +   S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
650172    +   S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
650173    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
650174    +END;
MPRINT(EM_DIAGRAM):   END;
650175    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
650176    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
650177    +   ELSE S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
650178    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
650179    +   ELSE S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
650180    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
650181    +   ELSE S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
650182    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
650183    +   ELSE S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
650184    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
650185    +   ELSE S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
650186    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
650187    +   ELSE S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
650188    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
650189    +   ELSE S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
650190    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
650191    +   ELSE S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
650192    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
650193    +   ELSE S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
650194    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
650195    +   ELSE S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
650196    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
650197    +   ELSE S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
650198    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
650199    +   ELSE S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
650200    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
650201    +   ELSE S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
650202    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
650203    +   ELSE S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
650204    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
650205    +   ELSE S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
650206    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
650207    +   ELSE S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
650208    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
650209    +   ELSE S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
650210    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
650211    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
650212    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
650213    +END;
MPRINT(EM_DIAGRAM):   END;
650214    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650215    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
650216    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650217    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
650218    +   H11  =     -0.5676300220312 * S_PC_1  +    -0.30685005298258 * S_PC_10
650219    +          +     0.33144193521288 * S_PC_11  +     0.48604920744725 * S_PC_12
650220    +          +     -0.3343515108255 * S_PC_13  +    -0.24302039168126 * S_PC_14
650221    +          +    -0.04203285565889 * S_PC_15  +    -0.02856252858655 * S_PC_16
650222    +          +     0.09507071980044 * S_PC_17  +     0.14101757475609 * S_PC_2
650223    +          +     0.10400411611015 * S_PC_3  +    -0.60365946974152 * S_PC_4
650224    +          +     0.31951023104888 * S_PC_5  +    -0.19495900124965 * S_PC_6
650225    +          +    -0.48623238665166 * S_PC_7  +    -0.48996955886063 * S_PC_8
650226    +          +    -0.97734935726015 * S_PC_9  +    -0.15876048047142 *
650227    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.5676300220312 * S_PC_1 + -0.30685005298258 * S_PC_10 + 
0.33144193521288 * S_PC_11 + 0.48604920744725 * S_PC_12 + -0.3343515108255 * S_PC_13 + 
-0.24302039168126 * S_PC_14 + -0.04203285565889 * S_PC_15 + -0.02856252858655 * S_PC_16 + 
0.09507071980044 * S_PC_17 + 0.14101757475609 * S_PC_2 + 0.10400411611015 * S_PC_3 + 
-0.60365946974152 * S_PC_4 + 0.31951023104888 * S_PC_5 + -0.19495900124965 * S_PC_6 + 
-0.48623238665166 * S_PC_7 + -0.48996955886063 * S_PC_8 + -0.97734935726015 * S_PC_9 + 
-0.15876048047142 * S_Year_Birth ;
650228    +   H12  =    -0.99538279224418 * S_PC_1  +     0.51080506033577 * S_PC_10
650229    +          +     0.11168962840475 * S_PC_11  +     0.73413444278653 * S_PC_12
650230    +          +     0.34649210530582 * S_PC_13  +     0.13034463919592 * S_PC_14
650231    +          +     0.02557639040503 * S_PC_15  +    -0.53720380377274 * S_PC_16
650232    +          +    -0.19967827084831 * S_PC_17  +    -0.20514646129984 * S_PC_2
650233    +          +    -0.42918913740416 * S_PC_3  +    -0.26543538246483 * S_PC_4
650234    +          +      0.1495484443706 * S_PC_5  +     0.42379412404861 * S_PC_6
650235    +          +     0.32760041597661 * S_PC_7  +     0.13337617452846 * S_PC_8
650236    +          +    -0.64290758383096 * S_PC_9  +    -0.20356285728529 *
650237    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.99538279224418 * S_PC_1 + 0.51080506033577 * S_PC_10 + 
0.11168962840475 * S_PC_11 + 0.73413444278653 * S_PC_12 + 0.34649210530582 * S_PC_13 + 
0.13034463919592 * S_PC_14 + 0.02557639040503 * S_PC_15 + -0.53720380377274 * S_PC_16 + 
-0.19967827084831 * S_PC_17 + -0.20514646129984 * S_PC_2 + -0.42918913740416 * S_PC_3 + 
-0.26543538246483 * S_PC_4 + 0.1495484443706 * S_PC_5 + 0.42379412404861 * S_PC_6 + 
0.32760041597661 * S_PC_7 + 0.13337617452846 * S_PC_8 + -0.64290758383096 * S_PC_9 + 
-0.20356285728529 * S_Year_Birth ;
650238    +   H13  =     -1.0992657781698 * S_PC_1  +     0.03793804392658 * S_PC_10
650239    +          +    -0.87112601660535 * S_PC_11  +     -1.1439898359342 * S_PC_12
650240    +          +     0.22341662825535 * S_PC_13  +    -0.37197874887684 * S_PC_14
650241    +          +     0.30055781758401 * S_PC_15  +    -0.17155015191444 * S_PC_16
650242    +          +     0.27076574762285 * S_PC_17  +     0.19305913228169 * S_PC_2
650243    +          +     0.47083300459058 * S_PC_3  +     0.57636430755662 * S_PC_4
650244    +          +     0.82541924547951 * S_PC_5  +    -0.08491966977298 * S_PC_6
650245    +          +    -0.09636016058219 * S_PC_7  +    -0.05101195455819 * S_PC_8
650246    +          +     0.21307405812735 * S_PC_9  +      0.0534282745528 *
650247    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -1.0992657781698 * S_PC_1 + 0.03793804392658 * S_PC_10 + 
-0.87112601660535 * S_PC_11 + -1.1439898359342 * S_PC_12 + 0.22341662825535 * S_PC_13 + 
-0.37197874887684 * S_PC_14 + 0.30055781758401 * S_PC_15 + -0.17155015191444 * S_PC_16 + 
0.27076574762285 * S_PC_17 + 0.19305913228169 * S_PC_2 + 0.47083300459058 * S_PC_3 + 
0.57636430755662 * S_PC_4 + 0.82541924547951 * S_PC_5 + -0.08491966977298 * S_PC_6 + 
-0.09636016058219 * S_PC_7 + -0.05101195455819 * S_PC_8 + 0.21307405812735 * S_PC_9 + 
0.0534282745528 * S_Year_Birth ;
650248    +   H14  =    -0.28033927792161 * S_PC_1  +     0.59493833246644 * S_PC_10
650249    +          +    -0.55137023079334 * S_PC_11  +    -0.22268967168536 * S_PC_12
650250    +          +      1.0026813896332 * S_PC_13  +    -0.49387305466998 * S_PC_14
650251    +          +     0.49776238649549 * S_PC_15  +     0.40400057556983 * S_PC_16
650252    +          +      0.0628446798034 * S_PC_17  +     0.04775469750477 * S_PC_2
650253    +          +     0.02336139993366 * S_PC_3  +        0.09524660979 * S_PC_4
650254    +          +    -0.13739746994018 * S_PC_5  +    -0.25225809263357 * S_PC_6
650255    +          +    -0.06487935155791 * S_PC_7  +     -0.1322322847403 * S_PC_8
650256    +          +     -0.0661227677489 * S_PC_9  +    -0.10032058920416 *
650257    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.28033927792161 * S_PC_1 + 0.59493833246644 * S_PC_10 + 
-0.55137023079334 * S_PC_11 + -0.22268967168536 * S_PC_12 + 1.0026813896332 * S_PC_13 + 
-0.49387305466998 * S_PC_14 + 0.49776238649549 * S_PC_15 + 0.40400057556983 * S_PC_16 + 
0.0628446798034 * S_PC_17 + 0.04775469750477 * S_PC_2 + 0.02336139993366 * S_PC_3 + 
0.09524660979 * S_PC_4 + -0.13739746994018 * S_PC_5 + -0.25225809263357 * S_PC_6 + 
-0.06487935155791 * S_PC_7 + -0.1322322847403 * S_PC_8 + -0.0661227677489 * S_PC_9 + 
-0.10032058920416 * S_Year_Birth ;
650258    +   H15  =    -0.34016042462479 * S_PC_1  +     0.37454469773631 * S_PC_10
650259    +          +    -0.31300667900751 * S_PC_11  +     0.31246253970838 * S_PC_12
650260    +          +    -0.49102295972655 * S_PC_13  +    -0.27712376754168 * S_PC_14
650261    +          +     0.32925652536478 * S_PC_15  +    -0.33851777824604 * S_PC_16
650262    +          +    -0.06016622868243 * S_PC_17  +    -0.76574085180415 * S_PC_2
650263    +          +     0.14959059711886 * S_PC_3  +     0.47992442341836 * S_PC_4
650264    +          +     0.27744818014204 * S_PC_5  +     0.23310571667766 * S_PC_6
650265    +          +    -0.09801680647028 * S_PC_7  +     -0.0461319547186 * S_PC_8
650266    +          +     -0.0317075590465 * S_PC_9  +     0.27146889721572 *
650267    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.34016042462479 * S_PC_1 + 0.37454469773631 * S_PC_10 + 
-0.31300667900751 * S_PC_11 + 0.31246253970838 * S_PC_12 + -0.49102295972655 * S_PC_13 + 
-0.27712376754168 * S_PC_14 + 0.32925652536478 * S_PC_15 + -0.33851777824604 * S_PC_16 + 
-0.06016622868243 * S_PC_17 + -0.76574085180415 * S_PC_2 + 0.14959059711886 * S_PC_3 + 
0.47992442341836 * S_PC_4 + 0.27744818014204 * S_PC_5 + 0.23310571667766 * S_PC_6 + 
-0.09801680647028 * S_PC_7 + -0.0461319547186 * S_PC_8 + -0.0317075590465 * S_PC_9 + 
0.27146889721572 * S_Year_Birth ;
650268    +   H16  =     0.15099786043328 * S_PC_1  +    -0.33585886774534 * S_PC_10
650269    +          +     0.02812263307623 * S_PC_11  +     0.25744092078462 * S_PC_12
650270    +          +    -0.41837967158388 * S_PC_13  +     0.20287189163302 * S_PC_14
650271    +          +     0.46866832835833 * S_PC_15  +     -0.0201628559761 * S_PC_16
650272    +          +     -0.3978461711908 * S_PC_17  +    -0.15412398115987 * S_PC_2
650273    +          +     0.36673708324876 * S_PC_3  +    -0.16017079630267 * S_PC_4
650274    +          +    -0.63707926563706 * S_PC_5  +    -0.23300386991746 * S_PC_6
650275    +          +    -0.08318886288525 * S_PC_7  +     0.74276602413335 * S_PC_8
650276    +          +     0.57103943176061 * S_PC_9  +    -0.16157118451233 *
650277    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.15099786043328 * S_PC_1 + -0.33585886774534 * S_PC_10 + 
0.02812263307623 * S_PC_11 + 0.25744092078462 * S_PC_12 + -0.41837967158388 * S_PC_13 + 
0.20287189163302 * S_PC_14 + 0.46866832835833 * S_PC_15 + -0.0201628559761 * S_PC_16 + 
-0.3978461711908 * S_PC_17 + -0.15412398115987 * S_PC_2 + 0.36673708324876 * S_PC_3 + 
-0.16017079630267 * S_PC_4 + -0.63707926563706 * S_PC_5 + -0.23300386991746 * S_PC_6 + 
-0.08318886288525 * S_PC_7 + 0.74276602413335 * S_PC_8 + 0.57103943176061 * S_PC_9 + 
-0.16157118451233 * S_Year_Birth ;
650278    +   H17  =       0.330602325747 * S_PC_1  +     0.33032228152843 * S_PC_10
650279    +          +     0.23514119397309 * S_PC_11  +     0.11281430081481 * S_PC_12
650280    +          +     0.27922853148429 * S_PC_13  +    -0.13641023322947 * S_PC_14
650281    +          +    -0.06930142126701 * S_PC_15  +    -0.49846029120568 * S_PC_16
650282    +          +     0.04156973818252 * S_PC_17  +     0.75784769859359 * S_PC_2
650283    +          +     0.57034551329104 * S_PC_3  +     0.02940592468812 * S_PC_4
650284    +          +      0.2173780102755 * S_PC_5  +    -0.18828488891226 * S_PC_6
650285    +          +    -0.29383352025112 * S_PC_7  +     -0.3015683807777 * S_PC_8
650286    +          +     0.15263811878728 * S_PC_9  +     0.38096811669812 *
650287    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.330602325747 * S_PC_1 + 0.33032228152843 * S_PC_10 + 
0.23514119397309 * S_PC_11 + 0.11281430081481 * S_PC_12 + 0.27922853148429 * S_PC_13 + 
-0.13641023322947 * S_PC_14 + -0.06930142126701 * S_PC_15 + -0.49846029120568 * S_PC_16 + 
0.04156973818252 * S_PC_17 + 0.75784769859359 * S_PC_2 + 0.57034551329104 * S_PC_3 + 
0.02940592468812 * S_PC_4 + 0.2173780102755 * S_PC_5 + -0.18828488891226 * S_PC_6 + 
-0.29383352025112 * S_PC_7 + -0.3015683807777 * S_PC_8 + 0.15263811878728 * S_PC_9 + 
0.38096811669812 * S_Year_Birth ;
650288    +   H11  =     -1.1507836976634 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.1507836976634 + H11 ;
650289    +   H12  =     1.36159575454507 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.36159575454507 + H12 ;
650290    +   H13  =    -0.49113198647068 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.49113198647068 + H13 ;
650291    +   H14  =     0.11036109737384 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.11036109737384 + H14 ;
650292    +   H15  =    -1.52568955736796 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.52568955736796 + H15 ;
650293    +   H16  =     0.70595253219317 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.70595253219317 + H16 ;
650294    +   H17  =     0.56521234643088 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.56521234643088 + H17 ;
650295    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
650296    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
650297    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
650298    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
650299    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
650300    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
650301    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
650302    +END;
MPRINT(EM_DIAGRAM):   END;
650303    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
650304    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
650305    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
650306    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
650307    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
650308    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
650309    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
650310    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
650311    +END;
MPRINT(EM_DIAGRAM):   END;
650312    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650313    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
650314    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650315    +
650316    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
650317    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
650318    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
650319    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
650320    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
650321    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
650322    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
650323    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
650324    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
650325    +end;
MPRINT(EM_DIAGRAM):   end;
650326    +else do;
MPRINT(EM_DIAGRAM):   else do;
650327    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
650328    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
650329    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
650330    +   end;
MPRINT(EM_DIAGRAM):   end;
650331    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
650332    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
650333    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
650334    +   end;
MPRINT(EM_DIAGRAM):   end;
650335    +   else do;
MPRINT(EM_DIAGRAM):   else do;
650336    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
650337    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
650338    +   end;
MPRINT(EM_DIAGRAM):   end;
650339    +end;
MPRINT(EM_DIAGRAM):   end;
650340    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
650341    +   P_DepVar1  =    -1.58967822046735 * H11  +    -2.10329065190661 * H12
650342    +          +    -1.90822118522278 * H13  +    -2.16762466284078 * H14
650343    +          +      1.7747211286988 * H15  +     0.98046519626065 * H16
650344    +          +    -1.90328963637158 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.58967822046735 * H11 + -2.10329065190661 * H12 + 
-1.90822118522278 * H13 + -2.16762466284078 * H14 + 1.7747211286988 * H15 + 0.98046519626065 * 
H16 + -1.90328963637158 * H17 ;
650345    +   P_DepVar1  =    -2.21107015515665 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.21107015515665 + P_DepVar1 ;
650346    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
650347    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
650348    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
650349    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
650350    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
650351    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
650352    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
650353    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
650354    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
650355    +END;
MPRINT(EM_DIAGRAM):   END;
650356    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
650357    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
650358    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
650359    +END;
MPRINT(EM_DIAGRAM):   END;
650360    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
650361    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
650362    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
650363    +END;
MPRINT(EM_DIAGRAM):   END;
650364    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
650365    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
650366    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
650367    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
650368    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
650369    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
650370    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
650371    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650372    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
650373    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650374    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
650375    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
650376    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
650377    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
650378    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
650379    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
650380    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
650381    +END;
MPRINT(EM_DIAGRAM):   END;
650382    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
650383    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
650384    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
650385    +drop
650386    +H11
650387    +H12
650388    +H13
650389    +H14
650390    +H15
650391    +H16
650392    +H17
650393    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
650394    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
650395     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
650396     quit;
650397     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
650398     filename emflow
650398   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
650399     *------------------------------------------------------------*;
650400     * Neural12: Scoring VALIDATE data;
650401     *------------------------------------------------------------*;
650402     data EMWS8.Neural12_VALIDATE
650403     / view=EMWS8.Neural12_VALIDATE
650404     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_VALIDATE / view=EMWS8.Neural12_VALIDATE ;
650405     set EMWS8.PRINCOMP_VALIDATE
650406     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
650407     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
650408    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
650409    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
650410    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
650411    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
650412    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
650413    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
650414    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
650415    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
650416    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
650417    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
650418    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
650419    +LENGTH _WARN_ $4
650420    +      F_DepVar  $ 12
650421    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
650422    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
650423    +
650424    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
650425    +
650426    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
650427    +
650428    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
650429    +
650430    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
650431    +
650432    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
650433    +
650434    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
650435    +
650436    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
650437    +
650438    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
650439    +
650440    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
650441    +
650442    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
650443    +
650444    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
650445    +
650446    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
650447    +
650448    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
650449    +
650450    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
650451    +
650452    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
650453    +
650454    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
650455    +
650456    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
650457    +
650458    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
650459    +
650460    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
650461    +
650462    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
650463    +
650464    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
650465    +
650466    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
650467    +
650468    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
650469    +
650470    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
650471    +
650472    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
650473    +
650474    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
650475    +
650476    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
650477    +
650478    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
650479    +
650480    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
650481    +
650482    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
650483    +
650484    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
650485    +
650486    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
650487    +
650488    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650489    +*** Checking missing input Interval
650490    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
650491    +
650492    +IF NMISS(
650493    +   PC_1 ,
650494    +   PC_10 ,
650495    +   PC_11 ,
650496    +   PC_12 ,
650497    +   PC_13 ,
650498    +   PC_14 ,
650499    +   PC_15 ,
650500    +   PC_16 ,
650501    +   PC_17 ,
650502    +   PC_2 ,
650503    +   PC_3 ,
650504    +   PC_4 ,
650505    +   PC_5 ,
650506    +   PC_6 ,
650507    +   PC_7 ,
650508    +   PC_8 ,
650509    +   PC_9 ,
650510    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
650511    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
650512    +
650513    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
650514    +END;
MPRINT(EM_DIAGRAM):   END;
650515    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650516    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
650517    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650518    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
650519    +   S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
650520    +   S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
650521    +   S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
650522    +   S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
650523    +   S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
650524    +   S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
650525    +   S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
650526    +   S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
650527    +   S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
650528    +   S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
650529    +   S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
650530    +   S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
650531    +   S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
650532    +   S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
650533    +   S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
650534    +   S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
650535    +   S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
650536    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
650537    +END;
MPRINT(EM_DIAGRAM):   END;
650538    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
650539    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
650540    +   ELSE S_PC_1  = -3.6294364555292E-15 +     0.29892679459111 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.6294364555292E-15 + 0.29892679459111 * PC_1 ;
650541    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
650542    +   ELSE S_PC_10  = -6.2815536802709E-15 +     0.82177445188012 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2815536802709E-15 + 0.82177445188012 * PC_10 ;
650543    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
650544    +   ELSE S_PC_11  =  5.2785706580609E-15 +     0.85631006900792 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2785706580609E-15 + 0.85631006900792 * PC_11 ;
650545    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
650546    +   ELSE S_PC_12  = -4.1387290416389E-15 +     0.88807871240911 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1387290416389E-15 + 0.88807871240911 * PC_12 ;
650547    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
650548    +   ELSE S_PC_13  =  1.4589830727918E-15 +     0.89679107329648 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4589830727918E-15 + 0.89679107329648 * PC_13 ;
650549    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
650550    +   ELSE S_PC_14  = -6.2822189123966E-15 +     0.90339654117007 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2822189123966E-15 + 0.90339654117007 * PC_14 ;
650551    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
650552    +   ELSE S_PC_15  = -5.2248121649466E-16 +     0.92993702465165 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.2248121649466E-16 + 0.92993702465165 * PC_15 ;
650553    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
650554    +   ELSE S_PC_16  = -2.6897046725231E-15 +     0.95121394314649 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6897046725231E-15 + 0.95121394314649 * PC_16 ;
650555    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
650556    +   ELSE S_PC_17  =  3.5787742074362E-15 +     0.99887425068205 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.5787742074362E-15 + 0.99887425068205 * PC_17 ;
650557    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
650558    +   ELSE S_PC_2  =  6.4113141631876E-15 +     0.54372869580717 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4113141631876E-15 + 0.54372869580717 * PC_2 ;
650559    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
650560    +   ELSE S_PC_3  =  2.2104329668238E-15 +     0.55367221144899 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2104329668238E-15 + 0.55367221144899 * PC_3 ;
650561    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
650562    +   ELSE S_PC_4  = -3.9509679191637E-15 +     0.63694139531868 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.9509679191637E-15 + 0.63694139531868 * PC_4 ;
650563    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
650564    +   ELSE S_PC_5  = -4.7850489168894E-15 +     0.66667841601593 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7850489168894E-15 + 0.66667841601593 * PC_5 ;
650565    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
650566    +   ELSE S_PC_6  =  1.5058392834001E-15 +     0.70535593591745 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5058392834001E-15 + 0.70535593591745 * PC_6 ;
650567    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
650568    +   ELSE S_PC_7  =  2.9182665890544E-16 +     0.74929827240347 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 2.9182665890544E-16 + 0.74929827240347 * PC_7 ;
650569    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
650570    +   ELSE S_PC_8  = -2.3914410530745E-15 +     0.77166055611422 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3914410530745E-15 + 0.77166055611422 * PC_8 ;
650571    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
650572    +   ELSE S_PC_9  = -4.1831576010329E-15 +     0.80828482156853 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.1831576010329E-15 + 0.80828482156853 * PC_9 ;
650573    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
650574    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
650575    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
650576    +END;
MPRINT(EM_DIAGRAM):   END;
650577    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650578    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
650579    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650580    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
650581    +   H11  =     -0.5676300220312 * S_PC_1  +    -0.30685005298258 * S_PC_10
650582    +          +     0.33144193521288 * S_PC_11  +     0.48604920744725 * S_PC_12
650583    +          +     -0.3343515108255 * S_PC_13  +    -0.24302039168126 * S_PC_14
650584    +          +    -0.04203285565889 * S_PC_15  +    -0.02856252858655 * S_PC_16
650585    +          +     0.09507071980044 * S_PC_17  +     0.14101757475609 * S_PC_2
650586    +          +     0.10400411611015 * S_PC_3  +    -0.60365946974152 * S_PC_4
650587    +          +     0.31951023104888 * S_PC_5  +    -0.19495900124965 * S_PC_6
650588    +          +    -0.48623238665166 * S_PC_7  +    -0.48996955886063 * S_PC_8
650589    +          +    -0.97734935726015 * S_PC_9  +    -0.15876048047142 *
650590    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.5676300220312 * S_PC_1 + -0.30685005298258 * S_PC_10 + 
0.33144193521288 * S_PC_11 + 0.48604920744725 * S_PC_12 + -0.3343515108255 * S_PC_13 + 
-0.24302039168126 * S_PC_14 + -0.04203285565889 * S_PC_15 + -0.02856252858655 * S_PC_16 + 
0.09507071980044 * S_PC_17 + 0.14101757475609 * S_PC_2 + 0.10400411611015 * S_PC_3 + 
-0.60365946974152 * S_PC_4 + 0.31951023104888 * S_PC_5 + -0.19495900124965 * S_PC_6 + 
-0.48623238665166 * S_PC_7 + -0.48996955886063 * S_PC_8 + -0.97734935726015 * S_PC_9 + 
-0.15876048047142 * S_Year_Birth ;
650591    +   H12  =    -0.99538279224418 * S_PC_1  +     0.51080506033577 * S_PC_10
650592    +          +     0.11168962840475 * S_PC_11  +     0.73413444278653 * S_PC_12
650593    +          +     0.34649210530582 * S_PC_13  +     0.13034463919592 * S_PC_14
650594    +          +     0.02557639040503 * S_PC_15  +    -0.53720380377274 * S_PC_16
650595    +          +    -0.19967827084831 * S_PC_17  +    -0.20514646129984 * S_PC_2
650596    +          +    -0.42918913740416 * S_PC_3  +    -0.26543538246483 * S_PC_4
650597    +          +      0.1495484443706 * S_PC_5  +     0.42379412404861 * S_PC_6
650598    +          +     0.32760041597661 * S_PC_7  +     0.13337617452846 * S_PC_8
650599    +          +    -0.64290758383096 * S_PC_9  +    -0.20356285728529 *
650600    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.99538279224418 * S_PC_1 + 0.51080506033577 * S_PC_10 + 
0.11168962840475 * S_PC_11 + 0.73413444278653 * S_PC_12 + 0.34649210530582 * S_PC_13 + 
0.13034463919592 * S_PC_14 + 0.02557639040503 * S_PC_15 + -0.53720380377274 * S_PC_16 + 
-0.19967827084831 * S_PC_17 + -0.20514646129984 * S_PC_2 + -0.42918913740416 * S_PC_3 + 
-0.26543538246483 * S_PC_4 + 0.1495484443706 * S_PC_5 + 0.42379412404861 * S_PC_6 + 
0.32760041597661 * S_PC_7 + 0.13337617452846 * S_PC_8 + -0.64290758383096 * S_PC_9 + 
-0.20356285728529 * S_Year_Birth ;
650601    +   H13  =     -1.0992657781698 * S_PC_1  +     0.03793804392658 * S_PC_10
650602    +          +    -0.87112601660535 * S_PC_11  +     -1.1439898359342 * S_PC_12
650603    +          +     0.22341662825535 * S_PC_13  +    -0.37197874887684 * S_PC_14
650604    +          +     0.30055781758401 * S_PC_15  +    -0.17155015191444 * S_PC_16
650605    +          +     0.27076574762285 * S_PC_17  +     0.19305913228169 * S_PC_2
650606    +          +     0.47083300459058 * S_PC_3  +     0.57636430755662 * S_PC_4
650607    +          +     0.82541924547951 * S_PC_5  +    -0.08491966977298 * S_PC_6
650608    +          +    -0.09636016058219 * S_PC_7  +    -0.05101195455819 * S_PC_8
650609    +          +     0.21307405812735 * S_PC_9  +      0.0534282745528 *
650610    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -1.0992657781698 * S_PC_1 + 0.03793804392658 * S_PC_10 + 
-0.87112601660535 * S_PC_11 + -1.1439898359342 * S_PC_12 + 0.22341662825535 * S_PC_13 + 
-0.37197874887684 * S_PC_14 + 0.30055781758401 * S_PC_15 + -0.17155015191444 * S_PC_16 + 
0.27076574762285 * S_PC_17 + 0.19305913228169 * S_PC_2 + 0.47083300459058 * S_PC_3 + 
0.57636430755662 * S_PC_4 + 0.82541924547951 * S_PC_5 + -0.08491966977298 * S_PC_6 + 
-0.09636016058219 * S_PC_7 + -0.05101195455819 * S_PC_8 + 0.21307405812735 * S_PC_9 + 
0.0534282745528 * S_Year_Birth ;
650611    +   H14  =    -0.28033927792161 * S_PC_1  +     0.59493833246644 * S_PC_10
650612    +          +    -0.55137023079334 * S_PC_11  +    -0.22268967168536 * S_PC_12
650613    +          +      1.0026813896332 * S_PC_13  +    -0.49387305466998 * S_PC_14
650614    +          +     0.49776238649549 * S_PC_15  +     0.40400057556983 * S_PC_16
650615    +          +      0.0628446798034 * S_PC_17  +     0.04775469750477 * S_PC_2
650616    +          +     0.02336139993366 * S_PC_3  +        0.09524660979 * S_PC_4
650617    +          +    -0.13739746994018 * S_PC_5  +    -0.25225809263357 * S_PC_6
650618    +          +    -0.06487935155791 * S_PC_7  +     -0.1322322847403 * S_PC_8
650619    +          +     -0.0661227677489 * S_PC_9  +    -0.10032058920416 *
650620    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.28033927792161 * S_PC_1 + 0.59493833246644 * S_PC_10 + 
-0.55137023079334 * S_PC_11 + -0.22268967168536 * S_PC_12 + 1.0026813896332 * S_PC_13 + 
-0.49387305466998 * S_PC_14 + 0.49776238649549 * S_PC_15 + 0.40400057556983 * S_PC_16 + 
0.0628446798034 * S_PC_17 + 0.04775469750477 * S_PC_2 + 0.02336139993366 * S_PC_3 + 
0.09524660979 * S_PC_4 + -0.13739746994018 * S_PC_5 + -0.25225809263357 * S_PC_6 + 
-0.06487935155791 * S_PC_7 + -0.1322322847403 * S_PC_8 + -0.0661227677489 * S_PC_9 + 
-0.10032058920416 * S_Year_Birth ;
650621    +   H15  =    -0.34016042462479 * S_PC_1  +     0.37454469773631 * S_PC_10
650622    +          +    -0.31300667900751 * S_PC_11  +     0.31246253970838 * S_PC_12
650623    +          +    -0.49102295972655 * S_PC_13  +    -0.27712376754168 * S_PC_14
650624    +          +     0.32925652536478 * S_PC_15  +    -0.33851777824604 * S_PC_16
650625    +          +    -0.06016622868243 * S_PC_17  +    -0.76574085180415 * S_PC_2
650626    +          +     0.14959059711886 * S_PC_3  +     0.47992442341836 * S_PC_4
650627    +          +     0.27744818014204 * S_PC_5  +     0.23310571667766 * S_PC_6
650628    +          +    -0.09801680647028 * S_PC_7  +     -0.0461319547186 * S_PC_8
650629    +          +     -0.0317075590465 * S_PC_9  +     0.27146889721572 *
650630    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.34016042462479 * S_PC_1 + 0.37454469773631 * S_PC_10 + 
-0.31300667900751 * S_PC_11 + 0.31246253970838 * S_PC_12 + -0.49102295972655 * S_PC_13 + 
-0.27712376754168 * S_PC_14 + 0.32925652536478 * S_PC_15 + -0.33851777824604 * S_PC_16 + 
-0.06016622868243 * S_PC_17 + -0.76574085180415 * S_PC_2 + 0.14959059711886 * S_PC_3 + 
0.47992442341836 * S_PC_4 + 0.27744818014204 * S_PC_5 + 0.23310571667766 * S_PC_6 + 
-0.09801680647028 * S_PC_7 + -0.0461319547186 * S_PC_8 + -0.0317075590465 * S_PC_9 + 
0.27146889721572 * S_Year_Birth ;
650631    +   H16  =     0.15099786043328 * S_PC_1  +    -0.33585886774534 * S_PC_10
650632    +          +     0.02812263307623 * S_PC_11  +     0.25744092078462 * S_PC_12
650633    +          +    -0.41837967158388 * S_PC_13  +     0.20287189163302 * S_PC_14
650634    +          +     0.46866832835833 * S_PC_15  +     -0.0201628559761 * S_PC_16
650635    +          +     -0.3978461711908 * S_PC_17  +    -0.15412398115987 * S_PC_2
650636    +          +     0.36673708324876 * S_PC_3  +    -0.16017079630267 * S_PC_4
650637    +          +    -0.63707926563706 * S_PC_5  +    -0.23300386991746 * S_PC_6
650638    +          +    -0.08318886288525 * S_PC_7  +     0.74276602413335 * S_PC_8
650639    +          +     0.57103943176061 * S_PC_9  +    -0.16157118451233 *
650640    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.15099786043328 * S_PC_1 + -0.33585886774534 * S_PC_10 + 
0.02812263307623 * S_PC_11 + 0.25744092078462 * S_PC_12 + -0.41837967158388 * S_PC_13 + 
0.20287189163302 * S_PC_14 + 0.46866832835833 * S_PC_15 + -0.0201628559761 * S_PC_16 + 
-0.3978461711908 * S_PC_17 + -0.15412398115987 * S_PC_2 + 0.36673708324876 * S_PC_3 + 
-0.16017079630267 * S_PC_4 + -0.63707926563706 * S_PC_5 + -0.23300386991746 * S_PC_6 + 
-0.08318886288525 * S_PC_7 + 0.74276602413335 * S_PC_8 + 0.57103943176061 * S_PC_9 + 
-0.16157118451233 * S_Year_Birth ;
650641    +   H17  =       0.330602325747 * S_PC_1  +     0.33032228152843 * S_PC_10
650642    +          +     0.23514119397309 * S_PC_11  +     0.11281430081481 * S_PC_12
650643    +          +     0.27922853148429 * S_PC_13  +    -0.13641023322947 * S_PC_14
650644    +          +    -0.06930142126701 * S_PC_15  +    -0.49846029120568 * S_PC_16
650645    +          +     0.04156973818252 * S_PC_17  +     0.75784769859359 * S_PC_2
650646    +          +     0.57034551329104 * S_PC_3  +     0.02940592468812 * S_PC_4
650647    +          +      0.2173780102755 * S_PC_5  +    -0.18828488891226 * S_PC_6
650648    +          +    -0.29383352025112 * S_PC_7  +     -0.3015683807777 * S_PC_8
650649    +          +     0.15263811878728 * S_PC_9  +     0.38096811669812 *
650650    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.330602325747 * S_PC_1 + 0.33032228152843 * S_PC_10 + 
0.23514119397309 * S_PC_11 + 0.11281430081481 * S_PC_12 + 0.27922853148429 * S_PC_13 + 
-0.13641023322947 * S_PC_14 + -0.06930142126701 * S_PC_15 + -0.49846029120568 * S_PC_16 + 
0.04156973818252 * S_PC_17 + 0.75784769859359 * S_PC_2 + 0.57034551329104 * S_PC_3 + 
0.02940592468812 * S_PC_4 + 0.2173780102755 * S_PC_5 + -0.18828488891226 * S_PC_6 + 
-0.29383352025112 * S_PC_7 + -0.3015683807777 * S_PC_8 + 0.15263811878728 * S_PC_9 + 
0.38096811669812 * S_Year_Birth ;
650651    +   H11  =     -1.1507836976634 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.1507836976634 + H11 ;
650652    +   H12  =     1.36159575454507 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.36159575454507 + H12 ;
650653    +   H13  =    -0.49113198647068 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.49113198647068 + H13 ;
650654    +   H14  =     0.11036109737384 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.11036109737384 + H14 ;
650655    +   H15  =    -1.52568955736796 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.52568955736796 + H15 ;
650656    +   H16  =     0.70595253219317 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.70595253219317 + H16 ;
650657    +   H17  =     0.56521234643088 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.56521234643088 + H17 ;
650658    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
650659    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
650660    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
650661    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
650662    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
650663    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
650664    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
650665    +END;
MPRINT(EM_DIAGRAM):   END;
650666    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
650667    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
650668    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
650669    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
650670    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
650671    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
650672    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
650673    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
650674    +END;
MPRINT(EM_DIAGRAM):   END;
650675    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650676    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
650677    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650678    +
650679    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
650680    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
650681    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
650682    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
650683    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
650684    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
650685    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
650686    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
650687    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
650688    +end;
MPRINT(EM_DIAGRAM):   end;
650689    +else do;
MPRINT(EM_DIAGRAM):   else do;
650690    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
650691    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
650692    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
650693    +   end;
MPRINT(EM_DIAGRAM):   end;
650694    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
650695    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
650696    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
650697    +   end;
MPRINT(EM_DIAGRAM):   end;
650698    +   else do;
MPRINT(EM_DIAGRAM):   else do;
650699    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
650700    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
650701    +   end;
MPRINT(EM_DIAGRAM):   end;
650702    +end;
MPRINT(EM_DIAGRAM):   end;
650703    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
650704    +   P_DepVar1  =    -1.58967822046735 * H11  +    -2.10329065190661 * H12
650705    +          +    -1.90822118522278 * H13  +    -2.16762466284078 * H14
650706    +          +      1.7747211286988 * H15  +     0.98046519626065 * H16
650707    +          +    -1.90328963637158 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.58967822046735 * H11 + -2.10329065190661 * H12 + 
-1.90822118522278 * H13 + -2.16762466284078 * H14 + 1.7747211286988 * H15 + 0.98046519626065 * 
H16 + -1.90328963637158 * H17 ;
650708    +   P_DepVar1  =    -2.21107015515665 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.21107015515665 + P_DepVar1 ;
650709    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
650710    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
650711    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
650712    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
650713    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
650714    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
650715    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
650716    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
650717    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
650718    +END;
MPRINT(EM_DIAGRAM):   END;
650719    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
650720    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
650721    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
650722    +END;
MPRINT(EM_DIAGRAM):   END;
650723    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
650724    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
650725    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
650726    +END;
MPRINT(EM_DIAGRAM):   END;
650727    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
650728    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
650729    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
650730    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
650731    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
650732    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
650733    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
650734    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650735    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
650736    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
650737    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
650738    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
650739    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
650740    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
650741    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
650742    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
650743    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
650744    +END;
MPRINT(EM_DIAGRAM):   END;
650745    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
650746    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
650747    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
650748    +drop
650749    +H11
650750    +H12
650751    +H13
650752    +H14
650753    +H15
650754    +H16
650755    +H17
650756    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
650757    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
650758     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
650759     quit;
650760     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
650761     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
650762     * Neural12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural12: Computing metadata for TRAIN data;
650763     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural12_TRAIN out=WORK.M3SJ6VZI noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3SJ6VZI;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3SJ6VZI(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3SJ6VZI;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3SJ6VZI;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1U1A6MS NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U1A6MS;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U1A6MS;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M11L0IYV(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U1A6MS;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U1A6MS;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U1A6MS;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U1A6MS;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U1A6MS;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural12";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural12";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
651075     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
651076     set EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO;
651077     where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
651078     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL12_EMINFO.
      WHERE (DATA='Neural12') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

651079     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural12_EMINFO;
651080     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
651081     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
651082     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
651086     run;
651087     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
651088     set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
651089     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

651090     proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
651091     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
651092     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

651093     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
651094     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
651095     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

651096     proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
651097     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
651098     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

651099     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
651100     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
651101     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
651102     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

651103     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
651104     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
651105     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
651106     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL12_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
