MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.25 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                17.25 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1Z0P7SI 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1Z0P7SI new;
MPRINT(EM_DIAGRAM):   run;
665535     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
665536     set EMWS8.Neural12_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_OUTKEY;
665537     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
665538     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 37 observations read from the data set EMWS8.NEURAL12_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

665539     filename emflow
665539   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
665540     *------------------------------------------------------------*;
665541     * Neural12: Scoring DATA data;
665542     *------------------------------------------------------------*;
665543     data EMWS8.Neural12_TRAIN
665544     / view=EMWS8.Neural12_TRAIN
665545     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_TRAIN / view=EMWS8.Neural12_TRAIN ;
665546     set EMWS8.PRINCOMP_TRAIN
665547     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
665548     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
665549    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
665550    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
665551    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
665552    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
665553    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
665554    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
665555    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
665556    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
665557    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
665558    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
665559    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
665560    +LENGTH _WARN_ $4
665561    +      F_DepVar  $ 12
665562    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
665563    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
665564    +
665565    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
665566    +
665567    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
665568    +
665569    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
665570    +
665571    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
665572    +
665573    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
665574    +
665575    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
665576    +
665577    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
665578    +
665579    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
665580    +
665581    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
665582    +
665583    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
665584    +
665585    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
665586    +
665587    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
665588    +
665589    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
665590    +
665591    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
665592    +
665593    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
665594    +
665595    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
665596    +
665597    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
665598    +
665599    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
665600    +
665601    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
665602    +
665603    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
665604    +
665605    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
665606    +
665607    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
665608    +
665609    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
665610    +
665611    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
665612    +
665613    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
665614    +
665615    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
665616    +
665617    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
665618    +
665619    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
665620    +
665621    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
665622    +
665623    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
665624    +
665625    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
665626    +
665627    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
665628    +
665629    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665630    +*** Checking missing input Interval
665631    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
665632    +
665633    +IF NMISS(
665634    +   PC_1 ,
665635    +   PC_10 ,
665636    +   PC_11 ,
665637    +   PC_12 ,
665638    +   PC_13 ,
665639    +   PC_14 ,
665640    +   PC_15 ,
665641    +   PC_16 ,
665642    +   PC_17 ,
665643    +   PC_2 ,
665644    +   PC_3 ,
665645    +   PC_4 ,
665646    +   PC_5 ,
665647    +   PC_6 ,
665648    +   PC_7 ,
665649    +   PC_8 ,
665650    +   PC_9 ,
665651    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
665652    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
665653    +
665654    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
665655    +END;
MPRINT(EM_DIAGRAM):   END;
665656    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665657    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
665658    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665659    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
665660    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
665661    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
665662    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
665663    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
665664    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
665665    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
665666    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
665667    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
665668    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
665669    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
665670    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
665671    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
665672    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
665673    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
665674    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
665675    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
665676    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
665677    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
665678    +END;
MPRINT(EM_DIAGRAM):   END;
665679    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
665680    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
665681    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
665682    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
665683    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
665684    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
665685    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
665686    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
665687    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
665688    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
665689    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
665690    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
665691    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
665692    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
665693    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
665694    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
665695    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
665696    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
665697    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
665698    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
665699    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
665700    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
665701    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
665702    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
665703    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
665704    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
665705    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
665706    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
665707    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
665708    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
665709    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
665710    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
665711    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
665712    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
665713    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
665714    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
665715    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
665716    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
665717    +END;
MPRINT(EM_DIAGRAM):   END;
665718    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665719    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
665720    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665721    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
665722    +   H11  =    -0.50754467864853 * S_PC_1  +     -0.0096262574398 * S_PC_10
665723    +          +     0.14323564519461 * S_PC_11  +     0.41688732719144 * S_PC_12
665724    +          +    -0.23105960395492 * S_PC_13  +    -0.13983457141569 * S_PC_14
665725    +          +    -0.09058252871003 * S_PC_15  +     0.13317372705745 * S_PC_16
665726    +          +    -0.06281696709893 * S_PC_17  +     0.13346779435623 * S_PC_2
665727    +          +     0.19827524013856 * S_PC_3  +    -0.49078002762886 * S_PC_4
665728    +          +     0.28666139703857 * S_PC_5  +    -0.10378052990351 * S_PC_6
665729    +          +     -0.1968548602707 * S_PC_7  +    -0.45560761696887 * S_PC_8
665730    +          +     -0.8114558504722 * S_PC_9  +    -0.09343131455845 *
665731    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.50754467864853 * S_PC_1 + -0.0096262574398 * S_PC_10 + 
0.14323564519461 * S_PC_11 + 0.41688732719144 * S_PC_12 + -0.23105960395492 * S_PC_13 + 
-0.13983457141569 * S_PC_14 + -0.09058252871003 * S_PC_15 + 0.13317372705745 * S_PC_16 + 
-0.06281696709893 * S_PC_17 + 0.13346779435623 * S_PC_2 + 0.19827524013856 * S_PC_3 + 
-0.49078002762886 * S_PC_4 + 0.28666139703857 * S_PC_5 + -0.10378052990351 * S_PC_6 + 
-0.1968548602707 * S_PC_7 + -0.45560761696887 * S_PC_8 + -0.8114558504722 * S_PC_9 + 
-0.09343131455845 * S_Year_Birth ;
665732    +   H12  =    -0.81573558098063 * S_PC_1  +     0.24773437846044 * S_PC_10
665733    +          +     0.13533997706716 * S_PC_11  +     0.75544268766517 * S_PC_12
665734    +          +     0.17183445519664 * S_PC_13  +      0.1777896181105 * S_PC_14
665735    +          +     0.05706870679047 * S_PC_15  +    -0.46807694963409 * S_PC_16
665736    +          +    -0.25190451727153 * S_PC_17  +    -0.08258276412231 * S_PC_2
665737    +          +    -0.36441875817422 * S_PC_3  +    -0.39012839645629 * S_PC_4
665738    +          +     0.04722996979342 * S_PC_5  +     0.43416394096325 * S_PC_6
665739    +          +     0.19725231550558 * S_PC_7  +     0.21295253069805 * S_PC_8
665740    +          +    -0.60545100325243 * S_PC_9  +    -0.15355095095987 *
665741    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.81573558098063 * S_PC_1 + 0.24773437846044 * S_PC_10 + 
0.13533997706716 * S_PC_11 + 0.75544268766517 * S_PC_12 + 0.17183445519664 * S_PC_13 + 
0.1777896181105 * S_PC_14 + 0.05706870679047 * S_PC_15 + -0.46807694963409 * S_PC_16 + 
-0.25190451727153 * S_PC_17 + -0.08258276412231 * S_PC_2 + -0.36441875817422 * S_PC_3 + 
-0.39012839645629 * S_PC_4 + 0.04722996979342 * S_PC_5 + 0.43416394096325 * S_PC_6 + 
0.19725231550558 * S_PC_7 + 0.21295253069805 * S_PC_8 + -0.60545100325243 * S_PC_9 + 
-0.15355095095987 * S_Year_Birth ;
665742    +   H13  =    -0.93981943955208 * S_PC_1  +    -0.11850321613711 * S_PC_10
665743    +          +    -0.74225741575618 * S_PC_11  +    -0.81034258744012 * S_PC_12
665744    +          +     0.21537464928397 * S_PC_13  +    -0.26677965640501 * S_PC_14
665745    +          +     0.30177037009096 * S_PC_15  +    -0.26947681668456 * S_PC_16
665746    +          +     0.23123019737325 * S_PC_17  +     0.15751211794885 * S_PC_2
665747    +          +     0.33175469761366 * S_PC_3  +     0.39514352786101 * S_PC_4
665748    +          +      0.7139227368597 * S_PC_5  +      0.0167014877178 * S_PC_6
665749    +          +    -0.07449310891132 * S_PC_7  +    -0.05509910154765 * S_PC_8
665750    +          +     0.16873655257606 * S_PC_9  +     0.00245043420593 *
665751    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.93981943955208 * S_PC_1 + -0.11850321613711 * S_PC_10 + 
-0.74225741575618 * S_PC_11 + -0.81034258744012 * S_PC_12 + 0.21537464928397 * S_PC_13 + 
-0.26677965640501 * S_PC_14 + 0.30177037009096 * S_PC_15 + -0.26947681668456 * S_PC_16 + 
0.23123019737325 * S_PC_17 + 0.15751211794885 * S_PC_2 + 0.33175469761366 * S_PC_3 + 
0.39514352786101 * S_PC_4 + 0.7139227368597 * S_PC_5 + 0.0167014877178 * S_PC_6 + 
-0.07449310891132 * S_PC_7 + -0.05509910154765 * S_PC_8 + 0.16873655257606 * S_PC_9 + 
0.00245043420593 * S_Year_Birth ;
665752    +   H14  =    -0.12693194472066 * S_PC_1  +     0.60796576749185 * S_PC_10
665753    +          +    -0.34420896979597 * S_PC_11  +    -0.23537095833674 * S_PC_12
665754    +          +     0.89540868522943 * S_PC_13  +      -0.510842523862 * S_PC_14
665755    +          +     0.48567760328151 * S_PC_15  +     0.37897489203761 * S_PC_16
665756    +          +     0.05946905584596 * S_PC_17  +     0.14804032191862 * S_PC_2
665757    +          +     0.03156879517121 * S_PC_3  +     0.20866387553468 * S_PC_4
665758    +          +    -0.11678944684508 * S_PC_5  +    -0.28222346677273 * S_PC_6
665759    +          +    -0.07076603764251 * S_PC_7  +    -0.08885981193922 * S_PC_8
665760    +          +    -0.17344366575651 * S_PC_9  +    -0.10422043273594 *
665761    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.12693194472066 * S_PC_1 + 0.60796576749185 * S_PC_10 + 
-0.34420896979597 * S_PC_11 + -0.23537095833674 * S_PC_12 + 0.89540868522943 * S_PC_13 + 
-0.510842523862 * S_PC_14 + 0.48567760328151 * S_PC_15 + 0.37897489203761 * S_PC_16 + 
0.05946905584596 * S_PC_17 + 0.14804032191862 * S_PC_2 + 0.03156879517121 * S_PC_3 + 
0.20866387553468 * S_PC_4 + -0.11678944684508 * S_PC_5 + -0.28222346677273 * S_PC_6 + 
-0.07076603764251 * S_PC_7 + -0.08885981193922 * S_PC_8 + -0.17344366575651 * S_PC_9 + 
-0.10422043273594 * S_Year_Birth ;
665762    +   H15  =    -0.18818846792217 * S_PC_1  +     0.15980122155848 * S_PC_10
665763    +          +    -0.29415615035488 * S_PC_11  +     0.22673434231766 * S_PC_12
665764    +          +     -0.4367544144709 * S_PC_13  +    -0.27215638165388 * S_PC_14
665765    +          +     0.21516860661944 * S_PC_15  +    -0.33073452493248 * S_PC_16
665766    +          +    -0.12566064186043 * S_PC_17  +    -0.66303106656578 * S_PC_2
665767    +          +     0.15398704463012 * S_PC_3  +     0.45620897750328 * S_PC_4
665768    +          +     0.21146328236808 * S_PC_5  +     0.09789059959814 * S_PC_6
665769    +          +    -0.12207231873189 * S_PC_7  +    -0.02692016155566 * S_PC_8
665770    +          +     0.00827837096636 * S_PC_9  +     0.24843752055347 *
665771    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.18818846792217 * S_PC_1 + 0.15980122155848 * S_PC_10 + 
-0.29415615035488 * S_PC_11 + 0.22673434231766 * S_PC_12 + -0.4367544144709 * S_PC_13 + 
-0.27215638165388 * S_PC_14 + 0.21516860661944 * S_PC_15 + -0.33073452493248 * S_PC_16 + 
-0.12566064186043 * S_PC_17 + -0.66303106656578 * S_PC_2 + 0.15398704463012 * S_PC_3 + 
0.45620897750328 * S_PC_4 + 0.21146328236808 * S_PC_5 + 0.09789059959814 * S_PC_6 + 
-0.12207231873189 * S_PC_7 + -0.02692016155566 * S_PC_8 + 0.00827837096636 * S_PC_9 + 
0.24843752055347 * S_Year_Birth ;
665772    +   H16  =     0.17834519341997 * S_PC_1  +    -0.32824376267138 * S_PC_10
665773    +          +     0.02772071370421 * S_PC_11  +      0.3134819415225 * S_PC_12
665774    +          +    -0.34724682137837 * S_PC_13  +     0.19598007494228 * S_PC_14
665775    +          +     0.31968916312556 * S_PC_15  +    -0.03617557970689 * S_PC_16
665776    +          +    -0.32507715963836 * S_PC_17  +    -0.05923539655778 * S_PC_2
665777    +          +     0.36180293380006 * S_PC_3  +    -0.00711502811187 * S_PC_4
665778    +          +     -0.4202174009875 * S_PC_5  +    -0.20731677826254 * S_PC_6
665779    +          +     -0.0412241308518 * S_PC_7  +     0.64326432309663 * S_PC_8
665780    +          +     0.42325597812682 * S_PC_9  +     0.06066746722872 *
665781    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.17834519341997 * S_PC_1 + -0.32824376267138 * S_PC_10 + 
0.02772071370421 * S_PC_11 + 0.3134819415225 * S_PC_12 + -0.34724682137837 * S_PC_13 + 
0.19598007494228 * S_PC_14 + 0.31968916312556 * S_PC_15 + -0.03617557970689 * S_PC_16 + 
-0.32507715963836 * S_PC_17 + -0.05923539655778 * S_PC_2 + 0.36180293380006 * S_PC_3 + 
-0.00711502811187 * S_PC_4 + -0.4202174009875 * S_PC_5 + -0.20731677826254 * S_PC_6 + 
-0.0412241308518 * S_PC_7 + 0.64326432309663 * S_PC_8 + 0.42325597812682 * S_PC_9 + 
0.06066746722872 * S_Year_Birth ;
665782    +   H17  =     0.06122966741514 * S_PC_1  +     0.32630558798132 * S_PC_10
665783    +          +     0.08830070784719 * S_PC_11  +    -0.09169481140616 * S_PC_12
665784    +          +      0.3549320678826 * S_PC_13  +    -0.21931123167669 * S_PC_14
665785    +          +    -0.18036776149727 * S_PC_15  +    -0.49613822738605 * S_PC_16
665786    +          +     0.04573861907833 * S_PC_17  +     0.52087249472311 * S_PC_2
665787    +          +     0.37349952917867 * S_PC_3  +    -0.00417038828693 * S_PC_4
665788    +          +     0.31654515840261 * S_PC_5  +    -0.14807890224435 * S_PC_6
665789    +          +    -0.27409057895757 * S_PC_7  +    -0.29271037818625 * S_PC_8
665790    +          +     0.14973034409075 * S_PC_9  +     0.30703675352745 *
665791    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.06122966741514 * S_PC_1 + 0.32630558798132 * S_PC_10 + 
0.08830070784719 * S_PC_11 + -0.09169481140616 * S_PC_12 + 0.3549320678826 * S_PC_13 + 
-0.21931123167669 * S_PC_14 + -0.18036776149727 * S_PC_15 + -0.49613822738605 * S_PC_16 + 
0.04573861907833 * S_PC_17 + 0.52087249472311 * S_PC_2 + 0.37349952917867 * S_PC_3 + 
-0.00417038828693 * S_PC_4 + 0.31654515840261 * S_PC_5 + -0.14807890224435 * S_PC_6 + 
-0.27409057895757 * S_PC_7 + -0.29271037818625 * S_PC_8 + 0.14973034409075 * S_PC_9 + 
0.30703675352745 * S_Year_Birth ;
665792    +   H11  =    -0.90910910494332 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.90910910494332 + H11 ;
665793    +   H12  =     1.11114331269115 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.11114331269115 + H12 ;
665794    +   H13  =    -0.39557973491761 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.39557973491761 + H13 ;
665795    +   H14  =     0.11097638588139 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.11097638588139 + H14 ;
665796    +   H15  =    -1.45152011393762 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.45152011393762 + H15 ;
665797    +   H16  =     0.80027129172396 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.80027129172396 + H16 ;
665798    +   H17  =     0.54203925713353 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.54203925713353 + H17 ;
665799    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
665800    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
665801    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
665802    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
665803    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
665804    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
665805    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
665806    +END;
MPRINT(EM_DIAGRAM):   END;
665807    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
665808    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
665809    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
665810    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
665811    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
665812    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
665813    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
665814    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
665815    +END;
MPRINT(EM_DIAGRAM):   END;
665816    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665817    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
665818    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665819    +
665820    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
665821    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
665822    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
665823    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
665824    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
665825    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
665826    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
665827    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
665828    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
665829    +end;
MPRINT(EM_DIAGRAM):   end;
665830    +else do;
MPRINT(EM_DIAGRAM):   else do;
665831    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
665832    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
665833    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
665834    +   end;
MPRINT(EM_DIAGRAM):   end;
665835    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
665836    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
665837    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
665838    +   end;
MPRINT(EM_DIAGRAM):   end;
665839    +   else do;
MPRINT(EM_DIAGRAM):   else do;
665840    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
665841    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
665842    +   end;
MPRINT(EM_DIAGRAM):   end;
665843    +end;
MPRINT(EM_DIAGRAM):   end;
665844    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
665845    +   P_DepVar1  =    -1.36227730329636 * H11  +    -1.56591009171383 * H12
665846    +          +    -1.51595469939043 * H13  +    -2.11517380958242 * H14
665847    +          +     1.49134383210948 * H15  +     0.83564080974417 * H16
665848    +          +    -1.81961134224285 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.36227730329636 * H11 + -1.56591009171383 * H12 + 
-1.51595469939043 * H13 + -2.11517380958242 * H14 + 1.49134383210948 * H15 + 0.83564080974417 
* H16 + -1.81961134224285 * H17 ;
665849    +   P_DepVar1  =    -2.25483055601613 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.25483055601613 + P_DepVar1 ;
665850    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
665851    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
665852    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
665853    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
665854    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
665855    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
665856    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
665857    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
665858    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
665859    +END;
MPRINT(EM_DIAGRAM):   END;
665860    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
665861    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
665862    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
665863    +END;
MPRINT(EM_DIAGRAM):   END;
665864    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
665865    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
665866    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
665867    +END;
MPRINT(EM_DIAGRAM):   END;
665868    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
665869    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
665870    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
665871    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
665872    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
665873    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
665874    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
665875    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665876    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
665877    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665878    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
665879    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
665880    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
665881    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
665882    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
665883    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
665884    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
665885    +END;
MPRINT(EM_DIAGRAM):   END;
665886    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
665887    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
665888    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
665889    +drop
665890    +H11
665891    +H12
665892    +H13
665893    +H14
665894    +H15
665895    +H16
665896    +H17
665897    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
665898    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
665899     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
665900     quit;
665901     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
665902     filename emflow
665902   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
665903     *------------------------------------------------------------*;
665904     * Neural12: Scoring VALIDATE data;
665905     *------------------------------------------------------------*;
665906     data EMWS8.Neural12_VALIDATE
665907     / view=EMWS8.Neural12_VALIDATE
665908     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_VALIDATE / view=EMWS8.Neural12_VALIDATE ;
665909     set EMWS8.PRINCOMP_VALIDATE
665910     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
665911     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural12\EMFLOWSCORE.sas.
665912    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
665913    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
665914    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
665915    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
665916    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
665917    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
665918    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
665919    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
665920    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
665921    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
665922    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
665923    +LENGTH _WARN_ $4
665924    +      F_DepVar  $ 12
665925    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
665926    +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
665927    +
665928    +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
665929    +
665930    +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
665931    +
665932    +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
665933    +
665934    +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
665935    +
665936    +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
665937    +
665938    +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
665939    +
665940    +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
665941    +
665942    +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
665943    +
665944    +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
665945    +
665946    +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
665947    +
665948    +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
665949    +
665950    +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
665951    +
665952    +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
665953    +
665954    +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
665955    +
665956    +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
665957    +
665958    +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
665959    +
665960    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
665961    +
665962    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
665963    +
665964    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
665965    +
665966    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
665967    +
665968    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
665969    +
665970    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
665971    +
665972    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
665973    +
665974    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
665975    +
665976    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
665977    +
665978    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
665979    +
665980    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
665981    +
665982    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
665983    +
665984    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
665985    +
665986    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
665987    +
665988    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
665989    +
665990    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
665991    +
665992    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
665993    +*** Checking missing input Interval
665994    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
665995    +
665996    +IF NMISS(
665997    +   PC_1 ,
665998    +   PC_10 ,
665999    +   PC_11 ,
666000    +   PC_12 ,
666001    +   PC_13 ,
666002    +   PC_14 ,
666003    +   PC_15 ,
666004    +   PC_16 ,
666005    +   PC_17 ,
666006    +   PC_2 ,
666007    +   PC_3 ,
666008    +   PC_4 ,
666009    +   PC_5 ,
666010    +   PC_6 ,
666011    +   PC_7 ,
666012    +   PC_8 ,
666013    +   PC_9 ,
666014    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
666015    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
666016    +
666017    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
666018    +END;
MPRINT(EM_DIAGRAM):   END;
666019    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666020    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
666021    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666022    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
666023    +   S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
666024    +   S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
666025    +   S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
666026    +   S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
666027    +   S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
666028    +   S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
666029    +   S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
666030    +   S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
666031    +   S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
666032    +   S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
666033    +   S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
666034    +   S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
666035    +   S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
666036    +   S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
666037    +   S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
666038    +   S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
666039    +   S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
666040    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
666041    +END;
MPRINT(EM_DIAGRAM):   END;
666042    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666043    +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
666044    +   ELSE S_PC_1  = -3.5843560363112E-15 +     0.29892710740321 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.5843560363112E-15 + 0.29892710740321 * PC_1 ;
666045    +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
666046    +   ELSE S_PC_10  = -6.2658190129358E-15 +     0.82174710410461 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.2658190129358E-15 + 0.82174710410461 * PC_10 ;
666047    +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
666048    +   ELSE S_PC_11  =  5.2827852337662E-15 +     0.85633436658082 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 5.2827852337662E-15 + 0.85633436658082 * PC_11 ;
666049    +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
666050    +   ELSE S_PC_12  = -4.1238610853835E-15 +     0.88809669446626 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -4.1238610853835E-15 + 0.88809669446626 * PC_12 ;
666051    +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
666052    +   ELSE S_PC_13  =  1.5294467014806E-15 +     0.89679439630496 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.5294467014806E-15 + 0.89679439630496 * PC_13 ;
666053    +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
666054    +   ELSE S_PC_14  = -6.2595704915953E-15 +     0.90338385596507 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.2595704915953E-15 + 0.90338385596507 * PC_14 ;
666055    +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
666056    +   ELSE S_PC_15  = -5.5154137020119E-16 +     0.92995263572302 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -5.5154137020119E-16 + 0.92995263572302 * PC_15 ;
666057    +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
666058    +   ELSE S_PC_16  = -2.6453177008422E-15 +      0.9512169845353 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.6453177008422E-15 + 0.9512169845353 * PC_16 ;
666059    +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
666060    +   ELSE S_PC_17  =   3.641923430911E-15 +     0.99885948412688 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 3.641923430911E-15 + 0.99885948412688 * PC_17 ;
666061    +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
666062    +   ELSE S_PC_2  =  6.4913163867762E-15 +      0.5437297154044 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4913163867762E-15 + 0.5437297154044 * PC_2 ;
666063    +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
666064    +   ELSE S_PC_3  =  2.2868642839817E-15 +     0.55367105026453 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2868642839817E-15 + 0.55367105026453 * PC_3 ;
666065    +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
666066    +   ELSE S_PC_4  = -4.0268214595882E-15 +     0.63693441603523 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -4.0268214595882E-15 + 0.63693441603523 * PC_4 ;
666067    +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
666068    +   ELSE S_PC_5  = -4.7373321816097E-15 +     0.66668512927319 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.7373321816097E-15 + 0.66668512927319 * PC_5 ;
666069    +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
666070    +   ELSE S_PC_6  =  1.5652933820513E-15 +     0.70536143636182 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5652933820513E-15 + 0.70536143636182 * PC_6 ;
666071    +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
666072    +   ELSE S_PC_7  =  3.7827428793697E-16 +     0.74929815039837 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 3.7827428793697E-16 + 0.74929815039837 * PC_7 ;
666073    +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
666074    +   ELSE S_PC_8  = -2.4158031671174E-15 +     0.77165002143369 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.4158031671174E-15 + 0.77165002143369 * PC_8 ;
666075    +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
666076    +   ELSE S_PC_9  = -4.0982774857475E-15 +       0.808303499885 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -4.0982774857475E-15 + 0.808303499885 * PC_9 ;
666077    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
666078    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
666079    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
666080    +END;
MPRINT(EM_DIAGRAM):   END;
666081    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666082    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
666083    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666084    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
666085    +   H11  =    -0.50754467864853 * S_PC_1  +     -0.0096262574398 * S_PC_10
666086    +          +     0.14323564519461 * S_PC_11  +     0.41688732719144 * S_PC_12
666087    +          +    -0.23105960395492 * S_PC_13  +    -0.13983457141569 * S_PC_14
666088    +          +    -0.09058252871003 * S_PC_15  +     0.13317372705745 * S_PC_16
666089    +          +    -0.06281696709893 * S_PC_17  +     0.13346779435623 * S_PC_2
666090    +          +     0.19827524013856 * S_PC_3  +    -0.49078002762886 * S_PC_4
666091    +          +     0.28666139703857 * S_PC_5  +    -0.10378052990351 * S_PC_6
666092    +          +     -0.1968548602707 * S_PC_7  +    -0.45560761696887 * S_PC_8
666093    +          +     -0.8114558504722 * S_PC_9  +    -0.09343131455845 *
666094    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.50754467864853 * S_PC_1 + -0.0096262574398 * S_PC_10 + 
0.14323564519461 * S_PC_11 + 0.41688732719144 * S_PC_12 + -0.23105960395492 * S_PC_13 + 
-0.13983457141569 * S_PC_14 + -0.09058252871003 * S_PC_15 + 0.13317372705745 * S_PC_16 + 
-0.06281696709893 * S_PC_17 + 0.13346779435623 * S_PC_2 + 0.19827524013856 * S_PC_3 + 
-0.49078002762886 * S_PC_4 + 0.28666139703857 * S_PC_5 + -0.10378052990351 * S_PC_6 + 
-0.1968548602707 * S_PC_7 + -0.45560761696887 * S_PC_8 + -0.8114558504722 * S_PC_9 + 
-0.09343131455845 * S_Year_Birth ;
666095    +   H12  =    -0.81573558098063 * S_PC_1  +     0.24773437846044 * S_PC_10
666096    +          +     0.13533997706716 * S_PC_11  +     0.75544268766517 * S_PC_12
666097    +          +     0.17183445519664 * S_PC_13  +      0.1777896181105 * S_PC_14
666098    +          +     0.05706870679047 * S_PC_15  +    -0.46807694963409 * S_PC_16
666099    +          +    -0.25190451727153 * S_PC_17  +    -0.08258276412231 * S_PC_2
666100    +          +    -0.36441875817422 * S_PC_3  +    -0.39012839645629 * S_PC_4
666101    +          +     0.04722996979342 * S_PC_5  +     0.43416394096325 * S_PC_6
666102    +          +     0.19725231550558 * S_PC_7  +     0.21295253069805 * S_PC_8
666103    +          +    -0.60545100325243 * S_PC_9  +    -0.15355095095987 *
666104    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H12 = -0.81573558098063 * S_PC_1 + 0.24773437846044 * S_PC_10 + 
0.13533997706716 * S_PC_11 + 0.75544268766517 * S_PC_12 + 0.17183445519664 * S_PC_13 + 
0.1777896181105 * S_PC_14 + 0.05706870679047 * S_PC_15 + -0.46807694963409 * S_PC_16 + 
-0.25190451727153 * S_PC_17 + -0.08258276412231 * S_PC_2 + -0.36441875817422 * S_PC_3 + 
-0.39012839645629 * S_PC_4 + 0.04722996979342 * S_PC_5 + 0.43416394096325 * S_PC_6 + 
0.19725231550558 * S_PC_7 + 0.21295253069805 * S_PC_8 + -0.60545100325243 * S_PC_9 + 
-0.15355095095987 * S_Year_Birth ;
666105    +   H13  =    -0.93981943955208 * S_PC_1  +    -0.11850321613711 * S_PC_10
666106    +          +    -0.74225741575618 * S_PC_11  +    -0.81034258744012 * S_PC_12
666107    +          +     0.21537464928397 * S_PC_13  +    -0.26677965640501 * S_PC_14
666108    +          +     0.30177037009096 * S_PC_15  +    -0.26947681668456 * S_PC_16
666109    +          +     0.23123019737325 * S_PC_17  +     0.15751211794885 * S_PC_2
666110    +          +     0.33175469761366 * S_PC_3  +     0.39514352786101 * S_PC_4
666111    +          +      0.7139227368597 * S_PC_5  +      0.0167014877178 * S_PC_6
666112    +          +    -0.07449310891132 * S_PC_7  +    -0.05509910154765 * S_PC_8
666113    +          +     0.16873655257606 * S_PC_9  +     0.00245043420593 *
666114    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H13 = -0.93981943955208 * S_PC_1 + -0.11850321613711 * S_PC_10 + 
-0.74225741575618 * S_PC_11 + -0.81034258744012 * S_PC_12 + 0.21537464928397 * S_PC_13 + 
-0.26677965640501 * S_PC_14 + 0.30177037009096 * S_PC_15 + -0.26947681668456 * S_PC_16 + 
0.23123019737325 * S_PC_17 + 0.15751211794885 * S_PC_2 + 0.33175469761366 * S_PC_3 + 
0.39514352786101 * S_PC_4 + 0.7139227368597 * S_PC_5 + 0.0167014877178 * S_PC_6 + 
-0.07449310891132 * S_PC_7 + -0.05509910154765 * S_PC_8 + 0.16873655257606 * S_PC_9 + 
0.00245043420593 * S_Year_Birth ;
666115    +   H14  =    -0.12693194472066 * S_PC_1  +     0.60796576749185 * S_PC_10
666116    +          +    -0.34420896979597 * S_PC_11  +    -0.23537095833674 * S_PC_12
666117    +          +     0.89540868522943 * S_PC_13  +      -0.510842523862 * S_PC_14
666118    +          +     0.48567760328151 * S_PC_15  +     0.37897489203761 * S_PC_16
666119    +          +     0.05946905584596 * S_PC_17  +     0.14804032191862 * S_PC_2
666120    +          +     0.03156879517121 * S_PC_3  +     0.20866387553468 * S_PC_4
666121    +          +    -0.11678944684508 * S_PC_5  +    -0.28222346677273 * S_PC_6
666122    +          +    -0.07076603764251 * S_PC_7  +    -0.08885981193922 * S_PC_8
666123    +          +    -0.17344366575651 * S_PC_9  +    -0.10422043273594 *
666124    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H14 = -0.12693194472066 * S_PC_1 + 0.60796576749185 * S_PC_10 + 
-0.34420896979597 * S_PC_11 + -0.23537095833674 * S_PC_12 + 0.89540868522943 * S_PC_13 + 
-0.510842523862 * S_PC_14 + 0.48567760328151 * S_PC_15 + 0.37897489203761 * S_PC_16 + 
0.05946905584596 * S_PC_17 + 0.14804032191862 * S_PC_2 + 0.03156879517121 * S_PC_3 + 
0.20866387553468 * S_PC_4 + -0.11678944684508 * S_PC_5 + -0.28222346677273 * S_PC_6 + 
-0.07076603764251 * S_PC_7 + -0.08885981193922 * S_PC_8 + -0.17344366575651 * S_PC_9 + 
-0.10422043273594 * S_Year_Birth ;
666125    +   H15  =    -0.18818846792217 * S_PC_1  +     0.15980122155848 * S_PC_10
666126    +          +    -0.29415615035488 * S_PC_11  +     0.22673434231766 * S_PC_12
666127    +          +     -0.4367544144709 * S_PC_13  +    -0.27215638165388 * S_PC_14
666128    +          +     0.21516860661944 * S_PC_15  +    -0.33073452493248 * S_PC_16
666129    +          +    -0.12566064186043 * S_PC_17  +    -0.66303106656578 * S_PC_2
666130    +          +     0.15398704463012 * S_PC_3  +     0.45620897750328 * S_PC_4
666131    +          +     0.21146328236808 * S_PC_5  +     0.09789059959814 * S_PC_6
666132    +          +    -0.12207231873189 * S_PC_7  +    -0.02692016155566 * S_PC_8
666133    +          +     0.00827837096636 * S_PC_9  +     0.24843752055347 *
666134    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H15 = -0.18818846792217 * S_PC_1 + 0.15980122155848 * S_PC_10 + 
-0.29415615035488 * S_PC_11 + 0.22673434231766 * S_PC_12 + -0.4367544144709 * S_PC_13 + 
-0.27215638165388 * S_PC_14 + 0.21516860661944 * S_PC_15 + -0.33073452493248 * S_PC_16 + 
-0.12566064186043 * S_PC_17 + -0.66303106656578 * S_PC_2 + 0.15398704463012 * S_PC_3 + 
0.45620897750328 * S_PC_4 + 0.21146328236808 * S_PC_5 + 0.09789059959814 * S_PC_6 + 
-0.12207231873189 * S_PC_7 + -0.02692016155566 * S_PC_8 + 0.00827837096636 * S_PC_9 + 
0.24843752055347 * S_Year_Birth ;
666135    +   H16  =     0.17834519341997 * S_PC_1  +    -0.32824376267138 * S_PC_10
666136    +          +     0.02772071370421 * S_PC_11  +      0.3134819415225 * S_PC_12
666137    +          +    -0.34724682137837 * S_PC_13  +     0.19598007494228 * S_PC_14
666138    +          +     0.31968916312556 * S_PC_15  +    -0.03617557970689 * S_PC_16
666139    +          +    -0.32507715963836 * S_PC_17  +    -0.05923539655778 * S_PC_2
666140    +          +     0.36180293380006 * S_PC_3  +    -0.00711502811187 * S_PC_4
666141    +          +     -0.4202174009875 * S_PC_5  +    -0.20731677826254 * S_PC_6
666142    +          +     -0.0412241308518 * S_PC_7  +     0.64326432309663 * S_PC_8
666143    +          +     0.42325597812682 * S_PC_9  +     0.06066746722872 *
666144    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H16 = 0.17834519341997 * S_PC_1 + -0.32824376267138 * S_PC_10 + 
0.02772071370421 * S_PC_11 + 0.3134819415225 * S_PC_12 + -0.34724682137837 * S_PC_13 + 
0.19598007494228 * S_PC_14 + 0.31968916312556 * S_PC_15 + -0.03617557970689 * S_PC_16 + 
-0.32507715963836 * S_PC_17 + -0.05923539655778 * S_PC_2 + 0.36180293380006 * S_PC_3 + 
-0.00711502811187 * S_PC_4 + -0.4202174009875 * S_PC_5 + -0.20731677826254 * S_PC_6 + 
-0.0412241308518 * S_PC_7 + 0.64326432309663 * S_PC_8 + 0.42325597812682 * S_PC_9 + 
0.06066746722872 * S_Year_Birth ;
666145    +   H17  =     0.06122966741514 * S_PC_1  +     0.32630558798132 * S_PC_10
666146    +          +     0.08830070784719 * S_PC_11  +    -0.09169481140616 * S_PC_12
666147    +          +      0.3549320678826 * S_PC_13  +    -0.21931123167669 * S_PC_14
666148    +          +    -0.18036776149727 * S_PC_15  +    -0.49613822738605 * S_PC_16
666149    +          +     0.04573861907833 * S_PC_17  +     0.52087249472311 * S_PC_2
666150    +          +     0.37349952917867 * S_PC_3  +    -0.00417038828693 * S_PC_4
666151    +          +     0.31654515840261 * S_PC_5  +    -0.14807890224435 * S_PC_6
666152    +          +    -0.27409057895757 * S_PC_7  +    -0.29271037818625 * S_PC_8
666153    +          +     0.14973034409075 * S_PC_9  +     0.30703675352745 *
666154    +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H17 = 0.06122966741514 * S_PC_1 + 0.32630558798132 * S_PC_10 + 
0.08830070784719 * S_PC_11 + -0.09169481140616 * S_PC_12 + 0.3549320678826 * S_PC_13 + 
-0.21931123167669 * S_PC_14 + -0.18036776149727 * S_PC_15 + -0.49613822738605 * S_PC_16 + 
0.04573861907833 * S_PC_17 + 0.52087249472311 * S_PC_2 + 0.37349952917867 * S_PC_3 + 
-0.00417038828693 * S_PC_4 + 0.31654515840261 * S_PC_5 + -0.14807890224435 * S_PC_6 + 
-0.27409057895757 * S_PC_7 + -0.29271037818625 * S_PC_8 + 0.14973034409075 * S_PC_9 + 
0.30703675352745 * S_Year_Birth ;
666155    +   H11  =    -0.90910910494332 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.90910910494332 + H11 ;
666156    +   H12  =     1.11114331269115 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.11114331269115 + H12 ;
666157    +   H13  =    -0.39557973491761 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.39557973491761 + H13 ;
666158    +   H14  =     0.11097638588139 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.11097638588139 + H14 ;
666159    +   H15  =    -1.45152011393762 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.45152011393762 + H15 ;
666160    +   H16  =     0.80027129172396 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 0.80027129172396 + H16 ;
666161    +   H17  =     0.54203925713353 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.54203925713353 + H17 ;
666162    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
666163    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
666164    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
666165    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
666166    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
666167    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
666168    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
666169    +END;
MPRINT(EM_DIAGRAM):   END;
666170    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666171    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
666172    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
666173    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
666174    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
666175    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
666176    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
666177    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
666178    +END;
MPRINT(EM_DIAGRAM):   END;
666179    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666180    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
666181    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666182    +
666183    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
666184    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
666185    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
666186    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
666187    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
666188    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
666189    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
666190    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
666191    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
666192    +end;
MPRINT(EM_DIAGRAM):   end;
666193    +else do;
MPRINT(EM_DIAGRAM):   else do;
666194    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
666195    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
666196    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
666197    +   end;
MPRINT(EM_DIAGRAM):   end;
666198    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
666199    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
666200    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
666201    +   end;
MPRINT(EM_DIAGRAM):   end;
666202    +   else do;
MPRINT(EM_DIAGRAM):   else do;
666203    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
666204    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
666205    +   end;
MPRINT(EM_DIAGRAM):   end;
666206    +end;
MPRINT(EM_DIAGRAM):   end;
666207    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
666208    +   P_DepVar1  =    -1.36227730329636 * H11  +    -1.56591009171383 * H12
666209    +          +    -1.51595469939043 * H13  +    -2.11517380958242 * H14
666210    +          +     1.49134383210948 * H15  +     0.83564080974417 * H16
666211    +          +    -1.81961134224285 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.36227730329636 * H11 + -1.56591009171383 * H12 + 
-1.51595469939043 * H13 + -2.11517380958242 * H14 + 1.49134383210948 * H15 + 0.83564080974417 
* H16 + -1.81961134224285 * H17 ;
666212    +   P_DepVar1  =    -2.25483055601613 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.25483055601613 + P_DepVar1 ;
666213    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
666214    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
666215    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
666216    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
666217    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
666218    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
666219    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
666220    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
666221    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
666222    +END;
MPRINT(EM_DIAGRAM):   END;
666223    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
666224    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
666225    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
666226    +END;
MPRINT(EM_DIAGRAM):   END;
666227    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
666228    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
666229    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
666230    +END;
MPRINT(EM_DIAGRAM):   END;
666231    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
666232    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
666233    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
666234    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
666235    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
666236    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
666237    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
666238    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666239    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
666240    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
666241    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
666242    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
666243    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
666244    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
666245    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
666246    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
666247    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
666248    +END;
MPRINT(EM_DIAGRAM):   END;
666249    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
666250    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
666251    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
666252    +drop
666253    +H11
666254    +H12
666255    +H13
666256    +H14
666257    +H15
666258    +H16
666259    +H17
666260    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
666261    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
666262     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL12_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
666263     quit;
666264     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
666265     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
666266     * Neural12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural12: Computing metadata for TRAIN data;
666267     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural12_TRAIN out=WORK.M0U8X51P noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0U8X51P;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0U8X51P(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0U8X51P;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0U8X51P;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M311BXJ9 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M311BXJ9;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M311BXJ9;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HTHP2J(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M311BXJ9;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M311BXJ9;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M311BXJ9;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M311BXJ9;
MPRINT(EMADVISECOLUMNS):   set WORK.M311BXJ9;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural12";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural12";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural12";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
666579     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
666580     set EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO;
666581     where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
666582     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL12_EMINFO.
      WHERE (DATA='Neural12') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

666583     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural12_EMINFO;
666584     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
666585     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
666586     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
666590     run;
666591     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
666592     set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural12_EMINFO WORK.MODELTEMP_INFO;
666593     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666594     proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural12_EMINFO NOTHREADS;
666595     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666596     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666597     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
666598     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666599     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666600     proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
666601     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666602     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL12_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

666603     data EMWS8.Neural12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural12_EMINFO;
666604     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
666605     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
666606     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL12_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

666607     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
666608     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
666609     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
666610     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL12_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.NEURAL12_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
