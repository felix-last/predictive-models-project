MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.40 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                16.40 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O11D31H4 "C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O11D31H4 new;
MPRINT(EM_DIAGRAM):   run;
873627     %let EMEXCEPTIONSTRING=;
873628     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
873629     * SCORE: SVM4;
MPRINT(EM_DIAGRAM):   * SCORE: SVM4;
873630     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
873631     %let EM_ACTION = SCORE;
873632     %let syscc = 0;
873633     %macro main;
873634     
873635        filename temp catalog 'sashelp.emmodl.svm_macros.source';
873636        %include temp;
873637        filename temp;
873638        %SetProperties;
873639        %if %upcase(&EM_ACTION) = CREATE %then %do;
873640            filename temp catalog 'sashelp.emmodl.svm_create.source';
873641            %include temp;
873642            filename temp;
873643            %create;
873644        %end;
873645        %else
873646        %if %upcase(&EM_ACTION) = TRAIN %then %do;
873647            filename temp catalog 'sashelp.emmodl.svm_train.source';
873648            %include temp;
873649            filename temp;
873650            %train;
873651        %end;
873652        %else
873653        %if %upcase(&EM_ACTION) = REPORT %then %do;
873654            filename temp catalog 'sashelp.emmodl.svm_report.source';
873655            %include temp;
873656            filename temp;
873657            %report;
873658        %end;
873659     
873660     %mend main;
873661     
873662     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
873664    +%macro SetProperties;
873665    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
873666    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
873667    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
873668    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
873669    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
873670    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
873671    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
873672    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
873673    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
873674    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
873675    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
873676    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
873677    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
873678    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
873679    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
873680    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
873681    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
873682    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
873683    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
873684    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
873685    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
873686    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
873687    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
873688    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
873689    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
873690    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
873691    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
873692    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
873693    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
873694    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
873695    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
873696    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
873697    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
873698    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
873699    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
873700    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
873701    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
873702    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
873703    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
873704    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
873705    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
873706    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
873707    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
873708    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
873709    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
873710    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
873711    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
873712    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
873713    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
873714    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
873716    +%mend SetProperties;
873719    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
873721    +  %local emclassout emvarout;
873723    +   proc dmdb batch dmdbcat= _emdmdb
873725    +   %if &out ne 0 %then %do ;
873726    +       data=&indata out= _emdmdb &emclassout &emvarout;
873727    +   %end ;
873728    +   %else %do ;
873729    +       data=&indata &emclassout &emvarout;
873730    +   %end ;
873732    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
873733    +   %if %em_class   ne  %then %do ;
873734    +       class %EM_CLASS;
873735    +   %end ;
873736    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
873737    +   %if %em_target ne %then %do ;
873738    +          target %em_target ;
873739    +   %end ;
873740    +   run ;
873741    +%mend make_dmdb;
873744    +%macro svm_training(indata=,
873745    +                    task=,
873746    +                    classtask=,
873747    +                    method=,
873748    +                    outest =,
873749    +                    outclass =,
873750    +                    outfit =,
873751    +                    isValidationSet =,
873752    +                    testdata =,
873753    +                    testout =,
873754    +                    validSource=,
873755    +                    usecgbydefault=
873756    +                    );
873758    +%make_dmdb(indata=&indata, out=1);
873760    +options debug="nlpitermsg=2";
873762    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
873763    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
873764    +ods output tun_crt = &EM_USER_TUNINGCRIT;
873765    +%end;
873767    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
873768    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
873769    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
873770    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
873772    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
873773    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
873774    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
873775    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
873778    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
873779    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
873780    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
873781    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
873783    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
873784    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
873785    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
873786    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
873789    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
873790    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
873791    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
873792    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
873795    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
873796    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
873797    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
873798    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
873799    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
873800    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
873801    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
873802    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
873803    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
873804    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
873805    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
873806    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
873810    +proc svm data= _emdmdb
873811    +         dmdbcat= _emdmdb
873812    +         nomonitor
873813    +         outfit= &outfit
873814    +         outclass= &outclass
873815    +         outest= &outest
873816    +         out = _outtrain
873817    +         maxiter = &_PROPERTY_MAXITER
873818    +         maxfunc = &_PROPERTY_MAXFUNC
873819    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
873820    +         gconv =   &_PROPERTY_GCONV
873821    +         absgconv = &_PROPERTY_ABSGCONV
873822    +         xconv =   &_PROPERTY_XCONV
873823    +         absxconv = &_PROPERTY_ABSXCONV
873825    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
873826    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
873827    +             xscale
873828    +         %end;
873829    +         %else %do;
873830    +             noscale
873831    +         %end;
873832    +    %end;
873833    +    %if &task eq CLASSIFICATION %then %do;
873834    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
873835    +         method= &method
873836    +        %end;
873837    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
873838    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
873839    +        %end;
873840    +        %else %do;
873841    +         method= &EM_PROPERTY_METHOD
873842    +        %end;
873843    +    %end;
873844    +    %else %do;
873845    +         method= &method  task=&classtask
873846    +         /*%if &classtask eq EPS_REG %then %do; */
873847    +             esp=&_PROPERTY_EPSILON
873848    +         /*%end;*/
873849    +    %end;
873851    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
873852    +         kernel = &EM_PROPERTY_KERNEL
873853    +    %end;
873854    +    %else %do;
873855    +         kernel = Linear
873856    +    %end;
873858    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
873860    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
873861    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
873862    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
873863    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
873864    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
873865    +            tun = &EM_PROPERTY_TUNINGMETHOD
873866    +        %end;
873868    +    %end;
873870    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
873871    +         CV  = &EM_PROPERTY_CVMETHOD
873872    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
873873    +         fold = &EM_PROPERTY_CVFOLD
873874    +         %end;
873875    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
873876    +                testdata = &testdata
873877    +         %end;
873878    +    %end;
873880    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
873881    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
873882    +    %end;
873884    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
873885    +    &EM_PROPERTY_PRINTOPTION
873886    +    %end;
873888    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
873889    +    POPTHIS
873890    +    %end;
873891    +    ;
873892    +    var %EM_INPUT %EM_REJECTED;
873893    +    target %EM_TARGET;
873895    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
873897    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
873898    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
873899    +             by &_PROPERTY_TUN_C_BY
873900    +             ;
873901    +         %end;
873902    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
873903    +             C  &_PROPERTY_USERCVALUE ;
873904    +         %end;
873906    +     %end;
873907    +     %else %do;
873908    +           C  &_PROPERTY_USERCVALUE ;
873909    +     %end;
873912    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
873914    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
873915    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
873916    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
873917    +                  by &_PROPERTY_POLY_TUN_KP1_BY
873918    +                ;
873919    +             %end;
873920    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
873921    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
873922    +             %end;
873923    +          %end;
873924    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
873925    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
873926    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
873927    +                ;
873928    +              %end;
873929    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
873930    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
873931    +              %end;
873932    +           %end;
873933    +           %else %do;
873934    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
873935    +           %end;
873936    +    %end;
873938    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
873939    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
873940    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
873941    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
873942    +                  by &_PROPERTY_RBF_TUN_KP1_BY
873943    +                  ;
873944    +              %end;
873945    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
873946    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
873947    +              %end;
873948    +          %end;
873949    +          %else %do;
873950    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
873951    +          %end;
873952    +    %end;
873955    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
873957    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
873959    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
873960    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
873961    +                by &_PROPERTY_SGMD_TUN_KP1_BY
873962    +             ;
873963    +             %end;
873964    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
873965    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
873966    +             %end;
873968    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
873969    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
873970    +                by &_PROPERTY_SGMD_TUN_KP2_BY
873971    +             ;
873972    +             %end;
873973    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
873974    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
873975    +             %end;
873976    +          %end;
873977    +          %else %do;
873978    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
873979    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
873980    +          %end;
873981    +    %end;
873983    +run;
873984    +%TRAINENDLINE:
873985    +quit;
873986    +%mend svm_training;
873988    +%macro svm_score(indata=,
873989    +                 inest=,
873990    +                 infit=,
873991    +                 inclass=,
873992    +                 outindata=,
873993    +                 outscore=,
873994    +                 targetLevel=
873995    +                 );
873998    +%if &TargetLevel eq BINARY %then %do;
874000    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
874002    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
874003    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
874004    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
874005    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
874008    +%do %while(^ %sysfunc(fetch(&dsid)));
874009    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
874010    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
874011    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
874012    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
874013    +%end;
874015    +%let dsid = %sysfunc(close(&dsid));
874018    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
874019    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874021    +%do %while(^ %sysfunc(fetch(&dsid)));
874022    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
874023    +%end;
874024    +%let dsid = %sysfunc(close(&dsid));
874026    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
874027    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874029    +%do %while(^ %sysfunc(fetch(&dsid)));
874030    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
874031    +%end;
874032    +%let dsid = %sysfunc(close(&dsid));
874035    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
874036    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
874037    +run;
874039    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
874040    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /* from a part of %EM_MODEL() macro */
874042    +data &outscore(drop=_P);
874043    +      set  &outscore;
874044    +     if (_P_ < -600) then _p =0;
874045    +     else _P = 1/(1+EXP((-1)*(_P_)));
874047    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
874048    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874049    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
874051    +%do %while(^ %sysfunc(fetch(&dsid)));
874052    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
874053    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
874054    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
874055    +       &P_Var = _P;
874056    +   %end;
874057    +   %else %do;
874058    +       &P_Var = 1 - _P;
874059    +       %let targetNonEvent = &P_LEVEL;
874060    +   %end;
874061    +%end;
874062    +%let dsid = %sysfunc(close(&dsid));
874064    +%include resifref;
874066    +run;
874068    +filename resifref;
874070    +%end; /* the end of if - targetlevel eq binary */
874071    +%else %do;
874073    +/* ----     interval target  ------ */
874075    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
874076    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874078    +%do %while(^ %sysfunc(fetch(&dsid)));
874079    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
874080    +%end;
874081    +%let dsid = %sysfunc(close(&dsid));
874083    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
874084    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874086    +%do %while(^ %sysfunc(fetch(&dsid)));
874087    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
874088    +%end;
874090    +%let dsid = %sysfunc(close(&dsid));
874092    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
874093    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
874094    +run;
874096    +%end; /* end of targetlevel eq interval */
874099    +%mend svm_score;
874102    +%macro makeSVMFitStatDs();
874104    +data &EM_USER_SVMFITDS;
874105    +     set &EM_USER_SVMFITSTAT;
874106    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias, noquote))";
874107    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par2, noquote))";
874108    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par3, noquote))";
874109    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par, noquote))";
874110    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1, noquote))";
874111    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_margin, noquote))";
874112    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev, noquote))";
874113    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv, noquote))";
874114    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv, noquote))";
874115    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv, noquote))";
874116    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs, noquote))";
874117    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv, noquote))";
874118    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ntrain, noquote))";
874119    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev, noquote))";
874120    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw, noquote))";
874121    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj, noquote))";
874122    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_radius, noquote))";
874123    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc, noquote))";
874124    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom, noquote))";
874125    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim, noquote))";
874126    +    if _TYPE_ ='_ACCTAB_' then delete;
874127    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
874128    +      _BIAS_= _K_PAR_;
874129    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
874130    +    %end;
874131    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
874132    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
874133    +    %end;
874134    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
874135    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
874136    +    %end;
874137    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
874138    +      DROP _K_PAR3_  _L1_;
874139    +    %end;
874140    +run;
874142    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
874143    +run;
874145    +data &EM_USER_SVMFITDS;
874146    +     set &EM_USER_SVMFITDS;
874147    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))";
874148    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
874149    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat, noquote))";
874150    +     Rename COL1 = Train;
874151    +     if _NAME_ = '_ACCU_' then delete;
874152    +run;
874154    +%mend makeSVMFitStatDs;
874156    +%macro svm_fitstat(validSource=);
874158    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
874159    +            %if &_validSource= VALIDSET %then %do;
874160    +                validDs=work._tmp_scored_test,
874161    +                testDs=,
874162    +            %end;
874163    +            %else %if &_validSource= TESTSET %then %do;
874164    +                validDs=,
874165    +                testDs=work._tmp_scored_test,
874166    +            %end;
874167    +            decdata=&EM_DEC_DECDATA,
874168    +            decmeta=&EM_DEC_DECMETA,
874169    +            freqvar=, df=,
874170    +            outfit=&EM_DATA_EMOUTFIT);
874172    +data &EM_DATA_EMOUTFIT;
874173    +     set &EM_DATA_EMOUTFIT;
874174    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_    _SBC_; /* Because of DF */
874175    +run;
874176    +%mend svm_fitstat;
874178    +/*---------------------------------------------------------------------------------------
874179    +   OUTEST data set
874181    +                                                       APRTMNT_  APRTMNT_   TELIND_   TELIND_
874182    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_        2_
874184    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391   0.97609
874185    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280   0.15280
874186    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778  -0.07311
874188    +=-------------------------------------------------------------------------------------*/
874189    +/* this is not used, generate score code directly for the case of linear svm */
874190    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=, Residual=);
874192    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
874194    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
874195    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
874196    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
874197    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
874198    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
874200    +%do %while(^ %sysfunc(fetch(&dsid)));
874201    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
874202    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
874203    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
874204    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
874205    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
874206    +%end;
874207    +%let dsid = %sysfunc(close(&dsid));
874209    +data _cmeta;
874210    +    set &ColumnsMeta;
874211    +    NAME = upcase(strip(NAME));
874212    +run;
874214    +data _tmpclass;
874215    +       set &outclass;
874216    +   _VAR_ = upcase(strip(_VAR_));
874217    +run;
874219    +proc sql;
874220    +create table _outclass as
874221    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
874222    +  from  _tmpclass, _cmeta
874223    +  where _tmpclass._VAR_ = _cmeta.NAME;
874224    +run;
874226    +data _outclass;
874227    +    set _outclass;
874228    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
874229    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
874230    +run;
874231    +data _meands;
874232    +    set &outest;
874233    +    if _TYPE_='_MEAN_';
874234    +run;
874236    +/*
874237    +data _null_;
874238    +    set &outest;
874239    +    if _TYPE_='_PARMS_';
874240    +    call symput('bias', _STDEV_ );
874241    +    call symput('intercept', _MEAN_ );
874242    +run;
874243    +*/
874245    +filename  _File_ "&File";
874246    +data _null_;
874247    +    FILE _File_;
874248    +    length _line $500;
874249    +    drop _line;
874251    +    put ' ';
874252    +    put '/*-------------------------------------------------*/';
874253    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
874254    +    put '/*-------------------------------------------------*/';
874255    +    put ' ';
874257    +    put 'length _warn_ $ 4;';
874258    +    put 'label _warn_ = "Warnings";';
874259    +    put 'length _svm_uname $32;';
874260    +    put 'DROP _svm_uname ;';
874262    +  dsid = open("work._outclass");
874263    +    if dsid then do;
874264    +          oldvname ='';
874265    +          do while(not fetch(dsid));
874266    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
874267    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
874268    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
874269    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
874270    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
874271    +             *put 'vtype =' vtype;
874272    +             *put 'vformat=' vformat;
874274    +             if oldname ne vname then do;
874275    +                 if vtype = 'N' then do;
874276    +                     if vformat eq ' ' then do;
874277    +                        put '_svm_uname = put(' vname ', Best12.);';
874278    +                     end; else do;
874279    +                        put '_svm_uname = put(' vname ',' vformat ');';
874280    +                     end;
874281    +                  end;
874282    +                  else do;
874283    +                     if vformat eq ' ' then do;
874284    +                        put '_svm_uname = ' vname ' ;';
874285    +                     end; else do;
874286    +                        put '_svm_uname = put(' vname ',' vformat ');';
874287    +                     end;
874288    +                  end;
874289    +                  put '%DMNORMIP(_svm_uname);';
874290    +              end; /* end of oldname ne vname */
874292    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
874293    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
874294    +              put _line;
874295    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname ' ;';
874296    +              oldname = vname;
874297    +          end;
874299    +     end;
874300    +rc=close(dsid);
874302    +dsid = open("&outest");
874303    +    if dsid then do;
874304    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues, noquote))"  "------ */";
874305    +          ncol = attrn(dsid, 'NVARS');
874306    +          do i=4 to ncol;
874307    +             vname = upcase(trim(left(varname(dsid,i))));
874308    +              do while(not fetch(dsid));
874309    +                  type = strip(getvarc(dsid,2));
874310    +                  select(type);
874311    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
874312    +                      when('_STDEV_') std  =  getvarn(dsid, i);
874313    +                      when('_PARMS_') coeff = getvarn(dsid, i);
874314    +                  otherwise;
874315    +                  end;
874316    +              end; /* end of do-while*/
874317    +              *put '+' coeff '*(' vname '-' mean ')/' std;
874318    +              if i=4 then  do; put '_P_ =(' coeff ; end;
874319    +              else if i=5 then do; put '+' coeff ');' ; end;
874320    +              else do;
874321    +                      tmpvar = '_TMPVAR'||strip(i);
874322    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
874323    +                      put 'else ' tmpvar '=' vname ';';
874324    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
874325    +                      put 'drop  ' tmpvar ';';
874326    +              end;
874327    +              rc=rewind(dsid);
874328    +         end; /* end of  do i=6 to &nvars; */
874329    +         put ';';
874330    +     end;
874331    +    rc=close(dsid);
874332    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"  "------ */";
874334    +%if &TargetLevel eq BINARY %then %do;
874336    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
874337    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874338    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
874340    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
874341    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
874343    +%do %while(^ %sysfunc(fetch(&dsid)));
874344    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
874345    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
874346    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
874347    +       put " &P_Var = _P;";
874348    +   %end;
874349    +   %else %do;
874350    +       put " &P_Var = 1 - _P;";
874351    +   %let targetNonEvent = &P_LEVEL;
874352    +   %end;
874353    +%end;
874354    +%let dsid = %sysfunc(close(&dsid));
874356    +%if &Residual = Y %then %do;
874358    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"  "------ */";
874360    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
874361    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874362    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
874364    +   %do %while(^ %sysfunc(fetch(&dsid)));
874365    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
874366    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
874367    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
874368    +       put " &R_Var = 1 - _P;";
874369    +   %end;
874370    +   %else %do;
874371    +       put " &R_Var = 0 - (1 - _P);";
874372    +   %end;
874373    +   %end;
874374    +   %let dsid = %sysfunc(close(&dsid));
874375    +%end;
874376    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"  "------ */";
874378    +    put 'length _FORMAT_VAR $200;';
874379    +    put 'length _TARGNOR $%DMNORLEN; ';
874380    +    put 'DROP _FORMAT_VAR _TARGNOR;';
874381    +    %if &TargetFormat ne  %then %do;
874382    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
874383    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
874384    +    %end;
874385    +    %else %do;
874386    +    %if &TargetType  = N  %then %do;
874387    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
874388    +       %end;
874389    +       %else %do;
874390    +    put "_FORMAT_VAR= &TargetVar;";
874391    +       %end;
874392    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
874393    +    %end;
874395    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
874396    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
874397    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
874399    +    %do %while(^ %sysfunc(fetch(&dsid)));
874400    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
874401    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
874402    +        %let qF_var_label = %str(%"&F_var_label%");
874403    +    put "&F_var = _TARGNOR ;";
874404    +    put "label &F_var = &qF_Var_label;";
874405    +    %end;
874406    +    %let dsid = %sysfunc(close(&dsid));
874408    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"  "------ */";
874410    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
874411    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874412    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
874414    +%do %while(^%sysfunc(fetch(&dsid)));
874415    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
874416    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
874417    +   %let qI_var_label = %str(%"&I_var_label%");
874418    +   %let qTargetEvent = %str(%"&targetEvent%");
874419    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
874420    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
874421    +       put " else &I_Var  =  &qtargetNonEvent ;";
874422    +       put " label &I_var = &qI_var_label;";
874423    +%end;
874424    +%let dsid = %sysfunc(close(&dsid));
874426    +%end;  /* end of TargetLevel= Binary */
874428    +%else %if &TargetLevel eq INTERVAL %then %do;
874430    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
874431    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874432    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
874434    +%do %while(^ %sysfunc(fetch(&dsid)));
874435    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
874436    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
874437    +   %let qP_label = %str(%"&P_label%");
874438    +    put " &P_Var = _P_;";
874439    +    put " label &P_Var = &qP_label;";
874440    +%end;
874441    +%let dsid = %sysfunc(close(&dsid));
874443    +%if &Residual = Y %then %do;
874445    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"  "------ */";
874447    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
874448    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874449    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
874451    +   %do %while(^ %sysfunc(fetch(&dsid)));
874452    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
874453    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
874454    +     %let qR_label = %str(%"&R_label%");
874455    +       put " &R_Var = &TargetVar - &P_var;";
874456    +       put " label &R_Var = &qR_label;";
874457    +   %end;
874458    +   %let dsid = %sysfunc(close(&dsid));
874459    +%end;
874461    +%end;   /* end of TargetLevel= Interval */
874463    +  put "/*------------------------------------------------------------*/";
874464    +proc datasets lib=work nolist;
874465    + delete _tmpclass _cmeta _outclass;
874466    +run;
874467    +run;
874469    +filename  _File_;
874471    +%mend gen_score;
874473    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
874474    +%global &nLevel;
874475    +proc dmdb batch data=&indata
874476    +classout=_tmp_dmdbout;
874477    +class &target;
874478    +run;
874479    +data _tmp_dmdbout;
874480    +    set _tmp_dmdbout;
874481    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
874482    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
874483    +run;
874484    +data _null_;
874485    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
874486    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
874487    +    %let dsid = %sysfunc(close(&dsid));
874488    +     call symput("&nLevel", put(&_obs, Best12.));
874489    +run;
874491    +proc datasets lib=work nolist;
874492    +     delete _tmp_dmdbout;
874493    +run;
874494    +quit;
874495    +%Mend CheckBinaryTargetLevel;
874498    +%macro getNObs(inds=, nobs=);
874499    +    %global &nobs;
874500    +    data _null_;
874501    +        set &inds end=eof;
874502    +        if eof then call symput("&nobs", _N_);
874503    +    run;
874504    +    quit;
874505    +%mend  getNObs;
874509    +%macro makeAlphaDs(target=, cmeta=);
874511    + %let isOBSIndex= N;
874512    + %let dsid = %sysfunc(open(&cmeta));
874513    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
874514    + %do %while(^%sysfunc(fetch(&dsid)));
874515    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
874516    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
874517    + %end;
874518    + %let dsid = %sysfunc(close(&dsid));
874520    +data &EM_USER_OUTALPHA;
874521    +     set _sample_train;
874522    +     set _outtrain(keep=_ALPHA_ _BOUND_);
874523    +     %if &isOBSIndex= N %then %do;
874524    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
874525    +     %end;
874526    +     %else %do;
874527    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
874528    +     %end;
874529    +run;
874531    +data &EM_EXPORT_TRAIN;
874532    +     length _OBS_ 8;
874533    +     set &EM_EXPORT_TRAIN;
874534    +     _OBS_ = _N_;
874535    +run;
874537    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
874538    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
874539    +     by _OBS_;
874540    +     if _ALPHA_ =. then _ALPHA_=0;
874541    +     if _BOUND_ ="" then _BOUND_="_LBC";
874542    +run;
874544    +data &EM_USER_OUTALPHA;
874545    +   set &EM_USER_OUTALPHA;
874546    +   if _ALPHA_ = 0 then delete;
874547    +   %if &isOBSIndex= N %then %do;
874548    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
874549    +   rename _OBS_ = _dataobs_;
874550    +   %end;
874551    +   %else %do;
874552    +   drop _OBS_;
874553    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
874554    +   %end;
874555    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
874556    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
874557    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
874558    +   run;
874560    +%mend makeAlphaDs;
874563    +%macro makeTunData();
874564    +data &EM_USER_TUNINGCRIT;
874565    +    set &EM_USER_TUNINGCRIT;
874566    +    Drop N;
874567    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
874568    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
874569    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
874570    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
874571    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
874572    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
874573    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror, noquote))";
874574    +run;
874575    +%mend makeTunData;
874577    +/*------------------ Score Code Generation with Proc SVMScore    ----------------------  */
874580    +%macro score_code(TargetLevel=, type=);
874582    +%let _inoutest = WORK._inoutest ;
874583    +%let _inoutfit = WORK._inoutfit ;
874584    +%let _inoutclass = WORK._inoutclass;
874586    +%if &type eq FLOW %then %do;
874587    +    %let _inoutest = &EM_USER_OUTEST;
874588    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
874589    +    %let _inoutclass = &EM_USER_OUTCLASS;
874590    +%end;
874591    +%else %do;
874592    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
874593    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
874594    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass, outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
874595    +%end;
874597    +%let emscoreout = %str(&)%str(em_score_output);
874600    +%if &type eq FLOW %then %do;
874601    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
874602    +%end;
874603    +%else %do;
874604    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
874605    +%end;
874607    +data _null_;
874608    +    FILE _File_ MOD;
874610    +    put ' ';
874611    +    put '/*-------------------------------------------------*/';
874612    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */';
874613    +    put '/*-------------------------------------------------*/';
874614    +    put ' ';
874616    +%if &TargetLevel eq BINARY %then %do;
874618    +/*%put &emscoreout;  */
874620    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
874621    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874623    +%do %while(^ %sysfunc(fetch(&dsid)));
874624    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
874626    +%end;
874627    +%let dsid = %sysfunc(close(&dsid));
874629    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
874630    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874632    +%do %while(^ %sysfunc(fetch(&dsid)));
874633    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
874635    +%end;
874636    +%let dsid = %sysfunc(close(&dsid));
874639    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit inclass=&_inoutclass";
874640    +    %if &type eq FLOW %then %do;
874641    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
874642    +    %end;
874643    +    %else %do;
874644    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
874645    +    %end;
874646    +    put ";";
874647    +    put "run;";
874650    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
874652    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
874653    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
874654    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
874655    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
874658    +%do %while(^ %sysfunc(fetch(&dsid)));
874659    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
874660    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
874661    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
874662    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
874663    +%end;
874665    +%let dsid = %sysfunc(close(&dsid));
874667    +    put "data &emscoreout(drop=_P);";
874668    +    put "     set &emscoreout;";
874669    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
874670    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
874672    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
874673    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874674    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
874676    +%do %while(^ %sysfunc(fetch(&dsid)));
874677    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
874678    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
874679    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
874680    +    put " &P_Var = _P ;";
874681    +   %end;
874682    +   %else %do;
874683    +    put " &P_Var = 1 - _P ;";
874684    +    %let targetNonEvent = &P_LEVEL;
874685    +   %end;
874686    +%end;
874687    +%let dsid = %sysfunc(close(&dsid));
874689    +%end; /* the end of if - targetlevel eq binary */
874690    +%else %do;
874692    +/* ----     interval target  ------ */
874694    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
874695    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874697    +%do %while(^ %sysfunc(fetch(&dsid)));
874698    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
874699    +%end;
874700    +%let dsid = %sysfunc(close(&dsid));
874702    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
874703    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
874704    +%do %while(^ %sysfunc(fetch(&dsid)));
874705    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
874706    +%end;
874707    +%let dsid = %sysfunc(close(&dsid));
874709    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit inclass=&_inoutclass ";
874710    +    %if &type eq FLOW %then %do;
874711    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
874712    +    %end;
874713    +    %else %do;
874714    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
874715    +    %end;
874716    +    put ";";
874718    +%end; /* end of targetlevel eq interval */
874720    +run;
874721    +filename  _File_;
874722    +%mend score_code;
874725    +%macro makeDeltaCode(TargetLevel=);
874726    +*--- Build Code to Modify Metadata ---*;
874727    +filename X "&EM_FILE_CDELTA_TRAIN";
874729    +/* modify columns meta */
874730    +data _null_;
874731    +    file X;
874732    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
874733    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
874734    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
874735    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
874736    +run;
874737    +%mend makeDeltaCode;
874739    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
874740    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
874742    +    %do;
874743    +    %let m_data      = &data;
874744    +    %let m_decdata   = &decdata;
874745    +    %let m_decmeta   = &decmeta;
874746    +    %let m_noresfile = &noresfile;
874747    +    %let m_resfile   = &resfile;
874748    +    dm "afa c=sashelp.emutil.decidecode.scl";
874749    +  %end;
874750    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: SVM4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
874751     
874752     *------------------------------------------------------------*;
874753     * End SCORE: SVM4;
874754     *------------------------------------------------------------*;

874755     filename x "C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMFLOWSCORE.sas" MOD;
MPRINT(EM_DIAGRAM):    filename x "C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMFLOWSCORE.sas" MOD;
874756     %makeResidualVars(target=DepVar, decmeta=EMWS8.SVM4_DepVar_DM, fref=X);
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file X;
MPRINT(MAKERESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=506,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 16.40 Uhr

NOTE: 21 records were written to the file X.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;
874757     filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_DIAGRAM):    
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.SVM4_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error" _DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong 
Classifications" _DISF_= "Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train: Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ _RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.SVM4_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error" _DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong 
Classifications" _DISF_= "Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid: Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ _RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   merge WORK.OUTFITDATA _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
874818     proc append base=EMWS8.SVM4_EMOUTFIT data=WORK.OUTFITDATA force;
MPRINT(EM_DIAGRAM):    proc append base=EMWS8.SVM4_EMOUTFIT data=WORK.OUTFITDATA force;
874819     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK.OUTFITDATA to EMWS8.SVM4_EMOUTFIT.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS8.SVM4_EMOUTFIT has 1 observations and 19 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

874820     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
874821     * SVM4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * SVM4: Computing metadata for TRAIN data;
874822     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\\predictive-models-project\Workspaces\EMWS8\SVM4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.SVM4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.SVM4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS8.SVM4_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.SVM4_TRAIN out=WORK.M18DZLCP noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M18DZLCP;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M18DZLCP(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M18DZLCP;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M18DZLCP;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1ELJXX_ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ELJXX_;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ELJXX_;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0FVTLQW(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ELJXX_;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ELJXX_;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ELJXX_;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
The SAS System

MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ELJXX_;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ELJXX_;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "SVM4";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "SVM4";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "SVM4";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "SVM4";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "SVM4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "SVM4";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "SVM4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_Y_' then ROLE='PREDICT';
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_R_' then ROLE='RESIDUAL';
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_ALPHA_' then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   if upcase(trim(left(NAME))) eq '_BOUND_' then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
875143     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
875144     set EMWS8.SVM4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_EMINFO;
875145     where DATA='SVM4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='SVM4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
875146     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.SVM4_EMINFO.
      WHERE (DATA='SVM4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

875147     data EMWS8.SVM4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM4_EMINFO;
875148     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
875149     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
875150     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.SVM4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
875154     run;
875155     data EMWS8.SVM4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM4_EMINFO;
875156     set EMWS8.SVM4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_EMINFO WORK.MODELTEMP_INFO;
875157     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.SVM4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.SVM4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

875158     proc sort data = EMWS8.SVM4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.SVM4_EMINFO NOTHREADS;
875159     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
875160     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.SVM4_EMINFO.
NOTE: The data set EMWS8.SVM4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

875161     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
875162     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
875163     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

875164     proc sort data = EMWS8.SVM4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.SVM4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
875165     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
875166     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.SVM4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

875167     data EMWS8.SVM4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM4_EMINFO;
875168     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
875169     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
875170     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.SVM4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

875171     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
875172     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
875173     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
875174     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
