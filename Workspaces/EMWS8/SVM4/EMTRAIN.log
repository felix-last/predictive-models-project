MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                09.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0IEP0OK 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0IEP0OK new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
2039337    proc freq data=EMWS8.SVM4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM4_VariableSet noprint;
2039338    table ROLE*LEVEL/out=WORK.SVM4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM4META;
2039339    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 50 observations read from the data set EMWS8.SVM4_VARIABLESET.
NOTE: The data set WORK.SVM4META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

2039340    proc print data=WORK.SVM4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM4META label noobs;
2039341    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
2039342    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
2039342  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
2039342  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
2039343    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2039344    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
2039345    run;

NOTE: There were 8 observations read from the data set WORK.SVM4META.
NOTE: The PROCEDURE PRINT printed page 1782.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2039346    title10;
MPRINT(EM_DIAGRAM):   title10;
2039347    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN 
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN 
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN 
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.BINNING_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM4_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM4_DepVar_DD 
out=EMWS8.SVM4_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
2039394    data WORK.SVM4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
2039395    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
2039396    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
2039396  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
2039396  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
2039397       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
2039397  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
2039397  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
2039398    set EMWS8.SVM4_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_DEPVAR_DM( where=(_TYPE_="TARGET"));
2039399    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
2039400    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
2039401    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
2039402    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
2039403    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
2039404    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
2039405    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
2039406    end;
MPRINT(EM_DIAGRAM):   end;
2039407    output;
MPRINT(EM_DIAGRAM):   output;
2039408    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2039409    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2039410    proc print data=WORK.SVM4_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM4_EVENT noobs label;
2039411    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
2039412    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2039413    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
2039414    run;

NOTE: There were 1 observations read from the data set WORK.SVM4_EVENT.
NOTE: The PROCEDURE PRINT printed page 1783.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2039415    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
2039416    proc print data = EMWS8.SVM4_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM4_DepVar_DM noobs label;
2039417    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
2039418    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
2039419    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
2039419  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
2039419  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
2039420    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2039421    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
2039422    run;

NOTE: There were 7 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1784.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2039423    title10;
MPRINT(EM_DIAGRAM):   title10;
2039424    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM4: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM4: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM4_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM4_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM4_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM4_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
2039934    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
2039935    * SVM4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM4: Generation of macros and macro variables;
2039936    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
2039937    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

2039938    %let EMEXCEPTIONSTRING=;
2039939    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
2039940    * TRAIN: SVM4;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM4;
2039941    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2039942    %let EM_ACTION = TRAIN;
2039943    %let syscc = 0;
2039944    %macro main;
2039945    
2039946       filename temp catalog 'sashelp.emmodl.svm_macros.source';
2039947       %include temp;
2039948       filename temp;
2039949       %SetProperties;
2039950       %if %upcase(&EM_ACTION) = CREATE %then %do;
2039951           filename temp catalog 'sashelp.emmodl.svm_create.source';
2039952           %include temp;
2039953           filename temp;
2039954           %create;
2039955       %end;
2039956       %else
2039957       %if %upcase(&EM_ACTION) = TRAIN %then %do;
2039958           filename temp catalog 'sashelp.emmodl.svm_train.source';
2039959           %include temp;
2039960           filename temp;
2039961           %train;
2039962       %end;
2039963       %else
2039964       %if %upcase(&EM_ACTION) = REPORT %then %do;
2039965           filename temp catalog 'sashelp.emmodl.svm_report.source';
2039966           %include temp;
2039967           filename temp;
2039968           %report;
2039969       %end;
2039970    
2039971    %mend main;
2039972    
2039973    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
2039975   +%macro SetProperties;
2039976   +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
2039977   +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
2039978   +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
2039979   +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
2039980   +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
2039981   +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
2039982   +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
2039983   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
2039984   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
2039985   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
2039986   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
2039987   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
2039988   +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
2039989   +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
2039990   +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
2039991   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
2039992   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
2039993   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
2039994   +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
2039995   +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
2039996   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
2039997   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
2039998   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
2039999   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
2040000   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
2040001   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
2040002   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
2040003   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
2040004   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
2040005   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
2040006   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
2040007   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
2040008   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
2040009   +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
2040010   +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
2040011   +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
2040012   +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
2040013   +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
2040014   +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
2040015   +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
2040016   +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
2040017   +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
2040018   +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
2040019   +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
2040020   +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
2040021   +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
2040022   +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
2040023   +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
2040024   +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
2040025   +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
2040027   +%mend SetProperties;
2040030   +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
2040032   +  %local emclassout emvarout;
2040034   +   proc dmdb batch dmdbcat= _emdmdb
2040036   +   %if &out ne 0 %then %do ;
2040037   +       data=&indata out= _emdmdb &emclassout &emvarout;
2040038   +   %end ;
2040039   +   %else %do ;
2040040   +       data=&indata &emclassout &emvarout;
2040041   +   %end ;
2040043   +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
2040044   +   %if %em_class   ne  %then %do ;
2040045   +       class %EM_CLASS;
2040046   +   %end ;
2040047   +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
2040048   +   %if %em_target ne %then %do ;
2040049   +          target %em_target ;
2040050   +   %end ;
2040051   +   run ;
2040052   +%mend make_dmdb;
2040055   +%macro svm_training(indata=,
2040056   +                    task=,
2040057   +                    classtask=,
2040058   +                    method=,
2040059   +                    outest =,
2040060   +                    outclass =,
2040061   +                    outfit =,
2040062   +                    isValidationSet =,
2040063   +                    testdata =,
2040064   +                    testout =,
2040065   +                    validSource=,
2040066   +                    usecgbydefault=
2040067   +                    );
2040069   +%make_dmdb(indata=&indata, out=1);
2040071   +options debug="nlpitermsg=2";
2040073   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
2040074   +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
2040075   +ods output tun_crt = &EM_USER_TUNINGCRIT;
2040076   +%end;
2040078   +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
2040079   +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
2040080   +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
2040081   +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
2040083   +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
2040084   +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
2040085   +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
2040086   +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
2040089   +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
2040090   +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
2040091   +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
2040092   +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
2040094   +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
2040095   +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
2040096   +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
2040097   +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
2040100   +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
2040101   +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
2040102   +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
2040103   +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
2040106   +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
2040107   +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
2040108   +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
2040109   +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
2040110   +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
2040111   +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
2040112   +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
2040113   +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
2040114   +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
2040115   +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
2040116   +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
2040117   +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
2040121   +proc svm data= _emdmdb
2040122   +         dmdbcat= _emdmdb
2040123   +         nomonitor
2040124   +         outfit= &outfit
2040125   +         outclass= &outclass
2040126   +         outest= &outest
2040127   +         out = _outtrain
2040128   +         maxiter = &_PROPERTY_MAXITER
2040129   +         maxfunc = &_PROPERTY_MAXFUNC
2040130   +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
2040131   +         gconv =   &_PROPERTY_GCONV
2040132   +         absgconv = &_PROPERTY_ABSGCONV
2040133   +         xconv =   &_PROPERTY_XCONV
2040134   +         absxconv = &_PROPERTY_ABSXCONV
2040136   +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
2040137   +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
2040138   +             xscale
2040139   +         %end;
2040140   +         %else %do;
2040141   +             noscale
2040142   +         %end;
2040143   +    %end;
2040144   +    %if &task eq CLASSIFICATION %then %do;
2040145   +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
2040146   +         method= &method
2040147   +        %end;
2040148   +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
2040149   +         method= DQP   qpsize = &_PROPERTY_QPSIZE
2040150   +        %end;
2040151   +        %else %do;
2040152   +         method= &EM_PROPERTY_METHOD
2040153   +        %end;
2040154   +    %end;
2040155   +    %else %do;
2040156   +         method= &method  task=&classtask
2040157   +         /*%if &classtask eq EPS_REG %then %do; */
2040158   +             esp=&_PROPERTY_EPSILON
2040159   +         /*%end;*/
2040160   +    %end;
2040162   +    %if &EM_PROPERTY_KERNEL ne  %then %do;
2040163   +         kernel = &EM_PROPERTY_KERNEL
2040164   +    %end;
2040165   +    %else %do;
2040166   +         kernel = Linear
2040167   +    %end;
2040169   +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2040171   +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
2040172   +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
2040173   +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
2040174   +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
2040175   +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
2040176   +            tun = &EM_PROPERTY_TUNINGMETHOD
2040177   +        %end;
2040179   +    %end;
2040181   +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
2040182   +         CV  = &EM_PROPERTY_CVMETHOD
2040183   +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
2040184   +         fold = &EM_PROPERTY_CVFOLD
2040185   +         %end;
2040186   +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
2040187   +                testdata = &testdata
2040188   +         %end;
2040189   +    %end;
2040191   +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
2040192   +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
2040193   +    %end;
2040195   +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
2040196   +    &EM_PROPERTY_PRINTOPTION
2040197   +    %end;
2040199   +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
2040200   +    POPTHIS
2040201   +    %end;
2040202   +    ;
2040203   +    var %EM_INPUT %EM_REJECTED;
2040204   +    target %EM_TARGET;
2040206   +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2040208   +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
2040209   +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
2040210   +             by &_PROPERTY_TUN_C_BY
2040211   +             ;
2040212   +         %end;
2040213   +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
2040214   +             C  &_PROPERTY_USERCVALUE ;
2040215   +         %end;
2040217   +     %end;
2040218   +     %else %do;
2040219   +           C  &_PROPERTY_USERCVALUE ;
2040220   +     %end;
2040223   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
2040225   +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
2040226   +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
2040227   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
2040228   +                  by &_PROPERTY_POLY_TUN_KP1_BY
2040229   +                ;
2040230   +             %end;
2040231   +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
2040232   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
2040233   +             %end;
2040234   +          %end;
2040235   +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
2040236   +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
2040237   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
2040238   +                ;
2040239   +              %end;
2040240   +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
2040241   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
2040242   +              %end;
2040243   +           %end;
2040244   +           %else %do;
2040245   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
2040246   +           %end;
2040247   +    %end;
2040249   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
2040250   +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2040251   +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
2040252   +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
2040253   +                  by &_PROPERTY_RBF_TUN_KP1_BY
2040254   +                  ;
2040255   +              %end;
2040256   +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
2040257   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
2040258   +              %end;
2040259   +          %end;
2040260   +          %else %do;
2040261   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
2040262   +          %end;
2040263   +    %end;
2040266   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
2040268   +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2040270   +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
2040271   +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
2040272   +                by &_PROPERTY_SGMD_TUN_KP1_BY
2040273   +             ;
2040274   +             %end;
2040275   +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
2040276   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
2040277   +             %end;
2040279   +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
2040280   +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
2040281   +                by &_PROPERTY_SGMD_TUN_KP2_BY
2040282   +             ;
2040283   +             %end;
2040284   +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
2040285   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
2040286   +             %end;
2040287   +          %end;
2040288   +          %else %do;
2040289   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
2040290   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
2040291   +          %end;
2040292   +    %end;
2040294   +run;
2040295   +%TRAINENDLINE:
2040296   +quit;
2040297   +%mend svm_training;
2040299   +%macro svm_score(indata=,
2040300   +                 inest=,
2040301   +                 infit=,
2040302   +                 inclass=,
2040303   +                 outindata=,
2040304   +                 outscore=,
2040305   +                 targetLevel=
2040306   +                 );
2040309   +%if &TargetLevel eq BINARY %then %do;
2040311   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
2040313   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
2040314   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
2040315   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
2040316   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
2040319   +%do %while(^ %sysfunc(fetch(&dsid)));
2040320   +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
2040321   +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
2040322   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
2040323   +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
2040324   +%end;
2040326   +%let dsid = %sysfunc(close(&dsid));
2040329   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
2040330   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040332   +%do %while(^ %sysfunc(fetch(&dsid)));
2040333   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2040334   +%end;
2040335   +%let dsid = %sysfunc(close(&dsid));
2040337   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
2040338   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040340   +%do %while(^ %sysfunc(fetch(&dsid)));
2040341   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2040342   +%end;
2040343   +%let dsid = %sysfunc(close(&dsid));
2040346   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
2040347   +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
2040348   +run;
2040350   +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
2040351   +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
2040351  !+from a part of %EM_MODEL() macro */
2040353   +data &outscore(drop=_P);
2040354   +      set  &outscore;
2040355   +     if (_P_ < -600) then _p =0;
2040356   +     else _P = 1/(1+EXP((-1)*(_P_)));
2040358   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2040359   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040360   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2040362   +%do %while(^ %sysfunc(fetch(&dsid)));
2040363   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2040364   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
2040365   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
2040366   +       &P_Var = _P;
2040367   +   %end;
2040368   +   %else %do;
2040369   +       &P_Var = 1 - _P;
2040370   +       %let targetNonEvent = &P_LEVEL;
2040371   +   %end;
2040372   +%end;
2040373   +%let dsid = %sysfunc(close(&dsid));
2040375   +%include resifref;
2040377   +run;
2040379   +filename resifref;
2040381   +%end; /* the end of if - targetlevel eq binary */
2040382   +%else %do;
2040384   +/* ----     interval target  ------ */
2040386   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2040387   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040389   +%do %while(^ %sysfunc(fetch(&dsid)));
2040390   +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2040391   +%end;
2040392   +%let dsid = %sysfunc(close(&dsid));
2040394   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
2040395   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040397   +%do %while(^ %sysfunc(fetch(&dsid)));
2040398   +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2040399   +%end;
2040401   +%let dsid = %sysfunc(close(&dsid));
2040403   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
2040404   +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
2040405   +run;
2040407   +%end; /* end of targetlevel eq interval */
2040410   +%mend svm_score;
2040413   +%macro makeSVMFitStatDs();
2040415   +data &EM_USER_SVMFITDS;
2040416   +     set &EM_USER_SVMFITSTAT;
2040417   +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
2040417  !+noquote))";
2040418   +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
2040418  !+rpt_svmfitstat_label_k_par2, noquote))";
2040419   +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
2040419  !+rpt_svmfitstat_label_k_par3, noquote))";
2040420   +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
2040420  !+ noquote))";
2040421   +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
2040421  !+noquote))";
2040422   +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
2040422  !+rpt_svmfitstat_label_margin, noquote))";
2040423   +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
2040423  !+ noquote))";
2040424   +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
2040424  !+noquote))";
2040425   +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
2040425  !+noquote))";
2040426   +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
2040426  !+noquote))";
2040427   +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
2040427  !+noquote))";
2040428   +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
2040428  !+noquote))";
2040429   +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
2040429  !+rpt_svmfitstat_label_ntrain, noquote))";
2040430   +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
2040430  !+ noquote))";
2040431   +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
2040431  !+ noquote))";
2040432   +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
2040432  !+noquote))";
2040433   +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
2040433  !+rpt_svmfitstat_label_radius, noquote))";
2040434   +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
2040434  !+noquote))";
2040435   +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
2040435  !+noquote))";
2040436   +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
2040436  !+ noquote))";
2040437   +    if _TYPE_ ='_ACCTAB_' then delete;
2040438   +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
2040439   +      _BIAS_= _K_PAR_;
2040440   +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
2040441   +    %end;
2040442   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
2040443   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
2040444   +    %end;
2040445   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
2040446   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
2040447   +    %end;
2040448   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
2040449   +      DROP _K_PAR3_  _L1_;
2040450   +    %end;
2040451   +run;
2040453   +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
2040454   +run;
2040456   +data &EM_USER_SVMFITDS;
2040457   +     set &EM_USER_SVMFITDS;
2040458   +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
2040458  !+;
2040459   +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
2040460   +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
2040460  !+noquote))";
2040461   +     Rename COL1 = Train;
2040462   +     if _NAME_ = '_ACCU_' then delete;
2040463   +run;
2040465   +%mend makeSVMFitStatDs;
2040467   +%macro svm_fitstat(validSource=);
2040469   +%EM_FITSTAT(trainDs = work._tmp_scored_train,
2040470   +            %if &_validSource= VALIDSET %then %do;
2040471   +                validDs=work._tmp_scored_test,
2040472   +                testDs=,
2040473   +            %end;
2040474   +            %else %if &_validSource= TESTSET %then %do;
2040475   +                validDs=,
2040476   +                testDs=work._tmp_scored_test,
2040477   +            %end;
2040478   +            decdata=&EM_DEC_DECDATA,
2040479   +            decmeta=&EM_DEC_DECMETA,
2040480   +            freqvar=, df=,
2040481   +            outfit=&EM_DATA_EMOUTFIT);
2040483   +data &EM_DATA_EMOUTFIT;
2040484   +     set &EM_DATA_EMOUTFIT;
2040485   +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
2040485  !+_SBC_; /* Because of DF */
2040486   +run;
2040487   +%mend svm_fitstat;
2040489   +/*----------------------------------------------------------------------------------
2040489  !+-----
2040490   +   OUTEST data set
2040492   +                                                       APRTMNT_  APRTMNT_   TELIND_
2040492  !+  TELIND_
2040493   + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
2040493  !+     2_
2040495   +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
2040495  !+   0.97609
2040496   +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
2040496  !+   0.15280
2040497   +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
2040497  !+  -0.07311
2040499   +=-----------------------------------------------------------------------------------
2040499  !+--*/
2040500   +/* this is not used, generate score code directly for the case of linear svm */
2040501   +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
2040501  !+Residual=);
2040503   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
2040505   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
2040506   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
2040507   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
2040508   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
2040509   +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
2040511   +%do %while(^ %sysfunc(fetch(&dsid)));
2040512   +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
2040513   +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
2040514   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
2040515   +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
2040516   +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
2040517   +%end;
2040518   +%let dsid = %sysfunc(close(&dsid));
2040520   +data _cmeta;
2040521   +    set &ColumnsMeta;
2040522   +    NAME = upcase(strip(NAME));
2040523   +run;
2040525   +data _tmpclass;
2040526   +       set &outclass;
2040527   +   _VAR_ = upcase(strip(_VAR_));
2040528   +run;
2040530   +proc sql;
2040531   +create table _outclass as
2040532   +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
2040533   +  from  _tmpclass, _cmeta
2040534   +  where _tmpclass._VAR_ = _cmeta.NAME;
2040535   +run;
2040537   +data _outclass;
2040538   +    set _outclass;
2040539   +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
2040540   +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
2040541   +run;
2040542   +data _meands;
2040543   +    set &outest;
2040544   +    if _TYPE_='_MEAN_';
2040545   +run;
2040547   +/*
2040548   +data _null_;
2040549   +    set &outest;
2040550   +    if _TYPE_='_PARMS_';
2040551   +    call symput('bias', _STDEV_ );
2040552   +    call symput('intercept', _MEAN_ );
2040553   +run;
2040554   +*/
2040556   +filename  _File_ "&File";
2040557   +data _null_;
2040558   +    FILE _File_;
2040559   +    length _line $500;
2040560   +    drop _line;
2040562   +    put ' ';
2040563   +    put '/*-------------------------------------------------*/';
2040564   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
2040565   +    put '/*-------------------------------------------------*/';
2040566   +    put ' ';
2040568   +    put 'length _warn_ $ 4;';
2040569   +    put 'label _warn_ = "Warnings";';
2040570   +    put 'length _svm_uname $32;';
2040571   +    put 'DROP _svm_uname ;';
2040573   +  dsid = open("work._outclass");
2040574   +    if dsid then do;
2040575   +          oldvname ='';
2040576   +          do while(not fetch(dsid));
2040577   +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
2040578   +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
2040579   +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
2040580   +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
2040581   +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
2040582   +             *put 'vtype =' vtype;
2040583   +             *put 'vformat=' vformat;
2040585   +             if oldname ne vname then do;
2040586   +                 if vtype = 'N' then do;
2040587   +                     if vformat eq ' ' then do;
2040588   +                        put '_svm_uname = put(' vname ', Best12.);';
2040589   +                     end; else do;
2040590   +                        put '_svm_uname = put(' vname ',' vformat ');';
2040591   +                     end;
2040592   +                  end;
2040593   +                  else do;
2040594   +                     if vformat eq ' ' then do;
2040595   +                        put '_svm_uname = ' vname ' ;';
2040596   +                     end; else do;
2040597   +                        put '_svm_uname = put(' vname ',' vformat ');';
2040598   +                     end;
2040599   +                  end;
2040600   +                  put '%DMNORMIP(_svm_uname);';
2040601   +              end; /* end of oldname ne vname */
2040603   +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
2040604   +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
2040605   +              put _line;
2040606   +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
2040606  !+;';
2040607   +              oldname = vname;
2040608   +          end;
2040610   +     end;
2040611   +rc=close(dsid);
2040613   +dsid = open("&outest");
2040614   +    if dsid then do;
2040615   +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
2040615  !+noquote))"  "------ */";
2040616   +          ncol = attrn(dsid, 'NVARS');
2040617   +          do i=4 to ncol;
2040618   +             vname = upcase(trim(left(varname(dsid,i))));
2040619   +              do while(not fetch(dsid));
2040620   +                  type = strip(getvarc(dsid,2));
2040621   +                  select(type);
2040622   +                      when('_MEAN_')  mean =  getvarn(dsid, i);
2040623   +                      when('_STDEV_') std  =  getvarn(dsid, i);
2040624   +                      when('_PARMS_') coeff = getvarn(dsid, i);
2040625   +                  otherwise;
2040626   +                  end;
2040627   +              end; /* end of do-while*/
2040628   +              *put '+' coeff '*(' vname '-' mean ')/' std;
2040629   +              if i=4 then  do; put '_P_ =(' coeff ; end;
2040630   +              else if i=5 then do; put '+' coeff ');' ; end;
2040631   +              else do;
2040632   +                      tmpvar = '_TMPVAR'||strip(i);
2040633   +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
2040634   +                      put 'else ' tmpvar '=' vname ';';
2040635   +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
2040636   +                      put 'drop  ' tmpvar ';';
2040637   +              end;
2040638   +              rc=rewind(dsid);
2040639   +         end; /* end of  do i=6 to &nvars; */
2040640   +         put ';';
2040641   +     end;
2040642   +    rc=close(dsid);
2040643   + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
2040643  !+"------ */";
2040645   +%if &TargetLevel eq BINARY %then %do;
2040647   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
2040648   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040649   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2040651   +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
2040652   +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
2040654   +%do %while(^ %sysfunc(fetch(&dsid)));
2040655   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2040656   +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
2040657   +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
2040658   +       put " &P_Var = _P;";
2040659   +   %end;
2040660   +   %else %do;
2040661   +       put " &P_Var = 1 - _P;";
2040662   +   %let targetNonEvent = &P_LEVEL;
2040663   +   %end;
2040664   +%end;
2040665   +%let dsid = %sysfunc(close(&dsid));
2040667   +%if &Residual = Y %then %do;
2040669   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
2040669  !+"------ */";
2040671   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
2040672   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040673   +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2040675   +   %do %while(^ %sysfunc(fetch(&dsid)));
2040676   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
2040677   +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
2040678   +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
2040679   +       put " &R_Var = 1 - _P;";
2040680   +   %end;
2040681   +   %else %do;
2040682   +       put " &R_Var = 0 - (1 - _P);";
2040683   +   %end;
2040684   +   %end;
2040685   +   %let dsid = %sysfunc(close(&dsid));
2040686   +%end;
2040687   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
2040687  !+"------ */";
2040689   +    put 'length _FORMAT_VAR $200;';
2040690   +    put 'length _TARGNOR $%DMNORLEN; ';
2040691   +    put 'DROP _FORMAT_VAR _TARGNOR;';
2040692   +    %if &TargetFormat ne  %then %do;
2040693   +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
2040694   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
2040695   +    %end;
2040696   +    %else %do;
2040697   +    %if &TargetType  = N  %then %do;
2040698   +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
2040699   +       %end;
2040700   +       %else %do;
2040701   +    put "_FORMAT_VAR= &TargetVar;";
2040702   +       %end;
2040703   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
2040704   +    %end;
2040706   +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
2040707   +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
2040708   +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
2040710   +    %do %while(^ %sysfunc(fetch(&dsid)));
2040711   +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
2040712   +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
2040713   +        %let qF_var_label = %str(%"&F_var_label%");
2040714   +    put "&F_var = _TARGNOR ;";
2040715   +    put "label &F_var = &qF_Var_label;";
2040716   +    %end;
2040717   +    %let dsid = %sysfunc(close(&dsid));
2040719   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
2040719  !+"------ */";
2040721   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
2040722   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040723   +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
2040725   +%do %while(^%sysfunc(fetch(&dsid)));
2040726   +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
2040727   +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
2040728   +   %let qI_var_label = %str(%"&I_var_label%");
2040729   +   %let qTargetEvent = %str(%"&targetEvent%");
2040730   +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
2040731   +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
2040732   +       put " else &I_Var  =  &qtargetNonEvent ;";
2040733   +       put " label &I_var = &qI_var_label;";
2040734   +%end;
2040735   +%let dsid = %sysfunc(close(&dsid));
2040737   +%end;  /* end of TargetLevel= Binary */
2040739   +%else %if &TargetLevel eq INTERVAL %then %do;
2040741   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
2040742   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040743   +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
2040745   +%do %while(^ %sysfunc(fetch(&dsid)));
2040746   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2040747   +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
2040748   +   %let qP_label = %str(%"&P_label%");
2040749   +    put " &P_Var = _P_;";
2040750   +    put " label &P_Var = &qP_label;";
2040751   +%end;
2040752   +%let dsid = %sysfunc(close(&dsid));
2040754   +%if &Residual = Y %then %do;
2040756   +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
2040756  !+"------ */";
2040758   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
2040759   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040760   +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
2040762   +   %do %while(^ %sysfunc(fetch(&dsid)));
2040763   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
2040764   +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
2040765   +     %let qR_label = %str(%"&R_label%");
2040766   +       put " &R_Var = &TargetVar - &P_var;";
2040767   +       put " label &R_Var = &qR_label;";
2040768   +   %end;
2040769   +   %let dsid = %sysfunc(close(&dsid));
2040770   +%end;
2040772   +%end;   /* end of TargetLevel= Interval */
2040774   +  put "/*------------------------------------------------------------*/";
2040775   +proc datasets lib=work nolist;
2040776   + delete _tmpclass _cmeta _outclass;
2040777   +run;
2040778   +run;
2040780   +filename  _File_;
2040782   +%mend gen_score;
2040784   +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
2040785   +%global &nLevel;
2040786   +proc dmdb batch data=&indata
2040787   +classout=_tmp_dmdbout;
2040788   +class &target;
2040789   +run;
2040790   +data _tmp_dmdbout;
2040791   +    set _tmp_dmdbout;
2040792   +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
2040793   +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
2040794   +run;
2040795   +data _null_;
2040796   +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
2040797   +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
2040798   +    %let dsid = %sysfunc(close(&dsid));
2040799   +     call symput("&nLevel", put(&_obs, Best12.));
2040800   +run;
2040802   +proc datasets lib=work nolist;
2040803   +     delete _tmp_dmdbout;
2040804   +run;
2040805   +quit;
2040806   +%Mend CheckBinaryTargetLevel;
2040809   +%macro getNObs(inds=, nobs=);
2040810   +    %global &nobs;
2040811   +    data _null_;
2040812   +        set &inds end=eof;
2040813   +        if eof then call symput("&nobs", _N_);
2040814   +    run;
2040815   +    quit;
2040816   +%mend  getNObs;
2040820   +%macro makeAlphaDs(target=, cmeta=);
2040822   + %let isOBSIndex= N;
2040823   + %let dsid = %sysfunc(open(&cmeta));
2040824   + %let vn_name =%sysfunc(varnum(&dsid, NAME));
2040825   + %do %while(^%sysfunc(fetch(&dsid)));
2040826   +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
2040827   +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
2040828   + %end;
2040829   + %let dsid = %sysfunc(close(&dsid));
2040831   +data &EM_USER_OUTALPHA;
2040832   +     set _sample_train;
2040833   +     set _outtrain(keep=_ALPHA_ _BOUND_);
2040834   +     %if &isOBSIndex= N %then %do;
2040835   +     keep _OBS_ _ALPHA_ _BOUND_ &target;
2040836   +     %end;
2040837   +     %else %do;
2040838   +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
2040839   +     %end;
2040840   +run;
2040842   +data &EM_EXPORT_TRAIN;
2040843   +     length _OBS_ 8;
2040844   +     set &EM_EXPORT_TRAIN;
2040845   +     _OBS_ = _N_;
2040846   +run;
2040848   +data &EM_EXPORT_TRAIN(Drop=_OBS_);
2040849   +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
2040850   +     by _OBS_;
2040851   +     if _ALPHA_ =. then _ALPHA_=0;
2040852   +     if _BOUND_ ="" then _BOUND_="_LBC";
2040853   +run;
2040855   +data &EM_USER_OUTALPHA;
2040856   +   set &EM_USER_OUTALPHA;
2040857   +   if _ALPHA_ = 0 then delete;
2040858   +   %if &isOBSIndex= N %then %do;
2040859   +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
2040860   +   rename _OBS_ = _dataobs_;
2040861   +   %end;
2040862   +   %else %do;
2040863   +   drop _OBS_;
2040864   +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
2040864  !+noquote))";
2040865   +   %end;
2040866   +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
2040867   +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
2040868   +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
2040869   +   run;
2040871   +%mend makeAlphaDs;
2040874   +%macro makeTunData();
2040875   +data &EM_USER_TUNINGCRIT;
2040876   +    set &EM_USER_TUNINGCRIT;
2040877   +    Drop N;
2040878   +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
2040879   +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
2040880   +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
2040881   +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
2040882   +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
2040883   +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
2040884   +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
2040884  !+noquote))";
2040885   +run;
2040886   +%mend makeTunData;
2040888   +/*------------------ Score Code Generation with Proc SVMScore
2040888  !+----------------------  */
2040891   +%macro score_code(TargetLevel=, type=);
2040893   +%let _inoutest = WORK._inoutest ;
2040894   +%let _inoutfit = WORK._inoutfit ;
2040895   +%let _inoutclass = WORK._inoutclass;
2040897   +%if &type eq FLOW %then %do;
2040898   +    %let _inoutest = &EM_USER_OUTEST;
2040899   +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
2040900   +    %let _inoutclass = &EM_USER_OUTCLASS;
2040901   +%end;
2040902   +%else %do;
2040903   +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
2040903  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
2040904   +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
2040904  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
2040905   +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
2040905  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
2040906   +%end;
2040908   +%let emscoreout = %str(&)%str(em_score_output);
2040911   +%if &type eq FLOW %then %do;
2040912   +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
2040913   +%end;
2040914   +%else %do;
2040915   +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
2040916   +%end;
2040918   +data _null_;
2040919   +    FILE _File_ MOD;
2040921   +    put ' ';
2040922   +    put '/*-------------------------------------------------*/';
2040923   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
2040923  !+;
2040924   +    put '/*-------------------------------------------------*/';
2040925   +    put ' ';
2040927   +%if &TargetLevel eq BINARY %then %do;
2040929   +/*%put &emscoreout;  */
2040931   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
2040932   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040934   +%do %while(^ %sysfunc(fetch(&dsid)));
2040935   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2040937   +%end;
2040938   +%let dsid = %sysfunc(close(&dsid));
2040940   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
2040941   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040943   +%do %while(^ %sysfunc(fetch(&dsid)));
2040944   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2040946   +%end;
2040947   +%let dsid = %sysfunc(close(&dsid));
2040950   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
2040950  !+inclass=&_inoutclass";
2040951   +    %if &type eq FLOW %then %do;
2040952   +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
2040953   +    %end;
2040954   +    %else %do;
2040955   +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
2040956   +    %end;
2040957   +    put ";";
2040958   +    put "run;";
2040961   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
2040963   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
2040964   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
2040965   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
2040966   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
2040969   +%do %while(^ %sysfunc(fetch(&dsid)));
2040970   +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
2040971   +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
2040972   +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
2040973   +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
2040974   +%end;
2040976   +%let dsid = %sysfunc(close(&dsid));
2040978   +    put "data &emscoreout(drop=_P);";
2040979   +    put "     set &emscoreout;";
2040980   +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
2040981   +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
2040983   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2040984   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2040985   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2040987   +%do %while(^ %sysfunc(fetch(&dsid)));
2040988   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2040989   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
2040990   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
2040991   +    put " &P_Var = _P ;";
2040992   +   %end;
2040993   +   %else %do;
2040994   +    put " &P_Var = 1 - _P ;";
2040995   +    %let targetNonEvent = &P_LEVEL;
2040996   +   %end;
2040997   +%end;
2040998   +%let dsid = %sysfunc(close(&dsid));
2041000   +%end; /* the end of if - targetlevel eq binary */
2041001   +%else %do;
2041003   +/* ----     interval target  ------ */
2041005   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2041006   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2041008   +%do %while(^ %sysfunc(fetch(&dsid)));
2041009   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2041010   +%end;
2041011   +%let dsid = %sysfunc(close(&dsid));
2041013   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
2041014   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2041015   +%do %while(^ %sysfunc(fetch(&dsid)));
2041016   +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
2041017   +%end;
2041018   +%let dsid = %sysfunc(close(&dsid));
2041020   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
2041020  !+inclass=&_inoutclass ";
2041021   +    %if &type eq FLOW %then %do;
2041022   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
2041023   +    %end;
2041024   +    %else %do;
2041025   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
2041026   +    %end;
2041027   +    put ";";
2041029   +%end; /* end of targetlevel eq interval */
2041031   +run;
2041032   +filename  _File_;
2041033   +%mend score_code;
2041036   +%macro makeDeltaCode(TargetLevel=);
2041037   +*--- Build Code to Modify Metadata ---*;
2041038   +filename X "&EM_FILE_CDELTA_TRAIN";
2041040   +/* modify columns meta */
2041041   +data _null_;
2041042   +    file X;
2041043   +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
2041044   +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
2041045   +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
2041046   +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
2041047   +run;
2041048   +%mend makeDeltaCode;
2041050   +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
2041051   + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
2041053   +    %do;
2041054   +    %let m_data      = &data;
2041055   +    %let m_decdata   = &decdata;
2041056   +    %let m_decmeta   = &decmeta;
2041057   +    %let m_noresfile = &noresfile;
2041058   +    %let m_resfile   = &resfile;
2041059   +    dm "afa c=sashelp.emutil.decidecode.scl";
2041060   +  %end;
2041061   +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
2041062   +%Macro Train;
2041065   +/*%let SVM_MAXNUMOBS = 10000; */
2041066   +/*%let EM_SCORECODEFORMAT=PROC;*/
2041067   +/*%let SVM_SAMPLESIZE = 100; */
2041069   +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
2041070   +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
2041071   +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
2041072   +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
2041073   +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
2041074   +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
2041075   +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
2041078   +/*---------- Check the input data set ---------------------*/
2041079   +%if &EM_IMPORT_DATA eq  %then %do;
2041080   +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
2041081   +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
2041082   +%GOTO ENDLINE;
2041083   +%end;
2041085   +/*----------- Check the target variable  -------------------*/
2041087   +%let _targetVar= %EM_TARGET;
2041088   +%let _targetlevel = %EM_TARGET_LEVEL;
2041090   +%if &_targetVar eq  %then %do;
2041091   +%PUT ERROR:THERE IS NO VALID TARGET;
2041092   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
2041093   +%GOTO ENDLINE;
2041094   +%end;
2041096   +%let K = %SCAN(&_targetVar, 2, %STR( ));
2041097   +%if &K > %then %do;
2041098   +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
2041099   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
2041100   +%GOTO ENDLINE;
2041101   +%end;
2041103   +/* check actual num of target levels */
2041104   +%if (&_targetLevel eq BINARY) %then %do;
2041105   +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
2041105  !+nLevel=_nTargetLevel );
2041106   +    %if &_nTargetLevel  > 2 %then %do;
2041107   +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
2041107  !+;
2041108   +    %GOTO ENDLINE;
2041109   +    %end;
2041110   +%end;
2041111   +%else %do;
2041112   +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
2041112  !+ SUPPORTS ONLY BINARY TARGET;
2041113   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
2041114   +      %GOTO ENDLINE;
2041115   +%end;
2041117   +%let _PROPERTY_TASK = ;
2041118   +%let _PROPERTY_CLASSTASK = ;
2041119   +%let _PROPERTY_METHOD = ;
2041120   +%if (&_targetLevel eq BINARY) %then %do;
2041121   +      %let _PROPERTY_TASK = CLASSIFICATION;
2041122   +      %let _PROPERTY_CLASSTASK = C_CLAS;
2041123   +      %let _PROPERTY_METHOD = LINSVM;
2041124   +%end;  /* end of %if (&_targetLevel eq BINARY)  */
2041125   +%else %if (&_targetLevel eq INTERVAL) %then %do;
2041126   +      /* for interval target */
2041127   +      %let _PROPERTY_TASK = REGRESSION;
2041128   +      %let _PROPERTY_CLASSTASK = L2_REG;
2041129   +      %let _PROPERTY_METHOD = LSSVM;
2041130   +%end; %else %do;
2041131   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
2041132   +      %GOTO ENDLINE;
2041134   +%end;
2041137   +%let _isValidationSet =NO;
2041138   +%let _testdata =;
2041139   +%let _testout =;
2041140   +%let _validSource=;
2041142   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
2041143   +        %let _isValidationSet = YES;
2041144   +        %let _testdata = &EM_IMPORT_VALIDATE;
2041145   +        %let _testout = &EM_EXPORT_VALIDATE;
2041146   +        %let _validSource= VALIDSET;
2041147   +%end;
2041148   +%else %do;
2041149   +        %if &EM_IMPORT_TEST  ne  %then %do;
2041150   +         %let _isValidationSet = YES;
2041151   +         %let _testdata = &EM_IMPORT_TEST;
2041152   +         %let _testout = &EM_EXPORT_TEST;
2041153   +         %let _validSource= TESTSET;
2041154   +         %end;
2041155   +%end;
2041157   +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
2041158   +    %if &_isValidationSet eq NO  %then %do;
2041159   +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
2041160   +    %GOTO ENDLINE;
2041161   +    %end;
2041162   +%end;
2041164   +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
2041165   +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
2041166   +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
2041167   +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
2041168   +%let _num_input_class =
2041168  !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
2041169   +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
2041171   +%if  &_num_input_total < 2 %then %do;
2041172   +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
2041173   +         %goto ENDLINE;
2041174   +         %end;
2041177   +/*
2041178   +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
2041178  !+%then %do;
2041180   +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
2041182   +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
2041183   +         %let  EMEXCEPTIONSTRING =
2041183  !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
2041184   +               %goto endline;
2041185   +    %end;
2041186   +%end;
2041187   +*/
2041189   +/*------ Training ----------------------*/
2041190   +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
2041191   +    %if (&_targetLevel ne INTERVAL) %then %do;
2041192   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
2041192  !+METADATA=&EM_DATA_VARIABLESET,
2041193   +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
2041193  !+INDEX=Y, INDEXNAME=_OBS_ );
2041194   +    %end;
2041195   +    %else %do;
2041196   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
2041196  !+METADATA=&EM_DATA_VARIABLESET,
2041197   +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
2041197  !+INDEX=Y, INDEXNAME=_OBS_ );
2041198   +    %end;
2041199   +%end;
2041200   +%else %do;
2041201   +data _sample_train;
2041202   +    length _OBS_ 8.;
2041203   +    set &EM_IMPORT_DATA;
2041204   +    _OBS_ = _N_;
2041205   +run;
2041206   +%end;
2041207   +%let _usecgbydefault=;
2041208   +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
2041209   +    %let _usecgbydefault = N;
2041210   +    %getNObs(inds=_sample_train, nobs=_trainnobs);
2041211   +    %if &_trainnobs > 3000   %then %do;
2041212   +    %let _usecgbydefault = Y;
2041213   +   %end;
2041214   +%end;
2041216   +%svm_training(indata=_sample_train,
2041217   +              task=&_PROPERTY_TASK,
2041218   +              classtask =&_PROPERTY_CLASSTASK,
2041219   +              method = &_PROPERTY_METHOD,
2041220   +              outest=&EM_USER_OUTEST,
2041221   +              outfit=&EM_USER_SVMFITSTAT,
2041222   +              outclass=&EM_USER_OUTCLASS,
2041223   +              isValidationSet=&_isValidationSet,
2041224   +              testdata =&_testdata,
2041225   +              testout =&_testout,
2041226   +              validSource=&_validSource,
2041227   +              usecgbydefault=&_usecgbydefault
2041228   +              );
2041229   +run;
2041231   +%svm_score(indata=&EM_IMPORT_DATA,
2041232   +             inest=&EM_USER_OUTEST,
2041233   +             infit=&EM_USER_SVMFITSTAT,
2041234   +             inclass=&EM_USER_OUTCLASS,
2041235   +             outindata=  _tmpTrain ,
2041236   +             outscore = &EM_EXPORT_TRAIN,
2041237   +             targetLevel =&_targetLevel
2041238   +            );
2041240   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
2041241   +  %svm_score(indata=&EM_IMPORT_VALIDATE,
2041242   +             inest=&EM_USER_OUTEST,
2041243   +             infit=&EM_USER_SVMFITSTAT,
2041244   +             inclass=&EM_USER_OUTCLASS,
2041245   +             outindata=_tmpValid,
2041246   +             outscore = &EM_EXPORT_VALIDATE,
2041247   +             targetLevel =&_targetLevel
2041248   +            );
2041250   +%end;
2041251   +%if &EM_IMPORT_TEST  ne  %then %do;
2041252   +  %svm_score(indata=&EM_IMPORT_TEST,
2041253   +             inest=&EM_USER_OUTEST,
2041254   +             infit=&EM_USER_SVMFITSTAT,
2041255   +             inclass=&EM_USER_OUTCLASS,
2041256   +             outindata=_tmpTest,
2041257   +             outscore= &EM_EXPORT_TEST,
2041258   +             targetLevel =&_targetLevel
2041259   +            );
2041261   +%end;
2041263   +/*------------------ run decision codes ----------------------*/
2041265   +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
2041266   +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
2041268   +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
2041269   +filename _sffile_  "&decfile";
2041270   +%if %sysfunc(fexist(_sffile_)) %then
2041271   +%do;
2041272   +    data &EM_EXPORT_TRAIN;
2041273   +       set &EM_EXPORT_TRAIN;
2041274   +           %include _sffile_;
2041275   +    run;
2041276   +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
2041277   +    data &EM_EXPORT_VALIDATE;
2041278   +       set  &EM_EXPORT_VALIDATE;
2041279   +           %include _sffile_;
2041280   +    %end;
2041281   +    %if &EM_IMPORT_TEST  ne  %then %do;
2041282   +        data &EM_EXPORT_TEST;
2041283   +            set  &EM_EXPORT_TEST;
2041284   +            %include _sffile_;
2041285   +        run;
2041286   +    %end;
2041287   +%let rc = %sysfunc(fdelete(_sffile_));
2041288   +%end;
2041289   +filename _sffile_ ;
2041291   +%score_code(TargetLevel =&_targetLevel, type=FLOW);
2041292   +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
2041294   +%makeDeltaCode(TargetLevel =&_targetLevel);
2041297   +/* %put SYSError =  &SYSERR;  */
2041299   +%if &SYSERR > 0 %then %do;
2041300   +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
2041301   +      %goto ENDLINE;
2041302   +%end;
2041304   +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
2041304  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
2041304  !+Cutoff=0.5, Residual=Y)
2041305   +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
2041305  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
2041305  !+Cutoff=0.5, Residual=N)
2041306   +*/
2041309   +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
2041309  !+RESIDUALS=Y);
2041311   +/*------ Make data for report data ----------------*/
2041312   +%makeSVMFitStatDs;
2041314   +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
2041316   +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
2041318   +proc datasets lib = work nolist;
2041319   +      delete _outtrain  _sample_train ;
2041320   +run;
2041322   +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
2041323   +%if &_svnobs < 1   %then %do;
2041324   +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
2041325   +      %goto endline;
2041326   +%end;
2041329   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
2041330   +%makeTunData();
2041331   +%end;
2041334   +%ENDLINE:
2041336   +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.BINNING_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
2041338   +/*------------------------------------------------------------------
2041339   +  MACRO EXPLOREOBS
2041341   +  SUPPORT:  SASDHD - David Duling
2041342   +  PRODUCT:  Enterprise Miner
2041344   +  DESCRIPTION:
2041345   +  Generates maximum and default numbers of observations to
2041346   +  download for visualization depending on the record length.
2041348   +  Values were determined by trial and error using typical
2041349   +  Windows workstation configurations.
2041351   +  Discrete sets of values are returned so that user experience
2041352   +  will be consitent with similar sized data sets.
2041354   +  These macro variables are set:
2041355   +  _exploreobs_max -- maximum number of obs downloadable
2041356   +  _exploreobs_def -- default number of obs to be downloaded
2041357   +  _exploreobs_recl - record length.  Might be useful for reporting.
2041359   +  Use the _exploreobs_max to set limit the GUI selection of
2041360   +  observations for downloading.  The GUI selection for obs
2041361   +  could be reduced to "Default" and "Max".
2041363   +  Parameters
2041364   +  data=   libname.memname of input data
2041365   +  vars=   subset list of variables.
2041366   +          downloading 1 out of 500 really does work like downloading
2041367   +          1 out of 1 vars.  Users may select a subset of vars for
2041368   +                   visualizations.  Pass in the list as space delimited
2041369   +          var names.  If vars is not specified, the record length
2041370   +          of the entire data will be used.
2041371   +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
2041373   +  Control
2041374   +  Users may control the values by entering these macro variables.
2041375   +            EM_EXPLOREOBS_MAX
2041376   +            EM_EXPLOREOBS_DEFAULT
2041377   +  These values override the computed values.
2041379   +  Debugging
2041380   +  %let _exploreobs_debug=1 ;
2041381   +--------------------------------------------------------------------
2041382   +  HISTORY: 20APR2004. sasdhd. pushed.
2041383   +           18DEC2004. sasdhd. S0280556.
2041384   +           07SEP2007. sasdhd. HK1009586
2041385   +--------------------------------------------------------------------*/
2041387   +%macro exploreobs(data=,vars=, nbytes=) ;
2041389   +   /*--- variable definitions ---*/
2041390   +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
2041391   +   %local xobs xvars xlen vlen xi vname vlist ;
2041392   +   %local _exp_source _exp_notes ;
2041394   +   /*--- USER definitions ---*/
2041395   +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
2041397   +   /*--- variable intializations ---*/
2041398   +   %let _exploreobs_max=0 ;
2041399   +   %let _exploreobs_def=0 ;
2041400   +   %let _exploreobs_recl=0 ;
2041401   +   %let xvars= 0 ;
2041402   +   %let xlen = 0 ;
2041403   +   %let xobs = 0 ;
2041405   +   /*--- data error checks ---*/
2041406   +   %if "&data" eq "" %then %do ;
2041407   +            %put NOTE: DATA is not specified. ;
2041408   +            %goto term ;
2041409   +      %end ;
2041411   +   %let dsid=%sysfunc(open(&data)) ;
2041412   +   %if not &dsid %then %do ;
2041413   +            %put NOTE: DATA &data is not available. ;
2041414   +            %goto term ;
2041415   +      %end ;
2041417   +   /*--- if a vars list exists generate a subset ---*/
2041418   +   %if &vars ne %then %do ;
2041419   +         %let dsid=%sysfunc(close(&dsid)) ;
2041420   +         %if &_exploreobs_debug ne 1 %then %do ;
2041421   +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
2041422   +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
2041423   +                  options nosource nonotes ;
2041424   +         %end ;
2041425   +         data _exploreobs_temp_data ;
2041426   +         set &data(obs=0) ;
2041427   +          keep &vars ;
2041428   +         run;
2041429   +         %if &_exploreobs_debug ne 1 %then %do ;
2041430   +                  options &_exp_source &_exp_notes ;
2041431   +         %end ;
2041432   +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
2041433   +         %if &dsid eq 0 %then %do ;
2041434   +                  %put NOTE: Sample is not available.;
2041435   +                  %goto term ;
2041436   +            %end ;
2041437   +      %end ;
2041439   +   /*--- get var attributes ---*/
2041440   +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
2041441   +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
2041442   +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
2041443   +   %let dsid= %sysfunc(close(&dsid)) ;
2041445   +   /*--- set default and max obs ---*/
2041446   +   %let _exploreobs_recl=%eval(&xlen) ;
2041447   +   %if &_exploreobs_recl eq 0 %then %do ;
2041448   +             %let _exploreobs_max= 0 ;
2041449   +             %let _exploreobs_def= 0 ;
2041450   +             %goto term ;
2041452   +   %end ;
2041453   +   %else
2041454   +   %if &_exploreobs_recl le 32 %then %do ;
2041455   +             %let _exploreobs_max=100000 ;
2041456   +             %let _exploreobs_def= 10000 ;
2041457   +   %end ;
2041458   +   %else
2041459   +   %if &_exploreobs_recl le 128 %then %do ;
2041460   +             %let _exploreobs_max=60000 ;
2041461   +             %let _exploreobs_def= 6000 ;
2041462   +   %end ;
2041463   +   %else
2041464   +   %if &_exploreobs_recl lt 1000 %then %do ;
2041465   +             %let _exploreobs_max=20000 ;
2041466   +             %let _exploreobs_def= 2000 ;
2041467   +   %end ;
2041468   +   %else
2041469   +   %if &_exploreobs_recl lt 5000 %then %do ;
2041470   +             %let _exploreobs_max= 10000 ;
2041471   +             %let _exploreobs_def=  1000 ;
2041472   +   %end ;
2041473   +   %else
2041474   +   %if &_exploreobs_recl lt 20000 %then %do ;
2041475   +             %let _exploreobs_max= 5000 ;
2041476   +             %let _exploreobs_def=  500 ;
2041477   +   %end ;
2041478   +   %else %do ;
2041479   +             %let _exploreobs_max= 1000 ;
2041480   +             %let _exploreobs_def=  200 ;
2041481   +   %end ;
2041483   +   /*--- Users options ---*/
2041484   +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
2041485   +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
2041486   +   %end;
2041487   +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
2041488   +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
2041489   +   %end;
2041491   +    /*--- S0868273 ---*/
2041492   +    %if "&NBYTES" ne "" %then %do;
2041493   +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
2041494   +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
2041495   +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
2041495  !+&EM_EXPLOREOBS_MAX));
2041496   +       %end;
2041498   +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
2041499   +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
2041500   +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
2041500  !+&EM_EXPLOREOBS_DEFAULT));
2041501   +          %if ^&_exploreobs_def %then
2041502   +              %let _exploreobs_def = 1;
2041504   +       %end;
2041505   +    %end;
2041507   +   /*--- Terminate ---*/
2041508   +   %term:
2041510   +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
2041510  !+max=&_exploreobs_max : def= &_exploreobs_def ;
2041511   +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.BINNING_TRAIN;
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM4_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM4_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.BINNING_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.BINNING_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.BINNING_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.BINNING_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   Year_Birth _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   Custid DepVar GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt 
GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases 
GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 18 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM4_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM4_SVMFITSTAT outclass= EMWS8.SVM4_OUTCLASS outest= EMWS8.SVM4_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt GRP_MntFishProducts 
GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases GRP_NumDistPurchases 
GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency Year_Birth
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM4_OUTCLASS has 56 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 54 
      variables.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 26 variables.
NOTE: The data set EMWS8.SVM4_OUTEST has 5 observations and 59 variables.
NOTE: The data set EMWS8.SVM4_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 64839
*** Time for Optimization: 863
*** Total Processing Time: 864
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM4_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 1785-1789.
NOTE: PROCEDURE SVM used (Total process time):
      real time           14:23.56
      cpu time            14:08.56
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.BINNING_TRAIN inest=EMWS8.SVM4_OUTEST 
infit=EMWS8.SVM4_SVMFITSTAT inclass=EMWS8.SVM4_OUTCLASS 
out=EMWS8.SVM4_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 65 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=28. April 2016 01.48 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM4_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM4_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas.
2041514   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2041515   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
2041516   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2041517   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
2041518   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
2041519   +if
2041520   + F_DepVar ne '1'
2041521   +and F_DepVar ne '0'
2041522   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
2041523   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
2041524   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
2041525   +end;
MPRINT(SVM_SCORE):   end;
2041526   +else do;
MPRINT(SVM_SCORE):   else do;
2041527   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
2041528   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
2041529   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
2041530   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
2041531   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
2041532   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
2041533   +end;
MPRINT(SVM_SCORE):   end;
2041534   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM4_TRAIN.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.BINNING_VALIDATE inest=EMWS8.SVM4_OUTEST 
infit=EMWS8.SVM4_SVMFITSTAT inclass=EMWS8.SVM4_OUTCLASS 
out=EMWS8.SVM4_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM4_VALIDATE has 1018 observations and 65 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=28. April 2016 01.48 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM4_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM4_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas.
2041535   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2041536   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
2041537   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2041538   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
2041539   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
2041540   +if
2041541   + F_DepVar ne '1'
2041542   +and F_DepVar ne '0'
2041543   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
2041544   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
2041545   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
2041546   +end;
MPRINT(SVM_SCORE):   end;
2041547   +else do;
MPRINT(SVM_SCORE):   else do;
2041548   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
2041549   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
2041550   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
2041551   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
2041552   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
2041553   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
2041554   +end;
MPRINT(SVM_SCORE):   end;
2041555   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM4_VALIDATE.
NOTE: The data set EMWS8.SVM4_VALIDATE has 1018 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
2041556    data SVM4_SCORE/view=SVM4_SCORE;
MPRINT(EM_DECIDECODE):   data SVM4_SCORE/view=SVM4_SCORE;
2041557    set EMWS8.SVM4_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM4_TRAIN;
2041558    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM4_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
2041559    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
2041560    * SVM4: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM4: Create decision matrix;
2041561    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
2041562    data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
2041563      length   DepVar                           $  32
2041564               COUNT                                8
2041565               DATAPRIOR                            8
2041566               TRAINPRIOR                           8
2041567               DECPRIOR                             8
2041568               DECISION1                            8
2041569               DECISION2                            8
2041570               ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
2041571    
2041572      label    COUNT="Level Counts"
2041573               DATAPRIOR="Data Proportions"
2041574               TRAINPRIOR="Training Proportions"
2041575               DECPRIOR="Decision Priors"
2041576               DECISION1="1"
2041577               DECISION2="0"
2041578               ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
2041579      format   COUNT 10.
2041580               ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
2041581    DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
2041581  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
2041582    output;
MPRINT(EM_DECIDECODE):   output;
2041583    DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
2041583  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
2041584    output;
MPRINT(EM_DECIDECODE):   output;
2041585    ;
MPRINT(EM_DECIDECODE):   ;
2041586    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2041587    proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
2041588    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
2041589    label DECISION1= '1';
2041590    label DECISION2= '0';
2041591    run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
2041592    quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.06 seconds
      

2041593    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
2041594    * SVM4 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM4 Generate decision score code;
2041595    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
2041596    run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM4_OUTEST 
infit=EMWS8.SVM4_SVMFITSTAT inclass=EMWS8.SVM4_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=28. April 2016 10.07 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM4_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 59 variables.
2041597    %em_copyfile(infref=#LN16603, outfref=#LN16602, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN16602 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN16603",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN16602 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=28. April 2016 10.07 Uhr

NOTE: 168 records were written to the file #LN16602.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
2041598    %em_copyfile(infref=#LN16605, outfref=#LN16604, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN16604 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN16605",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN16604 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=12953,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=28. April 2016 10.07 Uhr

NOTE: 65 records were written to the file #LN16604.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 56 observations read from the data set EMWS8.SVM4_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 56 observations and 9 variables.
2041599    %em_copyfile(infref=#LN16607, outfref=#LN16606, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN16606 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN16607",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN16606 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=16325,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=28. April 2016 10.07 Uhr

NOTE: 126 records were written to the file #LN16606.
      The minimum record length was 1.
      The maximum record length was 155.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=25082,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=28. April 2016 10.07 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.07 Uhr,
      Create Time=27. April 2016 22.52 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM4_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_SVMFITSTAT.
NOTE: The data set EMWS8.SVM4_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM4_SVMFITDS out =EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM4_SVMFITDS.
NOTE: The data set EMWS8.SVM4_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM4_SVMFITDS.
NOTE: The data set EMWS8.SVM4_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM4_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM4_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM4_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM4_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM4_TRAIN.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 70 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM4_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM4_TRAIN EMWS8.SVM4_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM4_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM4_OUTALPHA.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 71 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM4_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM4_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM4_OUTALPHA.
NOTE: The data set EMWS8.SVM4_OUTALPHA has 280 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM4_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      16:34   
NOTE: There were 280 observations read from the data set EMWS8.SVM4_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM4_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM4_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM4_TUNINGCRIT.
NOTE: The data set EMWS8.SVM4_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2041600    
2041601    *------------------------------------------------------------*;
2041602    * End TRAIN: SVM4;
2041603    *------------------------------------------------------------*;

2041604    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
2041605    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
2041606    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2041607    ;
MPRINT(EM_DIAGRAM):   ;
2041608    ;
MPRINT(EM_DIAGRAM):   ;
2041609    ;
MPRINT(EM_DIAGRAM):   ;
2041610    ;
MPRINT(EM_DIAGRAM):   ;
2041611    quit;
MPRINT(EM_DIAGRAM):   quit;
2041612    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2041613    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
2041614    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2041615    /*; *"; *'; */
2041616    ;
MPRINT(EM_DIAGRAM):   ;
2041617    run;
MPRINT(EM_DIAGRAM):   run;
2041618    quit;
MPRINT(EM_DIAGRAM):   quit;
2041619    /* Reset EM Options */
2041620    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
2041621    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
2041622    goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
