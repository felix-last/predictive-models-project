MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                16.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O34XG5WM 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O34XG5WM new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.26 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.26 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
871238     proc freq data=EMWS8.SVM4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM4_VariableSet noprint;
871239     table ROLE*LEVEL/out=WORK.SVM4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM4META;
871240     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 53 observations read from the data set EMWS8.SVM4_VARIABLESET.
NOTE: The data set WORK.SVM4META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

871241     proc print data=WORK.SVM4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM4META label noobs;
871242     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
871243     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
871243   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
871243   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
871244     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
871245     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
871246     run;

NOTE: There were 8 observations read from the data set WORK.SVM4META.
NOTE: The PROCEDURE PRINT printed page 615.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

871247     title10;
MPRINT(EM_DIAGRAM):   title10;
871248     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN 
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN 
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN 
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.BINNING_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM4_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM4_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM4_DepVar_DD 
out=EMWS8.SVM4_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
871295     data WORK.SVM4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
871296     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
871297     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
871297   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
871297   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
871298        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
871298   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
871298   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
871299     set EMWS8.SVM4_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM4_DEPVAR_DM( where=(_TYPE_="TARGET"));
871300     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
871301     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
871302     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
871303     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
871304     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
871305     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
871306     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
871307     end;
MPRINT(EM_DIAGRAM):   end;
871308     output;
MPRINT(EM_DIAGRAM):   output;
871309     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

871310     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
871311     proc print data=WORK.SVM4_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM4_EVENT noobs label;
871312     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
871313     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
871314     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
871315     run;

NOTE: There were 1 observations read from the data set WORK.SVM4_EVENT.
NOTE: The PROCEDURE PRINT printed page 616.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

871316     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
871317     proc print data = EMWS8.SVM4_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM4_DepVar_DM noobs label;
871318     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
871319     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
871320     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
871320   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
871320   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
871321     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
871322     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
871323     run;

NOTE: There were 7 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 617.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

871324     title10;
MPRINT(EM_DIAGRAM):   title10;
871325     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM4: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM4: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM4_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM4_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM4_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM4_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
871837     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
871838     * SVM4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM4: Generation of macros and macro variables;
871839     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
871840     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

871841     %let EMEXCEPTIONSTRING=;
871842     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
871843     * TRAIN: SVM4;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM4;
871844     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
871845     %let EM_ACTION = TRAIN;
871846     %let syscc = 0;
871847     %macro main;
871848     
871849        filename temp catalog 'sashelp.emmodl.svm_macros.source';
871850        %include temp;
871851        filename temp;
871852        %SetProperties;
871853        %if %upcase(&EM_ACTION) = CREATE %then %do;
871854            filename temp catalog 'sashelp.emmodl.svm_create.source';
871855            %include temp;
871856            filename temp;
871857            %create;
871858        %end;
871859        %else
871860        %if %upcase(&EM_ACTION) = TRAIN %then %do;
871861            filename temp catalog 'sashelp.emmodl.svm_train.source';
871862            %include temp;
871863            filename temp;
871864            %train;
871865        %end;
871866        %else
871867        %if %upcase(&EM_ACTION) = REPORT %then %do;
871868            filename temp catalog 'sashelp.emmodl.svm_report.source';
871869            %include temp;
871870            filename temp;
871871            %report;
871872        %end;
871873     
871874     %mend main;
871875     
871876     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
871878    +%macro SetProperties;
871879    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
871880    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
871881    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
871882    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
871883    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
871884    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
871885    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
871886    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
871887    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
871888    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
871889    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
871890    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
871891    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
871892    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
871893    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
871894    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
871895    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
871896    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
871897    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
871898    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
871899    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
871900    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
871901    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
871902    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
871903    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
871904    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
871905    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
871906    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
871907    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
871908    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
871909    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
871910    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
871911    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
871912    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
871913    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
871914    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
871915    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
871916    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
871917    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
871918    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
871919    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
871920    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
871921    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
871922    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
871923    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
871924    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
871925    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
871926    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
871927    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
871928    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
871930    +%mend SetProperties;
871933    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
871935    +  %local emclassout emvarout;
871937    +   proc dmdb batch dmdbcat= _emdmdb
871939    +   %if &out ne 0 %then %do ;
871940    +       data=&indata out= _emdmdb &emclassout &emvarout;
871941    +   %end ;
871942    +   %else %do ;
871943    +       data=&indata &emclassout &emvarout;
871944    +   %end ;
871946    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
871947    +   %if %em_class   ne  %then %do ;
871948    +       class %EM_CLASS;
871949    +   %end ;
871950    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
871951    +   %if %em_target ne %then %do ;
871952    +          target %em_target ;
871953    +   %end ;
871954    +   run ;
871955    +%mend make_dmdb;
871958    +%macro svm_training(indata=,
871959    +                    task=,
871960    +                    classtask=,
871961    +                    method=,
871962    +                    outest =,
871963    +                    outclass =,
871964    +                    outfit =,
871965    +                    isValidationSet =,
871966    +                    testdata =,
871967    +                    testout =,
871968    +                    validSource=,
871969    +                    usecgbydefault=
871970    +                    );
871972    +%make_dmdb(indata=&indata, out=1);
871974    +options debug="nlpitermsg=2";
871976    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
871977    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
871978    +ods output tun_crt = &EM_USER_TUNINGCRIT;
871979    +%end;
871981    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
871982    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
871983    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
871984    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
871986    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
871987    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
871988    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
871989    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
871992    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
871993    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
871994    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
871995    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
871997    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
871998    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
871999    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
872000    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
872003    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
872004    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
872005    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
872006    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
872009    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
872010    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
872011    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
872012    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
872013    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
872014    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
872015    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
872016    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
872017    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
872018    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
872019    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
872020    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
872024    +proc svm data= _emdmdb
872025    +         dmdbcat= _emdmdb
872026    +         nomonitor
872027    +         outfit= &outfit
872028    +         outclass= &outclass
872029    +         outest= &outest
872030    +         out = _outtrain
872031    +         maxiter = &_PROPERTY_MAXITER
872032    +         maxfunc = &_PROPERTY_MAXFUNC
872033    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
872034    +         gconv =   &_PROPERTY_GCONV
872035    +         absgconv = &_PROPERTY_ABSGCONV
872036    +         xconv =   &_PROPERTY_XCONV
872037    +         absxconv = &_PROPERTY_ABSXCONV
872039    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
872040    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
872041    +             xscale
872042    +         %end;
872043    +         %else %do;
872044    +             noscale
872045    +         %end;
872046    +    %end;
872047    +    %if &task eq CLASSIFICATION %then %do;
872048    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
872049    +         method= &method
872050    +        %end;
872051    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
872052    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
872053    +        %end;
872054    +        %else %do;
872055    +         method= &EM_PROPERTY_METHOD
872056    +        %end;
872057    +    %end;
872058    +    %else %do;
872059    +         method= &method  task=&classtask
872060    +         /*%if &classtask eq EPS_REG %then %do; */
872061    +             esp=&_PROPERTY_EPSILON
872062    +         /*%end;*/
872063    +    %end;
872065    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
872066    +         kernel = &EM_PROPERTY_KERNEL
872067    +    %end;
872068    +    %else %do;
872069    +         kernel = Linear
872070    +    %end;
872072    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
872074    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
872075    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
872076    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
872077    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
872078    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
872079    +            tun = &EM_PROPERTY_TUNINGMETHOD
872080    +        %end;
872082    +    %end;
872084    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
872085    +         CV  = &EM_PROPERTY_CVMETHOD
872086    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
872087    +         fold = &EM_PROPERTY_CVFOLD
872088    +         %end;
872089    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
872090    +                testdata = &testdata
872091    +         %end;
872092    +    %end;
872094    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
872095    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
872096    +    %end;
872098    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
872099    +    &EM_PROPERTY_PRINTOPTION
872100    +    %end;
872102    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
872103    +    POPTHIS
872104    +    %end;
872105    +    ;
872106    +    var %EM_INPUT %EM_REJECTED;
872107    +    target %EM_TARGET;
872109    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
872111    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
872112    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
872113    +             by &_PROPERTY_TUN_C_BY
872114    +             ;
872115    +         %end;
872116    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
872117    +             C  &_PROPERTY_USERCVALUE ;
872118    +         %end;
872120    +     %end;
872121    +     %else %do;
872122    +           C  &_PROPERTY_USERCVALUE ;
872123    +     %end;
872126    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
872128    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
872129    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
872130    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
872131    +                  by &_PROPERTY_POLY_TUN_KP1_BY
872132    +                ;
872133    +             %end;
872134    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
872135    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
872136    +             %end;
872137    +          %end;
872138    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
872139    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
872140    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
872141    +                ;
872142    +              %end;
872143    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
872144    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
872145    +              %end;
872146    +           %end;
872147    +           %else %do;
872148    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
872149    +           %end;
872150    +    %end;
872152    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
872153    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
872154    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
872155    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
872156    +                  by &_PROPERTY_RBF_TUN_KP1_BY
872157    +                  ;
872158    +              %end;
872159    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
872160    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
872161    +              %end;
872162    +          %end;
872163    +          %else %do;
872164    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
872165    +          %end;
872166    +    %end;
872169    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
872171    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
872173    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
872174    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
872175    +                by &_PROPERTY_SGMD_TUN_KP1_BY
872176    +             ;
872177    +             %end;
872178    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
872179    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
872180    +             %end;
872182    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
872183    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
872184    +                by &_PROPERTY_SGMD_TUN_KP2_BY
872185    +             ;
872186    +             %end;
872187    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
872188    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
872189    +             %end;
872190    +          %end;
872191    +          %else %do;
872192    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
872193    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
872194    +          %end;
872195    +    %end;
872197    +run;
872198    +%TRAINENDLINE:
872199    +quit;
872200    +%mend svm_training;
872202    +%macro svm_score(indata=,
872203    +                 inest=,
872204    +                 infit=,
872205    +                 inclass=,
872206    +                 outindata=,
872207    +                 outscore=,
872208    +                 targetLevel=
872209    +                 );
872212    +%if &TargetLevel eq BINARY %then %do;
872214    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
872216    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
872217    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
872218    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
872219    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
872222    +%do %while(^ %sysfunc(fetch(&dsid)));
872223    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
872224    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
872225    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
872226    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
872227    +%end;
872229    +%let dsid = %sysfunc(close(&dsid));
872232    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
872233    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872235    +%do %while(^ %sysfunc(fetch(&dsid)));
872236    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
872237    +%end;
872238    +%let dsid = %sysfunc(close(&dsid));
872240    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
872241    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872243    +%do %while(^ %sysfunc(fetch(&dsid)));
872244    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
872245    +%end;
872246    +%let dsid = %sysfunc(close(&dsid));
872249    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
872250    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
872251    +run;
872253    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
872254    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
872254   !+from a part of %EM_MODEL() macro */
872256    +data &outscore(drop=_P);
872257    +      set  &outscore;
872258    +     if (_P_ < -600) then _p =0;
872259    +     else _P = 1/(1+EXP((-1)*(_P_)));
872261    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
872262    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872263    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
872265    +%do %while(^ %sysfunc(fetch(&dsid)));
872266    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
872267    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
872268    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
872269    +       &P_Var = _P;
872270    +   %end;
872271    +   %else %do;
872272    +       &P_Var = 1 - _P;
872273    +       %let targetNonEvent = &P_LEVEL;
872274    +   %end;
872275    +%end;
872276    +%let dsid = %sysfunc(close(&dsid));
872278    +%include resifref;
872280    +run;
872282    +filename resifref;
872284    +%end; /* the end of if - targetlevel eq binary */
872285    +%else %do;
872287    +/* ----     interval target  ------ */
872289    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
872290    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872292    +%do %while(^ %sysfunc(fetch(&dsid)));
872293    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
872294    +%end;
872295    +%let dsid = %sysfunc(close(&dsid));
872297    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
872298    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872300    +%do %while(^ %sysfunc(fetch(&dsid)));
872301    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
872302    +%end;
872304    +%let dsid = %sysfunc(close(&dsid));
872306    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
872307    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
872308    +run;
872310    +%end; /* end of targetlevel eq interval */
872313    +%mend svm_score;
872316    +%macro makeSVMFitStatDs();
872318    +data &EM_USER_SVMFITDS;
872319    +     set &EM_USER_SVMFITSTAT;
872320    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
872320   !+noquote))";
872321    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
872321   !+rpt_svmfitstat_label_k_par2, noquote))";
872322    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
872322   !+rpt_svmfitstat_label_k_par3, noquote))";
872323    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
872323   !+ noquote))";
872324    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
872324   !+noquote))";
872325    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
872325   !+rpt_svmfitstat_label_margin, noquote))";
872326    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
872326   !+ noquote))";
872327    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
872327   !+noquote))";
872328    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
872328   !+noquote))";
872329    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
872329   !+noquote))";
872330    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
872330   !+noquote))";
872331    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
872331   !+noquote))";
872332    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
872332   !+rpt_svmfitstat_label_ntrain, noquote))";
872333    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
872333   !+ noquote))";
872334    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
872334   !+ noquote))";
872335    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
872335   !+noquote))";
872336    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
872336   !+rpt_svmfitstat_label_radius, noquote))";
872337    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
872337   !+noquote))";
872338    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
872338   !+noquote))";
872339    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
872339   !+ noquote))";
872340    +    if _TYPE_ ='_ACCTAB_' then delete;
872341    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
872342    +      _BIAS_= _K_PAR_;
872343    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
872344    +    %end;
872345    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
872346    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
872347    +    %end;
872348    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
872349    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
872350    +    %end;
872351    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
872352    +      DROP _K_PAR3_  _L1_;
872353    +    %end;
872354    +run;
872356    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
872357    +run;
872359    +data &EM_USER_SVMFITDS;
872360    +     set &EM_USER_SVMFITDS;
872361    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
872361   !+;
872362    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
872363    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
872363   !+noquote))";
872364    +     Rename COL1 = Train;
872365    +     if _NAME_ = '_ACCU_' then delete;
872366    +run;
872368    +%mend makeSVMFitStatDs;
872370    +%macro svm_fitstat(validSource=);
872372    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
872373    +            %if &_validSource= VALIDSET %then %do;
872374    +                validDs=work._tmp_scored_test,
872375    +                testDs=,
872376    +            %end;
872377    +            %else %if &_validSource= TESTSET %then %do;
872378    +                validDs=,
872379    +                testDs=work._tmp_scored_test,
872380    +            %end;
872381    +            decdata=&EM_DEC_DECDATA,
872382    +            decmeta=&EM_DEC_DECMETA,
872383    +            freqvar=, df=,
872384    +            outfit=&EM_DATA_EMOUTFIT);
872386    +data &EM_DATA_EMOUTFIT;
872387    +     set &EM_DATA_EMOUTFIT;
872388    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
872388   !+_SBC_; /* Because of DF */
872389    +run;
872390    +%mend svm_fitstat;
872392    +/*----------------------------------------------------------------------------------
872392   !+-----
872393    +   OUTEST data set
872395    +                                                       APRTMNT_  APRTMNT_   TELIND_
872395   !+  TELIND_
872396    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
872396   !+     2_
872398    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
872398   !+   0.97609
872399    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
872399   !+   0.15280
872400    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
872400   !+  -0.07311
872402    +=-----------------------------------------------------------------------------------
872402   !+--*/
872403    +/* this is not used, generate score code directly for the case of linear svm */
872404    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
872404   !+Residual=);
872406    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
872408    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
872409    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
872410    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
872411    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
872412    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
872414    +%do %while(^ %sysfunc(fetch(&dsid)));
872415    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
872416    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
872417    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
872418    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
872419    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
872420    +%end;
872421    +%let dsid = %sysfunc(close(&dsid));
872423    +data _cmeta;
872424    +    set &ColumnsMeta;
872425    +    NAME = upcase(strip(NAME));
872426    +run;
872428    +data _tmpclass;
872429    +       set &outclass;
872430    +   _VAR_ = upcase(strip(_VAR_));
872431    +run;
872433    +proc sql;
872434    +create table _outclass as
872435    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
872436    +  from  _tmpclass, _cmeta
872437    +  where _tmpclass._VAR_ = _cmeta.NAME;
872438    +run;
872440    +data _outclass;
872441    +    set _outclass;
872442    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
872443    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
872444    +run;
872445    +data _meands;
872446    +    set &outest;
872447    +    if _TYPE_='_MEAN_';
872448    +run;
872450    +/*
872451    +data _null_;
872452    +    set &outest;
872453    +    if _TYPE_='_PARMS_';
872454    +    call symput('bias', _STDEV_ );
872455    +    call symput('intercept', _MEAN_ );
872456    +run;
872457    +*/
872459    +filename  _File_ "&File";
872460    +data _null_;
872461    +    FILE _File_;
872462    +    length _line $500;
872463    +    drop _line;
872465    +    put ' ';
872466    +    put '/*-------------------------------------------------*/';
872467    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
872468    +    put '/*-------------------------------------------------*/';
872469    +    put ' ';
872471    +    put 'length _warn_ $ 4;';
872472    +    put 'label _warn_ = "Warnings";';
872473    +    put 'length _svm_uname $32;';
872474    +    put 'DROP _svm_uname ;';
872476    +  dsid = open("work._outclass");
872477    +    if dsid then do;
872478    +          oldvname ='';
872479    +          do while(not fetch(dsid));
872480    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
872481    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
872482    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
872483    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
872484    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
872485    +             *put 'vtype =' vtype;
872486    +             *put 'vformat=' vformat;
872488    +             if oldname ne vname then do;
872489    +                 if vtype = 'N' then do;
872490    +                     if vformat eq ' ' then do;
872491    +                        put '_svm_uname = put(' vname ', Best12.);';
872492    +                     end; else do;
872493    +                        put '_svm_uname = put(' vname ',' vformat ');';
872494    +                     end;
872495    +                  end;
872496    +                  else do;
872497    +                     if vformat eq ' ' then do;
872498    +                        put '_svm_uname = ' vname ' ;';
872499    +                     end; else do;
872500    +                        put '_svm_uname = put(' vname ',' vformat ');';
872501    +                     end;
872502    +                  end;
872503    +                  put '%DMNORMIP(_svm_uname);';
872504    +              end; /* end of oldname ne vname */
872506    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
872507    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
872508    +              put _line;
872509    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
872509   !+;';
872510    +              oldname = vname;
872511    +          end;
872513    +     end;
872514    +rc=close(dsid);
872516    +dsid = open("&outest");
872517    +    if dsid then do;
872518    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
872518   !+noquote))"  "------ */";
872519    +          ncol = attrn(dsid, 'NVARS');
872520    +          do i=4 to ncol;
872521    +             vname = upcase(trim(left(varname(dsid,i))));
872522    +              do while(not fetch(dsid));
872523    +                  type = strip(getvarc(dsid,2));
872524    +                  select(type);
872525    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
872526    +                      when('_STDEV_') std  =  getvarn(dsid, i);
872527    +                      when('_PARMS_') coeff = getvarn(dsid, i);
872528    +                  otherwise;
872529    +                  end;
872530    +              end; /* end of do-while*/
872531    +              *put '+' coeff '*(' vname '-' mean ')/' std;
872532    +              if i=4 then  do; put '_P_ =(' coeff ; end;
872533    +              else if i=5 then do; put '+' coeff ');' ; end;
872534    +              else do;
872535    +                      tmpvar = '_TMPVAR'||strip(i);
872536    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
872537    +                      put 'else ' tmpvar '=' vname ';';
872538    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
872539    +                      put 'drop  ' tmpvar ';';
872540    +              end;
872541    +              rc=rewind(dsid);
872542    +         end; /* end of  do i=6 to &nvars; */
872543    +         put ';';
872544    +     end;
872545    +    rc=close(dsid);
872546    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
872546   !+"------ */";
872548    +%if &TargetLevel eq BINARY %then %do;
872550    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
872551    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872552    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
872554    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
872555    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
872557    +%do %while(^ %sysfunc(fetch(&dsid)));
872558    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
872559    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
872560    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
872561    +       put " &P_Var = _P;";
872562    +   %end;
872563    +   %else %do;
872564    +       put " &P_Var = 1 - _P;";
872565    +   %let targetNonEvent = &P_LEVEL;
872566    +   %end;
872567    +%end;
872568    +%let dsid = %sysfunc(close(&dsid));
872570    +%if &Residual = Y %then %do;
872572    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
872572   !+"------ */";
872574    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
872575    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872576    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
872578    +   %do %while(^ %sysfunc(fetch(&dsid)));
872579    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
872580    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
872581    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
872582    +       put " &R_Var = 1 - _P;";
872583    +   %end;
872584    +   %else %do;
872585    +       put " &R_Var = 0 - (1 - _P);";
872586    +   %end;
872587    +   %end;
872588    +   %let dsid = %sysfunc(close(&dsid));
872589    +%end;
872590    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
872590   !+"------ */";
872592    +    put 'length _FORMAT_VAR $200;';
872593    +    put 'length _TARGNOR $%DMNORLEN; ';
872594    +    put 'DROP _FORMAT_VAR _TARGNOR;';
872595    +    %if &TargetFormat ne  %then %do;
872596    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
872597    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
872598    +    %end;
872599    +    %else %do;
872600    +    %if &TargetType  = N  %then %do;
872601    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
872602    +       %end;
872603    +       %else %do;
872604    +    put "_FORMAT_VAR= &TargetVar;";
872605    +       %end;
872606    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
872607    +    %end;
872609    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
872610    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
872611    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
872613    +    %do %while(^ %sysfunc(fetch(&dsid)));
872614    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
872615    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
872616    +        %let qF_var_label = %str(%"&F_var_label%");
872617    +    put "&F_var = _TARGNOR ;";
872618    +    put "label &F_var = &qF_Var_label;";
872619    +    %end;
872620    +    %let dsid = %sysfunc(close(&dsid));
872622    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
872622   !+"------ */";
872624    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
872625    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872626    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
872628    +%do %while(^%sysfunc(fetch(&dsid)));
872629    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
872630    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
872631    +   %let qI_var_label = %str(%"&I_var_label%");
872632    +   %let qTargetEvent = %str(%"&targetEvent%");
872633    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
872634    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
872635    +       put " else &I_Var  =  &qtargetNonEvent ;";
872636    +       put " label &I_var = &qI_var_label;";
872637    +%end;
872638    +%let dsid = %sysfunc(close(&dsid));
872640    +%end;  /* end of TargetLevel= Binary */
872642    +%else %if &TargetLevel eq INTERVAL %then %do;
872644    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
872645    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872646    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
872648    +%do %while(^ %sysfunc(fetch(&dsid)));
872649    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
872650    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
872651    +   %let qP_label = %str(%"&P_label%");
872652    +    put " &P_Var = _P_;";
872653    +    put " label &P_Var = &qP_label;";
872654    +%end;
872655    +%let dsid = %sysfunc(close(&dsid));
872657    +%if &Residual = Y %then %do;
872659    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
872659   !+"------ */";
872661    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
872662    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872663    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
872665    +   %do %while(^ %sysfunc(fetch(&dsid)));
872666    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
872667    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
872668    +     %let qR_label = %str(%"&R_label%");
872669    +       put " &R_Var = &TargetVar - &P_var;";
872670    +       put " label &R_Var = &qR_label;";
872671    +   %end;
872672    +   %let dsid = %sysfunc(close(&dsid));
872673    +%end;
872675    +%end;   /* end of TargetLevel= Interval */
872677    +  put "/*------------------------------------------------------------*/";
872678    +proc datasets lib=work nolist;
872679    + delete _tmpclass _cmeta _outclass;
872680    +run;
872681    +run;
872683    +filename  _File_;
872685    +%mend gen_score;
872687    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
872688    +%global &nLevel;
872689    +proc dmdb batch data=&indata
872690    +classout=_tmp_dmdbout;
872691    +class &target;
872692    +run;
872693    +data _tmp_dmdbout;
872694    +    set _tmp_dmdbout;
872695    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
872696    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
872697    +run;
872698    +data _null_;
872699    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
872700    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
872701    +    %let dsid = %sysfunc(close(&dsid));
872702    +     call symput("&nLevel", put(&_obs, Best12.));
872703    +run;
872705    +proc datasets lib=work nolist;
872706    +     delete _tmp_dmdbout;
872707    +run;
872708    +quit;
872709    +%Mend CheckBinaryTargetLevel;
872712    +%macro getNObs(inds=, nobs=);
872713    +    %global &nobs;
872714    +    data _null_;
872715    +        set &inds end=eof;
872716    +        if eof then call symput("&nobs", _N_);
872717    +    run;
872718    +    quit;
872719    +%mend  getNObs;
872723    +%macro makeAlphaDs(target=, cmeta=);
872725    + %let isOBSIndex= N;
872726    + %let dsid = %sysfunc(open(&cmeta));
872727    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
872728    + %do %while(^%sysfunc(fetch(&dsid)));
872729    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
872730    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
872731    + %end;
872732    + %let dsid = %sysfunc(close(&dsid));
872734    +data &EM_USER_OUTALPHA;
872735    +     set _sample_train;
872736    +     set _outtrain(keep=_ALPHA_ _BOUND_);
872737    +     %if &isOBSIndex= N %then %do;
872738    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
872739    +     %end;
872740    +     %else %do;
872741    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
872742    +     %end;
872743    +run;
872745    +data &EM_EXPORT_TRAIN;
872746    +     length _OBS_ 8;
872747    +     set &EM_EXPORT_TRAIN;
872748    +     _OBS_ = _N_;
872749    +run;
872751    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
872752    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
872753    +     by _OBS_;
872754    +     if _ALPHA_ =. then _ALPHA_=0;
872755    +     if _BOUND_ ="" then _BOUND_="_LBC";
872756    +run;
872758    +data &EM_USER_OUTALPHA;
872759    +   set &EM_USER_OUTALPHA;
872760    +   if _ALPHA_ = 0 then delete;
872761    +   %if &isOBSIndex= N %then %do;
872762    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
872763    +   rename _OBS_ = _dataobs_;
872764    +   %end;
872765    +   %else %do;
872766    +   drop _OBS_;
872767    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
872767   !+noquote))";
872768    +   %end;
872769    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
872770    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
872771    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
872772    +   run;
872774    +%mend makeAlphaDs;
872777    +%macro makeTunData();
872778    +data &EM_USER_TUNINGCRIT;
872779    +    set &EM_USER_TUNINGCRIT;
872780    +    Drop N;
872781    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
872782    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
872783    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
872784    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
872785    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
872786    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
872787    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
872787   !+noquote))";
872788    +run;
872789    +%mend makeTunData;
872791    +/*------------------ Score Code Generation with Proc SVMScore
872791   !+----------------------  */
872794    +%macro score_code(TargetLevel=, type=);
872796    +%let _inoutest = WORK._inoutest ;
872797    +%let _inoutfit = WORK._inoutfit ;
872798    +%let _inoutclass = WORK._inoutclass;
872800    +%if &type eq FLOW %then %do;
872801    +    %let _inoutest = &EM_USER_OUTEST;
872802    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
872803    +    %let _inoutclass = &EM_USER_OUTCLASS;
872804    +%end;
872805    +%else %do;
872806    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
872806   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
872807    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
872807   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
872808    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
872808   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
872809    +%end;
872811    +%let emscoreout = %str(&)%str(em_score_output);
872814    +%if &type eq FLOW %then %do;
872815    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
872816    +%end;
872817    +%else %do;
872818    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
872819    +%end;
872821    +data _null_;
872822    +    FILE _File_ MOD;
872824    +    put ' ';
872825    +    put '/*-------------------------------------------------*/';
872826    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
872826   !+;
872827    +    put '/*-------------------------------------------------*/';
872828    +    put ' ';
872830    +%if &TargetLevel eq BINARY %then %do;
872832    +/*%put &emscoreout;  */
872834    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
872835    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872837    +%do %while(^ %sysfunc(fetch(&dsid)));
872838    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
872840    +%end;
872841    +%let dsid = %sysfunc(close(&dsid));
872843    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
872844    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872846    +%do %while(^ %sysfunc(fetch(&dsid)));
872847    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
872849    +%end;
872850    +%let dsid = %sysfunc(close(&dsid));
872853    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
872853   !+inclass=&_inoutclass";
872854    +    %if &type eq FLOW %then %do;
872855    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
872856    +    %end;
872857    +    %else %do;
872858    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
872859    +    %end;
872860    +    put ";";
872861    +    put "run;";
872864    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
872866    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
872867    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
872868    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
872869    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
872872    +%do %while(^ %sysfunc(fetch(&dsid)));
872873    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
872874    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
872875    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
872876    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
872877    +%end;
872879    +%let dsid = %sysfunc(close(&dsid));
872881    +    put "data &emscoreout(drop=_P);";
872882    +    put "     set &emscoreout;";
872883    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
872884    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
872886    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
872887    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872888    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
872890    +%do %while(^ %sysfunc(fetch(&dsid)));
872891    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
872892    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
872893    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
872894    +    put " &P_Var = _P ;";
872895    +   %end;
872896    +   %else %do;
872897    +    put " &P_Var = 1 - _P ;";
872898    +    %let targetNonEvent = &P_LEVEL;
872899    +   %end;
872900    +%end;
872901    +%let dsid = %sysfunc(close(&dsid));
872903    +%end; /* the end of if - targetlevel eq binary */
872904    +%else %do;
872906    +/* ----     interval target  ------ */
872908    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
872909    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872911    +%do %while(^ %sysfunc(fetch(&dsid)));
872912    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
872913    +%end;
872914    +%let dsid = %sysfunc(close(&dsid));
872916    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
872917    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
872918    +%do %while(^ %sysfunc(fetch(&dsid)));
872919    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
872920    +%end;
872921    +%let dsid = %sysfunc(close(&dsid));
872923    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
872923   !+inclass=&_inoutclass ";
872924    +    %if &type eq FLOW %then %do;
872925    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
872926    +    %end;
872927    +    %else %do;
872928    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
872929    +    %end;
872930    +    put ";";
872932    +%end; /* end of targetlevel eq interval */
872934    +run;
872935    +filename  _File_;
872936    +%mend score_code;
872939    +%macro makeDeltaCode(TargetLevel=);
872940    +*--- Build Code to Modify Metadata ---*;
872941    +filename X "&EM_FILE_CDELTA_TRAIN";
872943    +/* modify columns meta */
872944    +data _null_;
872945    +    file X;
872946    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
872947    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
872948    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
872949    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
872950    +run;
872951    +%mend makeDeltaCode;
872953    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
872954    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
872956    +    %do;
872957    +    %let m_data      = &data;
872958    +    %let m_decdata   = &decdata;
872959    +    %let m_decmeta   = &decmeta;
872960    +    %let m_noresfile = &noresfile;
872961    +    %let m_resfile   = &resfile;
872962    +    dm "afa c=sashelp.emutil.decidecode.scl";
872963    +  %end;
872964    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
872965    +%Macro Train;
872968    +/*%let SVM_MAXNUMOBS = 10000; */
872969    +/*%let EM_SCORECODEFORMAT=PROC;*/
872970    +/*%let SVM_SAMPLESIZE = 100; */
872972    +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
872973    +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
872974    +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
872975    +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
872976    +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
872977    +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
872978    +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
872981    +/*---------- Check the input data set ---------------------*/
872982    +%if &EM_IMPORT_DATA eq  %then %do;
872983    +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
872984    +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
872985    +%GOTO ENDLINE;
872986    +%end;
872988    +/*----------- Check the target variable  -------------------*/
872990    +%let _targetVar= %EM_TARGET;
872991    +%let _targetlevel = %EM_TARGET_LEVEL;
872993    +%if &_targetVar eq  %then %do;
872994    +%PUT ERROR:THERE IS NO VALID TARGET;
872995    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
872996    +%GOTO ENDLINE;
872997    +%end;
872999    +%let K = %SCAN(&_targetVar, 2, %STR( ));
873000    +%if &K > %then %do;
873001    +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
873002    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
873003    +%GOTO ENDLINE;
873004    +%end;
873006    +/* check actual num of target levels */
873007    +%if (&_targetLevel eq BINARY) %then %do;
873008    +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
873008   !+nLevel=_nTargetLevel );
873009    +    %if &_nTargetLevel  > 2 %then %do;
873010    +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
873010   !+;
873011    +    %GOTO ENDLINE;
873012    +    %end;
873013    +%end;
873014    +%else %do;
873015    +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
873015   !+ SUPPORTS ONLY BINARY TARGET;
873016    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
873017    +      %GOTO ENDLINE;
873018    +%end;
873020    +%let _PROPERTY_TASK = ;
873021    +%let _PROPERTY_CLASSTASK = ;
873022    +%let _PROPERTY_METHOD = ;
873023    +%if (&_targetLevel eq BINARY) %then %do;
873024    +      %let _PROPERTY_TASK = CLASSIFICATION;
873025    +      %let _PROPERTY_CLASSTASK = C_CLAS;
873026    +      %let _PROPERTY_METHOD = LINSVM;
873027    +%end;  /* end of %if (&_targetLevel eq BINARY)  */
873028    +%else %if (&_targetLevel eq INTERVAL) %then %do;
873029    +      /* for interval target */
873030    +      %let _PROPERTY_TASK = REGRESSION;
873031    +      %let _PROPERTY_CLASSTASK = L2_REG;
873032    +      %let _PROPERTY_METHOD = LSSVM;
873033    +%end; %else %do;
873034    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
873035    +      %GOTO ENDLINE;
873037    +%end;
873040    +%let _isValidationSet =NO;
873041    +%let _testdata =;
873042    +%let _testout =;
873043    +%let _validSource=;
873045    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
873046    +        %let _isValidationSet = YES;
873047    +        %let _testdata = &EM_IMPORT_VALIDATE;
873048    +        %let _testout = &EM_EXPORT_VALIDATE;
873049    +        %let _validSource= VALIDSET;
873050    +%end;
873051    +%else %do;
873052    +        %if &EM_IMPORT_TEST  ne  %then %do;
873053    +         %let _isValidationSet = YES;
873054    +         %let _testdata = &EM_IMPORT_TEST;
873055    +         %let _testout = &EM_EXPORT_TEST;
873056    +         %let _validSource= TESTSET;
873057    +         %end;
873058    +%end;
873060    +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
873061    +    %if &_isValidationSet eq NO  %then %do;
873062    +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
873063    +    %GOTO ENDLINE;
873064    +    %end;
873065    +%end;
873067    +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
873068    +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
873069    +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
873070    +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
873071    +%let _num_input_class =
873071   !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
873072    +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
873074    +%if  &_num_input_total < 2 %then %do;
873075    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
873076    +         %goto ENDLINE;
873077    +         %end;
873080    +/*
873081    +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
873081   !+%then %do;
873083    +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
873085    +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
873086    +         %let  EMEXCEPTIONSTRING =
873086   !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
873087    +               %goto endline;
873088    +    %end;
873089    +%end;
873090    +*/
873092    +/*------ Training ----------------------*/
873093    +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
873094    +    %if (&_targetLevel ne INTERVAL) %then %do;
873095    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
873095   !+METADATA=&EM_DATA_VARIABLESET,
873096    +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
873096   !+INDEX=Y, INDEXNAME=_OBS_ );
873097    +    %end;
873098    +    %else %do;
873099    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
873099   !+METADATA=&EM_DATA_VARIABLESET,
873100    +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
873100   !+INDEX=Y, INDEXNAME=_OBS_ );
873101    +    %end;
873102    +%end;
873103    +%else %do;
873104    +data _sample_train;
873105    +    length _OBS_ 8.;
873106    +    set &EM_IMPORT_DATA;
873107    +    _OBS_ = _N_;
873108    +run;
873109    +%end;
873110    +%let _usecgbydefault=;
873111    +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
873112    +    %let _usecgbydefault = N;
873113    +    %getNObs(inds=_sample_train, nobs=_trainnobs);
873114    +    %if &_trainnobs > 3000   %then %do;
873115    +    %let _usecgbydefault = Y;
873116    +   %end;
873117    +%end;
873119    +%svm_training(indata=_sample_train,
873120    +              task=&_PROPERTY_TASK,
873121    +              classtask =&_PROPERTY_CLASSTASK,
873122    +              method = &_PROPERTY_METHOD,
873123    +              outest=&EM_USER_OUTEST,
873124    +              outfit=&EM_USER_SVMFITSTAT,
873125    +              outclass=&EM_USER_OUTCLASS,
873126    +              isValidationSet=&_isValidationSet,
873127    +              testdata =&_testdata,
873128    +              testout =&_testout,
873129    +              validSource=&_validSource,
873130    +              usecgbydefault=&_usecgbydefault
873131    +              );
873132    +run;
873134    +%svm_score(indata=&EM_IMPORT_DATA,
873135    +             inest=&EM_USER_OUTEST,
873136    +             infit=&EM_USER_SVMFITSTAT,
873137    +             inclass=&EM_USER_OUTCLASS,
873138    +             outindata=  _tmpTrain ,
873139    +             outscore = &EM_EXPORT_TRAIN,
873140    +             targetLevel =&_targetLevel
873141    +            );
873143    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
873144    +  %svm_score(indata=&EM_IMPORT_VALIDATE,
873145    +             inest=&EM_USER_OUTEST,
873146    +             infit=&EM_USER_SVMFITSTAT,
873147    +             inclass=&EM_USER_OUTCLASS,
873148    +             outindata=_tmpValid,
873149    +             outscore = &EM_EXPORT_VALIDATE,
873150    +             targetLevel =&_targetLevel
873151    +            );
873153    +%end;
873154    +%if &EM_IMPORT_TEST  ne  %then %do;
873155    +  %svm_score(indata=&EM_IMPORT_TEST,
873156    +             inest=&EM_USER_OUTEST,
873157    +             infit=&EM_USER_SVMFITSTAT,
873158    +             inclass=&EM_USER_OUTCLASS,
873159    +             outindata=_tmpTest,
873160    +             outscore= &EM_EXPORT_TEST,
873161    +             targetLevel =&_targetLevel
873162    +            );
873164    +%end;
873166    +/*------------------ run decision codes ----------------------*/
873168    +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
873169    +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
873171    +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
873172    +filename _sffile_  "&decfile";
873173    +%if %sysfunc(fexist(_sffile_)) %then
873174    +%do;
873175    +    data &EM_EXPORT_TRAIN;
873176    +       set &EM_EXPORT_TRAIN;
873177    +           %include _sffile_;
873178    +    run;
873179    +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
873180    +    data &EM_EXPORT_VALIDATE;
873181    +       set  &EM_EXPORT_VALIDATE;
873182    +           %include _sffile_;
873183    +    %end;
873184    +    %if &EM_IMPORT_TEST  ne  %then %do;
873185    +        data &EM_EXPORT_TEST;
873186    +            set  &EM_EXPORT_TEST;
873187    +            %include _sffile_;
873188    +        run;
873189    +    %end;
873190    +%let rc = %sysfunc(fdelete(_sffile_));
873191    +%end;
873192    +filename _sffile_ ;
873194    +%score_code(TargetLevel =&_targetLevel, type=FLOW);
873195    +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
873197    +%makeDeltaCode(TargetLevel =&_targetLevel);
873200    +/* %put SYSError =  &SYSERR;  */
873202    +%if &SYSERR > 0 %then %do;
873203    +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
873204    +      %goto ENDLINE;
873205    +%end;
873207    +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
873207   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
873207   !+Cutoff=0.5, Residual=Y)
873208    +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
873208   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
873208   !+Cutoff=0.5, Residual=N)
873209    +*/
873212    +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
873212   !+RESIDUALS=Y);
873214    +/*------ Make data for report data ----------------*/
873215    +%makeSVMFitStatDs;
873217    +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
873219    +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
873221    +proc datasets lib = work nolist;
873222    +      delete _outtrain  _sample_train ;
873223    +run;
873225    +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
873226    +%if &_svnobs < 1   %then %do;
873227    +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
873228    +      %goto endline;
873229    +%end;
873232    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
873233    +%makeTunData();
873234    +%end;
873237    +%ENDLINE:
873239    +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.BINNING_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
873241    +/*------------------------------------------------------------------
873242    +  MACRO EXPLOREOBS
873244    +  SUPPORT:  SASDHD - David Duling
873245    +  PRODUCT:  Enterprise Miner
873247    +  DESCRIPTION:
873248    +  Generates maximum and default numbers of observations to
873249    +  download for visualization depending on the record length.
873251    +  Values were determined by trial and error using typical
873252    +  Windows workstation configurations.
873254    +  Discrete sets of values are returned so that user experience
873255    +  will be consitent with similar sized data sets.
873257    +  These macro variables are set:
873258    +  _exploreobs_max -- maximum number of obs downloadable
873259    +  _exploreobs_def -- default number of obs to be downloaded
873260    +  _exploreobs_recl - record length.  Might be useful for reporting.
873262    +  Use the _exploreobs_max to set limit the GUI selection of
873263    +  observations for downloading.  The GUI selection for obs
873264    +  could be reduced to "Default" and "Max".
873266    +  Parameters
873267    +  data=   libname.memname of input data
873268    +  vars=   subset list of variables.
873269    +          downloading 1 out of 500 really does work like downloading
873270    +          1 out of 1 vars.  Users may select a subset of vars for
873271    +                   visualizations.  Pass in the list as space delimited
873272    +          var names.  If vars is not specified, the record length
873273    +          of the entire data will be used.
873274    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
873276    +  Control
873277    +  Users may control the values by entering these macro variables.
873278    +            EM_EXPLOREOBS_MAX
873279    +            EM_EXPLOREOBS_DEFAULT
873280    +  These values override the computed values.
873282    +  Debugging
873283    +  %let _exploreobs_debug=1 ;
873284    +--------------------------------------------------------------------
873285    +  HISTORY: 20APR2004. sasdhd. pushed.
873286    +           18DEC2004. sasdhd. S0280556.
873287    +           07SEP2007. sasdhd. HK1009586
873288    +--------------------------------------------------------------------*/
873290    +%macro exploreobs(data=,vars=, nbytes=) ;
873292    +   /*--- variable definitions ---*/
873293    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
873294    +   %local xobs xvars xlen vlen xi vname vlist ;
873295    +   %local _exp_source _exp_notes ;
873297    +   /*--- USER definitions ---*/
873298    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
873300    +   /*--- variable intializations ---*/
873301    +   %let _exploreobs_max=0 ;
873302    +   %let _exploreobs_def=0 ;
873303    +   %let _exploreobs_recl=0 ;
873304    +   %let xvars= 0 ;
873305    +   %let xlen = 0 ;
873306    +   %let xobs = 0 ;
873308    +   /*--- data error checks ---*/
873309    +   %if "&data" eq "" %then %do ;
873310    +            %put NOTE: DATA is not specified. ;
873311    +            %goto term ;
873312    +      %end ;
873314    +   %let dsid=%sysfunc(open(&data)) ;
873315    +   %if not &dsid %then %do ;
873316    +            %put NOTE: DATA &data is not available. ;
873317    +            %goto term ;
873318    +      %end ;
873320    +   /*--- if a vars list exists generate a subset ---*/
873321    +   %if &vars ne %then %do ;
873322    +         %let dsid=%sysfunc(close(&dsid)) ;
873323    +         %if &_exploreobs_debug ne 1 %then %do ;
873324    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
873325    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
873326    +                  options nosource nonotes ;
873327    +         %end ;
873328    +         data _exploreobs_temp_data ;
873329    +         set &data(obs=0) ;
873330    +          keep &vars ;
873331    +         run;
873332    +         %if &_exploreobs_debug ne 1 %then %do ;
873333    +                  options &_exp_source &_exp_notes ;
873334    +         %end ;
873335    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
873336    +         %if &dsid eq 0 %then %do ;
873337    +                  %put NOTE: Sample is not available.;
873338    +                  %goto term ;
873339    +            %end ;
873340    +      %end ;
873342    +   /*--- get var attributes ---*/
873343    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
873344    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
873345    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
873346    +   %let dsid= %sysfunc(close(&dsid)) ;
873348    +   /*--- set default and max obs ---*/
873349    +   %let _exploreobs_recl=%eval(&xlen) ;
873350    +   %if &_exploreobs_recl eq 0 %then %do ;
873351    +             %let _exploreobs_max= 0 ;
873352    +             %let _exploreobs_def= 0 ;
873353    +             %goto term ;
873355    +   %end ;
873356    +   %else
873357    +   %if &_exploreobs_recl le 32 %then %do ;
873358    +             %let _exploreobs_max=100000 ;
873359    +             %let _exploreobs_def= 10000 ;
873360    +   %end ;
873361    +   %else
873362    +   %if &_exploreobs_recl le 128 %then %do ;
873363    +             %let _exploreobs_max=60000 ;
873364    +             %let _exploreobs_def= 6000 ;
873365    +   %end ;
873366    +   %else
873367    +   %if &_exploreobs_recl lt 1000 %then %do ;
873368    +             %let _exploreobs_max=20000 ;
873369    +             %let _exploreobs_def= 2000 ;
873370    +   %end ;
873371    +   %else
873372    +   %if &_exploreobs_recl lt 5000 %then %do ;
873373    +             %let _exploreobs_max= 10000 ;
873374    +             %let _exploreobs_def=  1000 ;
873375    +   %end ;
873376    +   %else
873377    +   %if &_exploreobs_recl lt 20000 %then %do ;
873378    +             %let _exploreobs_max= 5000 ;
873379    +             %let _exploreobs_def=  500 ;
873380    +   %end ;
873381    +   %else %do ;
873382    +             %let _exploreobs_max= 1000 ;
873383    +             %let _exploreobs_def=  200 ;
873384    +   %end ;
873386    +   /*--- Users options ---*/
873387    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
873388    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
873389    +   %end;
873390    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
873391    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
873392    +   %end;
873394    +    /*--- S0868273 ---*/
873395    +    %if "&NBYTES" ne "" %then %do;
873396    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
873397    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
873398    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
873398   !+&EM_EXPLOREOBS_MAX));
873399    +       %end;
873401    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
873402    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
873403    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
873403   !+&EM_EXPLOREOBS_DEFAULT));
873404    +          %if ^&_exploreobs_def %then
873405    +              %let _exploreobs_def = 1;
873407    +       %end;
873408    +    %end;
873410    +   /*--- Terminate ---*/
873411    +   %term:
873413    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
873413   !+max=&_exploreobs_max : def= &_exploreobs_def ;
873414    +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.BINNING_TRAIN;
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM4_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM4_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.BINNING_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.BINNING_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.BINNING_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.BINNING_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   Year_Birth _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   Custid DepVar GRP_AcceptedCmp5 GRP_AcceptedCmpTotal GRP_Frq GRP_Income 
GRP_Mnt GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntSweetProducts 
GRP_MntWines GRP_NumCatalogPurchases GRP_NumDistPurchases GRP_NumWebPurchases 
GRP_NumWebVisitsMonth GRP_RFMstat GRP_RMntFrq GRP_Recency
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 21 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM4_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM4_SVMFITSTAT outclass= EMWS8.SVM4_OUTCLASS outest= EMWS8.SVM4_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   GRP_AcceptedCmp5 GRP_AcceptedCmpTotal GRP_Frq GRP_Income GRP_Mnt 
GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntSweetProducts GRP_MntWines 
GRP_NumCatalogPurchases GRP_NumDistPurchases GRP_NumWebPurchases GRP_NumWebVisitsMonth 
GRP_RFMstat GRP_RMntFrq GRP_Recency Year_Birth
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM4_OUTCLASS has 147 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 145 
      variables.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSXCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 29 variables.
NOTE: The data set EMWS8.SVM4_OUTEST has 5 observations and 150 variables.
NOTE: The data set EMWS8.SVM4_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 51345
*** Time for Optimization: 832
*** Total Processing Time: 834
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM4_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 618-622.
NOTE: PROCEDURE SVM used (Total process time):
      real time           13:54.60
      cpu time            13:41.53
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.BINNING_TRAIN inest=EMWS8.SVM4_OUTEST 
infit=EMWS8.SVM4_SVMFITSTAT inclass=EMWS8.SVM4_OUTCLASS 
out=EMWS8.SVM4_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.21 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 68 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 01.48 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM4_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM4_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas.
873417    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
873418    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
873419    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
873420    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
873421    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
873422    +if
873423    + F_DepVar ne '1'
873424    +and F_DepVar ne '0'
873425    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
873426    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
873427    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
873428    +end;
MPRINT(SVM_SCORE):   end;
873429    +else do;
MPRINT(SVM_SCORE):   else do;
873430    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
873431    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
873432    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
873433    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
873434    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
873435    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
873436    +end;
MPRINT(SVM_SCORE):   end;
873437    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM4_TRAIN.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 72 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.BINNING_VALIDATE inest=EMWS8.SVM4_OUTEST 
infit=EMWS8.SVM4_SVMFITSTAT inclass=EMWS8.SVM4_OUTCLASS 
out=EMWS8.SVM4_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM4_VALIDATE has 1018 observations and 68 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 01.48 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM4_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM4_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM4\tmprescode.sas.
873438    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
873439    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
873440    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
873441    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
873442    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
873443    +if
873444    + F_DepVar ne '1'
873445    +and F_DepVar ne '0'
873446    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
873447    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
873448    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
873449    +end;
MPRINT(SVM_SCORE):   end;
873450    +else do;
MPRINT(SVM_SCORE):   else do;
873451    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
873452    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
873453    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
873454    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
873455    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
873456    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
873457    +end;
MPRINT(SVM_SCORE):   end;
873458    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM4_VALIDATE.
NOTE: The data set EMWS8.SVM4_VALIDATE has 1018 observations and 72 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
873459     data SVM4_SCORE/view=SVM4_SCORE;
MPRINT(EM_DECIDECODE):   data SVM4_SCORE/view=SVM4_SCORE;
873460     set EMWS8.SVM4_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM4_TRAIN;
873461     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM4_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM4_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
873462     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
873463     * SVM4: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM4: Create decision matrix;
873464     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
873465     data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
873466       length   DepVar                           $  32
873467                COUNT                                8
873468                DATAPRIOR                            8
873469                TRAINPRIOR                           8
873470                DECPRIOR                             8
873471                DECISION1                            8
873472                DECISION2                            8
873473                ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
873474     
873475       label    COUNT="Level Counts"
873476                DATAPRIOR="Data Proportions"
873477                TRAINPRIOR="Training Proportions"
873478                DECPRIOR="Decision Priors"
873479                DECISION1="1"
873480                DECISION2="0"
873481                ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
873482       format   COUNT 10.
873483                ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
873484     DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
873484   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
873485     output;
MPRINT(EM_DECIDECODE):   output;
873486     DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
873486   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
873487     output;
MPRINT(EM_DECIDECODE):   output;
873488     ;
MPRINT(EM_DECIDECODE):   ;
873489     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

873490     proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
873491     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
873492     label DECISION1= '1';
873493     label DECISION2= '0';
873494     run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
873495     quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

873496     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
873497     * SVM4 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM4 Generate decision score code;
873498     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
873499     run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM4_OUTEST 
infit=EMWS8.SVM4_SVMFITSTAT inclass=EMWS8.SVM4_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 16.40 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM4_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 150 variables.
873500     %em_copyfile(infref=#LN06184, outfref=#LN06183, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN06183 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN06184",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN06183 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 16.40 Uhr

NOTE: 423 records were written to the file #LN06183.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
873501     %em_copyfile(infref=#LN06186, outfref=#LN06185, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN06185 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN06186",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN06185 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=34190,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 16.40 Uhr

NOTE: 65 records were written to the file #LN06185.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 147 observations read from the data set EMWS8.SVM4_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 147 observations and 9 variables.
873502     %em_copyfile(infref=#LN06188, outfref=#LN06187, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN06187 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN06188",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN06187 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=37562,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 16.40 Uhr

NOTE: 308 records were written to the file #LN06187.
      The minimum record length was 1.
      The maximum record length was 155.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=60017,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=28. April 2016 16.40 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM4\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.40 Uhr,
      Create Time=27. April 2016 22.52 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM4_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM4_SVMFITSTAT.
NOTE: The data set EMWS8.SVM4_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM4_SVMFITDS out =EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM4_SVMFITDS.
NOTE: The data set EMWS8.SVM4_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM4_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM4_SVMFITDS.
NOTE: The data set EMWS8.SVM4_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM4_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM4_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM4_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM4_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM4_TRAIN.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 73 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM4_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM4_TRAIN EMWS8.SVM4_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM4_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM4_OUTALPHA.
NOTE: The data set EMWS8.SVM4_TRAIN has 2374 observations and 74 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM4_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM4_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM4_OUTALPHA.
NOTE: The data set EMWS8.SVM4_OUTALPHA has 216 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM4_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      16:34   
NOTE: There were 216 observations read from the data set EMWS8.SVM4_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM4_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM4_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM4_TUNINGCRIT.
NOTE: The data set EMWS8.SVM4_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
873503     
873504     *------------------------------------------------------------*;
873505     * End TRAIN: SVM4;
873506     *------------------------------------------------------------*;

873507     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
873508     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
873509     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
873510     ;
MPRINT(EM_DIAGRAM):   ;
873511     ;
MPRINT(EM_DIAGRAM):   ;
873512     ;
MPRINT(EM_DIAGRAM):   ;
873513     ;
MPRINT(EM_DIAGRAM):   ;
873514     quit;
MPRINT(EM_DIAGRAM):   quit;
873515     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
873516     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
873517     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
873518     /*; *"; *'; */
873519     ;
MPRINT(EM_DIAGRAM):   ;
873520     run;
MPRINT(EM_DIAGRAM):   run;
873521     quit;
MPRINT(EM_DIAGRAM):   quit;
873522     /* Reset EM Options */
873523     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
873524     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
873525     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
