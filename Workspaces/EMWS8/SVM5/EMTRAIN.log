MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.49 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                15.49 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O082J3LI 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O082J3LI new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.49 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.49 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
272953     proc freq data=EMWS8.SVM5_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM5_VariableSet noprint;
272954     table ROLE*LEVEL/out=WORK.SVM5META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM5META;
272955     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS8.SVM5_VARIABLESET.
NOTE: The data set WORK.SVM5META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

272956     proc print data=WORK.SVM5META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM5META label noobs;
272957     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
272958     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
272958   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
272958   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
272959     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
272960     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
272961     run;

NOTE: There were 5 observations read from the data set WORK.SVM5META.
NOTE: The PROCEDURE PRINT printed page 116.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

272962     title10;
MPRINT(EM_DIAGRAM):   title10;
272963     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Varsel_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM5_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM5_DepVar_DD 
out=EMWS8.SVM5_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
273010     data WORK.SVM5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
273011     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
273012     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
273012   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
273012   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
273013        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
273013   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
273013   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
273014     set EMWS8.SVM5_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM5_DEPVAR_DM( where=(_TYPE_="TARGET"));
273015     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
273016     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
273017     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
273018     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
273019     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
273020     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
273021     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
273022     end;
MPRINT(EM_DIAGRAM):   end;
273023     output;
MPRINT(EM_DIAGRAM):   output;
273024     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM5_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

273025     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
273026     proc print data=WORK.SVM5_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM5_EVENT noobs label;
273027     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
273028     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
273029     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
273030     run;

NOTE: There were 1 observations read from the data set WORK.SVM5_EVENT.
NOTE: The PROCEDURE PRINT printed page 117.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

273031     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
273032     proc print data = EMWS8.SVM5_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM5_DepVar_DM noobs label;
273033     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
273034     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
273035     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
273035   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
273035   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
273036     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
273037     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
273038     run;

NOTE: There were 7 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 118.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

273039     title10;
MPRINT(EM_DIAGRAM):   title10;
273040     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM5: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM5: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM5_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM5_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM5_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM5_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
273537     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
273538     * SVM5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM5: Generation of macros and macro variables;
273539     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
273540     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

273541     %let EMEXCEPTIONSTRING=;
273542     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
273543     * TRAIN: SVM5;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM5;
273544     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
273545     %let EM_ACTION = TRAIN;
273546     %let syscc = 0;
273547     %macro main;
273548     
273549        filename temp catalog 'sashelp.emmodl.svm_macros.source';
273550        %include temp;
273551        filename temp;
273552        %SetProperties;
273553        %if %upcase(&EM_ACTION) = CREATE %then %do;
273554            filename temp catalog 'sashelp.emmodl.svm_create.source';
273555            %include temp;
273556            filename temp;
273557            %create;
273558        %end;
273559        %else
273560        %if %upcase(&EM_ACTION) = TRAIN %then %do;
273561            filename temp catalog 'sashelp.emmodl.svm_train.source';
273562            %include temp;
273563            filename temp;
273564            %train;
273565        %end;
273566        %else
273567        %if %upcase(&EM_ACTION) = REPORT %then %do;
273568            filename temp catalog 'sashelp.emmodl.svm_report.source';
273569            %include temp;
273570            filename temp;
273571            %report;
273572        %end;
273573     
273574     %mend main;
273575     
273576     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
273578    +%macro SetProperties;
273579    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
273580    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
273581    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
273582    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
273583    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
273584    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
273585    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
273586    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
273587    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
273588    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
273589    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
273590    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
273591    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
273592    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
273593    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
273594    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
273595    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
273596    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
273597    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
273598    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
273599    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
273600    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
273601    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
273602    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
273603    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
273604    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
273605    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
273606    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
273607    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
273608    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
273609    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
273610    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
273611    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
273612    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
273613    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
273614    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
273615    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
273616    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
273617    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
273618    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
273619    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
273620    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
273621    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
273622    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
273623    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
273624    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
273625    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
273626    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
273627    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
273628    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
273630    +%mend SetProperties;
273633    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
273635    +  %local emclassout emvarout;
273637    +   proc dmdb batch dmdbcat= _emdmdb
273639    +   %if &out ne 0 %then %do ;
273640    +       data=&indata out= _emdmdb &emclassout &emvarout;
273641    +   %end ;
273642    +   %else %do ;
273643    +       data=&indata &emclassout &emvarout;
273644    +   %end ;
273646    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
273647    +   %if %em_class   ne  %then %do ;
273648    +       class %EM_CLASS;
273649    +   %end ;
273650    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
273651    +   %if %em_target ne %then %do ;
273652    +          target %em_target ;
273653    +   %end ;
273654    +   run ;
273655    +%mend make_dmdb;
273658    +%macro svm_training(indata=,
273659    +                    task=,
273660    +                    classtask=,
273661    +                    method=,
273662    +                    outest =,
273663    +                    outclass =,
273664    +                    outfit =,
273665    +                    isValidationSet =,
273666    +                    testdata =,
273667    +                    testout =,
273668    +                    validSource=,
273669    +                    usecgbydefault=
273670    +                    );
273672    +%make_dmdb(indata=&indata, out=1);
273674    +options debug="nlpitermsg=2";
273676    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
273677    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
273678    +ods output tun_crt = &EM_USER_TUNINGCRIT;
273679    +%end;
273681    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
273682    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
273683    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
273684    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
273686    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
273687    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
273688    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
273689    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
273692    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
273693    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
273694    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
273695    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
273697    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
273698    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
273699    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
273700    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
273703    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
273704    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
273705    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
273706    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
273709    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
273710    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
273711    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
273712    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
273713    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
273714    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
273715    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
273716    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
273717    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
273718    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
273719    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
273720    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
273724    +proc svm data= _emdmdb
273725    +         dmdbcat= _emdmdb
273726    +         nomonitor
273727    +         outfit= &outfit
273728    +         outclass= &outclass
273729    +         outest= &outest
273730    +         out = _outtrain
273731    +         maxiter = &_PROPERTY_MAXITER
273732    +         maxfunc = &_PROPERTY_MAXFUNC
273733    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
273734    +         gconv =   &_PROPERTY_GCONV
273735    +         absgconv = &_PROPERTY_ABSGCONV
273736    +         xconv =   &_PROPERTY_XCONV
273737    +         absxconv = &_PROPERTY_ABSXCONV
273739    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
273740    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
273741    +             xscale
273742    +         %end;
273743    +         %else %do;
273744    +             noscale
273745    +         %end;
273746    +    %end;
273747    +    %if &task eq CLASSIFICATION %then %do;
273748    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
273749    +         method= &method
273750    +        %end;
273751    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
273752    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
273753    +        %end;
273754    +        %else %do;
273755    +         method= &EM_PROPERTY_METHOD
273756    +        %end;
273757    +    %end;
273758    +    %else %do;
273759    +         method= &method  task=&classtask
273760    +         /*%if &classtask eq EPS_REG %then %do; */
273761    +             esp=&_PROPERTY_EPSILON
273762    +         /*%end;*/
273763    +    %end;
273765    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
273766    +         kernel = &EM_PROPERTY_KERNEL
273767    +    %end;
273768    +    %else %do;
273769    +         kernel = Linear
273770    +    %end;
273772    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
273774    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
273775    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
273776    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
273777    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
273778    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
273779    +            tun = &EM_PROPERTY_TUNINGMETHOD
273780    +        %end;
273782    +    %end;
273784    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
273785    +         CV  = &EM_PROPERTY_CVMETHOD
273786    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
273787    +         fold = &EM_PROPERTY_CVFOLD
273788    +         %end;
273789    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
273790    +                testdata = &testdata
273791    +         %end;
273792    +    %end;
273794    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
273795    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
273796    +    %end;
273798    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
273799    +    &EM_PROPERTY_PRINTOPTION
273800    +    %end;
273802    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
273803    +    POPTHIS
273804    +    %end;
273805    +    ;
273806    +    var %EM_INPUT %EM_REJECTED;
273807    +    target %EM_TARGET;
273809    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
273811    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
273812    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
273813    +             by &_PROPERTY_TUN_C_BY
273814    +             ;
273815    +         %end;
273816    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
273817    +             C  &_PROPERTY_USERCVALUE ;
273818    +         %end;
273820    +     %end;
273821    +     %else %do;
273822    +           C  &_PROPERTY_USERCVALUE ;
273823    +     %end;
273826    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
273828    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
273829    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
273830    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
273831    +                  by &_PROPERTY_POLY_TUN_KP1_BY
273832    +                ;
273833    +             %end;
273834    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
273835    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
273836    +             %end;
273837    +          %end;
273838    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
273839    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
273840    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
273841    +                ;
273842    +              %end;
273843    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
273844    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
273845    +              %end;
273846    +           %end;
273847    +           %else %do;
273848    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
273849    +           %end;
273850    +    %end;
273852    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
273853    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
273854    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
273855    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
273856    +                  by &_PROPERTY_RBF_TUN_KP1_BY
273857    +                  ;
273858    +              %end;
273859    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
273860    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
273861    +              %end;
273862    +          %end;
273863    +          %else %do;
273864    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
273865    +          %end;
273866    +    %end;
273869    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
273871    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
273873    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
273874    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
273875    +                by &_PROPERTY_SGMD_TUN_KP1_BY
273876    +             ;
273877    +             %end;
273878    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
273879    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
273880    +             %end;
273882    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
273883    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
273884    +                by &_PROPERTY_SGMD_TUN_KP2_BY
273885    +             ;
273886    +             %end;
273887    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
273888    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
273889    +             %end;
273890    +          %end;
273891    +          %else %do;
273892    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
273893    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
273894    +          %end;
273895    +    %end;
273897    +run;
273898    +%TRAINENDLINE:
273899    +quit;
273900    +%mend svm_training;
273902    +%macro svm_score(indata=,
273903    +                 inest=,
273904    +                 infit=,
273905    +                 inclass=,
273906    +                 outindata=,
273907    +                 outscore=,
273908    +                 targetLevel=
273909    +                 );
273912    +%if &TargetLevel eq BINARY %then %do;
273914    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
273916    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
273917    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
273918    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
273919    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
273922    +%do %while(^ %sysfunc(fetch(&dsid)));
273923    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
273924    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
273925    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
273926    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
273927    +%end;
273929    +%let dsid = %sysfunc(close(&dsid));
273932    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
273933    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
273935    +%do %while(^ %sysfunc(fetch(&dsid)));
273936    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
273937    +%end;
273938    +%let dsid = %sysfunc(close(&dsid));
273940    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
273941    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
273943    +%do %while(^ %sysfunc(fetch(&dsid)));
273944    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
273945    +%end;
273946    +%let dsid = %sysfunc(close(&dsid));
273949    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
273950    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
273951    +run;
273953    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
273954    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
273954   !+from a part of %EM_MODEL() macro */
273956    +data &outscore(drop=_P);
273957    +      set  &outscore;
273958    +     if (_P_ < -600) then _p =0;
273959    +     else _P = 1/(1+EXP((-1)*(_P_)));
273961    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
273962    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
273963    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
273965    +%do %while(^ %sysfunc(fetch(&dsid)));
273966    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
273967    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
273968    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
273969    +       &P_Var = _P;
273970    +   %end;
273971    +   %else %do;
273972    +       &P_Var = 1 - _P;
273973    +       %let targetNonEvent = &P_LEVEL;
273974    +   %end;
273975    +%end;
273976    +%let dsid = %sysfunc(close(&dsid));
273978    +%include resifref;
273980    +run;
273982    +filename resifref;
273984    +%end; /* the end of if - targetlevel eq binary */
273985    +%else %do;
273987    +/* ----     interval target  ------ */
273989    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
273990    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
273992    +%do %while(^ %sysfunc(fetch(&dsid)));
273993    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
273994    +%end;
273995    +%let dsid = %sysfunc(close(&dsid));
273997    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
273998    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274000    +%do %while(^ %sysfunc(fetch(&dsid)));
274001    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
274002    +%end;
274004    +%let dsid = %sysfunc(close(&dsid));
274006    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
274007    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
274008    +run;
274010    +%end; /* end of targetlevel eq interval */
274013    +%mend svm_score;
274016    +%macro makeSVMFitStatDs();
274018    +data &EM_USER_SVMFITDS;
274019    +     set &EM_USER_SVMFITSTAT;
274020    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
274020   !+noquote))";
274021    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
274021   !+rpt_svmfitstat_label_k_par2, noquote))";
274022    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
274022   !+rpt_svmfitstat_label_k_par3, noquote))";
274023    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
274023   !+ noquote))";
274024    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
274024   !+noquote))";
274025    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
274025   !+rpt_svmfitstat_label_margin, noquote))";
274026    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
274026   !+ noquote))";
274027    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
274027   !+noquote))";
274028    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
274028   !+noquote))";
274029    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
274029   !+noquote))";
274030    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
274030   !+noquote))";
274031    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
274031   !+noquote))";
274032    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
274032   !+rpt_svmfitstat_label_ntrain, noquote))";
274033    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
274033   !+ noquote))";
274034    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
274034   !+ noquote))";
274035    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
274035   !+noquote))";
274036    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
274036   !+rpt_svmfitstat_label_radius, noquote))";
274037    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
274037   !+noquote))";
274038    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
274038   !+noquote))";
274039    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
274039   !+ noquote))";
274040    +    if _TYPE_ ='_ACCTAB_' then delete;
274041    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
274042    +      _BIAS_= _K_PAR_;
274043    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
274044    +    %end;
274045    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
274046    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
274047    +    %end;
274048    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
274049    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
274050    +    %end;
274051    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
274052    +      DROP _K_PAR3_  _L1_;
274053    +    %end;
274054    +run;
274056    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
274057    +run;
274059    +data &EM_USER_SVMFITDS;
274060    +     set &EM_USER_SVMFITDS;
274061    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
274061   !+;
274062    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
274063    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
274063   !+noquote))";
274064    +     Rename COL1 = Train;
274065    +     if _NAME_ = '_ACCU_' then delete;
274066    +run;
274068    +%mend makeSVMFitStatDs;
274070    +%macro svm_fitstat(validSource=);
274072    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
274073    +            %if &_validSource= VALIDSET %then %do;
274074    +                validDs=work._tmp_scored_test,
274075    +                testDs=,
274076    +            %end;
274077    +            %else %if &_validSource= TESTSET %then %do;
274078    +                validDs=,
274079    +                testDs=work._tmp_scored_test,
274080    +            %end;
274081    +            decdata=&EM_DEC_DECDATA,
274082    +            decmeta=&EM_DEC_DECMETA,
274083    +            freqvar=, df=,
274084    +            outfit=&EM_DATA_EMOUTFIT);
274086    +data &EM_DATA_EMOUTFIT;
274087    +     set &EM_DATA_EMOUTFIT;
274088    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
274088   !+_SBC_; /* Because of DF */
274089    +run;
274090    +%mend svm_fitstat;
274092    +/*----------------------------------------------------------------------------------
274092   !+-----
274093    +   OUTEST data set
274095    +                                                       APRTMNT_  APRTMNT_   TELIND_
274095   !+  TELIND_
274096    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
274096   !+     2_
274098    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
274098   !+   0.97609
274099    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
274099   !+   0.15280
274100    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
274100   !+  -0.07311
274102    +=-----------------------------------------------------------------------------------
274102   !+--*/
274103    +/* this is not used, generate score code directly for the case of linear svm */
274104    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
274104   !+Residual=);
274106    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
274108    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
274109    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
274110    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
274111    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
274112    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
274114    +%do %while(^ %sysfunc(fetch(&dsid)));
274115    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
274116    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
274117    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
274118    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
274119    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
274120    +%end;
274121    +%let dsid = %sysfunc(close(&dsid));
274123    +data _cmeta;
274124    +    set &ColumnsMeta;
274125    +    NAME = upcase(strip(NAME));
274126    +run;
274128    +data _tmpclass;
274129    +       set &outclass;
274130    +   _VAR_ = upcase(strip(_VAR_));
274131    +run;
274133    +proc sql;
274134    +create table _outclass as
274135    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
274136    +  from  _tmpclass, _cmeta
274137    +  where _tmpclass._VAR_ = _cmeta.NAME;
274138    +run;
274140    +data _outclass;
274141    +    set _outclass;
274142    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
274143    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
274144    +run;
274145    +data _meands;
274146    +    set &outest;
274147    +    if _TYPE_='_MEAN_';
274148    +run;
274150    +/*
274151    +data _null_;
274152    +    set &outest;
274153    +    if _TYPE_='_PARMS_';
274154    +    call symput('bias', _STDEV_ );
274155    +    call symput('intercept', _MEAN_ );
274156    +run;
274157    +*/
274159    +filename  _File_ "&File";
274160    +data _null_;
274161    +    FILE _File_;
274162    +    length _line $500;
274163    +    drop _line;
274165    +    put ' ';
274166    +    put '/*-------------------------------------------------*/';
274167    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
274168    +    put '/*-------------------------------------------------*/';
274169    +    put ' ';
274171    +    put 'length _warn_ $ 4;';
274172    +    put 'label _warn_ = "Warnings";';
274173    +    put 'length _svm_uname $32;';
274174    +    put 'DROP _svm_uname ;';
274176    +  dsid = open("work._outclass");
274177    +    if dsid then do;
274178    +          oldvname ='';
274179    +          do while(not fetch(dsid));
274180    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
274181    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
274182    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
274183    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
274184    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
274185    +             *put 'vtype =' vtype;
274186    +             *put 'vformat=' vformat;
274188    +             if oldname ne vname then do;
274189    +                 if vtype = 'N' then do;
274190    +                     if vformat eq ' ' then do;
274191    +                        put '_svm_uname = put(' vname ', Best12.);';
274192    +                     end; else do;
274193    +                        put '_svm_uname = put(' vname ',' vformat ');';
274194    +                     end;
274195    +                  end;
274196    +                  else do;
274197    +                     if vformat eq ' ' then do;
274198    +                        put '_svm_uname = ' vname ' ;';
274199    +                     end; else do;
274200    +                        put '_svm_uname = put(' vname ',' vformat ');';
274201    +                     end;
274202    +                  end;
274203    +                  put '%DMNORMIP(_svm_uname);';
274204    +              end; /* end of oldname ne vname */
274206    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
274207    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
274208    +              put _line;
274209    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
274209   !+;';
274210    +              oldname = vname;
274211    +          end;
274213    +     end;
274214    +rc=close(dsid);
274216    +dsid = open("&outest");
274217    +    if dsid then do;
274218    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
274218   !+noquote))"  "------ */";
274219    +          ncol = attrn(dsid, 'NVARS');
274220    +          do i=4 to ncol;
274221    +             vname = upcase(trim(left(varname(dsid,i))));
274222    +              do while(not fetch(dsid));
274223    +                  type = strip(getvarc(dsid,2));
274224    +                  select(type);
274225    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
274226    +                      when('_STDEV_') std  =  getvarn(dsid, i);
274227    +                      when('_PARMS_') coeff = getvarn(dsid, i);
274228    +                  otherwise;
274229    +                  end;
274230    +              end; /* end of do-while*/
274231    +              *put '+' coeff '*(' vname '-' mean ')/' std;
274232    +              if i=4 then  do; put '_P_ =(' coeff ; end;
274233    +              else if i=5 then do; put '+' coeff ');' ; end;
274234    +              else do;
274235    +                      tmpvar = '_TMPVAR'||strip(i);
274236    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
274237    +                      put 'else ' tmpvar '=' vname ';';
274238    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
274239    +                      put 'drop  ' tmpvar ';';
274240    +              end;
274241    +              rc=rewind(dsid);
274242    +         end; /* end of  do i=6 to &nvars; */
274243    +         put ';';
274244    +     end;
274245    +    rc=close(dsid);
274246    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
274246   !+"------ */";
274248    +%if &TargetLevel eq BINARY %then %do;
274250    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
274251    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274252    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
274254    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
274255    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
274257    +%do %while(^ %sysfunc(fetch(&dsid)));
274258    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
274259    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
274260    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
274261    +       put " &P_Var = _P;";
274262    +   %end;
274263    +   %else %do;
274264    +       put " &P_Var = 1 - _P;";
274265    +   %let targetNonEvent = &P_LEVEL;
274266    +   %end;
274267    +%end;
274268    +%let dsid = %sysfunc(close(&dsid));
274270    +%if &Residual = Y %then %do;
274272    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
274272   !+"------ */";
274274    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
274275    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274276    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
274278    +   %do %while(^ %sysfunc(fetch(&dsid)));
274279    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
274280    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
274281    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
274282    +       put " &R_Var = 1 - _P;";
274283    +   %end;
274284    +   %else %do;
274285    +       put " &R_Var = 0 - (1 - _P);";
274286    +   %end;
274287    +   %end;
274288    +   %let dsid = %sysfunc(close(&dsid));
274289    +%end;
274290    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
274290   !+"------ */";
274292    +    put 'length _FORMAT_VAR $200;';
274293    +    put 'length _TARGNOR $%DMNORLEN; ';
274294    +    put 'DROP _FORMAT_VAR _TARGNOR;';
274295    +    %if &TargetFormat ne  %then %do;
274296    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
274297    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
274298    +    %end;
274299    +    %else %do;
274300    +    %if &TargetType  = N  %then %do;
274301    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
274302    +       %end;
274303    +       %else %do;
274304    +    put "_FORMAT_VAR= &TargetVar;";
274305    +       %end;
274306    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
274307    +    %end;
274309    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
274310    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
274311    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
274313    +    %do %while(^ %sysfunc(fetch(&dsid)));
274314    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
274315    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
274316    +        %let qF_var_label = %str(%"&F_var_label%");
274317    +    put "&F_var = _TARGNOR ;";
274318    +    put "label &F_var = &qF_Var_label;";
274319    +    %end;
274320    +    %let dsid = %sysfunc(close(&dsid));
274322    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
274322   !+"------ */";
274324    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
274325    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274326    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
274328    +%do %while(^%sysfunc(fetch(&dsid)));
274329    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
274330    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
274331    +   %let qI_var_label = %str(%"&I_var_label%");
274332    +   %let qTargetEvent = %str(%"&targetEvent%");
274333    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
274334    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
274335    +       put " else &I_Var  =  &qtargetNonEvent ;";
274336    +       put " label &I_var = &qI_var_label;";
274337    +%end;
274338    +%let dsid = %sysfunc(close(&dsid));
274340    +%end;  /* end of TargetLevel= Binary */
274342    +%else %if &TargetLevel eq INTERVAL %then %do;
274344    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
274345    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274346    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
274348    +%do %while(^ %sysfunc(fetch(&dsid)));
274349    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
274350    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
274351    +   %let qP_label = %str(%"&P_label%");
274352    +    put " &P_Var = _P_;";
274353    +    put " label &P_Var = &qP_label;";
274354    +%end;
274355    +%let dsid = %sysfunc(close(&dsid));
274357    +%if &Residual = Y %then %do;
274359    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
274359   !+"------ */";
274361    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
274362    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274363    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
274365    +   %do %while(^ %sysfunc(fetch(&dsid)));
274366    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
274367    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
274368    +     %let qR_label = %str(%"&R_label%");
274369    +       put " &R_Var = &TargetVar - &P_var;";
274370    +       put " label &R_Var = &qR_label;";
274371    +   %end;
274372    +   %let dsid = %sysfunc(close(&dsid));
274373    +%end;
274375    +%end;   /* end of TargetLevel= Interval */
274377    +  put "/*------------------------------------------------------------*/";
274378    +proc datasets lib=work nolist;
274379    + delete _tmpclass _cmeta _outclass;
274380    +run;
274381    +run;
274383    +filename  _File_;
274385    +%mend gen_score;
274387    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
274388    +%global &nLevel;
274389    +proc dmdb batch data=&indata
274390    +classout=_tmp_dmdbout;
274391    +class &target;
274392    +run;
274393    +data _tmp_dmdbout;
274394    +    set _tmp_dmdbout;
274395    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
274396    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
274397    +run;
274398    +data _null_;
274399    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
274400    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
274401    +    %let dsid = %sysfunc(close(&dsid));
274402    +     call symput("&nLevel", put(&_obs, Best12.));
274403    +run;
274405    +proc datasets lib=work nolist;
274406    +     delete _tmp_dmdbout;
274407    +run;
274408    +quit;
274409    +%Mend CheckBinaryTargetLevel;
274412    +%macro getNObs(inds=, nobs=);
274413    +    %global &nobs;
274414    +    data _null_;
274415    +        set &inds end=eof;
274416    +        if eof then call symput("&nobs", _N_);
274417    +    run;
274418    +    quit;
274419    +%mend  getNObs;
274423    +%macro makeAlphaDs(target=, cmeta=);
274425    + %let isOBSIndex= N;
274426    + %let dsid = %sysfunc(open(&cmeta));
274427    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
274428    + %do %while(^%sysfunc(fetch(&dsid)));
274429    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
274430    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
274431    + %end;
274432    + %let dsid = %sysfunc(close(&dsid));
274434    +data &EM_USER_OUTALPHA;
274435    +     set _sample_train;
274436    +     set _outtrain(keep=_ALPHA_ _BOUND_);
274437    +     %if &isOBSIndex= N %then %do;
274438    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
274439    +     %end;
274440    +     %else %do;
274441    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
274442    +     %end;
274443    +run;
274445    +data &EM_EXPORT_TRAIN;
274446    +     length _OBS_ 8;
274447    +     set &EM_EXPORT_TRAIN;
274448    +     _OBS_ = _N_;
274449    +run;
274451    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
274452    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
274453    +     by _OBS_;
274454    +     if _ALPHA_ =. then _ALPHA_=0;
274455    +     if _BOUND_ ="" then _BOUND_="_LBC";
274456    +run;
274458    +data &EM_USER_OUTALPHA;
274459    +   set &EM_USER_OUTALPHA;
274460    +   if _ALPHA_ = 0 then delete;
274461    +   %if &isOBSIndex= N %then %do;
274462    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
274463    +   rename _OBS_ = _dataobs_;
274464    +   %end;
274465    +   %else %do;
274466    +   drop _OBS_;
274467    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
274467   !+noquote))";
274468    +   %end;
274469    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
274470    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
274471    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
274472    +   run;
274474    +%mend makeAlphaDs;
274477    +%macro makeTunData();
274478    +data &EM_USER_TUNINGCRIT;
274479    +    set &EM_USER_TUNINGCRIT;
274480    +    Drop N;
274481    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
274482    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
274483    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
274484    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
274485    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
274486    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
274487    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
274487   !+noquote))";
274488    +run;
274489    +%mend makeTunData;
274491    +/*------------------ Score Code Generation with Proc SVMScore
274491   !+----------------------  */
274494    +%macro score_code(TargetLevel=, type=);
274496    +%let _inoutest = WORK._inoutest ;
274497    +%let _inoutfit = WORK._inoutfit ;
274498    +%let _inoutclass = WORK._inoutclass;
274500    +%if &type eq FLOW %then %do;
274501    +    %let _inoutest = &EM_USER_OUTEST;
274502    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
274503    +    %let _inoutclass = &EM_USER_OUTCLASS;
274504    +%end;
274505    +%else %do;
274506    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
274506   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
274507    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
274507   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
274508    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
274508   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
274509    +%end;
274511    +%let emscoreout = %str(&)%str(em_score_output);
274514    +%if &type eq FLOW %then %do;
274515    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
274516    +%end;
274517    +%else %do;
274518    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
274519    +%end;
274521    +data _null_;
274522    +    FILE _File_ MOD;
274524    +    put ' ';
274525    +    put '/*-------------------------------------------------*/';
274526    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
274526   !+;
274527    +    put '/*-------------------------------------------------*/';
274528    +    put ' ';
274530    +%if &TargetLevel eq BINARY %then %do;
274532    +/*%put &emscoreout;  */
274534    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
274535    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274537    +%do %while(^ %sysfunc(fetch(&dsid)));
274538    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
274540    +%end;
274541    +%let dsid = %sysfunc(close(&dsid));
274543    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
274544    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274546    +%do %while(^ %sysfunc(fetch(&dsid)));
274547    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
274549    +%end;
274550    +%let dsid = %sysfunc(close(&dsid));
274553    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
274553   !+inclass=&_inoutclass";
274554    +    %if &type eq FLOW %then %do;
274555    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
274556    +    %end;
274557    +    %else %do;
274558    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
274559    +    %end;
274560    +    put ";";
274561    +    put "run;";
274564    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
274566    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
274567    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
274568    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
274569    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
274572    +%do %while(^ %sysfunc(fetch(&dsid)));
274573    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
274574    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
274575    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
274576    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
274577    +%end;
274579    +%let dsid = %sysfunc(close(&dsid));
274581    +    put "data &emscoreout(drop=_P);";
274582    +    put "     set &emscoreout;";
274583    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
274584    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
274586    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
274587    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274588    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
274590    +%do %while(^ %sysfunc(fetch(&dsid)));
274591    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
274592    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
274593    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
274594    +    put " &P_Var = _P ;";
274595    +   %end;
274596    +   %else %do;
274597    +    put " &P_Var = 1 - _P ;";
274598    +    %let targetNonEvent = &P_LEVEL;
274599    +   %end;
274600    +%end;
274601    +%let dsid = %sysfunc(close(&dsid));
274603    +%end; /* the end of if - targetlevel eq binary */
274604    +%else %do;
274606    +/* ----     interval target  ------ */
274608    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
274609    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274611    +%do %while(^ %sysfunc(fetch(&dsid)));
274612    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
274613    +%end;
274614    +%let dsid = %sysfunc(close(&dsid));
274616    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
274617    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
274618    +%do %while(^ %sysfunc(fetch(&dsid)));
274619    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
274620    +%end;
274621    +%let dsid = %sysfunc(close(&dsid));
274623    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
274623   !+inclass=&_inoutclass ";
274624    +    %if &type eq FLOW %then %do;
274625    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
274626    +    %end;
274627    +    %else %do;
274628    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
274629    +    %end;
274630    +    put ";";
274632    +%end; /* end of targetlevel eq interval */
274634    +run;
274635    +filename  _File_;
274636    +%mend score_code;
274639    +%macro makeDeltaCode(TargetLevel=);
274640    +*--- Build Code to Modify Metadata ---*;
274641    +filename X "&EM_FILE_CDELTA_TRAIN";
274643    +/* modify columns meta */
274644    +data _null_;
274645    +    file X;
274646    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
274647    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
274648    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
274649    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
274650    +run;
274651    +%mend makeDeltaCode;
274653    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
274654    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
274656    +    %do;
274657    +    %let m_data      = &data;
274658    +    %let m_decdata   = &decdata;
274659    +    %let m_decmeta   = &decmeta;
274660    +    %let m_noresfile = &noresfile;
274661    +    %let m_resfile   = &resfile;
274662    +    dm "afa c=sashelp.emutil.decidecode.scl";
274663    +  %end;
274664    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
274665    +%Macro Train;
274668    +/*%let SVM_MAXNUMOBS = 10000; */
274669    +/*%let EM_SCORECODEFORMAT=PROC;*/
274670    +/*%let SVM_SAMPLESIZE = 100; */
274672    +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
274673    +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
274674    +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
274675    +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
274676    +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
274677    +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
274678    +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
274681    +/*---------- Check the input data set ---------------------*/
274682    +%if &EM_IMPORT_DATA eq  %then %do;
274683    +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
274684    +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
274685    +%GOTO ENDLINE;
274686    +%end;
274688    +/*----------- Check the target variable  -------------------*/
274690    +%let _targetVar= %EM_TARGET;
274691    +%let _targetlevel = %EM_TARGET_LEVEL;
274693    +%if &_targetVar eq  %then %do;
274694    +%PUT ERROR:THERE IS NO VALID TARGET;
274695    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
274696    +%GOTO ENDLINE;
274697    +%end;
274699    +%let K = %SCAN(&_targetVar, 2, %STR( ));
274700    +%if &K > %then %do;
274701    +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
274702    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
274703    +%GOTO ENDLINE;
274704    +%end;
274706    +/* check actual num of target levels */
274707    +%if (&_targetLevel eq BINARY) %then %do;
274708    +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
274708   !+nLevel=_nTargetLevel );
274709    +    %if &_nTargetLevel  > 2 %then %do;
274710    +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
274710   !+;
274711    +    %GOTO ENDLINE;
274712    +    %end;
274713    +%end;
274714    +%else %do;
274715    +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
274715   !+ SUPPORTS ONLY BINARY TARGET;
274716    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
274717    +      %GOTO ENDLINE;
274718    +%end;
274720    +%let _PROPERTY_TASK = ;
274721    +%let _PROPERTY_CLASSTASK = ;
274722    +%let _PROPERTY_METHOD = ;
274723    +%if (&_targetLevel eq BINARY) %then %do;
274724    +      %let _PROPERTY_TASK = CLASSIFICATION;
274725    +      %let _PROPERTY_CLASSTASK = C_CLAS;
274726    +      %let _PROPERTY_METHOD = LINSVM;
274727    +%end;  /* end of %if (&_targetLevel eq BINARY)  */
274728    +%else %if (&_targetLevel eq INTERVAL) %then %do;
274729    +      /* for interval target */
274730    +      %let _PROPERTY_TASK = REGRESSION;
274731    +      %let _PROPERTY_CLASSTASK = L2_REG;
274732    +      %let _PROPERTY_METHOD = LSSVM;
274733    +%end; %else %do;
274734    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
274735    +      %GOTO ENDLINE;
274737    +%end;
274740    +%let _isValidationSet =NO;
274741    +%let _testdata =;
274742    +%let _testout =;
274743    +%let _validSource=;
274745    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
274746    +        %let _isValidationSet = YES;
274747    +        %let _testdata = &EM_IMPORT_VALIDATE;
274748    +        %let _testout = &EM_EXPORT_VALIDATE;
274749    +        %let _validSource= VALIDSET;
274750    +%end;
274751    +%else %do;
274752    +        %if &EM_IMPORT_TEST  ne  %then %do;
274753    +         %let _isValidationSet = YES;
274754    +         %let _testdata = &EM_IMPORT_TEST;
274755    +         %let _testout = &EM_EXPORT_TEST;
274756    +         %let _validSource= TESTSET;
274757    +         %end;
274758    +%end;
274760    +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
274761    +    %if &_isValidationSet eq NO  %then %do;
274762    +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
274763    +    %GOTO ENDLINE;
274764    +    %end;
274765    +%end;
274767    +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
274768    +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
274769    +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
274770    +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
274771    +%let _num_input_class =
274771   !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
274772    +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
274774    +%if  &_num_input_total < 2 %then %do;
274775    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
274776    +         %goto ENDLINE;
274777    +         %end;
274780    +/*
274781    +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
274781   !+%then %do;
274783    +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
274785    +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
274786    +         %let  EMEXCEPTIONSTRING =
274786   !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
274787    +               %goto endline;
274788    +    %end;
274789    +%end;
274790    +*/
274792    +/*------ Training ----------------------*/
274793    +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
274794    +    %if (&_targetLevel ne INTERVAL) %then %do;
274795    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
274795   !+METADATA=&EM_DATA_VARIABLESET,
274796    +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
274796   !+INDEX=Y, INDEXNAME=_OBS_ );
274797    +    %end;
274798    +    %else %do;
274799    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
274799   !+METADATA=&EM_DATA_VARIABLESET,
274800    +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
274800   !+INDEX=Y, INDEXNAME=_OBS_ );
274801    +    %end;
274802    +%end;
274803    +%else %do;
274804    +data _sample_train;
274805    +    length _OBS_ 8.;
274806    +    set &EM_IMPORT_DATA;
274807    +    _OBS_ = _N_;
274808    +run;
274809    +%end;
274810    +%let _usecgbydefault=;
274811    +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
274812    +    %let _usecgbydefault = N;
274813    +    %getNObs(inds=_sample_train, nobs=_trainnobs);
274814    +    %if &_trainnobs > 3000   %then %do;
274815    +    %let _usecgbydefault = Y;
274816    +   %end;
274817    +%end;
274819    +%svm_training(indata=_sample_train,
274820    +              task=&_PROPERTY_TASK,
274821    +              classtask =&_PROPERTY_CLASSTASK,
274822    +              method = &_PROPERTY_METHOD,
274823    +              outest=&EM_USER_OUTEST,
274824    +              outfit=&EM_USER_SVMFITSTAT,
274825    +              outclass=&EM_USER_OUTCLASS,
274826    +              isValidationSet=&_isValidationSet,
274827    +              testdata =&_testdata,
274828    +              testout =&_testout,
274829    +              validSource=&_validSource,
274830    +              usecgbydefault=&_usecgbydefault
274831    +              );
274832    +run;
274834    +%svm_score(indata=&EM_IMPORT_DATA,
274835    +             inest=&EM_USER_OUTEST,
274836    +             infit=&EM_USER_SVMFITSTAT,
274837    +             inclass=&EM_USER_OUTCLASS,
274838    +             outindata=  _tmpTrain ,
274839    +             outscore = &EM_EXPORT_TRAIN,
274840    +             targetLevel =&_targetLevel
274841    +            );
274843    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
274844    +  %svm_score(indata=&EM_IMPORT_VALIDATE,
274845    +             inest=&EM_USER_OUTEST,
274846    +             infit=&EM_USER_SVMFITSTAT,
274847    +             inclass=&EM_USER_OUTCLASS,
274848    +             outindata=_tmpValid,
274849    +             outscore = &EM_EXPORT_VALIDATE,
274850    +             targetLevel =&_targetLevel
274851    +            );
274853    +%end;
274854    +%if &EM_IMPORT_TEST  ne  %then %do;
274855    +  %svm_score(indata=&EM_IMPORT_TEST,
274856    +             inest=&EM_USER_OUTEST,
274857    +             infit=&EM_USER_SVMFITSTAT,
274858    +             inclass=&EM_USER_OUTCLASS,
274859    +             outindata=_tmpTest,
274860    +             outscore= &EM_EXPORT_TEST,
274861    +             targetLevel =&_targetLevel
274862    +            );
274864    +%end;
274866    +/*------------------ run decision codes ----------------------*/
274868    +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
274869    +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
274871    +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
274872    +filename _sffile_  "&decfile";
274873    +%if %sysfunc(fexist(_sffile_)) %then
274874    +%do;
274875    +    data &EM_EXPORT_TRAIN;
274876    +       set &EM_EXPORT_TRAIN;
274877    +           %include _sffile_;
274878    +    run;
274879    +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
274880    +    data &EM_EXPORT_VALIDATE;
274881    +       set  &EM_EXPORT_VALIDATE;
274882    +           %include _sffile_;
274883    +    %end;
274884    +    %if &EM_IMPORT_TEST  ne  %then %do;
274885    +        data &EM_EXPORT_TEST;
274886    +            set  &EM_EXPORT_TEST;
274887    +            %include _sffile_;
274888    +        run;
274889    +    %end;
274890    +%let rc = %sysfunc(fdelete(_sffile_));
274891    +%end;
274892    +filename _sffile_ ;
274894    +%score_code(TargetLevel =&_targetLevel, type=FLOW);
274895    +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
274897    +%makeDeltaCode(TargetLevel =&_targetLevel);
274900    +/* %put SYSError =  &SYSERR;  */
274902    +%if &SYSERR > 0 %then %do;
274903    +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
274904    +      %goto ENDLINE;
274905    +%end;
274907    +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
274907   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
274907   !+Cutoff=0.5, Residual=Y)
274908    +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
274908   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
274908   !+Cutoff=0.5, Residual=N)
274909    +*/
274912    +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
274912   !+RESIDUALS=Y);
274914    +/*------ Make data for report data ----------------*/
274915    +%makeSVMFitStatDs;
274917    +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
274919    +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
274921    +proc datasets lib = work nolist;
274922    +      delete _outtrain  _sample_train ;
274923    +run;
274925    +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
274926    +%if &_svnobs < 1   %then %do;
274927    +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
274928    +      %goto endline;
274929    +%end;
274932    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
274933    +%makeTunData();
274934    +%end;
274937    +%ENDLINE:
274939    +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Varsel_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
274941    +/*------------------------------------------------------------------
274942    +  MACRO EXPLOREOBS
274944    +  SUPPORT:  SASDHD - David Duling
274945    +  PRODUCT:  Enterprise Miner
274947    +  DESCRIPTION:
274948    +  Generates maximum and default numbers of observations to
274949    +  download for visualization depending on the record length.
274951    +  Values were determined by trial and error using typical
274952    +  Windows workstation configurations.
274954    +  Discrete sets of values are returned so that user experience
274955    +  will be consitent with similar sized data sets.
274957    +  These macro variables are set:
274958    +  _exploreobs_max -- maximum number of obs downloadable
274959    +  _exploreobs_def -- default number of obs to be downloaded
274960    +  _exploreobs_recl - record length.  Might be useful for reporting.
274962    +  Use the _exploreobs_max to set limit the GUI selection of
274963    +  observations for downloading.  The GUI selection for obs
274964    +  could be reduced to "Default" and "Max".
274966    +  Parameters
274967    +  data=   libname.memname of input data
274968    +  vars=   subset list of variables.
274969    +          downloading 1 out of 500 really does work like downloading
274970    +          1 out of 1 vars.  Users may select a subset of vars for
274971    +                   visualizations.  Pass in the list as space delimited
274972    +          var names.  If vars is not specified, the record length
274973    +          of the entire data will be used.
274974    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
274976    +  Control
274977    +  Users may control the values by entering these macro variables.
274978    +            EM_EXPLOREOBS_MAX
274979    +            EM_EXPLOREOBS_DEFAULT
274980    +  These values override the computed values.
274982    +  Debugging
274983    +  %let _exploreobs_debug=1 ;
274984    +--------------------------------------------------------------------
274985    +  HISTORY: 20APR2004. sasdhd. pushed.
274986    +           18DEC2004. sasdhd. S0280556.
274987    +           07SEP2007. sasdhd. HK1009586
274988    +--------------------------------------------------------------------*/
274990    +%macro exploreobs(data=,vars=, nbytes=) ;
274992    +   /*--- variable definitions ---*/
274993    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
274994    +   %local xobs xvars xlen vlen xi vname vlist ;
274995    +   %local _exp_source _exp_notes ;
274997    +   /*--- USER definitions ---*/
274998    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
275000    +   /*--- variable intializations ---*/
275001    +   %let _exploreobs_max=0 ;
275002    +   %let _exploreobs_def=0 ;
275003    +   %let _exploreobs_recl=0 ;
275004    +   %let xvars= 0 ;
275005    +   %let xlen = 0 ;
275006    +   %let xobs = 0 ;
275008    +   /*--- data error checks ---*/
275009    +   %if "&data" eq "" %then %do ;
275010    +            %put NOTE: DATA is not specified. ;
275011    +            %goto term ;
275012    +      %end ;
275014    +   %let dsid=%sysfunc(open(&data)) ;
275015    +   %if not &dsid %then %do ;
275016    +            %put NOTE: DATA &data is not available. ;
275017    +            %goto term ;
275018    +      %end ;
275020    +   /*--- if a vars list exists generate a subset ---*/
275021    +   %if &vars ne %then %do ;
275022    +         %let dsid=%sysfunc(close(&dsid)) ;
275023    +         %if &_exploreobs_debug ne 1 %then %do ;
275024    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
275025    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
275026    +                  options nosource nonotes ;
275027    +         %end ;
275028    +         data _exploreobs_temp_data ;
275029    +         set &data(obs=0) ;
275030    +          keep &vars ;
275031    +         run;
275032    +         %if &_exploreobs_debug ne 1 %then %do ;
275033    +                  options &_exp_source &_exp_notes ;
275034    +         %end ;
275035    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
275036    +         %if &dsid eq 0 %then %do ;
275037    +                  %put NOTE: Sample is not available.;
275038    +                  %goto term ;
275039    +            %end ;
275040    +      %end ;
275042    +   /*--- get var attributes ---*/
275043    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
275044    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
275045    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
275046    +   %let dsid= %sysfunc(close(&dsid)) ;
275048    +   /*--- set default and max obs ---*/
275049    +   %let _exploreobs_recl=%eval(&xlen) ;
275050    +   %if &_exploreobs_recl eq 0 %then %do ;
275051    +             %let _exploreobs_max= 0 ;
275052    +             %let _exploreobs_def= 0 ;
275053    +             %goto term ;
275055    +   %end ;
275056    +   %else
275057    +   %if &_exploreobs_recl le 32 %then %do ;
275058    +             %let _exploreobs_max=100000 ;
275059    +             %let _exploreobs_def= 10000 ;
275060    +   %end ;
275061    +   %else
275062    +   %if &_exploreobs_recl le 128 %then %do ;
275063    +             %let _exploreobs_max=60000 ;
275064    +             %let _exploreobs_def= 6000 ;
275065    +   %end ;
275066    +   %else
275067    +   %if &_exploreobs_recl lt 1000 %then %do ;
275068    +             %let _exploreobs_max=20000 ;
275069    +             %let _exploreobs_def= 2000 ;
275070    +   %end ;
275071    +   %else
275072    +   %if &_exploreobs_recl lt 5000 %then %do ;
275073    +             %let _exploreobs_max= 10000 ;
275074    +             %let _exploreobs_def=  1000 ;
275075    +   %end ;
275076    +   %else
275077    +   %if &_exploreobs_recl lt 20000 %then %do ;
275078    +             %let _exploreobs_max= 5000 ;
275079    +             %let _exploreobs_def=  500 ;
275080    +   %end ;
275081    +   %else %do ;
275082    +             %let _exploreobs_max= 1000 ;
275083    +             %let _exploreobs_def=  200 ;
275084    +   %end ;
275086    +   /*--- Users options ---*/
275087    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
275088    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
275089    +   %end;
275090    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
275091    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
275092    +   %end;
275094    +    /*--- S0868273 ---*/
275095    +    %if "&NBYTES" ne "" %then %do;
275096    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
275097    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
275098    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
275098   !+&EM_EXPLOREOBS_MAX));
275099    +       %end;
275101    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
275102    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
275103    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
275103   !+&EM_EXPLOREOBS_DEFAULT));
275104    +          %if ^&_exploreobs_def %then
275105    +              %let _exploreobs_def = 1;
275107    +       %end;
275108    +    %end;
275110    +   /*--- Terminate ---*/
275111    +   %term:
275113    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
275113   !+max=&_exploreobs_max : def= &_exploreobs_def ;
275114    +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.Varsel_TRAIN;
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM5_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM5_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.Varsel_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.Varsel_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.Varsel_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.Varsel_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   AcceptedCmpTotal Mnt MntMeatProducts NumCatalogPurchases RFMstat 
Recency _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   Custid DepVar _WARN_
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 10 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM5_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM5_SVMFITSTAT outclass= EMWS8.SVM5_OUTCLASS outest= EMWS8.SVM5_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   AcceptedCmpTotal Mnt MntMeatProducts NumCatalogPurchases RFMstat Recency
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM5_OUTCLASS has 8 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 6 variables.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 17 variables.
NOTE: The data set EMWS8.SVM5_OUTEST has 5 observations and 11 variables.
NOTE: The data set EMWS8.SVM5_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 60611
*** Time for Optimization: 1062
*** Total Processing Time: 1063
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM5_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 119-123.
NOTE: PROCEDURE SVM used (Total process time):
      real time           17:43.63
      cpu time            16:15.75
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Varsel_TRAIN inest=EMWS8.SVM5_OUTEST 
infit=EMWS8.SVM5_SVMFITSTAT inclass=EMWS8.SVM5_OUTCLASS 
out=EMWS8.SVM5_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

NOTE: Variable _WARN_ is uninitialized.
WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM5_TRAIN has 2374 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM5_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM5_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM5_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=28. April 2016 02.48 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM5_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM5_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM5\tmprescode.sas.
275117    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
275118    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
275119    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
275120    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
275121    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
275122    +if
275123    + F_DepVar ne '1'
275124    +and F_DepVar ne '0'
275125    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
275126    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
275127    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
275128    +end;
MPRINT(SVM_SCORE):   end;
275129    +else do;
MPRINT(SVM_SCORE):   else do;
275130    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
275131    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
275132    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
275133    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
275134    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
275135    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
275136    +end;
MPRINT(SVM_SCORE):   end;
275137    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM5_TRAIN.
NOTE: The data set EMWS8.SVM5_TRAIN has 2374 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Varsel_VALIDATE inest=EMWS8.SVM5_OUTEST 
infit=EMWS8.SVM5_SVMFITSTAT inclass=EMWS8.SVM5_OUTCLASS 
out=EMWS8.SVM5_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

NOTE: Variable _WARN_ is uninitialized.
WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM5_VALIDATE has 1018 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.17 seconds
      cpu time            0.18 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM5_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM5_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM5_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=28. April 2016 02.48 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM5_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM5_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM5\tmprescode.sas.
275138    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
275139    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
275140    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
275141    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
275142    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
275143    +if
275144    + F_DepVar ne '1'
275145    +and F_DepVar ne '0'
275146    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
275147    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
275148    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
275149    +end;
MPRINT(SVM_SCORE):   end;
275150    +else do;
MPRINT(SVM_SCORE):   else do;
275151    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
275152    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
275153    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
275154    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
275155    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
275156    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
275157    +end;
MPRINT(SVM_SCORE):   end;
275158    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM5_VALIDATE.
NOTE: The data set EMWS8.SVM5_VALIDATE has 1018 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
275159     data SVM5_SCORE/view=SVM5_SCORE;
MPRINT(EM_DECIDECODE):   data SVM5_SCORE/view=SVM5_SCORE;
275160     set EMWS8.SVM5_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM5_TRAIN;
275161     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM5_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM5_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
275162     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
275163     * SVM5: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM5: Create decision matrix;
275164     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
275165     data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
275166       length   DepVar                           $  32
275167                COUNT                                8
275168                DATAPRIOR                            8
275169                TRAINPRIOR                           8
275170                DECPRIOR                             8
275171                DECISION1                            8
275172                DECISION2                            8
275173                ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
275174     
275175       label    COUNT="Level Counts"
275176                DATAPRIOR="Data Proportions"
275177                TRAINPRIOR="Training Proportions"
275178                DECPRIOR="Decision Priors"
275179                DECISION1="1"
275180                DECISION2="0"
275181                ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
275182       format   COUNT 10.
275183                ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
275184     DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
275184   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
275185     output;
MPRINT(EM_DECIDECODE):   output;
275186     DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
275186   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
275187     output;
MPRINT(EM_DECIDECODE):   output;
275188     ;
MPRINT(EM_DECIDECODE):   ;
275189     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

275190     proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
275191     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
275192     label DECISION1= '1';
275193     label DECISION2= '0';
275194     run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
275195     quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

275196     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
275197     * SVM5 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM5 Generate decision score code;
275198     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
275199     run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM5_OUTEST 
infit=EMWS8.SVM5_SVMFITSTAT inclass=EMWS8.SVM5_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=28. April 2016 16.07 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM5_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 11 variables.
275200     %em_copyfile(infref=#LN02087, outfref=#LN02086, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN02086 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN02087",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN02086 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=28. April 2016 16.07 Uhr

NOTE: 30 records were written to the file #LN02086.
      The minimum record length was 1.
      The maximum record length was 196.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
275201     %em_copyfile(infref=#LN02089, outfref=#LN02088, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN02088 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN02089",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN02088 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=1842,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=28. April 2016 16.07 Uhr

NOTE: 65 records were written to the file #LN02088.
      The minimum record length was 1.
      The maximum record length was 198.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 8 observations read from the data set EMWS8.SVM5_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 8 observations and 9 variables.
275202     %em_copyfile(infref=#LN02091, outfref=#LN02090, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN02090 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN02091",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN02090 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=5210,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=28. April 2016 16.07 Uhr

NOTE: 30 records were written to the file #LN02090.
      The minimum record length was 1.
      The maximum record length was 133.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=6753,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=28. April 2016 16.07 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM5\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 16.07 Uhr,
      Create Time=27. April 2016 22.52 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM5_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM5_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM5_SVMFITSTAT.
NOTE: The data set EMWS8.SVM5_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM5_SVMFITDS out =EMWS8.SVM5_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM5_SVMFITDS.
NOTE: The data set EMWS8.SVM5_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM5_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM5_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM5_SVMFITDS.
NOTE: The data set EMWS8.SVM5_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM5_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM5_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM5_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM5_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM5_TRAIN.
NOTE: The data set EMWS8.SVM5_TRAIN has 2374 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM5_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM5_TRAIN EMWS8.SVM5_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM5_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM5_OUTALPHA.
NOTE: The data set EMWS8.SVM5_TRAIN has 2374 observations and 57 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM5_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM5_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM5_OUTALPHA.
NOTE: The data set EMWS8.SVM5_OUTALPHA has 262 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM5_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      16:34   
NOTE: There were 262 observations read from the data set EMWS8.SVM5_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM5_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM5_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM5_TUNINGCRIT.
NOTE: The data set EMWS8.SVM5_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
275203     
275204     *------------------------------------------------------------*;
275205     * End TRAIN: SVM5;
275206     *------------------------------------------------------------*;

275207     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
275208     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
275209     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
275210     ;
MPRINT(EM_DIAGRAM):   ;
275211     ;
MPRINT(EM_DIAGRAM):   ;
275212     ;
MPRINT(EM_DIAGRAM):   ;
275213     ;
MPRINT(EM_DIAGRAM):   ;
275214     quit;
MPRINT(EM_DIAGRAM):   quit;
275215     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
275216     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
275217     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
275218     /*; *"; *'; */
275219     ;
MPRINT(EM_DIAGRAM):   ;
275220     run;
MPRINT(EM_DIAGRAM):   run;
275221     quit;
MPRINT(EM_DIAGRAM):   quit;
275222     /* Reset EM Options */
275223     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
275224     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
275225     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
