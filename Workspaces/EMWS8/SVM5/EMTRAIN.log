MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.12 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                15.12 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1VRG0H1 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1VRG0H1 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.12 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15.12 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
253461     proc freq data=EMWS8.SVM5_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM5_VariableSet noprint;
253462     table ROLE*LEVEL/out=WORK.SVM5META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM5META;
253463     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS8.SVM5_VARIABLESET.
NOTE: The data set WORK.SVM5META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

253464     proc print data=WORK.SVM5META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM5META label noobs;
253465     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
253466     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
253466   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
253466   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
253467     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
253468     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
253469     run;

NOTE: There were 5 observations read from the data set WORK.SVM5META.
NOTE: The PROCEDURE PRINT printed page 77.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

253470     title10;
MPRINT(EM_DIAGRAM):   title10;
253471     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN 
EMWS8.Varsel_TRAIN EMWS8.Varsel_TRAIN EMWS8 Varsel_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Varsel_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM5_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM5_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM5_DepVar_DD 
out=EMWS8.SVM5_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
253518     data WORK.SVM5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
253519     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
253520     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
253520   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
253520   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
253521        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
253521   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
253521   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
253522     set EMWS8.SVM5_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM5_DEPVAR_DM( where=(_TYPE_="TARGET"));
253523     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
253524     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
253525     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
253526     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
253527     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
253528     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
253529     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
253530     end;
MPRINT(EM_DIAGRAM):   end;
253531     output;
MPRINT(EM_DIAGRAM):   output;
253532     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM5_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

253533     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
253534     proc print data=WORK.SVM5_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM5_EVENT noobs label;
253535     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
253536     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
253537     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
253538     run;

NOTE: There were 1 observations read from the data set WORK.SVM5_EVENT.
NOTE: The PROCEDURE PRINT printed page 78.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

253539     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
253540     proc print data = EMWS8.SVM5_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM5_DepVar_DM noobs label;
253541     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
253542     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
253543     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
253543   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
253543   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
253544     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
253545     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
253546     run;

NOTE: There were 7 observations read from the data set EMWS8.SVM5_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 79.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

253547     title10;
MPRINT(EM_DIAGRAM):   title10;
253548     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM5: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM5: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM5_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM5_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM5_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM5_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
254044     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
254045     * SVM5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM5: Generation of macros and macro variables;
254046     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
254047     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

254048     %let EMEXCEPTIONSTRING=;
254049     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
254050     * TRAIN: SVM5;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM5;
254051     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
254052     %let EM_ACTION = TRAIN;
254053     %let syscc = 0;
254054     %macro main;
254055     
254056        filename temp catalog 'sashelp.emmodl.svm_macros.source';
254057        %include temp;
254058        filename temp;
254059        %SetProperties;
254060        %if %upcase(&EM_ACTION) = CREATE %then %do;
254061            filename temp catalog 'sashelp.emmodl.svm_create.source';
254062            %include temp;
254063            filename temp;
254064            %create;
254065        %end;
254066        %else
254067        %if %upcase(&EM_ACTION) = TRAIN %then %do;
254068            filename temp catalog 'sashelp.emmodl.svm_train.source';
254069            %include temp;
254070            filename temp;
254071            %train;
254072        %end;
254073        %else
254074        %if %upcase(&EM_ACTION) = REPORT %then %do;
254075            filename temp catalog 'sashelp.emmodl.svm_report.source';
254076            %include temp;
254077            filename temp;
254078            %report;
254079        %end;
254080     
254081     %mend main;
254082     
254083     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
254085    +%macro SetProperties;
254086    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
254087    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
254088    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
254089    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
254090    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
254091    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
254092    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
254093    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
254094    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
254095    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
254096    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
254097    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
254098    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
254099    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
254100    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
254101    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
254102    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
254103    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
254104    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
254105    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
254106    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
254107    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
254108    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
254109    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
254110    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
254111    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
254112    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
254113    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
254114    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
254115    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
254116    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
254117    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
254118    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
254119    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
254120    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
254121    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
254122    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
254123    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
254124    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
254125    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
254126    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
254127    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
254128    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
254129    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
254130    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
254131    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
254132    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
254133    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
254134    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
254135    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
254137    +%mend SetProperties;
254140    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
254142    +  %local emclassout emvarout;
254144    +   proc dmdb batch dmdbcat= _emdmdb
254146    +   %if &out ne 0 %then %do ;
254147    +       data=&indata out= _emdmdb &emclassout &emvarout;
254148    +   %end ;
254149    +   %else %do ;
254150    +       data=&indata &emclassout &emvarout;
254151    +   %end ;
254153    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
254154    +   %if %em_class   ne  %then %do ;
254155    +       class %EM_CLASS;
254156    +   %end ;
254157    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
254158    +   %if %em_target ne %then %do ;
254159    +          target %em_target ;
254160    +   %end ;
254161    +   run ;
254162    +%mend make_dmdb;
254165    +%macro svm_training(indata=,
254166    +                    task=,
254167    +                    classtask=,
254168    +                    method=,
254169    +                    outest =,
254170    +                    outclass =,
254171    +                    outfit =,
254172    +                    isValidationSet =,
254173    +                    testdata =,
254174    +                    testout =,
254175    +                    validSource=,
254176    +                    usecgbydefault=
254177    +                    );
254179    +%make_dmdb(indata=&indata, out=1);
254181    +options debug="nlpitermsg=2";
254183    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
254184    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
254185    +ods output tun_crt = &EM_USER_TUNINGCRIT;
254186    +%end;
254188    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
254189    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
254190    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
254191    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
254193    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
254194    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
254195    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
254196    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
254199    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
254200    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
254201    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
254202    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
254204    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
254205    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
254206    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
254207    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
254210    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
254211    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
254212    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
254213    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
254216    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
254217    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
254218    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
254219    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
254220    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
254221    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
254222    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
254223    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
254224    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
254225    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
254226    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
254227    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
254231    +proc svm data= _emdmdb
254232    +         dmdbcat= _emdmdb
254233    +         nomonitor
254234    +         outfit= &outfit
254235    +         outclass= &outclass
254236    +         outest= &outest
254237    +         out = _outtrain
254238    +         maxiter = &_PROPERTY_MAXITER
254239    +         maxfunc = &_PROPERTY_MAXFUNC
254240    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
254241    +         gconv =   &_PROPERTY_GCONV
254242    +         absgconv = &_PROPERTY_ABSGCONV
254243    +         xconv =   &_PROPERTY_XCONV
254244    +         absxconv = &_PROPERTY_ABSXCONV
254246    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
254247    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
254248    +             xscale
254249    +         %end;
254250    +         %else %do;
254251    +             noscale
254252    +         %end;
254253    +    %end;
254254    +    %if &task eq CLASSIFICATION %then %do;
254255    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
254256    +         method= &method
254257    +        %end;
254258    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
254259    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
254260    +        %end;
254261    +        %else %do;
254262    +         method= &EM_PROPERTY_METHOD
254263    +        %end;
254264    +    %end;
254265    +    %else %do;
254266    +         method= &method  task=&classtask
254267    +         /*%if &classtask eq EPS_REG %then %do; */
254268    +             esp=&_PROPERTY_EPSILON
254269    +         /*%end;*/
254270    +    %end;
254272    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
254273    +         kernel = &EM_PROPERTY_KERNEL
254274    +    %end;
254275    +    %else %do;
254276    +         kernel = Linear
254277    +    %end;
254279    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
254281    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
254282    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
254283    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
254284    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
254285    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
254286    +            tun = &EM_PROPERTY_TUNINGMETHOD
254287    +        %end;
254289    +    %end;
254291    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
254292    +         CV  = &EM_PROPERTY_CVMETHOD
254293    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
254294    +         fold = &EM_PROPERTY_CVFOLD
254295    +         %end;
254296    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
254297    +                testdata = &testdata
254298    +         %end;
254299    +    %end;
254301    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
254302    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
254303    +    %end;
254305    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
254306    +    &EM_PROPERTY_PRINTOPTION
254307    +    %end;
254309    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
254310    +    POPTHIS
254311    +    %end;
254312    +    ;
254313    +    var %EM_INPUT %EM_REJECTED;
254314    +    target %EM_TARGET;
254316    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
254318    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
254319    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
254320    +             by &_PROPERTY_TUN_C_BY
254321    +             ;
254322    +         %end;
254323    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
254324    +             C  &_PROPERTY_USERCVALUE ;
254325    +         %end;
254327    +     %end;
254328    +     %else %do;
254329    +           C  &_PROPERTY_USERCVALUE ;
254330    +     %end;
254333    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
254335    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
254336    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
254337    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
254338    +                  by &_PROPERTY_POLY_TUN_KP1_BY
254339    +                ;
254340    +             %end;
254341    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
254342    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
254343    +             %end;
254344    +          %end;
254345    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
254346    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
254347    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
254348    +                ;
254349    +              %end;
254350    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
254351    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
254352    +              %end;
254353    +           %end;
254354    +           %else %do;
254355    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
254356    +           %end;
254357    +    %end;
254359    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
254360    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
254361    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
254362    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
254363    +                  by &_PROPERTY_RBF_TUN_KP1_BY
254364    +                  ;
254365    +              %end;
254366    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
254367    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
254368    +              %end;
254369    +          %end;
254370    +          %else %do;
254371    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
254372    +          %end;
254373    +    %end;
254376    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
254378    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
254380    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
254381    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
254382    +                by &_PROPERTY_SGMD_TUN_KP1_BY
254383    +             ;
254384    +             %end;
254385    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
254386    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
254387    +             %end;
254389    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
254390    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
254391    +                by &_PROPERTY_SGMD_TUN_KP2_BY
254392    +             ;
254393    +             %end;
254394    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
254395    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
254396    +             %end;
254397    +          %end;
254398    +          %else %do;
254399    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
254400    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
254401    +          %end;
254402    +    %end;
254404    +run;
254405    +%TRAINENDLINE:
254406    +quit;
254407    +%mend svm_training;
254409    +%macro svm_score(indata=,
254410    +                 inest=,
254411    +                 infit=,
254412    +                 inclass=,
254413    +                 outindata=,
254414    +                 outscore=,
254415    +                 targetLevel=
254416    +                 );
254419    +%if &TargetLevel eq BINARY %then %do;
254421    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
254423    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
254424    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
254425    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
254426    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
254429    +%do %while(^ %sysfunc(fetch(&dsid)));
254430    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
254431    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
254432    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
254433    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
254434    +%end;
254436    +%let dsid = %sysfunc(close(&dsid));
254439    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
254440    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254442    +%do %while(^ %sysfunc(fetch(&dsid)));
254443    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
254444    +%end;
254445    +%let dsid = %sysfunc(close(&dsid));
254447    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
254448    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254450    +%do %while(^ %sysfunc(fetch(&dsid)));
254451    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
254452    +%end;
254453    +%let dsid = %sysfunc(close(&dsid));
254456    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
254457    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
254458    +run;
254460    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
254461    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
254461   !+from a part of %EM_MODEL() macro */
254463    +data &outscore(drop=_P);
254464    +      set  &outscore;
254465    +     if (_P_ < -600) then _p =0;
254466    +     else _P = 1/(1+EXP((-1)*(_P_)));
254468    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
254469    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254470    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
254472    +%do %while(^ %sysfunc(fetch(&dsid)));
254473    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
254474    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
254475    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
254476    +       &P_Var = _P;
254477    +   %end;
254478    +   %else %do;
254479    +       &P_Var = 1 - _P;
254480    +       %let targetNonEvent = &P_LEVEL;
254481    +   %end;
254482    +%end;
254483    +%let dsid = %sysfunc(close(&dsid));
254485    +%include resifref;
254487    +run;
254489    +filename resifref;
254491    +%end; /* the end of if - targetlevel eq binary */
254492    +%else %do;
254494    +/* ----     interval target  ------ */
254496    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
254497    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254499    +%do %while(^ %sysfunc(fetch(&dsid)));
254500    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
254501    +%end;
254502    +%let dsid = %sysfunc(close(&dsid));
254504    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
254505    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254507    +%do %while(^ %sysfunc(fetch(&dsid)));
254508    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
254509    +%end;
254511    +%let dsid = %sysfunc(close(&dsid));
254513    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
254514    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
254515    +run;
254517    +%end; /* end of targetlevel eq interval */
254520    +%mend svm_score;
254523    +%macro makeSVMFitStatDs();
254525    +data &EM_USER_SVMFITDS;
254526    +     set &EM_USER_SVMFITSTAT;
254527    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
254527   !+noquote))";
254528    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
254528   !+rpt_svmfitstat_label_k_par2, noquote))";
254529    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
254529   !+rpt_svmfitstat_label_k_par3, noquote))";
254530    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
254530   !+ noquote))";
254531    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
254531   !+noquote))";
254532    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
254532   !+rpt_svmfitstat_label_margin, noquote))";
254533    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
254533   !+ noquote))";
254534    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
254534   !+noquote))";
254535    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
254535   !+noquote))";
254536    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
254536   !+noquote))";
254537    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
254537   !+noquote))";
254538    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
254538   !+noquote))";
254539    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
254539   !+rpt_svmfitstat_label_ntrain, noquote))";
254540    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
254540   !+ noquote))";
254541    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
254541   !+ noquote))";
254542    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
254542   !+noquote))";
254543    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
254543   !+rpt_svmfitstat_label_radius, noquote))";
254544    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
254544   !+noquote))";
254545    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
254545   !+noquote))";
254546    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
254546   !+ noquote))";
254547    +    if _TYPE_ ='_ACCTAB_' then delete;
254548    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
254549    +      _BIAS_= _K_PAR_;
254550    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
254551    +    %end;
254552    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
254553    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
254554    +    %end;
254555    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
254556    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
254557    +    %end;
254558    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
254559    +      DROP _K_PAR3_  _L1_;
254560    +    %end;
254561    +run;
254563    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
254564    +run;
254566    +data &EM_USER_SVMFITDS;
254567    +     set &EM_USER_SVMFITDS;
254568    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
254568   !+;
254569    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
254570    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
254570   !+noquote))";
254571    +     Rename COL1 = Train;
254572    +     if _NAME_ = '_ACCU_' then delete;
254573    +run;
254575    +%mend makeSVMFitStatDs;
254577    +%macro svm_fitstat(validSource=);
254579    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
254580    +            %if &_validSource= VALIDSET %then %do;
254581    +                validDs=work._tmp_scored_test,
254582    +                testDs=,
254583    +            %end;
254584    +            %else %if &_validSource= TESTSET %then %do;
254585    +                validDs=,
254586    +                testDs=work._tmp_scored_test,
254587    +            %end;
254588    +            decdata=&EM_DEC_DECDATA,
254589    +            decmeta=&EM_DEC_DECMETA,
254590    +            freqvar=, df=,
254591    +            outfit=&EM_DATA_EMOUTFIT);
254593    +data &EM_DATA_EMOUTFIT;
254594    +     set &EM_DATA_EMOUTFIT;
254595    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
254595   !+_SBC_; /* Because of DF */
254596    +run;
254597    +%mend svm_fitstat;
254599    +/*----------------------------------------------------------------------------------
254599   !+-----
254600    +   OUTEST data set
254602    +                                                       APRTMNT_  APRTMNT_   TELIND_
254602   !+  TELIND_
254603    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
254603   !+     2_
254605    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
254605   !+   0.97609
254606    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
254606   !+   0.15280
254607    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
254607   !+  -0.07311
254609    +=-----------------------------------------------------------------------------------
254609   !+--*/
254610    +/* this is not used, generate score code directly for the case of linear svm */
254611    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
254611   !+Residual=);
254613    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
254615    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
254616    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
254617    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
254618    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
254619    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
254621    +%do %while(^ %sysfunc(fetch(&dsid)));
254622    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
254623    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
254624    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
254625    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
254626    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
254627    +%end;
254628    +%let dsid = %sysfunc(close(&dsid));
254630    +data _cmeta;
254631    +    set &ColumnsMeta;
254632    +    NAME = upcase(strip(NAME));
254633    +run;
254635    +data _tmpclass;
254636    +       set &outclass;
254637    +   _VAR_ = upcase(strip(_VAR_));
254638    +run;
254640    +proc sql;
254641    +create table _outclass as
254642    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
254643    +  from  _tmpclass, _cmeta
254644    +  where _tmpclass._VAR_ = _cmeta.NAME;
254645    +run;
254647    +data _outclass;
254648    +    set _outclass;
254649    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
254650    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
254651    +run;
254652    +data _meands;
254653    +    set &outest;
254654    +    if _TYPE_='_MEAN_';
254655    +run;
254657    +/*
254658    +data _null_;
254659    +    set &outest;
254660    +    if _TYPE_='_PARMS_';
254661    +    call symput('bias', _STDEV_ );
254662    +    call symput('intercept', _MEAN_ );
254663    +run;
254664    +*/
254666    +filename  _File_ "&File";
254667    +data _null_;
254668    +    FILE _File_;
254669    +    length _line $500;
254670    +    drop _line;
254672    +    put ' ';
254673    +    put '/*-------------------------------------------------*/';
254674    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
254675    +    put '/*-------------------------------------------------*/';
254676    +    put ' ';
254678    +    put 'length _warn_ $ 4;';
254679    +    put 'label _warn_ = "Warnings";';
254680    +    put 'length _svm_uname $32;';
254681    +    put 'DROP _svm_uname ;';
254683    +  dsid = open("work._outclass");
254684    +    if dsid then do;
254685    +          oldvname ='';
254686    +          do while(not fetch(dsid));
254687    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
254688    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
254689    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
254690    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
254691    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
254692    +             *put 'vtype =' vtype;
254693    +             *put 'vformat=' vformat;
254695    +             if oldname ne vname then do;
254696    +                 if vtype = 'N' then do;
254697    +                     if vformat eq ' ' then do;
254698    +                        put '_svm_uname = put(' vname ', Best12.);';
254699    +                     end; else do;
254700    +                        put '_svm_uname = put(' vname ',' vformat ');';
254701    +                     end;
254702    +                  end;
254703    +                  else do;
254704    +                     if vformat eq ' ' then do;
254705    +                        put '_svm_uname = ' vname ' ;';
254706    +                     end; else do;
254707    +                        put '_svm_uname = put(' vname ',' vformat ');';
254708    +                     end;
254709    +                  end;
254710    +                  put '%DMNORMIP(_svm_uname);';
254711    +              end; /* end of oldname ne vname */
254713    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
254714    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
254715    +              put _line;
254716    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
254716   !+;';
254717    +              oldname = vname;
254718    +          end;
254720    +     end;
254721    +rc=close(dsid);
254723    +dsid = open("&outest");
254724    +    if dsid then do;
254725    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
254725   !+noquote))"  "------ */";
254726    +          ncol = attrn(dsid, 'NVARS');
254727    +          do i=4 to ncol;
254728    +             vname = upcase(trim(left(varname(dsid,i))));
254729    +              do while(not fetch(dsid));
254730    +                  type = strip(getvarc(dsid,2));
254731    +                  select(type);
254732    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
254733    +                      when('_STDEV_') std  =  getvarn(dsid, i);
254734    +                      when('_PARMS_') coeff = getvarn(dsid, i);
254735    +                  otherwise;
254736    +                  end;
254737    +              end; /* end of do-while*/
254738    +              *put '+' coeff '*(' vname '-' mean ')/' std;
254739    +              if i=4 then  do; put '_P_ =(' coeff ; end;
254740    +              else if i=5 then do; put '+' coeff ');' ; end;
254741    +              else do;
254742    +                      tmpvar = '_TMPVAR'||strip(i);
254743    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
254744    +                      put 'else ' tmpvar '=' vname ';';
254745    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
254746    +                      put 'drop  ' tmpvar ';';
254747    +              end;
254748    +              rc=rewind(dsid);
254749    +         end; /* end of  do i=6 to &nvars; */
254750    +         put ';';
254751    +     end;
254752    +    rc=close(dsid);
254753    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
254753   !+"------ */";
254755    +%if &TargetLevel eq BINARY %then %do;
254757    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
254758    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254759    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
254761    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
254762    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
254764    +%do %while(^ %sysfunc(fetch(&dsid)));
254765    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
254766    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
254767    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
254768    +       put " &P_Var = _P;";
254769    +   %end;
254770    +   %else %do;
254771    +       put " &P_Var = 1 - _P;";
254772    +   %let targetNonEvent = &P_LEVEL;
254773    +   %end;
254774    +%end;
254775    +%let dsid = %sysfunc(close(&dsid));
254777    +%if &Residual = Y %then %do;
254779    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
254779   !+"------ */";
254781    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
254782    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254783    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
254785    +   %do %while(^ %sysfunc(fetch(&dsid)));
254786    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
254787    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
254788    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
254789    +       put " &R_Var = 1 - _P;";
254790    +   %end;
254791    +   %else %do;
254792    +       put " &R_Var = 0 - (1 - _P);";
254793    +   %end;
254794    +   %end;
254795    +   %let dsid = %sysfunc(close(&dsid));
254796    +%end;
254797    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
254797   !+"------ */";
254799    +    put 'length _FORMAT_VAR $200;';
254800    +    put 'length _TARGNOR $%DMNORLEN; ';
254801    +    put 'DROP _FORMAT_VAR _TARGNOR;';
254802    +    %if &TargetFormat ne  %then %do;
254803    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
254804    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
254805    +    %end;
254806    +    %else %do;
254807    +    %if &TargetType  = N  %then %do;
254808    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
254809    +       %end;
254810    +       %else %do;
254811    +    put "_FORMAT_VAR= &TargetVar;";
254812    +       %end;
254813    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
254814    +    %end;
254816    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
254817    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
254818    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
254820    +    %do %while(^ %sysfunc(fetch(&dsid)));
254821    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
254822    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
254823    +        %let qF_var_label = %str(%"&F_var_label%");
254824    +    put "&F_var = _TARGNOR ;";
254825    +    put "label &F_var = &qF_Var_label;";
254826    +    %end;
254827    +    %let dsid = %sysfunc(close(&dsid));
254829    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
254829   !+"------ */";
254831    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
254832    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254833    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
254835    +%do %while(^%sysfunc(fetch(&dsid)));
254836    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
254837    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
254838    +   %let qI_var_label = %str(%"&I_var_label%");
254839    +   %let qTargetEvent = %str(%"&targetEvent%");
254840    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
254841    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
254842    +       put " else &I_Var  =  &qtargetNonEvent ;";
254843    +       put " label &I_var = &qI_var_label;";
254844    +%end;
254845    +%let dsid = %sysfunc(close(&dsid));
254847    +%end;  /* end of TargetLevel= Binary */
254849    +%else %if &TargetLevel eq INTERVAL %then %do;
254851    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
254852    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254853    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
254855    +%do %while(^ %sysfunc(fetch(&dsid)));
254856    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
254857    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
254858    +   %let qP_label = %str(%"&P_label%");
254859    +    put " &P_Var = _P_;";
254860    +    put " label &P_Var = &qP_label;";
254861    +%end;
254862    +%let dsid = %sysfunc(close(&dsid));
254864    +%if &Residual = Y %then %do;
254866    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
254866   !+"------ */";
254868    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
254869    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
254870    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
254872    +   %do %while(^ %sysfunc(fetch(&dsid)));
254873    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
254874    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
254875    +     %let qR_label = %str(%"&R_label%");
254876    +       put " &R_Var = &TargetVar - &P_var;";
254877    +       put " label &R_Var = &qR_label;";
254878    +   %end;
254879    +   %let dsid = %sysfunc(close(&dsid));
254880    +%end;
254882    +%end;   /* end of TargetLevel= Interval */
254884    +  put "/*------------------------------------------------------------*/";
254885    +proc datasets lib=work nolist;
254886    + delete _tmpclass _cmeta _outclass;
254887    +run;
254888    +run;
254890    +filename  _File_;
254892    +%mend gen_score;
254894    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
254895    +%global &nLevel;
254896    +proc dmdb batch data=&indata
254897    +classout=_tmp_dmdbout;
254898    +class &target;
254899    +run;
254900    +data _tmp_dmdbout;
254901    +    set _tmp_dmdbout;
254902    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
254903    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
254904    +run;
254905    +data _null_;
254906    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
254907    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
254908    +    %let dsid = %sysfunc(close(&dsid));
254909    +     call symput("&nLevel", put(&_obs, Best12.));
254910    +run;
254912    +proc datasets lib=work nolist;
254913    +     delete _tmp_dmdbout;
254914    +run;
254915    +quit;
254916    +%Mend CheckBinaryTargetLevel;
254919    +%macro getNObs(inds=, nobs=);
254920    +    %global &nobs;
254921    +    data _null_;
254922    +        set &inds end=eof;
254923    +        if eof then call symput("&nobs", _N_);
254924    +    run;
254925    +    quit;
254926    +%mend  getNObs;
254930    +%macro makeAlphaDs(target=, cmeta=);
254932    + %let isOBSIndex= N;
254933    + %let dsid = %sysfunc(open(&cmeta));
254934    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
254935    + %do %while(^%sysfunc(fetch(&dsid)));
254936    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
254937    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
254938    + %end;
254939    + %let dsid = %sysfunc(close(&dsid));
254941    +data &EM_USER_OUTALPHA;
254942    +     set _sample_train;
254943    +     set _outtrain(keep=_ALPHA_ _BOUND_);
254944    +     %if &isOBSIndex= N %then %do;
254945    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
254946    +     %end;
254947    +     %else %do;
254948    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
254949    +     %end;
254950    +run;
254952    +data &EM_EXPORT_TRAIN;
254953    +     length _OBS_ 8;
254954    +     set &EM_EXPORT_TRAIN;
254955    +     _OBS_ = _N_;
254956    +run;
254958    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
254959    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
254960    +     by _OBS_;
254961    +     if _ALPHA_ =. then _ALPHA_=0;
254962    +     if _BOUND_ ="" then _BOUND_="_LBC";
254963    +run;
254965    +data &EM_USER_OUTALPHA;
254966    +   set &EM_USER_OUTALPHA;
254967    +   if _ALPHA_ = 0 then delete;
254968    +   %if &isOBSIndex= N %then %do;
254969    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
254970    +   rename _OBS_ = _dataobs_;
254971    +   %end;
254972    +   %else %do;
254973    +   drop _OBS_;
254974    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
254974   !+noquote))";
254975    +   %end;
254976    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
254977    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
254978    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
254979    +   run;
254981    +%mend makeAlphaDs;
254984    +%macro makeTunData();
254985    +data &EM_USER_TUNINGCRIT;
254986    +    set &EM_USER_TUNINGCRIT;
254987    +    Drop N;
254988    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
254989    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
254990    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
254991    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
254992    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
254993    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
254994    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
254994   !+noquote))";
254995    +run;
254996    +%mend makeTunData;
254998    +/*------------------ Score Code Generation with Proc SVMScore
254998   !+----------------------  */
255001    +%macro score_code(TargetLevel=, type=);
255003    +%let _inoutest = WORK._inoutest ;
255004    +%let _inoutfit = WORK._inoutfit ;
255005    +%let _inoutclass = WORK._inoutclass;
255007    +%if &type eq FLOW %then %do;
255008    +    %let _inoutest = &EM_USER_OUTEST;
255009    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
255010    +    %let _inoutclass = &EM_USER_OUTCLASS;
255011    +%end;
255012    +%else %do;
255013    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
255013   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
255014    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
255014   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
255015    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
255015   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
255016    +%end;
255018    +%let emscoreout = %str(&)%str(em_score_output);
255021    +%if &type eq FLOW %then %do;
255022    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
255023    +%end;
255024    +%else %do;
255025    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
255026    +%end;
255028    +data _null_;
255029    +    FILE _File_ MOD;
255031    +    put ' ';
255032    +    put '/*-------------------------------------------------*/';
255033    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
255033   !+;
255034    +    put '/*-------------------------------------------------*/';
255035    +    put ' ';
255037    +%if &TargetLevel eq BINARY %then %do;
255039    +/*%put &emscoreout;  */
255041    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
255042    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
255044    +%do %while(^ %sysfunc(fetch(&dsid)));
255045    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
255047    +%end;
255048    +%let dsid = %sysfunc(close(&dsid));
255050    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
255051    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
255053    +%do %while(^ %sysfunc(fetch(&dsid)));
255054    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
255056    +%end;
255057    +%let dsid = %sysfunc(close(&dsid));
255060    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
255060   !+inclass=&_inoutclass";
255061    +    %if &type eq FLOW %then %do;
255062    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
255063    +    %end;
255064    +    %else %do;
255065    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
255066    +    %end;
255067    +    put ";";
255068    +    put "run;";
255071    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
255073    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
255074    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
255075    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
255076    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
255079    +%do %while(^ %sysfunc(fetch(&dsid)));
255080    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
255081    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
255082    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
255083    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
255084    +%end;
255086    +%let dsid = %sysfunc(close(&dsid));
255088    +    put "data &emscoreout(drop=_P);";
255089    +    put "     set &emscoreout;";
255090    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
255091    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
255093    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
255094    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
255095    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
255097    +%do %while(^ %sysfunc(fetch(&dsid)));
255098    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
255099    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
255100    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
255101    +    put " &P_Var = _P ;";
255102    +   %end;
255103    +   %else %do;
255104    +    put " &P_Var = 1 - _P ;";
255105    +    %let targetNonEvent = &P_LEVEL;
255106    +   %end;
255107    +%end;
255108    +%let dsid = %sysfunc(close(&dsid));
255110    +%end; /* the end of if - targetlevel eq binary */
255111    +%else %do;
255113    +/* ----     interval target  ------ */
255115    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
255116    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
255118    +%do %while(^ %sysfunc(fetch(&dsid)));
255119    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
255120    +%end;
255121    +%let dsid = %sysfunc(close(&dsid));
255123    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
255124    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
255125    +%do %while(^ %sysfunc(fetch(&dsid)));
255126    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
255127    +%end;
255128    +%let dsid = %sysfunc(close(&dsid));
255130    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
255130   !+inclass=&_inoutclass ";
255131    +    %if &type eq FLOW %then %do;
255132    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
255133    +    %end;
255134    +    %else %do;
255135    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
255136    +    %end;
255137    +    put ";";
255139    +%end; /* end of targetlevel eq interval */
255141    +run;
255142    +filename  _File_;
255143    +%mend score_code;
255146    +%macro makeDeltaCode(TargetLevel=);
255147    +*--- Build Code to Modify Metadata ---*;
255148    +filename X "&EM_FILE_CDELTA_TRAIN";
255150    +/* modify columns meta */
255151    +data _null_;
255152    +    file X;
255153    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
255154    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
255155    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
255156    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
255157    +run;
255158    +%mend makeDeltaCode;
255160    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
255161    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
255163    +    %do;
255164    +    %let m_data      = &data;
255165    +    %let m_decdata   = &decdata;
255166    +    %let m_decmeta   = &decmeta;
255167    +    %let m_noresfile = &noresfile;
255168    +    %let m_resfile   = &resfile;
255169    +    dm "afa c=sashelp.emutil.decidecode.scl";
255170    +  %end;
255171    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
255172    +%Macro Train;
255175    +/*%let SVM_MAXNUMOBS = 10000; */
255176    +/*%let EM_SCORECODEFORMAT=PROC;*/
255177    +/*%let SVM_SAMPLESIZE = 100; */
255179    +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
255180    +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
255181    +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
255182    +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
255183    +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
255184    +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
255185    +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
255188    +/*---------- Check the input data set ---------------------*/
255189    +%if &EM_IMPORT_DATA eq  %then %do;
255190    +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
255191    +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
255192    +%GOTO ENDLINE;
255193    +%end;
255195    +/*----------- Check the target variable  -------------------*/
255197    +%let _targetVar= %EM_TARGET;
255198    +%let _targetlevel = %EM_TARGET_LEVEL;
255200    +%if &_targetVar eq  %then %do;
255201    +%PUT ERROR:THERE IS NO VALID TARGET;
255202    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
255203    +%GOTO ENDLINE;
255204    +%end;
255206    +%let K = %SCAN(&_targetVar, 2, %STR( ));
255207    +%if &K > %then %do;
255208    +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
255209    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
255210    +%GOTO ENDLINE;
255211    +%end;
255213    +/* check actual num of target levels */
255214    +%if (&_targetLevel eq BINARY) %then %do;
255215    +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
255215   !+nLevel=_nTargetLevel );
255216    +    %if &_nTargetLevel  > 2 %then %do;
255217    +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
255217   !+;
255218    +    %GOTO ENDLINE;
255219    +    %end;
255220    +%end;
255221    +%else %do;
255222    +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
255222   !+ SUPPORTS ONLY BINARY TARGET;
255223    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
255224    +      %GOTO ENDLINE;
255225    +%end;
255227    +%let _PROPERTY_TASK = ;
255228    +%let _PROPERTY_CLASSTASK = ;
255229    +%let _PROPERTY_METHOD = ;
255230    +%if (&_targetLevel eq BINARY) %then %do;
255231    +      %let _PROPERTY_TASK = CLASSIFICATION;
255232    +      %let _PROPERTY_CLASSTASK = C_CLAS;
255233    +      %let _PROPERTY_METHOD = LINSVM;
255234    +%end;  /* end of %if (&_targetLevel eq BINARY)  */
255235    +%else %if (&_targetLevel eq INTERVAL) %then %do;
255236    +      /* for interval target */
255237    +      %let _PROPERTY_TASK = REGRESSION;
255238    +      %let _PROPERTY_CLASSTASK = L2_REG;
255239    +      %let _PROPERTY_METHOD = LSSVM;
255240    +%end; %else %do;
255241    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
255242    +      %GOTO ENDLINE;
255244    +%end;
255247    +%let _isValidationSet =NO;
255248    +%let _testdata =;
255249    +%let _testout =;
255250    +%let _validSource=;
255252    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
255253    +        %let _isValidationSet = YES;
255254    +        %let _testdata = &EM_IMPORT_VALIDATE;
255255    +        %let _testout = &EM_EXPORT_VALIDATE;
255256    +        %let _validSource= VALIDSET;
255257    +%end;
255258    +%else %do;
255259    +        %if &EM_IMPORT_TEST  ne  %then %do;
255260    +         %let _isValidationSet = YES;
255261    +         %let _testdata = &EM_IMPORT_TEST;
255262    +         %let _testout = &EM_EXPORT_TEST;
255263    +         %let _validSource= TESTSET;
255264    +         %end;
255265    +%end;
255267    +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
255268    +    %if &_isValidationSet eq NO  %then %do;
255269    +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
255270    +    %GOTO ENDLINE;
255271    +    %end;
255272    +%end;
255274    +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
255275    +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
255276    +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
255277    +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
255278    +%let _num_input_class =
255278   !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
255279    +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
255281    +%if  &_num_input_total < 2 %then %do;
255282    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
255283    +         %goto ENDLINE;
255284    +         %end;
255287    +/*
255288    +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
255288   !+%then %do;
255290    +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
255292    +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
255293    +         %let  EMEXCEPTIONSTRING =
255293   !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
255294    +               %goto endline;
255295    +    %end;
255296    +%end;
255297    +*/
255299    +/*------ Training ----------------------*/
255300    +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
255301    +    %if (&_targetLevel ne INTERVAL) %then %do;
255302    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
255302   !+METADATA=&EM_DATA_VARIABLESET,
255303    +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
255303   !+INDEX=Y, INDEXNAME=_OBS_ );
255304    +    %end;
255305    +    %else %do;
255306    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
255306   !+METADATA=&EM_DATA_VARIABLESET,
255307    +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
255307   !+INDEX=Y, INDEXNAME=_OBS_ );
255308    +    %end;
255309    +%end;
255310    +%else %do;
255311    +data _sample_train;
255312    +    length _OBS_ 8.;
255313    +    set &EM_IMPORT_DATA;
255314    +    _OBS_ = _N_;
255315    +run;
255316    +%end;
255317    +%let _usecgbydefault=;
255318    +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
255319    +    %let _usecgbydefault = N;
255320    +    %getNObs(inds=_sample_train, nobs=_trainnobs);
255321    +    %if &_trainnobs > 3000   %then %do;
255322    +    %let _usecgbydefault = Y;
255323    +   %end;
255324    +%end;
255326    +%svm_training(indata=_sample_train,
255327    +              task=&_PROPERTY_TASK,
255328    +              classtask =&_PROPERTY_CLASSTASK,
255329    +              method = &_PROPERTY_METHOD,
255330    +              outest=&EM_USER_OUTEST,
255331    +              outfit=&EM_USER_SVMFITSTAT,
255332    +              outclass=&EM_USER_OUTCLASS,
255333    +              isValidationSet=&_isValidationSet,
255334    +              testdata =&_testdata,
255335    +              testout =&_testout,
255336    +              validSource=&_validSource,
255337    +              usecgbydefault=&_usecgbydefault
255338    +              );
255339    +run;
255341    +%svm_score(indata=&EM_IMPORT_DATA,
255342    +             inest=&EM_USER_OUTEST,
255343    +             infit=&EM_USER_SVMFITSTAT,
255344    +             inclass=&EM_USER_OUTCLASS,
255345    +             outindata=  _tmpTrain ,
255346    +             outscore = &EM_EXPORT_TRAIN,
255347    +             targetLevel =&_targetLevel
255348    +            );
255350    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
255351    +  %svm_score(indata=&EM_IMPORT_VALIDATE,
255352    +             inest=&EM_USER_OUTEST,
255353    +             infit=&EM_USER_SVMFITSTAT,
255354    +             inclass=&EM_USER_OUTCLASS,
255355    +             outindata=_tmpValid,
255356    +             outscore = &EM_EXPORT_VALIDATE,
255357    +             targetLevel =&_targetLevel
255358    +            );
255360    +%end;
255361    +%if &EM_IMPORT_TEST  ne  %then %do;
255362    +  %svm_score(indata=&EM_IMPORT_TEST,
255363    +             inest=&EM_USER_OUTEST,
255364    +             infit=&EM_USER_SVMFITSTAT,
255365    +             inclass=&EM_USER_OUTCLASS,
255366    +             outindata=_tmpTest,
255367    +             outscore= &EM_EXPORT_TEST,
255368    +             targetLevel =&_targetLevel
255369    +            );
255371    +%end;
255373    +/*------------------ run decision codes ----------------------*/
255375    +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
255376    +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
255378    +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
255379    +filename _sffile_  "&decfile";
255380    +%if %sysfunc(fexist(_sffile_)) %then
255381    +%do;
255382    +    data &EM_EXPORT_TRAIN;
255383    +       set &EM_EXPORT_TRAIN;
255384    +           %include _sffile_;
255385    +    run;
255386    +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
255387    +    data &EM_EXPORT_VALIDATE;
255388    +       set  &EM_EXPORT_VALIDATE;
255389    +           %include _sffile_;
255390    +    %end;
255391    +    %if &EM_IMPORT_TEST  ne  %then %do;
255392    +        data &EM_EXPORT_TEST;
255393    +            set  &EM_EXPORT_TEST;
255394    +            %include _sffile_;
255395    +        run;
255396    +    %end;
255397    +%let rc = %sysfunc(fdelete(_sffile_));
255398    +%end;
255399    +filename _sffile_ ;
255401    +%score_code(TargetLevel =&_targetLevel, type=FLOW);
255402    +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
255404    +%makeDeltaCode(TargetLevel =&_targetLevel);
255407    +/* %put SYSError =  &SYSERR;  */
255409    +%if &SYSERR > 0 %then %do;
255410    +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
255411    +      %goto ENDLINE;
255412    +%end;
255414    +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
255414   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
255414   !+Cutoff=0.5, Residual=Y)
255415    +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
255415   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
255415   !+Cutoff=0.5, Residual=N)
255416    +*/
255419    +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
255419   !+RESIDUALS=Y);
255421    +/*------ Make data for report data ----------------*/
255422    +%makeSVMFitStatDs;
255424    +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
255426    +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
255428    +proc datasets lib = work nolist;
255429    +      delete _outtrain  _sample_train ;
255430    +run;
255432    +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
255433    +%if &_svnobs < 1   %then %do;
255434    +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
255435    +      %goto endline;
255436    +%end;
255439    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
255440    +%makeTunData();
255441    +%end;
255444    +%ENDLINE:
255446    +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Varsel_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
The SAS System

NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
255448    +/*------------------------------------------------------------------
255449    +  MACRO EXPLOREOBS
255451    +  SUPPORT:  SASDHD - David Duling
255452    +  PRODUCT:  Enterprise Miner
255454    +  DESCRIPTION:
255455    +  Generates maximum and default numbers of observations to
255456    +  download for visualization depending on the record length.
255458    +  Values were determined by trial and error using typical
255459    +  Windows workstation configurations.
255461    +  Discrete sets of values are returned so that user experience
255462    +  will be consitent with similar sized data sets.
255464    +  These macro variables are set:
255465    +  _exploreobs_max -- maximum number of obs downloadable
255466    +  _exploreobs_def -- default number of obs to be downloaded
255467    +  _exploreobs_recl - record length.  Might be useful for reporting.
255469    +  Use the _exploreobs_max to set limit the GUI selection of
255470    +  observations for downloading.  The GUI selection for obs
255471    +  could be reduced to "Default" and "Max".
255473    +  Parameters
255474    +  data=   libname.memname of input data
255475    +  vars=   subset list of variables.
255476    +          downloading 1 out of 500 really does work like downloading
255477    +          1 out of 1 vars.  Users may select a subset of vars for
255478    +                   visualizations.  Pass in the list as space delimited
255479    +          var names.  If vars is not specified, the record length
255480    +          of the entire data will be used.
255481    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
255483    +  Control
255484    +  Users may control the values by entering these macro variables.
255485    +            EM_EXPLOREOBS_MAX
255486    +            EM_EXPLOREOBS_DEFAULT
255487    +  These values override the computed values.
255489    +  Debugging
255490    +  %let _exploreobs_debug=1 ;
255491    +--------------------------------------------------------------------
255492    +  HISTORY: 20APR2004. sasdhd. pushed.
255493    +           18DEC2004. sasdhd. S0280556.
255494    +           07SEP2007. sasdhd. HK1009586
255495    +--------------------------------------------------------------------*/
255497    +%macro exploreobs(data=,vars=, nbytes=) ;
255499    +   /*--- variable definitions ---*/
255500    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
255501    +   %local xobs xvars xlen vlen xi vname vlist ;
255502    +   %local _exp_source _exp_notes ;
255504    +   /*--- USER definitions ---*/
255505    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
255507    +   /*--- variable intializations ---*/
255508    +   %let _exploreobs_max=0 ;
255509    +   %let _exploreobs_def=0 ;
255510    +   %let _exploreobs_recl=0 ;
255511    +   %let xvars= 0 ;
255512    +   %let xlen = 0 ;
255513    +   %let xobs = 0 ;
255515    +   /*--- data error checks ---*/
255516    +   %if "&data" eq "" %then %do ;
255517    +            %put NOTE: DATA is not specified. ;
255518    +            %goto term ;
255519    +      %end ;
255521    +   %let dsid=%sysfunc(open(&data)) ;
255522    +   %if not &dsid %then %do ;
255523    +            %put NOTE: DATA &data is not available. ;
255524    +            %goto term ;
255525    +      %end ;
255527    +   /*--- if a vars list exists generate a subset ---*/
255528    +   %if &vars ne %then %do ;
255529    +         %let dsid=%sysfunc(close(&dsid)) ;
255530    +         %if &_exploreobs_debug ne 1 %then %do ;
255531    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
255532    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
255533    +                  options nosource nonotes ;
255534    +         %end ;
255535    +         data _exploreobs_temp_data ;
255536    +         set &data(obs=0) ;
255537    +          keep &vars ;
255538    +         run;
255539    +         %if &_exploreobs_debug ne 1 %then %do ;
255540    +                  options &_exp_source &_exp_notes ;
255541    +         %end ;
255542    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
255543    +         %if &dsid eq 0 %then %do ;
255544    +                  %put NOTE: Sample is not available.;
255545    +                  %goto term ;
255546    +            %end ;
255547    +      %end ;
255549    +   /*--- get var attributes ---*/
255550    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
255551    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
255552    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
255553    +   %let dsid= %sysfunc(close(&dsid)) ;
255555    +   /*--- set default and max obs ---*/
255556    +   %let _exploreobs_recl=%eval(&xlen) ;
255557    +   %if &_exploreobs_recl eq 0 %then %do ;
255558    +             %let _exploreobs_max= 0 ;
255559    +             %let _exploreobs_def= 0 ;
255560    +             %goto term ;
255562    +   %end ;
255563    +   %else
255564    +   %if &_exploreobs_recl le 32 %then %do ;
255565    +             %let _exploreobs_max=100000 ;
255566    +             %let _exploreobs_def= 10000 ;
255567    +   %end ;
255568    +   %else
255569    +   %if &_exploreobs_recl le 128 %then %do ;
255570    +             %let _exploreobs_max=60000 ;
255571    +             %let _exploreobs_def= 6000 ;
255572    +   %end ;
255573    +   %else
255574    +   %if &_exploreobs_recl lt 1000 %then %do ;
255575    +             %let _exploreobs_max=20000 ;
255576    +             %let _exploreobs_def= 2000 ;
255577    +   %end ;
255578    +   %else
255579    +   %if &_exploreobs_recl lt 5000 %then %do ;
255580    +             %let _exploreobs_max= 10000 ;
255581    +             %let _exploreobs_def=  1000 ;
255582    +   %end ;
255583    +   %else
255584    +   %if &_exploreobs_recl lt 20000 %then %do ;
255585    +             %let _exploreobs_max= 5000 ;
255586    +             %let _exploreobs_def=  500 ;
255587    +   %end ;
255588    +   %else %do ;
255589    +             %let _exploreobs_max= 1000 ;
255590    +             %let _exploreobs_def=  200 ;
255591    +   %end ;
255593    +   /*--- Users options ---*/
255594    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
255595    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
255596    +   %end;
255597    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
255598    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
255599    +   %end;
255601    +    /*--- S0868273 ---*/
255602    +    %if "&NBYTES" ne "" %then %do;
255603    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
255604    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
255605    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
255605   !+&EM_EXPLOREOBS_MAX));
255606    +       %end;
255608    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
255609    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
255610    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
255610   !+&EM_EXPLOREOBS_DEFAULT));
255611    +          %if ^&_exploreobs_def %then
255612    +              %let _exploreobs_def = 1;
255614    +       %end;
255615    +    %end;
255617    +   /*--- Terminate ---*/
255618    +   %term:
255620    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
255620   !+max=&_exploreobs_max : def= &_exploreobs_def ;
255621    +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.Varsel_TRAIN;
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM5_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM5_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.Varsel_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.Varsel_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.Varsel_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.Varsel_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.VARSEL_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   AcceptedCmpTotal Income Mnt NumDistPurchases RFMstat RMntFrq _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   Custid DepVar _WARN_
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 10 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      