MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.29 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16. April 2016
Time:                18.29 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2BYMYA9 "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2BYMYA9 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.29 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.29 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
47764      proc freq data=EMWS8.VarClus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.VarClus_VariableSet noprint;
47765      table ROLE*LEVEL/out=WORK.VarClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClusMETA;
47766      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

47767      proc print data=WORK.VarClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClusMETA label noobs;
47768      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
47769      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
47770      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47771      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
47772      run;

NOTE: There were 6 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

47773      title10;
MPRINT(EM_DIAGRAM):   title10;
47774      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48150      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
48151      * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
48152      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
48153      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

48154      %let EMEXCEPTIONSTRING=;
48155      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
48156      * TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus;
48157      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48158      %let EM_ACTION = TRAIN;
48159      %let syscc = 0;
48160      
48161      %macro main;
48162      
48163         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
48164         %include temp;
48165         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
48166         %include temp;
48167         filename temp;
48168      
48169        %SetProperties;
48170      
48171         %if %upcase(&EM_ACTION) = CREATE %then %do;
48172             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
48173             %include temp;
48174             filename temp;
48175             %create;
48176         %end;
48177         %else
48178         %if %upcase(&EM_ACTION) = TRAIN %then %do;
48179              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
48180                 %include temp;
48181                 filename temp;
48182                 %train;
48183         %end;
48184         %else
48185         %if %upcase(&EM_ACTION) = SCORE %then %do;
48186                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
48187                 %include temp;
48188                 filename temp;
48189                 %score;
48190         %end;
48191         %else
48192         %if %upcase(&EM_ACTION) = REPORT %then %do;
48193                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
48194                 %include temp;
48195                 filename temp;
48196                 %report;
48197         %end;
48198         /*
48199         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
48200             %put 'OPENING TABLE';
48201         %end;
48202         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
48203             %put 'CLOSE TABLE';
48204         %end;
48205         */
48206      %mend main;
48207      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
48209     +/* Initialize property macro variables */
48210     +%macro SetProperties;
48211     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
48212     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
48213     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
48214     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
48215     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
48216     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
48217     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
48218     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
48219     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
48220     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
48221     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
48222     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
48223     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
48225     +%mend SetProperties;
48227     +%Macro MakeDummyVariables(indata=,
48228     +                          outvar=,
48229     +                          outdata=,
48230     +                          fileref=,
48231     +                          recreatecmeta=N, /* optional */
48232     +                          incmeta=,     /* optional */
48233     +                          outcmeta=,    /* optional */
48234     +                          ndummyvars=_ndummyvars
48235     +                          );
48236     +    %global &ndummyvars;
48238     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
48239     +       class
48240     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
48241     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
48242     +    ;
48243     +    run;
48244     +    %let &ndummyvars = 0;
48245     +    data _null_;
48246     +    %let dsid = %sysfunc(open(work._classout));
48247     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
48248     +    %let dsid = %sysfunc(close(&dsid));
48249     +    run;
48251     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
48252     +       input
48253     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
48254     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
48255     +        / level=nominal stdize=no;
48256     +       make outvar = &outvar;
48257     +       score data = &indata out =&outdata;
48258     +       code  file=  "&fileref";
48259     +    run;
48260     +    %if &recreatecmeta eq Y %then %do;
48261     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
48262     +    data _tmpds;
48263     +        set _tmpds;
48264     +           ROLE = 'INPUT';
48265     +           LEVEL = 'INTERVAL';
48266     +           CREATOR='DMZIP';
48267     +           if NAME = '_TYPE_' then delete;
48268     +    run;
48269     +    data &outcmeta;
48270     +         set &incmeta _tmpds;
48271     +    run;
48272     +    %end;
48273     +    proc datasets lib=work nolist;
48274     +      delete  _dmdbdat _dmdbcat _classout
48275     +    %if &recreatecmeta eq Y %then %do;
48276     +    _tmpds
48277     +    %end;
48278     +    ;
48279     +    quit;
48280     +%Mend MakeDummyVariables;
48282     +/*--- Determine Optimal Number of Cluster ----
48283     +%macro FindClusNum(statds=, groupds=, minvariation=);
48284     +   %global optnclus;
48285     +   data varclus_tmp(drop=_NAME_);
48286     +      set &statDs;
48287     +      where _type_ ='PROPOR';
48288     +   run;
48289     +   proc sort data=varclus_tmp;
48290     +      by _NCL_;
48291     +   run;
48292     +   proc transpose data=varclus_tmp out=varclus_tmp;
48293     +      by _NCL_;
48294     +      var %EM_INTERVAL_INPUT
48295     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
48296     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
48297     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
48298     +          %do i = 2 %to &nvar;
48299     +          %let varname = %sysfunc(varname(&dsid, &i));
48300     +          &varname
48301     +          %end;
48302     +      %end;
48303     +   ;
48304     +   run;
48306     +   %if &minVariation eq %then %do;
48307     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
48308     +   %end;
48309     +   %if ^(0<&minVariation<100) %then %do;
48310     +       %let minVariation = 90;
48311     +   %end;
48313     +   data _null_;
48314     +      set varclus_tmp end=eof;
48315     +      by _NCL_;
48316     +      retain flag 0;
48317     +      if first._ncl_ then flag=0;
48318     +      if .<col1 < &minVariation then flag=1;
48319     +      if last._ncl_ and ^flag then do;
48320     +         call symput('OPTNCL', _ncl_);
48321     +         stop;
48322     +      end;
48323     +     if eof then call symput('OPTNCL', _ncl_);
48324     +   run;
48326     +   %let optnclus = &OPTNCL;
48328     +   data varclus_tmp(drop=_NCL_ _NAME_);
48329     +      set &statDs;
48330     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
48331     +   run;
48332     +   proc sort data=varclus_tmp;
48333     +      by _TYPE_;
48334     +   run;
48335     +   proc transpose data=varclus_tmp out=varclus_tmp;
48336     +      by _TYPE_;
48337     +   run;
48338     +   proc sort data=varclus_tmp;
48339     +      by _name_ _type_;
48340     +   run;
48342     +  proc transpose data=varclus_tmp out=&groupds;
48343     +      by _NAME_;
48344     +   run;
48345     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
48346     +      by Cluster descending Rsquare;
48347     +      where Cluster ne 0;
48348     +   run;
48349     +   proc datasets lib=work nolist mt=(DATA VIEW);
48350     +      delete varclus_tmp;
48351     +   run;
48352     +   quit;
48353     +%mend findClusNum;
48354     +*/
48356     +%macro getNclusfromTrain(inoutstat=, nc=);
48357     +%global &nc;
48358     +data _null_;
48359     +    set &inoutstat end=eof;
48360     +    if eof then do;
48361     +    call symput("&nc", _ncl_);
48362     +    end;
48363     +run;
48364     +%mend  getNclusfromTrain;
48366     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
48368     +     *--- Build Code to Modify Metadata ---*;
48369     +     filename X "&deltacodefile";
48370     +     data _null_;
48371     +        FILE X;
48372     +        set &groupds end=eof;
48373     +        /*by Cluster;*/
48374     +         if _N_=1 then do;
48375     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
48376     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
48377     +           %end;
48378     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
48379     +           put "if upcase(strip(NAME)) in (";
48380     +        end;
48381     +        if Strip(upcase(Selected)) eq 'YES' then do;
48382     +           string = '"'!!trim(left(VARIABLE))!!'"';
48383     +           put string;
48384     +        end;
48385     +        if eof then do;
48386     +           put ') then ROLE="INPUT";';
48387     +           put 'else ROLE="REJECTED";';
48388     +           put 'end;';
48390     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
48391     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
48392     +           %end;
48393     +        end;
48394     +     run;
48395     +     quit;
48397     +     filename X;
48399     +     quit;
48400     +%mend MakeDeltaCode;
48402     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
48403     +    %if ^%sysfunc(exist(&statds)) %then %do;
48404     +         %goto doendc;
48405     +    %end;
48407     +    data &corrds(drop=_TYPE_ _NCL_) ;
48408     +       set &statds;
48409     +       where _type_ eq 'CORR' ;
48410     +    run ;
48411     +    proc sort data=&corrds;
48412     +       by _NAME_ ;
48413     +    run ;
48414     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
48415     +      BY _NAME_ ;
48416     +    run ;
48417     +    data &corrplotds;
48418     +       length _Y_ $100;
48419     +       set &corrplotDs;
48420     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
48421     +    run ;
48422     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
48423     +       set &corrplotds;
48424     +       where _LABEL_ ne '' ;
48425     +       keep _TMP_ _LABEL_ ;
48426     +    run ;
48427     +    data _null_;
48428     +       nobs=0;
48429     +       dsid = open('varclus_match');
48430     +       if dsid then do;
48431     +          nobs = attrn(dsid, 'NOBS');
48432     +          dsid = close(dsid);
48433     +       end;
48434     +       call symput ('CORR_NOBS', nobs);
48435     +    run;
48436     +    %if &corr_nobs %then %do;
48437     +        proc sort data=varclus_match;
48438     +           by _name_;
48439     +        run ;
48440     +        proc sort data=&corrplotds;
48441     +           by _name_;
48442     +        run ;
48443     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
48444     +           merge varclus_match &corrplotds;
48445     +           by _NAME_ ;
48446     +           if _X_ eq '' then _X_=_NAME_ ;
48447     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
48448     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
48449     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
48451     +       run ;
48452     +    %end;
48453     +    %else %do;
48454     +        proc sort data=&corrplotds;
48455     +           by _name_;
48456     +        run ;
48457     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
48458     +           set &corrplotds;
48459     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
48460     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
48461     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
48463     +        run ;
48464     +    %end;
48465     +    proc sort data=&corrplotds;
48466     +       by _X_ _Y_;
48467     +    run ;
48468     +    proc datasets lib=work nolist mt=(DATA VIEW);
48469     +       delete varclus_match;
48470     +    run;
48471     +    quit;
48473     +%doendc:
48475     +%mend MakeVarClusCorrData;
48477     +%macro MakeStatPlotData(statds= , outstatplotds=);
48478     +   %if %sysfunc(exist(&statds)) %then %do;
48480     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
48481     +          set &statDs;
48482     +          where _type_ in('MEAN', 'STD', 'N');
48483     +       run ;
48484     +       proc transpose data=varclus_tmp out=&outstatplotds;
48485     +          id _TYPE_ ;
48486     +       run ;
48487     +       data &outstatplotds;
48488     +          set &outstatplotds(obs=1000);
48489     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
48490     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
48491     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
48492     +          else SCALEDSTD= STD ;
48493     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
48494     +       run ;
48495     +       proc sort data=&outstatplotds;
48496     +          by descending SCALEDSTD ;
48497     +       run ;
48498     +       proc datasets lib=work nolist mt=(DATA VIEW);
48499     +          delete varclus_tmp;
48500     +       run;
48501     +       quit;
48502     +    %end;
48504     +%mend MakeStatPlotData;
48507     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
48508     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
48509     +    data &EM_USER_OUTSTATSCORE;
48510     +          set &indata;
48511     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
48512     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
48513     +          if _TYPE_ = 'STD' then _NAME_='STD';
48514     +          DROP _TYPE_ _NCL_;
48515     +     run;
48517     +     filename _file_  "&fileRef";
48519     +     data _null_;
48520     +        FILE _file_ MOD;
48521     +        put ' ';
48522     +        put '/*-------------------------------------------------*/';
48523     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
48524     +        put '/*-------------------------------------------------*/';
48525     +        put ' ';
48526     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
48528     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
48529     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
48531     +        %let k = 1;
48532     +        %do %while(^%sysfunc(fetch(&dsid)));
48533     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
48534     +                %if &k > 2 %then %do;
48535     +                 %let cn = %eval(&k-2);
48536     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
48537     +                %end;
48538     +                %let k = %eval(&k+1);
48539     +        %end;
48541     +        %let rc = %sysfunc(rewind(&dsid));
48543     +        %do i= 2 %to &nvar;
48544     +            %let _varname =  %sysfunc(varname(&dsid, &i));
48545     +            %do %while(^%sysfunc(fetch(&dsid)));
48546     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
48547     +                %if &_name = MEAN %then
48548     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
48549     +                %else %if &_name = STD %then
48550     +                %let _std = %sysfunc(getvarn(&dsid, &i));
48551     +                %else %do;
48552     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
48553     +                      %let abscoeff = %sysfunc(abs(&coeff));
48554     +                          %if &abscoeff >  0 %then %do;
48555     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
48556     +                           %end;
48557     +                 %end;
48558     +             %end;
48559     +             %let rc = %sysfunc(rewind(&dsid));
48560     +         %end;
48562     +        %let dsid= %sysfunc(close(&dsid));
48563     +       run;
48564     +%mend CreateScoreCode;
48568     +/*----------------------------------------------------------
48569     +    Instead of using %MakeRSquareData,
48570     +    %MakeVarClusResultTable at macro2.source is used
48571     + +----------------------------------------------------------*/
48574     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
48576     +/* modifying  from ods rsquare = data */
48578     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
48579     +    Length Cluster $16;
48580     +    length Variable $32;
48581     +    Length VariableLabel $64;
48582     +    set &indata; retain CurrentCluster;
48583     +    if NumberOfClusters ^= &ncluster then delete;
48584     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
48585     +    CurrentCluster = Cluster;
48586     +   run;
48587     +proc sort data =&outdata ;
48588     +     by Cluster RsquareRatio;
48589     +run;
48590     +data _tmprsq(drop=index);
48591     +     set &outdata; by Cluster;
48592     +     if first.Cluster then do;
48593     +     index = strip(scan(Cluster,2 ));
48594     +     Variable = "Clus"||index;
48595     +     VariableLabel = "Cluster Component "||index;
48596     +     OwnCluster = 1;
48597     +     NextClosest = .;
48598     +     RsquareRatio = 0;
48599     +     output;
48600     +     end;
48601     +run;
48603     +proc sort data = _tmprsq ;
48604     +     by Cluster RsquareRatio;
48605     +run;
48606     +data &outdata;
48607     +     set &outdata _tmprsq;
48608     +by Cluster;
48609     +run;
48612     +/* Just create the Selected variable with all YES */
48614     +data &outdata;
48615     +    set &outdata; by cluster;
48616     +    length Selected $8;
48617     +    Selected = 'YES';
48618     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
48619     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
48620     +    rename OwnCluster = RSqWithClusterComp;
48621     +    rename NextClosest = RSqWithNextClusComp;
48622     +run;
48625     +/* Selected = Y/N will be done %score section -----
48627     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
48628     +data &outdata;
48629     +    set &outdata; by cluster;
48630     +    length Selected $8;
48631     +    if first.Cluster then Selected = 'YES';
48632     +    else Selected = 'NO';
48633     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
48634     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
48635     +    rename OwnCluster = RSqWithClusterComp;
48636     +    rename NextClosest = RSqWithNextClusComp;
48637     +run;
48638     +%end;
48639     +%else %do;
48640     +data &outdata;
48641     +    set &outdata; by cluster;
48642     +    if last.Cluster then Selected = 'YES';
48643     +    else Selected = 'NO';
48644     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
48645     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
48646     +    rename OwnCluster = RSqWithClusterComp;
48647     +    rename NextClosest = RSqWithNextClusComp;
48648     +run;
48649     +%end;
48650     +---------------------------------------------------------------*/
48652     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
48653     +/* to calculate NextClosestClusRsq */
48654     +proc transpose data = &inClusRSquare  out=_clusRsq;
48655     +      by cluster;
48656     +      run;
48657     +data _clusRsq;
48658     +     set _clusRsq;
48659     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
48660     +run;
48662     +proc sort data=_clusRsq;
48663     +    by cluster col1;
48664     +    run;
48665     +data _clusRsq(drop=_NAME_ _LABEL_);
48666     +     set _clusRsq; by cluster;
48667     +     if last.Cluster then output;
48668     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
48669     +     rename COL1 = RSqWithNextClusComp;
48670     +     rename Cluster = Variable;
48671     +     label  Cluster = "Variable";
48672     +run;
48674     +proc sort data =&outdata;
48675     +     by Variable;
48676     +run;
48677     +data &outdata;
48678     +    merge &outdata _clusRsq;
48679     +    by Variable;
48680     +run;
48681     +proc sort data =&outdata;
48682     +by Cluster  RsquareRatio;
48683     +run;
48684     +quit;
48685     +%end;
48687     +proc datasets lib = work nolist;
48688     +     delete _tmprsq _clusRsq;
48689     +     run;
48690     +quit;
48692     +%mend MakeRSquareData;
48695     +/*-------------------------------------------------------------------------*/
48699     +%macro ModifyCorr(indata=,
48700     +                  outdata=,
48701     +                  rsquare = Y
48702     +                  );
48703     +    data corr_tmp;
48704     +        set &indata;
48705     +    run;
48706     +     proc sql;
48707     +           update &indata
48708     +           set
48709     +     %let dsid = %sysfunc(open(work.corr_tmp));
48710     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
48711     +          %do i = 4 %to &nvar;
48712     +          %let _name = %sysfunc(varname(&dsid, &i));
48713     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
48714     +            %else  %let _name_md = &_name;
48715     +            %if &i < &nvar %then %do;
48716     +               &_name = 1- &_name_md ,
48717     +            %end;
48718     +            %else %do;
48719     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
48720     +            %end;
48721     +          %end;
48722     +      %let dsid= %sysfunc(close(&dsid));
48724     +      select * from &indata;
48725     +      run;
48726     +      proc datasets lib = work nolist;
48727     +           delete corr_tmp;
48728     +      run;
48729     +      quit;
48731     + %mend ModifyCorr;
48733     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
48734     +    data &outdata(drop= _NCL_  _TYPE_);
48735     +       set &indata;
48736     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
48737     +       rename _NAME_ = Cluster;
48738     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
48739     +    run;
48740     +    %if &RSquare eq Y %then %do;
48741     +     data corr_tmp;
48742     +        set &outdata;
48743     +     run;
48745     +     data &outdata(drop=i);
48746     +          set &outdata;
48747     +          %let dsid = %sysfunc(open(work.corr_tmp));
48748     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48749     +          %do i = 2 %to &nvar;
48750     +            %let _name = %sysfunc(varname(&dsid, &i));
48751     +            %let _name_md = &_name.**2;
48752     +                &_name = &_name_md;
48753     +          %end;
48754     +      %let dsid= %sysfunc(close(&dsid));
48755     +      run;
48756     +      proc datasets lib = work nolist;
48757     +           delete corr_tmp;
48758     +      run;
48760     +    %end;
48761     +     quit;
48762     +%mend MakeClusStructCorrData;
48764     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
48765     +    data &outdata(drop= _NCL_  _TYPE_);
48766     +       set &indata;
48767     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
48768     +       rename _NAME_ = Cluster;
48769     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
48770     +    run;
48771     +    data corr_tmp;
48772     +        set &outdata;
48773     +    run;
48775     +    %let dsid = %sysfunc(open(work.corr_tmp));
48776     +    %let nclus2= %eval(&ncluster+1);
48777     +    data &outdata;
48778     +         set &outdata;
48779     +          %do i = 2 %to &nclus2;
48780     +          %let i_1 = %eval(&i-1);
48781     +            %let _name = %sysfunc(varname(&dsid, &i));
48782     +            %let _newName = Clus&i_1;
48783     +                rename &_name = &_newName; ;
48784     +                *label &_name ="Cluster &i_1";
48785     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
48786     +          %end;
48787     +          keep Cluster
48788     +          %do i = 2 %to &nclus2;
48789     +                %let _name = %sysfunc(varname(&dsid, &i));
48790     +                &_name
48791     +          %end;
48792     +          ;
48793     +    %let dsid= %sysfunc(close(&dsid));
48794     +     run;
48795     +     quit;
48797     +    %if &RSquare eq Y %then %do;
48799     +       data corr_tmp;
48800     +        set &outdata;
48801     +     run;
48803     +     data &outdata(drop=i);
48804     +          set &outdata;
48805     +          %let dsid = %sysfunc(open(work.corr_tmp));
48806     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48807     +          %do i = 2 %to &nvar;
48808     +            %let _name = %sysfunc(varname(&dsid, &i));
48809     +            %let _name_md = &_name.**2;
48810     +                &_name = &_name_md;
48811     +          %end;
48812     +      %let dsid= %sysfunc(close(&dsid));
48813     +      run;
48814     +    %end;
48816     +    %if &makeplotds eq Y %then %do;
48817     +     proc transpose data = &outdata
48818     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
48819     +          by cluster;
48820     +     run;
48821     +     data &plotds;
48822     +          set  &plotds;
48823     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
48824     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
48825     +     run;
48826     +     %end;
48827     +     proc datasets lib = work nolist;
48828     +           delete corr_tmp;
48829     +     run;
48830     +     quit;
48831     +%mend MakeInterClusCorrData;
48834     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
48836     +data &outlink(drop = Selected);
48837     +     set &indata;
48838     +     LINKID = _N_;
48839     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
48840     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
48841     +run;
48842     +data &outnode(keep=NODEID TYPE LABEL);
48843     +    set &indata;
48844     +    length TYPE $16;
48845     +    rename Variable = NODEID;
48846     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
48847     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
48848     +    then  TYPE = "CLUSTER";
48849     +    else  TYPE="VARIABLE";
48850     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
48851     +run;
48852     +quit;
48853     +%mend MakeClusConstellData;
48857     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
48859     +data &outlink(drop = Selected);
48860     +     set &indata;
48861     +     LINKID = _N_;
48862     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
48863     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
48864     +run;
48865     +data &outnode(keep=NODEID TYPE LABEL);
48866     +    set &indata;
48867     +    length TYPE $16;
48868     +    rename Variable = NODEID;
48869     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
48870     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
48871     +    then  TYPE = "CLUSTER";
48872     +    else  TYPE="VARIABLE";
48873     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
48874     +run;
48875     +quit;
48876     +%mend MakeClusConstellData;
48879     +/*--- This will work only when inds is not a view data -------
48881     +%macro getNVarNObs(inds=, nvar=, nobs=);
48883     +    %global &nvar;
48884     +    %global &nobs;
48885     +    data _null_;
48886     +         dsid = open("&inds");
48887     +         nv = attrn(dsid, 'NVAR');
48888     +         no = attrn(dsid, 'NOBS');
48889     +         dsid = close(dsid);
48890     +         call symput("&nvar", nv);
48891     +         call symput("&nobs", no);
48892     +    run;
48893     +    quit;
48894     +%mend  getNVarNObs;
48896     ++---------------------------------------------------------------*/
48899     +%macro getNVar(inds=, nvar=);
48900     +    %global &nvar;
48901     +    data _null_;
48902     +         dsid = open("&inds");
48903     +         nv = attrn(dsid, 'NVAR');
48904     +         dsid = close(dsid);
48905     +         call symput("&nvar", nv);
48906     +    run;
48907     +    quit;
48908     +%mend  getNVar;
48912     +%macro getNObs(inds=, nobs=);
48913     +    %global &nobs;
48914     +    data _null_;
48915     +        set &inds end=eof;
48916     +        if eof then call symput("&nobs", _N_);
48917     +    run;
48918     +    quit;
48919     +%mend  getNObs;
48921     +%Macro CreateVarclusMeta(trainnum=);
48922     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
48923     +    data &EM_USER_VARCLUSMETA;
48924     +         length TrainNum 8.;
48925     +         length NewTrain $8;
48926     +         length NGCluster 8.;
48927     +         length ExportedComp $16;
48928     +         length HideVariable $8;
48929     +         TrainNum = &trainnum;
48930     +         NewTrain = "Y";
48931     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
48932     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
48933     +         NGCluster = 0; /* zero means no twostage */
48934     +   run;
48935     +   quit;
48936     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
48938     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
48939     +    data &outdata(drop= _NCL_  _TYPE_);
48940     +       set &indata;
48941     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
48942     +       %if &globalclusid ne %then %do;
48943     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
48944     +       rename _NAME_ = Cluster;
48945     +       %end;
48946     +       %else %do;
48947     +        _NAME_ = upcase(_NAME_);
48948     +       rename _NAME_ = Cluster;
48949     +       %end;
48950     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
48951     +    run;
48952     +    data corr_tmp;
48953     +        set &outdata;
48954     +    run;
48956     +    %let dsid = %sysfunc(open(work.corr_tmp));
48957     +    %let nclus2= %eval(&ncluster+1);
48958     +    data &outdata;
48959     +         set &outdata;
48960     +          %do i = 2 %to &nclus2;
48961     +          %let i_1 = %eval(&i-1);
48962     +            %let _name = %sysfunc(varname(&dsid, &i));
48963     +            %if &globalclusid ne %then
48964     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
48965     +                     rename &_name = &_newName;
48966     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
48967     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
48968     +                %end;
48969     +            %else
48970     +                %do; %let _newName = CLUS&i_1;
48971     +                     rename &_name = &_newName;
48972     +                     *label &_name ="Cluster &i_1";
48973     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
48974     +                %end;
48975     +          %end;
48976     +          keep Cluster
48977     +          %do i = 2 %to &nclus2;
48978     +                %let _name = %sysfunc(varname(&dsid, &i));
48979     +                &_name
48980     +          %end;
48981     +          ;
48982     +    %let dsid= %sysfunc(close(&dsid));
48983     +     run;
48984     +     quit;
48986     +    %if &RSquare eq Y %then %do;
48988     +       data corr_tmp;
48989     +        set &outdata;
48990     +     run;
48992     +     data &outdata;
48993     +          set &outdata;
48994     +          %let dsid = %sysfunc(open(work.corr_tmp));
48995     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48996     +          %do i = 2 %to &nvar;
48997     +            %let _name = %sysfunc(varname(&dsid, &i));
48998     +            %let _name_md = &_name.**2;
48999     +                &_name = &_name_md;
49000     +          %end;
49001     +      %let dsid= %sysfunc(close(&dsid));
49002     +      run;
49003     +    %end;
49005     +    %if &makeplotds eq Y %then %do;
49006     +     proc transpose data = &outdata
49007     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
49008     +          by cluster;
49009     +     run;
49010     +     data &plotds;
49011     +          set  &plotds;
49012     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
49013     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
49014     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
49015     +     run;
49016     +     %end;
49017     +     proc datasets lib = work nolist;
49018     +           delete corr_tmp;
49019     +     run;
49020     +     quit;
49021     +%mend MakeInterClusCorrData;
49023     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
49024     +    data _tmpds(drop= _NCL_);
49025     +       set &indata;
49026     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
49027     +       %if &globalclusid ne %then %do;
49028     +           _NAME_ = "GC&globalclusid.";
49029     +       rename _NAME_ = Cluster;
49030     +       %end;
49031     +       %else %do;
49032     +        _NAME_ = "CLUS";
49033     +        rename _NAME_ = Cluster;
49034     +       %end;
49035     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
49036     +    run;
49037     +    proc transpose data =_tmpds out =&outdata;
49038     +    run;
49040     +    data &outdata(drop=COL1);
49041     +        %if &globalclusid ne %then %do;
49042     +        length GCluster $16;
49043     +        %end;
49044     +        length Cluster $32;
49045     +        length _NAME_ $32;
49046     +         set &outdata;
49047     +         _NAME_ = upcase(_NAME_);
49048     +         rename _NAME_=Variable;
49049     +         *label _NAME_="Variable";
49050     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
49051     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
49052     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49054     +         %if &globalclusid ne %then %do;
49055     +          GCluster = "GC&globalclusid";
49056     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
49057     +         %end;
49058     +         %else %do;
49059     +         Cluster = "CLUS"||strip(COL1);
49060     +        %end;
49061     +         rename COL2 = RSqWithOwnClusComp;
49062     +         *label COL2 = "R-Square With Own Cluster Component";
49063     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
49065     +   run;
49066     +   proc sort data =&outdata;
49067     +        by Cluster RSqWithOwnClusComp;
49068     +   run;
49069     +   proc datasets lib = work nolist;
49070     +           delete _tmpds;
49071     +   run;
49072     +   quit;
49073     +%mend MakeOwnRSquare;
49075     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
49076     +    data &outdata(drop= _NCL_  _TYPE_);
49077     +       %if &globalclusid ne %then %do;
49078     +        length GCluster $16;
49079     +        %end;
49080     +       set &indata;
49081     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
49082     +       %if &globalclusid ne %then %do;
49083     +         GCluster = "GC&globalclusid";
49084     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
49085     +         rename _NAME_ = Cluster;
49086     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
49087     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49089     +       %end;
49090     +       %else %do;
49091     +         _NAME_ = upcase(_NAME_);
49092     +         rename _NAME_ = Cluster;
49093     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
49094     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49096     +       %end;
49097     +     run;
49098     +    %if &RSquare eq Y %then %do;
49099     +     data corr_tmp;
49100     +          set &outdata;
49101     +     run;
49102     +     %let istart = 2;
49103     +     %if &globalclusid ne %then %let istart = 3;
49104     +     data &outdata;
49105     +          set &outdata;
49106     +          %let dsid = %sysfunc(open(work.corr_tmp));
49107     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
49108     +          %do i =&istart %to &nvar;
49109     +            %let _name = %sysfunc(varname(&dsid, &i));
49110     +            %let _name_md = &_name.**2;
49111     +                &_name = &_name_md;
49112     +          %end;
49113     +      %let dsid= %sysfunc(close(&dsid));
49114     +      run;
49115     +      proc datasets lib = work nolist;
49116     +           delete corr_tmp;
49117     +      run;
49118     +    %end;
49119     +     quit;
49120     +%mend MakeClusStructCorrData;
49122     +/*
49123     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
49124     +*/
49126     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
49128     +     /* The indata should be the outdata
49129     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
49131     +     proc sort data =&indata out=_tmpclusRsq;
49132     +     by cluster;
49133     +     run;
49135     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
49136     +      by cluster;
49137     +     run;
49139     +     proc sort data=_tmpclusRsq;
49140     +        by _NAME_ COL1;
49141     +     run;
49143     +     data _tmpclusRsq;
49144     +         length _NAME_ $32;
49145     +         set _tmpclusRsq; by _NAME_;
49146     +          _NAME_ = upcase(_NAME_);
49147     +          %if &ncluster ne 1 %then %do;
49148     +             if last._NAME_ then delete;
49149     +          %end;
49150     +          %else %do;
49151     +             COL1 = 0;
49152     +          %end;
49153     +     run;
49154     +     /* need to sort again */
49155     +     proc sort data=_tmpclusRsq;
49156     +        by _NAME_ COL1;
49157     +     run;
49159     +     data &outdata;
49160     +         set _tmpclusRsq; by _NAME_;
49161     +         Cluster = upcase(Cluster);
49162     +         if last._NAME_ then output;
49163     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
49164     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
49165     +         rename COL1 = RSqWithNextClusComp;
49166     +         Cluster = upcase(Cluster);
49167     +         rename Cluster = ClosestCluster;
49168     +         *label  Cluster = "Next Closest Cluster";
49169     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
49170     +         rename _NAME_ = Variable;
49171     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
49172     +    run;
49175     +    %if &globalclusid ne %then %do;
49176     +    data &outdata;
49177     +       length GCluster $16;
49178     +       set &outdata;
49179     +       GCluster = "GC&globalclusid";
49180     +       run;
49181     +    %end;
49182     +    proc datasets lib = work nolist;
49183     +           delete _tmpclusRsq;
49184     +    run;
49185     +    quit;
49186     +%mend FindNextClosestClusByVar;
49189     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
49190     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
49191     +     proc sort data =&indata out=_tmpclusRsq;
49192     +     by cluster;
49193     +     run;
49194     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
49195     +     by cluster;
49196     +     run;
49197     +     proc sort data=_tmpclusRsq;
49198     +        by _NAME_ col1;
49199     +     run;
49200     +     data _tmpclusRsq;
49201     +         length _NAME_ $32;
49202     +         set _tmpclusRsq; by _NAME_;
49203     +          _NAME_ = upcase(_NAME_);
49204     +          %if &ncluster ne 1 %then %do;
49205     +             if last._NAME_ then delete;
49206     +          %end;
49207     +          %else %do;
49208     +             COL1 = 0;
49209     +          %end;
49210     +     run;
49211     +     data &outdata;
49212     +         set _tmpclusRsq; by _NAME_;
49213     +         Cluster = upcase(Cluster);
49214     +         if last._NAME_ then output;
49215     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
49216     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
49217     +         rename COL1 = RSqWithNextClusComp;
49218     +         Cluster = upcase(Cluster);
49219     +         rename Cluster = ClosestCluster;
49220     +         *label  Cluster = "Next Closest Cluster";
49221     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
49222     +         rename _NAME_ = Variable;
49223     +         *label  _NAME_ = "Variable";
49224     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
49226     +    run;
49227     +    %if &globalclusid ne %then %do;
49228     +    data &outdata;
49229     +       length GCluster $16;
49230     +       set &outdata;
49231     +       GCluster = "GC&globalclusid";
49232     +       run;
49233     +    %end;
49235     +    proc datasets lib = work nolist;
49236     +           delete _tmpclusRsq;
49237     +    run;
49239     +    quit;
49240     +%mend FindNextClosestClusByCluster;
49242     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
49243     +/*----
49244     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
49245     +-----------*/
49247     +proc sort data =&indata1;
49248     +    by Variable;
49249     +run;
49250     +proc sort data =&indata2;
49251     +    by Variable;
49252     +run;
49253     +data &outdata;
49254     +    merge &indata1 &indata2;
49255     +    by Variable;
49256     +    length Type $16;
49257     +    Type = 'Variable';
49258     +    *label Type ='Type';
49259     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
49260     +run;
49263     +data &indata3;
49264     +    set  &indata3 ;
49265     +    length RSqWithOwnClusComp 8.;
49266     +    Cluster = Variable;
49267     +    RSqWithOwnClusComp = 1;
49268     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
49269     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
49270     +    length Type $16;
49271     +    Type = 'ClusterComp';
49272     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
49274     +;
49275     +run;
49277     +proc sort data=&outdata;
49278     +    by Cluster;
49279     +run;
49280     +proc sort data =&indata3;
49281     +    by Cluster;
49282     +run;
49284     +data &outdata;
49285     +     set &outdata &indata3;
49286     +     by Cluster;
49287     +run;
49290     +/* Create the Selected variable with all YES */
49292     +data &outdata;
49293     +     set &outdata;
49294     +     length RsqRatio 8.;
49295     +     length Selected $8;
49296     +     *label RSqRatio = "1-R**2 Ratio";
49297     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
49298     +     *label Selected = "Variable Selected";
49299     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
49300     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
49301     +     Selected ='YES';
49302     +     rename _LABEL_ = Label;
49303     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
49304     +run;
49307     +/*----  Selected = Y/N will be assigened at the %score                   -------+
49308     +        Just create the Selected variable with all YES at the step above
49309     + +------------------------------------------------------------------------------+
49311     +proc sort data=&outdata;
49312     +    by Cluster RsqRatio;
49313     +run;
49315     +%if &selectedcomp eq CLUSTERCOMP %then %do;
49316     +data &outdata;
49317     +     set &outdata; by Cluster;
49318     +     length Selected $8;
49319     +     label Selected = "Variable Selected";
49320     +     if  first.Cluster then Selected ='Yes';
49321     +     else Selected = 'No';
49322     +    run;
49323     +%end;
49324     +%else %do;
49325     +data &outdata(drop = _var _varchange);
49326     +     set &outdata; retain _var 0; by Cluster;
49327     +     length Selected $8;
49328     +     label Selected = "Variable Selected";
49329     +     if first.Cluster then  _varchange = 0;
49330     +     else _varchange =1;
49331     +     if _var ne _varchange then  Selected  = 'Yes';
49332     +     else Selected = 'No';
49333     +     if last.cluster then  _var = 0;
49334     +     else _var = _varchange;
49335     +run;
49336     +%end;
49338     +--------------------------------------------------------------*/
49340     +quit;
49341     +%mend MakeVarClusResultTable;
49343     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
49344     +     proc sort data =&indata;
49345     +        by cluster;
49346     +     run;
49347     +     proc transpose data =&indata
49348     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
49349     +          by cluster;
49350     +     run;
49351     +     data &outdata;
49352     +          set  &outdata;
49353     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
49354     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
49355     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
49356     +     run;
49357     +     %if &globalclusid ne %then %do;
49358     +     data &outdata;
49359     +          Length GCluster $16;
49360     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49361     +          set  &outdata;
49362     +          GCluster ="GC&globalclusid.";
49363     +          run;
49364     +     %end;
49366     +%Mend MakePlotDataFromCorrTable;
49369     +%macro MakeCorrelation(indata=,
49370     +                       outstat=_tmpoutstat,
49371     +                       corrmatrix=N,
49372     +                       outcorr=_tmpoutcorr,
49373     +                       includeclassvar=N,
49374     +                       target=,
49375     +                       freq=,
49376     +                       weight=);
49377     +   %if &target eq  %then %do;
49379     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
49380     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
49381     +       %if &includeclassvar eq Y %then %do;
49382     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
49383     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
49384     +          %do i = 2 %to &nvar;
49385     +          %let varname = %sysfunc(varname(&dsid, &i));
49386     +          &varname
49387     +          %end;
49388     +       %end;
49389     +       ;
49390     +      %if &freq ne  %then %do;
49391     +          freq &freq;
49392     +      %end;
49393     +      %if &weight ne  %then %do;
49394     +          weight &weight;
49395     +      %end;
49397     +      run;
49398     +      %if &corrmatrix eq Y %then %do;
49399     +      data  &outcorr (drop = _NCL_ _TYPE_);
49400     +           set  &outstat ;
49401     +           if _TYPE_ ='CORR' then output;
49402     +      run;
49403     +      %end;
49404     +    %end;
49405     +    %else %do;
49406     +       proc corr data=&indata outp=&outstat noprint;
49407     +            var
49408     +       %let dsid = %sysfunc(open(&indata));
49409     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
49410     +          %do i = 1 %to &nvar;
49411     +              %let _name = %sysfunc(varname(&dsid, &i));
49412     +              %if &_name ne &target %then;
49413     +              &_name
49414     +           %end;
49415     +        %let dsid= %sysfunc(close(&dsid));
49416     +        ;
49417     +        with &target;
49418     +        run;
49419     +    %end;
49420     +    quit;
49421     +%mend MakeCorrelation;
49424     +%macro MakeCorrelationDistance(indata=,
49425     +                               outdata=,
49426     +                               rsquare = N
49427     +                               );
49428     +    data corr_tmp;
49429     +        set &indata;
49430     +        if _N_ = 1 then do;
49431     +           output;
49432     +           stop;
49433     +         end;
49434     +    run;
49435     +    %if &outdata ne  %then %let  _outdata = &outdata;
49436     +    %else %let _outdata = &indata;
49438     +    data &_outdata;
49439     +         set &indata;
49441     +         %let dsid = %sysfunc(open(work.corr_tmp));
49442     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
49443     +          %do i = 2 %to &nvar;
49444     +              %let _name = %sysfunc(varname(&dsid, &i));
49445     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
49446     +              %else  %let _name_md = &_name;
49447     +              &_name = 1- &_name_md;
49448     +          %end;
49449     +      %let dsid= %sysfunc(close(&dsid));
49450     +      run;
49451     +      proc datasets lib = work nolist;
49452     +           delete corr_tmp;
49453     +      run;
49454     +      quit;
49455     +  %mend MakeCorrelationDistance;
49458     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
49459     +                                   rsquare = N
49460     +                                   );
49461     +    data corr_tmp;
49462     +        set &indata;
49463     +    run;
49464     +    proc sql noprint;
49465     +           update &indata
49466     +           set
49467     +     %let dsid = %sysfunc(open(work.corr_tmp));
49468     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
49469     +          %do i = 4 %to &nvar;
49470     +          %let _name = %sysfunc(varname(&dsid, &i));
49471     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
49472     +            %else  %let _name_md = &_name;
49473     +            %if &i < &nvar %then %do;
49474     +               &_name = 1- &_name_md ,
49475     +            %end;
49476     +            %else %do;
49477     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
49478     +            %end;
49479     +          %end;
49480     +      %let dsid= %sysfunc(close(&dsid));
49482     +      select * from &indata;
49483     +      run;
49484     +     data &indata( drop = _NCL_);
49485     +           set &indata;
49486     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
49487     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
49488     +     run;
49489     +     data &indata(DROP = _NCL_);
49490     +           set &indata;
49491     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
49492     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
49493     +           rename _NAME_ = _VAR_;
49494     +     run;
49495     +     proc datasets lib = work nolist;
49496     +           delete corr_tmp;
49497     +     run;
49498     +     quit;
49499     + %mend UpdateOutStatCorrToDistance;
49502     +%macro HierClusWithCorr(indata= ,
49503     +                        ncluster=,
49504     +                        method = Ward,
49505     +                        outtree = _outtree,
49506     +                        idvar =_VAR_,
49507     +                        outdata=,
49508     +                        rescore = N,
49509     +                        newncluster=
49510     +                        );
49511     +      %global &newncluster;
49512     +      %if &rescore ne Y %then %do;
49513     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
49514     +                   method=&method outtree=&outtree noprint;
49515     +           id &idvar;
49516     +      run;
49517     +      %end;
49518     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
49519     +      run;
49520     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
49521     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
49522     +      run;
49523     +      data _outcontent;
49524     +          set _outcontent;
49525     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
49526     +          index = 1;
49527     +          rename NAME = _NAME_;
49528     +      run;
49529     +      proc sort data=_outcontent;
49530     +          by _NAME_;
49531     +      run;
49532     +      proc sort data =&outdata;
49533     +           by _NAME_;
49534     +      run;
49535     +      data &outdata(drop=index);
49536     +          merge &outdata _outcontent;
49537     +          by _NAME_;
49538     +          if index = . then delete;
49539     +      run;
49540     +      /*-----------------------------------------------------------*/
49541     +      data &outdata;
49542     +           length CLUSNAME $16;
49543     +           set &outdata;
49544     +           if CLUSTER > &ncluster then delete;
49545     +           CLUSNAME='GC'||strip(CLUSTER);
49546     +           *label CLUSNAME = "Cluster Name";
49547     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
49548     +           rename _NAME_ = VARIABLE ;
49549     +           *label _NAME_ = "Variable";
49550     +           *label CLUSTER = "Cluster";
49551     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
49552     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
49553     +      run;
49554     +      proc sort data=&outdata out=&outdata;
49555     +           by CLUSTER;
49556     +      run;
49557     +      proc means data =&outdata noprint;
49558     +           output out=_meanout;
49559     +      run;
49560     +      data _null_;
49561     +            set _meanout;
49562     +            if strip(_STAT_) eq 'MAX' then do;
49563     +            call symput("&newncluster", CLUSTER);
49564     +            stop;
49565     +            end;
49566     +      run;
49568     +      proc datasets lib = work nolist;
49569     +           delete _outcontent _meanout;
49570     +      run;
49571     +      quit;
49572     +%mend  HierClusWithCorr;
49574     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
49576     +     data _tmpindata;
49577     +          set &indata;
49578     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
49579     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
49580     +          if _TYPE_ = 'STD' then _NAME_='STD';
49581     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
49582     +          DROP _TYPE_ _NCL_;
49583     +     run;
49585     +     filename _file_  "&fileRef";
49587     +     data _null_;
49588     +        FILE _file_ MOD;
49589     +        put ' ';
49590     +        put "/*-------------------------------------------------*/";
49591     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
49592     +        put "/*-------------------------------------------------*/";
49593     +        put ' ';
49594     +        %let dsid = %sysfunc(open(work._tmpindata));
49596     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
49597     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
49598     +        %let k = 1;
49599     +        %do %while(^%sysfunc(fetch(&dsid)));
49600     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49601     +               %if &k > 2 %then %do;
49602     +                %let cn = %eval(&k-2);
49603     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
49604     +                %end;
49605     +                %let k = %eval(&k+1);
49607     +        %end;
49608     +        %let rc = %sysfunc(rewind(&dsid));
49610     +        %do j= 2 %to &nvar;
49611     +            %let _varname = %sysfunc(varname(&dsid, &j));
49612     +            %do %while(^%sysfunc(fetch(&dsid)));
49613     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49614     +                %if &_name = MEAN %then
49615     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
49616     +                %else %if &_name = STD %then
49617     +                %let _std = %sysfunc(getvarn(&dsid, &j));
49618     +                %else %do;
49619     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
49620     +                      %let abscoeff = %sysfunc(abs(&coeff));
49621     +                          %if &abscoeff >  0 %then %do;
49622     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
49623     +                           %end;
49624     +                 %end;
49625     +             %end;
49626     +             %let rc = %sysfunc(rewind(&dsid));
49627     +         %end;
49629     +        %let dsid= %sysfunc(close(&dsid));
49631     +     run;
49633     +     filename _file_;
49634     +     proc datasets lib = work nolist;
49635     +           delete _tmpindata;
49636     +     run;
49637     +     quit;
49638     +%mend CreateScoreCode2;
49641     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
49643     +     /*--- Build Code to Modify Metadata ---*/
49644     +     filename X "&deltacodefile";
49645     +     data _null_;
49646     +        FILE X;
49647     +        set &groupds end=eof;
49648     +        if _N_=1 then do;
49649     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
49650     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
49651     +           %end;
49652     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
49653     +           put "if upcase(strip(NAME)) in (";
49654     +        end;
49655     +        if Strip(upcase(Selected)) eq 'YES' then do;
49656     +           string = '"'!!trim(left(VARIABLE))!!'"';
49657     +           put string;
49658     +        end;
49659     +        if eof then do;
49660     +           put ') then ROLE="INPUT";';
49661     +           put 'else ROLE="REJECTED";';
49662     +           put 'end;';
49664     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
49665     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
49666     +           %end;
49667     +        end;
49668     +     run;
49669     +     quit;
49671     +     filename X;
49672     +     quit;
49673     +%mend MakeDeltaCode2;
49675     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
49676     +  %global &ngc;
49677     +  data _null_;
49678     +  %if &indata ne %then %do;
49679     +      %let dsid = %sysfunc(open(&indata));
49680     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
49681     +      %let dsid = %sysfunc(close(&dsid));
49682     +  %end;
49683     +  %else %do;
49684     +       %let nvar = %eval(&ninput+&ndummy); ;
49685     +  %end;
49686     +  %let numgc = %eval(&nvar/&div+2);
49687     +  %let &ngc = &numgc;
49688     +   run;
49689     +  quit;
49690     +%mend getInitialGClusterNumber;
49693     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
49694     +data &outlink(drop = Selected);
49695     +     set &indata;
49696     +     LINKID = _N_;
49697     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
49698     +run;
49699     +data &outnode(keep=NODEID TYPE LABEL);
49700     +    set &indata;
49701     +    length TYPE $16;
49702     +    rename VARIABLE = NODEID;
49703     +    *label  CLUSNAME="Node ID";
49704     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
49705     +    TYPE = "VARIABLE";
49706     +    *label TYPE = "Node Type";
49707     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
49708     +    run;
49709     +data _tmp(keep=NODEID TYPE LABEL);
49710     +    set &indata;
49711     +    length TYPE $16;
49712     +    rename CLUSNAME = NODEID;
49713     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
49714     +    TYPE = "GCLUSTER";
49715     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
49716     +    run;
49717     +proc sort data=_tmp;
49718     +    by NODEID;
49719     +run;
49720     +data _tmp;
49721     +    set _tmp; by NODEID;
49722     +    if first.NODEID then output;
49723     +run;
49724     +proc sort data=&outnode;
49725     +    by NODEID;
49726     +run;
49727     +data  &outnode;
49728     +    set _tmp &outnode;
49729     +run;
49730     +proc datasets lib = work nolist;
49731     +     delete _tmp;
49732     +run;
49733     +quit;
49734     +%mend MakeGobalConstellData;
49736     +/* Make contellation plot data among GCLUSTERS */
49738     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
49740     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
49741     +     set &indata;
49742     +     LINKID = _N_;
49743     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
49744     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
49745     +     end;
49746     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
49747     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
49748     +     end;
49749     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
49750     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
49751     +    end;
49752     +run;
49754     +data _tmp_outrsquare;
49755     +        set &inoutrsq;
49756     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
49757     +run;
49759     +proc freq data =_tmp_outrsquare noprint;
49760     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
49761     +run;
49763     +data &outnode(keep=_NAME_ TYPE LABEL);
49764     +    set &outlink;
49765     +    length TYPE $16;
49766     +    length LABEL $100;
49767     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
49769     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
49770     +    TYPE = "GCLUSTER";
49771     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
49772     +    end;
49773     +    else do;
49774     +    TYPE= "ROOT";
49775     +    LABEL= _NAME_;
49776     +    end;
49777     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
49778     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
49779     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
49780     +    run;
49782     +proc sort data=&outnode;
49783     +     by _NAME_;
49784     +proc sort data=_tmp_GCLUSFREQ;
49785     +     by _NAME_;
49786     +run;
49788     +data  &outnode;
49789     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
49790     +     if COUNT=. then COUNT=1;
49791     +run;
49793     +proc datasets lib = work nolist;
49794     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
49795     +run;
49797     +quit;
49798     +%Mend MakeGClusterConstData;
49801     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
49803     +    data _gscoretmpds;
49804     +          set &indata;
49805     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
49806     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
49807     +          if _TYPE_ = 'STD' then _NAME_='STD';
49808     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
49809     +          DROP _TYPE_ _NCL_;
49810     +     run;
49812     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
49813     +        GCluster Component &globalclusid ------ */
49815     +    filename _file_  "&fileref";
49817     +    data _null_;
49818     +        %if &globalclusid eq 1 %then %do;
49819     +          FILE _file_;
49820     +        %end;
49821     +        %else %do;
49822     +          FILE _file_ MOD;
49823     +        %end;
49825     +        %let dsid = %sysfunc(open(work._gscoretmpds));
49826     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
49827     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
49829     +        %let k = 1;
49830     +        %do %while(^%sysfunc(fetch(&dsid)));
49831     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49832     +                %if &k > 2 %then %do;
49833     +                put "&_name = 0 ; ";
49834     +                %end;
49835     +                %let k = %eval(&k+1);
49836     +        %end;
49838     +        %let rc = %sysfunc(rewind(&dsid));
49839     +        %do i= 2 %to &nvar;
49840     +            %let _varname =  %sysfunc(varname(&dsid, &i));
49841     +            %do %while(^%sysfunc(fetch(&dsid)));
49842     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49843     +                %if &_name = MEAN %then
49844     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
49845     +                %else %if &_name = STD %then
49846     +                %let _std = %sysfunc(getvarn(&dsid, &i));
49847     +                %else %do;
49848     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
49849     +                      %let abscoeff = %sysfunc(abs(&coeff));
49850     +                          %if &abscoeff >  0 %then %do;
49851     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
49852     +                           %end;
49853     +                 %end;
49854     +             %end;
49855     +             %let rc = %sysfunc(rewind(&dsid));
49857     +         %end;
49859     +        %let dsid= %sysfunc(close(&dsid));
49860     +       run;
49863     +       proc datasets lib=work nolist;
49864     +            delete _gscoretmpds;
49865     +       run;
49866     +      quit;
49868     +%mend CreateGClusterScoreCode;
49871     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
49873     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
49874     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
49875     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
49876     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
49877     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
49878     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
49879     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
49880     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
49881     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
49882     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
49883     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
49884     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
49885     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
49886     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
49888     +   filename gsfile "&gscorecode";
49890     +   data &EM_USER_GSCORE;
49891     +             set &indata;
49892     +             %include  gsfile;
49893     +        keep
49894     +        %do i=1 %to &ngcluster;
49895     +         %let gcvarname = GC&i;
49896     +         &gcvarname
49897     +        %end;
49898     +     ;
49899     +   run;
49901     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
49902     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
49903     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
49904     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
49905     +    noprint  ;
49906     +     var
49907     +       %do i=1 %to &ngcluster;
49908     +         %let gcvarname = GC&i;
49909     +         &gcvarname
49910     +        %end;
49911     +   ;
49912     +   run;
49915     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
49916     +   data &EM_USER_GSCORECORRPLOT ;
49917     +        set &EM_USER_GSCORECORRPLOT;
49918     +        rename _X_ = X;
49919     +        rename _Y_ = Y;
49920     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49921     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49922     +   run;
49924     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
49926     +   data &EM_USER_GSCORETREE;
49927     +        length _NAME_ $32;
49928     +        length _LABEL_ $100;
49929     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
49930     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
49931     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
49932     +        end;else do;
49933     +         _LABEL_ = _NAME_;
49934     +        end;
49935     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
49937     +   run;
49939     +   quit;
49941     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
49946     +%macro train;
49948     +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
49949     +   %include temp;
49950     +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
49951     +   %include temp;
49952     +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
49953     +   %include temp;
49954     +   filename temp;
49956     +   %let VARCLUS_MAXNUMOBS = 100000;
49957     +   %let VARCLUS_MAXNUMVAR = 200;
49958     +   %let trainnum = 0;
49959     +   %let error = 0;
49961     +   %if &EM_IMPORT_DATA eq %then %do;
49962     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
49963     +       %let  error = 1;
49964     +       %goto endtrain;
49965     +   %end;
49967     +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
49968     +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
49969     +        %let  error = 1;
49970     +        %goto endline;
49971     +    %end;
49973     +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
49974     +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
49975     +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
49976     +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
49977     +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
49978     +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
49980     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
49981     +        %if  &_num_input_total < 2 %then %do;
49982     +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
49983     +            %let error = 2;
49984     +            %goto endtrain;
49985     +        %end;
49986     +   %end;
49987     +   %else %do;
49988     +         %if  &_num_input_interval < 2 %then %do;
49989     +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
49990     +         %let error = 2;
49991     +         %goto endtrain;
49992     +         %end;
49993     +   %end;
49995     +   %em_checkerror();
49997     +   %if &EMEXCEPTIONSTRING ne %then %do;
49998     +       %goto endtrain;
49999     +   %end;
50001     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
50003     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
50004     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
50005     +                             outvar=&EM_USER_OUTDUMMY,
50006     +                             outdata=_newtrainds,
50007     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
50009     +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
50010     +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
50011     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
50012     +                proc datasets lib=work nolist;
50013     +                delete  _newtrainds;
50014     +                run;
50015     +                quit;
50016     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
50017     +                %let error = 3;
50018     +               %goto endtrain;
50019     +            %end;
50020     +        %end;
50022     +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
50023     +             %getNVar(inds=_newtrainds, nvar=_nvar);
50025     +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
50026     +                %let trainnum = 2;
50027     +            %end;
50028     +            %else %do;
50029     +                %let trainnum = 1;
50030     +            %end;
50031     +        %end;
50032     +    %end;
50033     +    %else %do;
50035     +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
50037     +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
50039     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
50041     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
50042     +                  %let error = 3;
50043     +                 %goto endtrain;
50044     +            %end;
50045     +        %end;
50048     +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
50049     +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
50050     +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
50051     +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
50052     +                %let trainnum = 2;
50053     +            %end;
50054     +            %else %do;
50055     +                %let trainnum = 1;
50056     +            %end;
50057     +        %end;
50059     +   %end;
50061     +    %em_checkerror();
50063     +    %if &EMEXCEPTIONSTRING ne %then %do;
50064     +       %let error = 4;
50065     +       %goto endtrain;
50066     +    %end;
50068     +    %CreateVarclusMeta(trainnum=&trainnum);
50070     +    %if &error > 0 %then  %goto endtrain;
50072     +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
50074     +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
50075     +           %train1;
50076     +       %end;
50077     +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
50078     +           %train2;
50079     +       %end;
50081     +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
50082     +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
50083     +      %em_copyfile(infref=_in, outfref=_out);
50084     +      filename _in;
50085     +      filename _out;
50088     +   %endtrain:
50091     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
50093     +%macro VarClus(indata=,
50094     +               outstat=,
50095     +               outtree=,
50096     +               vars=,
50097     +               freq=,
50098     +               weight=,
50099     +               includeclassvar=
50100     +               );
50102     +   %if &vars eq %then
50103     +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
50105     +       proc varclus data = &indata outstat= &outstat
50106     +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
50107     +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
50108     +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
50109     +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
50110     +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
50111     +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
50112     +       %end;
50114     +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
50115     +            maxeigen = &EM_PROPERTY_MAXEIGEN
50116     +       %end;
50118     +       %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
50119     +            proportion = &EM_PROPERTY_PROPORTION
50120     +       %end;
50121     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
50122     +               summary
50123     +       %end;
50125     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
50126     +           short
50127     +       %end;
50128     +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
50129     +           corr trace simple
50130     +       %end;
50131     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
50132     +          noprint
50133     +       %end;
50134     +       outtree=&outtree
50135     +       ;
50136     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
50138     +      %if &includeclassvar eq Y %then %do;
50139     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
50140     +          %if &dsid > 0 %then %do;
50141     +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
50142     +              %do i = 2 %to &nvar;
50143     +                  %let varname = %sysfunc(varname(&dsid, &i));
50144     +                   &varname
50145     +              %end;
50147     +          %end;
50148     +      %end;
50150     +      ;
50151     +      /*------------------------
50152     +      %if &freq ne  %then %do;
50153     +          freq &freq;
50154     +      %end;
50155     +      %if &weight ne  %then %do;
50156     +          weight &weight;
50157     +      %end;
50158     +      ----------------------------*/
50159     +      %if %EM_FREQ ne %then %do;
50160     +           Freq %EM_FREQ;
50161     +      %end;
50162     +      ;
50163     +    run;
50164     +    %endline:
50165     +    quit;
50166     +%mend VarClus;
50168     +%macro Train1;
50170     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
50171     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
50172     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
50173     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
50174     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
50175     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
50176     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
50177     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
50178     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
50179     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
50180     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
50181     +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
50182     +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
50184     +   /*
50185     +     %let VARCLUS_MAXNUMOBS = 100;
50186     +     %let VARCLUS_MAXNUMVAR = 200;
50187     +   */
50189     +   /* Train
50191     +   %if &EM_IMPORT_DATA eq %then %do;
50192     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
50193     +       %goto endtrain1;
50194     +   %end;
50196     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
50197     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
50198     +        %goto endtrain1;
50199     +   %end;
50200     +   */
50201     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
50202     +       /* moved this to pretrain ------------
50204     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
50205     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
50206     +                             outvar=&EM_USER_OUTDUMMY,
50207     +                             outdata=_newtrainds,
50208     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
50210     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
50211     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
50212     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
50213     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
50214     +                %goto endtrain;
50215     +            %end;
50216     +        %end;
50218     +        +-------------------------------------*/
50220     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
50221     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
50222     +          There is no _newtrainds */
50223     +         %VarClus( indata=&EM_IMPORT_DATA,
50224     +                  outstat=&EM_USER_OUTSTAT,
50225     +                  outtree = &EM_USER_OUTTREE,
50226     +                  includeclassvar=N
50227     +                 );
50228     +        %end;
50229     +        %else %do;
50230     +        %VarClus( indata=_newtrainds,
50231     +                  outstat=&EM_USER_OUTSTAT,
50232     +                  outtree = &EM_USER_OUTTREE,
50233     +                  includeclassvar=Y
50234     +                 );
50235     +         proc datasets lib=work nolist;
50236     +              delete  _newtrainds;
50237     +         run;
50238     +         %end;
50239     +    %end;
50240     +    %else %do;
50242     +        /*----- moved this to pretrain ------------
50243     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
50244     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
50245     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
50246     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
50247     +                 %goto endtrain;
50248     +            %end;
50249     +        %end;
50250     +        +-------------------------------------*/
50252     +        %VarClus(indata=&EM_IMPORT_DATA,
50253     +                  outstat=&EM_USER_OUTSTAT,
50254     +                  outtree =&EM_USER_OUTTREE,
50255     +                  includeclassvar=N
50256     +               );
50258     +   %end;
50260     +   %em_checkerror();
50262     +   %if &EMEXCEPTIONSTRING ne %then %do;
50263     +       %goto endtrain1;
50264     +   %end;
50265     +    /*
50266     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
50267     +    */
50269     +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
50271     +    %let gid=;
50273     +    /*--- To make the main result table ----------------------*/
50275     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
50276     +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
50277     +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
50278     +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
50279     +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
50280     +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
50282     +   /* Inter Cluster Correlation Plot ------------------------*/
50284     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
50285     +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
50287     +   /* Create some other data sets for results ----*/
50289     +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
50290     +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
50291     +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
50293     +  /*---- move this to Score action ------------
50294     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
50295     +   */
50297     +   /* create score code at training time */
50298     +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
50299     +   %endtrain1:
50300     +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
50303     +%macro VarClus2( indata=,
50304     +                 outdata=,
50305     +                 outstat =outstat,
50306     +                 outrsquare=outrsquare,
50307     +                 outtree = outtree,
50308     +                 outclusstruct = outclusstruct,
50309     +                 outcluscorr =outcluscorr,
50310     +                 outcluscorrplot =outcluscorrplot,
50311     +                 outclusrsquare =outclusrsquare,
50312     +                 outstatplot = outstatplot,
50313     +                 outcorr = outcorr,
50314     +                 outcorrplot = outcorrplot,
50315     +                 clusdata=,
50316     +                 outnode=outnode,
50317     +                 outlink=outlink,
50318     +                 ngroup =1  );
50319     +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
50320     +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
50321     +              %goto endline;
50322     +         %end;
50324     +        %global numglobalcluster;
50325     +        %let  numglobalcluster = &ngroup;
50326     +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
50327     +        %do vci =1 %to &ngroup;
50328     +           data tmp_clusdata;
50329     +                set &clusdata;
50330     +                if CLUSTER ne &vci then delete;
50331     +           run;
50332     +           %let outstatds = &outstat.&vci;
50333     +           %let outrsquareds = &outrsquare.&vci;
50334     +           %let outtreeds = &outtree.&vci;
50335     +           %let outclusstuctds = &outclusstruct.&vci;
50336     +           %let outcluscorrds = &outcluscorr.&vci;
50337     +           %let outcluscorrplotds = &outcluscorrplot.&vci;
50338     +           %let outclusrsquareds = &outclussquare.&vci;
50339     +           %let outstatplotds = &outstatplot.&vci;
50340     +           %let outcorrds = &outcorr.&vci;
50341     +           %let outcorrplotds = &outcorrplot.&vci;
50342     +           %let outnodeds = &outnode.&vci;
50343     +           %let outlinkds = &outlink.&vci;
50345     +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
50346     +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
50347     +           %let emuseroutstat = &EM_USER_&outstatds;
50349     +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
50350     +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
50351     +           %let emuserouttree = &EM_USER_&outtreeds;
50353     +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
50354     +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
50355     +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
50357     +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
50358     +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
50359     +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
50361     +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
50362     +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
50363     +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
50365     +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
50366     +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
50367     +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
50369     +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
50370     +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
50371     +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
50373     +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
50374     +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
50375     +           %let emuseroutcorr = &EM_USER_&outcorrds;
50377     +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
50378     +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
50379     +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
50381     +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
50382     +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
50383     +           %let emuseroutnode = &EM_USER_&outnodeds;
50385     +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
50386     +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
50387     +           %let emuseroutlink = &EM_USER_&outlinkds;
50389     +           proc varclus data=&indata outstat=&emuseroutstat
50390     +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
50391     +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
50392     +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
50393     +            %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
50394     +                %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
50395     +                %if &maxc > 1 %then %do;     maxc=&maxc %end;
50396     +           %end;
50398     +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
50399     +            maxeigen = &EM_PROPERTY_MAXEIGEN
50400     +            %end;
50402     +           %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
50403     +                proportion = &EM_PROPERTY_PROPORTION
50404     +           %end;
50405     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
50406     +               summary
50407     +           %end;
50408     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
50409     +               short
50410     +           %end;
50411     +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
50412     +               corr trace simple
50413     +           %end;
50414     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
50415     +               noprint
50416     +           %end;
50417     +              outtree=&emuserouttree
50418     +           ;
50419     +           var
50420     +           %let dsid=%sysfunc(open(work.tmp_clusdata));
50421     +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
50422     +                %do %while(^%sysfunc(fetch(&dsid)));
50423     +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
50424     +                    &_varname
50425     +                %end;
50426     +            %let dsid = %sysfunc(close(&dsid));
50427     +           ;
50428     +           %if %EM_FREQ ne %then %do;
50429     +           Freq %EM_FREQ;
50430     +           %end;
50431     +           run;
50433     +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
50435     +            %let gid=&vci;
50436     +            /*--- To make the main result table ----------------------*/
50437     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
50438     +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
50439     +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
50440     +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
50441     +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
50442     +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
50444     +            /* Inter Cluster Correlation Plot ------------------------*/
50446     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
50447     +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
50449     +           /* Create some other data sets for results ---------------*/
50451     +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
50452     +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
50453     +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
50455     +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
50457     +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
50459     +           %if &vci = 1 %then %do;
50460     +           data &EM_USER_OUTRSQUARE;
50461     +                set &emuseroutrsquare;
50462     +           run;
50463     +           %end;
50464     +           %else %do;
50465     +           data &EM_USER_OUTRSQUARE;
50466     +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
50467     +           run;
50468     +           %end;
50469     +           quit;
50470     +       %end;
50472     +       /*---- move this to Score action ------------
50473     +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
50474     +       */
50476     +       /* Make Score Gcluster component & correlation  */
50477     +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
50479     +       quit;
50480     +       %endline:
50481     +%mend VarClus2;
50484     +%macro Train2;
50486     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
50487     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
50488     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
50489     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
50490     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
50491     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
50492     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
50493     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
50494     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
50495     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
50496     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
50497     +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
50498     +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
50499     +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
50500     +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
50501     +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
50502     +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
50503     +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
50507     +    /* Train */
50509     +   /* moved to pretrain ------------
50511     +   %if &EM_IMPORT_DATA eq %then %do;
50512     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
50513     +       %goto endtrain2;
50514     +   %end;
50516     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
50517     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
50518     +        %goto endtrain2;
50519     +   %end;
50520     +   +-------------------------------------------*/
50522     +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
50525     +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
50527     +        /*----- moved to pretrain ------------
50529     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
50530     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
50531     +                             outvar=&EM_USER_OUTDUMMY,
50532     +                             outdata=_newtrainds,
50533     +                             fileref=&EM_FILE_EMFLOWSCORECODE,
50534     +                              ndummyvars=_ndummyvars
50535     +                            );
50537     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
50538     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
50539     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
50540     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
50541     +                %goto endtrain;
50542     +            %end;
50543     +        %end;
50545     +        +---------------------------------------*/
50546     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
50547     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
50548     +          There is no _newtrainds */
50549     +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
50550     +                             outstat=&EM_USER_GOUTSTAT,
50551     +                             corrmatrix=Y,
50552     +                             outcorr=&EM_USER_GOUTCORR,
50553     +                             includeclassvar=N,
50554     +                             freq =%EM_FREQ
50555     +                          );
50556     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
50558     +        %end;
50559     +        %else %do;
50560     +         %MakeCorrelation(   indata=_newtrainds,
50561     +                             outstat=&EM_USER_GOUTSTAT,
50562     +                             corrmatrix=Y,
50563     +                             outcorr=&EM_USER_GOUTCORR,
50564     +                             includeclassvar=Y,
50565     +                             freq =%EM_FREQ
50566     +                          );
50567     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
50569     +        %end;
50571     +    %end;
50572     +    %else %do;
50574     +        /* moved to pretrain -------------------
50576     +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
50577     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
50578     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
50579     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
50580     +                %goto endtrain;
50581     +            %end;
50582     +        %end;
50583     +         +------------------------------------------*/
50585     +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
50586     +                          outstat=&EM_USER_GOUTSTAT,
50587     +                          corrmatrix=Y,
50588     +                          outcorr=&EM_USER_GOUTCORR,
50589     +                          includeclassvar=N,
50590     +                          freq =%EM_FREQ
50591     +                          );
50592     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
50593     +    %end;
50595     +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
50596     +                                rsquare = N
50597     +                                );
50598     +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
50599     +                      ncluster=&_ngc,
50600     +                      method = Ward,
50601     +                      outtree =&EM_USER_GOUTTREE,
50602     +                      idvar = _VAR_,
50603     +                      outdata=&EM_USER_GOUTGROUP,
50604     +                      rescore = N,
50605     +                      newncluster=_newnclus
50606     +                        );
50608     +   /* store the number of global cluster */
50610     +   data &EM_USER_VARCLUSMETA;
50611     +        set &EM_USER_VARCLUSMETA;
50612     +        NGCluster = &_newnclus;
50613     +   run;
50615     +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
50617     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
50618     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
50619     +            %VarClus2(indata=&EM_IMPORT_DATA,
50620     +                 clusdata=&EM_USER_GOUTGROUP,
50621     +                 ngroup=&_newnclus);
50622     +         %end;
50623     +         %else %do;
50624     +             %VarClus2(indata=_newtrainds,
50625     +                 clusdata=&EM_USER_GOUTGROUP,
50626     +                 ngroup=&_newnclus);
50628     +         %end;
50630     +   %end;
50631     +   %else %do;
50632     +       %VarClus2(indata=&EM_IMPORT_DATA,
50633     +                 clusdata=&EM_USER_GOUTGROUP,
50634     +                 ngroup=&_newnclus);
50635     +   %end;
50637     +   %em_checkerror();
50638     +   %if &EMEXCEPTIONSTRING ne %then %do;
50639     +       %put &em_codebar;
50640     +       %put Error: Variable clustering failed.;
50641     +       %put &em_codebar;
50642     +       %goto endtrain2;
50643     +   %end;
50644     +   /*
50645     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
50646     +   */
50647     +   %endtrain2:
50648     +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
50650     +%macro em_copyfile(infref=, outfref=, append=N);
50652     +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
50654     +       %let omode =;
50655     +       %if &append=Y %then
50656     +           %let omode = MOD;
50657     +       data _null_;
50658     +          length line $20000;
50659     +          file &outfref &omode lrecl=20000;
50660     +          fid=fopen("&infref",'i',20000,'v');
50661     +          if fid > 0  then do;
50662     +             do while(^fread(fid));
50663     +                rlen = frlen(fid);
50664     +                rc= fget(fid,line,20000);
50665     +                start = length(line)-length(left(line))+1;
50666     +                line=strip(line);
50667     +                put @start line;
50668     +             end;
50669     +             if fid > 0  then rc=fclose(fid);
50670     +          end;
50671     +       run;
50673     +   %end;
50674     +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

50675      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.Part_TRAIN end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15:34   
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

50676      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS8.VarClus_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "CLUSTERCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;

NOTE: The data set EMWS8.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   proc varclus data = EMWS8.Part_TRAIN outstat= EMWS8.VarClus_OUTSTAT hi maxc=8 short outtree=EMWS8.VarClus_OUTTREE ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;

NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS8.VARCLUS_OUTSTAT has 175 observations and 27 variables.
NOTE: The data set EMWS8.VARCLUS_OUTTREE has 35 observations and 8 variables.
NOTE: The PROCEDURE VARCLUS printed page 11.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

50677      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS8.VarClus_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:20   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS3 = CLUS3**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS4 = CLUS4**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS5 = CLUS5**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS6 = CLUS6**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS7 = CLUS7**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS8 = CLUS8**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS8.VarClus_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 56 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 56 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      101:25   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   AcceptedCmpTotal = AcceptedCmpTotal**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Age = Age**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Frq = Frq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Income = Income**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Kidhome = Kidhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Mnt = Mnt**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFishProducts = MntFishProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFruits = MntFruits**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntGoldProds = MntGoldProds**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntMeatProducts = MntMeatProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntSweetProducts = MntSweetProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntWines = MntWines**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MonthsAsCustomer = MonthsAsCustomer**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumCatalogPurchases = NumCatalogPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDealsPurchases = NumDealsPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDistPurchases = NumDistPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumStorePurchases = NumStorePurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebPurchases = NumWebPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebVisitsMonth = NumWebVisitsMonth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RFMstat = RFMstat**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RMntFrq = RMntFrq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Recency = Recency**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Teenhome = Teenhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Year_Birth = Year_Birth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS8.VarClus_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS8.VarClus_OUTCLUSCORRPLOT out=EMWS8.VarClus_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 64 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   data EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;

NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS8.VarClus_OUTCORR out=EMWS8.VarClus_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 384 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      137:27   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTLINK has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTNODE has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS8.VarClus_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 8 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;

NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATSCORE has 10 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATESCORECODE):   filename _file_ "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus3 = 0 ; /*---" "Cluster Component 3" "------ */";
MPRINT(CREATESCORECODE):   put "Clus4 = 0 ; /*---" "Cluster Component 4" "------ */";
MPRINT(CREATESCORECODE):   put "Clus5 = 0 ; /*---" "Cluster Component 5" "------ */";
MPRINT(CREATESCORECODE):   put "Clus6 = 0 ; /*---" "Cluster Component 6" "------ */";
MPRINT(CREATESCORECODE):   put "Clus7 = 0 ; /*---" "Cluster Component 7" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = 0 ; /*---" "Cluster Component 8" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+1 * (MonthsAsCustomer - 83.24599831508)/16.9420859404964;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;";
MPRINT(CREATESCORECODE):   put "Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;";
MPRINT(CREATESCORECODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=16. April 2016 18.29 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 37 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _out lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_in",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file _OUT is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=16. April 2016 18.29 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 37 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50678      
50679      *------------------------------------------------------------*;
50680      * End TRAIN: VarClus;
50681      *------------------------------------------------------------*;

50682      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
50683      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
50684      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50685      ;
MPRINT(EM_DIAGRAM):   ;
50686      ;
MPRINT(EM_DIAGRAM):   ;
50687      ;
MPRINT(EM_DIAGRAM):   ;
50688      ;
MPRINT(EM_DIAGRAM):   ;
50689      quit;
MPRINT(EM_DIAGRAM):   quit;
50690      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50691      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
50692      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50693      /*; *"; *'; */
50694      ;
MPRINT(EM_DIAGRAM):   ;
50695      run;
MPRINT(EM_DIAGRAM):   run;
50696      quit;
MPRINT(EM_DIAGRAM):   quit;
50697      /* Reset EM Options */
50698      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
50699      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
50700      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
