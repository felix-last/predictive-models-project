MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "05H28m" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                10 de Março de 2016
Time:                05H28m
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3CZS_WY "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3CZS_WY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "05H28m" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10 de Março de 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "05H28m" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                VM-SAS";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
61898      proc freq data=EMWS8.VarClus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.VarClus_VariableSet noprint;
61899      table ROLE*LEVEL/out=WORK.VarClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClusMETA;
61900      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 25 observations read from the data set EMWS8.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

61901      proc print data=WORK.VarClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClusMETA label noobs;
61902      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
61903      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
61904      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
61905      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
61906      run;

NOTE: There were 6 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 17.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

61907      title10;
MPRINT(EM_DIAGRAM):   title10;
61908      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62274      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62275      * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
62276      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
62277      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

62278      %let EMEXCEPTIONSTRING=;
62279      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62280      * TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus;
62281      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62282      %let EM_ACTION = TRAIN;
62283      %let syscc = 0;
62284      
62285      %macro main;
62286      
62287         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
62288         %include temp;
62289         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
62290         %include temp;
62291         filename temp;
62292      
62293        %SetProperties;
62294      
62295         %if %upcase(&EM_ACTION) = CREATE %then %do;
62296             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
62297             %include temp;
62298             filename temp;
62299             %create;
62300         %end;
62301         %else
62302         %if %upcase(&EM_ACTION) = TRAIN %then %do;
62303              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
62304                 %include temp;
62305                 filename temp;
62306                 %train;
62307         %end;
62308         %else
62309         %if %upcase(&EM_ACTION) = SCORE %then %do;
62310                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
62311                 %include temp;
62312                 filename temp;
62313                 %score;
62314         %end;
62315         %else
62316         %if %upcase(&EM_ACTION) = REPORT %then %do;
62317                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
62318                 %include temp;
62319                 filename temp;
62320                 %report;
62321         %end;
62322         /*
62323         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
62324             %put 'OPENING TABLE';
62325         %end;
62326         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
62327             %put 'CLOSE TABLE';
62328         %end;
62329         */
62330      %mend main;
62331      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
62333     +/* Initialize property macro variables */
62334     +%macro SetProperties;
62335     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
62336     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
62337     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
62338     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
62339     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
62340     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
62341     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
62342     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
62343     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
62344     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
62345     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
62346     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
62347     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
62349     +%mend SetProperties;
62351     +%Macro MakeDummyVariables(indata=,
62352     +                          outvar=,
62353     +                          outdata=,
62354     +                          fileref=,
62355     +                          recreatecmeta=N, /* optional */
62356     +                          incmeta=,     /* optional */
62357     +                          outcmeta=,    /* optional */
62358     +                          ndummyvars=_ndummyvars
62359     +                          );
62360     +    %global &ndummyvars;
62362     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
62363     +       class
62364     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
62365     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
62366     +    ;
62367     +    run;
62368     +    %let &ndummyvars = 0;
62369     +    data _null_;
62370     +    %let dsid = %sysfunc(open(work._classout));
62371     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
62372     +    %let dsid = %sysfunc(close(&dsid));
62373     +    run;
62375     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
62376     +       input
62377     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
62378     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
62379     +        / level=nominal stdize=no;
62380     +       make outvar = &outvar;
62381     +       score data = &indata out =&outdata;
62382     +       code  file=  "&fileref";
62383     +    run;
62384     +    %if &recreatecmeta eq Y %then %do;
62385     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
62386     +    data _tmpds;
62387     +        set _tmpds;
62388     +           ROLE = 'INPUT';
62389     +           LEVEL = 'INTERVAL';
62390     +           CREATOR='DMZIP';
62391     +           if NAME = '_TYPE_' then delete;
62392     +    run;
62393     +    data &outcmeta;
62394     +         set &incmeta _tmpds;
62395     +    run;
62396     +    %end;
62397     +    proc datasets lib=work nolist;
62398     +      delete  _dmdbdat _dmdbcat _classout
62399     +    %if &recreatecmeta eq Y %then %do;
62400     +    _tmpds
62401     +    %end;
62402     +    ;
62403     +    quit;
62404     +%Mend MakeDummyVariables;
62406     +/*--- Determine Optimal Number of Cluster ----
62407     +%macro FindClusNum(statds=, groupds=, minvariation=);
62408     +   %global optnclus;
62409     +   data varclus_tmp(drop=_NAME_);
62410     +      set &statDs;
62411     +      where _type_ ='PROPOR';
62412     +   run;
62413     +   proc sort data=varclus_tmp;
62414     +      by _NCL_;
62415     +   run;
62416     +   proc transpose data=varclus_tmp out=varclus_tmp;
62417     +      by _NCL_;
62418     +      var %EM_INTERVAL_INPUT
62419     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
62420     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
62421     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
62422     +          %do i = 2 %to &nvar;
62423     +          %let varname = %sysfunc(varname(&dsid, &i));
62424     +          &varname
62425     +          %end;
62426     +      %end;
62427     +   ;
62428     +   run;
62430     +   %if &minVariation eq %then %do;
62431     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
62432     +   %end;
62433     +   %if ^(0<&minVariation<100) %then %do;
62434     +       %let minVariation = 90;
62435     +   %end;
62437     +   data _null_;
62438     +      set varclus_tmp end=eof;
62439     +      by _NCL_;
62440     +      retain flag 0;
62441     +      if first._ncl_ then flag=0;
62442     +      if .<col1 < &minVariation then flag=1;
62443     +      if last._ncl_ and ^flag then do;
62444     +         call symput('OPTNCL', _ncl_);
62445     +         stop;
62446     +      end;
62447     +     if eof then call symput('OPTNCL', _ncl_);
62448     +   run;
62450     +   %let optnclus = &OPTNCL;
62452     +   data varclus_tmp(drop=_NCL_ _NAME_);
62453     +      set &statDs;
62454     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
62455     +   run;
62456     +   proc sort data=varclus_tmp;
62457     +      by _TYPE_;
62458     +   run;
62459     +   proc transpose data=varclus_tmp out=varclus_tmp;
62460     +      by _TYPE_;
62461     +   run;
62462     +   proc sort data=varclus_tmp;
62463     +      by _name_ _type_;
62464     +   run;
62466     +  proc transpose data=varclus_tmp out=&groupds;
62467     +      by _NAME_;
62468     +   run;
62469     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
62470     +      by Cluster descending Rsquare;
62471     +      where Cluster ne 0;
62472     +   run;
62473     +   proc datasets lib=work nolist mt=(DATA VIEW);
62474     +      delete varclus_tmp;
62475     +   run;
62476     +   quit;
62477     +%mend findClusNum;
62478     +*/
62480     +%macro getNclusfromTrain(inoutstat=, nc=);
62481     +%global &nc;
62482     +data _null_;
62483     +    set &inoutstat end=eof;
62484     +    if eof then do;
62485     +    call symput("&nc", _ncl_);
62486     +    end;
62487     +run;
62488     +%mend  getNclusfromTrain;
62490     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
62492     +     *--- Build Code to Modify Metadata ---*;
62493     +     filename X "&deltacodefile";
62494     +     data _null_;
62495     +        FILE X;
62496     +        set &groupds end=eof;
62497     +        /*by Cluster;*/
62498     +         if _N_=1 then do;
62499     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
62500     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
62501     +           %end;
62502     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
62503     +           put "if upcase(strip(NAME)) in (";
62504     +        end;
62505     +        if Strip(upcase(Selected)) eq 'YES' then do;
62506     +           string = '"'!!trim(left(VARIABLE))!!'"';
62507     +           put string;
62508     +        end;
62509     +        if eof then do;
62510     +           put ') then ROLE="INPUT";';
62511     +           put 'else ROLE="REJECTED";';
62512     +           put 'end;';
62514     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
62515     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
62516     +           %end;
62517     +        end;
62518     +     run;
62519     +     quit;
62521     +     filename X;
62523     +     quit;
62524     +%mend MakeDeltaCode;
62526     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
62527     +    %if ^%sysfunc(exist(&statds)) %then %do;
62528     +         %goto doendc;
62529     +    %end;
62531     +    data &corrds(drop=_TYPE_ _NCL_) ;
62532     +       set &statds;
62533     +       where _type_ eq 'CORR' ;
62534     +    run ;
62535     +    proc sort data=&corrds;
62536     +       by _NAME_ ;
62537     +    run ;
62538     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
62539     +      BY _NAME_ ;
62540     +    run ;
62541     +    data &corrplotds;
62542     +       length _Y_ $100;
62543     +       set &corrplotDs;
62544     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
62545     +    run ;
62546     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
62547     +       set &corrplotds;
62548     +       where _LABEL_ ne '' ;
62549     +       keep _TMP_ _LABEL_ ;
62550     +    run ;
62551     +    data _null_;
62552     +       nobs=0;
62553     +       dsid = open('varclus_match');
62554     +       if dsid then do;
62555     +          nobs = attrn(dsid, 'NOBS');
62556     +          dsid = close(dsid);
62557     +       end;
62558     +       call symput ('CORR_NOBS', nobs);
62559     +    run;
62560     +    %if &corr_nobs %then %do;
62561     +        proc sort data=varclus_match;
62562     +           by _name_;
62563     +        run ;
62564     +        proc sort data=&corrplotds;
62565     +           by _name_;
62566     +        run ;
62567     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
62568     +           merge varclus_match &corrplotds;
62569     +           by _NAME_ ;
62570     +           if _X_ eq '' then _X_=_NAME_ ;
62571     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
62572     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
62573     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
62575     +       run ;
62576     +    %end;
62577     +    %else %do;
62578     +        proc sort data=&corrplotds;
62579     +           by _name_;
62580     +        run ;
62581     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
62582     +           set &corrplotds;
62583     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
62584     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
62585     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
62587     +        run ;
62588     +    %end;
62589     +    proc sort data=&corrplotds;
62590     +       by _X_ _Y_;
62591     +    run ;
62592     +    proc datasets lib=work nolist mt=(DATA VIEW);
62593     +       delete varclus_match;
62594     +    run;
62595     +    quit;
62597     +%doendc:
62599     +%mend MakeVarClusCorrData;
62601     +%macro MakeStatPlotData(statds= , outstatplotds=);
62602     +   %if %sysfunc(exist(&statds)) %then %do;
62604     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
62605     +          set &statDs;
62606     +          where _type_ in('MEAN', 'STD', 'N');
62607     +       run ;
62608     +       proc transpose data=varclus_tmp out=&outstatplotds;
62609     +          id _TYPE_ ;
62610     +       run ;
62611     +       data &outstatplotds;
62612     +          set &outstatplotds(obs=1000);
62613     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
62614     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
62615     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
62616     +          else SCALEDSTD= STD ;
62617     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
62618     +       run ;
62619     +       proc sort data=&outstatplotds;
62620     +          by descending SCALEDSTD ;
62621     +       run ;
62622     +       proc datasets lib=work nolist mt=(DATA VIEW);
62623     +          delete varclus_tmp;
62624     +       run;
62625     +       quit;
62626     +    %end;
62628     +%mend MakeStatPlotData;
62631     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
62632     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
62633     +    data &EM_USER_OUTSTATSCORE;
62634     +          set &indata;
62635     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
62636     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
62637     +          if _TYPE_ = 'STD' then _NAME_='STD';
62638     +          DROP _TYPE_ _NCL_;
62639     +     run;
62641     +     filename _file_  "&fileRef";
62643     +     data _null_;
62644     +        FILE _file_ MOD;
62645     +        put ' ';
62646     +        put '/*-------------------------------------------------*/';
62647     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
62648     +        put '/*-------------------------------------------------*/';
62649     +        put ' ';
62650     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
62652     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
62653     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
62655     +        %let k = 1;
62656     +        %do %while(^%sysfunc(fetch(&dsid)));
62657     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
62658     +                %if &k > 2 %then %do;
62659     +                 %let cn = %eval(&k-2);
62660     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
62661     +                %end;
62662     +                %let k = %eval(&k+1);
62663     +        %end;
62665     +        %let rc = %sysfunc(rewind(&dsid));
62667     +        %do i= 2 %to &nvar;
62668     +            %let _varname =  %sysfunc(varname(&dsid, &i));
62669     +            %do %while(^%sysfunc(fetch(&dsid)));
62670     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
62671     +                %if &_name = MEAN %then
62672     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
62673     +                %else %if &_name = STD %then
62674     +                %let _std = %sysfunc(getvarn(&dsid, &i));
62675     +                %else %do;
62676     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
62677     +                      %let abscoeff = %sysfunc(abs(&coeff));
62678     +                          %if &abscoeff >  0 %then %do;
62679     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
62680     +                           %end;
62681     +                 %end;
62682     +             %end;
62683     +             %let rc = %sysfunc(rewind(&dsid));
62684     +         %end;
62686     +        %let dsid= %sysfunc(close(&dsid));
62687     +       run;
62688     +%mend CreateScoreCode;
62692     +/*----------------------------------------------------------
62693     +    Instead of using %MakeRSquareData,
62694     +    %MakeVarClusResultTable at macro2.source is used
62695     + +----------------------------------------------------------*/
62698     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
62700     +/* modifying  from ods rsquare = data */
62702     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
62703     +    Length Cluster $16;
62704     +    length Variable $32;
62705     +    Length VariableLabel $64;
62706     +    set &indata; retain CurrentCluster;
62707     +    if NumberOfClusters ^= &ncluster then delete;
62708     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
62709     +    CurrentCluster = Cluster;
62710     +   run;
62711     +proc sort data =&outdata ;
62712     +     by Cluster RsquareRatio;
62713     +run;
62714     +data _tmprsq(drop=index);
62715     +     set &outdata; by Cluster;
62716     +     if first.Cluster then do;
62717     +     index = strip(scan(Cluster,2 ));
62718     +     Variable = "Clus"||index;
62719     +     VariableLabel = "Cluster Component "||index;
62720     +     OwnCluster = 1;
62721     +     NextClosest = .;
62722     +     RsquareRatio = 0;
62723     +     output;
62724     +     end;
62725     +run;
62727     +proc sort data = _tmprsq ;
62728     +     by Cluster RsquareRatio;
62729     +run;
62730     +data &outdata;
62731     +     set &outdata _tmprsq;
62732     +by Cluster;
62733     +run;
62736     +/* Just create the Selected variable with all YES */
62738     +data &outdata;
62739     +    set &outdata; by cluster;
62740     +    length Selected $8;
62741     +    Selected = 'YES';
62742     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
62743     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
62744     +    rename OwnCluster = RSqWithClusterComp;
62745     +    rename NextClosest = RSqWithNextClusComp;
62746     +run;
62749     +/* Selected = Y/N will be done %score section -----
62751     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
62752     +data &outdata;
62753     +    set &outdata; by cluster;
62754     +    length Selected $8;
62755     +    if first.Cluster then Selected = 'YES';
62756     +    else Selected = 'NO';
62757     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
62758     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
62759     +    rename OwnCluster = RSqWithClusterComp;
62760     +    rename NextClosest = RSqWithNextClusComp;
62761     +run;
62762     +%end;
62763     +%else %do;
62764     +data &outdata;
62765     +    set &outdata; by cluster;
62766     +    if last.Cluster then Selected = 'YES';
62767     +    else Selected = 'NO';
62768     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
62769     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
62770     +    rename OwnCluster = RSqWithClusterComp;
62771     +    rename NextClosest = RSqWithNextClusComp;
62772     +run;
62773     +%end;
62774     +---------------------------------------------------------------*/
62776     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
62777     +/* to calculate NextClosestClusRsq */
62778     +proc transpose data = &inClusRSquare  out=_clusRsq;
62779     +      by cluster;
62780     +      run;
62781     +data _clusRsq;
62782     +     set _clusRsq;
62783     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
62784     +run;
62786     +proc sort data=_clusRsq;
62787     +    by cluster col1;
62788     +    run;
62789     +data _clusRsq(drop=_NAME_ _LABEL_);
62790     +     set _clusRsq; by cluster;
62791     +     if last.Cluster then output;
62792     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
62793     +     rename COL1 = RSqWithNextClusComp;
62794     +     rename Cluster = Variable;
62795     +     label  Cluster = "Variable";
62796     +run;
62798     +proc sort data =&outdata;
62799     +     by Variable;
62800     +run;
62801     +data &outdata;
62802     +    merge &outdata _clusRsq;
62803     +    by Variable;
62804     +run;
62805     +proc sort data =&outdata;
62806     +by Cluster  RsquareRatio;
62807     +run;
62808     +quit;
62809     +%end;
62811     +proc datasets lib = work nolist;
62812     +     delete _tmprsq _clusRsq;
62813     +     run;
62814     +quit;
62816     +%mend MakeRSquareData;
62819     +/*-------------------------------------------------------------------------*/
62823     +%macro ModifyCorr(indata=,
62824     +                  outdata=,
62825     +                  rsquare = Y
62826     +                  );
62827     +    data corr_tmp;
62828     +        set &indata;
62829     +    run;
62830     +     proc sql;
62831     +           update &indata
62832     +           set
62833     +     %let dsid = %sysfunc(open(work.corr_tmp));
62834     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
62835     +          %do i = 4 %to &nvar;
62836     +          %let _name = %sysfunc(varname(&dsid, &i));
62837     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
62838     +            %else  %let _name_md = &_name;
62839     +            %if &i < &nvar %then %do;
62840     +               &_name = 1- &_name_md ,
62841     +            %end;
62842     +            %else %do;
62843     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
62844     +            %end;
62845     +          %end;
62846     +      %let dsid= %sysfunc(close(&dsid));
62848     +      select * from &indata;
62849     +      run;
62850     +      proc datasets lib = work nolist;
62851     +           delete corr_tmp;
62852     +      run;
62853     +      quit;
62855     + %mend ModifyCorr;
62857     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
62858     +    data &outdata(drop= _NCL_  _TYPE_);
62859     +       set &indata;
62860     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
62861     +       rename _NAME_ = Cluster;
62862     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
62863     +    run;
62864     +    %if &RSquare eq Y %then %do;
62865     +     data corr_tmp;
62866     +        set &outdata;
62867     +     run;
62869     +     data &outdata(drop=i);
62870     +          set &outdata;
62871     +          %let dsid = %sysfunc(open(work.corr_tmp));
62872     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
62873     +          %do i = 2 %to &nvar;
62874     +            %let _name = %sysfunc(varname(&dsid, &i));
62875     +            %let _name_md = &_name.**2;
62876     +                &_name = &_name_md;
62877     +          %end;
62878     +      %let dsid= %sysfunc(close(&dsid));
62879     +      run;
62880     +      proc datasets lib = work nolist;
62881     +           delete corr_tmp;
62882     +      run;
62884     +    %end;
62885     +     quit;
62886     +%mend MakeClusStructCorrData;
62888     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
62889     +    data &outdata(drop= _NCL_  _TYPE_);
62890     +       set &indata;
62891     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
62892     +       rename _NAME_ = Cluster;
62893     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
62894     +    run;
62895     +    data corr_tmp;
62896     +        set &outdata;
62897     +    run;
62899     +    %let dsid = %sysfunc(open(work.corr_tmp));
62900     +    %let nclus2= %eval(&ncluster+1);
62901     +    data &outdata;
62902     +         set &outdata;
62903     +          %do i = 2 %to &nclus2;
62904     +          %let i_1 = %eval(&i-1);
62905     +            %let _name = %sysfunc(varname(&dsid, &i));
62906     +            %let _newName = Clus&i_1;
62907     +                rename &_name = &_newName; ;
62908     +                *label &_name ="Cluster &i_1";
62909     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
62910     +          %end;
62911     +          keep Cluster
62912     +          %do i = 2 %to &nclus2;
62913     +                %let _name = %sysfunc(varname(&dsid, &i));
62914     +                &_name
62915     +          %end;
62916     +          ;
62917     +    %let dsid= %sysfunc(close(&dsid));
62918     +     run;
62919     +     quit;
62921     +    %if &RSquare eq Y %then %do;
62923     +       data corr_tmp;
62924     +        set &outdata;
62925     +     run;
62927     +     data &outdata(drop=i);
62928     +          set &outdata;
62929     +          %let dsid = %sysfunc(open(work.corr_tmp));
62930     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
62931     +          %do i = 2 %to &nvar;
62932     +            %let _name = %sysfunc(varname(&dsid, &i));
62933     +            %let _name_md = &_name.**2;
62934     +                &_name = &_name_md;
62935     +          %end;
62936     +      %let dsid= %sysfunc(close(&dsid));
62937     +      run;
62938     +    %end;
62940     +    %if &makeplotds eq Y %then %do;
62941     +     proc transpose data = &outdata
62942     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
62943     +          by cluster;
62944     +     run;
62945     +     data &plotds;
62946     +          set  &plotds;
62947     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
62948     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
62949     +     run;
62950     +     %end;
62951     +     proc datasets lib = work nolist;
62952     +           delete corr_tmp;
62953     +     run;
62954     +     quit;
62955     +%mend MakeInterClusCorrData;
62958     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
62960     +data &outlink(drop = Selected);
62961     +     set &indata;
62962     +     LINKID = _N_;
62963     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
62964     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
62965     +run;
62966     +data &outnode(keep=NODEID TYPE LABEL);
62967     +    set &indata;
62968     +    length TYPE $16;
62969     +    rename Variable = NODEID;
62970     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
62971     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
62972     +    then  TYPE = "CLUSTER";
62973     +    else  TYPE="VARIABLE";
62974     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
62975     +run;
62976     +quit;
62977     +%mend MakeClusConstellData;
62981     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
62983     +data &outlink(drop = Selected);
62984     +     set &indata;
62985     +     LINKID = _N_;
62986     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
62987     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
62988     +run;
62989     +data &outnode(keep=NODEID TYPE LABEL);
62990     +    set &indata;
62991     +    length TYPE $16;
62992     +    rename Variable = NODEID;
62993     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
62994     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
62995     +    then  TYPE = "CLUSTER";
62996     +    else  TYPE="VARIABLE";
62997     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
62998     +run;
62999     +quit;
63000     +%mend MakeClusConstellData;
63003     +/*--- This will work only when inds is not a view data -------
63005     +%macro getNVarNObs(inds=, nvar=, nobs=);
63007     +    %global &nvar;
63008     +    %global &nobs;
63009     +    data _null_;
63010     +         dsid = open("&inds");
63011     +         nv = attrn(dsid, 'NVAR');
63012     +         no = attrn(dsid, 'NOBS');
63013     +         dsid = close(dsid);
63014     +         call symput("&nvar", nv);
63015     +         call symput("&nobs", no);
63016     +    run;
63017     +    quit;
63018     +%mend  getNVarNObs;
63020     ++---------------------------------------------------------------*/
63023     +%macro getNVar(inds=, nvar=);
63024     +    %global &nvar;
63025     +    data _null_;
63026     +         dsid = open("&inds");
63027     +         nv = attrn(dsid, 'NVAR');
63028     +         dsid = close(dsid);
63029     +         call symput("&nvar", nv);
63030     +    run;
63031     +    quit;
63032     +%mend  getNVar;
63036     +%macro getNObs(inds=, nobs=);
63037     +    %global &nobs;
63038     +    data _null_;
63039     +        set &inds end=eof;
63040     +        if eof then call symput("&nobs", _N_);
63041     +    run;
63042     +    quit;
63043     +%mend  getNObs;
63045     +%Macro CreateVarclusMeta(trainnum=);
63046     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
63047     +    data &EM_USER_VARCLUSMETA;
63048     +         length TrainNum 8.;
63049     +         length NewTrain $8;
63050     +         length NGCluster 8.;
63051     +         length ExportedComp $16;
63052     +         length HideVariable $8;
63053     +         TrainNum = &trainnum;
63054     +         NewTrain = "Y";
63055     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
63056     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
63057     +         NGCluster = 0; /* zero means no twostage */
63058     +   run;
63059     +   quit;
63060     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
63062     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
63063     +    data &outdata(drop= _NCL_  _TYPE_);
63064     +       set &indata;
63065     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
63066     +       %if &globalclusid ne %then %do;
63067     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
63068     +       rename _NAME_ = Cluster;
63069     +       %end;
63070     +       %else %do;
63071     +        _NAME_ = upcase(_NAME_);
63072     +       rename _NAME_ = Cluster;
63073     +       %end;
63074     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
63075     +    run;
63076     +    data corr_tmp;
63077     +        set &outdata;
63078     +    run;
63080     +    %let dsid = %sysfunc(open(work.corr_tmp));
63081     +    %let nclus2= %eval(&ncluster+1);
63082     +    data &outdata;
63083     +         set &outdata;
63084     +          %do i = 2 %to &nclus2;
63085     +          %let i_1 = %eval(&i-1);
63086     +            %let _name = %sysfunc(varname(&dsid, &i));
63087     +            %if &globalclusid ne %then
63088     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
63089     +                     rename &_name = &_newName;
63090     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
63091     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
63092     +                %end;
63093     +            %else
63094     +                %do; %let _newName = CLUS&i_1;
63095     +                     rename &_name = &_newName;
63096     +                     *label &_name ="Cluster &i_1";
63097     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
63098     +                %end;
63099     +          %end;
63100     +          keep Cluster
63101     +          %do i = 2 %to &nclus2;
63102     +                %let _name = %sysfunc(varname(&dsid, &i));
63103     +                &_name
63104     +          %end;
63105     +          ;
63106     +    %let dsid= %sysfunc(close(&dsid));
63107     +     run;
63108     +     quit;
63110     +    %if &RSquare eq Y %then %do;
63112     +       data corr_tmp;
63113     +        set &outdata;
63114     +     run;
63116     +     data &outdata;
63117     +          set &outdata;
63118     +          %let dsid = %sysfunc(open(work.corr_tmp));
63119     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
63120     +          %do i = 2 %to &nvar;
63121     +            %let _name = %sysfunc(varname(&dsid, &i));
63122     +            %let _name_md = &_name.**2;
63123     +                &_name = &_name_md;
63124     +          %end;
63125     +      %let dsid= %sysfunc(close(&dsid));
63126     +      run;
63127     +    %end;
63129     +    %if &makeplotds eq Y %then %do;
63130     +     proc transpose data = &outdata
63131     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
63132     +          by cluster;
63133     +     run;
63134     +     data &plotds;
63135     +          set  &plotds;
63136     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
63137     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
63138     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
63139     +     run;
63140     +     %end;
63141     +     proc datasets lib = work nolist;
63142     +           delete corr_tmp;
63143     +     run;
63144     +     quit;
63145     +%mend MakeInterClusCorrData;
63147     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
63148     +    data _tmpds(drop= _NCL_);
63149     +       set &indata;
63150     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
63151     +       %if &globalclusid ne %then %do;
63152     +           _NAME_ = "GC&globalclusid.";
63153     +       rename _NAME_ = Cluster;
63154     +       %end;
63155     +       %else %do;
63156     +        _NAME_ = "CLUS";
63157     +        rename _NAME_ = Cluster;
63158     +       %end;
63159     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
63160     +    run;
63161     +    proc transpose data =_tmpds out =&outdata;
63162     +    run;
63164     +    data &outdata(drop=COL1);
63165     +        %if &globalclusid ne %then %do;
63166     +        length GCluster $16;
63167     +        %end;
63168     +        length Cluster $32;
63169     +        length _NAME_ $32;
63170     +         set &outdata;
63171     +         _NAME_ = upcase(_NAME_);
63172     +         rename _NAME_=Variable;
63173     +         *label _NAME_="Variable";
63174     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
63175     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
63176     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
63178     +         %if &globalclusid ne %then %do;
63179     +          GCluster = "GC&globalclusid";
63180     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
63181     +         %end;
63182     +         %else %do;
63183     +         Cluster = "CLUS"||strip(COL1);
63184     +        %end;
63185     +         rename COL2 = RSqWithOwnClusComp;
63186     +         *label COL2 = "R-Square With Own Cluster Component";
63187     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
63189     +   run;
63190     +   proc sort data =&outdata;
63191     +        by Cluster RSqWithOwnClusComp;
63192     +   run;
63193     +   proc datasets lib = work nolist;
63194     +           delete _tmpds;
63195     +   run;
63196     +   quit;
63197     +%mend MakeOwnRSquare;
63199     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
63200     +    data &outdata(drop= _NCL_  _TYPE_);
63201     +       %if &globalclusid ne %then %do;
63202     +        length GCluster $16;
63203     +        %end;
63204     +       set &indata;
63205     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
63206     +       %if &globalclusid ne %then %do;
63207     +         GCluster = "GC&globalclusid";
63208     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
63209     +         rename _NAME_ = Cluster;
63210     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
63211     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
63213     +       %end;
63214     +       %else %do;
63215     +         _NAME_ = upcase(_NAME_);
63216     +         rename _NAME_ = Cluster;
63217     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
63218     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
63220     +       %end;
63221     +     run;
63222     +    %if &RSquare eq Y %then %do;
63223     +     data corr_tmp;
63224     +          set &outdata;
63225     +     run;
63226     +     %let istart = 2;
63227     +     %if &globalclusid ne %then %let istart = 3;
63228     +     data &outdata;
63229     +          set &outdata;
63230     +          %let dsid = %sysfunc(open(work.corr_tmp));
63231     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
63232     +          %do i =&istart %to &nvar;
63233     +            %let _name = %sysfunc(varname(&dsid, &i));
63234     +            %let _name_md = &_name.**2;
63235     +                &_name = &_name_md;
63236     +          %end;
63237     +      %let dsid= %sysfunc(close(&dsid));
63238     +      run;
63239     +      proc datasets lib = work nolist;
63240     +           delete corr_tmp;
63241     +      run;
63242     +    %end;
63243     +     quit;
63244     +%mend MakeClusStructCorrData;
63246     +/*
63247     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
63248     +*/
63250     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
63252     +     /* The indata should be the outdata
63253     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
63255     +     proc sort data =&indata out=_tmpclusRsq;
63256     +     by cluster;
63257     +     run;
63259     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
63260     +      by cluster;
63261     +     run;
63263     +     proc sort data=_tmpclusRsq;
63264     +        by _NAME_ COL1;
63265     +     run;
63267     +     data _tmpclusRsq;
63268     +         length _NAME_ $32;
63269     +         set _tmpclusRsq; by _NAME_;
63270     +          _NAME_ = upcase(_NAME_);
63271     +          %if &ncluster ne 1 %then %do;
63272     +             if last._NAME_ then delete;
63273     +          %end;
63274     +          %else %do;
63275     +             COL1 = 0;
63276     +          %end;
63277     +     run;
63278     +     /* need to sort again */
63279     +     proc sort data=_tmpclusRsq;
63280     +        by _NAME_ COL1;
63281     +     run;
63283     +     data &outdata;
63284     +         set _tmpclusRsq; by _NAME_;
63285     +         Cluster = upcase(Cluster);
63286     +         if last._NAME_ then output;
63287     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
63288     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
63289     +         rename COL1 = RSqWithNextClusComp;
63290     +         Cluster = upcase(Cluster);
63291     +         rename Cluster = ClosestCluster;
63292     +         *label  Cluster = "Next Closest Cluster";
63293     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
63294     +         rename _NAME_ = Variable;
63295     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
63296     +    run;
63299     +    %if &globalclusid ne %then %do;
63300     +    data &outdata;
63301     +       length GCluster $16;
63302     +       set &outdata;
63303     +       GCluster = "GC&globalclusid";
63304     +       run;
63305     +    %end;
63306     +    proc datasets lib = work nolist;
63307     +           delete _tmpclusRsq;
63308     +    run;
63309     +    quit;
63310     +%mend FindNextClosestClusByVar;
63313     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
63314     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
63315     +     proc sort data =&indata out=_tmpclusRsq;
63316     +     by cluster;
63317     +     run;
63318     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
63319     +     by cluster;
63320     +     run;
63321     +     proc sort data=_tmpclusRsq;
63322     +        by _NAME_ col1;
63323     +     run;
63324     +     data _tmpclusRsq;
63325     +         length _NAME_ $32;
63326     +         set _tmpclusRsq; by _NAME_;
63327     +          _NAME_ = upcase(_NAME_);
63328     +          %if &ncluster ne 1 %then %do;
63329     +             if last._NAME_ then delete;
63330     +          %end;
63331     +          %else %do;
63332     +             COL1 = 0;
63333     +          %end;
63334     +     run;
63335     +     data &outdata;
63336     +         set _tmpclusRsq; by _NAME_;
63337     +         Cluster = upcase(Cluster);
63338     +         if last._NAME_ then output;
63339     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
63340     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
63341     +         rename COL1 = RSqWithNextClusComp;
63342     +         Cluster = upcase(Cluster);
63343     +         rename Cluster = ClosestCluster;
63344     +         *label  Cluster = "Next Closest Cluster";
63345     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
63346     +         rename _NAME_ = Variable;
63347     +         *label  _NAME_ = "Variable";
63348     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
63350     +    run;
63351     +    %if &globalclusid ne %then %do;
63352     +    data &outdata;
63353     +       length GCluster $16;
63354     +       set &outdata;
63355     +       GCluster = "GC&globalclusid";
63356     +       run;
63357     +    %end;
63359     +    proc datasets lib = work nolist;
63360     +           delete _tmpclusRsq;
63361     +    run;
63363     +    quit;
63364     +%mend FindNextClosestClusByCluster;
63366     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
63367     +/*----
63368     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
63369     +-----------*/
63371     +proc sort data =&indata1;
63372     +    by Variable;
63373     +run;
63374     +proc sort data =&indata2;
63375     +    by Variable;
63376     +run;
63377     +data &outdata;
63378     +    merge &indata1 &indata2;
63379     +    by Variable;
63380     +    length Type $16;
63381     +    Type = 'Variable';
63382     +    *label Type ='Type';
63383     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
63384     +run;
63387     +data &indata3;
63388     +    set  &indata3 ;
63389     +    length RSqWithOwnClusComp 8.;
63390     +    Cluster = Variable;
63391     +    RSqWithOwnClusComp = 1;
63392     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
63393     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
63394     +    length Type $16;
63395     +    Type = 'ClusterComp';
63396     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
63398     +;
63399     +run;
63401     +proc sort data=&outdata;
63402     +    by Cluster;
63403     +run;
63404     +proc sort data =&indata3;
63405     +    by Cluster;
63406     +run;
63408     +data &outdata;
63409     +     set &outdata &indata3;
63410     +     by Cluster;
63411     +run;
63414     +/* Create the Selected variable with all YES */
63416     +data &outdata;
63417     +     set &outdata;
63418     +     length RsqRatio 8.;
63419     +     length Selected $8;
63420     +     *label RSqRatio = "1-R**2 Ratio";
63421     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
63422     +     *label Selected = "Variable Selected";
63423     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
63424     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
63425     +     Selected ='YES';
63426     +     rename _LABEL_ = Label;
63427     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
63428     +run;
63431     +/*----  Selected = Y/N will be assigened at the %score                   -------+
63432     +        Just create the Selected variable with all YES at the step above
63433     + +------------------------------------------------------------------------------+
63435     +proc sort data=&outdata;
63436     +    by Cluster RsqRatio;
63437     +run;
63439     +%if &selectedcomp eq CLUSTERCOMP %then %do;
63440     +data &outdata;
63441     +     set &outdata; by Cluster;
63442     +     length Selected $8;
63443     +     label Selected = "Variable Selected";
63444     +     if  first.Cluster then Selected ='Yes';
63445     +     else Selected = 'No';
63446     +    run;
63447     +%end;
63448     +%else %do;
63449     +data &outdata(drop = _var _varchange);
63450     +     set &outdata; retain _var 0; by Cluster;
63451     +     length Selected $8;
63452     +     label Selected = "Variable Selected";
63453     +     if first.Cluster then  _varchange = 0;
63454     +     else _varchange =1;
63455     +     if _var ne _varchange then  Selected  = 'Yes';
63456     +     else Selected = 'No';
63457     +     if last.cluster then  _var = 0;
63458     +     else _var = _varchange;
63459     +run;
63460     +%end;
63462     +--------------------------------------------------------------*/
63464     +quit;
63465     +%mend MakeVarClusResultTable;
63467     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
63468     +     proc sort data =&indata;
63469     +        by cluster;
63470     +     run;
63471     +     proc transpose data =&indata
63472     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
63473     +          by cluster;
63474     +     run;
63475     +     data &outdata;
63476     +          set  &outdata;
63477     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
63478     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
63479     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
63480     +     run;
63481     +     %if &globalclusid ne %then %do;
63482     +     data &outdata;
63483     +          Length GCluster $16;
63484     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
63485     +          set  &outdata;
63486     +          GCluster ="GC&globalclusid.";
63487     +          run;
63488     +     %end;
63490     +%Mend MakePlotDataFromCorrTable;
63493     +%macro MakeCorrelation(indata=,
63494     +                       outstat=_tmpoutstat,
63495     +                       corrmatrix=N,
63496     +                       outcorr=_tmpoutcorr,
63497     +                       includeclassvar=N,
63498     +                       target=,
63499     +                       freq=,
63500     +                       weight=);
63501     +   %if &target eq  %then %do;
63503     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
63504     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
63505     +       %if &includeclassvar eq Y %then %do;
63506     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
63507     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
63508     +          %do i = 2 %to &nvar;
63509     +          %let varname = %sysfunc(varname(&dsid, &i));
63510     +          &varname
63511     +          %end;
63512     +       %end;
63513     +       ;
63514     +      %if &freq ne  %then %do;
63515     +          freq &freq;
63516     +      %end;
63517     +      %if &weight ne  %then %do;
63518     +          weight &weight;
63519     +      %end;
63521     +      run;
63522     +      %if &corrmatrix eq Y %then %do;
63523     +      data  &outcorr (drop = _NCL_ _TYPE_);
63524     +           set  &outstat ;
63525     +           if _TYPE_ ='CORR' then output;
63526     +      run;
63527     +      %end;
63528     +    %end;
63529     +    %else %do;
63530     +       proc corr data=&indata outp=&outstat noprint;
63531     +            var
63532     +       %let dsid = %sysfunc(open(&indata));
63533     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
63534     +          %do i = 1 %to &nvar;
63535     +              %let _name = %sysfunc(varname(&dsid, &i));
63536     +              %if &_name ne &target %then;
63537     +              &_name
63538     +           %end;
63539     +        %let dsid= %sysfunc(close(&dsid));
63540     +        ;
63541     +        with &target;
63542     +        run;
63543     +    %end;
63544     +    quit;
63545     +%mend MakeCorrelation;
63548     +%macro MakeCorrelationDistance(indata=,
63549     +                               outdata=,
63550     +                               rsquare = N
63551     +                               );
63552     +    data corr_tmp;
63553     +        set &indata;
63554     +        if _N_ = 1 then do;
63555     +           output;
63556     +           stop;
63557     +         end;
63558     +    run;
63559     +    %if &outdata ne  %then %let  _outdata = &outdata;
63560     +    %else %let _outdata = &indata;
63562     +    data &_outdata;
63563     +         set &indata;
63565     +         %let dsid = %sysfunc(open(work.corr_tmp));
63566     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
63567     +          %do i = 2 %to &nvar;
63568     +              %let _name = %sysfunc(varname(&dsid, &i));
63569     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
63570     +              %else  %let _name_md = &_name;
63571     +              &_name = 1- &_name_md;
63572     +          %end;
63573     +      %let dsid= %sysfunc(close(&dsid));
63574     +      run;
63575     +      proc datasets lib = work nolist;
63576     +           delete corr_tmp;
63577     +      run;
63578     +      quit;
63579     +  %mend MakeCorrelationDistance;
63582     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
63583     +                                   rsquare = N
63584     +                                   );
63585     +    data corr_tmp;
63586     +        set &indata;
63587     +    run;
63588     +    proc sql noprint;
63589     +           update &indata
63590     +           set
63591     +     %let dsid = %sysfunc(open(work.corr_tmp));
63592     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
63593     +          %do i = 4 %to &nvar;
63594     +          %let _name = %sysfunc(varname(&dsid, &i));
63595     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
63596     +            %else  %let _name_md = &_name;
63597     +            %if &i < &nvar %then %do;
63598     +               &_name = 1- &_name_md ,
63599     +            %end;
63600     +            %else %do;
63601     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
63602     +            %end;
63603     +          %end;
63604     +      %let dsid= %sysfunc(close(&dsid));
63606     +      select * from &indata;
63607     +      run;
63608     +     data &indata( drop = _NCL_);
63609     +           set &indata;
63610     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
63611     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
63612     +     run;
63613     +     data &indata(DROP = _NCL_);
63614     +           set &indata;
63615     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
63616     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
63617     +           rename _NAME_ = _VAR_;
63618     +     run;
63619     +     proc datasets lib = work nolist;
63620     +           delete corr_tmp;
63621     +     run;
63622     +     quit;
63623     + %mend UpdateOutStatCorrToDistance;
63626     +%macro HierClusWithCorr(indata= ,
63627     +                        ncluster=,
63628     +                        method = Ward,
63629     +                        outtree = _outtree,
63630     +                        idvar =_VAR_,
63631     +                        outdata=,
63632     +                        rescore = N,
63633     +                        newncluster=
63634     +                        );
63635     +      %global &newncluster;
63636     +      %if &rescore ne Y %then %do;
63637     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
63638     +                   method=&method outtree=&outtree noprint;
63639     +           id &idvar;
63640     +      run;
63641     +      %end;
63642     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
63643     +      run;
63644     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
63645     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
63646     +      run;
63647     +      data _outcontent;
63648     +          set _outcontent;
63649     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
63650     +          index = 1;
63651     +          rename NAME = _NAME_;
63652     +      run;
63653     +      proc sort data=_outcontent;
63654     +          by _NAME_;
63655     +      run;
63656     +      proc sort data =&outdata;
63657     +           by _NAME_;
63658     +      run;
63659     +      data &outdata(drop=index);
63660     +          merge &outdata _outcontent;
63661     +          by _NAME_;
63662     +          if index = . then delete;
63663     +      run;
63664     +      /*-----------------------------------------------------------*/
63665     +      data &outdata;
63666     +           length CLUSNAME $16;
63667     +           set &outdata;
63668     +           if CLUSTER > &ncluster then delete;
63669     +           CLUSNAME='GC'||strip(CLUSTER);
63670     +           *label CLUSNAME = "Cluster Name";
63671     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
63672     +           rename _NAME_ = VARIABLE ;
63673     +           *label _NAME_ = "Variable";
63674     +           *label CLUSTER = "Cluster";
63675     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
63676     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
63677     +      run;
63678     +      proc sort data=&outdata out=&outdata;
63679     +           by CLUSTER;
63680     +      run;
63681     +      proc means data =&outdata noprint;
63682     +           output out=_meanout;
63683     +      run;
63684     +      data _null_;
63685     +            set _meanout;
63686     +            if strip(_STAT_) eq 'MAX' then do;
63687     +            call symput("&newncluster", CLUSTER);
63688     +            stop;
63689     +            end;
63690     +      run;
63692     +      proc datasets lib = work nolist;
63693     +           delete _outcontent _meanout;
63694     +      run;
63695     +      quit;
63696     +%mend  HierClusWithCorr;
63698     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
63700     +     data _tmpindata;
63701     +          set &indata;
63702     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
63703     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
63704     +          if _TYPE_ = 'STD' then _NAME_='STD';
63705     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
63706     +          DROP _TYPE_ _NCL_;
63707     +     run;
63709     +     filename _file_  "&fileRef";
63711     +     data _null_;
63712     +        FILE _file_ MOD;
63713     +        put ' ';
63714     +        put "/*-------------------------------------------------*/";
63715     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
63716     +        put "/*-------------------------------------------------*/";
63717     +        put ' ';
63718     +        %let dsid = %sysfunc(open(work._tmpindata));
63720     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
63721     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
63722     +        %let k = 1;
63723     +        %do %while(^%sysfunc(fetch(&dsid)));
63724     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
63725     +               %if &k > 2 %then %do;
63726     +                %let cn = %eval(&k-2);
63727     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
63728     +                %end;
63729     +                %let k = %eval(&k+1);
63731     +        %end;
63732     +        %let rc = %sysfunc(rewind(&dsid));
63734     +        %do j= 2 %to &nvar;
63735     +            %let _varname = %sysfunc(varname(&dsid, &j));
63736     +            %do %while(^%sysfunc(fetch(&dsid)));
63737     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
63738     +                %if &_name = MEAN %then
63739     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
63740     +                %else %if &_name = STD %then
63741     +                %let _std = %sysfunc(getvarn(&dsid, &j));
63742     +                %else %do;
63743     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
63744     +                      %let abscoeff = %sysfunc(abs(&coeff));
63745     +                          %if &abscoeff >  0 %then %do;
63746     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
63747     +                           %end;
63748     +                 %end;
63749     +             %end;
63750     +             %let rc = %sysfunc(rewind(&dsid));
63751     +         %end;
63753     +        %let dsid= %sysfunc(close(&dsid));
63755     +     run;
63757     +     filename _file_;
63758     +     proc datasets lib = work nolist;
63759     +           delete _tmpindata;
63760     +     run;
63761     +     quit;
63762     +%mend CreateScoreCode2;
63765     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
63767     +     /*--- Build Code to Modify Metadata ---*/
63768     +     filename X "&deltacodefile";
63769     +     data _null_;
63770     +        FILE X;
63771     +        set &groupds end=eof;
63772     +        if _N_=1 then do;
63773     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
63774     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
63775     +           %end;
63776     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
63777     +           put "if upcase(strip(NAME)) in (";
63778     +        end;
63779     +        if Strip(upcase(Selected)) eq 'YES' then do;
63780     +           string = '"'!!trim(left(VARIABLE))!!'"';
63781     +           put string;
63782     +        end;
63783     +        if eof then do;
63784     +           put ') then ROLE="INPUT";';
63785     +           put 'else ROLE="REJECTED";';
63786     +           put 'end;';
63788     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
63789     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
63790     +           %end;
63791     +        end;
63792     +     run;
63793     +     quit;
63795     +     filename X;
63796     +     quit;
63797     +%mend MakeDeltaCode2;
63799     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
63800     +  %global &ngc;
63801     +  data _null_;
63802     +  %if &indata ne %then %do;
63803     +      %let dsid = %sysfunc(open(&indata));
63804     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
63805     +      %let dsid = %sysfunc(close(&dsid));
63806     +  %end;
63807     +  %else %do;
63808     +       %let nvar = %eval(&ninput+&ndummy); ;
63809     +  %end;
63810     +  %let numgc = %eval(&nvar/&div+2);
63811     +  %let &ngc = &numgc;
63812     +   run;
63813     +  quit;
63814     +%mend getInitialGClusterNumber;
63817     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
63818     +data &outlink(drop = Selected);
63819     +     set &indata;
63820     +     LINKID = _N_;
63821     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
63822     +run;
63823     +data &outnode(keep=NODEID TYPE LABEL);
63824     +    set &indata;
63825     +    length TYPE $16;
63826     +    rename VARIABLE = NODEID;
63827     +    *label  CLUSNAME="Node ID";
63828     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
63829     +    TYPE = "VARIABLE";
63830     +    *label TYPE = "Node Type";
63831     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
63832     +    run;
63833     +data _tmp(keep=NODEID TYPE LABEL);
63834     +    set &indata;
63835     +    length TYPE $16;
63836     +    rename CLUSNAME = NODEID;
63837     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
63838     +    TYPE = "GCLUSTER";
63839     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
63840     +    run;
63841     +proc sort data=_tmp;
63842     +    by NODEID;
63843     +run;
63844     +data _tmp;
63845     +    set _tmp; by NODEID;
63846     +    if first.NODEID then output;
63847     +run;
63848     +proc sort data=&outnode;
63849     +    by NODEID;
63850     +run;
63851     +data  &outnode;
63852     +    set _tmp &outnode;
63853     +run;
63854     +proc datasets lib = work nolist;
63855     +     delete _tmp;
63856     +run;
63857     +quit;
63858     +%mend MakeGobalConstellData;
63860     +/* Make contellation plot data among GCLUSTERS */
63862     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
63864     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
63865     +     set &indata;
63866     +     LINKID = _N_;
63867     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
63868     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
63869     +     end;
63870     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
63871     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
63872     +     end;
63873     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
63874     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
63875     +    end;
63876     +run;
63878     +data _tmp_outrsquare;
63879     +        set &inoutrsq;
63880     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
63881     +run;
63883     +proc freq data =_tmp_outrsquare noprint;
63884     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
63885     +run;
63887     +data &outnode(keep=_NAME_ TYPE LABEL);
63888     +    set &outlink;
63889     +    length TYPE $16;
63890     +    length LABEL $100;
63891     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
63893     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
63894     +    TYPE = "GCLUSTER";
63895     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
63896     +    end;
63897     +    else do;
63898     +    TYPE= "ROOT";
63899     +    LABEL= _NAME_;
63900     +    end;
63901     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
63902     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
63903     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
63904     +    run;
63906     +proc sort data=&outnode;
63907     +     by _NAME_;
63908     +proc sort data=_tmp_GCLUSFREQ;
63909     +     by _NAME_;
63910     +run;
63912     +data  &outnode;
63913     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
63914     +     if COUNT=. then COUNT=1;
63915     +run;
63917     +proc datasets lib = work nolist;
63918     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
63919     +run;
63921     +quit;
63922     +%Mend MakeGClusterConstData;
63925     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
63927     +    data _gscoretmpds;
63928     +          set &indata;
63929     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
63930     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
63931     +          if _TYPE_ = 'STD' then _NAME_='STD';
63932     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
63933     +          DROP _TYPE_ _NCL_;
63934     +     run;
63936     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
63937     +        GCluster Component &globalclusid ------ */
63939     +    filename _file_  "&fileref";
63941     +    data _null_;
63942     +        %if &globalclusid eq 1 %then %do;
63943     +          FILE _file_;
63944     +        %end;
63945     +        %else %do;
63946     +          FILE _file_ MOD;
63947     +        %end;
63949     +        %let dsid = %sysfunc(open(work._gscoretmpds));
63950     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
63951     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
63953     +        %let k = 1;
63954     +        %do %while(^%sysfunc(fetch(&dsid)));
63955     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
63956     +                %if &k > 2 %then %do;
63957     +                put "&_name = 0 ; ";
63958     +                %end;
63959     +                %let k = %eval(&k+1);
63960     +        %end;
63962     +        %let rc = %sysfunc(rewind(&dsid));
63963     +        %do i= 2 %to &nvar;
63964     +            %let _varname =  %sysfunc(varname(&dsid, &i));
63965     +            %do %while(^%sysfunc(fetch(&dsid)));
63966     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
63967     +                %if &_name = MEAN %then
63968     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
63969     +                %else %if &_name = STD %then
63970     +                %let _std = %sysfunc(getvarn(&dsid, &i));
63971     +                %else %do;
63972     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
63973     +                      %let abscoeff = %sysfunc(abs(&coeff));
63974     +                          %if &abscoeff >  0 %then %do;
63975     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
63976     +                           %end;
63977     +                 %end;
63978     +             %end;
63979     +             %let rc = %sysfunc(rewind(&dsid));
63981     +         %end;
63983     +        %let dsid= %sysfunc(close(&dsid));
63984     +       run;
63987     +       proc datasets lib=work nolist;
63988     +            delete _gscoretmpds;
63989     +       run;
63990     +      quit;
63992     +%mend CreateGClusterScoreCode;
63995     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
63997     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
63998     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
63999     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
64000     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
64001     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
64002     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
64003     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
64004     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
64005     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
64006     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
64007     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
64008     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
64009     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
64010     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
64012     +   filename gsfile "&gscorecode";
64014     +   data &EM_USER_GSCORE;
64015     +             set &indata;
64016     +             %include  gsfile;
64017     +        keep
64018     +        %do i=1 %to &ngcluster;
64019     +         %let gcvarname = GC&i;
64020     +         &gcvarname
64021     +        %end;
64022     +     ;
64023     +   run;
64025     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
64026     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
64027     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
64028     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
64029     +    noprint  ;
64030     +     var
64031     +       %do i=1 %to &ngcluster;
64032     +         %let gcvarname = GC&i;
64033     +         &gcvarname
64034     +        %end;
64035     +   ;
64036     +   run;
64039     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
64040     +   data &EM_USER_GSCORECORRPLOT ;
64041     +        set &EM_USER_GSCORECORRPLOT;
64042     +        rename _X_ = X;
64043     +        rename _Y_ = Y;
64044     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
64045     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
64046     +   run;
64048     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
64050     +   data &EM_USER_GSCORETREE;
64051     +        length _NAME_ $32;
64052     +        length _LABEL_ $100;
64053     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
64054     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
64055     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
64056     +        end;else do;
64057     +         _LABEL_ = _NAME_;
64058     +        end;
64059     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
64061     +   run;
64063     +   quit;
64065     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
64070     +%macro train;
64072     +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
64073     +   %include temp;
64074     +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
64075     +   %include temp;
64076     +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
64077     +   %include temp;
64078     +   filename temp;
64080     +   %let VARCLUS_MAXNUMOBS = 100000;
64081     +   %let VARCLUS_MAXNUMVAR = 200;
64082     +   %let trainnum = 0;
64083     +   %let error = 0;
64085     +   %if &EM_IMPORT_DATA eq %then %do;
64086     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
64087     +       %let  error = 1;
64088     +       %goto endtrain;
64089     +   %end;
64091     +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
64092     +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
64093     +        %let  error = 1;
64094     +        %goto endline;
64095     +    %end;
64097     +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
64098     +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
64099     +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
64100     +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
64101     +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
64102     +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
64104     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
64105     +        %if  &_num_input_total < 2 %then %do;
64106     +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
64107     +            %let error = 2;
64108     +            %goto endtrain;
64109     +        %end;
64110     +   %end;
64111     +   %else %do;
64112     +         %if  &_num_input_interval < 2 %then %do;
64113     +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
64114     +         %let error = 2;
64115     +         %goto endtrain;
64116     +         %end;
64117     +   %end;
64119     +   %em_checkerror();
64121     +   %if &EMEXCEPTIONSTRING ne %then %do;
64122     +       %goto endtrain;
64123     +   %end;
64125     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
64127     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
64128     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
64129     +                             outvar=&EM_USER_OUTDUMMY,
64130     +                             outdata=_newtrainds,
64131     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
64133     +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
64134     +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
64135     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
64136     +                proc datasets lib=work nolist;
64137     +                delete  _newtrainds;
64138     +                run;
64139     +                quit;
64140     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
64141     +                %let error = 3;
64142     +               %goto endtrain;
64143     +            %end;
64144     +        %end;
64146     +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
64147     +             %getNVar(inds=_newtrainds, nvar=_nvar);
64149     +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
64150     +                %let trainnum = 2;
64151     +            %end;
64152     +            %else %do;
64153     +                %let trainnum = 1;
64154     +            %end;
64155     +        %end;
64156     +    %end;
64157     +    %else %do;
64159     +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
64161     +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
64163     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
64165     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
64166     +                  %let error = 3;
64167     +                 %goto endtrain;
64168     +            %end;
64169     +        %end;
64172     +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
64173     +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
64174     +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
64175     +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
64176     +                %let trainnum = 2;
64177     +            %end;
64178     +            %else %do;
64179     +                %let trainnum = 1;
64180     +            %end;
64181     +        %end;
64183     +   %end;
64185     +    %em_checkerror();
64187     +    %if &EMEXCEPTIONSTRING ne %then %do;
64188     +       %let error = 4;
64189     +       %goto endtrain;
64190     +    %end;
64192     +    %CreateVarclusMeta(trainnum=&trainnum);
64194     +    %if &error > 0 %then  %goto endtrain;
64196     +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
64198     +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
64199     +           %train1;
64200     +       %end;
64201     +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
64202     +           %train2;
64203     +       %end;
64205     +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
64206     +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
64207     +      %em_copyfile(infref=_in, outfref=_out);
64208     +      filename _in;
64209     +      filename _out;
64212     +   %endtrain:
64215     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
64217     +%macro VarClus(indata=,
64218     +               outstat=,
64219     +               outtree=,
64220     +               vars=,
64221     +               freq=,
64222     +               weight=,
64223     +               includeclassvar=
64224     +               );
64226     +   %if &vars eq %then
64227     +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
64229     +       proc varclus data = &indata outstat= &outstat
64230     +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
64231     +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
64232     +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
64233     +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
64234     +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
64235     +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
64236     +       %end;
64238     +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
64239     +            maxeigen = &EM_PROPERTY_MAXEIGEN
64240     +       %end;
64242     +       %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
64243     +            proportion = &EM_PROPERTY_PROPORTION
64244     +       %end;
64245     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
64246     +               summary
64247     +       %end;
64249     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
64250     +           short
64251     +       %end;
64252     +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
64253     +           corr trace simple
64254     +       %end;
64255     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
64256     +          noprint
64257     +       %end;
64258     +       outtree=&outtree
64259     +       ;
64260     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
64262     +      %if &includeclassvar eq Y %then %do;
64263     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
64264     +          %if &dsid > 0 %then %do;
64265     +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
64266     +              %do i = 2 %to &nvar;
64267     +                  %let varname = %sysfunc(varname(&dsid, &i));
64268     +                   &varname
64269     +              %end;
64271     +          %end;
64272     +      %end;
64274     +      ;
64275     +      /*------------------------
64276     +      %if &freq ne  %then %do;
64277     +          freq &freq;
64278     +      %end;
64279     +      %if &weight ne  %then %do;
64280     +          weight &weight;
64281     +      %end;
64282     +      ----------------------------*/
64283     +      %if %EM_FREQ ne %then %do;
64284     +           Freq %EM_FREQ;
64285     +      %end;
64286     +      ;
64287     +    run;
64288     +    %endline:
64289     +    quit;
64290     +%mend VarClus;
64292     +%macro Train1;
64294     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
64295     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
64296     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
64297     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
64298     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
64299     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
64300     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
64301     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
64302     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
64303     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
64304     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
64305     +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
64306     +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
64308     +   /*
64309     +     %let VARCLUS_MAXNUMOBS = 100;
64310     +     %let VARCLUS_MAXNUMVAR = 200;
64311     +   */
64313     +   /* Train
64315     +   %if &EM_IMPORT_DATA eq %then %do;
64316     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
64317     +       %goto endtrain1;
64318     +   %end;
64320     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
64321     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
64322     +        %goto endtrain1;
64323     +   %end;
64324     +   */
64325     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
64326     +       /* moved this to pretrain ------------
64328     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
64329     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
64330     +                             outvar=&EM_USER_OUTDUMMY,
64331     +                             outdata=_newtrainds,
64332     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
64334     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
64335     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
64336     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
64337     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
64338     +                %goto endtrain;
64339     +            %end;
64340     +        %end;
64342     +        +-------------------------------------*/
64344     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
64345     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
64346     +          There is no _newtrainds */
64347     +         %VarClus( indata=&EM_IMPORT_DATA,
64348     +                  outstat=&EM_USER_OUTSTAT,
64349     +                  outtree = &EM_USER_OUTTREE,
64350     +                  includeclassvar=N
64351     +                 );
64352     +        %end;
64353     +        %else %do;
64354     +        %VarClus( indata=_newtrainds,
64355     +                  outstat=&EM_USER_OUTSTAT,
64356     +                  outtree = &EM_USER_OUTTREE,
64357     +                  includeclassvar=Y
64358     +                 );
64359     +         proc datasets lib=work nolist;
64360     +              delete  _newtrainds;
64361     +         run;
64362     +         %end;
64363     +    %end;
64364     +    %else %do;
64366     +        /*----- moved this to pretrain ------------
64367     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
64368     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
64369     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
64370     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
64371     +                 %goto endtrain;
64372     +            %end;
64373     +        %end;
64374     +        +-------------------------------------*/
64376     +        %VarClus(indata=&EM_IMPORT_DATA,
64377     +                  outstat=&EM_USER_OUTSTAT,
64378     +                  outtree =&EM_USER_OUTTREE,
64379     +                  includeclassvar=N
64380     +               );
64382     +   %end;
64384     +   %em_checkerror();
64386     +   %if &EMEXCEPTIONSTRING ne %then %do;
64387     +       %goto endtrain1;
64388     +   %end;
64389     +    /*
64390     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
64391     +    */
64393     +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
64395     +    %let gid=;
64397     +    /*--- To make the main result table ----------------------*/
64399     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
64400     +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
64401     +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
64402     +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
64403     +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
64404     +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
64406     +   /* Inter Cluster Correlation Plot ------------------------*/
64408     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
64409     +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
64411     +   /* Create some other data sets for results ----*/
64413     +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
64414     +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
64415     +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
64417     +  /*---- move this to Score action ------------
64418     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
64419     +   */
64421     +   /* create score code at training time */
64422     +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
64423     +   %endtrain1:
64424     +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
64427     +%macro VarClus2( indata=,
64428     +                 outdata=,
64429     +                 outstat =outstat,
64430     +                 outrsquare=outrsquare,
64431     +                 outtree = outtree,
64432     +                 outclusstruct = outclusstruct,
64433     +                 outcluscorr =outcluscorr,
64434     +                 outcluscorrplot =outcluscorrplot,
64435     +                 outclusrsquare =outclusrsquare,
64436     +                 outstatplot = outstatplot,
64437     +                 outcorr = outcorr,
64438     +                 outcorrplot = outcorrplot,
64439     +                 clusdata=,
64440     +                 outnode=outnode,
64441     +                 outlink=outlink,
64442     +                 ngroup =1  );
64443     +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
64444     +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
64445     +              %goto endline;
64446     +         %end;
64448     +        %global numglobalcluster;
64449     +        %let  numglobalcluster = &ngroup;
64450     +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
64451     +        %do vci =1 %to &ngroup;
64452     +           data tmp_clusdata;
64453     +                set &clusdata;
64454     +                if CLUSTER ne &vci then delete;
64455     +           run;
64456     +           %let outstatds = &outstat.&vci;
64457     +           %let outrsquareds = &outrsquare.&vci;
64458     +           %let outtreeds = &outtree.&vci;
64459     +           %let outclusstuctds = &outclusstruct.&vci;
64460     +           %let outcluscorrds = &outcluscorr.&vci;
64461     +           %let outcluscorrplotds = &outcluscorrplot.&vci;
64462     +           %let outclusrsquareds = &outclussquare.&vci;
64463     +           %let outstatplotds = &outstatplot.&vci;
64464     +           %let outcorrds = &outcorr.&vci;
64465     +           %let outcorrplotds = &outcorrplot.&vci;
64466     +           %let outnodeds = &outnode.&vci;
64467     +           %let outlinkds = &outlink.&vci;
64469     +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
64470     +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
64471     +           %let emuseroutstat = &EM_USER_&outstatds;
64473     +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
64474     +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
64475     +           %let emuserouttree = &EM_USER_&outtreeds;
64477     +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
64478     +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
64479     +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
64481     +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
64482     +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
64483     +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
64485     +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
64486     +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
64487     +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
64489     +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
64490     +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
64491     +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
64493     +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
64494     +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
64495     +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
64497     +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
64498     +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
64499     +           %let emuseroutcorr = &EM_USER_&outcorrds;
64501     +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
64502     +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
64503     +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
64505     +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
64506     +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
64507     +           %let emuseroutnode = &EM_USER_&outnodeds;
64509     +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
64510     +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
64511     +           %let emuseroutlink = &EM_USER_&outlinkds;
64513     +           proc varclus data=&indata outstat=&emuseroutstat
64514     +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
64515     +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
64516     +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
64517     +            %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
64518     +                %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
64519     +                %if &maxc > 1 %then %do;     maxc=&maxc %end;
64520     +           %end;
64522     +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
64523     +            maxeigen = &EM_PROPERTY_MAXEIGEN
64524     +            %end;
64526     +           %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
64527     +                proportion = &EM_PROPERTY_PROPORTION
64528     +           %end;
64529     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
64530     +               summary
64531     +           %end;
64532     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
64533     +               short
64534     +           %end;
64535     +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
64536     +               corr trace simple
64537     +           %end;
64538     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
64539     +               noprint
64540     +           %end;
64541     +              outtree=&emuserouttree
64542     +           ;
64543     +           var
64544     +           %let dsid=%sysfunc(open(work.tmp_clusdata));
64545     +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
64546     +                %do %while(^%sysfunc(fetch(&dsid)));
64547     +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
64548     +                    &_varname
64549     +                %end;
64550     +            %let dsid = %sysfunc(close(&dsid));
64551     +           ;
64552     +           %if %EM_FREQ ne %then %do;
64553     +           Freq %EM_FREQ;
64554     +           %end;
64555     +           run;
64557     +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
64559     +            %let gid=&vci;
64560     +            /*--- To make the main result table ----------------------*/
64561     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
64562     +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
64563     +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
64564     +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
64565     +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
64566     +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
64568     +            /* Inter Cluster Correlation Plot ------------------------*/
64570     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
64571     +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
64573     +           /* Create some other data sets for results ---------------*/
64575     +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
64576     +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
64577     +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
64579     +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
64581     +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
64583     +           %if &vci = 1 %then %do;
64584     +           data &EM_USER_OUTRSQUARE;
64585     +                set &emuseroutrsquare;
64586     +           run;
64587     +           %end;
64588     +           %else %do;
64589     +           data &EM_USER_OUTRSQUARE;
64590     +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
64591     +           run;
64592     +           %end;
64593     +           quit;
64594     +       %end;
64596     +       /*---- move this to Score action ------------
64597     +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
64598     +       */
64600     +       /* Make Score Gcluster component & correlation  */
64601     +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
64603     +       quit;
64604     +       %endline:
64605     +%mend VarClus2;
64608     +%macro Train2;
64610     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
64611     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
64612     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
64613     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
64614     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
64615     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
64616     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
64617     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
64618     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
64619     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
64620     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
64621     +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
64622     +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
64623     +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
64624     +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
64625     +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
64626     +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
64627     +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
64631     +    /* Train */
64633     +   /* moved to pretrain ------------
64635     +   %if &EM_IMPORT_DATA eq %then %do;
64636     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
64637     +       %goto endtrain2;
64638     +   %end;
64640     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
64641     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
64642     +        %goto endtrain2;
64643     +   %end;
64644     +   +-------------------------------------------*/
64646     +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
64649     +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
64651     +        /*----- moved to pretrain ------------
64653     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
64654     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
64655     +                             outvar=&EM_USER_OUTDUMMY,
64656     +                             outdata=_newtrainds,
64657     +                             fileref=&EM_FILE_EMFLOWSCORECODE,
64658     +                              ndummyvars=_ndummyvars
64659     +                            );
64661     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
64662     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
64663     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
64664     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
64665     +                %goto endtrain;
64666     +            %end;
64667     +        %end;
64669     +        +---------------------------------------*/
64670     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
64671     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
64672     +          There is no _newtrainds */
64673     +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
64674     +                             outstat=&EM_USER_GOUTSTAT,
64675     +                             corrmatrix=Y,
64676     +                             outcorr=&EM_USER_GOUTCORR,
64677     +                             includeclassvar=N,
64678     +                             freq =%EM_FREQ
64679     +                          );
64680     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
64682     +        %end;
64683     +        %else %do;
64684     +         %MakeCorrelation(   indata=_newtrainds,
64685     +                             outstat=&EM_USER_GOUTSTAT,
64686     +                             corrmatrix=Y,
64687     +                             outcorr=&EM_USER_GOUTCORR,
64688     +                             includeclassvar=Y,
64689     +                             freq =%EM_FREQ
64690     +                          );
64691     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
64693     +        %end;
64695     +    %end;
64696     +    %else %do;
64698     +        /* moved to pretrain -------------------
64700     +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
64701     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
64702     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
64703     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
64704     +                %goto endtrain;
64705     +            %end;
64706     +        %end;
64707     +         +------------------------------------------*/
64709     +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
64710     +                          outstat=&EM_USER_GOUTSTAT,
64711     +                          corrmatrix=Y,
64712     +                          outcorr=&EM_USER_GOUTCORR,
64713     +                          includeclassvar=N,
64714     +                          freq =%EM_FREQ
64715     +                          );
64716     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
64717     +    %end;
64719     +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
64720     +                                rsquare = N
64721     +                                );
64722     +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
64723     +                      ncluster=&_ngc,
64724     +                      method = Ward,
64725     +                      outtree =&EM_USER_GOUTTREE,
64726     +                      idvar = _VAR_,
64727     +                      outdata=&EM_USER_GOUTGROUP,
64728     +                      rescore = N,
64729     +                      newncluster=_newnclus
64730     +                        );
64732     +   /* store the number of global cluster */
64734     +   data &EM_USER_VARCLUSMETA;
64735     +        set &EM_USER_VARCLUSMETA;
64736     +        NGCluster = &_newnclus;
64737     +   run;
64739     +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
64741     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
64742     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
64743     +            %VarClus2(indata=&EM_IMPORT_DATA,
64744     +                 clusdata=&EM_USER_GOUTGROUP,
64745     +                 ngroup=&_newnclus);
64746     +         %end;
64747     +         %else %do;
64748     +             %VarClus2(indata=_newtrainds,
64749     +                 clusdata=&EM_USER_GOUTGROUP,
64750     +                 ngroup=&_newnclus);
64752     +         %end;
64754     +   %end;
64755     +   %else %do;
64756     +       %VarClus2(indata=&EM_IMPORT_DATA,
64757     +                 clusdata=&EM_USER_GOUTGROUP,
64758     +                 ngroup=&_newnclus);
64759     +   %end;
64761     +   %em_checkerror();
64762     +   %if &EMEXCEPTIONSTRING ne %then %do;
64763     +       %put &em_codebar;
64764     +       %put Error: Variable clustering failed.;
64765     +       %put &em_codebar;
64766     +       %goto endtrain2;
64767     +   %end;
64768     +   /*
64769     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
64770     +   */
64771     +   %endtrain2:
64772     +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
64774     +%macro em_copyfile(infref=, outfref=, append=N);
64776     +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
64778     +       %let omode =;
64779     +       %if &append=Y %then
64780     +           %let omode = MOD;
64781     +       data _null_;
64782     +          length line $20000;
64783     +          file &outfref &omode lrecl=20000;
64784     +          fid=fopen("&infref",'i',20000,'v');
64785     +          if fid > 0  then do;
64786     +             do while(^fread(fid));
64787     +                rlen = frlen(fid);
64788     +                rc= fget(fid,line,20000);
64789     +                start = length(line)-length(left(line))+1;
64790     +                line=strip(line);
64791     +                put @start line;
64792     +             end;
64793     +             if fid > 0  then rc=fclose(fid);
64794     +          end;
64795     +       run;
64797     +   %end;
64798     +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

64799      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.Part_TRAIN end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15:34   
NOTE: There were 1631 observations read from the data set EMWS8.PART_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

64800      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS8.VarClus_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "CLUSTERCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;

NOTE: The data set EMWS8.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   proc varclus data = EMWS8.Part_TRAIN outstat= EMWS8.VarClus_OUTSTAT hi maxc=8 short outtree=EMWS8.VarClus_OUTTREE ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income Kitchen Mnt MonthsAsCustomer NetPurchase RMntFrq RMntFrq_Exmpl2 Rcn Recomendation SmallAppliances Toys
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;

NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS8.VARCLUS_OUTSTAT has 169 observations and 21 variables.
NOTE: The data set EMWS8.VARCLUS_OUTTREE has 28 observations and 8 variables.
NOTE: The PROCEDURE VARCLUS printed page 18.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

64801      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS8.VarClus_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:20   
NOTE: There were 169 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 169 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age_Exmpl2 = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age_Exmpl2 = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename CatPurchase = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label CatPurchase = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Clothes = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Clothes = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename HigherEducation = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label HigherEducation = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename HouseKeeping = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label HouseKeeping = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS3 = CLUS3**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS4 = CLUS4**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS5 = CLUS5**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS6 = CLUS6**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS7 = CLUS7**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS8 = CLUS8**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS8.VarClus_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 56 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 56 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: There were 169 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 18 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      101:25   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 18 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 18 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 18 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 169 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Age = Age**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Age_Exmpl2 = Age_Exmpl2**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   CatPurchase = CatPurchase**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Clothes = Clothes**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Frq = Frq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   HigherEducation = HigherEducation**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   HouseKeeping = HouseKeeping**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Income = Income**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Kitchen = Kitchen**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Mnt = Mnt**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MonthsAsCustomer = MonthsAsCustomer**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NetPurchase = NetPurchase**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RMntFrq = RMntFrq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RMntFrq_Exmpl2 = RMntFrq_Exmpl2**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Rcn = Rcn**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Recomendation = Recomendation**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   SmallAppliances = SmallAppliances**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Toys = Toys**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS8.VarClus_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 144 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 144 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 144 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 144 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 126 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 126 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 126 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 18 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 18 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 18 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 18 observations read from the data set WORK._OWNRSQ.
NOTE: There were 18 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 18 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 26 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 26 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 169 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age_Exmpl2 = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age_Exmpl2 = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename CatPurchase = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label CatPurchase = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Clothes = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Clothes = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename HigherEducation = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label HigherEducation = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename HouseKeeping = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label HouseKeeping = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster Age Age_Exmpl2 CatPurchase Clothes Frq HigherEducation HouseKeeping Income ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS8.VarClus_OUTCLUSCORRPLOT out=EMWS8.VarClus_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 64 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 18 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   data EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 18 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;

NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 18 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 18 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS8.VarClus_OUTCORR out=EMWS8.VarClus_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 18 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 324 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 324 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 324 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 216 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 216 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      137:27   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 216 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 324 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 324 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 324 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 324 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 324 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 324 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 26 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTLINK has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 26 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTNODE has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS8.VarClus_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 8 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;

NOTE: There were 169 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATSCORE has 10 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATESCORECODE):   filename _file_ "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus3 = 0 ; /*---" "Cluster Component 3" "------ */";
MPRINT(CREATESCORECODE):   put "Clus4 = 0 ; /*---" "Cluster Component 4" "------ */";
MPRINT(CREATESCORECODE):   put "Clus5 = 0 ; /*---" "Cluster Component 5" "------ */";
MPRINT(CREATESCORECODE):   put "Clus6 = 0 ; /*---" "Cluster Component 6" "------ */";
MPRINT(CREATESCORECODE):   put "Clus7 = 0 ; /*---" "Cluster Component 7" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = 0 ; /*---" "Cluster Component 8" "------ */";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.14803833460083 * (Age - 49.6100551808706)/16.7649941146922;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.14803833460083 * (Age_Exmpl2 - 49.6100551808706)/16.7649941146922;";
MPRINT(CREATESCORECODE):   put "Clus8 = Clus8+0.5 * (CatPurchase - 57.8258736971183)/18.2057522786251;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+-0.34373330944238 * (Clothes - 52.0919681177192)/22.5372793386683;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.1458578872272 * (Frq - 20.2618025751072)/11.1021804717477;";
MPRINT(CREATESCORECODE):   put "Clus7 = Clus7+1 * (HigherEducation - 0.72409564684242)/0.44710592277836;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.28801398521878 * (HouseKeeping - 6.47332924586143)/6.92752090600866;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15001554749696 * (Income - 74652.6366952789)/28338.2761207795;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.29228403038896 * (Kitchen - 6.5334150827713)/7.04350760002782;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.14938096238626 * (Mnt - 668.500012262415)/682.865486365328;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+1 * (MonthsAsCustomer - 80.7657878602084)/16.5932673715258;";
MPRINT(CREATESCORECODE):   put "Clus8 = Clus8+-0.5 * (NetPurchase - 42.1741263028816)/18.2057522786251;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15487646457727 * (RMntFrq - 24.4483013550012)/16.8773857832219;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15487646457727 * (RMntFrq_Exmpl2 - 24.4483013550012)/16.8773857832219;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+1 * (Rcn - 64.3280196198651)/72.7615548958443;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+1 * (Recomendation - 3.97118332311465)/1.14571637947628;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+1 * (SmallAppliances - 28.4077253218884)/12.5327512699014;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.29125291548022 * (Toys - 6.47578172900061)/6.78336079444886;";
MPRINT(CREATESCORECODE):   run;

NOTE: The file _FILE_ is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=03 de Março de 2016 08H24m,
      Create Time=03 de Março de 2016 08H24m

NOTE: 31 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 86.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _out lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_in",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file _OUT is:
      Filename=E:\DataMining_EMProjects\Tugas\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03 de Março de 2016 08H24m,
      Create Time=03 de Março de 2016 08H24m

NOTE: 31 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 86.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64802      
64803      *------------------------------------------------------------*;
64804      * End TRAIN: VarClus;
64805      *------------------------------------------------------------*;

64806      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
64807      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
64808      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64809      ;
MPRINT(EM_DIAGRAM):   ;
64810      ;
MPRINT(EM_DIAGRAM):   ;
64811      ;
MPRINT(EM_DIAGRAM):   ;
64812      ;
MPRINT(EM_DIAGRAM):   ;
64813      quit;
MPRINT(EM_DIAGRAM):   quit;
64814      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64815      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
64816      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64817      /*; *"; *'; */
64818      ;
MPRINT(EM_DIAGRAM):   ;
64819      run;
MPRINT(EM_DIAGRAM):   run;
64820      quit;
MPRINT(EM_DIAGRAM):   quit;
64821      /* Reset EM Options */
64822      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
64823      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
64824      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
