MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.21 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                19. April 2016
Time:                17.21 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0YALE9Y "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0YALE9Y new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.21 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.21 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
96314      proc freq data=EMWS8.VarClus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.VarClus_VariableSet noprint;
96315      table ROLE*LEVEL/out=WORK.VarClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClusMETA;
96316      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

96317      proc print data=WORK.VarClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClusMETA label noobs;
96318      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
96319      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
96320      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
96321      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
96322      run;

NOTE: There were 6 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 56.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

96323      title10;
MPRINT(EM_DIAGRAM):   title10;
96324      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96700      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96701      * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
96702      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
96703      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

96704      %let EMEXCEPTIONSTRING=;
96705      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96706      * TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus;
96707      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96708      %let EM_ACTION = TRAIN;
96709      %let syscc = 0;
96710      
96711      %macro main;
96712      
96713         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
96714         %include temp;
96715         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
96716         %include temp;
96717         filename temp;
96718      
96719        %SetProperties;
96720      
96721         %if %upcase(&EM_ACTION) = CREATE %then %do;
96722             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
96723             %include temp;
96724             filename temp;
96725             %create;
96726         %end;
96727         %else
96728         %if %upcase(&EM_ACTION) = TRAIN %then %do;
96729              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
96730                 %include temp;
96731                 filename temp;
96732                 %train;
96733         %end;
96734         %else
96735         %if %upcase(&EM_ACTION) = SCORE %then %do;
96736                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
96737                 %include temp;
96738                 filename temp;
96739                 %score;
96740         %end;
96741         %else
96742         %if %upcase(&EM_ACTION) = REPORT %then %do;
96743                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
96744                 %include temp;
96745                 filename temp;
96746                 %report;
96747         %end;
96748         /*
96749         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
96750             %put 'OPENING TABLE';
96751         %end;
96752         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
96753             %put 'CLOSE TABLE';
96754         %end;
96755         */
96756      %mend main;
96757      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
96759     +/* Initialize property macro variables */
96760     +%macro SetProperties;
96761     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
96762     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
96763     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
96764     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
96765     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
96766     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
96767     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
96768     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
96769     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
96770     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
96771     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
96772     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
96773     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
96775     +%mend SetProperties;
96777     +%Macro MakeDummyVariables(indata=,
96778     +                          outvar=,
96779     +                          outdata=,
96780     +                          fileref=,
96781     +                          recreatecmeta=N, /* optional */
96782     +                          incmeta=,     /* optional */
96783     +                          outcmeta=,    /* optional */
96784     +                          ndummyvars=_ndummyvars
96785     +                          );
96786     +    %global &ndummyvars;
96788     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
96789     +       class
96790     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
96791     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
96792     +    ;
96793     +    run;
96794     +    %let &ndummyvars = 0;
96795     +    data _null_;
96796     +    %let dsid = %sysfunc(open(work._classout));
96797     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
96798     +    %let dsid = %sysfunc(close(&dsid));
96799     +    run;
96801     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
96802     +       input
96803     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
96804     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
96805     +        / level=nominal stdize=no;
96806     +       make outvar = &outvar;
96807     +       score data = &indata out =&outdata;
96808     +       code  file=  "&fileref";
96809     +    run;
96810     +    %if &recreatecmeta eq Y %then %do;
96811     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
96812     +    data _tmpds;
96813     +        set _tmpds;
96814     +           ROLE = 'INPUT';
96815     +           LEVEL = 'INTERVAL';
96816     +           CREATOR='DMZIP';
96817     +           if NAME = '_TYPE_' then delete;
96818     +    run;
96819     +    data &outcmeta;
96820     +         set &incmeta _tmpds;
96821     +    run;
96822     +    %end;
96823     +    proc datasets lib=work nolist;
96824     +      delete  _dmdbdat _dmdbcat _classout
96825     +    %if &recreatecmeta eq Y %then %do;
96826     +    _tmpds
96827     +    %end;
96828     +    ;
96829     +    quit;
96830     +%Mend MakeDummyVariables;
96832     +/*--- Determine Optimal Number of Cluster ----
96833     +%macro FindClusNum(statds=, groupds=, minvariation=);
96834     +   %global optnclus;
96835     +   data varclus_tmp(drop=_NAME_);
96836     +      set &statDs;
96837     +      where _type_ ='PROPOR';
96838     +   run;
96839     +   proc sort data=varclus_tmp;
96840     +      by _NCL_;
96841     +   run;
96842     +   proc transpose data=varclus_tmp out=varclus_tmp;
96843     +      by _NCL_;
96844     +      var %EM_INTERVAL_INPUT
96845     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
96846     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
96847     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
96848     +          %do i = 2 %to &nvar;
96849     +          %let varname = %sysfunc(varname(&dsid, &i));
96850     +          &varname
96851     +          %end;
96852     +      %end;
96853     +   ;
96854     +   run;
96856     +   %if &minVariation eq %then %do;
96857     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
96858     +   %end;
96859     +   %if ^(0<&minVariation<100) %then %do;
96860     +       %let minVariation = 90;
96861     +   %end;
96863     +   data _null_;
96864     +      set varclus_tmp end=eof;
96865     +      by _NCL_;
96866     +      retain flag 0;
96867     +      if first._ncl_ then flag=0;
96868     +      if .<col1 < &minVariation then flag=1;
96869     +      if last._ncl_ and ^flag then do;
96870     +         call symput('OPTNCL', _ncl_);
96871     +         stop;
96872     +      end;
96873     +     if eof then call symput('OPTNCL', _ncl_);
96874     +   run;
96876     +   %let optnclus = &OPTNCL;
96878     +   data varclus_tmp(drop=_NCL_ _NAME_);
96879     +      set &statDs;
96880     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
96881     +   run;
96882     +   proc sort data=varclus_tmp;
96883     +      by _TYPE_;
96884     +   run;
96885     +   proc transpose data=varclus_tmp out=varclus_tmp;
96886     +      by _TYPE_;
96887     +   run;
96888     +   proc sort data=varclus_tmp;
96889     +      by _name_ _type_;
96890     +   run;
96892     +  proc transpose data=varclus_tmp out=&groupds;
96893     +      by _NAME_;
96894     +   run;
96895     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
96896     +      by Cluster descending Rsquare;
96897     +      where Cluster ne 0;
96898     +   run;
96899     +   proc datasets lib=work nolist mt=(DATA VIEW);
96900     +      delete varclus_tmp;
96901     +   run;
96902     +   quit;
96903     +%mend findClusNum;
96904     +*/
96906     +%macro getNclusfromTrain(inoutstat=, nc=);
96907     +%global &nc;
96908     +data _null_;
96909     +    set &inoutstat end=eof;
96910     +    if eof then do;
96911     +    call symput("&nc", _ncl_);
96912     +    end;
96913     +run;
96914     +%mend  getNclusfromTrain;
96916     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
96918     +     *--- Build Code to Modify Metadata ---*;
96919     +     filename X "&deltacodefile";
96920     +     data _null_;
96921     +        FILE X;
96922     +        set &groupds end=eof;
96923     +        /*by Cluster;*/
96924     +         if _N_=1 then do;
96925     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
96926     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
96927     +           %end;
96928     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
96929     +           put "if upcase(strip(NAME)) in (";
96930     +        end;
96931     +        if Strip(upcase(Selected)) eq 'YES' then do;
The SAS System

96932     +           string = '"'!!trim(left(VARIABLE))!!'"';
96933     +           put string;
96934     +        end;
96935     +        if eof then do;
96936     +           put ') then ROLE="INPUT";';
96937     +           put 'else ROLE="REJECTED";';
96938     +           put 'end;';
96940     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
96941     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
96942     +           %end;
96943     +        end;
96944     +     run;
96945     +     quit;
96947     +     filename X;
96949     +     quit;
96950     +%mend MakeDeltaCode;
96952     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
96953     +    %if ^%sysfunc(exist(&statds)) %then %do;
96954     +         %goto doendc;
96955     +    %end;
96957     +    data &corrds(drop=_TYPE_ _NCL_) ;
96958     +       set &statds;
96959     +       where _type_ eq 'CORR' ;
96960     +    run ;
96961     +    proc sort data=&corrds;
96962     +       by _NAME_ ;
96963     +    run ;
96964     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
96965     +      BY _NAME_ ;
96966     +    run ;
96967     +    data &corrplotds;
96968     +       length _Y_ $100;
96969     +       set &corrplotDs;
96970     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
96971     +    run ;
96972     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
96973     +       set &corrplotds;
96974     +       where _LABEL_ ne '' ;
96975     +       keep _TMP_ _LABEL_ ;
96976     +    run ;
96977     +    data _null_;
96978     +       nobs=0;
96979     +       dsid = open('varclus_match');
96980     +       if dsid then do;
96981     +          nobs = attrn(dsid, 'NOBS');
96982     +          dsid = close(dsid);
96983     +       end;
96984     +       call symput ('CORR_NOBS', nobs);
96985     +    run;
96986     +    %if &corr_nobs %then %do;
96987     +        proc sort data=varclus_match;
96988     +           by _name_;
96989     +        run ;
96990     +        proc sort data=&corrplotds;
96991     +           by _name_;
96992     +        run ;
96993     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
96994     +           merge varclus_match &corrplotds;
96995     +           by _NAME_ ;
96996     +           if _X_ eq '' then _X_=_NAME_ ;
96997     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
96998     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
96999     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
97001     +       run ;
97002     +    %end;
97003     +    %else %do;
97004     +        proc sort data=&corrplotds;
97005     +           by _name_;
97006     +        run ;
97007     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
97008     +           set &corrplotds;
97009     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
97010     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
97011     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
97013     +        run ;
97014     +    %end;
97015     +    proc sort data=&corrplotds;
97016     +       by _X_ _Y_;
97017     +    run ;
97018     +    proc datasets lib=work nolist mt=(DATA VIEW);
97019     +       delete varclus_match;
97020     +    run;
97021     +    quit;
97023     +%doendc:
97025     +%mend MakeVarClusCorrData;
97027     +%macro MakeStatPlotData(statds= , outstatplotds=);
97028     +   %if %sysfunc(exist(&statds)) %then %do;
97030     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
97031     +          set &statDs;
97032     +          where _type_ in('MEAN', 'STD', 'N');
97033     +       run ;
97034     +       proc transpose data=varclus_tmp out=&outstatplotds;
97035     +          id _TYPE_ ;
97036     +       run ;
97037     +       data &outstatplotds;
97038     +          set &outstatplotds(obs=1000);
97039     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
97040     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
97041     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
97042     +          else SCALEDSTD= STD ;
97043     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
97044     +       run ;
97045     +       proc sort data=&outstatplotds;
97046     +          by descending SCALEDSTD ;
97047     +       run ;
97048     +       proc datasets lib=work nolist mt=(DATA VIEW);
97049     +          delete varclus_tmp;
97050     +       run;
97051     +       quit;
97052     +    %end;
97054     +%mend MakeStatPlotData;
97057     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
97058     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
97059     +    data &EM_USER_OUTSTATSCORE;
97060     +          set &indata;
97061     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
97062     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
97063     +          if _TYPE_ = 'STD' then _NAME_='STD';
97064     +          DROP _TYPE_ _NCL_;
97065     +     run;
97067     +     filename _file_  "&fileRef";
97069     +     data _null_;
97070     +        FILE _file_ MOD;
97071     +        put ' ';
97072     +        put '/*-------------------------------------------------*/';
97073     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
97074     +        put '/*-------------------------------------------------*/';
97075     +        put ' ';
97076     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
97078     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
97079     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
97081     +        %let k = 1;
97082     +        %do %while(^%sysfunc(fetch(&dsid)));
97083     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
97084     +                %if &k > 2 %then %do;
97085     +                 %let cn = %eval(&k-2);
97086     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
97087     +                %end;
97088     +                %let k = %eval(&k+1);
97089     +        %end;
97091     +        %let rc = %sysfunc(rewind(&dsid));
97093     +        %do i= 2 %to &nvar;
97094     +            %let _varname =  %sysfunc(varname(&dsid, &i));
97095     +            %do %while(^%sysfunc(fetch(&dsid)));
97096     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
97097     +                %if &_name = MEAN %then
97098     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
97099     +                %else %if &_name = STD %then
97100     +                %let _std = %sysfunc(getvarn(&dsid, &i));
97101     +                %else %do;
97102     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
97103     +                      %let abscoeff = %sysfunc(abs(&coeff));
97104     +                          %if &abscoeff >  0 %then %do;
97105     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
97106     +                           %end;
97107     +                 %end;
97108     +             %end;
97109     +             %let rc = %sysfunc(rewind(&dsid));
97110     +         %end;
97112     +        %let dsid= %sysfunc(close(&dsid));
97113     +       run;
97114     +%mend CreateScoreCode;
97118     +/*----------------------------------------------------------
97119     +    Instead of using %MakeRSquareData,
97120     +    %MakeVarClusResultTable at macro2.source is used
97121     + +----------------------------------------------------------*/
97124     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
97126     +/* modifying  from ods rsquare = data */
97128     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
97129     +    Length Cluster $16;
97130     +    length Variable $32;
97131     +    Length VariableLabel $64;
97132     +    set &indata; retain CurrentCluster;
97133     +    if NumberOfClusters ^= &ncluster then delete;
97134     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
97135     +    CurrentCluster = Cluster;
97136     +   run;
97137     +proc sort data =&outdata ;
97138     +     by Cluster RsquareRatio;
97139     +run;
97140     +data _tmprsq(drop=index);
97141     +     set &outdata; by Cluster;
97142     +     if first.Cluster then do;
97143     +     index = strip(scan(Cluster,2 ));
97144     +     Variable = "Clus"||index;
97145     +     VariableLabel = "Cluster Component "||index;
97146     +     OwnCluster = 1;
97147     +     NextClosest = .;
97148     +     RsquareRatio = 0;
97149     +     output;
97150     +     end;
97151     +run;
97153     +proc sort data = _tmprsq ;
97154     +     by Cluster RsquareRatio;
97155     +run;
97156     +data &outdata;
97157     +     set &outdata _tmprsq;
97158     +by Cluster;
97159     +run;
97162     +/* Just create the Selected variable with all YES */
97164     +data &outdata;
97165     +    set &outdata; by cluster;
97166     +    length Selected $8;
97167     +    Selected = 'YES';
97168     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
97169     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
97170     +    rename OwnCluster = RSqWithClusterComp;
97171     +    rename NextClosest = RSqWithNextClusComp;
97172     +run;
97175     +/* Selected = Y/N will be done %score section -----
97177     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
97178     +data &outdata;
97179     +    set &outdata; by cluster;
97180     +    length Selected $8;
97181     +    if first.Cluster then Selected = 'YES';
97182     +    else Selected = 'NO';
97183     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
97184     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
97185     +    rename OwnCluster = RSqWithClusterComp;
97186     +    rename NextClosest = RSqWithNextClusComp;
97187     +run;
97188     +%end;
97189     +%else %do;
97190     +data &outdata;
97191     +    set &outdata; by cluster;
97192     +    if last.Cluster then Selected = 'YES';
97193     +    else Selected = 'NO';
97194     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
97195     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
97196     +    rename OwnCluster = RSqWithClusterComp;
97197     +    rename NextClosest = RSqWithNextClusComp;
97198     +run;
97199     +%end;
97200     +---------------------------------------------------------------*/
97202     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
97203     +/* to calculate NextClosestClusRsq */
97204     +proc transpose data = &inClusRSquare  out=_clusRsq;
97205     +      by cluster;
97206     +      run;
97207     +data _clusRsq;
97208     +     set _clusRsq;
97209     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
97210     +run;
97212     +proc sort data=_clusRsq;
97213     +    by cluster col1;
97214     +    run;
97215     +data _clusRsq(drop=_NAME_ _LABEL_);
97216     +     set _clusRsq; by cluster;
97217     +     if last.Cluster then output;
97218     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
97219     +     rename COL1 = RSqWithNextClusComp;
97220     +     rename Cluster = Variable;
97221     +     label  Cluster = "Variable";
97222     +run;
97224     +proc sort data =&outdata;
97225     +     by Variable;
97226     +run;
97227     +data &outdata;
97228     +    merge &outdata _clusRsq;
97229     +    by Variable;
97230     +run;
97231     +proc sort data =&outdata;
97232     +by Cluster  RsquareRatio;
97233     +run;
97234     +quit;
97235     +%end;
97237     +proc datasets lib = work nolist;
97238     +     delete _tmprsq _clusRsq;
97239     +     run;
97240     +quit;
97242     +%mend MakeRSquareData;
97245     +/*-------------------------------------------------------------------------*/
97249     +%macro ModifyCorr(indata=,
97250     +                  outdata=,
97251     +                  rsquare = Y
97252     +                  );
97253     +    data corr_tmp;
97254     +        set &indata;
97255     +    run;
97256     +     proc sql;
97257     +           update &indata
97258     +           set
97259     +     %let dsid = %sysfunc(open(work.corr_tmp));
97260     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
97261     +          %do i = 4 %to &nvar;
97262     +          %let _name = %sysfunc(varname(&dsid, &i));
97263     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
97264     +            %else  %let _name_md = &_name;
97265     +            %if &i < &nvar %then %do;
97266     +               &_name = 1- &_name_md ,
97267     +            %end;
97268     +            %else %do;
97269     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
97270     +            %end;
97271     +          %end;
97272     +      %let dsid= %sysfunc(close(&dsid));
97274     +      select * from &indata;
97275     +      run;
97276     +      proc datasets lib = work nolist;
97277     +           delete corr_tmp;
97278     +      run;
97279     +      quit;
97281     + %mend ModifyCorr;
97283     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
97284     +    data &outdata(drop= _NCL_  _TYPE_);
97285     +       set &indata;
97286     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
97287     +       rename _NAME_ = Cluster;
97288     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
97289     +    run;
97290     +    %if &RSquare eq Y %then %do;
97291     +     data corr_tmp;
97292     +        set &outdata;
97293     +     run;
97295     +     data &outdata(drop=i);
97296     +          set &outdata;
97297     +          %let dsid = %sysfunc(open(work.corr_tmp));
97298     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
97299     +          %do i = 2 %to &nvar;
97300     +            %let _name = %sysfunc(varname(&dsid, &i));
97301     +            %let _name_md = &_name.**2;
97302     +                &_name = &_name_md;
97303     +          %end;
97304     +      %let dsid= %sysfunc(close(&dsid));
97305     +      run;
97306     +      proc datasets lib = work nolist;
97307     +           delete corr_tmp;
97308     +      run;
97310     +    %end;
97311     +     quit;
97312     +%mend MakeClusStructCorrData;
97314     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
97315     +    data &outdata(drop= _NCL_  _TYPE_);
97316     +       set &indata;
97317     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
97318     +       rename _NAME_ = Cluster;
97319     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
97320     +    run;
97321     +    data corr_tmp;
97322     +        set &outdata;
97323     +    run;
97325     +    %let dsid = %sysfunc(open(work.corr_tmp));
97326     +    %let nclus2= %eval(&ncluster+1);
97327     +    data &outdata;
97328     +         set &outdata;
97329     +          %do i = 2 %to &nclus2;
97330     +          %let i_1 = %eval(&i-1);
97331     +            %let _name = %sysfunc(varname(&dsid, &i));
97332     +            %let _newName = Clus&i_1;
97333     +                rename &_name = &_newName; ;
97334     +                *label &_name ="Cluster &i_1";
97335     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
97336     +          %end;
97337     +          keep Cluster
97338     +          %do i = 2 %to &nclus2;
97339     +                %let _name = %sysfunc(varname(&dsid, &i));
97340     +                &_name
97341     +          %end;
97342     +          ;
97343     +    %let dsid= %sysfunc(close(&dsid));
97344     +     run;
97345     +     quit;
97347     +    %if &RSquare eq Y %then %do;
97349     +       data corr_tmp;
97350     +        set &outdata;
97351     +     run;
97353     +     data &outdata(drop=i);
97354     +          set &outdata;
97355     +          %let dsid = %sysfunc(open(work.corr_tmp));
97356     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
97357     +          %do i = 2 %to &nvar;
97358     +            %let _name = %sysfunc(varname(&dsid, &i));
97359     +            %let _name_md = &_name.**2;
97360     +                &_name = &_name_md;
97361     +          %end;
97362     +      %let dsid= %sysfunc(close(&dsid));
97363     +      run;
97364     +    %end;
97366     +    %if &makeplotds eq Y %then %do;
97367     +     proc transpose data = &outdata
97368     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
97369     +          by cluster;
97370     +     run;
97371     +     data &plotds;
97372     +          set  &plotds;
97373     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
97374     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
97375     +     run;
97376     +     %end;
97377     +     proc datasets lib = work nolist;
97378     +           delete corr_tmp;
97379     +     run;
97380     +     quit;
97381     +%mend MakeInterClusCorrData;
97384     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
97386     +data &outlink(drop = Selected);
97387     +     set &indata;
97388     +     LINKID = _N_;
97389     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
97390     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
97391     +run;
97392     +data &outnode(keep=NODEID TYPE LABEL);
97393     +    set &indata;
97394     +    length TYPE $16;
97395     +    rename Variable = NODEID;
97396     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
97397     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
97398     +    then  TYPE = "CLUSTER";
97399     +    else  TYPE="VARIABLE";
97400     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
97401     +run;
97402     +quit;
97403     +%mend MakeClusConstellData;
97407     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
97409     +data &outlink(drop = Selected);
97410     +     set &indata;
97411     +     LINKID = _N_;
97412     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
97413     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
97414     +run;
97415     +data &outnode(keep=NODEID TYPE LABEL);
97416     +    set &indata;
97417     +    length TYPE $16;
97418     +    rename Variable = NODEID;
97419     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
97420     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
97421     +    then  TYPE = "CLUSTER";
97422     +    else  TYPE="VARIABLE";
97423     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
97424     +run;
97425     +quit;
97426     +%mend MakeClusConstellData;
97429     +/*--- This will work only when inds is not a view data -------
97431     +%macro getNVarNObs(inds=, nvar=, nobs=);
97433     +    %global &nvar;
97434     +    %global &nobs;
97435     +    data _null_;
97436     +         dsid = open("&inds");
97437     +         nv = attrn(dsid, 'NVAR');
97438     +         no = attrn(dsid, 'NOBS');
97439     +         dsid = close(dsid);
97440     +         call symput("&nvar", nv);
97441     +         call symput("&nobs", no);
97442     +    run;
97443     +    quit;
97444     +%mend  getNVarNObs;
97446     ++---------------------------------------------------------------*/
97449     +%macro getNVar(inds=, nvar=);
97450     +    %global &nvar;
97451     +    data _null_;
97452     +         dsid = open("&inds");
97453     +         nv = attrn(dsid, 'NVAR');
97454     +         dsid = close(dsid);
97455     +         call symput("&nvar", nv);
97456     +    run;
97457     +    quit;
97458     +%mend  getNVar;
97462     +%macro getNObs(inds=, nobs=);
97463     +    %global &nobs;
97464     +    data _null_;
97465     +        set &inds end=eof;
97466     +        if eof then call symput("&nobs", _N_);
97467     +    run;
97468     +    quit;
97469     +%mend  getNObs;
97471     +%Macro CreateVarclusMeta(trainnum=);
97472     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
97473     +    data &EM_USER_VARCLUSMETA;
97474     +         length TrainNum 8.;
97475     +         length NewTrain $8;
97476     +         length NGCluster 8.;
97477     +         length ExportedComp $16;
97478     +         length HideVariable $8;
97479     +         TrainNum = &trainnum;
97480     +         NewTrain = "Y";
97481     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
97482     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
97483     +         NGCluster = 0; /* zero means no twostage */
97484     +   run;
97485     +   quit;
97486     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
97488     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
97489     +    data &outdata(drop= _NCL_  _TYPE_);
97490     +       set &indata;
97491     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
97492     +       %if &globalclusid ne %then %do;
97493     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
97494     +       rename _NAME_ = Cluster;
97495     +       %end;
97496     +       %else %do;
97497     +        _NAME_ = upcase(_NAME_);
97498     +       rename _NAME_ = Cluster;
97499     +       %end;
97500     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
97501     +    run;
97502     +    data corr_tmp;
97503     +        set &outdata;
97504     +    run;
97506     +    %let dsid = %sysfunc(open(work.corr_tmp));
97507     +    %let nclus2= %eval(&ncluster+1);
97508     +    data &outdata;
97509     +         set &outdata;
97510     +          %do i = 2 %to &nclus2;
97511     +          %let i_1 = %eval(&i-1);
97512     +            %let _name = %sysfunc(varname(&dsid, &i));
97513     +            %if &globalclusid ne %then
97514     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
97515     +                     rename &_name = &_newName;
97516     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
97517     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
97518     +                %end;
97519     +            %else
97520     +                %do; %let _newName = CLUS&i_1;
97521     +                     rename &_name = &_newName;
97522     +                     *label &_name ="Cluster &i_1";
97523     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
97524     +                %end;
97525     +          %end;
97526     +          keep Cluster
97527     +          %do i = 2 %to &nclus2;
97528     +                %let _name = %sysfunc(varname(&dsid, &i));
97529     +                &_name
97530     +          %end;
97531     +          ;
97532     +    %let dsid= %sysfunc(close(&dsid));
97533     +     run;
97534     +     quit;
97536     +    %if &RSquare eq Y %then %do;
97538     +       data corr_tmp;
97539     +        set &outdata;
97540     +     run;
97542     +     data &outdata;
97543     +          set &outdata;
97544     +          %let dsid = %sysfunc(open(work.corr_tmp));
97545     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
97546     +          %do i = 2 %to &nvar;
97547     +            %let _name = %sysfunc(varname(&dsid, &i));
97548     +            %let _name_md = &_name.**2;
97549     +                &_name = &_name_md;
97550     +          %end;
97551     +      %let dsid= %sysfunc(close(&dsid));
97552     +      run;
97553     +    %end;
97555     +    %if &makeplotds eq Y %then %do;
97556     +     proc transpose data = &outdata
97557     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
97558     +          by cluster;
97559     +     run;
97560     +     data &plotds;
97561     +          set  &plotds;
97562     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
97563     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
97564     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
97565     +     run;
97566     +     %end;
97567     +     proc datasets lib = work nolist;
97568     +           delete corr_tmp;
97569     +     run;
97570     +     quit;
97571     +%mend MakeInterClusCorrData;
97573     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
97574     +    data _tmpds(drop= _NCL_);
97575     +       set &indata;
97576     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
97577     +       %if &globalclusid ne %then %do;
97578     +           _NAME_ = "GC&globalclusid.";
97579     +       rename _NAME_ = Cluster;
97580     +       %end;
97581     +       %else %do;
97582     +        _NAME_ = "CLUS";
97583     +        rename _NAME_ = Cluster;
97584     +       %end;
97585     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
97586     +    run;
97587     +    proc transpose data =_tmpds out =&outdata;
97588     +    run;
97590     +    data &outdata(drop=COL1);
97591     +        %if &globalclusid ne %then %do;
97592     +        length GCluster $16;
97593     +        %end;
97594     +        length Cluster $32;
97595     +        length _NAME_ $32;
97596     +         set &outdata;
97597     +         _NAME_ = upcase(_NAME_);
97598     +         rename _NAME_=Variable;
97599     +         *label _NAME_="Variable";
97600     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
97601     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
97602     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
97604     +         %if &globalclusid ne %then %do;
97605     +          GCluster = "GC&globalclusid";
97606     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
97607     +         %end;
97608     +         %else %do;
97609     +         Cluster = "CLUS"||strip(COL1);
97610     +        %end;
97611     +         rename COL2 = RSqWithOwnClusComp;
97612     +         *label COL2 = "R-Square With Own Cluster Component";
97613     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
97615     +   run;
97616     +   proc sort data =&outdata;
97617     +        by Cluster RSqWithOwnClusComp;
97618     +   run;
97619     +   proc datasets lib = work nolist;
97620     +           delete _tmpds;
97621     +   run;
97622     +   quit;
97623     +%mend MakeOwnRSquare;
97625     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
97626     +    data &outdata(drop= _NCL_  _TYPE_);
97627     +       %if &globalclusid ne %then %do;
97628     +        length GCluster $16;
97629     +        %end;
97630     +       set &indata;
97631     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
97632     +       %if &globalclusid ne %then %do;
97633     +         GCluster = "GC&globalclusid";
97634     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
97635     +         rename _NAME_ = Cluster;
97636     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
97637     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
97639     +       %end;
97640     +       %else %do;
97641     +         _NAME_ = upcase(_NAME_);
97642     +         rename _NAME_ = Cluster;
97643     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
97644     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
97646     +       %end;
97647     +     run;
97648     +    %if &RSquare eq Y %then %do;
97649     +     data corr_tmp;
97650     +          set &outdata;
97651     +     run;
97652     +     %let istart = 2;
97653     +     %if &globalclusid ne %then %let istart = 3;
97654     +     data &outdata;
97655     +          set &outdata;
97656     +          %let dsid = %sysfunc(open(work.corr_tmp));
97657     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
97658     +          %do i =&istart %to &nvar;
97659     +            %let _name = %sysfunc(varname(&dsid, &i));
97660     +            %let _name_md = &_name.**2;
97661     +                &_name = &_name_md;
97662     +          %end;
97663     +      %let dsid= %sysfunc(close(&dsid));
97664     +      run;
97665     +      proc datasets lib = work nolist;
97666     +           delete corr_tmp;
97667     +      run;
97668     +    %end;
97669     +     quit;
97670     +%mend MakeClusStructCorrData;
97672     +/*
97673     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
97674     +*/
97676     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
97678     +     /* The indata should be the outdata
97679     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
97681     +     proc sort data =&indata out=_tmpclusRsq;
97682     +     by cluster;
97683     +     run;
97685     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
97686     +      by cluster;
97687     +     run;
97689     +     proc sort data=_tmpclusRsq;
97690     +        by _NAME_ COL1;
97691     +     run;
97693     +     data _tmpclusRsq;
97694     +         length _NAME_ $32;
97695     +         set _tmpclusRsq; by _NAME_;
97696     +          _NAME_ = upcase(_NAME_);
97697     +          %if &ncluster ne 1 %then %do;
97698     +             if last._NAME_ then delete;
97699     +          %end;
97700     +          %else %do;
97701     +             COL1 = 0;
97702     +          %end;
97703     +     run;
97704     +     /* need to sort again */
97705     +     proc sort data=_tmpclusRsq;
97706     +        by _NAME_ COL1;
97707     +     run;
97709     +     data &outdata;
97710     +         set _tmpclusRsq; by _NAME_;
97711     +         Cluster = upcase(Cluster);
97712     +         if last._NAME_ then output;
97713     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
97714     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
97715     +         rename COL1 = RSqWithNextClusComp;
97716     +         Cluster = upcase(Cluster);
97717     +         rename Cluster = ClosestCluster;
97718     +         *label  Cluster = "Next Closest Cluster";
97719     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
97720     +         rename _NAME_ = Variable;
97721     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
97722     +    run;
97725     +    %if &globalclusid ne %then %do;
97726     +    data &outdata;
97727     +       length GCluster $16;
97728     +       set &outdata;
97729     +       GCluster = "GC&globalclusid";
97730     +       run;
97731     +    %end;
97732     +    proc datasets lib = work nolist;
97733     +           delete _tmpclusRsq;
97734     +    run;
97735     +    quit;
97736     +%mend FindNextClosestClusByVar;
97739     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
97740     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
97741     +     proc sort data =&indata out=_tmpclusRsq;
97742     +     by cluster;
97743     +     run;
97744     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
97745     +     by cluster;
97746     +     run;
97747     +     proc sort data=_tmpclusRsq;
97748     +        by _NAME_ col1;
97749     +     run;
97750     +     data _tmpclusRsq;
97751     +         length _NAME_ $32;
97752     +         set _tmpclusRsq; by _NAME_;
97753     +          _NAME_ = upcase(_NAME_);
97754     +          %if &ncluster ne 1 %then %do;
97755     +             if last._NAME_ then delete;
97756     +          %end;
97757     +          %else %do;
97758     +             COL1 = 0;
97759     +          %end;
97760     +     run;
97761     +     data &outdata;
97762     +         set _tmpclusRsq; by _NAME_;
97763     +         Cluster = upcase(Cluster);
97764     +         if last._NAME_ then output;
97765     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
97766     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
97767     +         rename COL1 = RSqWithNextClusComp;
97768     +         Cluster = upcase(Cluster);
97769     +         rename Cluster = ClosestCluster;
97770     +         *label  Cluster = "Next Closest Cluster";
97771     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
97772     +         rename _NAME_ = Variable;
97773     +         *label  _NAME_ = "Variable";
97774     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
97776     +    run;
97777     +    %if &globalclusid ne %then %do;
97778     +    data &outdata;
97779     +       length GCluster $16;
97780     +       set &outdata;
97781     +       GCluster = "GC&globalclusid";
97782     +       run;
97783     +    %end;
97785     +    proc datasets lib = work nolist;
97786     +           delete _tmpclusRsq;
97787     +    run;
97789     +    quit;
97790     +%mend FindNextClosestClusByCluster;
97792     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
97793     +/*----
97794     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
97795     +-----------*/
97797     +proc sort data =&indata1;
97798     +    by Variable;
97799     +run;
97800     +proc sort data =&indata2;
97801     +    by Variable;
97802     +run;
97803     +data &outdata;
97804     +    merge &indata1 &indata2;
97805     +    by Variable;
97806     +    length Type $16;
97807     +    Type = 'Variable';
97808     +    *label Type ='Type';
97809     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
97810     +run;
97813     +data &indata3;
97814     +    set  &indata3 ;
97815     +    length RSqWithOwnClusComp 8.;
97816     +    Cluster = Variable;
97817     +    RSqWithOwnClusComp = 1;
97818     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
97819     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
97820     +    length Type $16;
97821     +    Type = 'ClusterComp';
97822     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
97824     +;
97825     +run;
97827     +proc sort data=&outdata;
97828     +    by Cluster;
97829     +run;
97830     +proc sort data =&indata3;
97831     +    by Cluster;
97832     +run;
97834     +data &outdata;
97835     +     set &outdata &indata3;
97836     +     by Cluster;
97837     +run;
97840     +/* Create the Selected variable with all YES */
97842     +data &outdata;
97843     +     set &outdata;
97844     +     length RsqRatio 8.;
97845     +     length Selected $8;
97846     +     *label RSqRatio = "1-R**2 Ratio";
97847     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
97848     +     *label Selected = "Variable Selected";
97849     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
97850     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
97851     +     Selected ='YES';
97852     +     rename _LABEL_ = Label;
97853     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
97854     +run;
97857     +/*----  Selected = Y/N will be assigened at the %score                   -------+
97858     +        Just create the Selected variable with all YES at the step above
97859     + +------------------------------------------------------------------------------+
97861     +proc sort data=&outdata;
97862     +    by Cluster RsqRatio;
97863     +run;
97865     +%if &selectedcomp eq CLUSTERCOMP %then %do;
97866     +data &outdata;
97867     +     set &outdata; by Cluster;
97868     +     length Selected $8;
97869     +     label Selected = "Variable Selected";
97870     +     if  first.Cluster then Selected ='Yes';
97871     +     else Selected = 'No';
97872     +    run;
97873     +%end;
97874     +%else %do;
97875     +data &outdata(drop = _var _varchange);
97876     +     set &outdata; retain _var 0; by Cluster;
97877     +     length Selected $8;
97878     +     label Selected = "Variable Selected";
97879     +     if first.Cluster then  _varchange = 0;
97880     +     else _varchange =1;
97881     +     if _var ne _varchange then  Selected  = 'Yes';
97882     +     else Selected = 'No';
97883     +     if last.cluster then  _var = 0;
97884     +     else _var = _varchange;
97885     +run;
97886     +%end;
97888     +--------------------------------------------------------------*/
97890     +quit;
97891     +%mend MakeVarClusResultTable;
97893     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
97894     +     proc sort data =&indata;
97895     +        by cluster;
97896     +     run;
97897     +     proc transpose data =&indata
97898     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
97899     +          by cluster;
97900     +     run;
97901     +     data &outdata;
97902     +          set  &outdata;
97903     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
97904     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
97905     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
97906     +     run;
97907     +     %if &globalclusid ne %then %do;
97908     +     data &outdata;
97909     +          Length GCluster $16;
97910     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
97911     +          set  &outdata;
97912     +          GCluster ="GC&globalclusid.";
97913     +          run;
97914     +     %end;
97916     +%Mend MakePlotDataFromCorrTable;
97919     +%macro MakeCorrelation(indata=,
97920     +                       outstat=_tmpoutstat,
97921     +                       corrmatrix=N,
97922     +                       outcorr=_tmpoutcorr,
97923     +                       includeclassvar=N,
97924     +                       target=,
97925     +                       freq=,
97926     +                       weight=);
97927     +   %if &target eq  %then %do;
97929     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
97930     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
97931     +       %if &includeclassvar eq Y %then %do;
97932     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
97933     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
97934     +          %do i = 2 %to &nvar;
97935     +          %let varname = %sysfunc(varname(&dsid, &i));
97936     +          &varname
97937     +          %end;
97938     +       %end;
97939     +       ;
97940     +      %if &freq ne  %then %do;
97941     +          freq &freq;
97942     +      %end;
97943     +      %if &weight ne  %then %do;
97944     +          weight &weight;
97945     +      %end;
97947     +      run;
97948     +      %if &corrmatrix eq Y %then %do;
97949     +      data  &outcorr (drop = _NCL_ _TYPE_);
97950     +           set  &outstat ;
97951     +           if _TYPE_ ='CORR' then output;
97952     +      run;
97953     +      %end;
97954     +    %end;
97955     +    %else %do;
97956     +       proc corr data=&indata outp=&outstat noprint;
97957     +            var
97958     +       %let dsid = %sysfunc(open(&indata));
97959     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
97960     +          %do i = 1 %to &nvar;
97961     +              %let _name = %sysfunc(varname(&dsid, &i));
97962     +              %if &_name ne &target %then;
97963     +              &_name
97964     +           %end;
97965     +        %let dsid= %sysfunc(close(&dsid));
97966     +        ;
97967     +        with &target;
97968     +        run;
97969     +    %end;
97970     +    quit;
97971     +%mend MakeCorrelation;
97974     +%macro MakeCorrelationDistance(indata=,
97975     +                               outdata=,
97976     +                               rsquare = N
97977     +                               );
97978     +    data corr_tmp;
97979     +        set &indata;
97980     +        if _N_ = 1 then do;
97981     +           output;
97982     +           stop;
97983     +         end;
97984     +    run;
97985     +    %if &outdata ne  %then %let  _outdata = &outdata;
97986     +    %else %let _outdata = &indata;
97988     +    data &_outdata;
97989     +         set &indata;
97991     +         %let dsid = %sysfunc(open(work.corr_tmp));
97992     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
97993     +          %do i = 2 %to &nvar;
97994     +              %let _name = %sysfunc(varname(&dsid, &i));
97995     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
97996     +              %else  %let _name_md = &_name;
97997     +              &_name = 1- &_name_md;
97998     +          %end;
97999     +      %let dsid= %sysfunc(close(&dsid));
98000     +      run;
98001     +      proc datasets lib = work nolist;
98002     +           delete corr_tmp;
98003     +      run;
98004     +      quit;
98005     +  %mend MakeCorrelationDistance;
98008     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
98009     +                                   rsquare = N
98010     +                                   );
98011     +    data corr_tmp;
98012     +        set &indata;
98013     +    run;
98014     +    proc sql noprint;
98015     +           update &indata
98016     +           set
98017     +     %let dsid = %sysfunc(open(work.corr_tmp));
98018     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
98019     +          %do i = 4 %to &nvar;
98020     +          %let _name = %sysfunc(varname(&dsid, &i));
98021     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
98022     +            %else  %let _name_md = &_name;
98023     +            %if &i < &nvar %then %do;
98024     +               &_name = 1- &_name_md ,
98025     +            %end;
98026     +            %else %do;
98027     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
98028     +            %end;
98029     +          %end;
98030     +      %let dsid= %sysfunc(close(&dsid));
98032     +      select * from &indata;
98033     +      run;
98034     +     data &indata( drop = _NCL_);
98035     +           set &indata;
98036     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
98037     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
98038     +     run;
98039     +     data &indata(DROP = _NCL_);
98040     +           set &indata;
98041     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
98042     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
98043     +           rename _NAME_ = _VAR_;
98044     +     run;
98045     +     proc datasets lib = work nolist;
98046     +           delete corr_tmp;
98047     +     run;
98048     +     quit;
98049     + %mend UpdateOutStatCorrToDistance;
98052     +%macro HierClusWithCorr(indata= ,
98053     +                        ncluster=,
98054     +                        method = Ward,
98055     +                        outtree = _outtree,
98056     +                        idvar =_VAR_,
98057     +                        outdata=,
98058     +                        rescore = N,
98059     +                        newncluster=
98060     +                        );
98061     +      %global &newncluster;
98062     +      %if &rescore ne Y %then %do;
98063     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
98064     +                   method=&method outtree=&outtree noprint;
98065     +           id &idvar;
98066     +      run;
98067     +      %end;
98068     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
98069     +      run;
98070     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
98071     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
98072     +      run;
98073     +      data _outcontent;
98074     +          set _outcontent;
98075     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
98076     +          index = 1;
98077     +          rename NAME = _NAME_;
98078     +      run;
98079     +      proc sort data=_outcontent;
98080     +          by _NAME_;
98081     +      run;
98082     +      proc sort data =&outdata;
98083     +           by _NAME_;
98084     +      run;
98085     +      data &outdata(drop=index);
98086     +          merge &outdata _outcontent;
98087     +          by _NAME_;
98088     +          if index = . then delete;
98089     +      run;
98090     +      /*-----------------------------------------------------------*/
98091     +      data &outdata;
98092     +           length CLUSNAME $16;
98093     +           set &outdata;
98094     +           if CLUSTER > &ncluster then delete;
98095     +           CLUSNAME='GC'||strip(CLUSTER);
98096     +           *label CLUSNAME = "Cluster Name";
98097     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
98098     +           rename _NAME_ = VARIABLE ;
98099     +           *label _NAME_ = "Variable";
98100     +           *label CLUSTER = "Cluster";
98101     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
98102     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
98103     +      run;
98104     +      proc sort data=&outdata out=&outdata;
98105     +           by CLUSTER;
98106     +      run;
98107     +      proc means data =&outdata noprint;
98108     +           output out=_meanout;
98109     +      run;
98110     +      data _null_;
98111     +            set _meanout;
98112     +            if strip(_STAT_) eq 'MAX' then do;
98113     +            call symput("&newncluster", CLUSTER);
98114     +            stop;
98115     +            end;
98116     +      run;
98118     +      proc datasets lib = work nolist;
98119     +           delete _outcontent _meanout;
98120     +      run;
98121     +      quit;
98122     +%mend  HierClusWithCorr;
98124     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
98126     +     data _tmpindata;
98127     +          set &indata;
98128     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
98129     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
98130     +          if _TYPE_ = 'STD' then _NAME_='STD';
98131     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
98132     +          DROP _TYPE_ _NCL_;
98133     +     run;
98135     +     filename _file_  "&fileRef";
98137     +     data _null_;
98138     +        FILE _file_ MOD;
98139     +        put ' ';
98140     +        put "/*-------------------------------------------------*/";
98141     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
98142     +        put "/*-------------------------------------------------*/";
98143     +        put ' ';
98144     +        %let dsid = %sysfunc(open(work._tmpindata));
98146     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
98147     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
98148     +        %let k = 1;
98149     +        %do %while(^%sysfunc(fetch(&dsid)));
98150     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
98151     +               %if &k > 2 %then %do;
98152     +                %let cn = %eval(&k-2);
98153     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
98154     +                %end;
98155     +                %let k = %eval(&k+1);
98157     +        %end;
98158     +        %let rc = %sysfunc(rewind(&dsid));
98160     +        %do j= 2 %to &nvar;
98161     +            %let _varname = %sysfunc(varname(&dsid, &j));
98162     +            %do %while(^%sysfunc(fetch(&dsid)));
98163     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
98164     +                %if &_name = MEAN %then
98165     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
98166     +                %else %if &_name = STD %then
98167     +                %let _std = %sysfunc(getvarn(&dsid, &j));
98168     +                %else %do;
98169     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
98170     +                      %let abscoeff = %sysfunc(abs(&coeff));
98171     +                          %if &abscoeff >  0 %then %do;
98172     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
98173     +                           %end;
98174     +                 %end;
98175     +             %end;
98176     +             %let rc = %sysfunc(rewind(&dsid));
98177     +         %end;
98179     +        %let dsid= %sysfunc(close(&dsid));
98181     +     run;
98183     +     filename _file_;
98184     +     proc datasets lib = work nolist;
98185     +           delete _tmpindata;
98186     +     run;
98187     +     quit;
98188     +%mend CreateScoreCode2;
98191     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
98193     +     /*--- Build Code to Modify Metadata ---*/
98194     +     filename X "&deltacodefile";
98195     +     data _null_;
98196     +        FILE X;
98197     +        set &groupds end=eof;
98198     +        if _N_=1 then do;
98199     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
98200     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
98201     +           %end;
98202     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
98203     +           put "if upcase(strip(NAME)) in (";
98204     +        end;
98205     +        if Strip(upcase(Selected)) eq 'YES' then do;
98206     +           string = '"'!!trim(left(VARIABLE))!!'"';
98207     +           put string;
98208     +        end;
98209     +        if eof then do;
98210     +           put ') then ROLE="INPUT";';
98211     +           put 'else ROLE="REJECTED";';
98212     +           put 'end;';
98214     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
98215     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
98216     +           %end;
98217     +        end;
98218     +     run;
98219     +     quit;
98221     +     filename X;
98222     +     quit;
98223     +%mend MakeDeltaCode2;
98225     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
98226     +  %global &ngc;
98227     +  data _null_;
98228     +  %if &indata ne %then %do;
98229     +      %let dsid = %sysfunc(open(&indata));
98230     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
98231     +      %let dsid = %sysfunc(close(&dsid));
98232     +  %end;
98233     +  %else %do;
98234     +       %let nvar = %eval(&ninput+&ndummy); ;
98235     +  %end;
98236     +  %let numgc = %eval(&nvar/&div+2);
98237     +  %let &ngc = &numgc;
98238     +   run;
98239     +  quit;
98240     +%mend getInitialGClusterNumber;
98243     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
98244     +data &outlink(drop = Selected);
98245     +     set &indata;
98246     +     LINKID = _N_;
98247     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
98248     +run;
98249     +data &outnode(keep=NODEID TYPE LABEL);
98250     +    set &indata;
98251     +    length TYPE $16;
98252     +    rename VARIABLE = NODEID;
98253     +    *label  CLUSNAME="Node ID";
98254     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
98255     +    TYPE = "VARIABLE";
98256     +    *label TYPE = "Node Type";
98257     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
98258     +    run;
98259     +data _tmp(keep=NODEID TYPE LABEL);
98260     +    set &indata;
98261     +    length TYPE $16;
98262     +    rename CLUSNAME = NODEID;
98263     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
98264     +    TYPE = "GCLUSTER";
98265     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
98266     +    run;
98267     +proc sort data=_tmp;
98268     +    by NODEID;
98269     +run;
98270     +data _tmp;
98271     +    set _tmp; by NODEID;
98272     +    if first.NODEID then output;
98273     +run;
98274     +proc sort data=&outnode;
98275     +    by NODEID;
98276     +run;
98277     +data  &outnode;
98278     +    set _tmp &outnode;
98279     +run;
98280     +proc datasets lib = work nolist;
98281     +     delete _tmp;
98282     +run;
98283     +quit;
98284     +%mend MakeGobalConstellData;
98286     +/* Make contellation plot data among GCLUSTERS */
98288     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
98290     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
98291     +     set &indata;
98292     +     LINKID = _N_;
98293     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
98294     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
98295     +     end;
98296     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
98297     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
98298     +     end;
98299     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
98300     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
98301     +    end;
98302     +run;
98304     +data _tmp_outrsquare;
98305     +        set &inoutrsq;
98306     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
98307     +run;
98309     +proc freq data =_tmp_outrsquare noprint;
98310     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
98311     +run;
98313     +data &outnode(keep=_NAME_ TYPE LABEL);
98314     +    set &outlink;
98315     +    length TYPE $16;
98316     +    length LABEL $100;
98317     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
98319     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
98320     +    TYPE = "GCLUSTER";
98321     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
98322     +    end;
98323     +    else do;
98324     +    TYPE= "ROOT";
98325     +    LABEL= _NAME_;
98326     +    end;
98327     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
98328     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
98329     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
98330     +    run;
98332     +proc sort data=&outnode;
98333     +     by _NAME_;
98334     +proc sort data=_tmp_GCLUSFREQ;
98335     +     by _NAME_;
98336     +run;
98338     +data  &outnode;
98339     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
98340     +     if COUNT=. then COUNT=1;
98341     +run;
98343     +proc datasets lib = work nolist;
98344     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
98345     +run;
98347     +quit;
98348     +%Mend MakeGClusterConstData;
98351     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
98353     +    data _gscoretmpds;
98354     +          set &indata;
98355     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
98356     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
98357     +          if _TYPE_ = 'STD' then _NAME_='STD';
98358     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
98359     +          DROP _TYPE_ _NCL_;
98360     +     run;
98362     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
98363     +        GCluster Component &globalclusid ------ */
98365     +    filename _file_  "&fileref";
98367     +    data _null_;
98368     +        %if &globalclusid eq 1 %then %do;
98369     +          FILE _file_;
98370     +        %end;
98371     +        %else %do;
98372     +          FILE _file_ MOD;
98373     +        %end;
98375     +        %let dsid = %sysfunc(open(work._gscoretmpds));
98376     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
98377     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
98379     +        %let k = 1;
98380     +        %do %while(^%sysfunc(fetch(&dsid)));
98381     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
98382     +                %if &k > 2 %then %do;
98383     +                put "&_name = 0 ; ";
98384     +                %end;
98385     +                %let k = %eval(&k+1);
98386     +        %end;
98388     +        %let rc = %sysfunc(rewind(&dsid));
98389     +        %do i= 2 %to &nvar;
98390     +            %let _varname =  %sysfunc(varname(&dsid, &i));
98391     +            %do %while(^%sysfunc(fetch(&dsid)));
98392     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
98393     +                %if &_name = MEAN %then
98394     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
98395     +                %else %if &_name = STD %then
98396     +                %let _std = %sysfunc(getvarn(&dsid, &i));
98397     +                %else %do;
98398     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
98399     +                      %let abscoeff = %sysfunc(abs(&coeff));
98400     +                          %if &abscoeff >  0 %then %do;
98401     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
98402     +                           %end;
98403     +                 %end;
98404     +             %end;
98405     +             %let rc = %sysfunc(rewind(&dsid));
98407     +         %end;
98409     +        %let dsid= %sysfunc(close(&dsid));
98410     +       run;
98413     +       proc datasets lib=work nolist;
98414     +            delete _gscoretmpds;
98415     +       run;
98416     +      quit;
98418     +%mend CreateGClusterScoreCode;
98421     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
98423     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
98424     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
98425     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
98426     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
98427     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
98428     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
98429     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
98430     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
98431     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
98432     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
98433     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
98434     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
98435     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
98436     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
98438     +   filename gsfile "&gscorecode";
98440     +   data &EM_USER_GSCORE;
98441     +             set &indata;
98442     +             %include  gsfile;
98443     +        keep
98444     +        %do i=1 %to &ngcluster;
98445     +         %let gcvarname = GC&i;
98446     +         &gcvarname
98447     +        %end;
98448     +     ;
98449     +   run;
98451     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
98452     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
98453     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
98454     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
98455     +    noprint  ;
98456     +     var
98457     +       %do i=1 %to &ngcluster;
98458     +         %let gcvarname = GC&i;
98459     +         &gcvarname
98460     +        %end;
98461     +   ;
98462     +   run;
98465     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
98466     +   data &EM_USER_GSCORECORRPLOT ;
98467     +        set &EM_USER_GSCORECORRPLOT;
98468     +        rename _X_ = X;
98469     +        rename _Y_ = Y;
98470     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
98471     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
98472     +   run;
98474     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
98476     +   data &EM_USER_GSCORETREE;
98477     +        length _NAME_ $32;
98478     +        length _LABEL_ $100;
98479     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
98480     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
98481     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
98482     +        end;else do;
98483     +         _LABEL_ = _NAME_;
98484     +        end;
98485     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
98487     +   run;
98489     +   quit;
98491     +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
98496     +%macro train;
98498     +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
98499     +   %include temp;
98500     +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
98501     +   %include temp;
98502     +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
98503     +   %include temp;
98504     +   filename temp;
98506     +   %let VARCLUS_MAXNUMOBS = 100000;
98507     +   %let VARCLUS_MAXNUMVAR = 200;
98508     +   %let trainnum = 0;
98509     +   %let error = 0;
98511     +   %if &EM_IMPORT_DATA eq %then %do;
98512     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
98513     +       %let  error = 1;
98514     +       %goto endtrain;
98515     +   %end;
98517     +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
98518     +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
98519     +        %let  error = 1;
98520     +        %goto endline;
98521     +    %end;
98523     +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
98524     +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
98525     +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
98526     +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
98527     +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
98528     +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
98530     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
98531     +        %if  &_num_input_total < 2 %then %do;
98532     +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
98533     +            %let error = 2;
98534     +            %goto endtrain;
98535     +        %end;
98536     +   %end;
98537     +   %else %do;
98538     +         %if  &_num_input_interval < 2 %then %do;
98539     +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
98540     +         %let error = 2;
98541     +         %goto endtrain;
98542     +         %end;
98543     +   %end;
98545     +   %em_checkerror();
98547     +   %if &EMEXCEPTIONSTRING ne %then %do;
98548     +       %goto endtrain;
98549     +   %end;
98551     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
98553     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
98554     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
98555     +                             outvar=&EM_USER_OUTDUMMY,
98556     +                             outdata=_newtrainds,
98557     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
98559     +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
98560     +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
98561     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
98562     +                proc datasets lib=work nolist;
98563     +                delete  _newtrainds;
98564     +                run;
98565     +                quit;
98566     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
98567     +                %let error = 3;
98568     +               %goto endtrain;
98569     +            %end;
98570     +        %end;
98572     +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
98573     +             %getNVar(inds=_newtrainds, nvar=_nvar);
98575     +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
98576     +                %let trainnum = 2;
98577     +            %end;
98578     +            %else %do;
98579     +                %let trainnum = 1;
98580     +            %end;
98581     +        %end;
98582     +    %end;
98583     +    %else %do;
98585     +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
98587     +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
98589     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
98591     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
98592     +                  %let error = 3;
98593     +                 %goto endtrain;
98594     +            %end;
98595     +        %end;
98598     +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
98599     +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
98600     +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
98601     +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
98602     +                %let trainnum = 2;
98603     +            %end;
98604     +            %else %do;
98605     +                %let trainnum = 1;
98606     +            %end;
98607     +        %end;
98609     +   %end;
98611     +    %em_checkerror();
98613     +    %if &EMEXCEPTIONSTRING ne %then %do;
98614     +       %let error = 4;
98615     +       %goto endtrain;
98616     +    %end;
98618     +    %CreateVarclusMeta(trainnum=&trainnum);
98620     +    %if &error > 0 %then  %goto endtrain;
98622     +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
98624     +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
98625     +           %train1;
98626     +       %end;
98627     +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
98628     +           %train2;
98629     +       %end;
98631     +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
98632     +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
98633     +      %em_copyfile(infref=_in, outfref=_out);
98634     +      filename _in;
98635     +      filename _out;
98638     +   %endtrain:
98641     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
98643     +%macro VarClus(indata=,
98644     +               outstat=,
98645     +               outtree=,
98646     +               vars=,
98647     +               freq=,
98648     +               weight=,
98649     +               includeclassvar=
98650     +               );
98652     +   %if &vars eq %then
98653     +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
98655     +       proc varclus data = &indata outstat= &outstat
98656     +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
98657     +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
98658     +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
98659     +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
98660     +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
98661     +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
98662     +       %end;
98664     +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
98665     +            maxeigen = &EM_PROPERTY_MAXEIGEN
98666     +       %end;
98668     +       %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
98669     +            proportion = &EM_PROPERTY_PROPORTION
98670     +       %end;
98671     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
98672     +               summary
98673     +       %end;
98675     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
98676     +           short
98677     +       %end;
98678     +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
98679     +           corr trace simple
98680     +       %end;
98681     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
98682     +          noprint
98683     +       %end;
98684     +       outtree=&outtree
98685     +       ;
98686     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
98688     +      %if &includeclassvar eq Y %then %do;
98689     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
98690     +          %if &dsid > 0 %then %do;
98691     +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
98692     +              %do i = 2 %to &nvar;
98693     +                  %let varname = %sysfunc(varname(&dsid, &i));
98694     +                   &varname
98695     +              %end;
98697     +          %end;
98698     +      %end;
98700     +      ;
98701     +      /*------------------------
98702     +      %if &freq ne  %then %do;
98703     +          freq &freq;
98704     +      %end;
98705     +      %if &weight ne  %then %do;
98706     +          weight &weight;
98707     +      %end;
98708     +      ----------------------------*/
98709     +      %if %EM_FREQ ne %then %do;
98710     +           Freq %EM_FREQ;
98711     +      %end;
98712     +      ;
98713     +    run;
98714     +    %endline:
98715     +    quit;
98716     +%mend VarClus;
98718     +%macro Train1;
98720     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
98721     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
98722     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
98723     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
98724     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
98725     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
98726     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
98727     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
98728     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
98729     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
98730     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
98731     +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
98732     +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
98734     +   /*
98735     +     %let VARCLUS_MAXNUMOBS = 100;
98736     +     %let VARCLUS_MAXNUMVAR = 200;
98737     +   */
98739     +   /* Train
98741     +   %if &EM_IMPORT_DATA eq %then %do;
98742     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
98743     +       %goto endtrain1;
98744     +   %end;
98746     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
98747     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
98748     +        %goto endtrain1;
98749     +   %end;
98750     +   */
98751     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
98752     +       /* moved this to pretrain ------------
98754     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
98755     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
98756     +                             outvar=&EM_USER_OUTDUMMY,
98757     +                             outdata=_newtrainds,
98758     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
98760     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
98761     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
98762     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
98763     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
98764     +                %goto endtrain;
98765     +            %end;
98766     +        %end;
98768     +        +-------------------------------------*/
98770     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
98771     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
98772     +          There is no _newtrainds */
98773     +         %VarClus( indata=&EM_IMPORT_DATA,
98774     +                  outstat=&EM_USER_OUTSTAT,
98775     +                  outtree = &EM_USER_OUTTREE,
98776     +                  includeclassvar=N
98777     +                 );
98778     +        %end;
98779     +        %else %do;
98780     +        %VarClus( indata=_newtrainds,
98781     +                  outstat=&EM_USER_OUTSTAT,
98782     +                  outtree = &EM_USER_OUTTREE,
98783     +                  includeclassvar=Y
98784     +                 );
98785     +         proc datasets lib=work nolist;
98786     +              delete  _newtrainds;
98787     +         run;
98788     +         %end;
98789     +    %end;
98790     +    %else %do;
98792     +        /*----- moved this to pretrain ------------
98793     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
98794     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
98795     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
98796     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
98797     +                 %goto endtrain;
98798     +            %end;
98799     +        %end;
98800     +        +-------------------------------------*/
98802     +        %VarClus(indata=&EM_IMPORT_DATA,
98803     +                  outstat=&EM_USER_OUTSTAT,
98804     +                  outtree =&EM_USER_OUTTREE,
98805     +                  includeclassvar=N
98806     +               );
98808     +   %end;
98810     +   %em_checkerror();
98812     +   %if &EMEXCEPTIONSTRING ne %then %do;
98813     +       %goto endtrain1;
98814     +   %end;
98815     +    /*
98816     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
98817     +    */
98819     +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
98821     +    %let gid=;
98823     +    /*--- To make the main result table ----------------------*/
98825     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
98826     +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
98827     +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
98828     +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
98829     +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
98830     +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
98832     +   /* Inter Cluster Correlation Plot ------------------------*/
98834     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
98835     +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
98837     +   /* Create some other data sets for results ----*/
98839     +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
98840     +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
98841     +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
98843     +  /*---- move this to Score action ------------
98844     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
98845     +   */
98847     +   /* create score code at training time */
98848     +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
98849     +   %endtrain1:
98850     +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
98853     +%macro VarClus2( indata=,
98854     +                 outdata=,
98855     +                 outstat =outstat,
98856     +                 outrsquare=outrsquare,
98857     +                 outtree = outtree,
98858     +                 outclusstruct = outclusstruct,
98859     +                 outcluscorr =outcluscorr,
98860     +                 outcluscorrplot =outcluscorrplot,
98861     +                 outclusrsquare =outclusrsquare,
98862     +                 outstatplot = outstatplot,
98863     +                 outcorr = outcorr,
98864     +                 outcorrplot = outcorrplot,
98865     +                 clusdata=,
98866     +                 outnode=outnode,
98867     +                 outlink=outlink,
98868     +                 ngroup =1  );
98869     +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
98870     +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
98871     +              %goto endline;
98872     +         %end;
98874     +        %global numglobalcluster;
98875     +        %let  numglobalcluster = &ngroup;
98876     +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
98877     +        %do vci =1 %to &ngroup;
98878     +           data tmp_clusdata;
98879     +                set &clusdata;
98880     +                if CLUSTER ne &vci then delete;
98881     +           run;
98882     +           %let outstatds = &outstat.&vci;
98883     +           %let outrsquareds = &outrsquare.&vci;
98884     +           %let outtreeds = &outtree.&vci;
98885     +           %let outclusstuctds = &outclusstruct.&vci;
98886     +           %let outcluscorrds = &outcluscorr.&vci;
98887     +           %let outcluscorrplotds = &outcluscorrplot.&vci;
98888     +           %let outclusrsquareds = &outclussquare.&vci;
98889     +           %let outstatplotds = &outstatplot.&vci;
98890     +           %let outcorrds = &outcorr.&vci;
98891     +           %let outcorrplotds = &outcorrplot.&vci;
98892     +           %let outnodeds = &outnode.&vci;
98893     +           %let outlinkds = &outlink.&vci;
98895     +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
98896     +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
98897     +           %let emuseroutstat = &EM_USER_&outstatds;
98899     +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
98900     +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
98901     +           %let emuserouttree = &EM_USER_&outtreeds;
98903     +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
98904     +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
98905     +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
98907     +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
98908     +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
98909     +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
98911     +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
98912     +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
98913     +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
98915     +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
98916     +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
98917     +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
98919     +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
98920     +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
98921     +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
98923     +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
98924     +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
98925     +           %let emuseroutcorr = &EM_USER_&outcorrds;
98927     +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
98928     +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
98929     +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
98931     +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
98932     +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
98933     +           %let emuseroutnode = &EM_USER_&outnodeds;
98935     +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
98936     +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
98937     +           %let emuseroutlink = &EM_USER_&outlinkds;
98939     +           proc varclus data=&indata outstat=&emuseroutstat
98940     +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
98941     +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
98942     +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
98943     +            %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
98944     +                %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
98945     +                %if &maxc > 1 %then %do;     maxc=&maxc %end;
98946     +           %end;
98948     +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
98949     +            maxeigen = &EM_PROPERTY_MAXEIGEN
98950     +            %end;
98952     +           %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
98953     +                proportion = &EM_PROPERTY_PROPORTION
98954     +           %end;
98955     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
98956     +               summary
98957     +           %end;
98958     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
98959     +               short
98960     +           %end;
98961     +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
98962     +               corr trace simple
98963     +           %end;
98964     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
98965     +               noprint
98966     +           %end;
98967     +              outtree=&emuserouttree
98968     +           ;
98969     +           var
98970     +           %let dsid=%sysfunc(open(work.tmp_clusdata));
98971     +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
98972     +                %do %while(^%sysfunc(fetch(&dsid)));
98973     +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
98974     +                    &_varname
98975     +                %end;
98976     +            %let dsid = %sysfunc(close(&dsid));
98977     +           ;
98978     +           %if %EM_FREQ ne %then %do;
98979     +           Freq %EM_FREQ;
98980     +           %end;
98981     +           run;
98983     +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
98985     +            %let gid=&vci;
98986     +            /*--- To make the main result table ----------------------*/
98987     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
98988     +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
98989     +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
98990     +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
98991     +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
98992     +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
98994     +            /* Inter Cluster Correlation Plot ------------------------*/
98996     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
98997     +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
98999     +           /* Create some other data sets for results ---------------*/
99001     +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
99002     +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
99003     +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
99005     +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
99007     +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
99009     +           %if &vci = 1 %then %do;
99010     +           data &EM_USER_OUTRSQUARE;
99011     +                set &emuseroutrsquare;
99012     +           run;
99013     +           %end;
99014     +           %else %do;
99015     +           data &EM_USER_OUTRSQUARE;
99016     +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
99017     +           run;
99018     +           %end;
99019     +           quit;
99020     +       %end;
99022     +       /*---- move this to Score action ------------
99023     +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
99024     +       */
99026     +       /* Make Score Gcluster component & correlation  */
99027     +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
99029     +       quit;
99030     +       %endline:
99031     +%mend VarClus2;
99034     +%macro Train2;
99036     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
99037     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
99038     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
99039     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
99040     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
99041     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
99042     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
99043     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
99044     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
99045     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
99046     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
99047     +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
99048     +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
99049     +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
99050     +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
99051     +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
99052     +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
99053     +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
99057     +    /* Train */
99059     +   /* moved to pretrain ------------
99061     +   %if &EM_IMPORT_DATA eq %then %do;
99062     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
99063     +       %goto endtrain2;
99064     +   %end;
99066     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
99067     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
99068     +        %goto endtrain2;
99069     +   %end;
99070     +   +-------------------------------------------*/
99072     +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
99075     +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
99077     +        /*----- moved to pretrain ------------
99079     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
99080     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
99081     +                             outvar=&EM_USER_OUTDUMMY,
99082     +                             outdata=_newtrainds,
99083     +                             fileref=&EM_FILE_EMFLOWSCORECODE,
99084     +                              ndummyvars=_ndummyvars
99085     +                            );
99087     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
99088     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
99089     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
99090     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
99091     +                %goto endtrain;
99092     +            %end;
99093     +        %end;
99095     +        +---------------------------------------*/
99096     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
99097     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
99098     +          There is no _newtrainds */
99099     +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
99100     +                             outstat=&EM_USER_GOUTSTAT,
99101     +                             corrmatrix=Y,
99102     +                             outcorr=&EM_USER_GOUTCORR,
99103     +                             includeclassvar=N,
99104     +                             freq =%EM_FREQ
99105     +                          );
99106     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
99108     +        %end;
99109     +        %else %do;
99110     +         %MakeCorrelation(   indata=_newtrainds,
99111     +                             outstat=&EM_USER_GOUTSTAT,
99112     +                             corrmatrix=Y,
99113     +                             outcorr=&EM_USER_GOUTCORR,
99114     +                             includeclassvar=Y,
99115     +                             freq =%EM_FREQ
99116     +                          );
99117     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
99119     +        %end;
99121     +    %end;
99122     +    %else %do;
99124     +        /* moved to pretrain -------------------
99126     +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
99127     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
99128     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
99129     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
99130     +                %goto endtrain;
99131     +            %end;
99132     +        %end;
99133     +         +------------------------------------------*/
99135     +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
99136     +                          outstat=&EM_USER_GOUTSTAT,
99137     +                          corrmatrix=Y,
99138     +                          outcorr=&EM_USER_GOUTCORR,
99139     +                          includeclassvar=N,
99140     +                          freq =%EM_FREQ
99141     +                          );
99142     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
99143     +    %end;
99145     +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
99146     +                                rsquare = N
99147     +                                );
99148     +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
99149     +                      ncluster=&_ngc,
99150     +                      method = Ward,
99151     +                      outtree =&EM_USER_GOUTTREE,
99152     +                      idvar = _VAR_,
99153     +                      outdata=&EM_USER_GOUTGROUP,
99154     +                      rescore = N,
99155     +                      newncluster=_newnclus
99156     +                        );
99158     +   /* store the number of global cluster */
99160     +   data &EM_USER_VARCLUSMETA;
99161     +        set &EM_USER_VARCLUSMETA;
99162     +        NGCluster = &_newnclus;
99163     +   run;
99165     +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
99167     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
99168     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
99169     +            %VarClus2(indata=&EM_IMPORT_DATA,
99170     +                 clusdata=&EM_USER_GOUTGROUP,
99171     +                 ngroup=&_newnclus);
99172     +         %end;
99173     +         %else %do;
99174     +             %VarClus2(indata=_newtrainds,
99175     +                 clusdata=&EM_USER_GOUTGROUP,
99176     +                 ngroup=&_newnclus);
99178     +         %end;
99180     +   %end;
99181     +   %else %do;
99182     +       %VarClus2(indata=&EM_IMPORT_DATA,
99183     +                 clusdata=&EM_USER_GOUTGROUP,
99184     +                 ngroup=&_newnclus);
99185     +   %end;
99187     +   %em_checkerror();
99188     +   %if &EMEXCEPTIONSTRING ne %then %do;
99189     +       %put &em_codebar;
99190     +       %put Error: Variable clustering failed.;
99191     +       %put &em_codebar;
99192     +       %goto endtrain2;
99193     +   %end;
99194     +   /*
99195     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
99196     +   */
99197     +   %endtrain2:
99198     +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
99200     +%macro em_copyfile(infref=, outfref=, append=N);
99202     +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
99204     +       %let omode =;
99205     +       %if &append=Y %then
99206     +           %let omode = MOD;
99207     +       data _null_;
99208     +          length line $20000;
99209     +          file &outfref &omode lrecl=20000;
99210     +          fid=fopen("&infref",'i',20000,'v');
99211     +          if fid > 0  then do;
99212     +             do while(^fread(fid));
99213     +                rlen = frlen(fid);
99214     +                rc= fget(fid,line,20000);
99215     +                start = length(line)-length(left(line))+1;
99216     +                line=strip(line);
99217     +                put @start line;
99218     +             end;
99219     +             if fid > 0  then rc=fclose(fid);
99220     +          end;
99221     +       run;
99223     +   %end;
99224     +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

99225      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.Part_TRAIN end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15:34   
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

99226      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS8.VarClus_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "CLUSTERCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;

NOTE: The data set EMWS8.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   proc varclus data = EMWS8.Part_TRAIN outstat= EMWS8.VarClus_OUTSTAT hi maxc=8 short outtree=EMWS8.VarClus_OUTTREE ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;

NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS8.VARCLUS_OUTSTAT has 175 observations and 27 variables.
NOTE: The data set EMWS8.VARCLUS_OUTTREE has 35 observations and 8 variables.
NOTE: The PROCEDURE VARCLUS printed page 57.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

99227      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS8.VarClus_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:20   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS3 = CLUS3**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS4 = CLUS4**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS5 = CLUS5**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS6 = CLUS6**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS7 = CLUS7**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS8 = CLUS8**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS8.VarClus_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 56 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 56 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      101:25   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   AcceptedCmpTotal = AcceptedCmpTotal**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Age = Age**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Frq = Frq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Income = Income**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Kidhome = Kidhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Mnt = Mnt**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFishProducts = MntFishProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFruits = MntFruits**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntGoldProds = MntGoldProds**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntMeatProducts = MntMeatProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntSweetProducts = MntSweetProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntWines = MntWines**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MonthsAsCustomer = MonthsAsCustomer**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumCatalogPurchases = NumCatalogPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDealsPurchases = NumDealsPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDistPurchases = NumDistPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumStorePurchases = NumStorePurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebPurchases = NumWebPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebVisitsMonth = NumWebVisitsMonth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RFMstat = RFMstat**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RMntFrq = RMntFrq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Recency = Recency**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Teenhome = Teenhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Year_Birth = Year_Birth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS8.VarClus_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS8.VarClus_OUTCLUSCORRPLOT out=EMWS8.VarClus_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 64 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   data EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;

NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS8.VarClus_OUTCORR out=EMWS8.VarClus_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 384 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      137:27   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTLINK has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTNODE has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS8.VarClus_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 8 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;

NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATSCORE has 10 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATESCORECODE):   filename _file_ "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus3 = 0 ; /*---" "Cluster Component 3" "------ */";
MPRINT(CREATESCORECODE):   put "Clus4 = 0 ; /*---" "Cluster Component 4" "------ */";
MPRINT(CREATESCORECODE):   put "Clus5 = 0 ; /*---" "Cluster Component 5" "------ */";
MPRINT(CREATESCORECODE):   put "Clus6 = 0 ; /*---" "Cluster Component 6" "------ */";
MPRINT(CREATESCORECODE):   put "Clus7 = 0 ; /*---" "Cluster Component 7" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = 0 ; /*---" "Cluster Component 8" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+1 * (MonthsAsCustomer - 83.4953664700926)/16.9441392661404;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;";
MPRINT(CREATESCORECODE):   put "Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;";
MPRINT(CREATESCORECODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=19. April 2016 17.21 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 37 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _out lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_in",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file _OUT is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19. April 2016 17.21 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 37 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
99228      
99229      *------------------------------------------------------------*;
99230      * End TRAIN: VarClus;
99231      *------------------------------------------------------------*;

99232      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
99233      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
99234      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
99235      ;
MPRINT(EM_DIAGRAM):   ;
99236      ;
MPRINT(EM_DIAGRAM):   ;
99237      ;
MPRINT(EM_DIAGRAM):   ;
99238      ;
MPRINT(EM_DIAGRAM):   ;
99239      quit;
MPRINT(EM_DIAGRAM):   quit;
99240      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
99241      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
99242      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
99243      /*; *"; *'; */
99244      ;
MPRINT(EM_DIAGRAM):   ;
99245      run;
MPRINT(EM_DIAGRAM):   run;
99246      quit;
MPRINT(EM_DIAGRAM):   quit;
99247      /* Reset EM Options */
99248      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
99249      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
99250      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
