MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.28 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                21. April 2016
Time:                18.28 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1JYO45V "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1JYO45V new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.28 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.28 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
103965     proc freq data=EMWS8.VarClus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.VarClus_VariableSet noprint;
103966     table ROLE*LEVEL/out=WORK.VarClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClusMETA;
103967     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

103968     proc print data=WORK.VarClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClusMETA label noobs;
103969     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
103970     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
103971     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
103972     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
103973     run;

NOTE: There were 6 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 38.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

103974     title10;
MPRINT(EM_DIAGRAM):   title10;
103975     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
104351     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
104352     * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
104353     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
104354     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

104355     %let EMEXCEPTIONSTRING=;
104356     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
104357     * TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus;
104358     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
104359     %let EM_ACTION = TRAIN;
104360     %let syscc = 0;
104361     
104362     %macro main;
104363     
104364        filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
104365        %include temp;
104366        filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
104367        %include temp;
104368        filename temp;
104369     
104370       %SetProperties;
104371     
104372        %if %upcase(&EM_ACTION) = CREATE %then %do;
104373            filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
104374            %include temp;
104375            filename temp;
104376            %create;
104377        %end;
104378        %else
104379        %if %upcase(&EM_ACTION) = TRAIN %then %do;
104380             filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
104381                %include temp;
104382                filename temp;
104383                %train;
104384        %end;
104385        %else
104386        %if %upcase(&EM_ACTION) = SCORE %then %do;
104387                filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
104388                %include temp;
104389                filename temp;
104390                %score;
104391        %end;
104392        %else
104393        %if %upcase(&EM_ACTION) = REPORT %then %do;
104394                filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
104395                %include temp;
104396                filename temp;
104397                %report;
104398        %end;
104399        /*
104400        %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
104401            %put 'OPENING TABLE';
104402        %end;
104403        %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
104404            %put 'CLOSE TABLE';
104405        %end;
104406        */
104407     %mend main;
104408     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
104410    +/* Initialize property macro variables */
104411    +%macro SetProperties;
104412    +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
104413    +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
104414    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
104415    +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
104416    +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
104417    +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
104418    +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
104419    +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
104420    +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
104421    +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
104422    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
104423    +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
104424    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
104426    +%mend SetProperties;
104428    +%Macro MakeDummyVariables(indata=,
104429    +                          outvar=,
104430    +                          outdata=,
104431    +                          fileref=,
104432    +                          recreatecmeta=N, /* optional */
104433    +                          incmeta=,     /* optional */
104434    +                          outcmeta=,    /* optional */
104435    +                          ndummyvars=_ndummyvars
104436    +                          );
104437    +    %global &ndummyvars;
104439    +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
104440    +       class
104441    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
104442    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
104443    +    ;
104444    +    run;
104445    +    %let &ndummyvars = 0;
104446    +    data _null_;
104447    +    %let dsid = %sysfunc(open(work._classout));
104448    +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
104449    +    %let dsid = %sysfunc(close(&dsid));
104450    +    run;
104452    +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
104453    +       input
104454    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
104455    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
104456    +        / level=nominal stdize=no;
104457    +       make outvar = &outvar;
104458    +       score data = &indata out =&outdata;
104459    +       code  file=  "&fileref";
104460    +    run;
104461    +    %if &recreatecmeta eq Y %then %do;
104462    +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
104463    +    data _tmpds;
104464    +        set _tmpds;
104465    +           ROLE = 'INPUT';
104466    +           LEVEL = 'INTERVAL';
104467    +           CREATOR='DMZIP';
104468    +           if NAME = '_TYPE_' then delete;
104469    +    run;
104470    +    data &outcmeta;
104471    +         set &incmeta _tmpds;
104472    +    run;
104473    +    %end;
104474    +    proc datasets lib=work nolist;
104475    +      delete  _dmdbdat _dmdbcat _classout
104476    +    %if &recreatecmeta eq Y %then %do;
104477    +    _tmpds
104478    +    %end;
104479    +    ;
104480    +    quit;
104481    +%Mend MakeDummyVariables;
104483    +/*--- Determine Optimal Number of Cluster ----
104484    +%macro FindClusNum(statds=, groupds=, minvariation=);
104485    +   %global optnclus;
104486    +   data varclus_tmp(drop=_NAME_);
104487    +      set &statDs;
104488    +      where _type_ ='PROPOR';
104489    +   run;
104490    +   proc sort data=varclus_tmp;
104491    +      by _NCL_;
104492    +   run;
104493    +   proc transpose data=varclus_tmp out=varclus_tmp;
104494    +      by _NCL_;
104495    +      var %EM_INTERVAL_INPUT
104496    +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
104497    +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
104498    +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
104499    +          %do i = 2 %to &nvar;
104500    +          %let varname = %sysfunc(varname(&dsid, &i));
104501    +          &varname
104502    +          %end;
104503    +      %end;
104504    +   ;
104505    +   run;
104507    +   %if &minVariation eq %then %do;
104508    +       %let minVariation = &EM_PROPERTY_MINVARIATION;
104509    +   %end;
104510    +   %if ^(0<&minVariation<100) %then %do;
104511    +       %let minVariation = 90;
104512    +   %end;
104514    +   data _null_;
104515    +      set varclus_tmp end=eof;
104516    +      by _NCL_;
104517    +      retain flag 0;
104518    +      if first._ncl_ then flag=0;
104519    +      if .<col1 < &minVariation then flag=1;
104520    +      if last._ncl_ and ^flag then do;
104521    +         call symput('OPTNCL', _ncl_);
104522    +         stop;
104523    +      end;
104524    +     if eof then call symput('OPTNCL', _ncl_);
104525    +   run;
104527    +   %let optnclus = &OPTNCL;
104529    +   data varclus_tmp(drop=_NCL_ _NAME_);
104530    +      set &statDs;
104531    +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
104532    +   run;
104533    +   proc sort data=varclus_tmp;
104534    +      by _TYPE_;
104535    +   run;
104536    +   proc transpose data=varclus_tmp out=varclus_tmp;
104537    +      by _TYPE_;
104538    +   run;
104539    +   proc sort data=varclus_tmp;
104540    +      by _name_ _type_;
104541    +   run;
104543    +  proc transpose data=varclus_tmp out=&groupds;
104544    +      by _NAME_;
104545    +   run;
104546    +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
104547    +      by Cluster descending Rsquare;
104548    +      where Cluster ne 0;
104549    +   run;
104550    +   proc datasets lib=work nolist mt=(DATA VIEW);
104551    +      delete varclus_tmp;
104552    +   run;
104553    +   quit;
104554    +%mend findClusNum;
104555    +*/
104557    +%macro getNclusfromTrain(inoutstat=, nc=);
104558    +%global &nc;
104559    +data _null_;
104560    +    set &inoutstat end=eof;
104561    +    if eof then do;
104562    +    call symput("&nc", _ncl_);
104563    +    end;
104564    +run;
104565    +%mend  getNclusfromTrain;
104567    +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
104569    +     *--- Build Code to Modify Metadata ---*;
104570    +     filename X "&deltacodefile";
104571    +     data _null_;
104572    +        FILE X;
104573    +        set &groupds end=eof;
104574    +        /*by Cluster;*/
104575    +         if _N_=1 then do;
104576    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
104577    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
104578    +           %end;
104579    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
104580    +           put "if upcase(strip(NAME)) in (";
104581    +        end;
104582    +        if Strip(upcase(Selected)) eq 'YES' then do;
104583    +           string = '"'!!trim(left(VARIABLE))!!'"';
104584    +           put string;
104585    +        end;
104586    +        if eof then do;
104587    +           put ') then ROLE="INPUT";';
104588    +           put 'else ROLE="REJECTED";';
104589    +           put 'end;';
104591    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
104592    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
104593    +           %end;
104594    +        end;
104595    +     run;
104596    +     quit;
104598    +     filename X;
104600    +     quit;
104601    +%mend MakeDeltaCode;
104603    +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
104604    +    %if ^%sysfunc(exist(&statds)) %then %do;
104605    +         %goto doendc;
104606    +    %end;
104608    +    data &corrds(drop=_TYPE_ _NCL_) ;
104609    +       set &statds;
104610    +       where _type_ eq 'CORR' ;
104611    +    run ;
104612    +    proc sort data=&corrds;
104613    +       by _NAME_ ;
104614    +    run ;
104615    +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
104616    +      BY _NAME_ ;
104617    +    run ;
104618    +    data &corrplotds;
104619    +       length _Y_ $100;
104620    +       set &corrplotDs;
104621    +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
104622    +    run ;
104623    +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
104624    +       set &corrplotds;
104625    +       where _LABEL_ ne '' ;
104626    +       keep _TMP_ _LABEL_ ;
104627    +    run ;
104628    +    data _null_;
104629    +       nobs=0;
104630    +       dsid = open('varclus_match');
104631    +       if dsid then do;
104632    +          nobs = attrn(dsid, 'NOBS');
104633    +          dsid = close(dsid);
104634    +       end;
104635    +       call symput ('CORR_NOBS', nobs);
104636    +    run;
104637    +    %if &corr_nobs %then %do;
104638    +        proc sort data=varclus_match;
104639    +           by _name_;
104640    +        run ;
104641    +        proc sort data=&corrplotds;
104642    +           by _name_;
104643    +        run ;
104644    +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
104645    +           merge varclus_match &corrplotds;
104646    +           by _NAME_ ;
104647    +           if _X_ eq '' then _X_=_NAME_ ;
104648    +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
104649    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
104650    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
104652    +       run ;
104653    +    %end;
104654    +    %else %do;
104655    +        proc sort data=&corrplotds;
104656    +           by _name_;
104657    +        run ;
104658    +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
104659    +           set &corrplotds;
104660    +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
104661    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
104662    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
104664    +        run ;
104665    +    %end;
104666    +    proc sort data=&corrplotds;
104667    +       by _X_ _Y_;
104668    +    run ;
104669    +    proc datasets lib=work nolist mt=(DATA VIEW);
104670    +       delete varclus_match;
104671    +    run;
104672    +    quit;
104674    +%doendc:
104676    +%mend MakeVarClusCorrData;
104678    +%macro MakeStatPlotData(statds= , outstatplotds=);
104679    +   %if %sysfunc(exist(&statds)) %then %do;
104681    +       data varclus_tmp(drop=_NAME_ _NCL_) ;
104682    +          set &statDs;
104683    +          where _type_ in('MEAN', 'STD', 'N');
104684    +       run ;
104685    +       proc transpose data=varclus_tmp out=&outstatplotds;
104686    +          id _TYPE_ ;
104687    +       run ;
104688    +       data &outstatplotds;
104689    +          set &outstatplotds(obs=1000);
104690    +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
104691    +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
104692    +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
104693    +          else SCALEDSTD= STD ;
104694    +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
104695    +       run ;
104696    +       proc sort data=&outstatplotds;
104697    +          by descending SCALEDSTD ;
104698    +       run ;
104699    +       proc datasets lib=work nolist mt=(DATA VIEW);
104700    +          delete varclus_tmp;
104701    +       run;
104702    +       quit;
104703    +    %end;
104705    +%mend MakeStatPlotData;
104708    +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
104709    +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
104710    +    data &EM_USER_OUTSTATSCORE;
104711    +          set &indata;
104712    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
104713    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
104714    +          if _TYPE_ = 'STD' then _NAME_='STD';
104715    +          DROP _TYPE_ _NCL_;
104716    +     run;
104718    +     filename _file_  "&fileRef";
104720    +     data _null_;
104721    +        FILE _file_ MOD;
104722    +        put ' ';
104723    +        put '/*-------------------------------------------------*/';
104724    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
104725    +        put '/*-------------------------------------------------*/';
104726    +        put ' ';
104727    +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
104729    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
104730    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
104732    +        %let k = 1;
104733    +        %do %while(^%sysfunc(fetch(&dsid)));
104734    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104735    +                %if &k > 2 %then %do;
104736    +                 %let cn = %eval(&k-2);
104737    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
104738    +                %end;
104739    +                %let k = %eval(&k+1);
104740    +        %end;
104742    +        %let rc = %sysfunc(rewind(&dsid));
104744    +        %do i= 2 %to &nvar;
104745    +            %let _varname =  %sysfunc(varname(&dsid, &i));
104746    +            %do %while(^%sysfunc(fetch(&dsid)));
104747    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104748    +                %if &_name = MEAN %then
104749    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
104750    +                %else %if &_name = STD %then
104751    +                %let _std = %sysfunc(getvarn(&dsid, &i));
104752    +                %else %do;
104753    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
104754    +                      %let abscoeff = %sysfunc(abs(&coeff));
104755    +                          %if &abscoeff >  0 %then %do;
104756    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
104757    +                           %end;
104758    +                 %end;
104759    +             %end;
104760    +             %let rc = %sysfunc(rewind(&dsid));
104761    +         %end;
104763    +        %let dsid= %sysfunc(close(&dsid));
104764    +       run;
104765    +%mend CreateScoreCode;
104769    +/*----------------------------------------------------------
104770    +    Instead of using %MakeRSquareData,
104771    +    %MakeVarClusResultTable at macro2.source is used
104772    + +----------------------------------------------------------*/
104775    +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
104777    +/* modifying  from ods rsquare = data */
104779    +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
104780    +    Length Cluster $16;
104781    +    length Variable $32;
104782    +    Length VariableLabel $64;
104783    +    set &indata; retain CurrentCluster;
104784    +    if NumberOfClusters ^= &ncluster then delete;
104785    +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
104786    +    CurrentCluster = Cluster;
104787    +   run;
104788    +proc sort data =&outdata ;
104789    +     by Cluster RsquareRatio;
104790    +run;
104791    +data _tmprsq(drop=index);
104792    +     set &outdata; by Cluster;
104793    +     if first.Cluster then do;
104794    +     index = strip(scan(Cluster,2 ));
104795    +     Variable = "Clus"||index;
104796    +     VariableLabel = "Cluster Component "||index;
104797    +     OwnCluster = 1;
104798    +     NextClosest = .;
104799    +     RsquareRatio = 0;
104800    +     output;
104801    +     end;
104802    +run;
104804    +proc sort data = _tmprsq ;
104805    +     by Cluster RsquareRatio;
104806    +run;
104807    +data &outdata;
104808    +     set &outdata _tmprsq;
104809    +by Cluster;
104810    +run;
104813    +/* Just create the Selected variable with all YES */
104815    +data &outdata;
104816    +    set &outdata; by cluster;
104817    +    length Selected $8;
104818    +    Selected = 'YES';
104819    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
104820    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
104821    +    rename OwnCluster = RSqWithClusterComp;
104822    +    rename NextClosest = RSqWithNextClusComp;
104823    +run;
104826    +/* Selected = Y/N will be done %score section -----
104828    +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
104829    +data &outdata;
104830    +    set &outdata; by cluster;
104831    +    length Selected $8;
104832    +    if first.Cluster then Selected = 'YES';
104833    +    else Selected = 'NO';
104834    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
104835    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
104836    +    rename OwnCluster = RSqWithClusterComp;
104837    +    rename NextClosest = RSqWithNextClusComp;
104838    +run;
104839    +%end;
104840    +%else %do;
104841    +data &outdata;
104842    +    set &outdata; by cluster;
104843    +    if last.Cluster then Selected = 'YES';
104844    +    else Selected = 'NO';
104845    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
104846    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
104847    +    rename OwnCluster = RSqWithClusterComp;
104848    +    rename NextClosest = RSqWithNextClusComp;
104849    +run;
104850    +%end;
104851    +---------------------------------------------------------------*/
104853    +%if %sysfunc(exist(&inClusRSquare)) %then %do;
104854    +/* to calculate NextClosestClusRsq */
104855    +proc transpose data = &inClusRSquare  out=_clusRsq;
104856    +      by cluster;
104857    +      run;
104858    +data _clusRsq;
104859    +     set _clusRsq;
104860    +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
104861    +run;
104863    +proc sort data=_clusRsq;
104864    +    by cluster col1;
104865    +    run;
104866    +data _clusRsq(drop=_NAME_ _LABEL_);
104867    +     set _clusRsq; by cluster;
104868    +     if last.Cluster then output;
104869    +     label  COL1 = 'R-Sqaure with Next Cluster Component';
104870    +     rename COL1 = RSqWithNextClusComp;
104871    +     rename Cluster = Variable;
104872    +     label  Cluster = "Variable";
104873    +run;
104875    +proc sort data =&outdata;
104876    +     by Variable;
104877    +run;
104878    +data &outdata;
104879    +    merge &outdata _clusRsq;
104880    +    by Variable;
104881    +run;
104882    +proc sort data =&outdata;
104883    +by Cluster  RsquareRatio;
104884    +run;
104885    +quit;
104886    +%end;
104888    +proc datasets lib = work nolist;
104889    +     delete _tmprsq _clusRsq;
104890    +     run;
104891    +quit;
104893    +%mend MakeRSquareData;
104896    +/*-------------------------------------------------------------------------*/
104900    +%macro ModifyCorr(indata=,
104901    +                  outdata=,
104902    +                  rsquare = Y
104903    +                  );
104904    +    data corr_tmp;
104905    +        set &indata;
104906    +    run;
104907    +     proc sql;
104908    +           update &indata
104909    +           set
104910    +     %let dsid = %sysfunc(open(work.corr_tmp));
104911    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
104912    +          %do i = 4 %to &nvar;
104913    +          %let _name = %sysfunc(varname(&dsid, &i));
104914    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
104915    +            %else  %let _name_md = &_name;
104916    +            %if &i < &nvar %then %do;
104917    +               &_name = 1- &_name_md ,
104918    +            %end;
104919    +            %else %do;
104920    +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
104921    +            %end;
104922    +          %end;
104923    +      %let dsid= %sysfunc(close(&dsid));
104925    +      select * from &indata;
104926    +      run;
104927    +      proc datasets lib = work nolist;
104928    +           delete corr_tmp;
104929    +      run;
104930    +      quit;
104932    + %mend ModifyCorr;
104934    + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
104935    +    data &outdata(drop= _NCL_  _TYPE_);
104936    +       set &indata;
104937    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
104938    +       rename _NAME_ = Cluster;
104939    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
104940    +    run;
104941    +    %if &RSquare eq Y %then %do;
104942    +     data corr_tmp;
104943    +        set &outdata;
104944    +     run;
104946    +     data &outdata(drop=i);
104947    +          set &outdata;
104948    +          %let dsid = %sysfunc(open(work.corr_tmp));
104949    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
104950    +          %do i = 2 %to &nvar;
104951    +            %let _name = %sysfunc(varname(&dsid, &i));
104952    +            %let _name_md = &_name.**2;
104953    +                &_name = &_name_md;
104954    +          %end;
104955    +      %let dsid= %sysfunc(close(&dsid));
104956    +      run;
104957    +      proc datasets lib = work nolist;
104958    +           delete corr_tmp;
104959    +      run;
104961    +    %end;
104962    +     quit;
104963    +%mend MakeClusStructCorrData;
104965    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
104966    +    data &outdata(drop= _NCL_  _TYPE_);
104967    +       set &indata;
104968    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
104969    +       rename _NAME_ = Cluster;
104970    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
104971    +    run;
104972    +    data corr_tmp;
104973    +        set &outdata;
104974    +    run;
104976    +    %let dsid = %sysfunc(open(work.corr_tmp));
104977    +    %let nclus2= %eval(&ncluster+1);
104978    +    data &outdata;
104979    +         set &outdata;
104980    +          %do i = 2 %to &nclus2;
104981    +          %let i_1 = %eval(&i-1);
104982    +            %let _name = %sysfunc(varname(&dsid, &i));
104983    +            %let _newName = Clus&i_1;
104984    +                rename &_name = &_newName; ;
104985    +                *label &_name ="Cluster &i_1";
104986    +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
104987    +          %end;
104988    +          keep Cluster
104989    +          %do i = 2 %to &nclus2;
104990    +                %let _name = %sysfunc(varname(&dsid, &i));
104991    +                &_name
104992    +          %end;
104993    +          ;
104994    +    %let dsid= %sysfunc(close(&dsid));
104995    +     run;
104996    +     quit;
104998    +    %if &RSquare eq Y %then %do;
105000    +       data corr_tmp;
105001    +        set &outdata;
105002    +     run;
105004    +     data &outdata(drop=i);
105005    +          set &outdata;
105006    +          %let dsid = %sysfunc(open(work.corr_tmp));
105007    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105008    +          %do i = 2 %to &nvar;
105009    +            %let _name = %sysfunc(varname(&dsid, &i));
105010    +            %let _name_md = &_name.**2;
105011    +                &_name = &_name_md;
105012    +          %end;
105013    +      %let dsid= %sysfunc(close(&dsid));
105014    +      run;
105015    +    %end;
105017    +    %if &makeplotds eq Y %then %do;
105018    +     proc transpose data = &outdata
105019    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
105020    +          by cluster;
105021    +     run;
105022    +     data &plotds;
105023    +          set  &plotds;
105024    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105025    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105026    +     run;
105027    +     %end;
105028    +     proc datasets lib = work nolist;
105029    +           delete corr_tmp;
105030    +     run;
105031    +     quit;
105032    +%mend MakeInterClusCorrData;
105035    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
105037    +data &outlink(drop = Selected);
105038    +     set &indata;
105039    +     LINKID = _N_;
105040    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
105041    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
105042    +run;
105043    +data &outnode(keep=NODEID TYPE LABEL);
105044    +    set &indata;
105045    +    length TYPE $16;
105046    +    rename Variable = NODEID;
105047    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
105048    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
105049    +    then  TYPE = "CLUSTER";
105050    +    else  TYPE="VARIABLE";
105051    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
105052    +run;
105053    +quit;
105054    +%mend MakeClusConstellData;
105058    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
105060    +data &outlink(drop = Selected);
105061    +     set &indata;
105062    +     LINKID = _N_;
105063    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
105064    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
105065    +run;
105066    +data &outnode(keep=NODEID TYPE LABEL);
105067    +    set &indata;
105068    +    length TYPE $16;
105069    +    rename Variable = NODEID;
105070    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
105071    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
105072    +    then  TYPE = "CLUSTER";
105073    +    else  TYPE="VARIABLE";
105074    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
105075    +run;
105076    +quit;
105077    +%mend MakeClusConstellData;
105080    +/*--- This will work only when inds is not a view data -------
105082    +%macro getNVarNObs(inds=, nvar=, nobs=);
105084    +    %global &nvar;
105085    +    %global &nobs;
105086    +    data _null_;
105087    +         dsid = open("&inds");
105088    +         nv = attrn(dsid, 'NVAR');
105089    +         no = attrn(dsid, 'NOBS');
105090    +         dsid = close(dsid);
105091    +         call symput("&nvar", nv);
105092    +         call symput("&nobs", no);
105093    +    run;
105094    +    quit;
105095    +%mend  getNVarNObs;
105097    ++---------------------------------------------------------------*/
105100    +%macro getNVar(inds=, nvar=);
105101    +    %global &nvar;
105102    +    data _null_;
105103    +         dsid = open("&inds");
105104    +         nv = attrn(dsid, 'NVAR');
105105    +         dsid = close(dsid);
105106    +         call symput("&nvar", nv);
105107    +    run;
105108    +    quit;
105109    +%mend  getNVar;
105113    +%macro getNObs(inds=, nobs=);
105114    +    %global &nobs;
105115    +    data _null_;
105116    +        set &inds end=eof;
105117    +        if eof then call symput("&nobs", _N_);
105118    +    run;
105119    +    quit;
105120    +%mend  getNObs;
105122    +%Macro CreateVarclusMeta(trainnum=);
105123    +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
105124    +    data &EM_USER_VARCLUSMETA;
105125    +         length TrainNum 8.;
105126    +         length NewTrain $8;
105127    +         length NGCluster 8.;
105128    +         length ExportedComp $16;
105129    +         length HideVariable $8;
105130    +         TrainNum = &trainnum;
105131    +         NewTrain = "Y";
105132    +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
105133    +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
105134    +         NGCluster = 0; /* zero means no twostage */
105135    +   run;
105136    +   quit;
105137    +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
105139    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
105140    +    data &outdata(drop= _NCL_  _TYPE_);
105141    +       set &indata;
105142    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
105143    +       %if &globalclusid ne %then %do;
105144    +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
105145    +       rename _NAME_ = Cluster;
105146    +       %end;
105147    +       %else %do;
105148    +        _NAME_ = upcase(_NAME_);
105149    +       rename _NAME_ = Cluster;
105150    +       %end;
105151    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
105152    +    run;
105153    +    data corr_tmp;
105154    +        set &outdata;
105155    +    run;
105157    +    %let dsid = %sysfunc(open(work.corr_tmp));
105158    +    %let nclus2= %eval(&ncluster+1);
105159    +    data &outdata;
105160    +         set &outdata;
105161    +          %do i = 2 %to &nclus2;
105162    +          %let i_1 = %eval(&i-1);
105163    +            %let _name = %sysfunc(varname(&dsid, &i));
105164    +            %if &globalclusid ne %then
105165    +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
105166    +                     rename &_name = &_newName;
105167    +                     *label &_name ="GC &globalclusid : Cluster &i_1";
105168    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
105169    +                %end;
105170    +            %else
105171    +                %do; %let _newName = CLUS&i_1;
105172    +                     rename &_name = &_newName;
105173    +                     *label &_name ="Cluster &i_1";
105174    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
105175    +                %end;
105176    +          %end;
105177    +          keep Cluster
105178    +          %do i = 2 %to &nclus2;
105179    +                %let _name = %sysfunc(varname(&dsid, &i));
105180    +                &_name
105181    +          %end;
105182    +          ;
105183    +    %let dsid= %sysfunc(close(&dsid));
105184    +     run;
105185    +     quit;
105187    +    %if &RSquare eq Y %then %do;
105189    +       data corr_tmp;
105190    +        set &outdata;
105191    +     run;
105193    +     data &outdata;
105194    +          set &outdata;
105195    +          %let dsid = %sysfunc(open(work.corr_tmp));
105196    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105197    +          %do i = 2 %to &nvar;
105198    +            %let _name = %sysfunc(varname(&dsid, &i));
105199    +            %let _name_md = &_name.**2;
105200    +                &_name = &_name_md;
105201    +          %end;
105202    +      %let dsid= %sysfunc(close(&dsid));
105203    +      run;
105204    +    %end;
105206    +    %if &makeplotds eq Y %then %do;
105207    +     proc transpose data = &outdata
105208    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
105209    +          by cluster;
105210    +     run;
105211    +     data &plotds;
105212    +          set  &plotds;
105213    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105214    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105215    +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
105216    +     run;
105217    +     %end;
105218    +     proc datasets lib = work nolist;
105219    +           delete corr_tmp;
105220    +     run;
105221    +     quit;
105222    +%mend MakeInterClusCorrData;
105224    +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
105225    +    data _tmpds(drop= _NCL_);
105226    +       set &indata;
105227    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
105228    +       %if &globalclusid ne %then %do;
105229    +           _NAME_ = "GC&globalclusid.";
105230    +       rename _NAME_ = Cluster;
105231    +       %end;
105232    +       %else %do;
105233    +        _NAME_ = "CLUS";
105234    +        rename _NAME_ = Cluster;
105235    +       %end;
105236    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
105237    +    run;
105238    +    proc transpose data =_tmpds out =&outdata;
105239    +    run;
105241    +    data &outdata(drop=COL1);
105242    +        %if &globalclusid ne %then %do;
105243    +        length GCluster $16;
105244    +        %end;
105245    +        length Cluster $32;
105246    +        length _NAME_ $32;
105247    +         set &outdata;
105248    +         _NAME_ = upcase(_NAME_);
105249    +         rename _NAME_=Variable;
105250    +         *label _NAME_="Variable";
105251    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105252    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105253    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105255    +         %if &globalclusid ne %then %do;
105256    +          GCluster = "GC&globalclusid";
105257    +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
105258    +         %end;
105259    +         %else %do;
105260    +         Cluster = "CLUS"||strip(COL1);
105261    +        %end;
105262    +         rename COL2 = RSqWithOwnClusComp;
105263    +         *label COL2 = "R-Square With Own Cluster Component";
105264    +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
105266    +   run;
105267    +   proc sort data =&outdata;
105268    +        by Cluster RSqWithOwnClusComp;
105269    +   run;
105270    +   proc datasets lib = work nolist;
105271    +           delete _tmpds;
105272    +   run;
105273    +   quit;
105274    +%mend MakeOwnRSquare;
105276    +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
105277    +    data &outdata(drop= _NCL_  _TYPE_);
105278    +       %if &globalclusid ne %then %do;
105279    +        length GCluster $16;
105280    +        %end;
105281    +       set &indata;
105282    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
105283    +       %if &globalclusid ne %then %do;
105284    +         GCluster = "GC&globalclusid";
105285    +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
105286    +         rename _NAME_ = Cluster;
105287    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105288    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105290    +       %end;
105291    +       %else %do;
105292    +         _NAME_ = upcase(_NAME_);
105293    +         rename _NAME_ = Cluster;
105294    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105295    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105297    +       %end;
105298    +     run;
105299    +    %if &RSquare eq Y %then %do;
105300    +     data corr_tmp;
105301    +          set &outdata;
105302    +     run;
105303    +     %let istart = 2;
105304    +     %if &globalclusid ne %then %let istart = 3;
105305    +     data &outdata;
105306    +          set &outdata;
105307    +          %let dsid = %sysfunc(open(work.corr_tmp));
105308    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105309    +          %do i =&istart %to &nvar;
105310    +            %let _name = %sysfunc(varname(&dsid, &i));
105311    +            %let _name_md = &_name.**2;
105312    +                &_name = &_name_md;
105313    +          %end;
105314    +      %let dsid= %sysfunc(close(&dsid));
105315    +      run;
105316    +      proc datasets lib = work nolist;
105317    +           delete corr_tmp;
105318    +      run;
105319    +    %end;
105320    +     quit;
105321    +%mend MakeClusStructCorrData;
105323    +/*
105324    +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
105325    +*/
105327    +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
105329    +     /* The indata should be the outdata
105330    +        from %MakeClusStructCorrData(indata=, outdata=, ); */
105332    +     proc sort data =&indata out=_tmpclusRsq;
105333    +     by cluster;
105334    +     run;
105336    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
105337    +      by cluster;
105338    +     run;
105340    +     proc sort data=_tmpclusRsq;
105341    +        by _NAME_ COL1;
105342    +     run;
105344    +     data _tmpclusRsq;
105345    +         length _NAME_ $32;
105346    +         set _tmpclusRsq; by _NAME_;
105347    +          _NAME_ = upcase(_NAME_);
105348    +          %if &ncluster ne 1 %then %do;
105349    +             if last._NAME_ then delete;
105350    +          %end;
105351    +          %else %do;
105352    +             COL1 = 0;
105353    +          %end;
105354    +     run;
105355    +     /* need to sort again */
105356    +     proc sort data=_tmpclusRsq;
105357    +        by _NAME_ COL1;
105358    +     run;
105360    +     data &outdata;
105361    +         set _tmpclusRsq; by _NAME_;
105362    +         Cluster = upcase(Cluster);
105363    +         if last._NAME_ then output;
105364    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
105365    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
105366    +         rename COL1 = RSqWithNextClusComp;
105367    +         Cluster = upcase(Cluster);
105368    +         rename Cluster = ClosestCluster;
105369    +         *label  Cluster = "Next Closest Cluster";
105370    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
105371    +         rename _NAME_ = Variable;
105372    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105373    +    run;
105376    +    %if &globalclusid ne %then %do;
105377    +    data &outdata;
105378    +       length GCluster $16;
105379    +       set &outdata;
105380    +       GCluster = "GC&globalclusid";
105381    +       run;
105382    +    %end;
105383    +    proc datasets lib = work nolist;
105384    +           delete _tmpclusRsq;
105385    +    run;
105386    +    quit;
105387    +%mend FindNextClosestClusByVar;
105390    +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
105391    +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
105392    +     proc sort data =&indata out=_tmpclusRsq;
105393    +     by cluster;
105394    +     run;
105395    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
105396    +     by cluster;
105397    +     run;
105398    +     proc sort data=_tmpclusRsq;
105399    +        by _NAME_ col1;
105400    +     run;
105401    +     data _tmpclusRsq;
105402    +         length _NAME_ $32;
105403    +         set _tmpclusRsq; by _NAME_;
105404    +          _NAME_ = upcase(_NAME_);
105405    +          %if &ncluster ne 1 %then %do;
105406    +             if last._NAME_ then delete;
105407    +          %end;
105408    +          %else %do;
105409    +             COL1 = 0;
105410    +          %end;
105411    +     run;
105412    +     data &outdata;
105413    +         set _tmpclusRsq; by _NAME_;
105414    +         Cluster = upcase(Cluster);
105415    +         if last._NAME_ then output;
105416    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
105417    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
105418    +         rename COL1 = RSqWithNextClusComp;
105419    +         Cluster = upcase(Cluster);
105420    +         rename Cluster = ClosestCluster;
105421    +         *label  Cluster = "Next Closest Cluster";
105422    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
105423    +         rename _NAME_ = Variable;
105424    +         *label  _NAME_ = "Variable";
105425    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105427    +    run;
105428    +    %if &globalclusid ne %then %do;
105429    +    data &outdata;
105430    +       length GCluster $16;
105431    +       set &outdata;
105432    +       GCluster = "GC&globalclusid";
105433    +       run;
105434    +    %end;
105436    +    proc datasets lib = work nolist;
105437    +           delete _tmpclusRsq;
105438    +    run;
105440    +    quit;
105441    +%mend FindNextClosestClusByCluster;
105443    +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
105444    +/*----
105445    +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
105446    +-----------*/
105448    +proc sort data =&indata1;
105449    +    by Variable;
105450    +run;
105451    +proc sort data =&indata2;
105452    +    by Variable;
105453    +run;
105454    +data &outdata;
105455    +    merge &indata1 &indata2;
105456    +    by Variable;
105457    +    length Type $16;
105458    +    Type = 'Variable';
105459    +    *label Type ='Type';
105460    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
105461    +run;
105464    +data &indata3;
105465    +    set  &indata3 ;
105466    +    length RSqWithOwnClusComp 8.;
105467    +    Cluster = Variable;
105468    +    RSqWithOwnClusComp = 1;
105469    +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
105470    +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
105471    +    length Type $16;
105472    +    Type = 'ClusterComp';
105473    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
105475    +;
105476    +run;
105478    +proc sort data=&outdata;
105479    +    by Cluster;
105480    +run;
105481    +proc sort data =&indata3;
105482    +    by Cluster;
105483    +run;
105485    +data &outdata;
105486    +     set &outdata &indata3;
105487    +     by Cluster;
105488    +run;
105491    +/* Create the Selected variable with all YES */
105493    +data &outdata;
105494    +     set &outdata;
105495    +     length RsqRatio 8.;
105496    +     length Selected $8;
105497    +     *label RSqRatio = "1-R**2 Ratio";
105498    +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
105499    +     *label Selected = "Variable Selected";
105500    +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
105501    +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
105502    +     Selected ='YES';
105503    +     rename _LABEL_ = Label;
105504    +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
105505    +run;
105508    +/*----  Selected = Y/N will be assigened at the %score                   -------+
105509    +        Just create the Selected variable with all YES at the step above
105510    + +------------------------------------------------------------------------------+
105512    +proc sort data=&outdata;
105513    +    by Cluster RsqRatio;
105514    +run;
105516    +%if &selectedcomp eq CLUSTERCOMP %then %do;
105517    +data &outdata;
105518    +     set &outdata; by Cluster;
105519    +     length Selected $8;
105520    +     label Selected = "Variable Selected";
105521    +     if  first.Cluster then Selected ='Yes';
105522    +     else Selected = 'No';
105523    +    run;
105524    +%end;
105525    +%else %do;
105526    +data &outdata(drop = _var _varchange);
105527    +     set &outdata; retain _var 0; by Cluster;
105528    +     length Selected $8;
105529    +     label Selected = "Variable Selected";
105530    +     if first.Cluster then  _varchange = 0;
105531    +     else _varchange =1;
105532    +     if _var ne _varchange then  Selected  = 'Yes';
105533    +     else Selected = 'No';
105534    +     if last.cluster then  _var = 0;
105535    +     else _var = _varchange;
105536    +run;
105537    +%end;
105539    +--------------------------------------------------------------*/
105541    +quit;
105542    +%mend MakeVarClusResultTable;
105544    +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
105545    +     proc sort data =&indata;
105546    +        by cluster;
105547    +     run;
105548    +     proc transpose data =&indata
105549    +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
105550    +          by cluster;
105551    +     run;
105552    +     data &outdata;
105553    +          set  &outdata;
105554    +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105555    +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105556    +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
105557    +     run;
105558    +     %if &globalclusid ne %then %do;
105559    +     data &outdata;
105560    +          Length GCluster $16;
105561    +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105562    +          set  &outdata;
105563    +          GCluster ="GC&globalclusid.";
105564    +          run;
105565    +     %end;
105567    +%Mend MakePlotDataFromCorrTable;
105570    +%macro MakeCorrelation(indata=,
105571    +                       outstat=_tmpoutstat,
105572    +                       corrmatrix=N,
105573    +                       outcorr=_tmpoutcorr,
105574    +                       includeclassvar=N,
105575    +                       target=,
105576    +                       freq=,
105577    +                       weight=);
105578    +   %if &target eq  %then %do;
105580    +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
105581    +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
105582    +       %if &includeclassvar eq Y %then %do;
105583    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
105584    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105585    +          %do i = 2 %to &nvar;
105586    +          %let varname = %sysfunc(varname(&dsid, &i));
105587    +          &varname
105588    +          %end;
105589    +       %end;
105590    +       ;
105591    +      %if &freq ne  %then %do;
105592    +          freq &freq;
105593    +      %end;
105594    +      %if &weight ne  %then %do;
105595    +          weight &weight;
105596    +      %end;
105598    +      run;
105599    +      %if &corrmatrix eq Y %then %do;
105600    +      data  &outcorr (drop = _NCL_ _TYPE_);
105601    +           set  &outstat ;
105602    +           if _TYPE_ ='CORR' then output;
105603    +      run;
105604    +      %end;
105605    +    %end;
105606    +    %else %do;
105607    +       proc corr data=&indata outp=&outstat noprint;
105608    +            var
105609    +       %let dsid = %sysfunc(open(&indata));
105610    +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
105611    +          %do i = 1 %to &nvar;
105612    +              %let _name = %sysfunc(varname(&dsid, &i));
105613    +              %if &_name ne &target %then;
105614    +              &_name
105615    +           %end;
105616    +        %let dsid= %sysfunc(close(&dsid));
105617    +        ;
105618    +        with &target;
105619    +        run;
105620    +    %end;
105621    +    quit;
105622    +%mend MakeCorrelation;
105625    +%macro MakeCorrelationDistance(indata=,
105626    +                               outdata=,
105627    +                               rsquare = N
105628    +                               );
105629    +    data corr_tmp;
105630    +        set &indata;
105631    +        if _N_ = 1 then do;
105632    +           output;
105633    +           stop;
105634    +         end;
105635    +    run;
105636    +    %if &outdata ne  %then %let  _outdata = &outdata;
105637    +    %else %let _outdata = &indata;
105639    +    data &_outdata;
105640    +         set &indata;
105642    +         %let dsid = %sysfunc(open(work.corr_tmp));
105643    +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
105644    +          %do i = 2 %to &nvar;
105645    +              %let _name = %sysfunc(varname(&dsid, &i));
105646    +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
105647    +              %else  %let _name_md = &_name;
105648    +              &_name = 1- &_name_md;
105649    +          %end;
105650    +      %let dsid= %sysfunc(close(&dsid));
105651    +      run;
105652    +      proc datasets lib = work nolist;
105653    +           delete corr_tmp;
105654    +      run;
105655    +      quit;
105656    +  %mend MakeCorrelationDistance;
105659    +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
105660    +                                   rsquare = N
105661    +                                   );
105662    +    data corr_tmp;
105663    +        set &indata;
105664    +    run;
105665    +    proc sql noprint;
105666    +           update &indata
105667    +           set
105668    +     %let dsid = %sysfunc(open(work.corr_tmp));
105669    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
105670    +          %do i = 4 %to &nvar;
105671    +          %let _name = %sysfunc(varname(&dsid, &i));
105672    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
105673    +            %else  %let _name_md = &_name;
105674    +            %if &i < &nvar %then %do;
105675    +               &_name = 1- &_name_md ,
105676    +            %end;
105677    +            %else %do;
105678    +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
105679    +            %end;
105680    +          %end;
105681    +      %let dsid= %sysfunc(close(&dsid));
105683    +      select * from &indata;
105684    +      run;
105685    +     data &indata( drop = _NCL_);
105686    +           set &indata;
105687    +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
105688    +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
105689    +     run;
105690    +     data &indata(DROP = _NCL_);
105691    +           set &indata;
105692    +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
105693    +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
105694    +           rename _NAME_ = _VAR_;
105695    +     run;
105696    +     proc datasets lib = work nolist;
105697    +           delete corr_tmp;
105698    +     run;
105699    +     quit;
105700    + %mend UpdateOutStatCorrToDistance;
105703    +%macro HierClusWithCorr(indata= ,
105704    +                        ncluster=,
105705    +                        method = Ward,
105706    +                        outtree = _outtree,
105707    +                        idvar =_VAR_,
105708    +                        outdata=,
105709    +                        rescore = N,
105710    +                        newncluster=
105711    +                        );
105712    +      %global &newncluster;
105713    +      %if &rescore ne Y %then %do;
105714    +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
105715    +                   method=&method outtree=&outtree noprint;
105716    +           id &idvar;
105717    +      run;
105718    +      %end;
105719    +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
105720    +      run;
105721    +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
105722    +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
105723    +      run;
105724    +      data _outcontent;
105725    +          set _outcontent;
105726    +          if NAME in ('_TYPE_' , '_VAR_') then delete;
105727    +          index = 1;
105728    +          rename NAME = _NAME_;
105729    +      run;
105730    +      proc sort data=_outcontent;
105731    +          by _NAME_;
105732    +      run;
105733    +      proc sort data =&outdata;
105734    +           by _NAME_;
105735    +      run;
105736    +      data &outdata(drop=index);
105737    +          merge &outdata _outcontent;
105738    +          by _NAME_;
105739    +          if index = . then delete;
105740    +      run;
105741    +      /*-----------------------------------------------------------*/
105742    +      data &outdata;
105743    +           length CLUSNAME $16;
105744    +           set &outdata;
105745    +           if CLUSTER > &ncluster then delete;
105746    +           CLUSNAME='GC'||strip(CLUSTER);
105747    +           *label CLUSNAME = "Cluster Name";
105748    +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
105749    +           rename _NAME_ = VARIABLE ;
105750    +           *label _NAME_ = "Variable";
105751    +           *label CLUSTER = "Cluster";
105752    +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105753    +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105754    +      run;
105755    +      proc sort data=&outdata out=&outdata;
105756    +           by CLUSTER;
105757    +      run;
105758    +      proc means data =&outdata noprint;
105759    +           output out=_meanout;
105760    +      run;
105761    +      data _null_;
105762    +            set _meanout;
105763    +            if strip(_STAT_) eq 'MAX' then do;
105764    +            call symput("&newncluster", CLUSTER);
105765    +            stop;
105766    +            end;
105767    +      run;
105769    +      proc datasets lib = work nolist;
105770    +           delete _outcontent _meanout;
105771    +      run;
105772    +      quit;
105773    +%mend  HierClusWithCorr;
105775    +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
105777    +     data _tmpindata;
105778    +          set &indata;
105779    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
105780    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
105781    +          if _TYPE_ = 'STD' then _NAME_='STD';
105782    +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
105783    +          DROP _TYPE_ _NCL_;
105784    +     run;
105786    +     filename _file_  "&fileRef";
105788    +     data _null_;
105789    +        FILE _file_ MOD;
105790    +        put ' ';
105791    +        put "/*-------------------------------------------------*/";
105792    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
105793    +        put "/*-------------------------------------------------*/";
105794    +        put ' ';
105795    +        %let dsid = %sysfunc(open(work._tmpindata));
105797    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
105798    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
105799    +        %let k = 1;
105800    +        %do %while(^%sysfunc(fetch(&dsid)));
105801    +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
105802    +               %if &k > 2 %then %do;
105803    +                %let cn = %eval(&k-2);
105804    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
105805    +                %end;
105806    +                %let k = %eval(&k+1);
105808    +        %end;
105809    +        %let rc = %sysfunc(rewind(&dsid));
105811    +        %do j= 2 %to &nvar;
105812    +            %let _varname = %sysfunc(varname(&dsid, &j));
105813    +            %do %while(^%sysfunc(fetch(&dsid)));
105814    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
105815    +                %if &_name = MEAN %then
105816    +                %let _mean = %sysfunc(getvarn(&dsid, &j));
105817    +                %else %if &_name = STD %then
105818    +                %let _std = %sysfunc(getvarn(&dsid, &j));
105819    +                %else %do;
105820    +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
105821    +                      %let abscoeff = %sysfunc(abs(&coeff));
105822    +                          %if &abscoeff >  0 %then %do;
105823    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
105824    +                           %end;
105825    +                 %end;
105826    +             %end;
105827    +             %let rc = %sysfunc(rewind(&dsid));
105828    +         %end;
105830    +        %let dsid= %sysfunc(close(&dsid));
105832    +     run;
105834    +     filename _file_;
105835    +     proc datasets lib = work nolist;
105836    +           delete _tmpindata;
105837    +     run;
105838    +     quit;
105839    +%mend CreateScoreCode2;
105842    +%macro MakeDeltaCode2(groupds=,deltacodefile=);
105844    +     /*--- Build Code to Modify Metadata ---*/
105845    +     filename X "&deltacodefile";
105846    +     data _null_;
105847    +        FILE X;
105848    +        set &groupds end=eof;
105849    +        if _N_=1 then do;
105850    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
105851    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
105852    +           %end;
105853    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
105854    +           put "if upcase(strip(NAME)) in (";
105855    +        end;
105856    +        if Strip(upcase(Selected)) eq 'YES' then do;
105857    +           string = '"'!!trim(left(VARIABLE))!!'"';
105858    +           put string;
105859    +        end;
105860    +        if eof then do;
105861    +           put ') then ROLE="INPUT";';
105862    +           put 'else ROLE="REJECTED";';
105863    +           put 'end;';
105865    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
105866    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
105867    +           %end;
105868    +        end;
105869    +     run;
105870    +     quit;
105872    +     filename X;
105873    +     quit;
105874    +%mend MakeDeltaCode2;
105876    +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
105877    +  %global &ngc;
105878    +  data _null_;
105879    +  %if &indata ne %then %do;
105880    +      %let dsid = %sysfunc(open(&indata));
105881    +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
105882    +      %let dsid = %sysfunc(close(&dsid));
105883    +  %end;
105884    +  %else %do;
105885    +       %let nvar = %eval(&ninput+&ndummy); ;
105886    +  %end;
105887    +  %let numgc = %eval(&nvar/&div+2);
105888    +  %let &ngc = &numgc;
105889    +   run;
105890    +  quit;
105891    +%mend getInitialGClusterNumber;
105894    +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
105895    +data &outlink(drop = Selected);
105896    +     set &indata;
105897    +     LINKID = _N_;
105898    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
105899    +run;
105900    +data &outnode(keep=NODEID TYPE LABEL);
105901    +    set &indata;
105902    +    length TYPE $16;
105903    +    rename VARIABLE = NODEID;
105904    +    *label  CLUSNAME="Node ID";
105905    +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
105906    +    TYPE = "VARIABLE";
105907    +    *label TYPE = "Node Type";
105908    +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
105909    +    run;
105910    +data _tmp(keep=NODEID TYPE LABEL);
105911    +    set &indata;
105912    +    length TYPE $16;
105913    +    rename CLUSNAME = NODEID;
105914    +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
105915    +    TYPE = "GCLUSTER";
105916    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
105917    +    run;
105918    +proc sort data=_tmp;
105919    +    by NODEID;
105920    +run;
105921    +data _tmp;
105922    +    set _tmp; by NODEID;
105923    +    if first.NODEID then output;
105924    +run;
105925    +proc sort data=&outnode;
105926    +    by NODEID;
105927    +run;
105928    +data  &outnode;
105929    +    set _tmp &outnode;
105930    +run;
105931    +proc datasets lib = work nolist;
105932    +     delete _tmp;
105933    +run;
105934    +quit;
105935    +%mend MakeGobalConstellData;
105937    +/* Make contellation plot data among GCLUSTERS */
105939    +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
105941    +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
105942    +     set &indata;
105943    +     LINKID = _N_;
105944    +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
105945    +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
105946    +     end;
105947    +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
105948    +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
105949    +     end;
105950    +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
105951    +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
105952    +    end;
105953    +run;
105955    +data _tmp_outrsquare;
105956    +        set &inoutrsq;
105957    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
105958    +run;
105960    +proc freq data =_tmp_outrsquare noprint;
105961    +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
105962    +run;
105964    +data &outnode(keep=_NAME_ TYPE LABEL);
105965    +    set &outlink;
105966    +    length TYPE $16;
105967    +    length LABEL $100;
105968    +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
105970    +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
105971    +    TYPE = "GCLUSTER";
105972    +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
105973    +    end;
105974    +    else do;
105975    +    TYPE= "ROOT";
105976    +    LABEL= _NAME_;
105977    +    end;
105978    +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
105979    +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
105980    +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
105981    +    run;
105983    +proc sort data=&outnode;
105984    +     by _NAME_;
105985    +proc sort data=_tmp_GCLUSFREQ;
105986    +     by _NAME_;
105987    +run;
105989    +data  &outnode;
105990    +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
105991    +     if COUNT=. then COUNT=1;
105992    +run;
105994    +proc datasets lib = work nolist;
105995    +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
105996    +run;
105998    +quit;
105999    +%Mend MakeGClusterConstData;
106002    +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
106004    +    data _gscoretmpds;
106005    +          set &indata;
106006    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
106007    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
106008    +          if _TYPE_ = 'STD' then _NAME_='STD';
106009    +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
106010    +          DROP _TYPE_ _NCL_;
106011    +     run;
106013    +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
106014    +        GCluster Component &globalclusid ------ */
106016    +    filename _file_  "&fileref";
106018    +    data _null_;
106019    +        %if &globalclusid eq 1 %then %do;
106020    +          FILE _file_;
106021    +        %end;
106022    +        %else %do;
106023    +          FILE _file_ MOD;
106024    +        %end;
106026    +        %let dsid = %sysfunc(open(work._gscoretmpds));
106027    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
106028    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
106030    +        %let k = 1;
106031    +        %do %while(^%sysfunc(fetch(&dsid)));
106032    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
106033    +                %if &k > 2 %then %do;
106034    +                put "&_name = 0 ; ";
106035    +                %end;
106036    +                %let k = %eval(&k+1);
106037    +        %end;
106039    +        %let rc = %sysfunc(rewind(&dsid));
106040    +        %do i= 2 %to &nvar;
106041    +            %let _varname =  %sysfunc(varname(&dsid, &i));
106042    +            %do %while(^%sysfunc(fetch(&dsid)));
106043    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
106044    +                %if &_name = MEAN %then
106045    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
106046    +                %else %if &_name = STD %then
106047    +                %let _std = %sysfunc(getvarn(&dsid, &i));
106048    +                %else %do;
106049    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
106050    +                      %let abscoeff = %sysfunc(abs(&coeff));
106051    +                          %if &abscoeff >  0 %then %do;
106052    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
106053    +                           %end;
106054    +                 %end;
106055    +             %end;
106056    +             %let rc = %sysfunc(rewind(&dsid));
106058    +         %end;
106060    +        %let dsid= %sysfunc(close(&dsid));
106061    +       run;
106064    +       proc datasets lib=work nolist;
106065    +            delete _gscoretmpds;
106066    +       run;
106067    +      quit;
106069    +%mend CreateGClusterScoreCode;
106072    +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
106074    +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
106075    +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
106076    +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
106077    +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
106078    +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
106079    +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
106080    +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
106081    +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
106082    +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
106083    +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
106084    +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
106085    +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
106086    +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
106087    +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
106089    +   filename gsfile "&gscorecode";
106091    +   data &EM_USER_GSCORE;
106092    +             set &indata;
106093    +             %include  gsfile;
106094    +        keep
106095    +        %do i=1 %to &ngcluster;
106096    +         %let gcvarname = GC&i;
106097    +         &gcvarname
106098    +        %end;
106099    +     ;
106100    +   run;
106102    +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
106103    +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
106104    +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
106105    +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
106106    +    noprint  ;
106107    +     var
106108    +       %do i=1 %to &ngcluster;
106109    +         %let gcvarname = GC&i;
106110    +         &gcvarname
106111    +        %end;
106112    +   ;
106113    +   run;
106116    +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
106117    +   data &EM_USER_GSCORECORRPLOT ;
106118    +        set &EM_USER_GSCORECORRPLOT;
106119    +        rename _X_ = X;
106120    +        rename _Y_ = Y;
106121    +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
106122    +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
106123    +   run;
106125    +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
106127    +   data &EM_USER_GSCORETREE;
106128    +        length _NAME_ $32;
106129    +        length _LABEL_ $100;
106130    +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
106131    +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
106132    +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
106133    +        end;else do;
106134    +         _LABEL_ = _NAME_;
106135    +        end;
106136    +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
106138    +   run;
106140    +   quit;
106142    +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
106147    +%macro train;
106149    +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
106150    +   %include temp;
106151    +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
106152    +   %include temp;
106153    +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
106154    +   %include temp;
106155    +   filename temp;
106157    +   %let VARCLUS_MAXNUMOBS = 100000;
106158    +   %let VARCLUS_MAXNUMVAR = 200;
106159    +   %let trainnum = 0;
106160    +   %let error = 0;
106162    +   %if &EM_IMPORT_DATA eq %then %do;
106163    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106164    +       %let  error = 1;
106165    +       %goto endtrain;
106166    +   %end;
106168    +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
106169    +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106170    +        %let  error = 1;
106171    +        %goto endline;
106172    +    %end;
106174    +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
106175    +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
106176    +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
106177    +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
106178    +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
106179    +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
106181    +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
106182    +        %if  &_num_input_total < 2 %then %do;
106183    +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106184    +            %let error = 2;
106185    +            %goto endtrain;
106186    +        %end;
106187    +   %end;
106188    +   %else %do;
106189    +         %if  &_num_input_interval < 2 %then %do;
106190    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106191    +         %let error = 2;
106192    +         %goto endtrain;
106193    +         %end;
106194    +   %end;
106196    +   %em_checkerror();
106198    +   %if &EMEXCEPTIONSTRING ne %then %do;
106199    +       %goto endtrain;
106200    +   %end;
106202    +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
106204    +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
106205    +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
106206    +                             outvar=&EM_USER_OUTDUMMY,
106207    +                             outdata=_newtrainds,
106208    +                             fileref=&EM_FILE_EMFLOWSCORECODE);
106210    +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106211    +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
106212    +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106213    +                proc datasets lib=work nolist;
106214    +                delete  _newtrainds;
106215    +                run;
106216    +                quit;
106217    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
106218    +                %let error = 3;
106219    +               %goto endtrain;
106220    +            %end;
106221    +        %end;
106223    +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
106224    +             %getNVar(inds=_newtrainds, nvar=_nvar);
106226    +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
106227    +                %let trainnum = 2;
106228    +            %end;
106229    +            %else %do;
106230    +                %let trainnum = 1;
106231    +            %end;
106232    +        %end;
106233    +    %end;
106234    +    %else %do;
106236    +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106238    +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
106240    +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106242    +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
106243    +                  %let error = 3;
106244    +                 %goto endtrain;
106245    +            %end;
106246    +        %end;
106249    +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
106250    +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
106251    +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
106252    +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
106253    +                %let trainnum = 2;
106254    +            %end;
106255    +            %else %do;
106256    +                %let trainnum = 1;
106257    +            %end;
106258    +        %end;
106260    +   %end;
106262    +    %em_checkerror();
106264    +    %if &EMEXCEPTIONSTRING ne %then %do;
106265    +       %let error = 4;
106266    +       %goto endtrain;
106267    +    %end;
106269    +    %CreateVarclusMeta(trainnum=&trainnum);
106271    +    %if &error > 0 %then  %goto endtrain;
106273    +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
106275    +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
106276    +           %train1;
106277    +       %end;
106278    +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
106279    +           %train2;
106280    +       %end;
106282    +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
106283    +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
106284    +      %em_copyfile(infref=_in, outfref=_out);
106285    +      filename _in;
106286    +      filename _out;
106289    +   %endtrain:
106292    +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
106294    +%macro VarClus(indata=,
106295    +               outstat=,
106296    +               outtree=,
106297    +               vars=,
106298    +               freq=,
106299    +               weight=,
106300    +               includeclassvar=
106301    +               );
106303    +   %if &vars eq %then
106304    +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
106306    +       proc varclus data = &indata outstat= &outstat
106307    +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
106308    +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
106309    +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
106310    +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
106311    +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
106312    +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
106313    +       %end;
106315    +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
106316    +            maxeigen = &EM_PROPERTY_MAXEIGEN
106317    +       %end;
106319    +       %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
106320    +            proportion = &EM_PROPERTY_PROPORTION
106321    +       %end;
106322    +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
106323    +               summary
106324    +       %end;
106326    +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
106327    +           short
106328    +       %end;
106329    +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
106330    +           corr trace simple
106331    +       %end;
106332    +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
106333    +          noprint
106334    +       %end;
106335    +       outtree=&outtree
106336    +       ;
106337    +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
106339    +      %if &includeclassvar eq Y %then %do;
106340    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
106341    +          %if &dsid > 0 %then %do;
106342    +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
106343    +              %do i = 2 %to &nvar;
106344    +                  %let varname = %sysfunc(varname(&dsid, &i));
106345    +                   &varname
106346    +              %end;
106348    +          %end;
106349    +      %end;
106351    +      ;
106352    +      /*------------------------
106353    +      %if &freq ne  %then %do;
106354    +          freq &freq;
106355    +      %end;
106356    +      %if &weight ne  %then %do;
106357    +          weight &weight;
106358    +      %end;
106359    +      ----------------------------*/
106360    +      %if %EM_FREQ ne %then %do;
106361    +           Freq %EM_FREQ;
106362    +      %end;
106363    +      ;
106364    +    run;
106365    +    %endline:
106366    +    quit;
106367    +%mend VarClus;
106369    +%macro Train1;
106371    +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
106372    +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
106373    +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
106374    +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
106375    +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
106376    +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
106377    +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
106378    +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
106379    +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
106380    +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
106381    +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
106382    +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
106383    +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
106385    +   /*
106386    +     %let VARCLUS_MAXNUMOBS = 100;
106387    +     %let VARCLUS_MAXNUMVAR = 200;
106388    +   */
106390    +   /* Train
106392    +   %if &EM_IMPORT_DATA eq %then %do;
106393    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106394    +       %goto endtrain1;
106395    +   %end;
106397    +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
106398    +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106399    +        %goto endtrain1;
106400    +   %end;
106401    +   */
106402    +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
106403    +       /* moved this to pretrain ------------
106405    +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
106406    +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
106407    +                             outvar=&EM_USER_OUTDUMMY,
106408    +                             outdata=_newtrainds,
106409    +                             fileref=&EM_FILE_EMFLOWSCORECODE);
106411    +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106412    +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
106413    +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
106414    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
106415    +                %goto endtrain;
106416    +            %end;
106417    +        %end;
106419    +        +-------------------------------------*/
106421    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
106422    +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
106423    +          There is no _newtrainds */
106424    +         %VarClus( indata=&EM_IMPORT_DATA,
106425    +                  outstat=&EM_USER_OUTSTAT,
106426    +                  outtree = &EM_USER_OUTTREE,
106427    +                  includeclassvar=N
106428    +                 );
106429    +        %end;
106430    +        %else %do;
106431    +        %VarClus( indata=_newtrainds,
106432    +                  outstat=&EM_USER_OUTSTAT,
106433    +                  outtree = &EM_USER_OUTTREE,
106434    +                  includeclassvar=Y
106435    +                 );
106436    +         proc datasets lib=work nolist;
106437    +              delete  _newtrainds;
106438    +         run;
106439    +         %end;
106440    +    %end;
106441    +    %else %do;
106443    +        /*----- moved this to pretrain ------------
106444    +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106445    +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
106446    +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
106447    +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
106448    +                 %goto endtrain;
106449    +            %end;
106450    +        %end;
106451    +        +-------------------------------------*/
106453    +        %VarClus(indata=&EM_IMPORT_DATA,
106454    +                  outstat=&EM_USER_OUTSTAT,
106455    +                  outtree =&EM_USER_OUTTREE,
106456    +                  includeclassvar=N
106457    +               );
106459    +   %end;
106461    +   %em_checkerror();
106463    +   %if &EMEXCEPTIONSTRING ne %then %do;
106464    +       %goto endtrain1;
106465    +   %end;
106466    +    /*
106467    +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
106468    +    */
106470    +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
106472    +    %let gid=;
106474    +    /*--- To make the main result table ----------------------*/
106476    +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
106477    +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
106478    +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
106479    +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
106480    +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
106481    +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
106483    +   /* Inter Cluster Correlation Plot ------------------------*/
106485    +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
106486    +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
106488    +   /* Create some other data sets for results ----*/
106490    +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
106491    +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
106492    +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
106494    +  /*---- move this to Score action ------------
106495    +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
106496    +   */
106498    +   /* create score code at training time */
106499    +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
106500    +   %endtrain1:
106501    +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
106504    +%macro VarClus2( indata=,
106505    +                 outdata=,
106506    +                 outstat =outstat,
106507    +                 outrsquare=outrsquare,
106508    +                 outtree = outtree,
106509    +                 outclusstruct = outclusstruct,
106510    +                 outcluscorr =outcluscorr,
106511    +                 outcluscorrplot =outcluscorrplot,
106512    +                 outclusrsquare =outclusrsquare,
106513    +                 outstatplot = outstatplot,
106514    +                 outcorr = outcorr,
106515    +                 outcorrplot = outcorrplot,
106516    +                 clusdata=,
106517    +                 outnode=outnode,
106518    +                 outlink=outlink,
106519    +                 ngroup =1  );
106520    +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
106521    +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106522    +              %goto endline;
106523    +         %end;
106525    +        %global numglobalcluster;
106526    +        %let  numglobalcluster = &ngroup;
106527    +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
106528    +        %do vci =1 %to &ngroup;
106529    +           data tmp_clusdata;
106530    +                set &clusdata;
106531    +                if CLUSTER ne &vci then delete;
106532    +           run;
106533    +           %let outstatds = &outstat.&vci;
106534    +           %let outrsquareds = &outrsquare.&vci;
106535    +           %let outtreeds = &outtree.&vci;
106536    +           %let outclusstuctds = &outclusstruct.&vci;
106537    +           %let outcluscorrds = &outcluscorr.&vci;
106538    +           %let outcluscorrplotds = &outcluscorrplot.&vci;
106539    +           %let outclusrsquareds = &outclussquare.&vci;
106540    +           %let outstatplotds = &outstatplot.&vci;
106541    +           %let outcorrds = &outcorr.&vci;
106542    +           %let outcorrplotds = &outcorrplot.&vci;
106543    +           %let outnodeds = &outnode.&vci;
106544    +           %let outlinkds = &outlink.&vci;
106546    +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
106547    +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
106548    +           %let emuseroutstat = &EM_USER_&outstatds;
106550    +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
106551    +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
106552    +           %let emuserouttree = &EM_USER_&outtreeds;
106554    +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
106555    +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
106556    +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
106558    +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
106559    +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
106560    +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
106562    +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
106563    +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
106564    +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
106566    +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
106567    +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
106568    +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
106570    +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
106571    +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
106572    +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
106574    +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
106575    +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
106576    +           %let emuseroutcorr = &EM_USER_&outcorrds;
106578    +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
106579    +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
106580    +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
106582    +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
106583    +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
106584    +           %let emuseroutnode = &EM_USER_&outnodeds;
106586    +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
106587    +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
106588    +           %let emuseroutlink = &EM_USER_&outlinkds;
106590    +           proc varclus data=&indata outstat=&emuseroutstat
106591    +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
106592    +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
106593    +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
106594    +            %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
106595    +                %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
106596    +                %if &maxc > 1 %then %do;     maxc=&maxc %end;
106597    +           %end;
106599    +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
106600    +            maxeigen = &EM_PROPERTY_MAXEIGEN
106601    +            %end;
106603    +           %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
106604    +                proportion = &EM_PROPERTY_PROPORTION
106605    +           %end;
106606    +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
106607    +               summary
106608    +           %end;
106609    +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
106610    +               short
106611    +           %end;
106612    +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
106613    +               corr trace simple
106614    +           %end;
106615    +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
106616    +               noprint
106617    +           %end;
106618    +              outtree=&emuserouttree
106619    +           ;
106620    +           var
106621    +           %let dsid=%sysfunc(open(work.tmp_clusdata));
106622    +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
106623    +                %do %while(^%sysfunc(fetch(&dsid)));
106624    +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
106625    +                    &_varname
106626    +                %end;
106627    +            %let dsid = %sysfunc(close(&dsid));
106628    +           ;
106629    +           %if %EM_FREQ ne %then %do;
106630    +           Freq %EM_FREQ;
106631    +           %end;
106632    +           run;
106634    +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
106636    +            %let gid=&vci;
106637    +            /*--- To make the main result table ----------------------*/
106638    +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
106639    +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
106640    +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
106641    +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
106642    +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
106643    +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
106645    +            /* Inter Cluster Correlation Plot ------------------------*/
106647    +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
106648    +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
106650    +           /* Create some other data sets for results ---------------*/
106652    +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
106653    +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
106654    +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
106656    +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
106658    +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
106660    +           %if &vci = 1 %then %do;
106661    +           data &EM_USER_OUTRSQUARE;
106662    +                set &emuseroutrsquare;
106663    +           run;
106664    +           %end;
106665    +           %else %do;
106666    +           data &EM_USER_OUTRSQUARE;
106667    +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
106668    +           run;
106669    +           %end;
106670    +           quit;
106671    +       %end;
106673    +       /*---- move this to Score action ------------
106674    +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
106675    +       */
106677    +       /* Make Score Gcluster component & correlation  */
106678    +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
106680    +       quit;
106681    +       %endline:
106682    +%mend VarClus2;
106685    +%macro Train2;
106687    +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
106688    +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
106689    +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
106690    +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
106691    +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
106692    +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
106693    +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
106694    +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
106695    +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
106696    +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
106697    +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
106698    +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
106699    +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
106700    +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
106701    +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
106702    +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
106703    +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
106704    +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
106708    +    /* Train */
106710    +   /* moved to pretrain ------------
106712    +   %if &EM_IMPORT_DATA eq %then %do;
106713    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106714    +       %goto endtrain2;
106715    +   %end;
106717    +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
106718    +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106719    +        %goto endtrain2;
106720    +   %end;
106721    +   +-------------------------------------------*/
106723    +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
106726    +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
106728    +        /*----- moved to pretrain ------------
106730    +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
106731    +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
106732    +                             outvar=&EM_USER_OUTDUMMY,
106733    +                             outdata=_newtrainds,
106734    +                             fileref=&EM_FILE_EMFLOWSCORECODE,
106735    +                              ndummyvars=_ndummyvars
106736    +                            );
106738    +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106739    +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
106740    +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106741    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
106742    +                %goto endtrain;
106743    +            %end;
106744    +        %end;
106746    +        +---------------------------------------*/
106747    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
106748    +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
106749    +          There is no _newtrainds */
106750    +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
106751    +                             outstat=&EM_USER_GOUTSTAT,
106752    +                             corrmatrix=Y,
106753    +                             outcorr=&EM_USER_GOUTCORR,
106754    +                             includeclassvar=N,
106755    +                             freq =%EM_FREQ
106756    +                          );
106757    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
106759    +        %end;
106760    +        %else %do;
106761    +         %MakeCorrelation(   indata=_newtrainds,
106762    +                             outstat=&EM_USER_GOUTSTAT,
106763    +                             corrmatrix=Y,
106764    +                             outcorr=&EM_USER_GOUTCORR,
106765    +                             includeclassvar=Y,
106766    +                             freq =%EM_FREQ
106767    +                          );
106768    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
106770    +        %end;
106772    +    %end;
106773    +    %else %do;
106775    +        /* moved to pretrain -------------------
106777    +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106778    +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
106779    +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106780    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
106781    +                %goto endtrain;
106782    +            %end;
106783    +        %end;
106784    +         +------------------------------------------*/
106786    +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
106787    +                          outstat=&EM_USER_GOUTSTAT,
106788    +                          corrmatrix=Y,
106789    +                          outcorr=&EM_USER_GOUTCORR,
106790    +                          includeclassvar=N,
106791    +                          freq =%EM_FREQ
106792    +                          );
106793    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
106794    +    %end;
106796    +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
106797    +                                rsquare = N
106798    +                                );
106799    +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
106800    +                      ncluster=&_ngc,
106801    +                      method = Ward,
106802    +                      outtree =&EM_USER_GOUTTREE,
106803    +                      idvar = _VAR_,
106804    +                      outdata=&EM_USER_GOUTGROUP,
106805    +                      rescore = N,
106806    +                      newncluster=_newnclus
106807    +                        );
106809    +   /* store the number of global cluster */
106811    +   data &EM_USER_VARCLUSMETA;
106812    +        set &EM_USER_VARCLUSMETA;
106813    +        NGCluster = &_newnclus;
106814    +   run;
106816    +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
106818    +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
106819    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
106820    +            %VarClus2(indata=&EM_IMPORT_DATA,
106821    +                 clusdata=&EM_USER_GOUTGROUP,
106822    +                 ngroup=&_newnclus);
106823    +         %end;
106824    +         %else %do;
106825    +             %VarClus2(indata=_newtrainds,
106826    +                 clusdata=&EM_USER_GOUTGROUP,
106827    +                 ngroup=&_newnclus);
106829    +         %end;
106831    +   %end;
106832    +   %else %do;
106833    +       %VarClus2(indata=&EM_IMPORT_DATA,
106834    +                 clusdata=&EM_USER_GOUTGROUP,
106835    +                 ngroup=&_newnclus);
106836    +   %end;
106838    +   %em_checkerror();
106839    +   %if &EMEXCEPTIONSTRING ne %then %do;
106840    +       %put &em_codebar;
106841    +       %put Error: Variable clustering failed.;
106842    +       %put &em_codebar;
106843    +       %goto endtrain2;
106844    +   %end;
106845    +   /*
106846    +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
106847    +   */
106848    +   %endtrain2:
106849    +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
106851    +%macro em_copyfile(infref=, outfref=, append=N);
106853    +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
106855    +       %let omode =;
106856    +       %if &append=Y %then
106857    +           %let omode = MOD;
106858    +       data _null_;
106859    +          length line $20000;
106860    +          file &outfref &omode lrecl=20000;
106861    +          fid=fopen("&infref",'i',20000,'v');
106862    +          if fid > 0  then do;
106863    +             do while(^fread(fid));
106864    +                rlen = frlen(fid);
106865    +                rc= fget(fid,line,20000);
106866    +                start = length(line)-length(left(line))+1;
106867    +                line=strip(line);
106868    +                put @start line;
106869    +             end;
106870    +             if fid > 0  then rc=fclose(fid);
106871    +          end;
106872    +       run;
106874    +   %end;
106875    +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

106876     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.Part_TRAIN end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15:34   
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

106877     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS8.VarClus_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "CLUSTERCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;

NOTE: The data set EMWS8.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   proc varclus data = EMWS8.Part_TRAIN outstat= EMWS8.VarClus_OUTSTAT hi maxc=8 short outtree=EMWS8.VarClus_OUTTREE ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;

NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS8.VARCLUS_OUTSTAT has 175 observations and 27 variables.
NOTE: The data set EMWS8.VARCLUS_OUTTREE has 35 observations and 8 variables.
NOTE: The PROCEDURE VARCLUS printed page 39.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

106878     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS8.VarClus_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:20   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS3 = CLUS3**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS4 = CLUS4**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS5 = CLUS5**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS6 = CLUS6**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS7 = CLUS7**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS8 = CLUS8**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS8.VarClus_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 56 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: There were 56 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      101:25   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;

NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   AcceptedCmpTotal = AcceptedCmpTotal**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Age = Age**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Frq = Frq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Income = Income**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Kidhome = Kidhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Mnt = Mnt**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFishProducts = MntFishProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFruits = MntFruits**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntGoldProds = MntGoldProds**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntMeatProducts = MntMeatProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntSweetProducts = MntSweetProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntWines = MntWines**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MonthsAsCustomer = MonthsAsCustomer**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumCatalogPurchases = NumCatalogPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDealsPurchases = NumDealsPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDistPurchases = NumDistPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumStorePurchases = NumStorePurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebPurchases = NumWebPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebVisitsMonth = NumWebVisitsMonth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RFMstat = RFMstat**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RMntFrq = RMntFrq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Recency = Recency**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Teenhome = Teenhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Year_Birth = Year_Birth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS8.VarClus_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;

NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6   
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;

NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS8.VarClus_OUTCLUSCORRPLOT out=EMWS8.VarClus_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;

NOTE: There were 64 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESTATPLOTDATA):   data EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;

NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS8.VarClus_OUTCORR out=EMWS8.VarClus_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 384 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      137:27   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;

WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;

NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;

NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTLINK has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;

NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTNODE has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS8.VarClus_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 8 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;

NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATSCORE has 10 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATESCORECODE):   filename _file_ "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus3 = 0 ; /*---" "Cluster Component 3" "------ */";
MPRINT(CREATESCORECODE):   put "Clus4 = 0 ; /*---" "Cluster Component 4" "------ */";
MPRINT(CREATESCORECODE):   put "Clus5 = 0 ; /*---" "Cluster Component 5" "------ */";
MPRINT(CREATESCORECODE):   put "Clus6 = 0 ; /*---" "Cluster Component 6" "------ */";
MPRINT(CREATESCORECODE):   put "Clus7 = 0 ; /*---" "Cluster Component 7" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = 0 ; /*---" "Cluster Component 8" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+1 * (MonthsAsCustomer - 83.6512215669755)/16.9364993770663;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;";
MPRINT(CREATESCORECODE):   put "Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;";
MPRINT(CREATESCORECODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=21. April 2016 18.28 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 37 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _out lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_in",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file _OUT is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21. April 2016 18.28 Uhr,
      Create Time=03. April 2016 17.12 Uhr

NOTE: 37 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106879     
106880     *------------------------------------------------------------*;
106881     * End TRAIN: VarClus;
106882     *------------------------------------------------------------*;

106883     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
106884     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
106885     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106886     ;
MPRINT(EM_DIAGRAM):   ;
106887     ;
MPRINT(EM_DIAGRAM):   ;
106888     ;
MPRINT(EM_DIAGRAM):   ;
106889     ;
MPRINT(EM_DIAGRAM):   ;
106890     quit;
MPRINT(EM_DIAGRAM):   quit;
106891     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106892     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
106893     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106894     /*; *"; *'; */
106895     ;
MPRINT(EM_DIAGRAM):   ;
106896     run;
MPRINT(EM_DIAGRAM):   run;
106897     quit;
MPRINT(EM_DIAGRAM):   quit;
106898     /* Reset EM Options */
106899     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
106900     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
106901     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
