*------------------------------------------------------------*
User:                Lukas Fahr
Date:                20. April 2016
Time:                16.22 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                20. April 2016
Time:                16.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VHU576 "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VHU576 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.22 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.22 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
103965     proc freq data=EMWS8.VarClus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.VarClus_VariableSet noprint;
103966     table ROLE*LEVEL/out=WORK.VarClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClusMETA;
103967     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS8.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
103968     proc print data=WORK.VarClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClusMETA label noobs;
103969     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
103970     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
103971     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
103972     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
103973     run;
 
NOTE: There were 6 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 38.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
103974     title10;
MPRINT(EM_DIAGRAM):   title10;
103975     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
104351     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
104352     * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
104353     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
104354     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
104355     %let EMEXCEPTIONSTRING=;
104356     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
104357     * TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus;
104358     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
104359     %let EM_ACTION = TRAIN;
104360     %let syscc = 0;
104361
104362     %macro main;
104363
104364        filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
104365        %include temp;
104366        filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
104367        %include temp;
104368        filename temp;
104369
104370       %SetProperties;
104371
104372        %if %upcase(&EM_ACTION) = CREATE %then %do;
104373            filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
104374            %include temp;
104375            filename temp;
104376            %create;
104377        %end;
104378        %else
104379        %if %upcase(&EM_ACTION) = TRAIN %then %do;
104380             filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
104381                %include temp;
104382                filename temp;
104383                %train;
104384        %end;
104385        %else
104386        %if %upcase(&EM_ACTION) = SCORE %then %do;
104387                filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
104388                %include temp;
104389                filename temp;
104390                %score;
104391        %end;
104392        %else
104393        %if %upcase(&EM_ACTION) = REPORT %then %do;
104394                filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
104395                %include temp;
104396                filename temp;
104397                %report;
104398        %end;
104399        /*
104400        %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
104401            %put 'OPENING TABLE';
104402        %end;
104403        %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
104404            %put 'CLOSE TABLE';
104405        %end;
104406        */
104407     %mend main;
104408     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
104410    +/* Initialize property macro variables */
104411    +%macro SetProperties;
104412    +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
104413    +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
104414    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
104415    +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
104416    +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
104417    +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
104418    +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
104419    +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
104420    +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
104421    +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
104422    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
104423    +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
104424    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
104426    +%mend SetProperties;
104428    +%Macro MakeDummyVariables(indata=,
104429    +                          outvar=,
104430    +                          outdata=,
104431    +                          fileref=,
104432    +                          recreatecmeta=N, /* optional */
104433    +                          incmeta=,     /* optional */
104434    +                          outcmeta=,    /* optional */
104435    +                          ndummyvars=_ndummyvars
104436    +                          );
104437    +    %global &ndummyvars;
104439    +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
104440    +       class
104441    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
104442    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
104443    +    ;
104444    +    run;
104445    +    %let &ndummyvars = 0;
104446    +    data _null_;
104447    +    %let dsid = %sysfunc(open(work._classout));
104448    +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
104449    +    %let dsid = %sysfunc(close(&dsid));
104450    +    run;
104452    +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
104453    +       input
104454    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
104455    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
104456    +        / level=nominal stdize=no;
104457    +       make outvar = &outvar;
104458    +       score data = &indata out =&outdata;
104459    +       code  file=  "&fileref";
104460    +    run;
104461    +    %if &recreatecmeta eq Y %then %do;
104462    +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
104463    +    data _tmpds;
104464    +        set _tmpds;
104465    +           ROLE = 'INPUT';
104466    +           LEVEL = 'INTERVAL';
104467    +           CREATOR='DMZIP';
104468    +           if NAME = '_TYPE_' then delete;
104469    +    run;
104470    +    data &outcmeta;
104471    +         set &incmeta _tmpds;
104472    +    run;
104473    +    %end;
104474    +    proc datasets lib=work nolist;
104475    +      delete  _dmdbdat _dmdbcat _classout
104476    +    %if &recreatecmeta eq Y %then %do;
104477    +    _tmpds
104478    +    %end;
104479    +    ;
104480    +    quit;
104481    +%Mend MakeDummyVariables;
104483    +/*--- Determine Optimal Number of Cluster ----
104484    +%macro FindClusNum(statds=, groupds=, minvariation=);
104485    +   %global optnclus;
104486    +   data varclus_tmp(drop=_NAME_);
104487    +      set &statDs;
104488    +      where _type_ ='PROPOR';
104489    +   run;
104490    +   proc sort data=varclus_tmp;
104491    +      by _NCL_;
104492    +   run;
104493    +   proc transpose data=varclus_tmp out=varclus_tmp;
104494    +      by _NCL_;
104495    +      var %EM_INTERVAL_INPUT
104496    +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
104497    +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
104498    +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
104499    +          %do i = 2 %to &nvar;
104500    +          %let varname = %sysfunc(varname(&dsid, &i));
104501    +          &varname
104502    +          %end;
104503    +      %end;
104504    +   ;
104505    +   run;
104507    +   %if &minVariation eq %then %do;
104508    +       %let minVariation = &EM_PROPERTY_MINVARIATION;
104509    +   %end;
104510    +   %if ^(0<&minVariation<100) %then %do;
104511    +       %let minVariation = 90;
104512    +   %end;
104514    +   data _null_;
104515    +      set varclus_tmp end=eof;
104516    +      by _NCL_;
104517    +      retain flag 0;
104518    +      if first._ncl_ then flag=0;
104519    +      if .<col1 < &minVariation then flag=1;
104520    +      if last._ncl_ and ^flag then do;
104521    +         call symput('OPTNCL', _ncl_);
104522    +         stop;
104523    +      end;
104524    +     if eof then call symput('OPTNCL', _ncl_);
104525    +   run;
104527    +   %let optnclus = &OPTNCL;
104529    +   data varclus_tmp(drop=_NCL_ _NAME_);
104530    +      set &statDs;
104531    +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
104532    +   run;
104533    +   proc sort data=varclus_tmp;
104534    +      by _TYPE_;
104535    +   run;
104536    +   proc transpose data=varclus_tmp out=varclus_tmp;
104537    +      by _TYPE_;
104538    +   run;
104539    +   proc sort data=varclus_tmp;
104540    +      by _name_ _type_;
104541    +   run;
104543    +  proc transpose data=varclus_tmp out=&groupds;
104544    +      by _NAME_;
104545    +   run;
104546    +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
104547    +      by Cluster descending Rsquare;
104548    +      where Cluster ne 0;
104549    +   run;
104550    +   proc datasets lib=work nolist mt=(DATA VIEW);
104551    +      delete varclus_tmp;
104552    +   run;
104553    +   quit;
104554    +%mend findClusNum;
104555    +*/
104557    +%macro getNclusfromTrain(inoutstat=, nc=);
104558    +%global &nc;
104559    +data _null_;
104560    +    set &inoutstat end=eof;
104561    +    if eof then do;
104562    +    call symput("&nc", _ncl_);
104563    +    end;
104564    +run;
104565    +%mend  getNclusfromTrain;
104567    +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
104569    +     *--- Build Code to Modify Metadata ---*;
104570    +     filename X "&deltacodefile";
104571    +     data _null_;
104572    +        FILE X;
104573    +        set &groupds end=eof;
104574    +        /*by Cluster;*/
104575    +         if _N_=1 then do;
104576    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
104577    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
104578    +           %end;
104579    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
104580    +           put "if upcase(strip(NAME)) in (";
104581    +        end;
104582    +        if Strip(upcase(Selected)) eq 'YES' then do;
104583    +           string = '"'!!trim(left(VARIABLE))!!'"';
104584    +           put string;
104585    +        end;
104586    +        if eof then do;
104587    +           put ') then ROLE="INPUT";';
104588    +           put 'else ROLE="REJECTED";';
104589    +           put 'end;';
104591    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
104592    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
104593    +           %end;
104594    +        end;
104595    +     run;
104596    +     quit;
104598    +     filename X;
104600    +     quit;
104601    +%mend MakeDeltaCode;
104603    +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
104604    +    %if ^%sysfunc(exist(&statds)) %then %do;
104605    +         %goto doendc;
104606    +    %end;
104608    +    data &corrds(drop=_TYPE_ _NCL_) ;
104609    +       set &statds;
104610    +       where _type_ eq 'CORR' ;
104611    +    run ;
104612    +    proc sort data=&corrds;
104613    +       by _NAME_ ;
104614    +    run ;
104615    +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
104616    +      BY _NAME_ ;
104617    +    run ;
104618    +    data &corrplotds;
104619    +       length _Y_ $100;
104620    +       set &corrplotDs;
104621    +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
104622    +    run ;
104623    +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
104624    +       set &corrplotds;
104625    +       where _LABEL_ ne '' ;
104626    +       keep _TMP_ _LABEL_ ;
104627    +    run ;
104628    +    data _null_;
104629    +       nobs=0;
104630    +       dsid = open('varclus_match');
104631    +       if dsid then do;
104632    +          nobs = attrn(dsid, 'NOBS');
104633    +          dsid = close(dsid);
104634    +       end;
104635    +       call symput ('CORR_NOBS', nobs);
104636    +    run;
104637    +    %if &corr_nobs %then %do;
104638    +        proc sort data=varclus_match;
104639    +           by _name_;
104640    +        run ;
104641    +        proc sort data=&corrplotds;
104642    +           by _name_;
104643    +        run ;
104644    +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
104645    +           merge varclus_match &corrplotds;
104646    +           by _NAME_ ;
104647    +           if _X_ eq '' then _X_=_NAME_ ;
104648    +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
104649    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
104650    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
104652    +       run ;
104653    +    %end;
104654    +    %else %do;
104655    +        proc sort data=&corrplotds;
104656    +           by _name_;
104657    +        run ;
104658    +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
104659    +           set &corrplotds;
104660    +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
104661    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
104662    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
104664    +        run ;
104665    +    %end;
104666    +    proc sort data=&corrplotds;
104667    +       by _X_ _Y_;
104668    +    run ;
104669    +    proc datasets lib=work nolist mt=(DATA VIEW);
104670    +       delete varclus_match;
104671    +    run;
104672    +    quit;
104674    +%doendc:
104676    +%mend MakeVarClusCorrData;
104678    +%macro MakeStatPlotData(statds= , outstatplotds=);
104679    +   %if %sysfunc(exist(&statds)) %then %do;
104681    +       data varclus_tmp(drop=_NAME_ _NCL_) ;
104682    +          set &statDs;
104683    +          where _type_ in('MEAN', 'STD', 'N');
104684    +       run ;
104685    +       proc transpose data=varclus_tmp out=&outstatplotds;
104686    +          id _TYPE_ ;
104687    +       run ;
104688    +       data &outstatplotds;
104689    +          set &outstatplotds(obs=1000);
104690    +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
104691    +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
104692    +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
104693    +          else SCALEDSTD= STD ;
104694    +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
104695    +       run ;
104696    +       proc sort data=&outstatplotds;
104697    +          by descending SCALEDSTD ;
104698    +       run ;
104699    +       proc datasets lib=work nolist mt=(DATA VIEW);
104700    +          delete varclus_tmp;
104701    +       run;
104702    +       quit;
104703    +    %end;
104705    +%mend MakeStatPlotData;
104708    +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
104709    +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
104710    +    data &EM_USER_OUTSTATSCORE;
104711    +          set &indata;
104712    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
104713    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
104714    +          if _TYPE_ = 'STD' then _NAME_='STD';
104715    +          DROP _TYPE_ _NCL_;
104716    +     run;
104718    +     filename _file_  "&fileRef";
104720    +     data _null_;
104721    +        FILE _file_ MOD;
104722    +        put ' ';
104723    +        put '/*-------------------------------------------------*/';
104724    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
104725    +        put '/*-------------------------------------------------*/';
104726    +        put ' ';
104727    +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
104729    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
104730    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
104732    +        %let k = 1;
104733    +        %do %while(^%sysfunc(fetch(&dsid)));
104734    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104735    +                %if &k > 2 %then %do;
104736    +                 %let cn = %eval(&k-2);
104737    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
104738    +                %end;
104739    +                %let k = %eval(&k+1);
104740    +        %end;
104742    +        %let rc = %sysfunc(rewind(&dsid));
104744    +        %do i= 2 %to &nvar;
104745    +            %let _varname =  %sysfunc(varname(&dsid, &i));
104746    +            %do %while(^%sysfunc(fetch(&dsid)));
104747    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104748    +                %if &_name = MEAN %then
104749    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
104750    +                %else %if &_name = STD %then
104751    +                %let _std = %sysfunc(getvarn(&dsid, &i));
104752    +                %else %do;
104753    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
104754    +                      %let abscoeff = %sysfunc(abs(&coeff));
104755    +                          %if &abscoeff >  0 %then %do;
104756    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
104757    +                           %end;
104758    +                 %end;
104759    +             %end;
104760    +             %let rc = %sysfunc(rewind(&dsid));
104761    +         %end;
104763    +        %let dsid= %sysfunc(close(&dsid));
104764    +       run;
104765    +%mend CreateScoreCode;
104769    +/*----------------------------------------------------------
104770    +    Instead of using %MakeRSquareData,
104771    +    %MakeVarClusResultTable at macro2.source is used
104772    + +----------------------------------------------------------*/
104775    +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
104777    +/* modifying  from ods rsquare = data */
104779    +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
104780    +    Length Cluster $16;
104781    +    length Variable $32;
104782    +    Length VariableLabel $64;
104783    +    set &indata; retain CurrentCluster;
104784    +    if NumberOfClusters ^= &ncluster then delete;
104785    +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
104786    +    CurrentCluster = Cluster;
104787    +   run;
104788    +proc sort data =&outdata ;
104789    +     by Cluster RsquareRatio;
104790    +run;
104791    +data _tmprsq(drop=index);
104792    +     set &outdata; by Cluster;
104793    +     if first.Cluster then do;
104794    +     index = strip(scan(Cluster,2 ));
104795    +     Variable = "Clus"||index;
104796    +     VariableLabel = "Cluster Component "||index;
104797    +     OwnCluster = 1;
104798    +     NextClosest = .;
104799    +     RsquareRatio = 0;
104800    +     output;
104801    +     end;
104802    +run;
104804    +proc sort data = _tmprsq ;
104805    +     by Cluster RsquareRatio;
104806    +run;
104807    +data &outdata;
104808    +     set &outdata _tmprsq;
104809    +by Cluster;
104810    +run;
104813    +/* Just create the Selected variable with all YES */
104815    +data &outdata;
104816    +    set &outdata; by cluster;
104817    +    length Selected $8;
104818    +    Selected = 'YES';
104819    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
104820    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
104821    +    rename OwnCluster = RSqWithClusterComp;
104822    +    rename NextClosest = RSqWithNextClusComp;
104823    +run;
104826    +/* Selected = Y/N will be done %score section -----
104828    +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
104829    +data &outdata;
104830    +    set &outdata; by cluster;
104831    +    length Selected $8;
104832    +    if first.Cluster then Selected = 'YES';
104833    +    else Selected = 'NO';
104834    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
104835    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
104836    +    rename OwnCluster = RSqWithClusterComp;
104837    +    rename NextClosest = RSqWithNextClusComp;
104838    +run;
104839    +%end;
104840    +%else %do;
104841    +data &outdata;
104842    +    set &outdata; by cluster;
104843    +    if last.Cluster then Selected = 'YES';
104844    +    else Selected = 'NO';
104845    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
104846    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
104847    +    rename OwnCluster = RSqWithClusterComp;
104848    +    rename NextClosest = RSqWithNextClusComp;
104849    +run;
104850    +%end;
104851    +---------------------------------------------------------------*/
104853    +%if %sysfunc(exist(&inClusRSquare)) %then %do;
104854    +/* to calculate NextClosestClusRsq */
104855    +proc transpose data = &inClusRSquare  out=_clusRsq;
104856    +      by cluster;
104857    +      run;
104858    +data _clusRsq;
104859    +     set _clusRsq;
104860    +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
104861    +run;
104863    +proc sort data=_clusRsq;
104864    +    by cluster col1;
104865    +    run;
104866    +data _clusRsq(drop=_NAME_ _LABEL_);
104867    +     set _clusRsq; by cluster;
104868    +     if last.Cluster then output;
104869    +     label  COL1 = 'R-Sqaure with Next Cluster Component';
104870    +     rename COL1 = RSqWithNextClusComp;
104871    +     rename Cluster = Variable;
104872    +     label  Cluster = "Variable";
104873    +run;
104875    +proc sort data =&outdata;
104876    +     by Variable;
104877    +run;
104878    +data &outdata;
104879    +    merge &outdata _clusRsq;
104880    +    by Variable;
104881    +run;
104882    +proc sort data =&outdata;
104883    +by Cluster  RsquareRatio;
104884    +run;
104885    +quit;
104886    +%end;
104888    +proc datasets lib = work nolist;
104889    +     delete _tmprsq _clusRsq;
104890    +     run;
104891    +quit;
104893    +%mend MakeRSquareData;
104896    +/*-------------------------------------------------------------------------*/
104900    +%macro ModifyCorr(indata=,
104901    +                  outdata=,
104902    +                  rsquare = Y
104903    +                  );
104904    +    data corr_tmp;
104905    +        set &indata;
104906    +    run;
104907    +     proc sql;
104908    +           update &indata
104909    +           set
104910    +     %let dsid = %sysfunc(open(work.corr_tmp));
104911    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
104912    +          %do i = 4 %to &nvar;
104913    +          %let _name = %sysfunc(varname(&dsid, &i));
104914    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
104915    +            %else  %let _name_md = &_name;
104916    +            %if &i < &nvar %then %do;
104917    +               &_name = 1- &_name_md ,
104918    +            %end;
104919    +            %else %do;
104920    +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
104921    +            %end;
104922    +          %end;
104923    +      %let dsid= %sysfunc(close(&dsid));
104925    +      select * from &indata;
104926    +      run;
104927    +      proc datasets lib = work nolist;
104928    +           delete corr_tmp;
104929    +      run;
104930    +      quit;
104932    + %mend ModifyCorr;
104934    + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
104935    +    data &outdata(drop= _NCL_  _TYPE_);
104936    +       set &indata;
104937    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
104938    +       rename _NAME_ = Cluster;
104939    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
104940    +    run;
104941    +    %if &RSquare eq Y %then %do;
104942    +     data corr_tmp;
104943    +        set &outdata;
104944    +     run;
104946    +     data &outdata(drop=i);
104947    +          set &outdata;
104948    +          %let dsid = %sysfunc(open(work.corr_tmp));
104949    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
104950    +          %do i = 2 %to &nvar;
104951    +            %let _name = %sysfunc(varname(&dsid, &i));
104952    +            %let _name_md = &_name.**2;
104953    +                &_name = &_name_md;
104954    +          %end;
104955    +      %let dsid= %sysfunc(close(&dsid));
104956    +      run;
104957    +      proc datasets lib = work nolist;
104958    +           delete corr_tmp;
104959    +      run;
104961    +    %end;
104962    +     quit;
104963    +%mend MakeClusStructCorrData;
104965    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
104966    +    data &outdata(drop= _NCL_  _TYPE_);
104967    +       set &indata;
104968    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
104969    +       rename _NAME_ = Cluster;
104970    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
104971    +    run;
104972    +    data corr_tmp;
104973    +        set &outdata;
104974    +    run;
104976    +    %let dsid = %sysfunc(open(work.corr_tmp));
104977    +    %let nclus2= %eval(&ncluster+1);
104978    +    data &outdata;
104979    +         set &outdata;
104980    +          %do i = 2 %to &nclus2;
104981    +          %let i_1 = %eval(&i-1);
104982    +            %let _name = %sysfunc(varname(&dsid, &i));
104983    +            %let _newName = Clus&i_1;
104984    +                rename &_name = &_newName; ;
104985    +                *label &_name ="Cluster &i_1";
104986    +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
104987    +          %end;
104988    +          keep Cluster
104989    +          %do i = 2 %to &nclus2;
104990    +                %let _name = %sysfunc(varname(&dsid, &i));
104991    +                &_name
104992    +          %end;
104993    +          ;
104994    +    %let dsid= %sysfunc(close(&dsid));
104995    +     run;
104996    +     quit;
104998    +    %if &RSquare eq Y %then %do;
105000    +       data corr_tmp;
105001    +        set &outdata;
105002    +     run;
105004    +     data &outdata(drop=i);
105005    +          set &outdata;
105006    +          %let dsid = %sysfunc(open(work.corr_tmp));
105007    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105008    +          %do i = 2 %to &nvar;
105009    +            %let _name = %sysfunc(varname(&dsid, &i));
105010    +            %let _name_md = &_name.**2;
105011    +                &_name = &_name_md;
105012    +          %end;
105013    +      %let dsid= %sysfunc(close(&dsid));
105014    +      run;
105015    +    %end;
105017    +    %if &makeplotds eq Y %then %do;
105018    +     proc transpose data = &outdata
105019    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
105020    +          by cluster;
105021    +     run;
105022    +     data &plotds;
105023    +          set  &plotds;
105024    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105025    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105026    +     run;
105027    +     %end;
105028    +     proc datasets lib = work nolist;
105029    +           delete corr_tmp;
105030    +     run;
105031    +     quit;
105032    +%mend MakeInterClusCorrData;
105035    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
105037    +data &outlink(drop = Selected);
105038    +     set &indata;
105039    +     LINKID = _N_;
105040    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
105041    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
105042    +run;
105043    +data &outnode(keep=NODEID TYPE LABEL);
105044    +    set &indata;
105045    +    length TYPE $16;
105046    +    rename Variable = NODEID;
105047    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
105048    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
105049    +    then  TYPE = "CLUSTER";
105050    +    else  TYPE="VARIABLE";
105051    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
105052    +run;
105053    +quit;
105054    +%mend MakeClusConstellData;
105058    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
105060    +data &outlink(drop = Selected);
105061    +     set &indata;
105062    +     LINKID = _N_;
105063    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
105064    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
105065    +run;
105066    +data &outnode(keep=NODEID TYPE LABEL);
105067    +    set &indata;
105068    +    length TYPE $16;
105069    +    rename Variable = NODEID;
105070    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
105071    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
105072    +    then  TYPE = "CLUSTER";
105073    +    else  TYPE="VARIABLE";
105074    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
105075    +run;
105076    +quit;
105077    +%mend MakeClusConstellData;
105080    +/*--- This will work only when inds is not a view data -------
105082    +%macro getNVarNObs(inds=, nvar=, nobs=);
105084    +    %global &nvar;
105085    +    %global &nobs;
105086    +    data _null_;
105087    +         dsid = open("&inds");
105088    +         nv = attrn(dsid, 'NVAR');
105089    +         no = attrn(dsid, 'NOBS');
105090    +         dsid = close(dsid);
105091    +         call symput("&nvar", nv);
105092    +         call symput("&nobs", no);
105093    +    run;
105094    +    quit;
105095    +%mend  getNVarNObs;
105097    ++---------------------------------------------------------------*/
105100    +%macro getNVar(inds=, nvar=);
105101    +    %global &nvar;
105102    +    data _null_;
105103    +         dsid = open("&inds");
105104    +         nv = attrn(dsid, 'NVAR');
105105    +         dsid = close(dsid);
105106    +         call symput("&nvar", nv);
105107    +    run;
105108    +    quit;
105109    +%mend  getNVar;
105113    +%macro getNObs(inds=, nobs=);
105114    +    %global &nobs;
105115    +    data _null_;
105116    +        set &inds end=eof;
105117    +        if eof then call symput("&nobs", _N_);
105118    +    run;
105119    +    quit;
105120    +%mend  getNObs;
105122    +%Macro CreateVarclusMeta(trainnum=);
105123    +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
105124    +    data &EM_USER_VARCLUSMETA;
105125    +         length TrainNum 8.;
105126    +         length NewTrain $8;
105127    +         length NGCluster 8.;
105128    +         length ExportedComp $16;
105129    +         length HideVariable $8;
105130    +         TrainNum = &trainnum;
105131    +         NewTrain = "Y";
105132    +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
105133    +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
105134    +         NGCluster = 0; /* zero means no twostage */
105135    +   run;
105136    +   quit;
105137    +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
105139    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
105140    +    data &outdata(drop= _NCL_  _TYPE_);
105141    +       set &indata;
105142    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
105143    +       %if &globalclusid ne %then %do;
105144    +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
105145    +       rename _NAME_ = Cluster;
105146    +       %end;
105147    +       %else %do;
105148    +        _NAME_ = upcase(_NAME_);
105149    +       rename _NAME_ = Cluster;
105150    +       %end;
105151    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
105152    +    run;
105153    +    data corr_tmp;
105154    +        set &outdata;
105155    +    run;
105157    +    %let dsid = %sysfunc(open(work.corr_tmp));
105158    +    %let nclus2= %eval(&ncluster+1);
105159    +    data &outdata;
105160    +         set &outdata;
105161    +          %do i = 2 %to &nclus2;
105162    +          %let i_1 = %eval(&i-1);
105163    +            %let _name = %sysfunc(varname(&dsid, &i));
105164    +            %if &globalclusid ne %then
105165    +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
105166    +                     rename &_name = &_newName;
105167    +                     *label &_name ="GC &globalclusid : Cluster &i_1";
105168    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
105169    +                %end;
105170    +            %else
105171    +                %do; %let _newName = CLUS&i_1;
105172    +                     rename &_name = &_newName;
105173    +                     *label &_name ="Cluster &i_1";
105174    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
105175    +                %end;
105176    +          %end;
105177    +          keep Cluster
105178    +          %do i = 2 %to &nclus2;
105179    +                %let _name = %sysfunc(varname(&dsid, &i));
105180    +                &_name
105181    +          %end;
105182    +          ;
105183    +    %let dsid= %sysfunc(close(&dsid));
105184    +     run;
105185    +     quit;
105187    +    %if &RSquare eq Y %then %do;
105189    +       data corr_tmp;
105190    +        set &outdata;
105191    +     run;
105193    +     data &outdata;
105194    +          set &outdata;
105195    +          %let dsid = %sysfunc(open(work.corr_tmp));
105196    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105197    +          %do i = 2 %to &nvar;
105198    +            %let _name = %sysfunc(varname(&dsid, &i));
105199    +            %let _name_md = &_name.**2;
105200    +                &_name = &_name_md;
105201    +          %end;
105202    +      %let dsid= %sysfunc(close(&dsid));
105203    +      run;
105204    +    %end;
105206    +    %if &makeplotds eq Y %then %do;
105207    +     proc transpose data = &outdata
105208    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
105209    +          by cluster;
105210    +     run;
105211    +     data &plotds;
105212    +          set  &plotds;
105213    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105214    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
105215    +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
105216    +     run;
105217    +     %end;
105218    +     proc datasets lib = work nolist;
105219    +           delete corr_tmp;
105220    +     run;
105221    +     quit;
105222    +%mend MakeInterClusCorrData;
105224    +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
105225    +    data _tmpds(drop= _NCL_);
105226    +       set &indata;
105227    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
105228    +       %if &globalclusid ne %then %do;
105229    +           _NAME_ = "GC&globalclusid.";
105230    +       rename _NAME_ = Cluster;
105231    +       %end;
105232    +       %else %do;
105233    +        _NAME_ = "CLUS";
105234    +        rename _NAME_ = Cluster;
105235    +       %end;
105236    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
105237    +    run;
105238    +    proc transpose data =_tmpds out =&outdata;
105239    +    run;
105241    +    data &outdata(drop=COL1);
105242    +        %if &globalclusid ne %then %do;
105243    +        length GCluster $16;
105244    +        %end;
105245    +        length Cluster $32;
105246    +        length _NAME_ $32;
105247    +         set &outdata;
105248    +         _NAME_ = upcase(_NAME_);
105249    +         rename _NAME_=Variable;
105250    +         *label _NAME_="Variable";
105251    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105252    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105253    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105255    +         %if &globalclusid ne %then %do;
105256    +          GCluster = "GC&globalclusid";
105257    +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
105258    +         %end;
105259    +         %else %do;
105260    +         Cluster = "CLUS"||strip(COL1);
105261    +        %end;
105262    +         rename COL2 = RSqWithOwnClusComp;
105263    +         *label COL2 = "R-Square With Own Cluster Component";
105264    +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
105266    +   run;
105267    +   proc sort data =&outdata;
105268    +        by Cluster RSqWithOwnClusComp;
105269    +   run;
105270    +   proc datasets lib = work nolist;
105271    +           delete _tmpds;
105272    +   run;
105273    +   quit;
105274    +%mend MakeOwnRSquare;
105276    +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
105277    +    data &outdata(drop= _NCL_  _TYPE_);
105278    +       %if &globalclusid ne %then %do;
105279    +        length GCluster $16;
105280    +        %end;
105281    +       set &indata;
105282    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
105283    +       %if &globalclusid ne %then %do;
105284    +         GCluster = "GC&globalclusid";
105285    +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
105286    +         rename _NAME_ = Cluster;
105287    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105288    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105290    +       %end;
105291    +       %else %do;
105292    +         _NAME_ = upcase(_NAME_);
105293    +         rename _NAME_ = Cluster;
105294    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105295    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105297    +       %end;
105298    +     run;
105299    +    %if &RSquare eq Y %then %do;
105300    +     data corr_tmp;
105301    +          set &outdata;
105302    +     run;
105303    +     %let istart = 2;
105304    +     %if &globalclusid ne %then %let istart = 3;
105305    +     data &outdata;
105306    +          set &outdata;
105307    +          %let dsid = %sysfunc(open(work.corr_tmp));
105308    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105309    +          %do i =&istart %to &nvar;
105310    +            %let _name = %sysfunc(varname(&dsid, &i));
105311    +            %let _name_md = &_name.**2;
105312    +                &_name = &_name_md;
105313    +          %end;
105314    +      %let dsid= %sysfunc(close(&dsid));
105315    +      run;
105316    +      proc datasets lib = work nolist;
105317    +           delete corr_tmp;
105318    +      run;
105319    +    %end;
105320    +     quit;
105321    +%mend MakeClusStructCorrData;
105323    +/*
105324    +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
105325    +*/
105327    +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
105329    +     /* The indata should be the outdata
105330    +        from %MakeClusStructCorrData(indata=, outdata=, ); */
105332    +     proc sort data =&indata out=_tmpclusRsq;
105333    +     by cluster;
105334    +     run;
105336    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
105337    +      by cluster;
105338    +     run;
105340    +     proc sort data=_tmpclusRsq;
105341    +        by _NAME_ COL1;
105342    +     run;
105344    +     data _tmpclusRsq;
105345    +         length _NAME_ $32;
105346    +         set _tmpclusRsq; by _NAME_;
105347    +          _NAME_ = upcase(_NAME_);
105348    +          %if &ncluster ne 1 %then %do;
105349    +             if last._NAME_ then delete;
105350    +          %end;
105351    +          %else %do;
105352    +             COL1 = 0;
105353    +          %end;
105354    +     run;
105355    +     /* need to sort again */
105356    +     proc sort data=_tmpclusRsq;
105357    +        by _NAME_ COL1;
105358    +     run;
105360    +     data &outdata;
105361    +         set _tmpclusRsq; by _NAME_;
105362    +         Cluster = upcase(Cluster);
105363    +         if last._NAME_ then output;
105364    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
105365    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
105366    +         rename COL1 = RSqWithNextClusComp;
105367    +         Cluster = upcase(Cluster);
105368    +         rename Cluster = ClosestCluster;
105369    +         *label  Cluster = "Next Closest Cluster";
105370    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
105371    +         rename _NAME_ = Variable;
105372    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105373    +    run;
105376    +    %if &globalclusid ne %then %do;
105377    +    data &outdata;
105378    +       length GCluster $16;
105379    +       set &outdata;
105380    +       GCluster = "GC&globalclusid";
105381    +       run;
105382    +    %end;
105383    +    proc datasets lib = work nolist;
105384    +           delete _tmpclusRsq;
105385    +    run;
105386    +    quit;
105387    +%mend FindNextClosestClusByVar;
105390    +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
105391    +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
105392    +     proc sort data =&indata out=_tmpclusRsq;
105393    +     by cluster;
105394    +     run;
105395    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
105396    +     by cluster;
105397    +     run;
105398    +     proc sort data=_tmpclusRsq;
105399    +        by _NAME_ col1;
105400    +     run;
105401    +     data _tmpclusRsq;
105402    +         length _NAME_ $32;
105403    +         set _tmpclusRsq; by _NAME_;
105404    +          _NAME_ = upcase(_NAME_);
105405    +          %if &ncluster ne 1 %then %do;
105406    +             if last._NAME_ then delete;
105407    +          %end;
105408    +          %else %do;
105409    +             COL1 = 0;
105410    +          %end;
105411    +     run;
105412    +     data &outdata;
105413    +         set _tmpclusRsq; by _NAME_;
105414    +         Cluster = upcase(Cluster);
105415    +         if last._NAME_ then output;
105416    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
105417    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
105418    +         rename COL1 = RSqWithNextClusComp;
105419    +         Cluster = upcase(Cluster);
105420    +         rename Cluster = ClosestCluster;
105421    +         *label  Cluster = "Next Closest Cluster";
105422    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
105423    +         rename _NAME_ = Variable;
105424    +         *label  _NAME_ = "Variable";
105425    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105427    +    run;
105428    +    %if &globalclusid ne %then %do;
105429    +    data &outdata;
105430    +       length GCluster $16;
105431    +       set &outdata;
105432    +       GCluster = "GC&globalclusid";
105433    +       run;
105434    +    %end;
105436    +    proc datasets lib = work nolist;
105437    +           delete _tmpclusRsq;
105438    +    run;
105440    +    quit;
105441    +%mend FindNextClosestClusByCluster;
105443    +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
105444    +/*----
105445    +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
105446    +-----------*/
105448    +proc sort data =&indata1;
105449    +    by Variable;
105450    +run;
105451    +proc sort data =&indata2;
105452    +    by Variable;
105453    +run;
105454    +data &outdata;
105455    +    merge &indata1 &indata2;
105456    +    by Variable;
105457    +    length Type $16;
105458    +    Type = 'Variable';
105459    +    *label Type ='Type';
105460    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
105461    +run;
105464    +data &indata3;
105465    +    set  &indata3 ;
105466    +    length RSqWithOwnClusComp 8.;
105467    +    Cluster = Variable;
105468    +    RSqWithOwnClusComp = 1;
105469    +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
105470    +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
105471    +    length Type $16;
105472    +    Type = 'ClusterComp';
105473    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
105475    +;
105476    +run;
105478    +proc sort data=&outdata;
105479    +    by Cluster;
105480    +run;
105481    +proc sort data =&indata3;
105482    +    by Cluster;
105483    +run;
105485    +data &outdata;
105486    +     set &outdata &indata3;
105487    +     by Cluster;
105488    +run;
105491    +/* Create the Selected variable with all YES */
105493    +data &outdata;
105494    +     set &outdata;
105495    +     length RsqRatio 8.;
105496    +     length Selected $8;
105497    +     *label RSqRatio = "1-R**2 Ratio";
105498    +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
105499    +     *label Selected = "Variable Selected";
105500    +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
105501    +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
105502    +     Selected ='YES';
105503    +     rename _LABEL_ = Label;
105504    +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
105505    +run;
105508    +/*----  Selected = Y/N will be assigened at the %score                   -------+
105509    +        Just create the Selected variable with all YES at the step above
105510    + +------------------------------------------------------------------------------+
105512    +proc sort data=&outdata;
105513    +    by Cluster RsqRatio;
105514    +run;
105516    +%if &selectedcomp eq CLUSTERCOMP %then %do;
105517    +data &outdata;
105518    +     set &outdata; by Cluster;
105519    +     length Selected $8;
105520    +     label Selected = "Variable Selected";
105521    +     if  first.Cluster then Selected ='Yes';
105522    +     else Selected = 'No';
105523    +    run;
105524    +%end;
105525    +%else %do;
105526    +data &outdata(drop = _var _varchange);
105527    +     set &outdata; retain _var 0; by Cluster;
105528    +     length Selected $8;
105529    +     label Selected = "Variable Selected";
105530    +     if first.Cluster then  _varchange = 0;
105531    +     else _varchange =1;
105532    +     if _var ne _varchange then  Selected  = 'Yes';
105533    +     else Selected = 'No';
105534    +     if last.cluster then  _var = 0;
105535    +     else _var = _varchange;
105536    +run;
105537    +%end;
105539    +--------------------------------------------------------------*/
105541    +quit;
105542    +%mend MakeVarClusResultTable;
105544    +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
105545    +     proc sort data =&indata;
105546    +        by cluster;
105547    +     run;
105548    +     proc transpose data =&indata
105549    +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
105550    +          by cluster;
105551    +     run;
105552    +     data &outdata;
105553    +          set  &outdata;
105554    +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105555    +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105556    +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
105557    +     run;
105558    +     %if &globalclusid ne %then %do;
105559    +     data &outdata;
105560    +          Length GCluster $16;
105561    +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
105562    +          set  &outdata;
105563    +          GCluster ="GC&globalclusid.";
105564    +          run;
105565    +     %end;
105567    +%Mend MakePlotDataFromCorrTable;
105570    +%macro MakeCorrelation(indata=,
105571    +                       outstat=_tmpoutstat,
105572    +                       corrmatrix=N,
105573    +                       outcorr=_tmpoutcorr,
105574    +                       includeclassvar=N,
105575    +                       target=,
105576    +                       freq=,
105577    +                       weight=);
105578    +   %if &target eq  %then %do;
105580    +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
105581    +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
105582    +       %if &includeclassvar eq Y %then %do;
105583    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
105584    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
105585    +          %do i = 2 %to &nvar;
105586    +          %let varname = %sysfunc(varname(&dsid, &i));
105587    +          &varname
105588    +          %end;
105589    +       %end;
105590    +       ;
105591    +      %if &freq ne  %then %do;
105592    +          freq &freq;
105593    +      %end;
105594    +      %if &weight ne  %then %do;
105595    +          weight &weight;
105596    +      %end;
105598    +      run;
105599    +      %if &corrmatrix eq Y %then %do;
105600    +      data  &outcorr (drop = _NCL_ _TYPE_);
105601    +           set  &outstat ;
105602    +           if _TYPE_ ='CORR' then output;
105603    +      run;
105604    +      %end;
105605    +    %end;
105606    +    %else %do;
105607    +       proc corr data=&indata outp=&outstat noprint;
105608    +            var
105609    +       %let dsid = %sysfunc(open(&indata));
105610    +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
105611    +          %do i = 1 %to &nvar;
105612    +              %let _name = %sysfunc(varname(&dsid, &i));
105613    +              %if &_name ne &target %then;
105614    +              &_name
105615    +           %end;
105616    +        %let dsid= %sysfunc(close(&dsid));
105617    +        ;
105618    +        with &target;
105619    +        run;
105620    +    %end;
105621    +    quit;
105622    +%mend MakeCorrelation;
105625    +%macro MakeCorrelationDistance(indata=,
105626    +                               outdata=,
105627    +                               rsquare = N
105628    +                               );
105629    +    data corr_tmp;
105630    +        set &indata;
105631    +        if _N_ = 1 then do;
105632    +           output;
105633    +           stop;
105634    +         end;
105635    +    run;
105636    +    %if &outdata ne  %then %let  _outdata = &outdata;
105637    +    %else %let _outdata = &indata;
105639    +    data &_outdata;
105640    +         set &indata;
105642    +         %let dsid = %sysfunc(open(work.corr_tmp));
105643    +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
105644    +          %do i = 2 %to &nvar;
105645    +              %let _name = %sysfunc(varname(&dsid, &i));
105646    +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
105647    +              %else  %let _name_md = &_name;
105648    +              &_name = 1- &_name_md;
105649    +          %end;
105650    +      %let dsid= %sysfunc(close(&dsid));
105651    +      run;
105652    +      proc datasets lib = work nolist;
105653    +           delete corr_tmp;
105654    +      run;
105655    +      quit;
105656    +  %mend MakeCorrelationDistance;
105659    +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
105660    +                                   rsquare = N
105661    +                                   );
105662    +    data corr_tmp;
105663    +        set &indata;
105664    +    run;
105665    +    proc sql noprint;
105666    +           update &indata
105667    +           set
105668    +     %let dsid = %sysfunc(open(work.corr_tmp));
105669    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
105670    +          %do i = 4 %to &nvar;
105671    +          %let _name = %sysfunc(varname(&dsid, &i));
105672    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
105673    +            %else  %let _name_md = &_name;
105674    +            %if &i < &nvar %then %do;
105675    +               &_name = 1- &_name_md ,
105676    +            %end;
105677    +            %else %do;
105678    +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
105679    +            %end;
105680    +          %end;
105681    +      %let dsid= %sysfunc(close(&dsid));
105683    +      select * from &indata;
105684    +      run;
105685    +     data &indata( drop = _NCL_);
105686    +           set &indata;
105687    +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
105688    +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
105689    +     run;
105690    +     data &indata(DROP = _NCL_);
105691    +           set &indata;
105692    +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
105693    +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
105694    +           rename _NAME_ = _VAR_;
105695    +     run;
105696    +     proc datasets lib = work nolist;
105697    +           delete corr_tmp;
105698    +     run;
105699    +     quit;
105700    + %mend UpdateOutStatCorrToDistance;
105703    +%macro HierClusWithCorr(indata= ,
105704    +                        ncluster=,
105705    +                        method = Ward,
105706    +                        outtree = _outtree,
105707    +                        idvar =_VAR_,
105708    +                        outdata=,
105709    +                        rescore = N,
105710    +                        newncluster=
105711    +                        );
105712    +      %global &newncluster;
105713    +      %if &rescore ne Y %then %do;
105714    +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
105715    +                   method=&method outtree=&outtree noprint;
105716    +           id &idvar;
105717    +      run;
105718    +      %end;
105719    +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
105720    +      run;
105721    +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
105722    +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
105723    +      run;
105724    +      data _outcontent;
105725    +          set _outcontent;
105726    +          if NAME in ('_TYPE_' , '_VAR_') then delete;
105727    +          index = 1;
105728    +          rename NAME = _NAME_;
105729    +      run;
105730    +      proc sort data=_outcontent;
105731    +          by _NAME_;
105732    +      run;
105733    +      proc sort data =&outdata;
105734    +           by _NAME_;
105735    +      run;
105736    +      data &outdata(drop=index);
105737    +          merge &outdata _outcontent;
105738    +          by _NAME_;
105739    +          if index = . then delete;
105740    +      run;
105741    +      /*-----------------------------------------------------------*/
105742    +      data &outdata;
105743    +           length CLUSNAME $16;
105744    +           set &outdata;
105745    +           if CLUSTER > &ncluster then delete;
105746    +           CLUSNAME='GC'||strip(CLUSTER);
105747    +           *label CLUSNAME = "Cluster Name";
105748    +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
105749    +           rename _NAME_ = VARIABLE ;
105750    +           *label _NAME_ = "Variable";
105751    +           *label CLUSTER = "Cluster";
105752    +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
105753    +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
105754    +      run;
105755    +      proc sort data=&outdata out=&outdata;
105756    +           by CLUSTER;
105757    +      run;
105758    +      proc means data =&outdata noprint;
105759    +           output out=_meanout;
105760    +      run;
105761    +      data _null_;
105762    +            set _meanout;
105763    +            if strip(_STAT_) eq 'MAX' then do;
105764    +            call symput("&newncluster", CLUSTER);
105765    +            stop;
105766    +            end;
105767    +      run;
105769    +      proc datasets lib = work nolist;
105770    +           delete _outcontent _meanout;
105771    +      run;
105772    +      quit;
105773    +%mend  HierClusWithCorr;
105775    +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
105777    +     data _tmpindata;
105778    +          set &indata;
105779    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
105780    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
105781    +          if _TYPE_ = 'STD' then _NAME_='STD';
105782    +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
105783    +          DROP _TYPE_ _NCL_;
105784    +     run;
105786    +     filename _file_  "&fileRef";
105788    +     data _null_;
105789    +        FILE _file_ MOD;
105790    +        put ' ';
105791    +        put "/*-------------------------------------------------*/";
105792    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
105793    +        put "/*-------------------------------------------------*/";
105794    +        put ' ';
105795    +        %let dsid = %sysfunc(open(work._tmpindata));
105797    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
105798    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
105799    +        %let k = 1;
105800    +        %do %while(^%sysfunc(fetch(&dsid)));
105801    +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
105802    +               %if &k > 2 %then %do;
105803    +                %let cn = %eval(&k-2);
105804    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
105805    +                %end;
105806    +                %let k = %eval(&k+1);
105808    +        %end;
105809    +        %let rc = %sysfunc(rewind(&dsid));
105811    +        %do j= 2 %to &nvar;
105812    +            %let _varname = %sysfunc(varname(&dsid, &j));
105813    +            %do %while(^%sysfunc(fetch(&dsid)));
105814    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
105815    +                %if &_name = MEAN %then
105816    +                %let _mean = %sysfunc(getvarn(&dsid, &j));
105817    +                %else %if &_name = STD %then
105818    +                %let _std = %sysfunc(getvarn(&dsid, &j));
105819    +                %else %do;
105820    +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
105821    +                      %let abscoeff = %sysfunc(abs(&coeff));
105822    +                          %if &abscoeff >  0 %then %do;
105823    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
105824    +                           %end;
105825    +                 %end;
105826    +             %end;
105827    +             %let rc = %sysfunc(rewind(&dsid));
105828    +         %end;
105830    +        %let dsid= %sysfunc(close(&dsid));
105832    +     run;
105834    +     filename _file_;
105835    +     proc datasets lib = work nolist;
105836    +           delete _tmpindata;
105837    +     run;
105838    +     quit;
105839    +%mend CreateScoreCode2;
105842    +%macro MakeDeltaCode2(groupds=,deltacodefile=);
105844    +     /*--- Build Code to Modify Metadata ---*/
105845    +     filename X "&deltacodefile";
105846    +     data _null_;
105847    +        FILE X;
105848    +        set &groupds end=eof;
105849    +        if _N_=1 then do;
105850    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
105851    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
105852    +           %end;
105853    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
105854    +           put "if upcase(strip(NAME)) in (";
105855    +        end;
105856    +        if Strip(upcase(Selected)) eq 'YES' then do;
105857    +           string = '"'!!trim(left(VARIABLE))!!'"';
105858    +           put string;
105859    +        end;
105860    +        if eof then do;
105861    +           put ') then ROLE="INPUT";';
105862    +           put 'else ROLE="REJECTED";';
105863    +           put 'end;';
105865    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
105866    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
105867    +           %end;
105868    +        end;
105869    +     run;
105870    +     quit;
105872    +     filename X;
105873    +     quit;
105874    +%mend MakeDeltaCode2;
105876    +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
105877    +  %global &ngc;
105878    +  data _null_;
105879    +  %if &indata ne %then %do;
105880    +      %let dsid = %sysfunc(open(&indata));
105881    +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
105882    +      %let dsid = %sysfunc(close(&dsid));
105883    +  %end;
105884    +  %else %do;
105885    +       %let nvar = %eval(&ninput+&ndummy); ;
105886    +  %end;
105887    +  %let numgc = %eval(&nvar/&div+2);
105888    +  %let &ngc = &numgc;
105889    +   run;
105890    +  quit;
105891    +%mend getInitialGClusterNumber;
105894    +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
105895    +data &outlink(drop = Selected);
105896    +     set &indata;
105897    +     LINKID = _N_;
105898    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
105899    +run;
105900    +data &outnode(keep=NODEID TYPE LABEL);
105901    +    set &indata;
105902    +    length TYPE $16;
105903    +    rename VARIABLE = NODEID;
105904    +    *label  CLUSNAME="Node ID";
105905    +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
105906    +    TYPE = "VARIABLE";
105907    +    *label TYPE = "Node Type";
105908    +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
105909    +    run;
105910    +data _tmp(keep=NODEID TYPE LABEL);
105911    +    set &indata;
105912    +    length TYPE $16;
105913    +    rename CLUSNAME = NODEID;
105914    +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
105915    +    TYPE = "GCLUSTER";
105916    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
105917    +    run;
105918    +proc sort data=_tmp;
105919    +    by NODEID;
105920    +run;
105921    +data _tmp;
105922    +    set _tmp; by NODEID;
105923    +    if first.NODEID then output;
105924    +run;
105925    +proc sort data=&outnode;
105926    +    by NODEID;
105927    +run;
105928    +data  &outnode;
105929    +    set _tmp &outnode;
105930    +run;
105931    +proc datasets lib = work nolist;
105932    +     delete _tmp;
105933    +run;
105934    +quit;
105935    +%mend MakeGobalConstellData;
105937    +/* Make contellation plot data among GCLUSTERS */
105939    +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
105941    +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
105942    +     set &indata;
105943    +     LINKID = _N_;
105944    +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
105945    +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
105946    +     end;
105947    +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
105948    +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
105949    +     end;
105950    +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
105951    +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
105952    +    end;
105953    +run;
105955    +data _tmp_outrsquare;
105956    +        set &inoutrsq;
105957    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
105958    +run;
105960    +proc freq data =_tmp_outrsquare noprint;
105961    +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
105962    +run;
105964    +data &outnode(keep=_NAME_ TYPE LABEL);
105965    +    set &outlink;
105966    +    length TYPE $16;
105967    +    length LABEL $100;
105968    +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
105970    +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
105971    +    TYPE = "GCLUSTER";
105972    +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
105973    +    end;
105974    +    else do;
105975    +    TYPE= "ROOT";
105976    +    LABEL= _NAME_;
105977    +    end;
105978    +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
105979    +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
105980    +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
105981    +    run;
105983    +proc sort data=&outnode;
105984    +     by _NAME_;
105985    +proc sort data=_tmp_GCLUSFREQ;
105986    +     by _NAME_;
105987    +run;
105989    +data  &outnode;
105990    +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
105991    +     if COUNT=. then COUNT=1;
105992    +run;
105994    +proc datasets lib = work nolist;
105995    +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
105996    +run;
105998    +quit;
105999    +%Mend MakeGClusterConstData;
106002    +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
106004    +    data _gscoretmpds;
106005    +          set &indata;
106006    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
106007    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
106008    +          if _TYPE_ = 'STD' then _NAME_='STD';
106009    +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
106010    +          DROP _TYPE_ _NCL_;
106011    +     run;
106013    +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
106014    +        GCluster Component &globalclusid ------ */
106016    +    filename _file_  "&fileref";
106018    +    data _null_;
106019    +        %if &globalclusid eq 1 %then %do;
106020    +          FILE _file_;
106021    +        %end;
106022    +        %else %do;
106023    +          FILE _file_ MOD;
106024    +        %end;
106026    +        %let dsid = %sysfunc(open(work._gscoretmpds));
106027    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
106028    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
106030    +        %let k = 1;
106031    +        %do %while(^%sysfunc(fetch(&dsid)));
106032    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
106033    +                %if &k > 2 %then %do;
106034    +                put "&_name = 0 ; ";
106035    +                %end;
106036    +                %let k = %eval(&k+1);
106037    +        %end;
106039    +        %let rc = %sysfunc(rewind(&dsid));
106040    +        %do i= 2 %to &nvar;
106041    +            %let _varname =  %sysfunc(varname(&dsid, &i));
106042    +            %do %while(^%sysfunc(fetch(&dsid)));
106043    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
106044    +                %if &_name = MEAN %then
106045    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
106046    +                %else %if &_name = STD %then
106047    +                %let _std = %sysfunc(getvarn(&dsid, &i));
106048    +                %else %do;
106049    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
106050    +                      %let abscoeff = %sysfunc(abs(&coeff));
106051    +                          %if &abscoeff >  0 %then %do;
106052    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
106053    +                           %end;
106054    +                 %end;
106055    +             %end;
106056    +             %let rc = %sysfunc(rewind(&dsid));
106058    +         %end;
106060    +        %let dsid= %sysfunc(close(&dsid));
106061    +       run;
106064    +       proc datasets lib=work nolist;
106065    +            delete _gscoretmpds;
106066    +       run;
106067    +      quit;
106069    +%mend CreateGClusterScoreCode;
106072    +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
106074    +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
106075    +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
106076    +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
106077    +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
106078    +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
106079    +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
106080    +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
106081    +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
106082    +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
106083    +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
106084    +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
106085    +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
106086    +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
106087    +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
106089    +   filename gsfile "&gscorecode";
106091    +   data &EM_USER_GSCORE;
106092    +             set &indata;
106093    +             %include  gsfile;
106094    +        keep
106095    +        %do i=1 %to &ngcluster;
106096    +         %let gcvarname = GC&i;
106097    +         &gcvarname
106098    +        %end;
106099    +     ;
106100    +   run;
106102    +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
106103    +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
106104    +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
106105    +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
106106    +    noprint  ;
106107    +     var
106108    +       %do i=1 %to &ngcluster;
106109    +         %let gcvarname = GC&i;
106110    +         &gcvarname
106111    +        %end;
106112    +   ;
106113    +   run;
106116    +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
106117    +   data &EM_USER_GSCORECORRPLOT ;
106118    +        set &EM_USER_GSCORECORRPLOT;
106119    +        rename _X_ = X;
106120    +        rename _Y_ = Y;
106121    +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
106122    +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
106123    +   run;
106125    +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
106127    +   data &EM_USER_GSCORETREE;
106128    +        length _NAME_ $32;
106129    +        length _LABEL_ $100;
106130    +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
106131    +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
106132    +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
106133    +        end;else do;
106134    +         _LABEL_ = _NAME_;
106135    +        end;
106136    +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
106138    +   run;
106140    +   quit;
106142    +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
106147    +%macro train;
106149    +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
106150    +   %include temp;
106151    +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
106152    +   %include temp;
106153    +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
106154    +   %include temp;
106155    +   filename temp;
106157    +   %let VARCLUS_MAXNUMOBS = 100000;
106158    +   %let VARCLUS_MAXNUMVAR = 200;
106159    +   %let trainnum = 0;
106160    +   %let error = 0;
106162    +   %if &EM_IMPORT_DATA eq %then %do;
106163    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106164    +       %let  error = 1;
106165    +       %goto endtrain;
106166    +   %end;
106168    +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
106169    +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106170    +        %let  error = 1;
106171    +        %goto endline;
106172    +    %end;
106174    +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
106175    +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
106176    +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
106177    +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
106178    +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
106179    +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
106181    +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
106182    +        %if  &_num_input_total < 2 %then %do;
106183    +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106184    +            %let error = 2;
106185    +            %goto endtrain;
106186    +        %end;
106187    +   %end;
106188    +   %else %do;
106189    +         %if  &_num_input_interval < 2 %then %do;
106190    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106191    +         %let error = 2;
106192    +         %goto endtrain;
106193    +         %end;
106194    +   %end;
106196    +   %em_checkerror();
106198    +   %if &EMEXCEPTIONSTRING ne %then %do;
106199    +       %goto endtrain;
106200    +   %end;
106202    +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
106204    +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
106205    +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
106206    +                             outvar=&EM_USER_OUTDUMMY,
106207    +                             outdata=_newtrainds,
106208    +                             fileref=&EM_FILE_EMFLOWSCORECODE);
106210    +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106211    +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
106212    +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106213    +                proc datasets lib=work nolist;
106214    +                delete  _newtrainds;
106215    +                run;
106216    +                quit;
106217    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
106218    +                %let error = 3;
106219    +               %goto endtrain;
106220    +            %end;
106221    +        %end;
106223    +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
106224    +             %getNVar(inds=_newtrainds, nvar=_nvar);
106226    +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
106227    +                %let trainnum = 2;
106228    +            %end;
106229    +            %else %do;
106230    +                %let trainnum = 1;
106231    +            %end;
106232    +        %end;
106233    +    %end;
106234    +    %else %do;
106236    +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106238    +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
106240    +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106242    +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
106243    +                  %let error = 3;
106244    +                 %goto endtrain;
106245    +            %end;
106246    +        %end;
106249    +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
106250    +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
106251    +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
106252    +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
106253    +                %let trainnum = 2;
106254    +            %end;
106255    +            %else %do;
106256    +                %let trainnum = 1;
106257    +            %end;
106258    +        %end;
106260    +   %end;
106262    +    %em_checkerror();
106264    +    %if &EMEXCEPTIONSTRING ne %then %do;
106265    +       %let error = 4;
106266    +       %goto endtrain;
106267    +    %end;
106269    +    %CreateVarclusMeta(trainnum=&trainnum);
106271    +    %if &error > 0 %then  %goto endtrain;
106273    +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
106275    +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
106276    +           %train1;
106277    +       %end;
106278    +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
106279    +           %train2;
106280    +       %end;
106282    +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
106283    +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
106284    +      %em_copyfile(infref=_in, outfref=_out);
106285    +      filename _in;
106286    +      filename _out;
106289    +   %endtrain:
106292    +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
106294    +%macro VarClus(indata=,
106295    +               outstat=,
106296    +               outtree=,
106297    +               vars=,
106298    +               freq=,
106299    +               weight=,
106300    +               includeclassvar=
106301    +               );
106303    +   %if &vars eq %then
106304    +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
106306    +       proc varclus data = &indata outstat= &outstat
106307    +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
106308    +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
106309    +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
106310    +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
106311    +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
106312    +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
106313    +       %end;
106315    +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
106316    +            maxeigen = &EM_PROPERTY_MAXEIGEN
106317    +       %end;
106319    +       %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
106320    +            proportion = &EM_PROPERTY_PROPORTION
106321    +       %end;
106322    +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
106323    +               summary
106324    +       %end;
106326    +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
106327    +           short
106328    +       %end;
106329    +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
106330    +           corr trace simple
106331    +       %end;
106332    +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
106333    +          noprint
106334    +       %end;
106335    +       outtree=&outtree
106336    +       ;
106337    +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
106339    +      %if &includeclassvar eq Y %then %do;
106340    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
106341    +          %if &dsid > 0 %then %do;
106342    +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
106343    +              %do i = 2 %to &nvar;
106344    +                  %let varname = %sysfunc(varname(&dsid, &i));
106345    +                   &varname
106346    +              %end;
106348    +          %end;
106349    +      %end;
106351    +      ;
106352    +      /*------------------------
106353    +      %if &freq ne  %then %do;
106354    +          freq &freq;
106355    +      %end;
106356    +      %if &weight ne  %then %do;
106357    +          weight &weight;
106358    +      %end;
106359    +      ----------------------------*/
106360    +      %if %EM_FREQ ne %then %do;
106361    +           Freq %EM_FREQ;
106362    +      %end;
106363    +      ;
106364    +    run;
106365    +    %endline:
106366    +    quit;
106367    +%mend VarClus;
106369    +%macro Train1;
106371    +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
106372    +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
106373    +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
106374    +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
106375    +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
106376    +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
106377    +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
106378    +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
106379    +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
106380    +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
106381    +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
106382    +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
106383    +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
106385    +   /*
106386    +     %let VARCLUS_MAXNUMOBS = 100;
106387    +     %let VARCLUS_MAXNUMVAR = 200;
106388    +   */
106390    +   /* Train
106392    +   %if &EM_IMPORT_DATA eq %then %do;
106393    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106394    +       %goto endtrain1;
106395    +   %end;
106397    +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
106398    +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106399    +        %goto endtrain1;
106400    +   %end;
106401    +   */
106402    +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
106403    +       /* moved this to pretrain ------------
106405    +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
106406    +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
106407    +                             outvar=&EM_USER_OUTDUMMY,
106408    +                             outdata=_newtrainds,
106409    +                             fileref=&EM_FILE_EMFLOWSCORECODE);
106411    +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106412    +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
106413    +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
106414    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
106415    +                %goto endtrain;
106416    +            %end;
106417    +        %end;
106419    +        +-------------------------------------*/
106421    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
106422    +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
106423    +          There is no _newtrainds */
106424    +         %VarClus( indata=&EM_IMPORT_DATA,
106425    +                  outstat=&EM_USER_OUTSTAT,
106426    +                  outtree = &EM_USER_OUTTREE,
106427    +                  includeclassvar=N
106428    +                 );
106429    +        %end;
106430    +        %else %do;
106431    +        %VarClus( indata=_newtrainds,
106432    +                  outstat=&EM_USER_OUTSTAT,
106433    +                  outtree = &EM_USER_OUTTREE,
106434    +                  includeclassvar=Y
106435    +                 );
106436    +         proc datasets lib=work nolist;
106437    +              delete  _newtrainds;
106438    +         run;
106439    +         %end;
106440    +    %end;
106441    +    %else %do;
106443    +        /*----- moved this to pretrain ------------
106444    +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106445    +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
106446    +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
106447    +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
106448    +                 %goto endtrain;
106449    +            %end;
106450    +        %end;
106451    +        +-------------------------------------*/
106453    +        %VarClus(indata=&EM_IMPORT_DATA,
106454    +                  outstat=&EM_USER_OUTSTAT,
106455    +                  outtree =&EM_USER_OUTTREE,
106456    +                  includeclassvar=N
106457    +               );
106459    +   %end;
106461    +   %em_checkerror();
106463    +   %if &EMEXCEPTIONSTRING ne %then %do;
106464    +       %goto endtrain1;
106465    +   %end;
106466    +    /*
106467    +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
106468    +    */
106470    +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
106472    +    %let gid=;
106474    +    /*--- To make the main result table ----------------------*/
106476    +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
106477    +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
106478    +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
106479    +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
106480    +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
106481    +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
106483    +   /* Inter Cluster Correlation Plot ------------------------*/
106485    +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
106486    +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
106488    +   /* Create some other data sets for results ----*/
106490    +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
106491    +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
106492    +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
106494    +  /*---- move this to Score action ------------
106495    +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
106496    +   */
106498    +   /* create score code at training time */
106499    +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
106500    +   %endtrain1:
106501    +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
106504    +%macro VarClus2( indata=,
106505    +                 outdata=,
106506    +                 outstat =outstat,
106507    +                 outrsquare=outrsquare,
106508    +                 outtree = outtree,
106509    +                 outclusstruct = outclusstruct,
106510    +                 outcluscorr =outcluscorr,
106511    +                 outcluscorrplot =outcluscorrplot,
106512    +                 outclusrsquare =outclusrsquare,
106513    +                 outstatplot = outstatplot,
106514    +                 outcorr = outcorr,
106515    +                 outcorrplot = outcorrplot,
106516    +                 clusdata=,
106517    +                 outnode=outnode,
106518    +                 outlink=outlink,
106519    +                 ngroup =1  );
106520    +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
106521    +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106522    +              %goto endline;
106523    +         %end;
106525    +        %global numglobalcluster;
106526    +        %let  numglobalcluster = &ngroup;
106527    +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
106528    +        %do vci =1 %to &ngroup;
106529    +           data tmp_clusdata;
106530    +                set &clusdata;
106531    +                if CLUSTER ne &vci then delete;
106532    +           run;
106533    +           %let outstatds = &outstat.&vci;
106534    +           %let outrsquareds = &outrsquare.&vci;
106535    +           %let outtreeds = &outtree.&vci;
106536    +           %let outclusstuctds = &outclusstruct.&vci;
106537    +           %let outcluscorrds = &outcluscorr.&vci;
106538    +           %let outcluscorrplotds = &outcluscorrplot.&vci;
106539    +           %let outclusrsquareds = &outclussquare.&vci;
106540    +           %let outstatplotds = &outstatplot.&vci;
106541    +           %let outcorrds = &outcorr.&vci;
106542    +           %let outcorrplotds = &outcorrplot.&vci;
106543    +           %let outnodeds = &outnode.&vci;
106544    +           %let outlinkds = &outlink.&vci;
106546    +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
106547    +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
106548    +           %let emuseroutstat = &EM_USER_&outstatds;
106550    +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
106551    +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
106552    +           %let emuserouttree = &EM_USER_&outtreeds;
106554    +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
106555    +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
106556    +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
106558    +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
106559    +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
106560    +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
106562    +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
106563    +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
106564    +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
106566    +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
106567    +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
106568    +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
106570    +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
106571    +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
106572    +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
106574    +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
106575    +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
106576    +           %let emuseroutcorr = &EM_USER_&outcorrds;
106578    +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
106579    +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
106580    +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
106582    +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
106583    +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
106584    +           %let emuseroutnode = &EM_USER_&outnodeds;
106586    +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
106587    +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
106588    +           %let emuseroutlink = &EM_USER_&outlinkds;
106590    +           proc varclus data=&indata outstat=&emuseroutstat
106591    +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
106592    +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
106593    +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
106594    +            %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
106595    +                %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
106596    +                %if &maxc > 1 %then %do;     maxc=&maxc %end;
106597    +           %end;
106599    +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) %then %do;
106600    +            maxeigen = &EM_PROPERTY_MAXEIGEN
106601    +            %end;
106603    +           %if %upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT %then %do;
106604    +                proportion = &EM_PROPERTY_PROPORTION
106605    +           %end;
106606    +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
106607    +               summary
106608    +           %end;
106609    +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
106610    +               short
106611    +           %end;
106612    +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
106613    +               corr trace simple
106614    +           %end;
106615    +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
106616    +               noprint
106617    +           %end;
106618    +              outtree=&emuserouttree
106619    +           ;
106620    +           var
106621    +           %let dsid=%sysfunc(open(work.tmp_clusdata));
106622    +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
106623    +                %do %while(^%sysfunc(fetch(&dsid)));
106624    +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
106625    +                    &_varname
106626    +                %end;
106627    +            %let dsid = %sysfunc(close(&dsid));
106628    +           ;
106629    +           %if %EM_FREQ ne %then %do;
106630    +           Freq %EM_FREQ;
106631    +           %end;
106632    +           run;
106634    +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
106636    +            %let gid=&vci;
106637    +            /*--- To make the main result table ----------------------*/
106638    +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
106639    +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
106640    +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
106641    +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
106642    +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
106643    +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
106645    +            /* Inter Cluster Correlation Plot ------------------------*/
106647    +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
106648    +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
106650    +           /* Create some other data sets for results ---------------*/
106652    +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
106653    +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
106654    +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
106656    +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
106658    +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
106660    +           %if &vci = 1 %then %do;
106661    +           data &EM_USER_OUTRSQUARE;
106662    +                set &emuseroutrsquare;
106663    +           run;
106664    +           %end;
106665    +           %else %do;
106666    +           data &EM_USER_OUTRSQUARE;
106667    +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
106668    +           run;
106669    +           %end;
106670    +           quit;
106671    +       %end;
106673    +       /*---- move this to Score action ------------
106674    +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
106675    +       */
106677    +       /* Make Score Gcluster component & correlation  */
106678    +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
106680    +       quit;
106681    +       %endline:
106682    +%mend VarClus2;
106685    +%macro Train2;
106687    +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
106688    +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
106689    +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
106690    +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
106691    +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
106692    +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
106693    +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
106694    +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
106695    +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
106696    +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
106697    +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
106698    +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
106699    +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
106700    +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
106701    +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
106702    +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
106703    +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
106704    +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
106708    +    /* Train */
106710    +   /* moved to pretrain ------------
106712    +   %if &EM_IMPORT_DATA eq %then %do;
106713    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
106714    +       %goto endtrain2;
106715    +   %end;
106717    +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
106718    +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
106719    +        %goto endtrain2;
106720    +   %end;
106721    +   +-------------------------------------------*/
106723    +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
106726    +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
106728    +        /*----- moved to pretrain ------------
106730    +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
106731    +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
106732    +                             outvar=&EM_USER_OUTDUMMY,
106733    +                             outdata=_newtrainds,
106734    +                             fileref=&EM_FILE_EMFLOWSCORECODE,
106735    +                              ndummyvars=_ndummyvars
106736    +                            );
106738    +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106739    +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
106740    +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106741    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
106742    +                %goto endtrain;
106743    +            %end;
106744    +        %end;
106746    +        +---------------------------------------*/
106747    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
106748    +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
106749    +          There is no _newtrainds */
106750    +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
106751    +                             outstat=&EM_USER_GOUTSTAT,
106752    +                             corrmatrix=Y,
106753    +                             outcorr=&EM_USER_GOUTCORR,
106754    +                             includeclassvar=N,
106755    +                             freq =%EM_FREQ
106756    +                          );
106757    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
106759    +        %end;
106760    +        %else %do;
106761    +         %MakeCorrelation(   indata=_newtrainds,
106762    +                             outstat=&EM_USER_GOUTSTAT,
106763    +                             corrmatrix=Y,
106764    +                             outcorr=&EM_USER_GOUTCORR,
106765    +                             includeclassvar=Y,
106766    +                             freq =%EM_FREQ
106767    +                          );
106768    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
106770    +        %end;
106772    +    %end;
106773    +    %else %do;
106775    +        /* moved to pretrain -------------------
106777    +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
106778    +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
106779    +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
106780    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
106781    +                %goto endtrain;
106782    +            %end;
106783    +        %end;
106784    +         +------------------------------------------*/
106786    +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
106787    +                          outstat=&EM_USER_GOUTSTAT,
106788    +                          corrmatrix=Y,
106789    +                          outcorr=&EM_USER_GOUTCORR,
106790    +                          includeclassvar=N,
106791    +                          freq =%EM_FREQ
106792    +                          );
106793    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
106794    +    %end;
106796    +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
106797    +                                rsquare = N
106798    +                                );
106799    +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
106800    +                      ncluster=&_ngc,
106801    +                      method = Ward,
106802    +                      outtree =&EM_USER_GOUTTREE,
106803    +                      idvar = _VAR_,
106804    +                      outdata=&EM_USER_GOUTGROUP,
106805    +                      rescore = N,
106806    +                      newncluster=_newnclus
106807    +                        );
106809    +   /* store the number of global cluster */
106811    +   data &EM_USER_VARCLUSMETA;
106812    +        set &EM_USER_VARCLUSMETA;
106813    +        NGCluster = &_newnclus;
106814    +   run;
106816    +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
106818    +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
106819    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
106820    +            %VarClus2(indata=&EM_IMPORT_DATA,
106821    +                 clusdata=&EM_USER_GOUTGROUP,
106822    +                 ngroup=&_newnclus);
106823    +         %end;
106824    +         %else %do;
106825    +             %VarClus2(indata=_newtrainds,
106826    +                 clusdata=&EM_USER_GOUTGROUP,
106827    +                 ngroup=&_newnclus);
106829    +         %end;
106831    +   %end;
106832    +   %else %do;
106833    +       %VarClus2(indata=&EM_IMPORT_DATA,
106834    +                 clusdata=&EM_USER_GOUTGROUP,
106835    +                 ngroup=&_newnclus);
106836    +   %end;
106838    +   %em_checkerror();
106839    +   %if &EMEXCEPTIONSTRING ne %then %do;
106840    +       %put &em_codebar;
106841    +       %put Error: Variable clustering failed.;
106842    +       %put &em_codebar;
106843    +       %goto endtrain2;
106844    +   %end;
106845    +   /*
106846    +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
106847    +   */
106848    +   %endtrain2:
106849    +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
106851    +%macro em_copyfile(infref=, outfref=, append=N);
106853    +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
106855    +       %let omode =;
106856    +       %if &append=Y %then
106857    +           %let omode = MOD;
106858    +       data _null_;
106859    +          length line $20000;
106860    +          file &outfref &omode lrecl=20000;
106861    +          fid=fopen("&infref",'i',20000,'v');
106862    +          if fid > 0  then do;
106863    +             do while(^fread(fid));
106864    +                rlen = frlen(fid);
106865    +                rc= fget(fid,line,20000);
106866    +                start = length(line)-length(left(line))+1;
106867    +                line=strip(line);
106868    +                put @start line;
106869    +             end;
106870    +             if fid > 0  then rc=fclose(fid);
106871    +          end;
106872    +       run;
106874    +   %end;
106875    +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
106876     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.Part_TRAIN end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      15:34
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
106877     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS8.VarClus_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "CLUSTERCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;
 
NOTE: The data set EMWS8.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   proc varclus data = EMWS8.Part_TRAIN outstat= EMWS8.VarClus_OUTSTAT hi maxc=8 short outtree=EMWS8.VarClus_OUTTREE ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome Year_Birth
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS8.VARCLUS_OUTSTAT has 175 observations and 27 variables.
NOTE: The data set EMWS8.VARCLUS_OUTTREE has 35 observations and 8 variables.
NOTE: The PROCEDURE VARCLUS printed page 39.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
106878     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS8.VarClus_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:20
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS3 = CLUS3**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS4 = CLUS4**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS5 = CLUS5**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS6 = CLUS6**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS7 = CLUS7**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS8 = CLUS8**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORR has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS8.VarClus_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 64 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 64 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 56 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 56 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      101:25
NOTE: Variable GCluster is uninitialized.
NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:12
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      12:6
NOTE: Variable GCluster is uninitialized.
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS8.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   AcceptedCmpTotal = AcceptedCmpTotal**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Age = Age**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Frq = Frq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Income = Income**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Kidhome = Kidhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Mnt = Mnt**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFishProducts = MntFishProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntFruits = MntFruits**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntGoldProds = MntGoldProds**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntMeatProducts = MntMeatProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntSweetProducts = MntSweetProducts**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MntWines = MntWines**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MonthsAsCustomer = MonthsAsCustomer**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumCatalogPurchases = NumCatalogPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDealsPurchases = NumDealsPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumDistPurchases = NumDistPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumStorePurchases = NumStorePurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebPurchases = NumWebPurchases**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   NumWebVisitsMonth = NumWebVisitsMonth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RFMstat = RFMstat**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   RMntFrq = RMntFrq**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Recency = Recency**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Teenhome = Teenhome**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   Year_Birth = Year_Birth**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSSTRUCT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS8.VarClus_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 192 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 192 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 168 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 168 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 24 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 24 observations read from the data set WORK._OWNRSQ.
NOTE: There were 24 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 24 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: There were 8 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 8 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      18:12
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      18:6
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 8 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename AcceptedCmpTotal = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label AcceptedCmpTotal = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Age = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Age = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Frq = CLUS3;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Frq = "Cluster 3";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Income = CLUS4;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Income = "Cluster 4";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Kidhome = CLUS5;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Kidhome = "Cluster 5";
MPRINT(MAKEINTERCLUSCORRDATA):   rename Mnt = CLUS6;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label Mnt = "Cluster 6";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFishProducts = CLUS7;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFishProducts = "Cluster 7";
MPRINT(MAKEINTERCLUSCORRDATA):   rename MntFruits = CLUS8;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label MntFruits = "Cluster 8";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS8.VarClus_OUTCLUSCORRPLOT out=EMWS8.VarClus_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS8.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 64 observations read from the data set EMWS8.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCLUSCORRPLOT has 64 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   data EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS8.VarClus_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS8.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATPLOT has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORR has 24 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS8.VarClus_OUTCORR out=EMWS8.VarClus_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 24 observations read from the data set EMWS8.VARCLUS_OUTCORR.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 384 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      137:27
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 384 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS8.VarClus_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This may cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 384 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS8.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 576 observations read from the data set EMWS8.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS8.VARCLUS_OUTCORRPLOT has 576 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;
 
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTLINK has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS8.VarClus_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;
 
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTNODE has 32 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS8.VarClus_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS8.VarClus_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 8 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;
 
NOTE: There were 175 observations read from the data set EMWS8.VARCLUS_OUTSTAT.
NOTE: The data set EMWS8.VARCLUS_OUTSTATSCORE has 10 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CREATESCORECODE):   filename _file_ "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus3 = 0 ; /*---" "Cluster Component 3" "------ */";
MPRINT(CREATESCORECODE):   put "Clus4 = 0 ; /*---" "Cluster Component 4" "------ */";
MPRINT(CREATESCORECODE):   put "Clus5 = 0 ; /*---" "Cluster Component 5" "------ */";
MPRINT(CREATESCORECODE):   put "Clus6 = 0 ; /*---" "Cluster Component 6" "------ */";
MPRINT(CREATESCORECODE):   put "Clus7 = 0 ; /*---" "Cluster Component 7" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = 0 ; /*---" "Cluster Component 8" "------ */";
MPRINT(CREATESCORECODE):   put "Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;";
MPRINT(CREATESCORECODE):   put "Clus3 = Clus3+1 * (MonthsAsCustomer - 83.5724515585509)/16.947242674662;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;";
MPRINT(CREATESCORECODE):   put "Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;";
MPRINT(CREATESCORECODE):   put "Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;";
MPRINT(CREATESCORECODE):   put "Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;";
MPRINT(CREATESCORECODE):   put "Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;";
MPRINT(CREATESCORECODE):   run;
 
NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=20. April 2016 16.22 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 37 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _out lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_in",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file _OUT is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=20. April 2016 16.22 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 37 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 91.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106879
106880     *------------------------------------------------------------*;
106881     * End TRAIN: VarClus;
106882     *------------------------------------------------------------*;
 
106883     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
106884     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
106885     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106886     ;
MPRINT(EM_DIAGRAM):   ;
106887     ;
MPRINT(EM_DIAGRAM):   ;
106888     ;
MPRINT(EM_DIAGRAM):   ;
106889     ;
MPRINT(EM_DIAGRAM):   ;
106890     quit;
MPRINT(EM_DIAGRAM):   quit;
106891     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106892     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
106893     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
106894     /*; *"; *'; */
106895     ;
MPRINT(EM_DIAGRAM):   ;
106896     run;
MPRINT(EM_DIAGRAM):   run;
106897     quit;
MPRINT(EM_DIAGRAM):   quit;
106898     /* Reset EM Options */
106899     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
106900     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
106901     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                16.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0GL210Q "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0GL210Q new;
MPRINT(EM_DIAGRAM):   run;
107003     %let EMEXCEPTIONSTRING=;
107004     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
107005     * SCORE: VarClus;
MPRINT(EM_DIAGRAM):   * SCORE: VarClus;
107006     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
107007     %let EM_ACTION = SCORE;
107008     %let syscc = 0;
107009
107010     %macro main;
107011
107012        filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
107013        %include temp;
107014        filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
107015        %include temp;
107016        filename temp;
107017
107018       %SetProperties;
107019
107020        %if %upcase(&EM_ACTION) = CREATE %then %do;
107021            filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
107022            %include temp;
107023            filename temp;
107024            %create;
107025        %end;
107026        %else
107027        %if %upcase(&EM_ACTION) = TRAIN %then %do;
107028             filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
107029                %include temp;
107030                filename temp;
107031                %train;
107032        %end;
107033        %else
107034        %if %upcase(&EM_ACTION) = SCORE %then %do;
107035                filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
107036                %include temp;
107037                filename temp;
107038                %score;
107039        %end;
107040        %else
107041        %if %upcase(&EM_ACTION) = REPORT %then %do;
107042                filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
107043                %include temp;
107044                filename temp;
107045                %report;
107046        %end;
107047        /*
107048        %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
107049            %put 'OPENING TABLE';
107050        %end;
107051        %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
107052            %put 'CLOSE TABLE';
107053        %end;
107054        */
107055     %mend main;
107056     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
107058    +/* Initialize property macro variables */
107059    +%macro SetProperties;
107060    +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
107061    +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
107062    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
107063    +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
107064    +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
107065    +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
107066    +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
107067    +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
107068    +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
107069    +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
107070    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
107071    +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
107072    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
107074    +%mend SetProperties;
107076    +%Macro MakeDummyVariables(indata=,
107077    +                          outvar=,
107078    +                          outdata=,
107079    +                          fileref=,
107080    +                          recreatecmeta=N, /* optional */
107081    +                          incmeta=,     /* optional */
107082    +                          outcmeta=,    /* optional */
107083    +                          ndummyvars=_ndummyvars
107084    +                          );
107085    +    %global &ndummyvars;
107087    +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
107088    +       class
107089    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
107090    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
107091    +    ;
107092    +    run;
107093    +    %let &ndummyvars = 0;
107094    +    data _null_;
107095    +    %let dsid = %sysfunc(open(work._classout));
107096    +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
107097    +    %let dsid = %sysfunc(close(&dsid));
107098    +    run;
107100    +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
107101    +       input
107102    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
107103    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
107104    +        / level=nominal stdize=no;
107105    +       make outvar = &outvar;
107106    +       score data = &indata out =&outdata;
107107    +       code  file=  "&fileref";
107108    +    run;
107109    +    %if &recreatecmeta eq Y %then %do;
107110    +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
107111    +    data _tmpds;
107112    +        set _tmpds;
107113    +           ROLE = 'INPUT';
107114    +           LEVEL = 'INTERVAL';
107115    +           CREATOR='DMZIP';
107116    +           if NAME = '_TYPE_' then delete;
107117    +    run;
107118    +    data &outcmeta;
107119    +         set &incmeta _tmpds;
107120    +    run;
107121    +    %end;
107122    +    proc datasets lib=work nolist;
107123    +      delete  _dmdbdat _dmdbcat _classout
107124    +    %if &recreatecmeta eq Y %then %do;
107125    +    _tmpds
107126    +    %end;
107127    +    ;
107128    +    quit;
107129    +%Mend MakeDummyVariables;
107131    +/*--- Determine Optimal Number of Cluster ----
107132    +%macro FindClusNum(statds=, groupds=, minvariation=);
107133    +   %global optnclus;
107134    +   data varclus_tmp(drop=_NAME_);
107135    +      set &statDs;
107136    +      where _type_ ='PROPOR';
107137    +   run;
107138    +   proc sort data=varclus_tmp;
107139    +      by _NCL_;
107140    +   run;
107141    +   proc transpose data=varclus_tmp out=varclus_tmp;
107142    +      by _NCL_;
107143    +      var %EM_INTERVAL_INPUT
107144    +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
107145    +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
107146    +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
107147    +          %do i = 2 %to &nvar;
107148    +          %let varname = %sysfunc(varname(&dsid, &i));
107149    +          &varname
107150    +          %end;
107151    +      %end;
107152    +   ;
107153    +   run;
107155    +   %if &minVariation eq %then %do;
107156    +       %let minVariation = &EM_PROPERTY_MINVARIATION;
107157    +   %end;
107158    +   %if ^(0<&minVariation<100) %then %do;
107159    +       %let minVariation = 90;
107160    +   %end;
107162    +   data _null_;
107163    +      set varclus_tmp end=eof;
107164    +      by _NCL_;
107165    +      retain flag 0;
107166    +      if first._ncl_ then flag=0;
107167    +      if .<col1 < &minVariation then flag=1;
107168    +      if last._ncl_ and ^flag then do;
107169    +         call symput('OPTNCL', _ncl_);
107170    +         stop;
107171    +      end;
107172    +     if eof then call symput('OPTNCL', _ncl_);
107173    +   run;
107175    +   %let optnclus = &OPTNCL;
107177    +   data varclus_tmp(drop=_NCL_ _NAME_);
107178    +      set &statDs;
107179    +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
107180    +   run;
107181    +   proc sort data=varclus_tmp;
107182    +      by _TYPE_;
107183    +   run;
107184    +   proc transpose data=varclus_tmp out=varclus_tmp;
107185    +      by _TYPE_;
107186    +   run;
107187    +   proc sort data=varclus_tmp;
107188    +      by _name_ _type_;
107189    +   run;
107191    +  proc transpose data=varclus_tmp out=&groupds;
107192    +      by _NAME_;
107193    +   run;
107194    +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
107195    +      by Cluster descending Rsquare;
107196    +      where Cluster ne 0;
107197    +   run;
107198    +   proc datasets lib=work nolist mt=(DATA VIEW);
107199    +      delete varclus_tmp;
107200    +   run;
107201    +   quit;
107202    +%mend findClusNum;
107203    +*/
107205    +%macro getNclusfromTrain(inoutstat=, nc=);
107206    +%global &nc;
107207    +data _null_;
107208    +    set &inoutstat end=eof;
107209    +    if eof then do;
107210    +    call symput("&nc", _ncl_);
107211    +    end;
107212    +run;
107213    +%mend  getNclusfromTrain;
107215    +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
107217    +     *--- Build Code to Modify Metadata ---*;
107218    +     filename X "&deltacodefile";
107219    +     data _null_;
107220    +        FILE X;
107221    +        set &groupds end=eof;
107222    +        /*by Cluster;*/
107223    +         if _N_=1 then do;
107224    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
107225    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
107226    +           %end;
107227    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
107228    +           put "if upcase(strip(NAME)) in (";
107229    +        end;
107230    +        if Strip(upcase(Selected)) eq 'YES' then do;
107231    +           string = '"'!!trim(left(VARIABLE))!!'"';
107232    +           put string;
107233    +        end;
107234    +        if eof then do;
107235    +           put ') then ROLE="INPUT";';
107236    +           put 'else ROLE="REJECTED";';
107237    +           put 'end;';
107239    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
107240    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
107241    +           %end;
107242    +        end;
107243    +     run;
107244    +     quit;
107246    +     filename X;
107248    +     quit;
107249    +%mend MakeDeltaCode;
107251    +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
107252    +    %if ^%sysfunc(exist(&statds)) %then %do;
107253    +         %goto doendc;
107254    +    %end;
107256    +    data &corrds(drop=_TYPE_ _NCL_) ;
107257    +       set &statds;
107258    +       where _type_ eq 'CORR' ;
107259    +    run ;
107260    +    proc sort data=&corrds;
107261    +       by _NAME_ ;
107262    +    run ;
107263    +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
107264    +      BY _NAME_ ;
107265    +    run ;
107266    +    data &corrplotds;
107267    +       length _Y_ $100;
107268    +       set &corrplotDs;
107269    +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
107270    +    run ;
107271    +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
107272    +       set &corrplotds;
107273    +       where _LABEL_ ne '' ;
107274    +       keep _TMP_ _LABEL_ ;
107275    +    run ;
107276    +    data _null_;
107277    +       nobs=0;
107278    +       dsid = open('varclus_match');
107279    +       if dsid then do;
107280    +          nobs = attrn(dsid, 'NOBS');
107281    +          dsid = close(dsid);
107282    +       end;
107283    +       call symput ('CORR_NOBS', nobs);
107284    +    run;
107285    +    %if &corr_nobs %then %do;
107286    +        proc sort data=varclus_match;
107287    +           by _name_;
107288    +        run ;
107289    +        proc sort data=&corrplotds;
107290    +           by _name_;
107291    +        run ;
107292    +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
107293    +           merge varclus_match &corrplotds;
107294    +           by _NAME_ ;
107295    +           if _X_ eq '' then _X_=_NAME_ ;
107296    +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
107297    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
107298    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
107300    +       run ;
107301    +    %end;
107302    +    %else %do;
107303    +        proc sort data=&corrplotds;
107304    +           by _name_;
107305    +        run ;
107306    +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
107307    +           set &corrplotds;
107308    +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
107309    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
107310    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
107312    +        run ;
107313    +    %end;
107314    +    proc sort data=&corrplotds;
107315    +       by _X_ _Y_;
107316    +    run ;
107317    +    proc datasets lib=work nolist mt=(DATA VIEW);
107318    +       delete varclus_match;
107319    +    run;
107320    +    quit;
107322    +%doendc:
107324    +%mend MakeVarClusCorrData;
107326    +%macro MakeStatPlotData(statds= , outstatplotds=);
107327    +   %if %sysfunc(exist(&statds)) %then %do;
107329    +       data varclus_tmp(drop=_NAME_ _NCL_) ;
107330    +          set &statDs;
107331    +          where _type_ in('MEAN', 'STD', 'N');
107332    +       run ;
107333    +       proc transpose data=varclus_tmp out=&outstatplotds;
107334    +          id _TYPE_ ;
107335    +       run ;
107336    +       data &outstatplotds;
107337    +          set &outstatplotds(obs=1000);
107338    +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
107339    +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
107340    +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
107341    +          else SCALEDSTD= STD ;
107342    +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
107343    +       run ;
107344    +       proc sort data=&outstatplotds;
107345    +          by descending SCALEDSTD ;
107346    +       run ;
107347    +       proc datasets lib=work nolist mt=(DATA VIEW);
107348    +          delete varclus_tmp;
107349    +       run;
107350    +       quit;
107351    +    %end;
107353    +%mend MakeStatPlotData;
107356    +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
107357    +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
107358    +    data &EM_USER_OUTSTATSCORE;
107359    +          set &indata;
107360    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
107361    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
107362    +          if _TYPE_ = 'STD' then _NAME_='STD';
107363    +          DROP _TYPE_ _NCL_;
107364    +     run;
107366    +     filename _file_  "&fileRef";
107368    +     data _null_;
107369    +        FILE _file_ MOD;
107370    +        put ' ';
107371    +        put '/*-------------------------------------------------*/';
107372    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
107373    +        put '/*-------------------------------------------------*/';
107374    +        put ' ';
107375    +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
107377    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
107378    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
107380    +        %let k = 1;
107381    +        %do %while(^%sysfunc(fetch(&dsid)));
107382    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
107383    +                %if &k > 2 %then %do;
107384    +                 %let cn = %eval(&k-2);
107385    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
107386    +                %end;
107387    +                %let k = %eval(&k+1);
107388    +        %end;
107390    +        %let rc = %sysfunc(rewind(&dsid));
107392    +        %do i= 2 %to &nvar;
107393    +            %let _varname =  %sysfunc(varname(&dsid, &i));
107394    +            %do %while(^%sysfunc(fetch(&dsid)));
107395    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
107396    +                %if &_name = MEAN %then
107397    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
107398    +                %else %if &_name = STD %then
107399    +                %let _std = %sysfunc(getvarn(&dsid, &i));
107400    +                %else %do;
107401    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
107402    +                      %let abscoeff = %sysfunc(abs(&coeff));
107403    +                          %if &abscoeff >  0 %then %do;
107404    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
107405    +                           %end;
107406    +                 %end;
107407    +             %end;
107408    +             %let rc = %sysfunc(rewind(&dsid));
107409    +         %end;
107411    +        %let dsid= %sysfunc(close(&dsid));
107412    +       run;
107413    +%mend CreateScoreCode;
107417    +/*----------------------------------------------------------
107418    +    Instead of using %MakeRSquareData,
107419    +    %MakeVarClusResultTable at macro2.source is used
107420    + +----------------------------------------------------------*/
107423    +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
107425    +/* modifying  from ods rsquare = data */
107427    +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
107428    +    Length Cluster $16;
107429    +    length Variable $32;
107430    +    Length VariableLabel $64;
107431    +    set &indata; retain CurrentCluster;
107432    +    if NumberOfClusters ^= &ncluster then delete;
107433    +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
107434    +    CurrentCluster = Cluster;
107435    +   run;
107436    +proc sort data =&outdata ;
107437    +     by Cluster RsquareRatio;
107438    +run;
107439    +data _tmprsq(drop=index);
107440    +     set &outdata; by Cluster;
107441    +     if first.Cluster then do;
107442    +     index = strip(scan(Cluster,2 ));
107443    +     Variable = "Clus"||index;
107444    +     VariableLabel = "Cluster Component "||index;
107445    +     OwnCluster = 1;
107446    +     NextClosest = .;
107447    +     RsquareRatio = 0;
107448    +     output;
107449    +     end;
107450    +run;
107452    +proc sort data = _tmprsq ;
107453    +     by Cluster RsquareRatio;
107454    +run;
107455    +data &outdata;
107456    +     set &outdata _tmprsq;
107457    +by Cluster;
107458    +run;
107461    +/* Just create the Selected variable with all YES */
107463    +data &outdata;
107464    +    set &outdata; by cluster;
107465    +    length Selected $8;
107466    +    Selected = 'YES';
107467    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
107468    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
107469    +    rename OwnCluster = RSqWithClusterComp;
107470    +    rename NextClosest = RSqWithNextClusComp;
107471    +run;
107474    +/* Selected = Y/N will be done %score section -----
107476    +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
107477    +data &outdata;
107478    +    set &outdata; by cluster;
107479    +    length Selected $8;
107480    +    if first.Cluster then Selected = 'YES';
107481    +    else Selected = 'NO';
107482    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
107483    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
107484    +    rename OwnCluster = RSqWithClusterComp;
107485    +    rename NextClosest = RSqWithNextClusComp;
107486    +run;
107487    +%end;
107488    +%else %do;
107489    +data &outdata;
107490    +    set &outdata; by cluster;
107491    +    if last.Cluster then Selected = 'YES';
107492    +    else Selected = 'NO';
107493    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
107494    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
107495    +    rename OwnCluster = RSqWithClusterComp;
107496    +    rename NextClosest = RSqWithNextClusComp;
107497    +run;
107498    +%end;
107499    +---------------------------------------------------------------*/
107501    +%if %sysfunc(exist(&inClusRSquare)) %then %do;
107502    +/* to calculate NextClosestClusRsq */
107503    +proc transpose data = &inClusRSquare  out=_clusRsq;
107504    +      by cluster;
107505    +      run;
107506    +data _clusRsq;
107507    +     set _clusRsq;
107508    +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
107509    +run;
107511    +proc sort data=_clusRsq;
107512    +    by cluster col1;
107513    +    run;
107514    +data _clusRsq(drop=_NAME_ _LABEL_);
107515    +     set _clusRsq; by cluster;
107516    +     if last.Cluster then output;
107517    +     label  COL1 = 'R-Sqaure with Next Cluster Component';
107518    +     rename COL1 = RSqWithNextClusComp;
107519    +     rename Cluster = Variable;
107520    +     label  Cluster = "Variable";
107521    +run;
107523    +proc sort data =&outdata;
107524    +     by Variable;
107525    +run;
107526    +data &outdata;
107527    +    merge &outdata _clusRsq;
107528    +    by Variable;
107529    +run;
107530    +proc sort data =&outdata;
107531    +by Cluster  RsquareRatio;
107532    +run;
107533    +quit;
107534    +%end;
107536    +proc datasets lib = work nolist;
107537    +     delete _tmprsq _clusRsq;
107538    +     run;
107539    +quit;
107541    +%mend MakeRSquareData;
107544    +/*-------------------------------------------------------------------------*/
107548    +%macro ModifyCorr(indata=,
107549    +                  outdata=,
107550    +                  rsquare = Y
107551    +                  );
107552    +    data corr_tmp;
107553    +        set &indata;
107554    +    run;
107555    +     proc sql;
107556    +           update &indata
107557    +           set
107558    +     %let dsid = %sysfunc(open(work.corr_tmp));
107559    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
107560    +          %do i = 4 %to &nvar;
107561    +          %let _name = %sysfunc(varname(&dsid, &i));
107562    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
107563    +            %else  %let _name_md = &_name;
107564    +            %if &i < &nvar %then %do;
107565    +               &_name = 1- &_name_md ,
107566    +            %end;
107567    +            %else %do;
107568    +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
107569    +            %end;
107570    +          %end;
107571    +      %let dsid= %sysfunc(close(&dsid));
107573    +      select * from &indata;
107574    +      run;
107575    +      proc datasets lib = work nolist;
107576    +           delete corr_tmp;
107577    +      run;
107578    +      quit;
107580    + %mend ModifyCorr;
107582    + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
107583    +    data &outdata(drop= _NCL_  _TYPE_);
107584    +       set &indata;
107585    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
107586    +       rename _NAME_ = Cluster;
107587    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
107588    +    run;
107589    +    %if &RSquare eq Y %then %do;
107590    +     data corr_tmp;
107591    +        set &outdata;
107592    +     run;
107594    +     data &outdata(drop=i);
107595    +          set &outdata;
107596    +          %let dsid = %sysfunc(open(work.corr_tmp));
107597    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
107598    +          %do i = 2 %to &nvar;
107599    +            %let _name = %sysfunc(varname(&dsid, &i));
107600    +            %let _name_md = &_name.**2;
107601    +                &_name = &_name_md;
107602    +          %end;
107603    +      %let dsid= %sysfunc(close(&dsid));
107604    +      run;
107605    +      proc datasets lib = work nolist;
107606    +           delete corr_tmp;
107607    +      run;
107609    +    %end;
107610    +     quit;
107611    +%mend MakeClusStructCorrData;
107613    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
107614    +    data &outdata(drop= _NCL_  _TYPE_);
107615    +       set &indata;
107616    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
107617    +       rename _NAME_ = Cluster;
107618    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
107619    +    run;
107620    +    data corr_tmp;
107621    +        set &outdata;
107622    +    run;
107624    +    %let dsid = %sysfunc(open(work.corr_tmp));
107625    +    %let nclus2= %eval(&ncluster+1);
107626    +    data &outdata;
107627    +         set &outdata;
107628    +          %do i = 2 %to &nclus2;
107629    +          %let i_1 = %eval(&i-1);
107630    +            %let _name = %sysfunc(varname(&dsid, &i));
107631    +            %let _newName = Clus&i_1;
107632    +                rename &_name = &_newName; ;
107633    +                *label &_name ="Cluster &i_1";
107634    +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
107635    +          %end;
107636    +          keep Cluster
107637    +          %do i = 2 %to &nclus2;
107638    +                %let _name = %sysfunc(varname(&dsid, &i));
107639    +                &_name
107640    +          %end;
107641    +          ;
107642    +    %let dsid= %sysfunc(close(&dsid));
107643    +     run;
107644    +     quit;
107646    +    %if &RSquare eq Y %then %do;
107648    +       data corr_tmp;
107649    +        set &outdata;
107650    +     run;
107652    +     data &outdata(drop=i);
107653    +          set &outdata;
107654    +          %let dsid = %sysfunc(open(work.corr_tmp));
107655    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
107656    +          %do i = 2 %to &nvar;
107657    +            %let _name = %sysfunc(varname(&dsid, &i));
107658    +            %let _name_md = &_name.**2;
107659    +                &_name = &_name_md;
107660    +          %end;
107661    +      %let dsid= %sysfunc(close(&dsid));
107662    +      run;
107663    +    %end;
107665    +    %if &makeplotds eq Y %then %do;
107666    +     proc transpose data = &outdata
107667    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
107668    +          by cluster;
107669    +     run;
107670    +     data &plotds;
107671    +          set  &plotds;
107672    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
107673    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
107674    +     run;
107675    +     %end;
107676    +     proc datasets lib = work nolist;
107677    +           delete corr_tmp;
107678    +     run;
107679    +     quit;
107680    +%mend MakeInterClusCorrData;
107683    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
107685    +data &outlink(drop = Selected);
107686    +     set &indata;
107687    +     LINKID = _N_;
107688    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
107689    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
107690    +run;
107691    +data &outnode(keep=NODEID TYPE LABEL);
107692    +    set &indata;
107693    +    length TYPE $16;
107694    +    rename Variable = NODEID;
107695    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
107696    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
107697    +    then  TYPE = "CLUSTER";
107698    +    else  TYPE="VARIABLE";
107699    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
107700    +run;
107701    +quit;
107702    +%mend MakeClusConstellData;
107706    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
107708    +data &outlink(drop = Selected);
107709    +     set &indata;
107710    +     LINKID = _N_;
107711    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
107712    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
107713    +run;
107714    +data &outnode(keep=NODEID TYPE LABEL);
107715    +    set &indata;
107716    +    length TYPE $16;
107717    +    rename Variable = NODEID;
107718    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
107719    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
107720    +    then  TYPE = "CLUSTER";
107721    +    else  TYPE="VARIABLE";
107722    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
107723    +run;
107724    +quit;
107725    +%mend MakeClusConstellData;
107728    +/*--- This will work only when inds is not a view data -------
107730    +%macro getNVarNObs(inds=, nvar=, nobs=);
107732    +    %global &nvar;
107733    +    %global &nobs;
107734    +    data _null_;
107735    +         dsid = open("&inds");
107736    +         nv = attrn(dsid, 'NVAR');
107737    +         no = attrn(dsid, 'NOBS');
107738    +         dsid = close(dsid);
107739    +         call symput("&nvar", nv);
107740    +         call symput("&nobs", no);
107741    +    run;
107742    +    quit;
107743    +%mend  getNVarNObs;
107745    ++---------------------------------------------------------------*/
107748    +%macro getNVar(inds=, nvar=);
107749    +    %global &nvar;
107750    +    data _null_;
107751    +         dsid = open("&inds");
107752    +         nv = attrn(dsid, 'NVAR');
107753    +         dsid = close(dsid);
107754    +         call symput("&nvar", nv);
107755    +    run;
107756    +    quit;
107757    +%mend  getNVar;
107761    +%macro getNObs(inds=, nobs=);
107762    +    %global &nobs;
107763    +    data _null_;
107764    +        set &inds end=eof;
107765    +        if eof then call symput("&nobs", _N_);
107766    +    run;
107767    +    quit;
107768    +%mend  getNObs;
107770    +%Macro CreateVarclusMeta(trainnum=);
107771    +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
107772    +    data &EM_USER_VARCLUSMETA;
107773    +         length TrainNum 8.;
107774    +         length NewTrain $8;
107775    +         length NGCluster 8.;
107776    +         length ExportedComp $16;
107777    +         length HideVariable $8;
107778    +         TrainNum = &trainnum;
107779    +         NewTrain = "Y";
107780    +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
107781    +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
107782    +         NGCluster = 0; /* zero means no twostage */
107783    +   run;
107784    +   quit;
107785    +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
107787    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
107788    +    data &outdata(drop= _NCL_  _TYPE_);
107789    +       set &indata;
107790    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
107791    +       %if &globalclusid ne %then %do;
107792    +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
107793    +       rename _NAME_ = Cluster;
107794    +       %end;
107795    +       %else %do;
107796    +        _NAME_ = upcase(_NAME_);
107797    +       rename _NAME_ = Cluster;
107798    +       %end;
107799    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
107800    +    run;
107801    +    data corr_tmp;
107802    +        set &outdata;
107803    +    run;
107805    +    %let dsid = %sysfunc(open(work.corr_tmp));
107806    +    %let nclus2= %eval(&ncluster+1);
107807    +    data &outdata;
107808    +         set &outdata;
107809    +          %do i = 2 %to &nclus2;
107810    +          %let i_1 = %eval(&i-1);
107811    +            %let _name = %sysfunc(varname(&dsid, &i));
107812    +            %if &globalclusid ne %then
107813    +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
107814    +                     rename &_name = &_newName;
107815    +                     *label &_name ="GC &globalclusid : Cluster &i_1";
107816    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
107817    +                %end;
107818    +            %else
107819    +                %do; %let _newName = CLUS&i_1;
107820    +                     rename &_name = &_newName;
107821    +                     *label &_name ="Cluster &i_1";
107822    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
107823    +                %end;
107824    +          %end;
107825    +          keep Cluster
107826    +          %do i = 2 %to &nclus2;
107827    +                %let _name = %sysfunc(varname(&dsid, &i));
107828    +                &_name
107829    +          %end;
107830    +          ;
107831    +    %let dsid= %sysfunc(close(&dsid));
107832    +     run;
107833    +     quit;
107835    +    %if &RSquare eq Y %then %do;
107837    +       data corr_tmp;
107838    +        set &outdata;
107839    +     run;
107841    +     data &outdata;
107842    +          set &outdata;
107843    +          %let dsid = %sysfunc(open(work.corr_tmp));
107844    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
107845    +          %do i = 2 %to &nvar;
107846    +            %let _name = %sysfunc(varname(&dsid, &i));
107847    +            %let _name_md = &_name.**2;
107848    +                &_name = &_name_md;
107849    +          %end;
107850    +      %let dsid= %sysfunc(close(&dsid));
107851    +      run;
107852    +    %end;
107854    +    %if &makeplotds eq Y %then %do;
107855    +     proc transpose data = &outdata
107856    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
107857    +          by cluster;
107858    +     run;
107859    +     data &plotds;
107860    +          set  &plotds;
107861    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
107862    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
107863    +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
107864    +     run;
107865    +     %end;
107866    +     proc datasets lib = work nolist;
107867    +           delete corr_tmp;
107868    +     run;
107869    +     quit;
107870    +%mend MakeInterClusCorrData;
107872    +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
107873    +    data _tmpds(drop= _NCL_);
107874    +       set &indata;
107875    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
107876    +       %if &globalclusid ne %then %do;
107877    +           _NAME_ = "GC&globalclusid.";
107878    +       rename _NAME_ = Cluster;
107879    +       %end;
107880    +       %else %do;
107881    +        _NAME_ = "CLUS";
107882    +        rename _NAME_ = Cluster;
107883    +       %end;
107884    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
107885    +    run;
107886    +    proc transpose data =_tmpds out =&outdata;
107887    +    run;
107889    +    data &outdata(drop=COL1);
107890    +        %if &globalclusid ne %then %do;
107891    +        length GCluster $16;
107892    +        %end;
107893    +        length Cluster $32;
107894    +        length _NAME_ $32;
107895    +         set &outdata;
107896    +         _NAME_ = upcase(_NAME_);
107897    +         rename _NAME_=Variable;
107898    +         *label _NAME_="Variable";
107899    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
107900    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
107901    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
107903    +         %if &globalclusid ne %then %do;
107904    +          GCluster = "GC&globalclusid";
107905    +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
107906    +         %end;
107907    +         %else %do;
107908    +         Cluster = "CLUS"||strip(COL1);
107909    +        %end;
107910    +         rename COL2 = RSqWithOwnClusComp;
107911    +         *label COL2 = "R-Square With Own Cluster Component";
107912    +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
107914    +   run;
107915    +   proc sort data =&outdata;
107916    +        by Cluster RSqWithOwnClusComp;
107917    +   run;
107918    +   proc datasets lib = work nolist;
107919    +           delete _tmpds;
107920    +   run;
107921    +   quit;
107922    +%mend MakeOwnRSquare;
107924    +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
107925    +    data &outdata(drop= _NCL_  _TYPE_);
107926    +       %if &globalclusid ne %then %do;
107927    +        length GCluster $16;
107928    +        %end;
107929    +       set &indata;
107930    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
107931    +       %if &globalclusid ne %then %do;
107932    +         GCluster = "GC&globalclusid";
107933    +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
107934    +         rename _NAME_ = Cluster;
107935    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
107936    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
107938    +       %end;
107939    +       %else %do;
107940    +         _NAME_ = upcase(_NAME_);
107941    +         rename _NAME_ = Cluster;
107942    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
107943    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
107945    +       %end;
107946    +     run;
107947    +    %if &RSquare eq Y %then %do;
107948    +     data corr_tmp;
107949    +          set &outdata;
107950    +     run;
107951    +     %let istart = 2;
107952    +     %if &globalclusid ne %then %let istart = 3;
107953    +     data &outdata;
107954    +          set &outdata;
107955    +          %let dsid = %sysfunc(open(work.corr_tmp));
107956    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
107957    +          %do i =&istart %to &nvar;
107958    +            %let _name = %sysfunc(varname(&dsid, &i));
107959    +            %let _name_md = &_name.**2;
107960    +                &_name = &_name_md;
107961    +          %end;
107962    +      %let dsid= %sysfunc(close(&dsid));
107963    +      run;
107964    +      proc datasets lib = work nolist;
107965    +           delete corr_tmp;
107966    +      run;
107967    +    %end;
107968    +     quit;
107969    +%mend MakeClusStructCorrData;
107971    +/*
107972    +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
107973    +*/
107975    +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
107977    +     /* The indata should be the outdata
107978    +        from %MakeClusStructCorrData(indata=, outdata=, ); */
107980    +     proc sort data =&indata out=_tmpclusRsq;
107981    +     by cluster;
107982    +     run;
107984    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
107985    +      by cluster;
107986    +     run;
107988    +     proc sort data=_tmpclusRsq;
107989    +        by _NAME_ COL1;
107990    +     run;
107992    +     data _tmpclusRsq;
107993    +         length _NAME_ $32;
107994    +         set _tmpclusRsq; by _NAME_;
107995    +          _NAME_ = upcase(_NAME_);
107996    +          %if &ncluster ne 1 %then %do;
107997    +             if last._NAME_ then delete;
107998    +          %end;
107999    +          %else %do;
108000    +             COL1 = 0;
108001    +          %end;
108002    +     run;
108003    +     /* need to sort again */
108004    +     proc sort data=_tmpclusRsq;
108005    +        by _NAME_ COL1;
108006    +     run;
108008    +     data &outdata;
108009    +         set _tmpclusRsq; by _NAME_;
108010    +         Cluster = upcase(Cluster);
108011    +         if last._NAME_ then output;
108012    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
108013    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
108014    +         rename COL1 = RSqWithNextClusComp;
108015    +         Cluster = upcase(Cluster);
108016    +         rename Cluster = ClosestCluster;
108017    +         *label  Cluster = "Next Closest Cluster";
108018    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
108019    +         rename _NAME_ = Variable;
108020    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
108021    +    run;
108024    +    %if &globalclusid ne %then %do;
108025    +    data &outdata;
108026    +       length GCluster $16;
108027    +       set &outdata;
108028    +       GCluster = "GC&globalclusid";
108029    +       run;
108030    +    %end;
108031    +    proc datasets lib = work nolist;
108032    +           delete _tmpclusRsq;
108033    +    run;
108034    +    quit;
108035    +%mend FindNextClosestClusByVar;
108038    +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
108039    +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
108040    +     proc sort data =&indata out=_tmpclusRsq;
108041    +     by cluster;
108042    +     run;
108043    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
108044    +     by cluster;
108045    +     run;
108046    +     proc sort data=_tmpclusRsq;
108047    +        by _NAME_ col1;
108048    +     run;
108049    +     data _tmpclusRsq;
108050    +         length _NAME_ $32;
108051    +         set _tmpclusRsq; by _NAME_;
108052    +          _NAME_ = upcase(_NAME_);
108053    +          %if &ncluster ne 1 %then %do;
108054    +             if last._NAME_ then delete;
108055    +          %end;
108056    +          %else %do;
108057    +             COL1 = 0;
108058    +          %end;
108059    +     run;
108060    +     data &outdata;
108061    +         set _tmpclusRsq; by _NAME_;
108062    +         Cluster = upcase(Cluster);
108063    +         if last._NAME_ then output;
108064    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
108065    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
108066    +         rename COL1 = RSqWithNextClusComp;
108067    +         Cluster = upcase(Cluster);
108068    +         rename Cluster = ClosestCluster;
108069    +         *label  Cluster = "Next Closest Cluster";
108070    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
108071    +         rename _NAME_ = Variable;
108072    +         *label  _NAME_ = "Variable";
108073    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
108075    +    run;
108076    +    %if &globalclusid ne %then %do;
108077    +    data &outdata;
108078    +       length GCluster $16;
108079    +       set &outdata;
108080    +       GCluster = "GC&globalclusid";
108081    +       run;
108082    +    %end;
108084    +    proc datasets lib = work nolist;
108085    +           delete _tmpclusRsq;
108086    +    run;
108088    +    quit;
108089    +%mend FindNextClosestClusByCluster;
108091    +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
108092    +/*----
108093    +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
108094    +-----------*/
108096    +proc sort data =&indata1;
108097    +    by Variable;
108098    +run;
108099    +proc sort data =&indata2;
108100    +    by Variable;
108101    +run;
108102    +data &outdata;
108103    +    merge &indata1 &indata2;
108104    +    by Variable;
108105    +    length Type $16;
108106    +    Type = 'Variable';
108107    +    *label Type ='Type';
108108    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
108109    +run;
108112    +data &indata3;
108113    +    set  &indata3 ;
108114    +    length RSqWithOwnClusComp 8.;
108115    +    Cluster = Variable;
108116    +    RSqWithOwnClusComp = 1;
108117    +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
108118    +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
108119    +    length Type $16;
108120    +    Type = 'ClusterComp';
108121    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
108123    +;
108124    +run;
108126    +proc sort data=&outdata;
108127    +    by Cluster;
108128    +run;
108129    +proc sort data =&indata3;
108130    +    by Cluster;
108131    +run;
108133    +data &outdata;
108134    +     set &outdata &indata3;
108135    +     by Cluster;
108136    +run;
108139    +/* Create the Selected variable with all YES */
108141    +data &outdata;
108142    +     set &outdata;
108143    +     length RsqRatio 8.;
108144    +     length Selected $8;
108145    +     *label RSqRatio = "1-R**2 Ratio";
108146    +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
108147    +     *label Selected = "Variable Selected";
108148    +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
108149    +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
108150    +     Selected ='YES';
108151    +     rename _LABEL_ = Label;
108152    +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
108153    +run;
108156    +/*----  Selected = Y/N will be assigened at the %score                   -------+
108157    +        Just create the Selected variable with all YES at the step above
108158    + +------------------------------------------------------------------------------+
108160    +proc sort data=&outdata;
108161    +    by Cluster RsqRatio;
108162    +run;
108164    +%if &selectedcomp eq CLUSTERCOMP %then %do;
108165    +data &outdata;
108166    +     set &outdata; by Cluster;
108167    +     length Selected $8;
108168    +     label Selected = "Variable Selected";
108169    +     if  first.Cluster then Selected ='Yes';
108170    +     else Selected = 'No';
108171    +    run;
108172    +%end;
108173    +%else %do;
108174    +data &outdata(drop = _var _varchange);
108175    +     set &outdata; retain _var 0; by Cluster;
108176    +     length Selected $8;
108177    +     label Selected = "Variable Selected";
108178    +     if first.Cluster then  _varchange = 0;
108179    +     else _varchange =1;
108180    +     if _var ne _varchange then  Selected  = 'Yes';
108181    +     else Selected = 'No';
108182    +     if last.cluster then  _var = 0;
108183    +     else _var = _varchange;
108184    +run;
108185    +%end;
108187    +--------------------------------------------------------------*/
108189    +quit;
108190    +%mend MakeVarClusResultTable;
108192    +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
108193    +     proc sort data =&indata;
108194    +        by cluster;
108195    +     run;
108196    +     proc transpose data =&indata
108197    +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
108198    +          by cluster;
108199    +     run;
108200    +     data &outdata;
108201    +          set  &outdata;
108202    +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
108203    +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
108204    +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
108205    +     run;
108206    +     %if &globalclusid ne %then %do;
108207    +     data &outdata;
108208    +          Length GCluster $16;
108209    +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
108210    +          set  &outdata;
108211    +          GCluster ="GC&globalclusid.";
108212    +          run;
108213    +     %end;
108215    +%Mend MakePlotDataFromCorrTable;
108218    +%macro MakeCorrelation(indata=,
108219    +                       outstat=_tmpoutstat,
108220    +                       corrmatrix=N,
108221    +                       outcorr=_tmpoutcorr,
108222    +                       includeclassvar=N,
108223    +                       target=,
108224    +                       freq=,
108225    +                       weight=);
108226    +   %if &target eq  %then %do;
108228    +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
108229    +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
108230    +       %if &includeclassvar eq Y %then %do;
108231    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
108232    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
108233    +          %do i = 2 %to &nvar;
108234    +          %let varname = %sysfunc(varname(&dsid, &i));
108235    +          &varname
108236    +          %end;
108237    +       %end;
108238    +       ;
108239    +      %if &freq ne  %then %do;
108240    +          freq &freq;
108241    +      %end;
108242    +      %if &weight ne  %then %do;
108243    +          weight &weight;
108244    +      %end;
108246    +      run;
108247    +      %if &corrmatrix eq Y %then %do;
108248    +      data  &outcorr (drop = _NCL_ _TYPE_);
108249    +           set  &outstat ;
108250    +           if _TYPE_ ='CORR' then output;
108251    +      run;
108252    +      %end;
108253    +    %end;
108254    +    %else %do;
108255    +       proc corr data=&indata outp=&outstat noprint;
108256    +            var
108257    +       %let dsid = %sysfunc(open(&indata));
108258    +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
108259    +          %do i = 1 %to &nvar;
108260    +              %let _name = %sysfunc(varname(&dsid, &i));
108261    +              %if &_name ne &target %then;
108262    +              &_name
108263    +           %end;
108264    +        %let dsid= %sysfunc(close(&dsid));
108265    +        ;
108266    +        with &target;
108267    +        run;
108268    +    %end;
108269    +    quit;
108270    +%mend MakeCorrelation;
108273    +%macro MakeCorrelationDistance(indata=,
108274    +                               outdata=,
108275    +                               rsquare = N
108276    +                               );
108277    +    data corr_tmp;
108278    +        set &indata;
108279    +        if _N_ = 1 then do;
108280    +           output;
108281    +           stop;
108282    +         end;
108283    +    run;
108284    +    %if &outdata ne  %then %let  _outdata = &outdata;
108285    +    %else %let _outdata = &indata;
108287    +    data &_outdata;
108288    +         set &indata;
108290    +         %let dsid = %sysfunc(open(work.corr_tmp));
108291    +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
108292    +          %do i = 2 %to &nvar;
108293    +              %let _name = %sysfunc(varname(&dsid, &i));
108294    +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
108295    +              %else  %let _name_md = &_name;
108296    +              &_name = 1- &_name_md;
108297    +          %end;
108298    +      %let dsid= %sysfunc(close(&dsid));
108299    +      run;
108300    +      proc datasets lib = work nolist;
108301    +           delete corr_tmp;
108302    +      run;
108303    +      quit;
108304    +  %mend MakeCorrelationDistance;
108307    +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
108308    +                                   rsquare = N
108309    +                                   );
108310    +    data corr_tmp;
108311    +        set &indata;
108312    +    run;
108313    +    proc sql noprint;
108314    +           update &indata
108315    +           set
108316    +     %let dsid = %sysfunc(open(work.corr_tmp));
108317    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
108318    +          %do i = 4 %to &nvar;
108319    +          %let _name = %sysfunc(varname(&dsid, &i));
108320    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
108321    +            %else  %let _name_md = &_name;
108322    +            %if &i < &nvar %then %do;
108323    +               &_name = 1- &_name_md ,
108324    +            %end;
108325    +            %else %do;
108326    +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
108327    +            %end;
108328    +          %end;
108329    +      %let dsid= %sysfunc(close(&dsid));
108331    +      select * from &indata;
108332    +      run;
108333    +     data &indata( drop = _NCL_);
108334    +           set &indata;
108335    +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
108336    +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
108337    +     run;
108338    +     data &indata(DROP = _NCL_);
108339    +           set &indata;
108340    +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
108341    +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
108342    +           rename _NAME_ = _VAR_;
108343    +     run;
108344    +     proc datasets lib = work nolist;
108345    +           delete corr_tmp;
108346    +     run;
108347    +     quit;
108348    + %mend UpdateOutStatCorrToDistance;
108351    +%macro HierClusWithCorr(indata= ,
108352    +                        ncluster=,
108353    +                        method = Ward,
108354    +                        outtree = _outtree,
108355    +                        idvar =_VAR_,
108356    +                        outdata=,
108357    +                        rescore = N,
108358    +                        newncluster=
108359    +                        );
108360    +      %global &newncluster;
108361    +      %if &rescore ne Y %then %do;
108362    +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
108363    +                   method=&method outtree=&outtree noprint;
108364    +           id &idvar;
108365    +      run;
108366    +      %end;
108367    +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
108368    +      run;
108369    +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
108370    +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
108371    +      run;
108372    +      data _outcontent;
108373    +          set _outcontent;
108374    +          if NAME in ('_TYPE_' , '_VAR_') then delete;
108375    +          index = 1;
108376    +          rename NAME = _NAME_;
108377    +      run;
108378    +      proc sort data=_outcontent;
108379    +          by _NAME_;
108380    +      run;
108381    +      proc sort data =&outdata;
108382    +           by _NAME_;
108383    +      run;
108384    +      data &outdata(drop=index);
108385    +          merge &outdata _outcontent;
108386    +          by _NAME_;
108387    +          if index = . then delete;
108388    +      run;
108389    +      /*-----------------------------------------------------------*/
108390    +      data &outdata;
108391    +           length CLUSNAME $16;
108392    +           set &outdata;
108393    +           if CLUSTER > &ncluster then delete;
108394    +           CLUSNAME='GC'||strip(CLUSTER);
108395    +           *label CLUSNAME = "Cluster Name";
108396    +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
108397    +           rename _NAME_ = VARIABLE ;
108398    +           *label _NAME_ = "Variable";
108399    +           *label CLUSTER = "Cluster";
108400    +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
108401    +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
108402    +      run;
108403    +      proc sort data=&outdata out=&outdata;
108404    +           by CLUSTER;
108405    +      run;
108406    +      proc means data =&outdata noprint;
108407    +           output out=_meanout;
108408    +      run;
108409    +      data _null_;
108410    +            set _meanout;
108411    +            if strip(_STAT_) eq 'MAX' then do;
108412    +            call symput("&newncluster", CLUSTER);
108413    +            stop;
108414    +            end;
108415    +      run;
108417    +      proc datasets lib = work nolist;
108418    +           delete _outcontent _meanout;
108419    +      run;
108420    +      quit;
108421    +%mend  HierClusWithCorr;
108423    +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
108425    +     data _tmpindata;
108426    +          set &indata;
108427    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
108428    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
108429    +          if _TYPE_ = 'STD' then _NAME_='STD';
108430    +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
108431    +          DROP _TYPE_ _NCL_;
108432    +     run;
108434    +     filename _file_  "&fileRef";
108436    +     data _null_;
108437    +        FILE _file_ MOD;
108438    +        put ' ';
108439    +        put "/*-------------------------------------------------*/";
108440    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
108441    +        put "/*-------------------------------------------------*/";
108442    +        put ' ';
108443    +        %let dsid = %sysfunc(open(work._tmpindata));
108445    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
108446    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
108447    +        %let k = 1;
108448    +        %do %while(^%sysfunc(fetch(&dsid)));
108449    +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
108450    +               %if &k > 2 %then %do;
108451    +                %let cn = %eval(&k-2);
108452    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
108453    +                %end;
108454    +                %let k = %eval(&k+1);
108456    +        %end;
108457    +        %let rc = %sysfunc(rewind(&dsid));
108459    +        %do j= 2 %to &nvar;
108460    +            %let _varname = %sysfunc(varname(&dsid, &j));
108461    +            %do %while(^%sysfunc(fetch(&dsid)));
108462    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
108463    +                %if &_name = MEAN %then
108464    +                %let _mean = %sysfunc(getvarn(&dsid, &j));
108465    +                %else %if &_name = STD %then
108466    +                %let _std = %sysfunc(getvarn(&dsid, &j));
108467    +                %else %do;
108468    +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
108469    +                      %let abscoeff = %sysfunc(abs(&coeff));
108470    +                          %if &abscoeff >  0 %then %do;
108471    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
108472    +                           %end;
108473    +                 %end;
108474    +             %end;
108475    +             %let rc = %sysfunc(rewind(&dsid));
108476    +         %end;
108478    +        %let dsid= %sysfunc(close(&dsid));
108480    +     run;
108482    +     filename _file_;
108483    +     proc datasets lib = work nolist;
108484    +           delete _tmpindata;
108485    +     run;
108486    +     quit;
108487    +%mend CreateScoreCode2;
108490    +%macro MakeDeltaCode2(groupds=,deltacodefile=);
108492    +     /*--- Build Code to Modify Metadata ---*/
108493    +     filename X "&deltacodefile";
108494    +     data _null_;
108495    +        FILE X;
108496    +        set &groupds end=eof;
108497    +        if _N_=1 then do;
108498    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
108499    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
108500    +           %end;
108501    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
108502    +           put "if upcase(strip(NAME)) in (";
108503    +        end;
108504    +        if Strip(upcase(Selected)) eq 'YES' then do;
108505    +           string = '"'!!trim(left(VARIABLE))!!'"';
108506    +           put string;
108507    +        end;
108508    +        if eof then do;
108509    +           put ') then ROLE="INPUT";';
108510    +           put 'else ROLE="REJECTED";';
108511    +           put 'end;';
108513    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
108514    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
108515    +           %end;
108516    +        end;
108517    +     run;
108518    +     quit;
108520    +     filename X;
108521    +     quit;
108522    +%mend MakeDeltaCode2;
108524    +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
108525    +  %global &ngc;
108526    +  data _null_;
108527    +  %if &indata ne %then %do;
108528    +      %let dsid = %sysfunc(open(&indata));
108529    +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
108530    +      %let dsid = %sysfunc(close(&dsid));
108531    +  %end;
108532    +  %else %do;
108533    +       %let nvar = %eval(&ninput+&ndummy); ;
108534    +  %end;
108535    +  %let numgc = %eval(&nvar/&div+2);
108536    +  %let &ngc = &numgc;
108537    +   run;
108538    +  quit;
108539    +%mend getInitialGClusterNumber;
108542    +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
108543    +data &outlink(drop = Selected);
108544    +     set &indata;
108545    +     LINKID = _N_;
108546    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
108547    +run;
108548    +data &outnode(keep=NODEID TYPE LABEL);
108549    +    set &indata;
108550    +    length TYPE $16;
108551    +    rename VARIABLE = NODEID;
108552    +    *label  CLUSNAME="Node ID";
108553    +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
108554    +    TYPE = "VARIABLE";
108555    +    *label TYPE = "Node Type";
108556    +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
108557    +    run;
108558    +data _tmp(keep=NODEID TYPE LABEL);
108559    +    set &indata;
108560    +    length TYPE $16;
108561    +    rename CLUSNAME = NODEID;
108562    +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
108563    +    TYPE = "GCLUSTER";
108564    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
108565    +    run;
108566    +proc sort data=_tmp;
108567    +    by NODEID;
108568    +run;
108569    +data _tmp;
108570    +    set _tmp; by NODEID;
108571    +    if first.NODEID then output;
108572    +run;
108573    +proc sort data=&outnode;
108574    +    by NODEID;
108575    +run;
108576    +data  &outnode;
108577    +    set _tmp &outnode;
108578    +run;
108579    +proc datasets lib = work nolist;
108580    +     delete _tmp;
108581    +run;
108582    +quit;
108583    +%mend MakeGobalConstellData;
108585    +/* Make contellation plot data among GCLUSTERS */
108587    +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
108589    +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
108590    +     set &indata;
108591    +     LINKID = _N_;
108592    +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
108593    +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
108594    +     end;
108595    +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
108596    +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
108597    +     end;
108598    +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
108599    +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
108600    +    end;
108601    +run;
108603    +data _tmp_outrsquare;
108604    +        set &inoutrsq;
108605    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
108606    +run;
108608    +proc freq data =_tmp_outrsquare noprint;
108609    +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
108610    +run;
108612    +data &outnode(keep=_NAME_ TYPE LABEL);
108613    +    set &outlink;
108614    +    length TYPE $16;
108615    +    length LABEL $100;
108616    +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
108618    +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
108619    +    TYPE = "GCLUSTER";
108620    +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
108621    +    end;
108622    +    else do;
108623    +    TYPE= "ROOT";
108624    +    LABEL= _NAME_;
108625    +    end;
108626    +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
108627    +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
108628    +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
108629    +    run;
108631    +proc sort data=&outnode;
108632    +     by _NAME_;
108633    +proc sort data=_tmp_GCLUSFREQ;
108634    +     by _NAME_;
108635    +run;
108637    +data  &outnode;
108638    +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
108639    +     if COUNT=. then COUNT=1;
108640    +run;
108642    +proc datasets lib = work nolist;
108643    +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
108644    +run;
108646    +quit;
108647    +%Mend MakeGClusterConstData;
108650    +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
108652    +    data _gscoretmpds;
108653    +          set &indata;
108654    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
108655    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
108656    +          if _TYPE_ = 'STD' then _NAME_='STD';
108657    +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
108658    +          DROP _TYPE_ _NCL_;
108659    +     run;
108661    +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
108662    +        GCluster Component &globalclusid ------ */
108664    +    filename _file_  "&fileref";
108666    +    data _null_;
108667    +        %if &globalclusid eq 1 %then %do;
108668    +          FILE _file_;
108669    +        %end;
108670    +        %else %do;
108671    +          FILE _file_ MOD;
108672    +        %end;
108674    +        %let dsid = %sysfunc(open(work._gscoretmpds));
108675    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
108676    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
108678    +        %let k = 1;
108679    +        %do %while(^%sysfunc(fetch(&dsid)));
108680    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
108681    +                %if &k > 2 %then %do;
108682    +                put "&_name = 0 ; ";
108683    +                %end;
108684    +                %let k = %eval(&k+1);
108685    +        %end;
108687    +        %let rc = %sysfunc(rewind(&dsid));
108688    +        %do i= 2 %to &nvar;
108689    +            %let _varname =  %sysfunc(varname(&dsid, &i));
108690    +            %do %while(^%sysfunc(fetch(&dsid)));
108691    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
108692    +                %if &_name = MEAN %then
108693    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
108694    +                %else %if &_name = STD %then
108695    +                %let _std = %sysfunc(getvarn(&dsid, &i));
108696    +                %else %do;
108697    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
108698    +                      %let abscoeff = %sysfunc(abs(&coeff));
108699    +                          %if &abscoeff >  0 %then %do;
108700    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
108701    +                           %end;
108702    +                 %end;
108703    +             %end;
108704    +             %let rc = %sysfunc(rewind(&dsid));
108706    +         %end;
108708    +        %let dsid= %sysfunc(close(&dsid));
108709    +       run;
108712    +       proc datasets lib=work nolist;
108713    +            delete _gscoretmpds;
108714    +       run;
108715    +      quit;
108717    +%mend CreateGClusterScoreCode;
108720    +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
108722    +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
108723    +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
108724    +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
108725    +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
108726    +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
108727    +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
108728    +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
108729    +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
108730    +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
108731    +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
108732    +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
108733    +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
108734    +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
108735    +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
108737    +   filename gsfile "&gscorecode";
108739    +   data &EM_USER_GSCORE;
108740    +             set &indata;
108741    +             %include  gsfile;
108742    +        keep
108743    +        %do i=1 %to &ngcluster;
108744    +         %let gcvarname = GC&i;
108745    +         &gcvarname
108746    +        %end;
108747    +     ;
108748    +   run;
108750    +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
108751    +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
108752    +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
108753    +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
108754    +    noprint  ;
108755    +     var
108756    +       %do i=1 %to &ngcluster;
108757    +         %let gcvarname = GC&i;
108758    +         &gcvarname
108759    +        %end;
108760    +   ;
108761    +   run;
108764    +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
108765    +   data &EM_USER_GSCORECORRPLOT ;
108766    +        set &EM_USER_GSCORECORRPLOT;
108767    +        rename _X_ = X;
108768    +        rename _Y_ = Y;
108769    +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
108770    +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
108771    +   run;
108773    +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
108775    +   data &EM_USER_GSCORETREE;
108776    +        length _NAME_ $32;
108777    +        length _LABEL_ $100;
108778    +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
108779    +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
108780    +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
108781    +        end;else do;
108782    +         _LABEL_ = _NAME_;
108783    +        end;
108784    +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
108786    +   run;
108788    +   quit;
108790    +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
108793    +%macro score;
108795    +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
108796    +%include temp;
108797    +filename temp;
108799    +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
108801    +data _null_;
108802    +         set &EM_USER_VARCLUSMETA;
108803    +         if _N_=1 then
108804    +         call symput('_trainnum', TrainNum);
108805    +         call symput('_exportedcomp', ExportedComp);
108806    +         call symput('_hidevariable', HideVariable);
108807    +         call symput('_newTrain', NewTrain);
108808    +run;
108810    +%if &_newTrain = N %then %do;
108811    +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
108812    +        %else %let _exportedCompChanged = Y;
108813    +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
108814    +        %else  %let _hideVariableChanged = Y;
108815    +%end;
108816    +%else %do;
108817    +        %let _exportedCompChanged = Y;
108818    +        %let _hideVariableChanged = Y;
108819    +%end;
108821    +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
108822    +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
108823    +     %include temp;
108824    +     filename temp;
108825    +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
108826    +%end;
108827    +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
108828    +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
108829    +     %include temp;
108830    +     filename temp;
108831    +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
108832    +%end;
108834    +  /* store  current property values */
108835    + data &EM_USER_VARCLUSMETA;
108836    +       set &EM_USER_VARCLUSMETA;
108837    +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
108838    +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
108839    + run;
108841    +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
108845    +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
108846    +     proc sort data =&indata;
108847    +              by Cluster RsqRatio Type;
108848    +     run;
108849    +     /*----------------------------------------------------------------------
108850    +      The Type variabe is used becuse the variable need to be selected
108851    +        instead of Cluster component when only one variable is in the cluster
108852    +     +-----------------------------------------------------------------------*/
108854    +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
108855    +         data &indata;
108856    +              set &indata; by cluster;
108857    +              if first.Cluster then Selected = 'YES';
108858    +              else Selected = 'NO';
108859    +         run;
108860    +         quit;
108861    +    %end;
108862    +    %else %do;
108863    +         data &indata(drop = _var _varchange);
108864    +              set &indata; retain _var 0; by Cluster;
108865    +             if first.Cluster then  _varchange = 0;
108866    +                 else _varchange =1;
108867    +             if _var ne _varchange then  Selected  = 'YES';
108868    +             else Selected = 'NO';
108869    +             if last.cluster then  _var = 0;
108870    +             else _var = _varchange;
108871    +         run;
108872    +         quit;
108873    +    %end;
108874    +%mend ChangeVariableSelectionFlag;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS8.VarClus_VARCLUSMETA;
MPRINT(SCORE):   if _N_=1 then call symput('_trainnum', TrainNum);
MPRINT(SCORE):   call symput('_exportedcomp', ExportedComp);
MPRINT(SCORE):   call symput('_hidevariable', HideVariable);
MPRINT(SCORE):   call symput('_newTrain', NewTrain);
MPRINT(SCORE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      30:26
NOTE: There were 1 observations read from the data set EMWS8.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
108877    +%macro score1(ExportedCompChanged=,
108878    +              HideVariableChanged=);
108880    +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
108881    +   %if &ExportedCompChanged = Y %then %do;
108882    +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
108883    +   %end;
108884    +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
108886    +%mend score1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE1):  ;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   proc sort data =EMWS8.VarClus_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by Cluster RsqRatio Type;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;
 
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CHANGEVARIABLESELECTIONFLAG):   data EMWS8.VarClus_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by cluster;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if first.Cluster then Selected = 'YES';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else Selected = 'NO';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;
 
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTRSQUARE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CHANGEVARIABLESELECTIONFLAG):   quit;
MPRINT(SCORE1):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   FILE X;
MPRINT(MAKEDELTACODE):   set EMWS8.VarClus_OUTRSQUARE end=eof;
MPRINT(MAKEDELTACODE):   if _N_=1 then do;
MPRINT(MAKEDELTACODE):   put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
MPRINT(MAKEDELTACODE):   put "if upcase(strip(NAME)) in (";
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if Strip(upcase(Selected)) eq 'YES' then do;
MPRINT(MAKEDELTACODE):   string = '"'!!trim(left(VARIABLE))!!'"';
MPRINT(MAKEDELTACODE):   put string;
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if eof then do;
MPRINT(MAKEDELTACODE):   put ') then ROLE="INPUT";';
MPRINT(MAKEDELTACODE):   put 'else ROLE="REJECTED";';
MPRINT(MAKEDELTACODE):   put 'end;';
MPRINT(MAKEDELTACODE):   put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   run;
 
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=20. April 2016 16.22 Uhr,
      Create Time=03. April 2016 17.12 Uhr
 
NOTE: 14 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 75.
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEDELTACODE):   quit;
MPRINT(MAKEDELTACODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEDELTACODE):   quit;
MPRINT(SCORE1):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS8.VarClus_VARCLUSMETA;
MPRINT(SCORE):   set EMWS8.VarClus_VARCLUSMETA;
MPRINT(SCORE):   ExportedComp = "CLUSTERCOMP";
MPRINT(SCORE):   HideVariable = "Y";
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS8.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
108888
108889     *------------------------------------------------------------*;
108890     * End SCORE: VarClus;
108891     *------------------------------------------------------------*;
 
108892     filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
108893     *------------------------------------------------------------*;
108894     * VarClus: Scoring DATA data;
108895     *------------------------------------------------------------*;
108896     data EMWS8.VarClus_TRAIN
108897     / view=EMWS8.VarClus_TRAIN
108898     ;
MPRINT(EM_DIAGRAM):   data EMWS8.VarClus_TRAIN / view=EMWS8.VarClus_TRAIN ;
108899     set EMWS8.Part_TRAIN
108900     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_TRAIN ;
108901     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas.
108902    +
108903    +/*-------------------------------------------------*/
108904    +/* Varclus Score Code Begins*/
108905    +/*-------------------------------------------------*/
108906    +
108907    +Clus1 = 0 ; /*---Cluster Component 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
108908    +Clus2 = 0 ; /*---Cluster Component 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
108909    +Clus3 = 0 ; /*---Cluster Component 3------ */
MPRINT(EM_DIAGRAM):   Clus3 = 0 ;
108910    +Clus4 = 0 ; /*---Cluster Component 4------ */
MPRINT(EM_DIAGRAM):   Clus4 = 0 ;
108911    +Clus5 = 0 ; /*---Cluster Component 5------ */
MPRINT(EM_DIAGRAM):   Clus5 = 0 ;
108912    +Clus6 = 0 ; /*---Cluster Component 6------ */
MPRINT(EM_DIAGRAM):   Clus6 = 0 ;
108913    +Clus7 = 0 ; /*---Cluster Component 7------ */
MPRINT(EM_DIAGRAM):   Clus7 = 0 ;
108914    +Clus8 = 0 ; /*---Cluster Component 8------ */
MPRINT(EM_DIAGRAM):   Clus8 = 0 ;
108915    +Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;
MPRINT(EM_DIAGRAM):   Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;
108916    +Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;
108917    +Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;
108918    +Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;
108919    +Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;
108920    +Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;
108921    +Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;
108922    +Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;
108923    +Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;
108924    +Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;
108925    +Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;
108926    +Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;
108927    +Clus3 = Clus3+1 * (MonthsAsCustomer - 83.5724515585509)/16.947242674662;
MPRINT(EM_DIAGRAM):   Clus3 = Clus3+1 * (MonthsAsCustomer - 83.5724515585509)/16.947242674662;
108928    +Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;
108929    +Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;
MPRINT(EM_DIAGRAM):   Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;
108930    +Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;
108931    +Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;
108932    +Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;
108933    +Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;
108934    +Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;
MPRINT(EM_DIAGRAM):   Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;
108935    +Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;
108936    +Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;
MPRINT(EM_DIAGRAM):   Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;
108937    +Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;
MPRINT(EM_DIAGRAM):   Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;
108938    +Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
108939     run;
 
NOTE: DATA STEP view saved on file EMWS8.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
108940     quit;
108941     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
108942     filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
108943     *------------------------------------------------------------*;
108944     * VarClus: Scoring VALIDATE data;
108945     *------------------------------------------------------------*;
108946     data EMWS8.VarClus_VALIDATE
108947     / view=EMWS8.VarClus_VALIDATE
108948     ;
MPRINT(EM_DIAGRAM):   data EMWS8.VarClus_VALIDATE / view=EMWS8.VarClus_VALIDATE ;
108949     set EMWS8.Part_VALIDATE
108950     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Part_VALIDATE ;
108951     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMFLOWSCORE.sas.
108952    +
108953    +/*-------------------------------------------------*/
108954    +/* Varclus Score Code Begins*/
108955    +/*-------------------------------------------------*/
108956    +
108957    +Clus1 = 0 ; /*---Cluster Component 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
108958    +Clus2 = 0 ; /*---Cluster Component 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
108959    +Clus3 = 0 ; /*---Cluster Component 3------ */
MPRINT(EM_DIAGRAM):   Clus3 = 0 ;
108960    +Clus4 = 0 ; /*---Cluster Component 4------ */
MPRINT(EM_DIAGRAM):   Clus4 = 0 ;
108961    +Clus5 = 0 ; /*---Cluster Component 5------ */
MPRINT(EM_DIAGRAM):   Clus5 = 0 ;
108962    +Clus6 = 0 ; /*---Cluster Component 6------ */
MPRINT(EM_DIAGRAM):   Clus6 = 0 ;
108963    +Clus7 = 0 ; /*---Cluster Component 7------ */
MPRINT(EM_DIAGRAM):   Clus7 = 0 ;
108964    +Clus8 = 0 ; /*---Cluster Component 8------ */
MPRINT(EM_DIAGRAM):   Clus8 = 0 ;
108965    +Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;
MPRINT(EM_DIAGRAM):   Clus8 = Clus8+1 * (AcceptedCmpTotal - 0.31255265374894)/0.66837726102124;
108966    +Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+0.5 * (Age - 47.2059814658803)/12.0632948493559;
108967    +Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.19973986384379 * (Frq - 12.6545914069081)/7.1598086029145;
108968    +Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.15242317288807 * (Income - 51962.545914069)/20878.2658128313;
108969    +Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+-0.11326525887946 * (Kidhome - 0.43555181128896)/0.53438033047728;
108970    +Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.16405768583044 * (Mnt - 615.68197135636)/604.537497355942;
108971    +Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.12820704015091 * (MntFishProducts - 36.4945240101095)/52.2208809602509;
108972    +Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.13003723528825 * (MntFruits - 27.153748946925)/39.7289323595324;
108973    +Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.12026967394981 * (MntGoldProds - 44.0589721988205)/51.1646481009475;
108974    +Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.15378172897501 * (MntMeatProducts - 169.965037910699)/216.176716057929;
108975    +Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.12839407773078 * (MntSweetProducts - 27.0804549283909)/39.2356363442449;
108976    +Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.16875412248328 * (MntWines - 310.929233361415)/341.695699656276;
108977    +Clus3 = Clus3+1 * (MonthsAsCustomer - 83.5724515585509)/16.947242674662;
MPRINT(EM_DIAGRAM):   Clus3 = Clus3+1 * (MonthsAsCustomer - 83.5724515585509)/16.947242674662;
108978    +Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.17191033798819 * (NumCatalogPurchases - 2.64448188711036)/2.77214051734809;
108979    +Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;
MPRINT(EM_DIAGRAM):   Clus5 = Clus5+0.59365846567538 * (NumDealsPurchases - 2.25526537489469)/1.67318269219337;
108980    +Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.19568478317119 * (NumDistPurchases - 6.73504633529907)/4.60209117827878;
108981    +Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.16265391840825 * (NumStorePurchases - 5.91954507160909)/3.25562388118508;
108982    +Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.16220922357079 * (NumWebPurchases - 4.09056444818871)/2.61390561975288;
108983    +Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+-0.12106102877754 * (NumWebVisitsMonth - 5.24220724515585)/2.33225525940929;
108984    +Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;
MPRINT(EM_DIAGRAM):   Clus7 = Clus7+1 * (RFMstat - 531.396946202506)/1565.49314871989;
108985    +Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.15685430945271 * (RMntFrq - 37.80392418146)/30.0642993170191;
108986    +Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;
MPRINT(EM_DIAGRAM):   Clus6 = Clus6+1 * (Recency - 48.7742207245156)/28.8224799181808;
108987    +Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;
MPRINT(EM_DIAGRAM):   Clus5 = Clus5+0.59365846567538 * (Teenhome - 0.48652064026958)/0.55047336656954;
108988    +Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+-0.5 * (Year_Birth - 1968.79401853412)/12.0632948493559;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
108989     run;
 
NOTE: DATA STEP view saved on file EMWS8.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
108990     quit;
108991     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
108993     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
108994     * VarClus: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * VarClus: Computing metadata for TRAIN data;
108995     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.VarClus_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.VarClus_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.VarClus_TRAIN out=WORK.M1LIJWP8 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LIJWP8;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1LIJWP8(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LIJWP8;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1LIJWP8;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1ESM4VB NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ESM4VB;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ESM4VB;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12VLLEC(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ESM4VB;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ESM4VB;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ESM4VB;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ESM4VB;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ESM4VB;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.VarClus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "VarClus";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if upcase(strip(NAME)) in ( "CLUS1" "CLUS2" "CLUS3" "CLUS4" "CLUS5" "CLUS6" "CLUS7" "CLUS8" ) then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE)) = "REJECTED" then delete ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS8.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.22 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                20. April 2016
Time:                16.22 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1L10GLN "C:\\predictive-models-project\Workspaces\EMWS8\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1L10GLN new;
MPRINT(EM_DIAGRAM):   run;
109331     %let EMEXCEPTIONSTRING=;
109332     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
109333     * REPORT: VarClus;
MPRINT(EM_DIAGRAM):   * REPORT: VarClus;
109334     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
109335     %let EM_ACTION = REPORT;
109336     %let syscc = 0;
109337
109338     %macro main;
109339
109340        filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
109341        %include temp;
109342        filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
109343        %include temp;
109344        filename temp;
109345
109346       %SetProperties;
109347
109348        %if %upcase(&EM_ACTION) = CREATE %then %do;
109349            filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
109350            %include temp;
109351            filename temp;
109352            %create;
109353        %end;
109354        %else
109355        %if %upcase(&EM_ACTION) = TRAIN %then %do;
109356             filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
109357                %include temp;
109358                filename temp;
109359                %train;
109360        %end;
109361        %else
109362        %if %upcase(&EM_ACTION) = SCORE %then %do;
109363                filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
109364                %include temp;
109365                filename temp;
109366                %score;
109367        %end;
109368        %else
109369        %if %upcase(&EM_ACTION) = REPORT %then %do;
109370                filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
109371                %include temp;
109372                filename temp;
109373                %report;
109374        %end;
109375        /*
109376        %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
109377            %put 'OPENING TABLE';
109378        %end;
109379        %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
109380            %put 'CLOSE TABLE';
109381        %end;
109382        */
109383     %mend main;
109384     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
109386    +/* Initialize property macro variables */
109387    +%macro SetProperties;
109388    +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
109389    +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
109390    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
109391    +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
109392    +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
109393    +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
109394    +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
109395    +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
109396    +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
109397    +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
109398    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
109399    +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
109400    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
109402    +%mend SetProperties;
109404    +%Macro MakeDummyVariables(indata=,
109405    +                          outvar=,
109406    +                          outdata=,
109407    +                          fileref=,
109408    +                          recreatecmeta=N, /* optional */
109409    +                          incmeta=,     /* optional */
109410    +                          outcmeta=,    /* optional */
109411    +                          ndummyvars=_ndummyvars
109412    +                          );
109413    +    %global &ndummyvars;
109415    +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
109416    +       class
109417    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
109418    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
109419    +    ;
109420    +    run;
109421    +    %let &ndummyvars = 0;
109422    +    data _null_;
109423    +    %let dsid = %sysfunc(open(work._classout));
109424    +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
109425    +    %let dsid = %sysfunc(close(&dsid));
109426    +    run;
109428    +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
109429    +       input
109430    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
109431    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
109432    +        / level=nominal stdize=no;
109433    +       make outvar = &outvar;
109434    +       score data = &indata out =&outdata;
109435    +       code  file=  "&fileref";
109436    +    run;
109437    +    %if &recreatecmeta eq Y %then %do;
109438    +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
109439    +    data _tmpds;
109440    +        set _tmpds;
109441    +           ROLE = 'INPUT';
109442    +           LEVEL = 'INTERVAL';
109443    +           CREATOR='DMZIP';
109444    +           if NAME = '_TYPE_' then delete;
109445    +    run;
109446    +    data &outcmeta;
109447    +         set &incmeta _tmpds;
109448    +    run;
109449    +    %end;
109450    +    proc datasets lib=work nolist;
109451    +      delete  _dmdbdat _dmdbcat _classout
109452    +    %if &recreatecmeta eq Y %then %do;
109453    +    _tmpds
109454    +    %end;
109455    +    ;
109456    +    quit;
109457    +%Mend MakeDummyVariables;
109459    +/*--- Determine Optimal Number of Cluster ----
109460    +%macro FindClusNum(statds=, groupds=, minvariation=);
109461    +   %global optnclus;
109462    +   data varclus_tmp(drop=_NAME_);
109463    +      set &statDs;
109464    +      where _type_ ='PROPOR';
109465    +   run;
109466    +   proc sort data=varclus_tmp;
109467    +      by _NCL_;
109468    +   run;
109469    +   proc transpose data=varclus_tmp out=varclus_tmp;
109470    +      by _NCL_;
109471    +      var %EM_INTERVAL_INPUT
109472    +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
109473    +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
109474    +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
109475    +          %do i = 2 %to &nvar;
109476    +          %let varname = %sysfunc(varname(&dsid, &i));
109477    +          &varname
109478    +          %end;
109479    +      %end;
109480    +   ;
109481    +   run;
109483    +   %if &minVariation eq %then %do;
109484    +       %let minVariation = &EM_PROPERTY_MINVARIATION;
109485    +   %end;
109486    +   %if ^(0<&minVariation<100) %then %do;
109487    +       %let minVariation = 90;
109488    +   %end;
109490    +   data _null_;
109491    +      set varclus_tmp end=eof;
109492    +      by _NCL_;
109493    +      retain flag 0;
109494    +      if first._ncl_ then flag=0;
109495    +      if .<col1 < &minVariation then flag=1;
109496    +      if last._ncl_ and ^flag then do;
109497    +         call symput('OPTNCL', _ncl_);
109498    +         stop;
109499    +      end;
109500    +     if eof then call symput('OPTNCL', _ncl_);
109501    +   run;
109503    +   %let optnclus = &OPTNCL;
109505    +   data varclus_tmp(drop=_NCL_ _NAME_);
109506    +      set &statDs;
109507    +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
109508    +   run;
109509    +   proc sort data=varclus_tmp;
109510    +      by _TYPE_;
109511    +   run;
109512    +   proc transpose data=varclus_tmp out=varclus_tmp;
109513    +      by _TYPE_;
109514    +   run;
109515    +   proc sort data=varclus_tmp;
109516    +      by _name_ _type_;
109517    +   run;
109519    +  proc transpose data=varclus_tmp out=&groupds;
109520    +      by _NAME_;
109521    +   run;
109522    +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
109523    +      by Cluster descending Rsquare;
109524    +      where Cluster ne 0;
109525    +   run;
109526    +   proc datasets lib=work nolist mt=(DATA VIEW);
109527    +      delete varclus_tmp;
109528    +   run;
109529    +   quit;
109530    +%mend findClusNum;
109531    +*/
109533    +%macro getNclusfromTrain(inoutstat=, nc=);
109534    +%global &nc;
109535    +data _null_;
109536    +    set &inoutstat end=eof;
109537    +    if eof then do;
109538    +    call symput("&nc", _ncl_);
109539    +    end;
109540    +run;
109541    +%mend  getNclusfromTrain;
109543    +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
109545    +     *--- Build Code to Modify Metadata ---*;
109546    +     filename X "&deltacodefile";
109547    +     data _null_;
109548    +        FILE X;
109549    +        set &groupds end=eof;
109550    +        /*by Cluster;*/
109551    +         if _N_=1 then do;
109552    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
109553    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
109554    +           %end;
109555    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
109556    +           put "if upcase(strip(NAME)) in (";
109557    +        end;
109558    +        if Strip(upcase(Selected)) eq 'YES' then do;
109559    +           string = '"'!!trim(left(VARIABLE))!!'"';
109560    +           put string;
109561    +        end;
109562    +        if eof then do;
109563    +           put ') then ROLE="INPUT";';
109564    +           put 'else ROLE="REJECTED";';
109565    +           put 'end;';
109567    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
109568    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
109569    +           %end;
109570    +        end;
109571    +     run;
109572    +     quit;
109574    +     filename X;
109576    +     quit;
109577    +%mend MakeDeltaCode;
109579    +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
109580    +    %if ^%sysfunc(exist(&statds)) %then %do;
109581    +         %goto doendc;
109582    +    %end;
109584    +    data &corrds(drop=_TYPE_ _NCL_) ;
109585    +       set &statds;
109586    +       where _type_ eq 'CORR' ;
109587    +    run ;
109588    +    proc sort data=&corrds;
109589    +       by _NAME_ ;
109590    +    run ;
109591    +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
109592    +      BY _NAME_ ;
109593    +    run ;
109594    +    data &corrplotds;
109595    +       length _Y_ $100;
109596    +       set &corrplotDs;
109597    +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
109598    +    run ;
109599    +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
109600    +       set &corrplotds;
109601    +       where _LABEL_ ne '' ;
109602    +       keep _TMP_ _LABEL_ ;
109603    +    run ;
109604    +    data _null_;
109605    +       nobs=0;
109606    +       dsid = open('varclus_match');
109607    +       if dsid then do;
109608    +          nobs = attrn(dsid, 'NOBS');
109609    +          dsid = close(dsid);
109610    +       end;
109611    +       call symput ('CORR_NOBS', nobs);
109612    +    run;
109613    +    %if &corr_nobs %then %do;
109614    +        proc sort data=varclus_match;
109615    +           by _name_;
109616    +        run ;
109617    +        proc sort data=&corrplotds;
109618    +           by _name_;
109619    +        run ;
109620    +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
109621    +           merge varclus_match &corrplotds;
109622    +           by _NAME_ ;
109623    +           if _X_ eq '' then _X_=_NAME_ ;
109624    +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
109625    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
109626    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
109628    +       run ;
109629    +    %end;
109630    +    %else %do;
109631    +        proc sort data=&corrplotds;
109632    +           by _name_;
109633    +        run ;
109634    +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
109635    +           set &corrplotds;
109636    +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
109637    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
109638    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
109640    +        run ;
109641    +    %end;
109642    +    proc sort data=&corrplotds;
109643    +       by _X_ _Y_;
109644    +    run ;
109645    +    proc datasets lib=work nolist mt=(DATA VIEW);
109646    +       delete varclus_match;
109647    +    run;
109648    +    quit;
109650    +%doendc:
109652    +%mend MakeVarClusCorrData;
109654    +%macro MakeStatPlotData(statds= , outstatplotds=);
109655    +   %if %sysfunc(exist(&statds)) %then %do;
109657    +       data varclus_tmp(drop=_NAME_ _NCL_) ;
109658    +          set &statDs;
109659    +          where _type_ in('MEAN', 'STD', 'N');
109660    +       run ;
109661    +       proc transpose data=varclus_tmp out=&outstatplotds;
109662    +          id _TYPE_ ;
109663    +       run ;
109664    +       data &outstatplotds;
109665    +          set &outstatplotds(obs=1000);
109666    +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
109667    +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
109668    +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
109669    +          else SCALEDSTD= STD ;
109670    +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
109671    +       run ;
109672    +       proc sort data=&outstatplotds;
109673    +          by descending SCALEDSTD ;
109674    +       run ;
109675    +       proc datasets lib=work nolist mt=(DATA VIEW);
109676    +          delete varclus_tmp;
109677    +       run;
109678    +       quit;
109679    +    %end;
109681    +%mend MakeStatPlotData;
109684    +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
109685    +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
109686    +    data &EM_USER_OUTSTATSCORE;
109687    +          set &indata;
109688    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
109689    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
109690    +          if _TYPE_ = 'STD' then _NAME_='STD';
109691    +          DROP _TYPE_ _NCL_;
109692    +     run;
109694    +     filename _file_  "&fileRef";
109696    +     data _null_;
109697    +        FILE _file_ MOD;
109698    +        put ' ';
109699    +        put '/*-------------------------------------------------*/';
109700    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
109701    +        put '/*-------------------------------------------------*/';
109702    +        put ' ';
109703    +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
109705    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
109706    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
109708    +        %let k = 1;
109709    +        %do %while(^%sysfunc(fetch(&dsid)));
109710    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
109711    +                %if &k > 2 %then %do;
109712    +                 %let cn = %eval(&k-2);
109713    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
109714    +                %end;
109715    +                %let k = %eval(&k+1);
109716    +        %end;
109718    +        %let rc = %sysfunc(rewind(&dsid));
109720    +        %do i= 2 %to &nvar;
109721    +            %let _varname =  %sysfunc(varname(&dsid, &i));
109722    +            %do %while(^%sysfunc(fetch(&dsid)));
109723    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
109724    +                %if &_name = MEAN %then
109725    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
109726    +                %else %if &_name = STD %then
109727    +                %let _std = %sysfunc(getvarn(&dsid, &i));
109728    +                %else %do;
109729    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
109730    +                      %let abscoeff = %sysfunc(abs(&coeff));
109731    +                          %if &abscoeff >  0 %then %do;
109732    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
109733    +                           %end;
109734    +                 %end;
109735    +             %end;
109736    +             %let rc = %sysfunc(rewind(&dsid));
109737    +         %end;
109739    +        %let dsid= %sysfunc(close(&dsid));
109740    +       run;
109741    +%mend CreateScoreCode;
109745    +/*----------------------------------------------------------
109746    +    Instead of using %MakeRSquareData,
109747    +    %MakeVarClusResultTable at macro2.source is used
109748    + +----------------------------------------------------------*/
109751    +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
109753    +/* modifying  from ods rsquare = data */
109755    +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
109756    +    Length Cluster $16;
109757    +    length Variable $32;
109758    +    Length VariableLabel $64;
109759    +    set &indata; retain CurrentCluster;
109760    +    if NumberOfClusters ^= &ncluster then delete;
109761    +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
109762    +    CurrentCluster = Cluster;
109763    +   run;
109764    +proc sort data =&outdata ;
109765    +     by Cluster RsquareRatio;
109766    +run;
109767    +data _tmprsq(drop=index);
109768    +     set &outdata; by Cluster;
109769    +     if first.Cluster then do;
109770    +     index = strip(scan(Cluster,2 ));
109771    +     Variable = "Clus"||index;
109772    +     VariableLabel = "Cluster Component "||index;
109773    +     OwnCluster = 1;
109774    +     NextClosest = .;
109775    +     RsquareRatio = 0;
109776    +     output;
109777    +     end;
109778    +run;
109780    +proc sort data = _tmprsq ;
109781    +     by Cluster RsquareRatio;
109782    +run;
109783    +data &outdata;
109784    +     set &outdata _tmprsq;
109785    +by Cluster;
109786    +run;
109789    +/* Just create the Selected variable with all YES */
109791    +data &outdata;
109792    +    set &outdata; by cluster;
109793    +    length Selected $8;
109794    +    Selected = 'YES';
109795    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
109796    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
109797    +    rename OwnCluster = RSqWithClusterComp;
109798    +    rename NextClosest = RSqWithNextClusComp;
109799    +run;
109802    +/* Selected = Y/N will be done %score section -----
109804    +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
109805    +data &outdata;
109806    +    set &outdata; by cluster;
109807    +    length Selected $8;
109808    +    if first.Cluster then Selected = 'YES';
109809    +    else Selected = 'NO';
109810    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
109811    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
109812    +    rename OwnCluster = RSqWithClusterComp;
109813    +    rename NextClosest = RSqWithNextClusComp;
109814    +run;
109815    +%end;
109816    +%else %do;
109817    +data &outdata;
109818    +    set &outdata; by cluster;
109819    +    if last.Cluster then Selected = 'YES';
109820    +    else Selected = 'NO';
109821    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
109822    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
109823    +    rename OwnCluster = RSqWithClusterComp;
109824    +    rename NextClosest = RSqWithNextClusComp;
109825    +run;
109826    +%end;
109827    +---------------------------------------------------------------*/
109829    +%if %sysfunc(exist(&inClusRSquare)) %then %do;
109830    +/* to calculate NextClosestClusRsq */
109831    +proc transpose data = &inClusRSquare  out=_clusRsq;
109832    +      by cluster;
109833    +      run;
109834    +data _clusRsq;
109835    +     set _clusRsq;
109836    +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
109837    +run;
109839    +proc sort data=_clusRsq;
109840    +    by cluster col1;
109841    +    run;
109842    +data _clusRsq(drop=_NAME_ _LABEL_);
109843    +     set _clusRsq; by cluster;
109844    +     if last.Cluster then output;
109845    +     label  COL1 = 'R-Sqaure with Next Cluster Component';
109846    +     rename COL1 = RSqWithNextClusComp;
109847    +     rename Cluster = Variable;
109848    +     label  Cluster = "Variable";
109849    +run;
109851    +proc sort data =&outdata;
109852    +     by Variable;
109853    +run;
109854    +data &outdata;
109855    +    merge &outdata _clusRsq;
109856    +    by Variable;
109857    +run;
109858    +proc sort data =&outdata;
109859    +by Cluster  RsquareRatio;
109860    +run;
109861    +quit;
109862    +%end;
109864    +proc datasets lib = work nolist;
109865    +     delete _tmprsq _clusRsq;
109866    +     run;
109867    +quit;
109869    +%mend MakeRSquareData;
109872    +/*-------------------------------------------------------------------------*/
109876    +%macro ModifyCorr(indata=,
109877    +                  outdata=,
109878    +                  rsquare = Y
109879    +                  );
109880    +    data corr_tmp;
109881    +        set &indata;
109882    +    run;
109883    +     proc sql;
109884    +           update &indata
109885    +           set
109886    +     %let dsid = %sysfunc(open(work.corr_tmp));
109887    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
109888    +          %do i = 4 %to &nvar;
109889    +          %let _name = %sysfunc(varname(&dsid, &i));
109890    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
109891    +            %else  %let _name_md = &_name;
109892    +            %if &i < &nvar %then %do;
109893    +               &_name = 1- &_name_md ,
109894    +            %end;
109895    +            %else %do;
109896    +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
109897    +            %end;
109898    +          %end;
109899    +      %let dsid= %sysfunc(close(&dsid));
109901    +      select * from &indata;
109902    +      run;
109903    +      proc datasets lib = work nolist;
109904    +           delete corr_tmp;
109905    +      run;
109906    +      quit;
109908    + %mend ModifyCorr;
109910    + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
109911    +    data &outdata(drop= _NCL_  _TYPE_);
109912    +       set &indata;
109913    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
109914    +       rename _NAME_ = Cluster;
109915    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
109916    +    run;
109917    +    %if &RSquare eq Y %then %do;
109918    +     data corr_tmp;
109919    +        set &outdata;
109920    +     run;
109922    +     data &outdata(drop=i);
109923    +          set &outdata;
109924    +          %let dsid = %sysfunc(open(work.corr_tmp));
109925    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
109926    +          %do i = 2 %to &nvar;
109927    +            %let _name = %sysfunc(varname(&dsid, &i));
109928    +            %let _name_md = &_name.**2;
109929    +                &_name = &_name_md;
109930    +          %end;
109931    +      %let dsid= %sysfunc(close(&dsid));
109932    +      run;
109933    +      proc datasets lib = work nolist;
109934    +           delete corr_tmp;
109935    +      run;
109937    +    %end;
109938    +     quit;
109939    +%mend MakeClusStructCorrData;
109941    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
109942    +    data &outdata(drop= _NCL_  _TYPE_);
109943    +       set &indata;
109944    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
109945    +       rename _NAME_ = Cluster;
109946    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
109947    +    run;
109948    +    data corr_tmp;
109949    +        set &outdata;
109950    +    run;
109952    +    %let dsid = %sysfunc(open(work.corr_tmp));
109953    +    %let nclus2= %eval(&ncluster+1);
109954    +    data &outdata;
109955    +         set &outdata;
109956    +          %do i = 2 %to &nclus2;
109957    +          %let i_1 = %eval(&i-1);
109958    +            %let _name = %sysfunc(varname(&dsid, &i));
109959    +            %let _newName = Clus&i_1;
109960    +                rename &_name = &_newName; ;
109961    +                *label &_name ="Cluster &i_1";
109962    +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
109963    +          %end;
109964    +          keep Cluster
109965    +          %do i = 2 %to &nclus2;
109966    +                %let _name = %sysfunc(varname(&dsid, &i));
109967    +                &_name
109968    +          %end;
109969    +          ;
109970    +    %let dsid= %sysfunc(close(&dsid));
109971    +     run;
109972    +     quit;
109974    +    %if &RSquare eq Y %then %do;
109976    +       data corr_tmp;
109977    +        set &outdata;
109978    +     run;
109980    +     data &outdata(drop=i);
109981    +          set &outdata;
109982    +          %let dsid = %sysfunc(open(work.corr_tmp));
109983    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
109984    +          %do i = 2 %to &nvar;
109985    +            %let _name = %sysfunc(varname(&dsid, &i));
109986    +            %let _name_md = &_name.**2;
109987    +                &_name = &_name_md;
109988    +          %end;
109989    +      %let dsid= %sysfunc(close(&dsid));
109990    +      run;
109991    +    %end;
109993    +    %if &makeplotds eq Y %then %do;
109994    +     proc transpose data = &outdata
109995    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
109996    +          by cluster;
109997    +     run;
109998    +     data &plotds;
109999    +          set  &plotds;
110000    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
110001    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
110002    +     run;
110003    +     %end;
110004    +     proc datasets lib = work nolist;
110005    +           delete corr_tmp;
110006    +     run;
110007    +     quit;
110008    +%mend MakeInterClusCorrData;
110011    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
110013    +data &outlink(drop = Selected);
110014    +     set &indata;
110015    +     LINKID = _N_;
110016    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
110017    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
110018    +run;
110019    +data &outnode(keep=NODEID TYPE LABEL);
110020    +    set &indata;
110021    +    length TYPE $16;
110022    +    rename Variable = NODEID;
110023    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
110024    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
110025    +    then  TYPE = "CLUSTER";
110026    +    else  TYPE="VARIABLE";
110027    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
110028    +run;
110029    +quit;
110030    +%mend MakeClusConstellData;
110034    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
110036    +data &outlink(drop = Selected);
110037    +     set &indata;
110038    +     LINKID = _N_;
110039    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
110040    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
110041    +run;
110042    +data &outnode(keep=NODEID TYPE LABEL);
110043    +    set &indata;
110044    +    length TYPE $16;
110045    +    rename Variable = NODEID;
110046    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
110047    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
110048    +    then  TYPE = "CLUSTER";
110049    +    else  TYPE="VARIABLE";
110050    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
110051    +run;
110052    +quit;
110053    +%mend MakeClusConstellData;
110056    +/*--- This will work only when inds is not a view data -------
110058    +%macro getNVarNObs(inds=, nvar=, nobs=);
110060    +    %global &nvar;
110061    +    %global &nobs;
110062    +    data _null_;
110063    +         dsid = open("&inds");
110064    +         nv = attrn(dsid, 'NVAR');
110065    +         no = attrn(dsid, 'NOBS');
110066    +         dsid = close(dsid);
110067    +         call symput("&nvar", nv);
110068    +         call symput("&nobs", no);
110069    +    run;
110070    +    quit;
110071    +%mend  getNVarNObs;
110073    ++---------------------------------------------------------------*/
110076    +%macro getNVar(inds=, nvar=);
110077    +    %global &nvar;
110078    +    data _null_;
110079    +         dsid = open("&inds");
110080    +         nv = attrn(dsid, 'NVAR');
110081    +         dsid = close(dsid);
110082    +         call symput("&nvar", nv);
110083    +    run;
110084    +    quit;
110085    +%mend  getNVar;
110089    +%macro getNObs(inds=, nobs=);
110090    +    %global &nobs;
110091    +    data _null_;
110092    +        set &inds end=eof;
110093    +        if eof then call symput("&nobs", _N_);
110094    +    run;
110095    +    quit;
110096    +%mend  getNObs;
110098    +%Macro CreateVarclusMeta(trainnum=);
110099    +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
110100    +    data &EM_USER_VARCLUSMETA;
110101    +         length TrainNum 8.;
110102    +         length NewTrain $8;
110103    +         length NGCluster 8.;
110104    +         length ExportedComp $16;
110105    +         length HideVariable $8;
110106    +         TrainNum = &trainnum;
110107    +         NewTrain = "Y";
110108    +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
110109    +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
110110    +         NGCluster = 0; /* zero means no twostage */
110111    +   run;
110112    +   quit;
110113    +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
110115    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
110116    +    data &outdata(drop= _NCL_  _TYPE_);
110117    +       set &indata;
110118    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
110119    +       %if &globalclusid ne %then %do;
110120    +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
110121    +       rename _NAME_ = Cluster;
110122    +       %end;
110123    +       %else %do;
110124    +        _NAME_ = upcase(_NAME_);
110125    +       rename _NAME_ = Cluster;
110126    +       %end;
110127    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
110128    +    run;
110129    +    data corr_tmp;
110130    +        set &outdata;
110131    +    run;
110133    +    %let dsid = %sysfunc(open(work.corr_tmp));
110134    +    %let nclus2= %eval(&ncluster+1);
110135    +    data &outdata;
110136    +         set &outdata;
110137    +          %do i = 2 %to &nclus2;
110138    +          %let i_1 = %eval(&i-1);
110139    +            %let _name = %sysfunc(varname(&dsid, &i));
110140    +            %if &globalclusid ne %then
110141    +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
110142    +                     rename &_name = &_newName;
110143    +                     *label &_name ="GC &globalclusid : Cluster &i_1";
110144    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
110145    +                %end;
110146    +            %else
110147    +                %do; %let _newName = CLUS&i_1;
110148    +                     rename &_name = &_newName;
110149    +                     *label &_name ="Cluster &i_1";
110150    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
110151    +                %end;
110152    +          %end;
110153    +          keep Cluster
110154    +          %do i = 2 %to &nclus2;
110155    +                %let _name = %sysfunc(varname(&dsid, &i));
110156    +                &_name
110157    +          %end;
110158    +          ;
110159    +    %let dsid= %sysfunc(close(&dsid));
110160    +     run;
110161    +     quit;
110163    +    %if &RSquare eq Y %then %do;
110165    +       data corr_tmp;
110166    +        set &outdata;
110167    +     run;
110169    +     data &outdata;
110170    +          set &outdata;
110171    +          %let dsid = %sysfunc(open(work.corr_tmp));
110172    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
110173    +          %do i = 2 %to &nvar;
110174    +            %let _name = %sysfunc(varname(&dsid, &i));
110175    +            %let _name_md = &_name.**2;
110176    +                &_name = &_name_md;
110177    +          %end;
110178    +      %let dsid= %sysfunc(close(&dsid));
110179    +      run;
110180    +    %end;
110182    +    %if &makeplotds eq Y %then %do;
110183    +     proc transpose data = &outdata
110184    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
110185    +          by cluster;
110186    +     run;
110187    +     data &plotds;
110188    +          set  &plotds;
110189    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
110190    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
110191    +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
110192    +     run;
110193    +     %end;
110194    +     proc datasets lib = work nolist;
110195    +           delete corr_tmp;
110196    +     run;
110197    +     quit;
110198    +%mend MakeInterClusCorrData;
110200    +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
110201    +    data _tmpds(drop= _NCL_);
110202    +       set &indata;
110203    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
110204    +       %if &globalclusid ne %then %do;
110205    +           _NAME_ = "GC&globalclusid.";
110206    +       rename _NAME_ = Cluster;
110207    +       %end;
110208    +       %else %do;
110209    +        _NAME_ = "CLUS";
110210    +        rename _NAME_ = Cluster;
110211    +       %end;
110212    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
110213    +    run;
110214    +    proc transpose data =_tmpds out =&outdata;
110215    +    run;
110217    +    data &outdata(drop=COL1);
110218    +        %if &globalclusid ne %then %do;
110219    +        length GCluster $16;
110220    +        %end;
110221    +        length Cluster $32;
110222    +        length _NAME_ $32;
110223    +         set &outdata;
110224    +         _NAME_ = upcase(_NAME_);
110225    +         rename _NAME_=Variable;
110226    +         *label _NAME_="Variable";
110227    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
110228    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
110229    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
110231    +         %if &globalclusid ne %then %do;
110232    +          GCluster = "GC&globalclusid";
110233    +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
110234    +         %end;
110235    +         %else %do;
110236    +         Cluster = "CLUS"||strip(COL1);
110237    +        %end;
110238    +         rename COL2 = RSqWithOwnClusComp;
110239    +         *label COL2 = "R-Square With Own Cluster Component";
110240    +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
110242    +   run;
110243    +   proc sort data =&outdata;
110244    +        by Cluster RSqWithOwnClusComp;
110245    +   run;
110246    +   proc datasets lib = work nolist;
110247    +           delete _tmpds;
110248    +   run;
110249    +   quit;
110250    +%mend MakeOwnRSquare;
110252    +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
110253    +    data &outdata(drop= _NCL_  _TYPE_);
110254    +       %if &globalclusid ne %then %do;
110255    +        length GCluster $16;
110256    +        %end;
110257    +       set &indata;
110258    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
110259    +       %if &globalclusid ne %then %do;
110260    +         GCluster = "GC&globalclusid";
110261    +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
110262    +         rename _NAME_ = Cluster;
110263    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
110264    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
110266    +       %end;
110267    +       %else %do;
110268    +         _NAME_ = upcase(_NAME_);
110269    +         rename _NAME_ = Cluster;
110270    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
110271    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
110273    +       %end;
110274    +     run;
110275    +    %if &RSquare eq Y %then %do;
110276    +     data corr_tmp;
110277    +          set &outdata;
110278    +     run;
110279    +     %let istart = 2;
110280    +     %if &globalclusid ne %then %let istart = 3;
110281    +     data &outdata;
110282    +          set &outdata;
110283    +          %let dsid = %sysfunc(open(work.corr_tmp));
110284    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
110285    +          %do i =&istart %to &nvar;
110286    +            %let _name = %sysfunc(varname(&dsid, &i));
110287    +            %let _name_md = &_name.**2;
110288    +                &_name = &_name_md;
110289    +          %end;
110290    +      %let dsid= %sysfunc(close(&dsid));
110291    +      run;
110292    +      proc datasets lib = work nolist;
110293    +           delete corr_tmp;
110294    +      run;
110295    +    %end;
110296    +     quit;
110297    +%mend MakeClusStructCorrData;
110299    +/*
110300    +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
110301    +*/
110303    +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
110305    +     /* The indata should be the outdata
110306    +        from %MakeClusStructCorrData(indata=, outdata=, ); */
110308    +     proc sort data =&indata out=_tmpclusRsq;
110309    +     by cluster;
110310    +     run;
110312    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
110313    +      by cluster;
110314    +     run;
110316    +     proc sort data=_tmpclusRsq;
110317    +        by _NAME_ COL1;
110318    +     run;
110320    +     data _tmpclusRsq;
110321    +         length _NAME_ $32;
110322    +         set _tmpclusRsq; by _NAME_;
110323    +          _NAME_ = upcase(_NAME_);
110324    +          %if &ncluster ne 1 %then %do;
110325    +             if last._NAME_ then delete;
110326    +          %end;
110327    +          %else %do;
110328    +             COL1 = 0;
110329    +          %end;
110330    +     run;
110331    +     /* need to sort again */
110332    +     proc sort data=_tmpclusRsq;
110333    +        by _NAME_ COL1;
110334    +     run;
110336    +     data &outdata;
110337    +         set _tmpclusRsq; by _NAME_;
110338    +         Cluster = upcase(Cluster);
110339    +         if last._NAME_ then output;
110340    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
110341    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
110342    +         rename COL1 = RSqWithNextClusComp;
110343    +         Cluster = upcase(Cluster);
110344    +         rename Cluster = ClosestCluster;
110345    +         *label  Cluster = "Next Closest Cluster";
110346    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
110347    +         rename _NAME_ = Variable;
110348    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
110349    +    run;
110352    +    %if &globalclusid ne %then %do;
110353    +    data &outdata;
110354    +       length GCluster $16;
110355    +       set &outdata;
110356    +       GCluster = "GC&globalclusid";
110357    +       run;
110358    +    %end;
110359    +    proc datasets lib = work nolist;
110360    +           delete _tmpclusRsq;
110361    +    run;
110362    +    quit;
110363    +%mend FindNextClosestClusByVar;
110366    +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
110367    +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
110368    +     proc sort data =&indata out=_tmpclusRsq;
110369    +     by cluster;
110370    +     run;
110371    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
110372    +     by cluster;
110373    +     run;
110374    +     proc sort data=_tmpclusRsq;
110375    +        by _NAME_ col1;
110376    +     run;
110377    +     data _tmpclusRsq;
110378    +         length _NAME_ $32;
110379    +         set _tmpclusRsq; by _NAME_;
110380    +          _NAME_ = upcase(_NAME_);
110381    +          %if &ncluster ne 1 %then %do;
110382    +             if last._NAME_ then delete;
110383    +          %end;
110384    +          %else %do;
110385    +             COL1 = 0;
110386    +          %end;
110387    +     run;
110388    +     data &outdata;
110389    +         set _tmpclusRsq; by _NAME_;
110390    +         Cluster = upcase(Cluster);
110391    +         if last._NAME_ then output;
110392    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
110393    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
110394    +         rename COL1 = RSqWithNextClusComp;
110395    +         Cluster = upcase(Cluster);
110396    +         rename Cluster = ClosestCluster;
110397    +         *label  Cluster = "Next Closest Cluster";
110398    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
110399    +         rename _NAME_ = Variable;
110400    +         *label  _NAME_ = "Variable";
110401    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
110403    +    run;
110404    +    %if &globalclusid ne %then %do;
110405    +    data &outdata;
110406    +       length GCluster $16;
110407    +       set &outdata;
110408    +       GCluster = "GC&globalclusid";
110409    +       run;
110410    +    %end;
110412    +    proc datasets lib = work nolist;
110413    +           delete _tmpclusRsq;
110414    +    run;
110416    +    quit;
110417    +%mend FindNextClosestClusByCluster;
110419    +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
110420    +/*----
110421    +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
110422    +-----------*/
110424    +proc sort data =&indata1;
110425    +    by Variable;
110426    +run;
110427    +proc sort data =&indata2;
110428    +    by Variable;
110429    +run;
110430    +data &outdata;
110431    +    merge &indata1 &indata2;
110432    +    by Variable;
110433    +    length Type $16;
110434    +    Type = 'Variable';
110435    +    *label Type ='Type';
110436    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
110437    +run;
110440    +data &indata3;
110441    +    set  &indata3 ;
110442    +    length RSqWithOwnClusComp 8.;
110443    +    Cluster = Variable;
110444    +    RSqWithOwnClusComp = 1;
110445    +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
110446    +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
110447    +    length Type $16;
110448    +    Type = 'ClusterComp';
110449    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
110451    +;
110452    +run;
110454    +proc sort data=&outdata;
110455    +    by Cluster;
110456    +run;
110457    +proc sort data =&indata3;
110458    +    by Cluster;
110459    +run;
110461    +data &outdata;
110462    +     set &outdata &indata3;
110463    +     by Cluster;
110464    +run;
110467    +/* Create the Selected variable with all YES */
110469    +data &outdata;
110470    +     set &outdata;
110471    +     length RsqRatio 8.;
110472    +     length Selected $8;
110473    +     *label RSqRatio = "1-R**2 Ratio";
110474    +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
110475    +     *label Selected = "Variable Selected";
110476    +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
110477    +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
110478    +     Selected ='YES';
110479    +     rename _LABEL_ = Label;
110480    +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
110481    +run;
110484    +/*----  Selected = Y/N will be assigened at the %score                   -------+
110485    +        Just create the Selected variable with all YES at the step above
110486    + +------------------------------------------------------------------------------+
110488    +proc sort data=&outdata;
110489    +    by Cluster RsqRatio;
110490    +run;
110492    +%if &selectedcomp eq CLUSTERCOMP %then %do;
110493    +data &outdata;
110494    +     set &outdata; by Cluster;
110495    +     length Selected $8;
110496    +     label Selected = "Variable Selected";
110497    +     if  first.Cluster then Selected ='Yes';
110498    +     else Selected = 'No';
110499    +    run;
110500    +%end;
110501    +%else %do;
110502    +data &outdata(drop = _var _varchange);
110503    +     set &outdata; retain _var 0; by Cluster;
110504    +     length Selected $8;
110505    +     label Selected = "Variable Selected";
110506    +     if first.Cluster then  _varchange = 0;
110507    +     else _varchange =1;
110508    +     if _var ne _varchange then  Selected  = 'Yes';
110509    +     else Selected = 'No';
110510    +     if last.cluster then  _var = 0;
110511    +     else _var = _varchange;
110512    +run;
110513    +%end;
110515    +--------------------------------------------------------------*/
110517    +quit;
110518    +%mend MakeVarClusResultTable;
110520    +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
110521    +     proc sort data =&indata;
110522    +        by cluster;
110523    +     run;
110524    +     proc transpose data =&indata
110525    +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
110526    +          by cluster;
110527    +     run;
110528    +     data &outdata;
110529    +          set  &outdata;
110530    +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
110531    +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
110532    +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
110533    +     run;
110534    +     %if &globalclusid ne %then %do;
110535    +     data &outdata;
110536    +          Length GCluster $16;
110537    +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
110538    +          set  &outdata;
110539    +          GCluster ="GC&globalclusid.";
110540    +          run;
110541    +     %end;
110543    +%Mend MakePlotDataFromCorrTable;
110546    +%macro MakeCorrelation(indata=,
110547    +                       outstat=_tmpoutstat,
110548    +                       corrmatrix=N,
110549    +                       outcorr=_tmpoutcorr,
110550    +                       includeclassvar=N,
110551    +                       target=,
110552    +                       freq=,
110553    +                       weight=);
110554    +   %if &target eq  %then %do;
110556    +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
110557    +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
110558    +       %if &includeclassvar eq Y %then %do;
110559    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
110560    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
110561    +          %do i = 2 %to &nvar;
110562    +          %let varname = %sysfunc(varname(&dsid, &i));
110563    +          &varname
110564    +          %end;
110565    +       %end;
110566    +       ;
110567    +      %if &freq ne  %then %do;
110568    +          freq &freq;
110569    +      %end;
110570    +      %if &weight ne  %then %do;
110571    +          weight &weight;
110572    +      %end;
110574    +      run;
110575    +      %if &corrmatrix eq Y %then %do;
110576    +      data  &outcorr (drop = _NCL_ _TYPE_);
110577    +           set  &outstat ;
110578    +           if _TYPE_ ='CORR' then output;
110579    +      run;
110580    +      %end;
110581    +    %end;
110582    +    %else %do;
110583    +       proc corr data=&indata outp=&outstat noprint;
110584    +            var
110585    +       %let dsid = %sysfunc(open(&indata));
110586    +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
110587    +          %do i = 1 %to &nvar;
110588    +              %let _name = %sysfunc(varname(&dsid, &i));
110589    +              %if &_name ne &target %then;
110590    +              &_name
110591    +           %end;
110592    +        %let dsid= %sysfunc(close(&dsid));
110593    +        ;
110594    +        with &target;
110595    +        run;
110596    +    %end;
110597    +    quit;
110598    +%mend MakeCorrelation;
110601    +%macro MakeCorrelationDistance(indata=,
110602    +                               outdata=,
110603    +                               rsquare = N
110604    +                               );
110605    +    data corr_tmp;
110606    +        set &indata;
110607    +        if _N_ = 1 then do;
110608    +           output;
110609    +           stop;
110610    +         end;
110611    +    run;
110612    +    %if &outdata ne  %then %let  _outdata = &outdata;
110613    +    %else %let _outdata = &indata;
110615    +    data &_outdata;
110616    +         set &indata;
110618    +         %let dsid = %sysfunc(open(work.corr_tmp));
110619    +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
110620    +          %do i = 2 %to &nvar;
110621    +              %let _name = %sysfunc(varname(&dsid, &i));
110622    +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
110623    +              %else  %let _name_md = &_name;
110624    +              &_name = 1- &_name_md;
110625    +          %end;
110626    +      %let dsid= %sysfunc(close(&dsid));
110627    +      run;
110628    +      proc datasets lib = work nolist;
110629    +           delete corr_tmp;
110630    +      run;
110631    +      quit;
110632    +  %mend MakeCorrelationDistance;
110635    +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
110636    +                                   rsquare = N
110637    +                                   );
110638    +    data corr_tmp;
110639    +        set &indata;
110640    +    run;
110641    +    proc sql noprint;
110642    +           update &indata
110643    +           set
110644    +     %let dsid = %sysfunc(open(work.corr_tmp));
110645    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
110646    +          %do i = 4 %to &nvar;
110647    +          %let _name = %sysfunc(varname(&dsid, &i));
110648    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
110649    +            %else  %let _name_md = &_name;
110650    +            %if &i < &nvar %then %do;
110651    +               &_name = 1- &_name_md ,
110652    +            %end;
110653    +            %else %do;
110654    +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
110655    +            %end;
110656    +          %end;
110657    +      %let dsid= %sysfunc(close(&dsid));
110659    +      select * from &indata;
110660    +      run;
110661    +     data &indata( drop = _NCL_);
110662    +           set &indata;
110663    +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
110664    +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
110665    +     run;
110666    +     data &indata(DROP = _NCL_);
110667    +           set &indata;
110668    +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
110669    +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
110670    +           rename _NAME_ = _VAR_;
110671    +     run;
110672    +     proc datasets lib = work nolist;
110673    +           delete corr_tmp;
110674    +     run;
110675    +     quit;
110676    + %mend UpdateOutStatCorrToDistance;
110679    +%macro HierClusWithCorr(indata= ,
110680    +                        ncluster=,
110681    +                        method = Ward,
110682    +                        outtree = _outtree,
110683    +                        idvar =_VAR_,
110684    +                        outdata=,
110685    +                        rescore = N,
110686    +                        newncluster=
110687    +                        );
110688    +      %global &newncluster;
110689    +      %if &rescore ne Y %then %do;
110690    +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
110691    +                   method=&method outtree=&outtree noprint;
110692    +           id &idvar;
110693    +      run;
110694    +      %end;
110695    +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
110696    +      run;
110697    +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
110698    +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
110699    +      run;
110700    +      data _outcontent;
110701    +          set _outcontent;
110702    +          if NAME in ('_TYPE_' , '_VAR_') then delete;
110703    +          index = 1;
110704    +          rename NAME = _NAME_;
110705    +      run;
110706    +      proc sort data=_outcontent;
110707    +          by _NAME_;
110708    +      run;
110709    +      proc sort data =&outdata;
110710    +           by _NAME_;
110711    +      run;
110712    +      data &outdata(drop=index);
110713    +          merge &outdata _outcontent;
110714    +          by _NAME_;
110715    +          if index = . then delete;
110716    +      run;
110717    +      /*-----------------------------------------------------------*/
110718    +      data &outdata;
110719    +           length CLUSNAME $16;
110720    +           set &outdata;
110721    +           if CLUSTER > &ncluster then delete;
110722    +           CLUSNAME='GC'||strip(CLUSTER);
110723    +           *label CLUSNAME = "Cluster Name";
110724    +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
110725    +           rename _NAME_ = VARIABLE ;
110726    +           *label _NAME_ = "Variable";
110727    +           *label CLUSTER = "Cluster";
110728    +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
110729    +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
110730    +      run;
110731    +      proc sort data=&outdata out=&outdata;
110732    +           by CLUSTER;
110733    +      run;
110734    +      proc means data =&outdata noprint;
110735    +           output out=_meanout;
110736    +      run;
110737    +      data _null_;
110738    +            set _meanout;
110739    +            if strip(_STAT_) eq 'MAX' then do;
110740    +            call symput("&newncluster", CLUSTER);
110741    +            stop;
110742    +            end;
110743    +      run;
110745    +      proc datasets lib = work nolist;
110746    +           delete _outcontent _meanout;
110747    +      run;
110748    +      quit;
110749    +%mend  HierClusWithCorr;
110751    +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
110753    +     data _tmpindata;
110754    +          set &indata;
110755    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
110756    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
110757    +          if _TYPE_ = 'STD' then _NAME_='STD';
110758    +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
110759    +          DROP _TYPE_ _NCL_;
110760    +     run;
110762    +     filename _file_  "&fileRef";
110764    +     data _null_;
110765    +        FILE _file_ MOD;
110766    +        put ' ';
110767    +        put "/*-------------------------------------------------*/";
110768    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
110769    +        put "/*-------------------------------------------------*/";
110770    +        put ' ';
110771    +        %let dsid = %sysfunc(open(work._tmpindata));
110773    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
110774    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
110775    +        %let k = 1;
110776    +        %do %while(^%sysfunc(fetch(&dsid)));
110777    +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
110778    +               %if &k > 2 %then %do;
110779    +                %let cn = %eval(&k-2);
110780    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
110781    +                %end;
110782    +                %let k = %eval(&k+1);
110784    +        %end;
110785    +        %let rc = %sysfunc(rewind(&dsid));
110787    +        %do j= 2 %to &nvar;
110788    +            %let _varname = %sysfunc(varname(&dsid, &j));
110789    +            %do %while(^%sysfunc(fetch(&dsid)));
110790    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
110791    +                %if &_name = MEAN %then
110792    +                %let _mean = %sysfunc(getvarn(&dsid, &j));
110793    +                %else %if &_name = STD %then
110794    +                %let _std = %sysfunc(getvarn(&dsid, &j));
110795    +                %else %do;
110796    +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
110797    +                      %let abscoeff = %sysfunc(abs(&coeff));
110798    +                          %if &abscoeff >  0 %then %do;
110799    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
110800    +                           %end;
110801    +                 %end;
110802    +             %end;
110803    +             %let rc = %sysfunc(rewind(&dsid));
110804    +         %end;
110806    +        %let dsid= %sysfunc(close(&dsid));
110808    +     run;
110810    +     filename _file_;
110811    +     proc datasets lib = work nolist;
110812    +           delete _tmpindata;
110813    +     run;
110814    +     quit;
110815    +%mend CreateScoreCode2;
110818    +%macro MakeDeltaCode2(groupds=,deltacodefile=);
110820    +     /*--- Build Code to Modify Metadata ---*/
110821    +     filename X "&deltacodefile";
The SAS System
 
110822    +     data _null_;
110823    +        FILE X;
110824    +        set &groupds end=eof;
110825    +        if _N_=1 then do;
110826    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
110827    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
110828    +           %end;
110829    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
110830    +           put "if upcase(strip(NAME)) in (";
110831    +        end;
110832    +        if Strip(upcase(Selected)) eq 'YES' then do;
110833    +           string = '"'!!trim(left(VARIABLE))!!'"';
110834    +           put string;
110835    +        end;
110836    +        if eof then do;
110837    +           put ') then ROLE="INPUT";';
110838    +           put 'else ROLE="REJECTED";';
110839    +           put 'end;';
110841    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
110842    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
110843    +           %end;
110844    +        end;
110845    +     run;
110846    +     quit;
110848    +     filename X;
110849    +     quit;
110850    +%mend MakeDeltaCode2;
110852    +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
110853    +  %global &ngc;
110854    +  data _null_;
110855    +  %if &indata ne %then %do;
110856    +      %let dsid = %sysfunc(open(&indata));
110857    +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
110858    +      %let dsid = %sysfunc(close(&dsid));
110859    +  %end;
110860    +  %else %do;
110861    +       %let nvar = %eval(&ninput+&ndummy); ;
110862    +  %end;
110863    +  %let numgc = %eval(&nvar/&div+2);
110864    +  %let &ngc = &numgc;
110865    +   run;
110866    +  quit;
110867    +%mend getInitialGClusterNumber;
110870    +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
110871    +data &outlink(drop = Selected);
110872    +     set &indata;
110873    +     LINKID = _N_;
110874    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
110875    +run;
110876    +data &outnode(keep=NODEID TYPE LABEL);
110877    +    set &indata;
110878    +    length TYPE $16;
110879    +    rename VARIABLE = NODEID;
110880    +    *label  CLUSNAME="Node ID";
110881    +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
110882    +    TYPE = "VARIABLE";
110883    +    *label TYPE = "Node Type";
110884    +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
110885    +    run;
110886    +data _tmp(keep=NODEID TYPE LABEL);
110887    +    set &indata;
110888    +    length TYPE $16;
110889    +    rename CLUSNAME = NODEID;
110890    +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
110891    +    TYPE = "GCLUSTER";
110892    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
110893    +    run;
110894    +proc sort data=_tmp;
110895    +    by NODEID;
110896    +run;
110897    +data _tmp;
110898    +    set _tmp; by NODEID;
110899    +    if first.NODEID then output;
110900    +run;
110901    +proc sort data=&outnode;
110902    +    by NODEID;
110903    +run;
110904    +data  &outnode;
110905    +    set _tmp &outnode;
110906    +run;
110907    +proc datasets lib = work nolist;
110908    +     delete _tmp;
110909    +run;
110910    +quit;
110911    +%mend MakeGobalConstellData;
110913    +/* Make contellation plot data among GCLUSTERS */
110915    +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
110917    +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
110918    +     set &indata;
110919    +     LINKID = _N_;
110920    +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
110921    +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
110922    +     end;
110923    +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
110924    +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
110925    +     end;
110926    +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
110927    +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
110928    +    end;
110929    +run;
110931    +data _tmp_outrsquare;
110932    +        set &inoutrsq;
110933    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
110934    +run;
110936    +proc freq data =_tmp_outrsquare noprint;
110937    +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
110938    +run;
110940    +data &outnode(keep=_NAME_ TYPE LABEL);
110941    +    set &outlink;
110942    +    length TYPE $16;
110943    +    length LABEL $100;
110944    +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
110946    +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
110947    +    TYPE = "GCLUSTER";
110948    +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
110949    +    end;
110950    +    else do;
110951    +    TYPE= "ROOT";
110952    +    LABEL= _NAME_;
110953    +    end;
110954    +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
110955    +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
110956    +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
110957    +    run;
110959    +proc sort data=&outnode;
110960    +     by _NAME_;
110961    +proc sort data=_tmp_GCLUSFREQ;
110962    +     by _NAME_;
110963    +run;
110965    +data  &outnode;
110966    +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
110967    +     if COUNT=. then COUNT=1;
110968    +run;
110970    +proc datasets lib = work nolist;
110971    +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
110972    +run;
110974    +quit;
110975    +%Mend MakeGClusterConstData;
110978    +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
110980    +    data _gscoretmpds;
110981    +          set &indata;
110982    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
110983    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
110984    +          if _TYPE_ = 'STD' then _NAME_='STD';
110985    +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
110986    +          DROP _TYPE_ _NCL_;
110987    +     run;
110989    +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
110990    +        GCluster Component &globalclusid ------ */
110992    +    filename _file_  "&fileref";
110994    +    data _null_;
110995    +        %if &globalclusid eq 1 %then %do;
110996    +          FILE _file_;
110997    +        %end;
110998    +        %else %do;
110999    +          FILE _file_ MOD;
111000    +        %end;
111002    +        %let dsid = %sysfunc(open(work._gscoretmpds));
111003    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
111004    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
111006    +        %let k = 1;
111007    +        %do %while(^%sysfunc(fetch(&dsid)));
111008    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
111009    +                %if &k > 2 %then %do;
111010    +                put "&_name = 0 ; ";
111011    +                %end;
111012    +                %let k = %eval(&k+1);
111013    +        %end;
111015    +        %let rc = %sysfunc(rewind(&dsid));
111016    +        %do i= 2 %to &nvar;
111017    +            %let _varname =  %sysfunc(varname(&dsid, &i));
111018    +            %do %while(^%sysfunc(fetch(&dsid)));
111019    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
111020    +                %if &_name = MEAN %then
111021    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
111022    +                %else %if &_name = STD %then
111023    +                %let _std = %sysfunc(getvarn(&dsid, &i));
111024    +                %else %do;
111025    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
111026    +                      %let abscoeff = %sysfunc(abs(&coeff));
111027    +                          %if &abscoeff >  0 %then %do;
111028    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
111029    +                           %end;
111030    +                 %end;
111031    +             %end;
111032    +             %let rc = %sysfunc(rewind(&dsid));
111034    +         %end;
111036    +        %let dsid= %sysfunc(close(&dsid));
111037    +       run;
111040    +       proc datasets lib=work nolist;
111041    +            delete _gscoretmpds;
111042    +       run;
111043    +      quit;
111045    +%mend CreateGClusterScoreCode;
111048    +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
111050    +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
111051    +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
111052    +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
111053    +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
111054    +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
111055    +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
111056    +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
111057    +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
111058    +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
111059    +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
111060    +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
111061    +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
111062    +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
111063    +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
111065    +   filename gsfile "&gscorecode";
111067    +   data &EM_USER_GSCORE;
111068    +             set &indata;
111069    +             %include  gsfile;
111070    +        keep
111071    +        %do i=1 %to &ngcluster;
111072    +         %let gcvarname = GC&i;
111073    +         &gcvarname
111074    +        %end;
111075    +     ;
111076    +   run;
111078    +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
111079    +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
111080    +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
111081    +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
111082    +    noprint  ;
111083    +     var
111084    +       %do i=1 %to &ngcluster;
111085    +         %let gcvarname = GC&i;
111086    +         &gcvarname
111087    +        %end;
111088    +   ;
111089    +   run;
111092    +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
111093    +   data &EM_USER_GSCORECORRPLOT ;
111094    +        set &EM_USER_GSCORECORRPLOT;
111095    +        rename _X_ = X;
111096    +        rename _Y_ = Y;
111097    +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
111098    +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
111099    +   run;
111101    +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
111103    +   data &EM_USER_GSCORETREE;
111104    +        length _NAME_ $32;
111105    +        length _LABEL_ $100;
111106    +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
111107    +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
111108    +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
111109    +        end;else do;
111110    +         _LABEL_ = _NAME_;
111111    +        end;
111112    +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
111114    +   run;
111116    +   quit;
111118    +%mend MakeGClusterCorrelation;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
111121    +%macro report;
111122    +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
111124    +    data _null_;
111125    +         set &EM_USER_VARCLUSMETA;
111126    +         if _N_=1 then
111127    +         call symput('_trainnum', TrainNum);
111128    +    run;
111129    +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
111130    +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
111131    +           %include temp;
111132    +           filename temp;
111133    +           %report1;
111134    +       %end;
111135    +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
111136    +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
111137    +           %include temp;
111138    +           filename temp;
111139    +           %report2;
111140    +    %end;
111142    +   /* End of all runs, change the flag of newtrain to N */
111143    +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
111144    +    data &EM_USER_VARCLUSMETA;
111145    +         set &EM_USER_VARCLUSMETA;
111146    +         NewTrain = "N";
111147    +    run;
111148    +    quit;
111149    +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):   ;
MPRINT(REPORT):   data _null_;
MPRINT(REPORT):   set EMWS8.VarClus_VARCLUSMETA;
MPRINT(REPORT):   if _N_=1 then call symput('_trainnum', TrainNum);
MPRINT(REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      17:26
NOTE: There were 1 observations read from the data set EMWS8.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
111152    +%macro report1;
111154    +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
111155    +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
111156    +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
111158    +   data &EM_USER_OUTVARSEL;
111159    +        set &EM_USER_OUTRSQUARE;
111160    +        if upcase(strip(SELECTED)) = 'YES' then output;
111161    +   run;
111163    +   data _tmp_outrsquare;
111164    +        set &EM_USER_OUTRSQUARE;
111165    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
111166    +   run;
111168    +   proc freq data =_tmp_outrsquare noprint;
111169    +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
111170    +   run;
111172    +   proc datasets lib = work nolist;
111173    +     delete _tmp_outrsquare;
111174    +   run;
111176    +   data &EM_USER_CLUSFREQ;
111177    +       set &EM_USER_CLUSFREQ;
111178    +       label
111179    +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
111180    +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
111181    +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
111182    +       ;
111183    +   run;
111185    +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
111186    +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
111187    +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
111189    +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
111190    +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=_NAME_, PARENT=_PARENT_, HEIGHT=_PROPOR_ , TipText = Variable, description=dendrogram );
111191    +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
111192    +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
111193    +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
111194    +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
111195    +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
111196    +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
111198    +   /*
111199    +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
111200    +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
111201    +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
111204    +%mend report1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(REPORT):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   data EMWS8.VarClus_OUTVARSEL;
MPRINT(REPORT1):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(REPORT1):   if upcase(strip(SELECTED)) = 'YES' then output;
MPRINT(REPORT1):   run;
 
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_OUTVARSEL has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   data _tmp_outrsquare;
MPRINT(REPORT1):   set EMWS8.VarClus_OUTRSQUARE;
MPRINT(REPORT1):   if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
MPRINT(REPORT1):   run;
 
NOTE: There were 32 observations read from the data set EMWS8.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   proc freq data =_tmp_outrsquare noprint;
MPRINT(REPORT1):   tables cluster/out=EMWS8.VarClus_CLUSFREQ sparse;
MPRINT(REPORT1):   run;
 
NOTE: There were 24 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS8.VARCLUS_CLUSFREQ has 8 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   proc datasets lib = work nolist;
MPRINT(REPORT1):   delete _tmp_outrsquare;
MPRINT(REPORT1):   run;
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):   data EMWS8.VarClus_CLUSFREQ;
MPRINT(REPORT1):   set EMWS8.VarClus_CLUSFREQ;
MPRINT(REPORT1):   label cluster = "Cluster" count = "Frequency Count" percent = "Percent of Total Frequency" ;
MPRINT(REPORT1):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS8.VARCLUS_CLUSFREQ has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTVARSEL";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "selectedvariables";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07990983132268;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "CLUSFREQ";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varfreqbycluster";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15222094960148;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTRSQUARE";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varseltable";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.37427747267031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 252 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 378 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Constellation";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "FALSE";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "clusterplot";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "OUTLINK";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "OUTNODE";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "NODEID";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "CIRCLE";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "LINKID";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "Variable";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43662391623324;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 378 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 504 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTTREE";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DENDROGRAM";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "dendrogram";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "Variable";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "_PARENT_";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "_NAME_";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "_PROPOR_";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06615954966571;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 504 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 630 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTRSQUARE";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SCATTER";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "rsqplot";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RSqRatio";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "Selected";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 630 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 757 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RsqWithOwnClusComp";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 757 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 884 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RsqWithNextClusComp";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 884 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1011 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCORRPLOT";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varcorr";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_X_";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_Y_";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "correlation";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.98441698308308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1011 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1138 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCLUSCORRPLOT";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "cluscorr";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "X";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "Correlation";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8837299784104;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1138 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1265 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCLUSSTRUCT";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "corrstruct";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_anynumeric_";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1265 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1391 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):   ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   data EMWS8.VarClus_VARCLUSMETA;
MPRINT(REPORT):   set EMWS8.VarClus_VARCLUSMETA;
MPRINT(REPORT):   NewTrain = "N";
MPRINT(REPORT):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS8.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   quit;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111207
111208     *------------------------------------------------------------*;
111209     * End REPORT: VarClus;
111210     *------------------------------------------------------------*;
 
111211     /* Reset EM Options */
111212     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
111213     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
111214     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
111215     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
111216     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
111217     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1391 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1391 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
