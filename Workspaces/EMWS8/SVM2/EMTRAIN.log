MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.18 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                19.18 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O156D84T 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O156D84T new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.18 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.18 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
263769     proc freq data=EMWS8.SVM2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM2_VariableSet noprint;
263770     table ROLE*LEVEL/out=WORK.SVM2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM2META;
263771     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.SVM2_VARIABLESET.
NOTE: The data set WORK.SVM2META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

263772     proc print data=WORK.SVM2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM2META label noobs;
263773     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
263774     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
263774   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
263774   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
263775     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
263776     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
263777     run;

NOTE: There were 8 observations read from the data set WORK.SVM2META.
NOTE: The PROCEDURE PRINT printed page 68.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

263778     title10;
MPRINT(EM_DIAGRAM):   title10;
263779     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN EMWS8 Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN EMWS8 Meta2_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta2_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM2_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM2_DepVar_DD 
out=EMWS8.SVM2_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
263826     data WORK.SVM2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
263827     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
263828     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
263828   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
263828   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
263829        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
263829   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
263829   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
263830     set EMWS8.SVM2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM2_DEPVAR_DM( where=(_TYPE_="TARGET"));
263831     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
263832     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
263833     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
263834     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
263835     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
263836     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
263837     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
263838     end;
MPRINT(EM_DIAGRAM):   end;
263839     output;
MPRINT(EM_DIAGRAM):   output;
263840     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

263841     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
263842     proc print data=WORK.SVM2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM2_EVENT noobs label;
263843     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
263844     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
263845     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
263846     run;

NOTE: There were 1 observations read from the data set WORK.SVM2_EVENT.
NOTE: The PROCEDURE PRINT printed page 69.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

263847     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
263848     proc print data = EMWS8.SVM2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM2_DepVar_DM noobs label;
263849     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
263850     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
263851     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
263851   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
263851   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
263852     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
263853     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
263854     run;

NOTE: There were 7 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 70.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

263855     title10;
MPRINT(EM_DIAGRAM):   title10;
263856     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
264362     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
264363     * SVM2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM2: Generation of macros and macro variables;
264364     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
264365     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

264366     %let EMEXCEPTIONSTRING=;
264367     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
264368     * TRAIN: SVM2;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM2;
264369     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
264370     %let EM_ACTION = TRAIN;
264371     %let syscc = 0;
264372     %macro main;
264373     
264374        filename temp catalog 'sashelp.emmodl.svm_macros.source';
264375        %include temp;
264376        filename temp;
264377        %SetProperties;
264378        %if %upcase(&EM_ACTION) = CREATE %then %do;
264379            filename temp catalog 'sashelp.emmodl.svm_create.source';
264380            %include temp;
264381            filename temp;
264382            %create;
264383        %end;
264384        %else
264385        %if %upcase(&EM_ACTION) = TRAIN %then %do;
264386            filename temp catalog 'sashelp.emmodl.svm_train.source';
264387            %include temp;
264388            filename temp;
264389            %train;
264390        %end;
264391        %else
264392        %if %upcase(&EM_ACTION) = REPORT %then %do;
264393            filename temp catalog 'sashelp.emmodl.svm_report.source';
264394            %include temp;
264395            filename temp;
264396            %report;
264397        %end;
264398     
264399     %mend main;
264400     
264401     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
264403    +%macro SetProperties;
264404    +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
264405    +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
264406    +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
264407    +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
264408    +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
264409    +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
264410    +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
264411    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
264412    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
264413    +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
264414    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
264415    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
264416    +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
264417    +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
264418    +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
264419    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
264420    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
264421    +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
264422    +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
264423    +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
264424    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
264425    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
264426    +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
264427    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
264428    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
264429    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
264430    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
264431    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
264432    +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
264433    +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
264434    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
264435    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
264436    +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
264437    +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
264438    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
264439    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
264440    +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
264441    +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
264442    +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
264443    +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
264444    +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
264445    +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
264446    +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
264447    +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
264448    +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
264449    +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
264450    +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
264451    +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
264452    +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
264453    +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
264455    +%mend SetProperties;
264458    +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
264460    +  %local emclassout emvarout;
264462    +   proc dmdb batch dmdbcat= _emdmdb
264464    +   %if &out ne 0 %then %do ;
264465    +       data=&indata out= _emdmdb &emclassout &emvarout;
264466    +   %end ;
264467    +   %else %do ;
264468    +       data=&indata &emclassout &emvarout;
264469    +   %end ;
264471    +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
264472    +   %if %em_class   ne  %then %do ;
264473    +       class %EM_CLASS;
264474    +   %end ;
264475    +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
264476    +   %if %em_target ne %then %do ;
264477    +          target %em_target ;
264478    +   %end ;
264479    +   run ;
264480    +%mend make_dmdb;
264483    +%macro svm_training(indata=,
264484    +                    task=,
264485    +                    classtask=,
264486    +                    method=,
264487    +                    outest =,
264488    +                    outclass =,
264489    +                    outfit =,
264490    +                    isValidationSet =,
264491    +                    testdata =,
264492    +                    testout =,
264493    +                    validSource=,
264494    +                    usecgbydefault=
264495    +                    );
264497    +%make_dmdb(indata=&indata, out=1);
264499    +options debug="nlpitermsg=2";
264501    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
264502    +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
264503    +ods output tun_crt = &EM_USER_TUNINGCRIT;
264504    +%end;
264506    +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
264507    +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
264508    +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
264509    +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
264511    +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
264512    +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
264513    +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
264514    +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
264517    +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
264518    +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
264519    +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
264520    +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
264522    +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
264523    +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
264524    +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
264525    +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
264528    +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
264529    +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
264530    +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
264531    +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
264534    +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
264535    +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
264536    +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
264537    +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
264538    +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
264539    +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
264540    +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
264541    +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
264542    +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
264543    +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
264544    +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
264545    +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
264549    +proc svm data= _emdmdb
264550    +         dmdbcat= _emdmdb
264551    +         nomonitor
264552    +         outfit= &outfit
264553    +         outclass= &outclass
264554    +         outest= &outest
264555    +         out = _outtrain
264556    +         maxiter = &_PROPERTY_MAXITER
264557    +         maxfunc = &_PROPERTY_MAXFUNC
264558    +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
264559    +         gconv =   &_PROPERTY_GCONV
264560    +         absgconv = &_PROPERTY_ABSGCONV
264561    +         xconv =   &_PROPERTY_XCONV
264562    +         absxconv = &_PROPERTY_ABSXCONV
264564    +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
264565    +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
264566    +             xscale
264567    +         %end;
264568    +         %else %do;
264569    +             noscale
264570    +         %end;
264571    +    %end;
264572    +    %if &task eq CLASSIFICATION %then %do;
264573    +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
264574    +         method= &method
264575    +        %end;
264576    +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
264577    +         method= DQP   qpsize = &_PROPERTY_QPSIZE
264578    +        %end;
264579    +        %else %do;
264580    +         method= &EM_PROPERTY_METHOD
264581    +        %end;
264582    +    %end;
264583    +    %else %do;
264584    +         method= &method  task=&classtask
264585    +         /*%if &classtask eq EPS_REG %then %do; */
264586    +             esp=&_PROPERTY_EPSILON
264587    +         /*%end;*/
264588    +    %end;
264590    +    %if &EM_PROPERTY_KERNEL ne  %then %do;
264591    +         kernel = &EM_PROPERTY_KERNEL
264592    +    %end;
264593    +    %else %do;
264594    +         kernel = Linear
264595    +    %end;
264597    +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
264599    +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
264600    +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
264601    +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
264602    +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
264603    +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
264604    +            tun = &EM_PROPERTY_TUNINGMETHOD
264605    +        %end;
264607    +    %end;
264609    +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
264610    +         CV  = &EM_PROPERTY_CVMETHOD
264611    +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
264612    +         fold = &EM_PROPERTY_CVFOLD
264613    +         %end;
264614    +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
264615    +                testdata = &testdata
264616    +         %end;
264617    +    %end;
264619    +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
264620    +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
264621    +    %end;
264623    +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
264624    +    &EM_PROPERTY_PRINTOPTION
264625    +    %end;
264627    +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
264628    +    POPTHIS
264629    +    %end;
264630    +    ;
264631    +    var %EM_INPUT %EM_REJECTED;
264632    +    target %EM_TARGET;
264634    +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
264636    +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
264637    +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
264638    +             by &_PROPERTY_TUN_C_BY
264639    +             ;
264640    +         %end;
264641    +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
264642    +             C  &_PROPERTY_USERCVALUE ;
264643    +         %end;
264645    +     %end;
264646    +     %else %do;
264647    +           C  &_PROPERTY_USERCVALUE ;
264648    +     %end;
264651    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
264653    +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
264654    +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
264655    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
264656    +                  by &_PROPERTY_POLY_TUN_KP1_BY
264657    +                ;
264658    +             %end;
264659    +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
264660    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
264661    +             %end;
264662    +          %end;
264663    +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
264664    +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
264665    +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
264666    +                ;
264667    +              %end;
264668    +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
264669    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
264670    +              %end;
264671    +           %end;
264672    +           %else %do;
264673    +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
264674    +           %end;
264675    +    %end;
264677    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
264678    +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
264679    +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
264680    +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
264681    +                  by &_PROPERTY_RBF_TUN_KP1_BY
264682    +                  ;
264683    +              %end;
264684    +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
264685    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
264686    +              %end;
264687    +          %end;
264688    +          %else %do;
264689    +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
264690    +          %end;
264691    +    %end;
264694    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
264696    +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
264698    +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
264699    +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
264700    +                by &_PROPERTY_SGMD_TUN_KP1_BY
264701    +             ;
264702    +             %end;
264703    +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
264704    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
264705    +             %end;
264707    +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
264708    +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
264709    +                by &_PROPERTY_SGMD_TUN_KP2_BY
264710    +             ;
264711    +             %end;
264712    +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
264713    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
264714    +             %end;
264715    +          %end;
264716    +          %else %do;
264717    +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
264718    +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
264719    +          %end;
264720    +    %end;
264722    +run;
264723    +%TRAINENDLINE:
264724    +quit;
264725    +%mend svm_training;
264727    +%macro svm_score(indata=,
264728    +                 inest=,
264729    +                 infit=,
264730    +                 inclass=,
264731    +                 outindata=,
264732    +                 outscore=,
264733    +                 targetLevel=
264734    +                 );
264737    +%if &TargetLevel eq BINARY %then %do;
264739    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
264741    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
264742    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
264743    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
264744    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
264747    +%do %while(^ %sysfunc(fetch(&dsid)));
264748    +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
264749    +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
264750    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
264751    +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
264752    +%end;
264754    +%let dsid = %sysfunc(close(&dsid));
264757    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
264758    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
264760    +%do %while(^ %sysfunc(fetch(&dsid)));
264761    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
264762    +%end;
264763    +%let dsid = %sysfunc(close(&dsid));
264765    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
264766    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
264768    +%do %while(^ %sysfunc(fetch(&dsid)));
264769    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
264770    +%end;
264771    +%let dsid = %sysfunc(close(&dsid));
264774    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
264775    +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
264776    +run;
264778    +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
264779    +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
264779   !+from a part of %EM_MODEL() macro */
264781    +data &outscore(drop=_P);
264782    +      set  &outscore;
264783    +     if (_P_ < -600) then _p =0;
264784    +     else _P = 1/(1+EXP((-1)*(_P_)));
264786    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
264787    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
264788    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
264790    +%do %while(^ %sysfunc(fetch(&dsid)));
264791    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
264792    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
264793    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
264794    +       &P_Var = _P;
264795    +   %end;
264796    +   %else %do;
264797    +       &P_Var = 1 - _P;
264798    +       %let targetNonEvent = &P_LEVEL;
264799    +   %end;
264800    +%end;
264801    +%let dsid = %sysfunc(close(&dsid));
264803    +%include resifref;
264805    +run;
264807    +filename resifref;
264809    +%end; /* the end of if - targetlevel eq binary */
264810    +%else %do;
264812    +/* ----     interval target  ------ */
264814    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
264815    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
264817    +%do %while(^ %sysfunc(fetch(&dsid)));
264818    +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
264819    +%end;
264820    +%let dsid = %sysfunc(close(&dsid));
264822    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
264823    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
264825    +%do %while(^ %sysfunc(fetch(&dsid)));
264826    +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
264827    +%end;
264829    +%let dsid = %sysfunc(close(&dsid));
264831    +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
264832    +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
264833    +run;
264835    +%end; /* end of targetlevel eq interval */
264838    +%mend svm_score;
264841    +%macro makeSVMFitStatDs();
264843    +data &EM_USER_SVMFITDS;
264844    +     set &EM_USER_SVMFITSTAT;
264845    +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
264845   !+noquote))";
264846    +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
264846   !+rpt_svmfitstat_label_k_par2, noquote))";
264847    +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
264847   !+rpt_svmfitstat_label_k_par3, noquote))";
264848    +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
264848   !+ noquote))";
264849    +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
264849   !+noquote))";
264850    +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
264850   !+rpt_svmfitstat_label_margin, noquote))";
264851    +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
264851   !+ noquote))";
264852    +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
264852   !+noquote))";
264853    +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
264853   !+noquote))";
264854    +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
264854   !+noquote))";
264855    +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
264855   !+noquote))";
264856    +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
264856   !+noquote))";
264857    +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
264857   !+rpt_svmfitstat_label_ntrain, noquote))";
264858    +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
264858   !+ noquote))";
264859    +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
264859   !+ noquote))";
264860    +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
264860   !+noquote))";
264861    +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
264861   !+rpt_svmfitstat_label_radius, noquote))";
264862    +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
264862   !+noquote))";
264863    +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
264863   !+noquote))";
264864    +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
264864   !+ noquote))";
264865    +    if _TYPE_ ='_ACCTAB_' then delete;
264866    +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
264867    +      _BIAS_= _K_PAR_;
264868    +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
264869    +    %end;
264870    +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
264871    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
264872    +    %end;
264873    +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
264874    +      DROP _K_PAR2_ _K_PAR3_  _L1_;
264875    +    %end;
264876    +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
264877    +      DROP _K_PAR3_  _L1_;
264878    +    %end;
264879    +run;
264881    +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
264882    +run;
264884    +data &EM_USER_SVMFITDS;
264885    +     set &EM_USER_SVMFITDS;
264886    +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
264886   !+;
264887    +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
264888    +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
264888   !+noquote))";
264889    +     Rename COL1 = Train;
264890    +     if _NAME_ = '_ACCU_' then delete;
264891    +run;
264893    +%mend makeSVMFitStatDs;
264895    +%macro svm_fitstat(validSource=);
264897    +%EM_FITSTAT(trainDs = work._tmp_scored_train,
264898    +            %if &_validSource= VALIDSET %then %do;
264899    +                validDs=work._tmp_scored_test,
264900    +                testDs=,
264901    +            %end;
264902    +            %else %if &_validSource= TESTSET %then %do;
264903    +                validDs=,
264904    +                testDs=work._tmp_scored_test,
264905    +            %end;
264906    +            decdata=&EM_DEC_DECDATA,
264907    +            decmeta=&EM_DEC_DECMETA,
264908    +            freqvar=, df=,
264909    +            outfit=&EM_DATA_EMOUTFIT);
264911    +data &EM_DATA_EMOUTFIT;
264912    +     set &EM_DATA_EMOUTFIT;
264913    +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
264913   !+_SBC_; /* Because of DF */
264914    +run;
264915    +%mend svm_fitstat;
264917    +/*----------------------------------------------------------------------------------
264917   !+-----
264918    +   OUTEST data set
264920    +                                                       APRTMNT_  APRTMNT_   TELIND_
264920   !+  TELIND_
264921    + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
264921   !+     2_
264923    +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
264923   !+   0.97609
264924    +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
264924   !+   0.15280
264925    +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
264925   !+  -0.07311
264927    +=-----------------------------------------------------------------------------------
264927   !+--*/
264928    +/* this is not used, generate score code directly for the case of linear svm */
264929    +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
264929   !+Residual=);
264931    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
264933    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
264934    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
264935    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
264936    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
264937    +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
264939    +%do %while(^ %sysfunc(fetch(&dsid)));
264940    +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
264941    +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
264942    +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
264943    +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
264944    +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
264945    +%end;
264946    +%let dsid = %sysfunc(close(&dsid));
264948    +data _cmeta;
264949    +    set &ColumnsMeta;
264950    +    NAME = upcase(strip(NAME));
264951    +run;
264953    +data _tmpclass;
264954    +       set &outclass;
264955    +   _VAR_ = upcase(strip(_VAR_));
264956    +run;
264958    +proc sql;
264959    +create table _outclass as
264960    +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
264961    +  from  _tmpclass, _cmeta
264962    +  where _tmpclass._VAR_ = _cmeta.NAME;
264963    +run;
264965    +data _outclass;
264966    +    set _outclass;
264967    +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
264968    +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
264969    +run;
264970    +data _meands;
264971    +    set &outest;
264972    +    if _TYPE_='_MEAN_';
264973    +run;
264975    +/*
264976    +data _null_;
264977    +    set &outest;
264978    +    if _TYPE_='_PARMS_';
264979    +    call symput('bias', _STDEV_ );
264980    +    call symput('intercept', _MEAN_ );
264981    +run;
264982    +*/
264984    +filename  _File_ "&File";
264985    +data _null_;
264986    +    FILE _File_;
264987    +    length _line $500;
264988    +    drop _line;
264990    +    put ' ';
264991    +    put '/*-------------------------------------------------*/';
264992    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
264993    +    put '/*-------------------------------------------------*/';
264994    +    put ' ';
264996    +    put 'length _warn_ $ 4;';
264997    +    put 'label _warn_ = "Warnings";';
264998    +    put 'length _svm_uname $32;';
264999    +    put 'DROP _svm_uname ;';
265001    +  dsid = open("work._outclass");
265002    +    if dsid then do;
265003    +          oldvname ='';
265004    +          do while(not fetch(dsid));
265005    +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
265006    +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
265007    +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
265008    +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
265009    +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
265010    +             *put 'vtype =' vtype;
265011    +             *put 'vformat=' vformat;
265013    +             if oldname ne vname then do;
265014    +                 if vtype = 'N' then do;
265015    +                     if vformat eq ' ' then do;
265016    +                        put '_svm_uname = put(' vname ', Best12.);';
265017    +                     end; else do;
265018    +                        put '_svm_uname = put(' vname ',' vformat ');';
265019    +                     end;
265020    +                  end;
265021    +                  else do;
265022    +                     if vformat eq ' ' then do;
265023    +                        put '_svm_uname = ' vname ' ;';
265024    +                     end; else do;
265025    +                        put '_svm_uname = put(' vname ',' vformat ');';
265026    +                     end;
265027    +                  end;
265028    +                  put '%DMNORMIP(_svm_uname);';
265029    +              end; /* end of oldname ne vname */
265031    +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
265032    +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
265033    +              put _line;
265034    +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
265034   !+;';
265035    +              oldname = vname;
265036    +          end;
265038    +     end;
265039    +rc=close(dsid);
265041    +dsid = open("&outest");
265042    +    if dsid then do;
265043    +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
265043   !+noquote))"  "------ */";
265044    +          ncol = attrn(dsid, 'NVARS');
265045    +          do i=4 to ncol;
265046    +             vname = upcase(trim(left(varname(dsid,i))));
265047    +              do while(not fetch(dsid));
265048    +                  type = strip(getvarc(dsid,2));
265049    +                  select(type);
265050    +                      when('_MEAN_')  mean =  getvarn(dsid, i);
265051    +                      when('_STDEV_') std  =  getvarn(dsid, i);
265052    +                      when('_PARMS_') coeff = getvarn(dsid, i);
265053    +                  otherwise;
265054    +                  end;
265055    +              end; /* end of do-while*/
265056    +              *put '+' coeff '*(' vname '-' mean ')/' std;
265057    +              if i=4 then  do; put '_P_ =(' coeff ; end;
265058    +              else if i=5 then do; put '+' coeff ');' ; end;
265059    +              else do;
265060    +                      tmpvar = '_TMPVAR'||strip(i);
265061    +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
265062    +                      put 'else ' tmpvar '=' vname ';';
265063    +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
265064    +                      put 'drop  ' tmpvar ';';
265065    +              end;
265066    +              rc=rewind(dsid);
265067    +         end; /* end of  do i=6 to &nvars; */
265068    +         put ';';
265069    +     end;
265070    +    rc=close(dsid);
265071    + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
265071   !+"------ */";
265073    +%if &TargetLevel eq BINARY %then %do;
265075    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
265076    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265077    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
265079    +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
265080    +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
265082    +%do %while(^ %sysfunc(fetch(&dsid)));
265083    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
265084    +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
265085    +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
265086    +       put " &P_Var = _P;";
265087    +   %end;
265088    +   %else %do;
265089    +       put " &P_Var = 1 - _P;";
265090    +   %let targetNonEvent = &P_LEVEL;
265091    +   %end;
265092    +%end;
265093    +%let dsid = %sysfunc(close(&dsid));
265095    +%if &Residual = Y %then %do;
265097    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
265097   !+"------ */";
265099    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
265100    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265101    +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
265103    +   %do %while(^ %sysfunc(fetch(&dsid)));
265104    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
265105    +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
265106    +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
265107    +       put " &R_Var = 1 - _P;";
265108    +   %end;
265109    +   %else %do;
265110    +       put " &R_Var = 0 - (1 - _P);";
265111    +   %end;
265112    +   %end;
265113    +   %let dsid = %sysfunc(close(&dsid));
265114    +%end;
265115    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
265115   !+"------ */";
265117    +    put 'length _FORMAT_VAR $200;';
265118    +    put 'length _TARGNOR $%DMNORLEN; ';
265119    +    put 'DROP _FORMAT_VAR _TARGNOR;';
265120    +    %if &TargetFormat ne  %then %do;
265121    +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
265122    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
265123    +    %end;
265124    +    %else %do;
265125    +    %if &TargetType  = N  %then %do;
265126    +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
265127    +       %end;
265128    +       %else %do;
265129    +    put "_FORMAT_VAR= &TargetVar;";
265130    +       %end;
265131    +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
265132    +    %end;
265134    +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
265135    +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
265136    +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
265138    +    %do %while(^ %sysfunc(fetch(&dsid)));
265139    +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
265140    +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
265141    +        %let qF_var_label = %str(%"&F_var_label%");
265142    +    put "&F_var = _TARGNOR ;";
265143    +    put "label &F_var = &qF_Var_label;";
265144    +    %end;
265145    +    %let dsid = %sysfunc(close(&dsid));
265147    +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
265147   !+"------ */";
265149    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
265150    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265151    +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
265153    +%do %while(^%sysfunc(fetch(&dsid)));
265154    +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
265155    +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
265156    +   %let qI_var_label = %str(%"&I_var_label%");
265157    +   %let qTargetEvent = %str(%"&targetEvent%");
265158    +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
265159    +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
265160    +       put " else &I_Var  =  &qtargetNonEvent ;";
265161    +       put " label &I_var = &qI_var_label;";
265162    +%end;
265163    +%let dsid = %sysfunc(close(&dsid));
265165    +%end;  /* end of TargetLevel= Binary */
265167    +%else %if &TargetLevel eq INTERVAL %then %do;
265169    +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
265170    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265171    +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
265173    +%do %while(^ %sysfunc(fetch(&dsid)));
265174    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
265175    +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
265176    +   %let qP_label = %str(%"&P_label%");
265177    +    put " &P_Var = _P_;";
265178    +    put " label &P_Var = &qP_label;";
265179    +%end;
265180    +%let dsid = %sysfunc(close(&dsid));
265182    +%if &Residual = Y %then %do;
265184    +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
265184   !+"------ */";
265186    +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
265187    +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265188    +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
265190    +   %do %while(^ %sysfunc(fetch(&dsid)));
265191    +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
265192    +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
265193    +     %let qR_label = %str(%"&R_label%");
265194    +       put " &R_Var = &TargetVar - &P_var;";
265195    +       put " label &R_Var = &qR_label;";
265196    +   %end;
265197    +   %let dsid = %sysfunc(close(&dsid));
265198    +%end;
265200    +%end;   /* end of TargetLevel= Interval */
265202    +  put "/*------------------------------------------------------------*/";
265203    +proc datasets lib=work nolist;
265204    + delete _tmpclass _cmeta _outclass;
265205    +run;
265206    +run;
265208    +filename  _File_;
265210    +%mend gen_score;
265212    +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
265213    +%global &nLevel;
265214    +proc dmdb batch data=&indata
265215    +classout=_tmp_dmdbout;
265216    +class &target;
265217    +run;
265218    +data _tmp_dmdbout;
265219    +    set _tmp_dmdbout;
265220    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
265221    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
265222    +run;
265223    +data _null_;
265224    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
265225    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
265226    +    %let dsid = %sysfunc(close(&dsid));
265227    +     call symput("&nLevel", put(&_obs, Best12.));
265228    +run;
265230    +proc datasets lib=work nolist;
265231    +     delete _tmp_dmdbout;
265232    +run;
265233    +quit;
265234    +%Mend CheckBinaryTargetLevel;
265237    +%macro getNObs(inds=, nobs=);
265238    +    %global &nobs;
265239    +    data _null_;
265240    +        set &inds end=eof;
265241    +        if eof then call symput("&nobs", _N_);
265242    +    run;
265243    +    quit;
265244    +%mend  getNObs;
265248    +%macro makeAlphaDs(target=, cmeta=);
265250    + %let isOBSIndex= N;
265251    + %let dsid = %sysfunc(open(&cmeta));
265252    + %let vn_name =%sysfunc(varnum(&dsid, NAME));
265253    + %do %while(^%sysfunc(fetch(&dsid)));
265254    +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
265255    +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
265256    + %end;
265257    + %let dsid = %sysfunc(close(&dsid));
265259    +data &EM_USER_OUTALPHA;
265260    +     set _sample_train;
265261    +     set _outtrain(keep=_ALPHA_ _BOUND_);
265262    +     %if &isOBSIndex= N %then %do;
265263    +     keep _OBS_ _ALPHA_ _BOUND_ &target;
265264    +     %end;
265265    +     %else %do;
265266    +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
265267    +     %end;
265268    +run;
265270    +data &EM_EXPORT_TRAIN;
265271    +     length _OBS_ 8;
265272    +     set &EM_EXPORT_TRAIN;
265273    +     _OBS_ = _N_;
265274    +run;
265276    +data &EM_EXPORT_TRAIN(Drop=_OBS_);
265277    +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
265278    +     by _OBS_;
265279    +     if _ALPHA_ =. then _ALPHA_=0;
265280    +     if _BOUND_ ="" then _BOUND_="_LBC";
265281    +run;
265283    +data &EM_USER_OUTALPHA;
265284    +   set &EM_USER_OUTALPHA;
265285    +   if _ALPHA_ = 0 then delete;
265286    +   %if &isOBSIndex= N %then %do;
265287    +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
265288    +   rename _OBS_ = _dataobs_;
265289    +   %end;
265290    +   %else %do;
265291    +   drop _OBS_;
265292    +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
265292   !+noquote))";
265293    +   %end;
265294    +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
265295    +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
265296    +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
265297    +   run;
265299    +%mend makeAlphaDs;
265302    +%macro makeTunData();
265303    +data &EM_USER_TUNINGCRIT;
265304    +    set &EM_USER_TUNINGCRIT;
265305    +    Drop N;
265306    +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
265307    +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
265308    +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
265309    +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
265310    +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
265311    +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
265312    +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
265312   !+noquote))";
265313    +run;
265314    +%mend makeTunData;
265316    +/*------------------ Score Code Generation with Proc SVMScore
265316   !+----------------------  */
265319    +%macro score_code(TargetLevel=, type=);
265321    +%let _inoutest = WORK._inoutest ;
265322    +%let _inoutfit = WORK._inoutfit ;
265323    +%let _inoutclass = WORK._inoutclass;
265325    +%if &type eq FLOW %then %do;
265326    +    %let _inoutest = &EM_USER_OUTEST;
265327    +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
265328    +    %let _inoutclass = &EM_USER_OUTCLASS;
265329    +%end;
265330    +%else %do;
265331    +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
265331   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
265332    +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
265332   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
265333    +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
265333   !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
265334    +%end;
265336    +%let emscoreout = %str(&)%str(em_score_output);
265339    +%if &type eq FLOW %then %do;
265340    +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
265341    +%end;
265342    +%else %do;
265343    +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
265344    +%end;
265346    +data _null_;
265347    +    FILE _File_ MOD;
265349    +    put ' ';
265350    +    put '/*-------------------------------------------------*/';
265351    +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
265351   !+;
265352    +    put '/*-------------------------------------------------*/';
265353    +    put ' ';
265355    +%if &TargetLevel eq BINARY %then %do;
265357    +/*%put &emscoreout;  */
265359    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
265360    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265362    +%do %while(^ %sysfunc(fetch(&dsid)));
265363    +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
265365    +%end;
265366    +%let dsid = %sysfunc(close(&dsid));
265368    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
265369    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265371    +%do %while(^ %sysfunc(fetch(&dsid)));
265372    +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
265374    +%end;
265375    +%let dsid = %sysfunc(close(&dsid));
265378    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
265378   !+inclass=&_inoutclass";
265379    +    %if &type eq FLOW %then %do;
265380    +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
265381    +    %end;
265382    +    %else %do;
265383    +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
265384    +    %end;
265385    +    put ";";
265386    +    put "run;";
265389    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
265391    +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
265392    +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
265393    +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
265394    +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
265397    +%do %while(^ %sysfunc(fetch(&dsid)));
265398    +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
265399    +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
265400    +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
265401    +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
265402    +%end;
265404    +%let dsid = %sysfunc(close(&dsid));
265406    +    put "data &emscoreout(drop=_P);";
265407    +    put "     set &emscoreout;";
265408    +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
265409    +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
265411    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
265412    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265413    +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
265415    +%do %while(^ %sysfunc(fetch(&dsid)));
265416    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
265417    +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
265418    +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
265419    +    put " &P_Var = _P ;";
265420    +   %end;
265421    +   %else %do;
265422    +    put " &P_Var = 1 - _P ;";
265423    +    %let targetNonEvent = &P_LEVEL;
265424    +   %end;
265425    +%end;
265426    +%let dsid = %sysfunc(close(&dsid));
265428    +%end; /* the end of if - targetlevel eq binary */
265429    +%else %do;
265431    +/* ----     interval target  ------ */
265433    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
265434    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265436    +%do %while(^ %sysfunc(fetch(&dsid)));
265437    +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
265438    +%end;
265439    +%let dsid = %sysfunc(close(&dsid));
265441    +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
265442    +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
265443    +%do %while(^ %sysfunc(fetch(&dsid)));
265444    +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
265445    +%end;
265446    +%let dsid = %sysfunc(close(&dsid));
265448    +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
265448   !+inclass=&_inoutclass ";
265449    +    %if &type eq FLOW %then %do;
265450    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
265451    +    %end;
265452    +    %else %do;
265453    +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
265454    +    %end;
265455    +    put ";";
265457    +%end; /* end of targetlevel eq interval */
265459    +run;
265460    +filename  _File_;
265461    +%mend score_code;
265464    +%macro makeDeltaCode(TargetLevel=);
265465    +*--- Build Code to Modify Metadata ---*;
265466    +filename X "&EM_FILE_CDELTA_TRAIN";
265468    +/* modify columns meta */
265469    +data _null_;
265470    +    file X;
265471    +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
265472    +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
265473    +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
265474    +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
265475    +run;
265476    +%mend makeDeltaCode;
265478    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
265479    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
265481    +    %do;
265482    +    %let m_data      = &data;
265483    +    %let m_decdata   = &decdata;
265484    +    %let m_decmeta   = &decmeta;
265485    +    %let m_noresfile = &noresfile;
265486    +    %let m_resfile   = &resfile;
265487    +    dm "afa c=sashelp.emutil.decidecode.scl";
265488    +  %end;
265489    +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
265490    +%Macro Train;
265493    +/*%let SVM_MAXNUMOBS = 10000; */
265494    +/*%let EM_SCORECODEFORMAT=PROC;*/
265495    +/*%let SVM_SAMPLESIZE = 100; */
265497    +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
265498    +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
265499    +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
265500    +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
265501    +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
265502    +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
265503    +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
265506    +/*---------- Check the input data set ---------------------*/
265507    +%if &EM_IMPORT_DATA eq  %then %do;
265508    +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
265509    +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
265510    +%GOTO ENDLINE;
265511    +%end;
265513    +/*----------- Check the target variable  -------------------*/
265515    +%let _targetVar= %EM_TARGET;
265516    +%let _targetlevel = %EM_TARGET_LEVEL;
265518    +%if &_targetVar eq  %then %do;
265519    +%PUT ERROR:THERE IS NO VALID TARGET;
265520    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
265521    +%GOTO ENDLINE;
265522    +%end;
265524    +%let K = %SCAN(&_targetVar, 2, %STR( ));
265525    +%if &K > %then %do;
265526    +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
265527    +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
265528    +%GOTO ENDLINE;
265529    +%end;
265531    +/* check actual num of target levels */
265532    +%if (&_targetLevel eq BINARY) %then %do;
265533    +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
265533   !+nLevel=_nTargetLevel );
265534    +    %if &_nTargetLevel  > 2 %then %do;
265535    +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
265535   !+;
265536    +    %GOTO ENDLINE;
265537    +    %end;
265538    +%end;
265539    +%else %do;
265540    +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
265540   !+ SUPPORTS ONLY BINARY TARGET;
265541    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
265542    +      %GOTO ENDLINE;
265543    +%end;
265545    +%let _PROPERTY_TASK = ;
265546    +%let _PROPERTY_CLASSTASK = ;
265547    +%let _PROPERTY_METHOD = ;
265548    +%if (&_targetLevel eq BINARY) %then %do;
265549    +      %let _PROPERTY_TASK = CLASSIFICATION;
265550    +      %let _PROPERTY_CLASSTASK = C_CLAS;
265551    +      %let _PROPERTY_METHOD = LINSVM;
265552    +%end;  /* end of %if (&_targetLevel eq BINARY)  */
265553    +%else %if (&_targetLevel eq INTERVAL) %then %do;
265554    +      /* for interval target */
265555    +      %let _PROPERTY_TASK = REGRESSION;
265556    +      %let _PROPERTY_CLASSTASK = L2_REG;
265557    +      %let _PROPERTY_METHOD = LSSVM;
265558    +%end; %else %do;
265559    +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
265560    +      %GOTO ENDLINE;
265562    +%end;
265565    +%let _isValidationSet =NO;
265566    +%let _testdata =;
265567    +%let _testout =;
265568    +%let _validSource=;
265570    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
265571    +        %let _isValidationSet = YES;
265572    +        %let _testdata = &EM_IMPORT_VALIDATE;
265573    +        %let _testout = &EM_EXPORT_VALIDATE;
265574    +        %let _validSource= VALIDSET;
265575    +%end;
265576    +%else %do;
265577    +        %if &EM_IMPORT_TEST  ne  %then %do;
265578    +         %let _isValidationSet = YES;
265579    +         %let _testdata = &EM_IMPORT_TEST;
265580    +         %let _testout = &EM_EXPORT_TEST;
265581    +         %let _validSource= TESTSET;
265582    +         %end;
265583    +%end;
265585    +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
265586    +    %if &_isValidationSet eq NO  %then %do;
265587    +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
265588    +    %GOTO ENDLINE;
265589    +    %end;
265590    +%end;
265592    +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
265593    +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
265594    +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
265595    +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
265596    +%let _num_input_class =
265596   !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
265597    +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
265599    +%if  &_num_input_total < 2 %then %do;
265600    +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
265601    +         %goto ENDLINE;
265602    +         %end;
265605    +/*
265606    +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
265606   !+%then %do;
265608    +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
265610    +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
265611    +         %let  EMEXCEPTIONSTRING =
265611   !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
265612    +               %goto endline;
265613    +    %end;
265614    +%end;
265615    +*/
265617    +/*------ Training ----------------------*/
265618    +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
265619    +    %if (&_targetLevel ne INTERVAL) %then %do;
265620    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
265620   !+METADATA=&EM_DATA_VARIABLESET,
265621    +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
265621   !+INDEX=Y, INDEXNAME=_OBS_ );
265622    +    %end;
265623    +    %else %do;
265624    +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
265624   !+METADATA=&EM_DATA_VARIABLESET,
265625    +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
265625   !+INDEX=Y, INDEXNAME=_OBS_ );
265626    +    %end;
265627    +%end;
265628    +%else %do;
265629    +data _sample_train;
265630    +    length _OBS_ 8.;
265631    +    set &EM_IMPORT_DATA;
265632    +    _OBS_ = _N_;
265633    +run;
265634    +%end;
265635    +%let _usecgbydefault=;
265636    +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
265637    +    %let _usecgbydefault = N;
265638    +    %getNObs(inds=_sample_train, nobs=_trainnobs);
265639    +    %if &_trainnobs > 3000   %then %do;
265640    +    %let _usecgbydefault = Y;
265641    +   %end;
265642    +%end;
265644    +%svm_training(indata=_sample_train,
265645    +              task=&_PROPERTY_TASK,
265646    +              classtask =&_PROPERTY_CLASSTASK,
265647    +              method = &_PROPERTY_METHOD,
265648    +              outest=&EM_USER_OUTEST,
265649    +              outfit=&EM_USER_SVMFITSTAT,
265650    +              outclass=&EM_USER_OUTCLASS,
265651    +              isValidationSet=&_isValidationSet,
265652    +              testdata =&_testdata,
265653    +              testout =&_testout,
265654    +              validSource=&_validSource,
265655    +              usecgbydefault=&_usecgbydefault
265656    +              );
265657    +run;
265659    +%svm_score(indata=&EM_IMPORT_DATA,
265660    +             inest=&EM_USER_OUTEST,
265661    +             infit=&EM_USER_SVMFITSTAT,
265662    +             inclass=&EM_USER_OUTCLASS,
265663    +             outindata=  _tmpTrain ,
265664    +             outscore = &EM_EXPORT_TRAIN,
265665    +             targetLevel =&_targetLevel
265666    +            );
265668    +%if &EM_IMPORT_VALIDATE  ne  %then %do;
265669    +  %svm_score(indata=&EM_IMPORT_VALIDATE,
265670    +             inest=&EM_USER_OUTEST,
265671    +             infit=&EM_USER_SVMFITSTAT,
265672    +             inclass=&EM_USER_OUTCLASS,
265673    +             outindata=_tmpValid,
265674    +             outscore = &EM_EXPORT_VALIDATE,
265675    +             targetLevel =&_targetLevel
265676    +            );
265678    +%end;
265679    +%if &EM_IMPORT_TEST  ne  %then %do;
265680    +  %svm_score(indata=&EM_IMPORT_TEST,
265681    +             inest=&EM_USER_OUTEST,
265682    +             infit=&EM_USER_SVMFITSTAT,
265683    +             inclass=&EM_USER_OUTCLASS,
265684    +             outindata=_tmpTest,
265685    +             outscore= &EM_EXPORT_TEST,
265686    +             targetLevel =&_targetLevel
265687    +            );
265689    +%end;
265691    +/*------------------ run decision codes ----------------------*/
265693    +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
265694    +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
265696    +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
265697    +filename _sffile_  "&decfile";
265698    +%if %sysfunc(fexist(_sffile_)) %then
265699    +%do;
265700    +    data &EM_EXPORT_TRAIN;
265701    +       set &EM_EXPORT_TRAIN;
265702    +           %include _sffile_;
265703    +    run;
265704    +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
265705    +    data &EM_EXPORT_VALIDATE;
265706    +       set  &EM_EXPORT_VALIDATE;
265707    +           %include _sffile_;
265708    +    %end;
265709    +    %if &EM_IMPORT_TEST  ne  %then %do;
265710    +        data &EM_EXPORT_TEST;
265711    +            set  &EM_EXPORT_TEST;
265712    +            %include _sffile_;
265713    +        run;
265714    +    %end;
265715    +%let rc = %sysfunc(fdelete(_sffile_));
265716    +%end;
265717    +filename _sffile_ ;
265719    +%score_code(TargetLevel =&_targetLevel, type=FLOW);
265720    +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
265722    +%makeDeltaCode(TargetLevel =&_targetLevel);
265725    +/* %put SYSError =  &SYSERR;  */
265727    +%if &SYSERR > 0 %then %do;
265728    +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
265729    +      %goto ENDLINE;
265730    +%end;
265732    +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
265732   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
265732   !+Cutoff=0.5, Residual=Y)
265733    +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
265733   !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
265733   !+Cutoff=0.5, Residual=N)
265734    +*/
265737    +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
265737   !+RESIDUALS=Y);
265739    +/*------ Make data for report data ----------------*/
265740    +%makeSVMFitStatDs;
265742    +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
265744    +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
265746    +proc datasets lib = work nolist;
265747    +      delete _outtrain  _sample_train ;
265748    +run;
265750    +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
265751    +%if &_svnobs < 1   %then %do;
265752    +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
265753    +      %goto endline;
265754    +%end;
265757    +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
265758    +%makeTunData();
265759    +%end;
265762    +%ENDLINE:
265764    +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Meta2_TRAIN classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
265766    +/*------------------------------------------------------------------
265767    +  MACRO EXPLOREOBS
265769    +  SUPPORT:  SASDHD - David Duling
265770    +  PRODUCT:  Enterprise Miner
265772    +  DESCRIPTION:
265773    +  Generates maximum and default numbers of observations to
265774    +  download for visualization depending on the record length.
265776    +  Values were determined by trial and error using typical
265777    +  Windows workstation configurations.
265779    +  Discrete sets of values are returned so that user experience
265780    +  will be consitent with similar sized data sets.
265782    +  These macro variables are set:
265783    +  _exploreobs_max -- maximum number of obs downloadable
265784    +  _exploreobs_def -- default number of obs to be downloaded
265785    +  _exploreobs_recl - record length.  Might be useful for reporting.
265787    +  Use the _exploreobs_max to set limit the GUI selection of
265788    +  observations for downloading.  The GUI selection for obs
265789    +  could be reduced to "Default" and "Max".
265791    +  Parameters
265792    +  data=   libname.memname of input data
265793    +  vars=   subset list of variables.
265794    +          downloading 1 out of 500 really does work like downloading
265795    +          1 out of 1 vars.  Users may select a subset of vars for
265796    +                   visualizations.  Pass in the list as space delimited
265797    +          var names.  If vars is not specified, the record length
265798    +          of the entire data will be used.
265799    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
265801    +  Control
265802    +  Users may control the values by entering these macro variables.
265803    +            EM_EXPLOREOBS_MAX
265804    +            EM_EXPLOREOBS_DEFAULT
265805    +  These values override the computed values.
265807    +  Debugging
265808    +  %let _exploreobs_debug=1 ;
265809    +--------------------------------------------------------------------
265810    +  HISTORY: 20APR2004. sasdhd. pushed.
265811    +           18DEC2004. sasdhd. S0280556.
265812    +           07SEP2007. sasdhd. HK1009586
265813    +--------------------------------------------------------------------*/
265815    +%macro exploreobs(data=,vars=, nbytes=) ;
265817    +   /*--- variable definitions ---*/
265818    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
265819    +   %local xobs xvars xlen vlen xi vname vlist ;
265820    +   %local _exp_source _exp_notes ;
265822    +   /*--- USER definitions ---*/
265823    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
265825    +   /*--- variable intializations ---*/
265826    +   %let _exploreobs_max=0 ;
265827    +   %let _exploreobs_def=0 ;
265828    +   %let _exploreobs_recl=0 ;
265829    +   %let xvars= 0 ;
265830    +   %let xlen = 0 ;
265831    +   %let xobs = 0 ;
265833    +   /*--- data error checks ---*/
265834    +   %if "&data" eq "" %then %do ;
265835    +            %put NOTE: DATA is not specified. ;
265836    +            %goto term ;
265837    +      %end ;
265839    +   %let dsid=%sysfunc(open(&data)) ;
265840    +   %if not &dsid %then %do ;
265841    +            %put NOTE: DATA &data is not available. ;
265842    +            %goto term ;
265843    +      %end ;
265845    +   /*--- if a vars list exists generate a subset ---*/
265846    +   %if &vars ne %then %do ;
265847    +         %let dsid=%sysfunc(close(&dsid)) ;
265848    +         %if &_exploreobs_debug ne 1 %then %do ;
265849    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
265850    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
265851    +                  options nosource nonotes ;
265852    +         %end ;
265853    +         data _exploreobs_temp_data ;
265854    +         set &data(obs=0) ;
265855    +          keep &vars ;
265856    +         run;
265857    +         %if &_exploreobs_debug ne 1 %then %do ;
265858    +                  options &_exp_source &_exp_notes ;
265859    +         %end ;
265860    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
265861    +         %if &dsid eq 0 %then %do ;
265862    +                  %put NOTE: Sample is not available.;
265863    +                  %goto term ;
265864    +            %end ;
265865    +      %end ;
265867    +   /*--- get var attributes ---*/
265868    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
265869    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
265870    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
265871    +   %let dsid= %sysfunc(close(&dsid)) ;
265873    +   /*--- set default and max obs ---*/
265874    +   %let _exploreobs_recl=%eval(&xlen) ;
265875    +   %if &_exploreobs_recl eq 0 %then %do ;
265876    +             %let _exploreobs_max= 0 ;
265877    +             %let _exploreobs_def= 0 ;
265878    +             %goto term ;
265880    +   %end ;
265881    +   %else
265882    +   %if &_exploreobs_recl le 32 %then %do ;
265883    +             %let _exploreobs_max=100000 ;
265884    +             %let _exploreobs_def= 10000 ;
265885    +   %end ;
265886    +   %else
265887    +   %if &_exploreobs_recl le 128 %then %do ;
265888    +             %let _exploreobs_max=60000 ;
265889    +             %let _exploreobs_def= 6000 ;
265890    +   %end ;
265891    +   %else
265892    +   %if &_exploreobs_recl lt 1000 %then %do ;
265893    +             %let _exploreobs_max=20000 ;
265894    +             %let _exploreobs_def= 2000 ;
265895    +   %end ;
265896    +   %else
265897    +   %if &_exploreobs_recl lt 5000 %then %do ;
265898    +             %let _exploreobs_max= 10000 ;
265899    +             %let _exploreobs_def=  1000 ;
265900    +   %end ;
265901    +   %else
265902    +   %if &_exploreobs_recl lt 20000 %then %do ;
265903    +             %let _exploreobs_max= 5000 ;
265904    +             %let _exploreobs_def=  500 ;
265905    +   %end ;
265906    +   %else %do ;
265907    +             %let _exploreobs_max= 1000 ;
265908    +             %let _exploreobs_def=  200 ;
265909    +   %end ;
265911    +   /*--- Users options ---*/
265912    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
265913    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
265914    +   %end;
265915    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
265916    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
265917    +   %end;
265919    +    /*--- S0868273 ---*/
265920    +    %if "&NBYTES" ne "" %then %do;
265921    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
265922    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
265923    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
265923   !+&EM_EXPLOREOBS_MAX));
265924    +       %end;
265926    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
265927    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
265928    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
265928   !+&EM_EXPLOREOBS_DEFAULT));
265929    +          %if ^&_exploreobs_def %then
265930    +              %let _exploreobs_def = 1;
265932    +       %end;
265933    +    %end;
265935    +   /*--- Terminate ---*/
265936    +   %term:
265938    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
265938   !+max=&_exploreobs_max : def= &_exploreobs_def ;
265939    +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.Meta2_TRAIN;
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM2_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM2_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.Meta2_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.Meta2_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.Meta2_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.Meta2_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 46 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   AcceptedCmpTotal Frq Income Mnt MntGoldProds MntMeatProducts 
NumCatalogPurchases NumDealsPurchases NumWebVisitsMonth RFMstat Recency Teenhome Year_Birth 
_dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   Custid DepVar Marital_Status
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 17 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM2_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM2_SVMFITSTAT outclass= EMWS8.SVM2_OUTCLASS outest= EMWS8.SVM2_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   AcceptedCmpTotal Frq Income Marital_Status Mnt MntGoldProds 
MntMeatProducts NumCatalogPurchases NumDealsPurchases NumWebVisitsMonth RFMstat Recency 
Teenhome Year_Birth
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM2_OUTCLASS has 20 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 18 
      variables.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 25 variables.
NOTE: The data set EMWS8.SVM2_OUTEST has 5 observations and 23 variables.
NOTE: The data set EMWS8.SVM2_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 50743
*** Time for Optimization: 751
*** Total Processing Time: 751
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM2_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 71-75.
NOTE: PROCEDURE SVM used (Total process time):
      real time           12:31.08
      cpu time            12:29.46
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta2_TRAIN inest=EMWS8.SVM2_OUTEST 
infit=EMWS8.SVM2_SVMFITSTAT inclass=EMWS8.SVM2_OUTCLASS 
out=EMWS8.SVM2_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=26. April 2016 20.16 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM2_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM2_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas.
265942    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
265943    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
265944    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
265945    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
265946    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
265947    +if
265948    + F_DepVar ne '1'
265949    +and F_DepVar ne '0'
265950    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
265951    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
265952    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
265953    +end;
MPRINT(SVM_SCORE):   end;
265954    +else do;
MPRINT(SVM_SCORE):   else do;
265955    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
265956    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
265957    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
265958    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
265959    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
265960    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
265961    +end;
MPRINT(SVM_SCORE):   end;
265962    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM2_TRAIN.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta2_VALIDATE inest=EMWS8.SVM2_OUTEST 
infit=EMWS8.SVM2_SVMFITSTAT inclass=EMWS8.SVM2_OUTCLASS 
out=EMWS8.SVM2_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META2_VALIDATE.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM2_VALIDATE has 1018 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=26. April 2016 20.16 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM2_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM2_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas.
265963    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
265964    +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
265965    +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
265966    +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
265967    +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
265968    +if
265969    + F_DepVar ne '1'
265970    +and F_DepVar ne '0'
265971    + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
265972    +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
265973    +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
265974    +end;
MPRINT(SVM_SCORE):   end;
265975    +else do;
MPRINT(SVM_SCORE):   else do;
265976    +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
265977    +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
265978    +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
265979    +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
265980    +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
265981    +otherwise;
MPRINT(SVM_SCORE):   otherwise;
265982    +end;
MPRINT(SVM_SCORE):   end;
265983    +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM2_VALIDATE.
NOTE: The data set EMWS8.SVM2_VALIDATE has 1018 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
265984     data SVM2_SCORE/view=SVM2_SCORE;
MPRINT(EM_DECIDECODE):   data SVM2_SCORE/view=SVM2_SCORE;
265985     set EMWS8.SVM2_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM2_TRAIN;
265986     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM2_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
265987     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
265988     * SVM2: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM2: Create decision matrix;
265989     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
265990     data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
265991       length   DepVar                           $  32
265992                COUNT                                8
265993                DATAPRIOR                            8
265994                TRAINPRIOR                           8
265995                DECPRIOR                             8
265996                DECISION1                            8
265997                DECISION2                            8
265998                ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
265999     
266000       label    COUNT="Level Counts"
266001                DATAPRIOR="Data Proportions"
266002                TRAINPRIOR="Training Proportions"
266003                DECPRIOR="Decision Priors"
266004                DECISION1="1"
266005                DECISION2="0"
266006                ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
266007       format   COUNT 10.
266008                ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
266009     DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
266009   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
266010     output;
MPRINT(EM_DECIDECODE):   output;
266011     DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
266011   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
266012     output;
MPRINT(EM_DECIDECODE):   output;
266013     ;
MPRINT(EM_DECIDECODE):   ;
266014     run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

266015     proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
266016     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
266017     label DECISION1= '1';
266018     label DECISION2= '0';
266019     run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
266020     quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

266021     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
266022     * SVM2 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM2 Generate decision score code;
266023     *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
266024     run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM2_OUTEST 
infit=EMWS8.SVM2_SVMFITSTAT inclass=EMWS8.SVM2_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=28. April 2016 19.31 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM2_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 23 variables.
266025     %em_copyfile(infref=#LN02961, outfref=#LN02960, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN02960 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN02961",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN02960 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=28. April 2016 19.31 Uhr

NOTE: 56 records were written to the file #LN02960.
      The minimum record length was 1.
      The maximum record length was 193.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
266026     %em_copyfile(infref=#LN02963, outfref=#LN02962, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN02962 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN02963",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN02962 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=4256,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=28. April 2016 19.31 Uhr

NOTE: 65 records were written to the file #LN02962.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 20 observations read from the data set EMWS8.SVM2_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 20 observations and 9 variables.
266027     %em_copyfile(infref=#LN02965, outfref=#LN02964, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN02964 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN02965",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN02964 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=7626,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=28. April 2016 19.31 Uhr

NOTE: 54 records were written to the file #LN02964.
      The minimum record length was 1.
      The maximum record length was 143.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=10821,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=28. April 2016 19.31 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 19.31 Uhr,
      Create Time=26. April 2016 19.41 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM2_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_SVMFITSTAT.
NOTE: The data set EMWS8.SVM2_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM2_SVMFITDS out =EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM2_SVMFITDS.
NOTE: The data set EMWS8.SVM2_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM2_SVMFITDS.
NOTE: The data set EMWS8.SVM2_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM2_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM2_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM2_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM2_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM2_TRAIN.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM2_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM2_TRAIN EMWS8.SVM2_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM2_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM2_OUTALPHA.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 57 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM2_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM2_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM2_OUTALPHA.
NOTE: The data set EMWS8.SVM2_OUTALPHA has 200 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM2_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      16:34   
NOTE: There were 200 observations read from the data set EMWS8.SVM2_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM2_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM2_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM2_TUNINGCRIT.
NOTE: The data set EMWS8.SVM2_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
266028     
266029     *------------------------------------------------------------*;
266030     * End TRAIN: SVM2;
266031     *------------------------------------------------------------*;

266032     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
266033     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
266034     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
266035     ;
MPRINT(EM_DIAGRAM):   ;
266036     ;
MPRINT(EM_DIAGRAM):   ;
266037     ;
MPRINT(EM_DIAGRAM):   ;
266038     ;
MPRINT(EM_DIAGRAM):   ;
266039     quit;
MPRINT(EM_DIAGRAM):   quit;
266040     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
266041     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
266042     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
266043     /*; *"; *'; */
266044     ;
MPRINT(EM_DIAGRAM):   ;
266045     run;
MPRINT(EM_DIAGRAM):   run;
266046     quit;
MPRINT(EM_DIAGRAM):   quit;
266047     /* Reset EM Options */
266048     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
266049     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
266050     goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
