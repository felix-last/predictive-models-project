MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10.28 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                10.28 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1M6_0TY 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1M6_0TY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10.28 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10.28 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
2580210    proc freq data=EMWS8.SVM2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.SVM2_VariableSet noprint;
2580211    table ROLE*LEVEL/out=WORK.SVM2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.SVM2META;
2580212    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS8.SVM2_VARIABLESET.
NOTE: The data set WORK.SVM2META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

2580213    proc print data=WORK.SVM2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM2META label noobs;
2580214    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
2580215    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
2580215  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
2580215  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
2580216    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2580217    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
2580218    run;

NOTE: There were 8 observations read from the data set WORK.SVM2META.
NOTE: The PROCEDURE PRINT printed page 2292.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2580219    title10;
MPRINT(EM_DIAGRAM):   title10;
2580220    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN EMWS8 Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN 
EMWS8.Meta2_TRAIN EMWS8.Meta2_TRAIN EMWS8 Meta2_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta2_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.SVM2_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.SVM2_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.SVM2_DepVar_DD 
out=EMWS8.SVM2_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
2580267    data WORK.SVM2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.SVM2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
2580268    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
2580269    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
2580269  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
2580269  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
2580270       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
2580270  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
2580270  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
2580271    set EMWS8.SVM2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.SVM2_DEPVAR_DM( where=(_TYPE_="TARGET"));
2580272    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
2580273    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
2580274    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
2580275    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
2580276    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
2580277    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
2580278    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
2580279    end;
MPRINT(EM_DIAGRAM):   end;
2580280    output;
MPRINT(EM_DIAGRAM):   output;
2580281    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.SVM2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

2580282    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2580283    proc print data=WORK.SVM2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.SVM2_EVENT noobs label;
2580284    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
2580285    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2580286    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
2580287    run;

NOTE: There were 1 observations read from the data set WORK.SVM2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2293.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

2580288    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
2580289    proc print data = EMWS8.SVM2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.SVM2_DepVar_DM noobs label;
2580290    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
2580291    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
2580292    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
2580292  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
2580292  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
2580293    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
2580294    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
2580295    run;

NOTE: There were 7 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2294.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2580296    title10;
MPRINT(EM_DIAGRAM):   title10;
2580297    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SVM2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * SVM2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.SVM2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.SVM2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
2580807    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
2580808    * SVM2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * SVM2: Generation of macros and macro variables;
2580809    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
2580810    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

2580811    %let EMEXCEPTIONSTRING=;
2580812    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
2580813    * TRAIN: SVM2;
MPRINT(EM_DIAGRAM):   * TRAIN: SVM2;
2580814    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2580815    %let EM_ACTION = TRAIN;
2580816    %let syscc = 0;
2580817    %macro main;
2580818    
2580819       filename temp catalog 'sashelp.emmodl.svm_macros.source';
2580820       %include temp;
2580821       filename temp;
2580822       %SetProperties;
2580823       %if %upcase(&EM_ACTION) = CREATE %then %do;
2580824           filename temp catalog 'sashelp.emmodl.svm_create.source';
2580825           %include temp;
2580826           filename temp;
2580827           %create;
2580828       %end;
2580829       %else
2580830       %if %upcase(&EM_ACTION) = TRAIN %then %do;
2580831           filename temp catalog 'sashelp.emmodl.svm_train.source';
2580832           %include temp;
2580833           filename temp;
2580834           %train;
2580835       %end;
2580836       %else
2580837       %if %upcase(&EM_ACTION) = REPORT %then %do;
2580838           filename temp catalog 'sashelp.emmodl.svm_report.source';
2580839           %include temp;
2580840           filename temp;
2580841           %report;
2580842       %end;
2580843    
2580844    %mend main;
2580845    
2580846    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_MACROS.SOURCE.
2580848   +%macro SetProperties;
2580849   +   %em_checkmacro(name=EM_PROPERTY_METHOD,  global=Y, value=DQP);
2580850   +   %em_checkmacro(name=EM_PROPERTY_TUNINGMETHOD,  global=Y, value=POPT);
2580851   +   %em_checkmacro(name=EM_PROPERTY_APPLYCV,  global=Y, value=N);
2580852   +   %em_checkmacro(name=EM_PROPERTY_CVMETHOD,  global=Y, value=RANDOM);
2580853   +   %em_checkmacro(name=EM_PROPERTY_CVFOLD, global=Y, value=Default);
2580854   +   %em_checkmacro(name=EM_PROPERTY_CVALUE,    global=Y, value=TUNING);
2580855   +   %em_checkmacro(name=EM_PROPERTY_USERCVALUE,    global=Y, value=0.1);
2580856   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_FROM,    global=Y, value=0.1);
2580857   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_TO,    global=Y, value=1);
2580858   +   %em_checkmacro(name=EM_PROPERTY_TUN_C_BY,    global=Y, value=0.1);
2580859   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,    global=Y, value=DEFAULT);
2580860   +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTHIST,    global=Y, value=N);
2580861   +   %em_checkmacro(name=EM_PROPERTY_KERNEL,    global=Y, value=LINEAR);
2580862   +   %em_checkmacro(name=EM_PROPERTY_POLY_K_PAR1,    global=Y, value=CONSTANT);
2580863   +   %em_checkmacro(name=EM_PROPERTY_POLY_USERK_PAR1,    global=Y, value=2);
2580864   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_FROM,    global=Y, value=2);
2580865   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_TO,    global=Y, value=5);
2580866   +   %em_checkmacro(name=EM_PROPERTY_POLY_TUN_KP1_BY,    global=Y, value=1);
2580867   +   %em_checkmacro(name=EM_PROPERTY_RBF_K_PAR1,    global=Y, value=CONSTANT);
2580868   +   %em_checkmacro(name=EM_PROPERTY_RBF_USERK_PAR1,    global=Y, value=1);
2580869   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_FROM,    global=Y, value=0.2);
2580870   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_TO,    global=Y, value=1);
2580871   +   %em_checkmacro(name=EM_PROPERTY_RBF_TUN_KP1_BY,    global=Y, value=0.2);
2580872   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR1,    global=Y, value=CONSTANT);
2580873   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR1,    global=Y, value=1);
2580874   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_FROM,    global=Y, value=0.1);
2580875   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_TO,    global=Y, value=1);
2580876   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP1_BY,    global=Y, value=0.1);
2580877   +   %em_checkmacro(name=EM_PROPERTY_SGMD_K_PAR2,       global=Y, value=CONSTANT);
2580878   +   %em_checkmacro(name=EM_PROPERTY_SGMD_USERK_PAR2,    global=Y, value=1);
2580879   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_FROM,    global=Y, value=0.1);
2580880   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_TO,    global=Y, value=1);
2580881   +   %em_checkmacro(name=EM_PROPERTY_SGMD_TUN_KP2_BY,    global=Y, value=0.1);
2580882   +   %em_checkmacro(name=EM_PROPERTY_APPLYSAMPLING,     global=Y,  value=Y);
2580883   +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,  global=Y,  value=1000);
2580884   +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,  global=Y,  value=N);
2580885   +   %em_checkmacro(name=EM_PROPERTY_USEITERCG,  global=Y,  value=DEFAULT);
2580886   +   %em_checkmacro(name=EM_PROPERTY_CGITER,    global=Y, value=400);
2580887   +   %em_checkmacro(name=EM_PROPERTY_CGTOL,    global=Y,    value=0.000001);
2580888   +   %em_checkmacro(name=EM_PROPERTY_EPSILON,  global=Y,  value=0.1);
2580889   +   %em_checkmacro(name=EM_PROPERTY_QPSIZE,   global=Y,   value=100);
2580890   +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  global=Y,  value=200);
2580891   +   %em_checkmacro(name=EM_PROPERTY_MAXFUNC,  global=Y,  value=500);
2580892   +   %em_checkmacro(name=EM_PROPERTY_MEMSIZE,  global=Y,  value=8);
2580893   +   %em_checkmacro(name=EM_PROPERTY_OUTITER,  global=Y,  value=10);
2580894   +   %em_checkmacro(name=EM_PROPERTY_GCONV,    global=Y,  value=0.00000001);
2580895   +   %em_checkmacro(name=EM_PROPERTY_ABSGCONV, global=Y,  value=0.0005);
2580896   +   %em_checkmacro(name=EM_PROPERTY_XSCALE, global=Y,  value=Y);
2580897   +   %em_checkmacro(name=EM_PROPERTY_XCONV,    global=Y,  value=0.00000001);
2580898   +   %em_checkmacro(name=EM_PROPERTY_ABSXCONV, global=Y,  value=0.0005);
2580900   +%mend SetProperties;
2580903   +%macro make_dmdb(indata=, out=0, classout=WORK.DMDBCLASS, varout=WORK.DMDBVAR) ;
2580905   +  %local emclassout emvarout;
2580907   +   proc dmdb batch dmdbcat= _emdmdb
2580909   +   %if &out ne 0 %then %do ;
2580910   +       data=&indata out= _emdmdb &emclassout &emvarout;
2580911   +   %end ;
2580912   +   %else %do ;
2580913   +       data=&indata &emclassout &emvarout;
2580914   +   %end ;
2580916   +   %if %em_interval ne  %then %do ; var %EM_INTERVAL ; %end ;
2580917   +   %if %em_class   ne  %then %do ;
2580918   +       class %EM_CLASS;
2580919   +   %end ;
2580920   +   /*%if %em_freq    ne  %then %do ; freq %em_freq   ; %end ;  */
2580921   +   %if %em_target ne %then %do ;
2580922   +          target %em_target ;
2580923   +   %end ;
2580924   +   run ;
2580925   +%mend make_dmdb;
2580928   +%macro svm_training(indata=,
2580929   +                    task=,
2580930   +                    classtask=,
2580931   +                    method=,
2580932   +                    outest =,
2580933   +                    outclass =,
2580934   +                    outfit =,
2580935   +                    isValidationSet =,
2580936   +                    testdata =,
2580937   +                    testout =,
2580938   +                    validSource=,
2580939   +                    usecgbydefault=
2580940   +                    );
2580942   +%make_dmdb(indata=&indata, out=1);
2580944   +options debug="nlpitermsg=2";
2580946   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
2580947   +%EM_GETNAME(KEY=TUNINGCRIT, TYPE=DATA);
2580948   +ods output tun_crt = &EM_USER_TUNINGCRIT;
2580949   +%end;
2580951   +%let _PROPERTY_USERCVALUE = %sysfunc(strip(&EM_PROPERTY_USERCVALUE));
2580952   +%let _PROPERTY_TUN_C_FROM = %sysfunc(strip(&EM_PROPERTY_TUN_C_FROM));
2580953   +%let _PROPERTY_TUN_C_TO = %sysfunc(strip(&EM_PROPERTY_TUN_C_TO));
2580954   +%let _PROPERTY_TUN_C_BY = %sysfunc(strip(&EM_PROPERTY_TUN_C_BY));
2580956   +%let _PROPERTY_POLY_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_POLY_USERK_PAR1));
2580957   +%let _PROPERTY_POLY_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_FROM));
2580958   +%let _PROPERTY_POLY_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_TO));
2580959   +%let _PROPERTY_POLY_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_POLY_TUN_KP1_BY));
2580962   +%let _PROPERTY_RBF_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_RBF_USERK_PAR1));
2580963   +%let _PROPERTY_RBF_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_FROM));
2580964   +%let _PROPERTY_RBF_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_TO));
2580965   +%let _PROPERTY_RBF_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_RBF_TUN_KP1_BY));
2580967   +%let _PROPERTY_SGMD_USERK_PAR1 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR1));
2580968   +%let _PROPERTY_SGMD_TUN_KP1_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_FROM));
2580969   +%let _PROPERTY_SGMD_TUN_KP1_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_TO));
2580970   +%let _PROPERTY_SGMD_TUN_KP1_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP1_BY));
2580973   +%let _PROPERTY_SGMD_USERK_PAR2 = %sysfunc(strip(&EM_PROPERTY_SGMD_USERK_PAR2));
2580974   +%let _PROPERTY_SGMD_TUN_KP2_FROM = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_FROM));
2580975   +%let _PROPERTY_SGMD_TUN_KP2_TO = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_TO));
2580976   +%let _PROPERTY_SGMD_TUN_KP2_BY = %sysfunc(strip(&EM_PROPERTY_SGMD_TUN_KP2_BY));
2580979   +%let _PROPERTY_CGITER = %sysfunc(strip(&EM_PROPERTY_CGITER));
2580980   +%let _PROPERTY_CGTOL  = %sysfunc(strip(&EM_PROPERTY_CGTOL));
2580981   +%let _PROPERTY_QPSIZE =  %sysfunc(strip(&EM_PROPERTY_QPSIZE));
2580982   +%let _PROPERTY_EPSILON =  %sysfunc(strip(&EM_PROPERTY_EPSILON));
2580983   +%let _PROPERTY_MAXITER =  %sysfunc(strip(&EM_PROPERTY_MAXITER));
2580984   +%let _PROPERTY_MAXFUNC =  %sysfunc(strip(&EM_PROPERTY_MAXFUNC));
2580985   +%let _PROPERTY_MEMSIZE =  %sysfunc(strip(&EM_PROPERTY_MEMSIZE));
2580986   +%let _PROPERTY_OUTITER =  %sysfunc(strip(&EM_PROPERTY_OUTITER));
2580987   +%let _PROPERTY_GCONV   =  %sysfunc(strip(&EM_PROPERTY_GCONV));
2580988   +%let _PROPERTY_ABSGCONV =  %sysfunc(strip(&EM_PROPERTY_ABSGCONV));
2580989   +%let _PROPERTY_XCONV   =  %sysfunc(strip(&EM_PROPERTY_XCONV));
2580990   +%let _PROPERTY_ABSXCONV =  %sysfunc(strip(&EM_PROPERTY_ABSXCONV));
2580994   +proc svm data= _emdmdb
2580995   +         dmdbcat= _emdmdb
2580996   +         nomonitor
2580997   +         outfit= &outfit
2580998   +         outclass= &outclass
2580999   +         outest= &outest
2581000   +         out = _outtrain
2581001   +         maxiter = &_PROPERTY_MAXITER
2581002   +         maxfunc = &_PROPERTY_MAXFUNC
2581003   +      /*   memsiz =  &_PROPERTY_MEMSIZE*/
2581004   +         gconv =   &_PROPERTY_GCONV
2581005   +         absgconv = &_PROPERTY_ABSGCONV
2581006   +         xconv =   &_PROPERTY_XCONV
2581007   +         absxconv = &_PROPERTY_ABSXCONV
2581009   +    %if &EM_PROPERTY_KERNEL ne POLYNOM %then %do;
2581010   +         %if &EM_PROPERTY_XSCALE eq Y  %then %do;
2581011   +             xscale
2581012   +         %end;
2581013   +         %else %do;
2581014   +             noscale
2581015   +         %end;
2581016   +    %end;
2581017   +    %if &task eq CLASSIFICATION %then %do;
2581018   +        %if &EM_PROPERTY_METHOD eq DEFAULT  %then %do;
2581019   +         method= &method
2581020   +        %end;
2581021   +        %else %if &EM_PROPERTY_METHOD eq DQP %then %do;
2581022   +         method= DQP   qpsize = &_PROPERTY_QPSIZE
2581023   +        %end;
2581024   +        %else %do;
2581025   +         method= &EM_PROPERTY_METHOD
2581026   +        %end;
2581027   +    %end;
2581028   +    %else %do;
2581029   +         method= &method  task=&classtask
2581030   +         /*%if &classtask eq EPS_REG %then %do; */
2581031   +             esp=&_PROPERTY_EPSILON
2581032   +         /*%end;*/
2581033   +    %end;
2581035   +    %if &EM_PROPERTY_KERNEL ne  %then %do;
2581036   +         kernel = &EM_PROPERTY_KERNEL
2581037   +    %end;
2581038   +    %else %do;
2581039   +         kernel = Linear
2581040   +    %end;
2581042   +    %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2581044   +        %if ( (&EM_PROPERTY_CVALUE eq TUNING)
2581045   +            or  (&EM_PROPERTY_POLY_K_PAR1 eq TUNING)
2581046   +            or  (&EM_PROPERTY_RBF_K_PAR1 eq TUNING)
2581047   +            or  (&EM_PROPERTY_SGMD_K_PAR1 eq TUNING)
2581048   +            or  (&EM_PROPERTY_SGMD_K_PAR2 eq TUNING) )  %then %do;
2581049   +            tun = &EM_PROPERTY_TUNINGMETHOD
2581050   +        %end;
2581052   +    %end;
2581054   +    %if &EM_PROPERTY_APPLYCV eq Y %then %do;
2581055   +         CV  = &EM_PROPERTY_CVMETHOD
2581056   +         %if &EM_PROPERTY_CVFOLD ne Default %then %do;
2581057   +         fold = &EM_PROPERTY_CVFOLD
2581058   +         %end;
2581059   +         %if &EM_PROPERTY_CVMETHOD eq TESTSET %then %do;
2581060   +                testdata = &testdata
2581061   +         %end;
2581062   +    %end;
2581064   +    %if (&EM_PROPERTY_USEITERCG eq Y) or ( &usecgbydefault eq Y )  %then %do;
2581065   +      cgiter = &_PROPERTY_CGITER  cgtol=&_PROPERTY_CGTOL
2581066   +    %end;
2581068   +    %if &EM_PROPERTY_PRINTOPTION ne DEFAULT  %then %do;
2581069   +    &EM_PROPERTY_PRINTOPTION
2581070   +    %end;
2581072   +    %if &EM_PROPERTY_PRINTOPTHIST eq Y  %then %do;
2581073   +    POPTHIS
2581074   +    %end;
2581075   +    ;
2581076   +    var %EM_INPUT %EM_REJECTED;
2581077   +    target %EM_TARGET;
2581079   +     %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2581081   +         %if &EM_PROPERTY_CVALUE eq TUNING  %then %do;
2581082   +             C  &_PROPERTY_TUN_C_FROM to &_PROPERTY_TUN_C_TO
2581083   +             by &_PROPERTY_TUN_C_BY
2581084   +             ;
2581085   +         %end;
2581086   +         %else %if &EM_PROPERTY_CVALUE eq CONSTANT  %then %do;
2581087   +             C  &_PROPERTY_USERCVALUE ;
2581088   +         %end;
2581090   +     %end;
2581091   +     %else %do;
2581092   +           C  &_PROPERTY_USERCVALUE ;
2581093   +     %end;
2581096   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
2581098   +          %if &EM_PROPERTY_TUNINGMETHOD eq GRID  %then %do;
2581099   +             %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
2581100   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM to &_PROPERTY_POLY_TUN_KP1_TO
2581101   +                  by &_PROPERTY_POLY_TUN_KP1_BY
2581102   +                ;
2581103   +             %end;
2581104   +             %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
2581105   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
2581106   +             %end;
2581107   +          %end;
2581108   +          %else %if &EM_PROPERTY_TUNINGMETHOD eq POPT  %then %do;
2581109   +              %if &EM_PROPERTY_POLY_K_PAR1 eq TUNING  %then %do;
2581110   +                 K_PAR  &_PROPERTY_POLY_TUN_KP1_FROM ;
2581111   +                ;
2581112   +              %end;
2581113   +              %else %if &EM_PROPERTY_POLY_K_PAR1 eq CONSTANT  %then %do;
2581114   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
2581115   +              %end;
2581116   +           %end;
2581117   +           %else %do;
2581118   +                 K_PAR  &_PROPERTY_POLY_USERK_PAR1 ;
2581119   +           %end;
2581120   +    %end;
2581122   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
2581123   +          %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2581124   +             %if &EM_PROPERTY_RBF_K_PAR1 eq TUNING  %then %do;
2581125   +                  K_PAR  &_PROPERTY_RBF_TUN_KP1_FROM to &_PROPERTY_RBF_TUN_KP1_TO
2581126   +                  by &_PROPERTY_RBF_TUN_KP1_BY
2581127   +                  ;
2581128   +              %end;
2581129   +              %else %if &EM_PROPERTY_RBF_K_PAR1 eq CONSTANT  %then %do;
2581130   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
2581131   +              %end;
2581132   +          %end;
2581133   +          %else %do;
2581134   +                  K_PAR  &_PROPERTY_RBF_USERK_PAR1 ;
2581135   +          %end;
2581136   +    %end;
2581139   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
2581141   +         %if &EM_PROPERTY_TUNINGMETHOD ne NONE %then %do;
2581143   +             %if &EM_PROPERTY_SGMD_K_PAR1 eq TUNING  %then %do;
2581144   +                K_PAR  &_PROPERTY_SGMD_TUN_KP1_FROM to &_PROPERTY_SGMD_TUN_KP1_TO
2581145   +                by &_PROPERTY_SGMD_TUN_KP1_BY
2581146   +             ;
2581147   +             %end;
2581148   +             %else %if &EM_PROPERTY_SGMD_K_PAR1 eq CONSTANT  %then %do;
2581149   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
2581150   +             %end;
2581152   +             %if &EM_PROPERTY_SGMD_K_PAR2 eq TUNING  %then %do;
2581153   +                K_PAR2  &_PROPERTY_SGMD_TUN_KP2_FROM to &_PROPERTY_SGMD_TUN_KP2_TO
2581154   +                by &_PROPERTY_SGMD_TUN_KP2_BY
2581155   +             ;
2581156   +             %end;
2581157   +             %else %if &EM_PROPERTY_SGMD_K_PAR2 eq CONSTANT  %then %do;
2581158   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
2581159   +             %end;
2581160   +          %end;
2581161   +          %else %do;
2581162   +                K_PAR  &_PROPERTY_SGMD_USERK_PAR1 ;
2581163   +                K_PAR2  &_PROPERTY_SGMD_USERK_PAR2 ;
2581164   +          %end;
2581165   +    %end;
2581167   +run;
2581168   +%TRAINENDLINE:
2581169   +quit;
2581170   +%mend svm_training;
2581172   +%macro svm_score(indata=,
2581173   +                 inest=,
2581174   +                 infit=,
2581175   +                 inclass=,
2581176   +                 outindata=,
2581177   +                 outscore=,
2581178   +                 targetLevel=
2581179   +                 );
2581182   +%if &TargetLevel eq BINARY %then %do;
2581184   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
2581186   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
2581187   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
2581188   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
2581189   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
2581192   +%do %while(^ %sysfunc(fetch(&dsid)));
2581193   +   %let TargetEvent = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
2581194   +    %let TargetVar =   %sysfunc(getvarc(&dsid, &vn_target_name));
2581195   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
2581196   +   %let TargetType =  %sysfunc(getvarc(&dsid, &vn_target_type));
2581197   +%end;
2581199   +%let dsid = %sysfunc(close(&dsid));
2581202   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
2581203   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581205   +%do %while(^ %sysfunc(fetch(&dsid)));
2581206   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2581207   +%end;
2581208   +%let dsid = %sysfunc(close(&dsid));
2581210   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
2581211   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581213   +%do %while(^ %sysfunc(fetch(&dsid)));
2581214   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2581215   +%end;
2581216   +%let dsid = %sysfunc(close(&dsid));
2581219   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
2581220   +              out=&outscore(rename=(_F_=&F_VAR _I_=&I_VAR));
2581221   +run;
2581223   +filename resifref  "&EM_NODEDIR&EM_DSEP.tmprescode.sas";
2581224   +%makeResidualVars(target=&TargetVar, decmeta=&EM_DEC_DECMETA, fref=resifref); /*
2581224  !+from a part of %EM_MODEL() macro */
2581226   +data &outscore(drop=_P);
2581227   +      set  &outscore;
2581228   +     if (_P_ < -600) then _p =0;
2581229   +     else _P = 1/(1+EXP((-1)*(_P_)));
2581231   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2581232   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581233   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2581235   +%do %while(^ %sysfunc(fetch(&dsid)));
2581236   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2581237   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
2581238   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
2581239   +       &P_Var = _P;
2581240   +   %end;
2581241   +   %else %do;
2581242   +       &P_Var = 1 - _P;
2581243   +       %let targetNonEvent = &P_LEVEL;
2581244   +   %end;
2581245   +%end;
2581246   +%let dsid = %sysfunc(close(&dsid));
2581248   +%include resifref;
2581250   +run;
2581252   +filename resifref;
2581254   +%end; /* the end of if - targetlevel eq binary */
2581255   +%else %do;
2581257   +/* ----     interval target  ------ */
2581259   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2581260   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581262   +%do %while(^ %sysfunc(fetch(&dsid)));
2581263   +   %let P_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2581264   +%end;
2581265   +%let dsid = %sysfunc(close(&dsid));
2581267   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
2581268   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581270   +%do %while(^ %sysfunc(fetch(&dsid)));
2581271   +   %let R_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2581272   +%end;
2581274   +%let dsid = %sysfunc(close(&dsid));
2581276   +proc svmscore data=&indata inest=&inest infit=&infit inclass=&inclass
2581277   +              out=&outscore(rename=(_P_=&P_VAR _R_=&R_VAR));
2581278   +run;
2581280   +%end; /* end of targetlevel eq interval */
2581283   +%mend svm_score;
2581286   +%macro makeSVMFitStatDs();
2581288   +data &EM_USER_SVMFITDS;
2581289   +     set &EM_USER_SVMFITSTAT;
2581290   +     Label _Bias_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_bias,
2581290  !+noquote))";
2581291   +     Label _K_PAR2_    = "%sysfunc(sasmsg(sashelp.dmine,
2581291  !+rpt_svmfitstat_label_k_par2, noquote))";
2581292   +     Label _K_PAR3_    = "%sysfunc(sasmsg(sashelp.dmine,
2581292  !+rpt_svmfitstat_label_k_par3, noquote))";
2581293   +     Label _K_PAR_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_k_par,
2581293  !+ noquote))";
2581294   +     Label _L1_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_l1,
2581294  !+noquote))";
2581295   +     Label _Margin_    = "%sysfunc(sasmsg(sashelp.dmine,
2581295  !+rpt_svmfitstat_label_margin, noquote))";
2581296   +     Label _NCLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nclev,
2581296  !+ noquote))";
2581297   +     Label _NCV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_ncv,
2581297  !+noquote))";
2581298   +     Label _NIV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_niv,
2581298  !+noquote))";
2581299   +     Label _NLV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nlv,
2581299  !+noquote))";
2581300   +     Label _NOBS_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nobs,
2581300  !+noquote))";
2581301   +     Label _NSV_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nsv,
2581301  !+noquote))";
2581302   +     Label _NTRAIN_    = "%sysfunc(sasmsg(sashelp.dmine,
2581302  !+rpt_svmfitstat_label_ntrain, noquote))";
2581303   +     Label _NYLEV_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_nylev,
2581303  !+ noquote))";
2581304   +     Label _NormW_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_normw,
2581304  !+ noquote))";
2581305   +     Label _OBJ_       = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_obj,
2581305  !+noquote))";
2581306   +     Label _Radius_    = "%sysfunc(sasmsg(sashelp.dmine,
2581306  !+rpt_svmfitstat_label_radius, noquote))";
2581307   +     Label _RegC_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_regc,
2581307  !+noquote))";
2581308   +     Label _SVOM_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_svom,
2581308  !+noquote))";
2581309   +     Label _VCDim_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_svmfitstat_label_vcdim,
2581309  !+ noquote))";
2581310   +    if _TYPE_ ='_ACCTAB_' then delete;
2581311   +    %if &EM_PROPERTY_KERNEL eq LINEAR %then %do;
2581312   +      _BIAS_= _K_PAR_;
2581313   +      DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
2581314   +    %end;
2581315   +    %if &EM_PROPERTY_KERNEL eq POLYNOM %then %do;
2581316   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
2581317   +    %end;
2581318   +    %if &EM_PROPERTY_KERNEL eq RBFREC %then %do;
2581319   +      DROP _K_PAR2_ _K_PAR3_  _L1_;
2581320   +    %end;
2581321   +    %if &EM_PROPERTY_KERNEL eq SIGMOID %then %do;
2581322   +      DROP _K_PAR3_  _L1_;
2581323   +    %end;
2581324   +run;
2581326   +proc transpose data =&EM_USER_SVMFITDS out =&EM_USER_SVMFITDS;
2581327   +run;
2581329   +data &EM_USER_SVMFITDS;
2581330   +     set &EM_USER_SVMFITDS;
2581331   +     Label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_label, noquote))"
2581331  !+;
2581332   +     Label _NAME_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_name, noquote))";
2581333   +     Label COL1 =  "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_trainstat,
2581333  !+noquote))";
2581334   +     Rename COL1 = Train;
2581335   +     if _NAME_ = '_ACCU_' then delete;
2581336   +run;
2581338   +%mend makeSVMFitStatDs;
2581340   +%macro svm_fitstat(validSource=);
2581342   +%EM_FITSTAT(trainDs = work._tmp_scored_train,
2581343   +            %if &_validSource= VALIDSET %then %do;
2581344   +                validDs=work._tmp_scored_test,
2581345   +                testDs=,
2581346   +            %end;
2581347   +            %else %if &_validSource= TESTSET %then %do;
2581348   +                validDs=,
2581349   +                testDs=work._tmp_scored_test,
2581350   +            %end;
2581351   +            decdata=&EM_DEC_DECDATA,
2581352   +            decmeta=&EM_DEC_DECMETA,
2581353   +            freqvar=, df=,
2581354   +            outfit=&EM_DATA_EMOUTFIT);
2581356   +data &EM_DATA_EMOUTFIT;
2581357   +     set &EM_DATA_EMOUTFIT;
2581358   +     DROP _DFM_    _DFE_    _MSE_    _RMSE_    _NW_    _FPE_    _RFPE_    _AIC_
2581358  !+_SBC_; /* Because of DF */
2581359   +run;
2581360   +%mend svm_fitstat;
2581362   +/*----------------------------------------------------------------------------------
2581362  !+-----
2581363   +   OUTEST data set
2581365   +                                                       APRTMNT_  APRTMNT_   TELIND_
2581365  !+  TELIND_
2581366   + Obs  _TARGET_  _TYPE_   _NAME_   _MEAN_     _STDEV_       1_        2_        1_
2581366  !+     2_
2581368   +  1    GENDER   _MEAN_             .        .            0.93845   0.06155   0.02391
2581368  !+   0.97609
2581369   +  2    GENDER   _STDEV_            .        .            0.24039   0.24039   0.15280
2581369  !+   0.15280
2581370   +  3    GENDER   _PARMS_          -0.12089  -.006143769  -0.09083  -0.03005  -0.04778
2581370  !+  -0.07311
2581372   +=-----------------------------------------------------------------------------------
2581372  !+--*/
2581373   +/* this is not used, generate score code directly for the case of linear svm */
2581374   +%macro gen_score(File=, Outclass=, Outest=, DecMeta=, ColumnsMeta=, Cutoff=,
2581374  !+Residual=);
2581376   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='TARGET'))));
2581378   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
2581379   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
2581380   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
2581381   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
2581382   +%let vn_target_level = %sysfunc(varnum(&dsid, LEVEL));
2581384   +%do %while(^ %sysfunc(fetch(&dsid)));
2581385   +   %let TargetEvent =  %sysfunc(getvarc(&dsid, &vn_event));
2581386   +   %let TargetVar =    %sysfunc(getvarc(&dsid, &vn_target_name));
2581387   +   %let TargetFormat = %sysfunc(getvarc(&dsid, &vn_target_format));
2581388   +   %let TargetType =   %sysfunc(getvarc(&dsid, &vn_target_type));
2581389   +   %let TargetLevel =  %sysfunc(getvarc(&dsid, &vn_target_level));
2581390   +%end;
2581391   +%let dsid = %sysfunc(close(&dsid));
2581393   +data _cmeta;
2581394   +    set &ColumnsMeta;
2581395   +    NAME = upcase(strip(NAME));
2581396   +run;
2581398   +data _tmpclass;
2581399   +       set &outclass;
2581400   +   _VAR_ = upcase(strip(_VAR_));
2581401   +run;
2581403   +proc sql;
2581404   +create table _outclass as
2581405   +select _NAME_, _LEVEL_, _VAR_, FORMAT, TYPE, LEVEL, ROLE
2581406   +  from  _tmpclass, _cmeta
2581407   +  where _tmpclass._VAR_ = _cmeta.NAME;
2581408   +run;
2581410   +data _outclass;
2581411   +    set _outclass;
2581412   +    if (upcase(strip(LEVEL)) eq 'INTERVAL') or
2581413   +       (upcase(strip(ROLE)) ne 'INPUT') then delete;
2581414   +run;
2581415   +data _meands;
2581416   +    set &outest;
2581417   +    if _TYPE_='_MEAN_';
2581418   +run;
2581420   +/*
2581421   +data _null_;
2581422   +    set &outest;
2581423   +    if _TYPE_='_PARMS_';
2581424   +    call symput('bias', _STDEV_ );
2581425   +    call symput('intercept', _MEAN_ );
2581426   +run;
2581427   +*/
2581429   +filename  _File_ "&File";
2581430   +data _null_;
2581431   +    FILE _File_;
2581432   +    length _line $500;
2581433   +    drop _line;
2581435   +    put ' ';
2581436   +    put '/*-------------------------------------------------*/';
2581437   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote))" '*/';
2581438   +    put '/*-------------------------------------------------*/';
2581439   +    put ' ';
2581441   +    put 'length _warn_ $ 4;';
2581442   +    put 'label _warn_ = "Warnings";';
2581443   +    put 'length _svm_uname $32;';
2581444   +    put 'DROP _svm_uname ;';
2581446   +  dsid = open("work._outclass");
2581447   +    if dsid then do;
2581448   +          oldvname ='';
2581449   +          do while(not fetch(dsid));
2581450   +             vname = upcase(strip(getvarc(dsid,varnum(dsid, '_VAR_'))));
2581451   +             vlevel = upcase(strip(getvarc(dsid,varnum(dsid,'_LEVEL_'))));
2581452   +             dummyname = strip(getvarc(dsid,varnum(dsid,'_NAME_')));
2581453   +             vtype = strip(getvarc(dsid,varnum(dsid,'TYPE')));
2581454   +             vformat = strip(getvarc(dsid,varnum(dsid,'FORMAT')));
2581455   +             *put 'vtype =' vtype;
2581456   +             *put 'vformat=' vformat;
2581458   +             if oldname ne vname then do;
2581459   +                 if vtype = 'N' then do;
2581460   +                     if vformat eq ' ' then do;
2581461   +                        put '_svm_uname = put(' vname ', Best12.);';
2581462   +                     end; else do;
2581463   +                        put '_svm_uname = put(' vname ',' vformat ');';
2581464   +                     end;
2581465   +                  end;
2581466   +                  else do;
2581467   +                     if vformat eq ' ' then do;
2581468   +                        put '_svm_uname = ' vname ' ;';
2581469   +                     end; else do;
2581470   +                        put '_svm_uname = put(' vname ',' vformat ');';
2581471   +                     end;
2581472   +                  end;
2581473   +                  put '%DMNORMIP(_svm_uname);';
2581474   +              end; /* end of oldname ne vname */
2581476   +              /*put 'if _svm_uname = strip("' vlevel '") then ' dummyname '=1 ;';*/
2581477   +              _line = 'if _svm_uname =' || quote(strip(vlevel)) || ' then ';
2581478   +              put _line;
2581479   +              put ' ' dummyname  '= 1 ; else '  dummyname '=0 ; drop '  dummyname '
2581479  !+;';
2581480   +              oldname = vname;
2581481   +          end;
2581483   +     end;
2581484   +rc=close(dsid);
2581486   +dsid = open("&outest");
2581487   +    if dsid then do;
2581488   +          put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_predvalues,
2581488  !+noquote))"  "------ */";
2581489   +          ncol = attrn(dsid, 'NVARS');
2581490   +          do i=4 to ncol;
2581491   +             vname = upcase(trim(left(varname(dsid,i))));
2581492   +              do while(not fetch(dsid));
2581493   +                  type = strip(getvarc(dsid,2));
2581494   +                  select(type);
2581495   +                      when('_MEAN_')  mean =  getvarn(dsid, i);
2581496   +                      when('_STDEV_') std  =  getvarn(dsid, i);
2581497   +                      when('_PARMS_') coeff = getvarn(dsid, i);
2581498   +                  otherwise;
2581499   +                  end;
2581500   +              end; /* end of do-while*/
2581501   +              *put '+' coeff '*(' vname '-' mean ')/' std;
2581502   +              if i=4 then  do; put '_P_ =(' coeff ; end;
2581503   +              else if i=5 then do; put '+' coeff ');' ; end;
2581504   +              else do;
2581505   +                      tmpvar = '_TMPVAR'||strip(i);
2581506   +                      put 'if ' vname '= . then ' tmpvar '=' mean ';';
2581507   +                      put 'else ' tmpvar '=' vname ';';
2581508   +                      put '_P_ = _P_+' coeff '*' tmpvar ';';
2581509   +                      put 'drop  ' tmpvar ';';
2581510   +              end;
2581511   +              rc=rewind(dsid);
2581512   +         end; /* end of  do i=6 to &nvars; */
2581513   +         put ';';
2581514   +     end;
2581515   +    rc=close(dsid);
2581516   + put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_map_predvalues, noquote))"
2581516  !+"------ */";
2581518   +%if &TargetLevel eq BINARY %then %do;
2581520   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
2581521   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581522   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2581524   +   put ' if _P_ < -600 then _p =0; ';  /* to avoid the limit of EXP function */
2581525   +   put ' else _P = 1/(1+EXP((-1)*(_P_)));' ;
2581527   +%do %while(^ %sysfunc(fetch(&dsid)));
2581528   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2581529   +   %let P_Level = %sysfunc(getvarc(&dsid, &vn_level));
2581530   +   %if %nrbquote(&P_Level) = %nrbquote(&TargetEvent) %then %do;
2581531   +       put " &P_Var = _P;";
2581532   +   %end;
2581533   +   %else %do;
2581534   +       put " &P_Var = 1 - _P;";
2581535   +   %let targetNonEvent = &P_LEVEL;
2581536   +   %end;
2581537   +%end;
2581538   +%let dsid = %sysfunc(close(&dsid));
2581540   +%if &Residual = Y %then %do;
2581542   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
2581542  !+"------ */";
2581544   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
2581545   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581546   +   %let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2581548   +   %do %while(^ %sysfunc(fetch(&dsid)));
2581549   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
2581550   +     %let R_Level = %sysfunc(getvarc(&dsid, &vn_level));
2581551   +     %if %nrbquote(&R_Level) = %nrbquote(&TargetEvent) %then %do;
2581552   +       put " &R_Var = 1 - _P;";
2581553   +   %end;
The SAS System

2581554   +   %else %do;
2581555   +       put " &R_Var = 0 - (1 - _P);";
2581556   +   %end;
2581557   +   %end;
2581558   +   %let dsid = %sysfunc(close(&dsid));
2581559   +%end;
2581560   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_from, noquote))"
2581560  !+"------ */";
2581562   +    put 'length _FORMAT_VAR $200;';
2581563   +    put 'length _TARGNOR $%DMNORLEN; ';
2581564   +    put 'DROP _FORMAT_VAR _TARGNOR;';
2581565   +    %if &TargetFormat ne  %then %do;
2581566   +    put "_FORMAT_VAR=PUT(&TargetVar, &TargetFormat);";
2581567   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR);';
2581568   +    %end;
2581569   +    %else %do;
2581570   +    %if &TargetType  = N  %then %do;
2581571   +    put "_FORMAT_VAR=PUT(&TargetVar, BEST12.);";
2581572   +       %end;
2581573   +       %else %do;
2581574   +    put "_FORMAT_VAR= &TargetVar;";
2581575   +       %end;
2581576   +    put '%DMNORMCP(_FORMAT_VAR, _TARGNOR); ' ;
2581577   +    %end;
2581579   +    %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='FROM'))));
2581580   +    %let vn_f_var =%sysfunc(varnum(&dsid, VARIABLE));
2581581   +    %let vn_f_varlabel =%sysfunc(varnum(&dsid, LABEL));
2581583   +    %do %while(^ %sysfunc(fetch(&dsid)));
2581584   +        %let F_var = %sysfunc(getvarc(&dsid, &vn_f_var));
2581585   +        %let F_var_label = %sysfunc(getvarc(&dsid, &vn_f_varlabel));
2581586   +        %let qF_var_label = %str(%"&F_var_label%");
2581587   +    put "&F_var = _TARGNOR ;";
2581588   +    put "label &F_var = &qF_Var_label;";
2581589   +    %end;
2581590   +    %let dsid = %sysfunc(close(&dsid));
2581592   +    put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_var_into, noquote))"
2581592  !+"------ */";
2581594   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='INTO'))));
2581595   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581596   +%let vn_I_varlabel =%sysfunc(varnum(&dsid, LABEL));
2581598   +%do %while(^%sysfunc(fetch(&dsid)));
2581599   +   %let I_var = %sysfunc(getvarc(&dsid, &vn_var));
2581600   +   %let I_var_label = %sysfunc(getvarc(&dsid, &vn_I_varlabel));
2581601   +   %let qI_var_label = %str(%"&I_var_label%");
2581602   +   %let qTargetEvent = %str(%"&targetEvent%");
2581603   +   %let qTargetNonEvent = %str(%"&targetNonEvent%");
2581604   +       put " if _P  > &Cutoff  then &I_Var  = &qtargetEvent ;" ;
2581605   +       put " else &I_Var  =  &qtargetNonEvent ;";
2581606   +       put " label &I_var = &qI_var_label;";
2581607   +%end;
2581608   +%let dsid = %sysfunc(close(&dsid));
2581610   +%end;  /* end of TargetLevel= Binary */
2581612   +%else %if &TargetLevel eq INTERVAL %then %do;
2581614   +%let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='PREDICTED'))));
2581615   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581616   +%let vn_label =%sysfunc(varnum(&dsid, LABEL));
2581618   +%do %while(^ %sysfunc(fetch(&dsid)));
2581619   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2581620   +   %let P_label = %sysfunc(getvarc(&dsid, &vn_label));
2581621   +   %let qP_label = %str(%"&P_label%");
2581622   +    put " &P_Var = _P_;";
2581623   +    put " label &P_Var = &qP_label;";
2581624   +%end;
2581625   +%let dsid = %sysfunc(close(&dsid));
2581627   +%if &Residual = Y %then %do;
2581629   +   put " /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_calc_residual, noquote))"
2581629  !+"------ */";
2581631   +   %let dsid=%sysfunc(open(&DECMETA(where=(_TYPE_='RESIDUAL'))));
2581632   +   %let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581633   +   %let vn_label =%sysfunc(varnum(&dsid, LABEL));
2581635   +   %do %while(^ %sysfunc(fetch(&dsid)));
2581636   +     %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
2581637   +     %let R_label = %sysfunc(getvarc(&dsid, &vn_label));
2581638   +     %let qR_label = %str(%"&R_label%");
2581639   +       put " &R_Var = &TargetVar - &P_var;";
2581640   +       put " label &R_Var = &qR_label;";
2581641   +   %end;
2581642   +   %let dsid = %sysfunc(close(&dsid));
2581643   +%end;
2581645   +%end;   /* end of TargetLevel= Interval */
2581647   +  put "/*------------------------------------------------------------*/";
2581648   +proc datasets lib=work nolist;
2581649   + delete _tmpclass _cmeta _outclass;
2581650   +run;
2581651   +run;
2581653   +filename  _File_;
2581655   +%mend gen_score;
2581657   +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
2581658   +%global &nLevel;
2581659   +proc dmdb batch data=&indata
2581660   +classout=_tmp_dmdbout;
2581661   +class &target;
2581662   +run;
2581663   +data _tmp_dmdbout;
2581664   +    set _tmp_dmdbout;
2581665   +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
2581666   +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
2581667   +run;
2581668   +data _null_;
2581669   +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
2581670   +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
2581671   +    %let dsid = %sysfunc(close(&dsid));
2581672   +     call symput("&nLevel", put(&_obs, Best12.));
2581673   +run;
2581675   +proc datasets lib=work nolist;
2581676   +     delete _tmp_dmdbout;
2581677   +run;
2581678   +quit;
2581679   +%Mend CheckBinaryTargetLevel;
2581682   +%macro getNObs(inds=, nobs=);
2581683   +    %global &nobs;
2581684   +    data _null_;
2581685   +        set &inds end=eof;
2581686   +        if eof then call symput("&nobs", _N_);
2581687   +    run;
2581688   +    quit;
2581689   +%mend  getNObs;
2581693   +%macro makeAlphaDs(target=, cmeta=);
2581695   + %let isOBSIndex= N;
2581696   + %let dsid = %sysfunc(open(&cmeta));
2581697   + %let vn_name =%sysfunc(varnum(&dsid, NAME));
2581698   + %do %while(^%sysfunc(fetch(&dsid)));
2581699   +     %let _name = %sysfunc(getvarc(&dsid, &vn_name));
2581700   +     %if %upcase(&_name) = _DATAOBS_  %then %do; %let isOBSIndex = Y;%end;
2581701   + %end;
2581702   + %let dsid = %sysfunc(close(&dsid));
2581704   +data &EM_USER_OUTALPHA;
2581705   +     set _sample_train;
2581706   +     set _outtrain(keep=_ALPHA_ _BOUND_);
2581707   +     %if &isOBSIndex= N %then %do;
2581708   +     keep _OBS_ _ALPHA_ _BOUND_ &target;
2581709   +     %end;
2581710   +     %else %do;
2581711   +     keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ &target;
2581712   +     %end;
2581713   +run;
2581715   +data &EM_EXPORT_TRAIN;
2581716   +     length _OBS_ 8;
2581717   +     set &EM_EXPORT_TRAIN;
2581718   +     _OBS_ = _N_;
2581719   +run;
2581721   +data &EM_EXPORT_TRAIN(Drop=_OBS_);
2581722   +     merge &EM_EXPORT_TRAIN  &EM_USER_OUTALPHA(drop=&target);
2581723   +     by _OBS_;
2581724   +     if _ALPHA_ =. then _ALPHA_=0;
2581725   +     if _BOUND_ ="" then _BOUND_="_LBC";
2581726   +run;
2581728   +data &EM_USER_OUTALPHA;
2581729   +   set &EM_USER_OUTALPHA;
2581730   +   if _ALPHA_ = 0 then delete;
2581731   +   %if &isOBSIndex= N %then %do;
2581732   +   Label _OBS_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label, noquote))";
2581733   +   rename _OBS_ = _dataobs_;
2581734   +   %end;
2581735   +   %else %do;
2581736   +   drop _OBS_;
2581737   +   Label _dataobs_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_dataobs_label,
2581737  !+noquote))";
2581738   +   %end;
2581739   +   Label _ALPHA_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_alpha_label, noquote))";
2581740   +   Label &target = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_target_label, noquote))";
2581741   +   Label _BOUND_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_bound_label, noquote))";
2581742   +   run;
2581744   +%mend makeAlphaDs;
2581747   +%macro makeTunData();
2581748   +data &EM_USER_TUNINGCRIT;
2581749   +    set &EM_USER_TUNINGCRIT;
2581750   +    Drop N;
2581751   +    Label C = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_c, noquote))";
2581752   +    Label KF1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf1, noquote))";
2581753   +    Label KF2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_kf2, noquote))";
2581754   +    Label NMisc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_nmisc, noquote))";
2581755   +    Label Perc = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_perc, noquote))";
2581756   +    Label ERROR = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_error, noquote))";
2581757   +    Label TstError = "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_label_tsterror,
2581757  !+noquote))";
2581758   +run;
2581759   +%mend makeTunData;
2581761   +/*------------------ Score Code Generation with Proc SVMScore
2581761  !+----------------------  */
2581764   +%macro score_code(TargetLevel=, type=);
2581766   +%let _inoutest = WORK._inoutest ;
2581767   +%let _inoutfit = WORK._inoutfit ;
2581768   +%let _inoutclass = WORK._inoutclass;
2581770   +%if &type eq FLOW %then %do;
2581771   +    %let _inoutest = &EM_USER_OUTEST;
2581772   +    %let _inoutfit = &EM_USER_SVMFITSTAT ;
2581773   +    %let _inoutclass = &EM_USER_OUTCLASS;
2581774   +%end;
2581775   +%else %do;
2581776   +%em_data2code(data=&EM_USER_OUTEST, outdata=&_inoutest,
2581776  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
2581777   +%em_data2code(data=&EM_USER_SVMFITSTAT, outdata=&_inoutfit,
2581777  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
2581778   +%em_data2code(data=&EM_USER_OUTCLASS, outdata=&_inoutclass,
2581778  !+outfile=%str("&EM_FILE_EMPUBLISHSCORECODE"), append=Y);
2581779   +%end;
2581781   +%let emscoreout = %str(&)%str(em_score_output);
2581784   +%if &type eq FLOW %then %do;
2581785   +filename  _File_ "&EM_FILE_EMFLOWSCORECODE";
2581786   +%end;
2581787   +%else %do;
2581788   +filename  _File_ "&EM_FILE_EMPUBLISHSCORECODE";
2581789   +%end;
2581791   +data _null_;
2581792   +    FILE _File_ MOD;
2581794   +    put ' ';
2581795   +    put '/*-------------------------------------------------*/';
2581796   +    put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_svm_score_title, noquote)) " ' */'
2581796  !+;
2581797   +    put '/*-------------------------------------------------*/';
2581798   +    put ' ';
2581800   +%if &TargetLevel eq BINARY %then %do;
2581802   +/*%put &emscoreout;  */
2581804   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='FROM'))));
2581805   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581807   +%do %while(^ %sysfunc(fetch(&dsid)));
2581808   +   %let F_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2581810   +%end;
2581811   +%let dsid = %sysfunc(close(&dsid));
2581813   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='INTO'))));
2581814   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581816   +%do %while(^ %sysfunc(fetch(&dsid)));
2581817   +   %let I_VAR = %sysfunc(getvarc(&dsid, &vn_var));
2581819   +%end;
2581820   +%let dsid = %sysfunc(close(&dsid));
2581823   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
2581823  !+inclass=&_inoutclass";
2581824   +    %if &type eq FLOW %then %do;
2581825   +    put "              out = &emscoreout(rename=(_F_=&F_VAR _I_=&I_VAR))";
2581826   +    %end;
2581827   +    %else %do;
2581828   +    put "              out = &emscoreout(rename=(_I_=&I_VAR))";
2581829   +    %end;
2581830   +    put ";";
2581831   +    put "run;";
2581834   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
2581836   +%let vn_event =%sysfunc(varnum(&dsid, EVENT));
2581837   +%let vn_target_name =%sysfunc(varnum(&dsid, VARIABLE));
2581838   +%let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
2581839   +%let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
2581842   +%do %while(^ %sysfunc(fetch(&dsid)));
2581843   +   %let TargetEvent =   %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
2581844   +   %let TargetVar   =   %sysfunc(getvarc(&dsid, &vn_target_name));
2581845   +   %let TargetFormat =  %sysfunc(getvarc(&dsid, &vn_target_format));
2581846   +   %let TargetType   =  %sysfunc(getvarc(&dsid, &vn_target_type));
2581847   +%end;
2581849   +%let dsid = %sysfunc(close(&dsid));
2581851   +    put "data &emscoreout(drop=_P);";
2581852   +    put "     set &emscoreout;";
2581853   +    put "if (_P_ < -600) then _p =0;";    /* to avoid the limit of EXP function */
2581854   +    put "else _P = 1/(1+EXP((-1)*(_P_)));";
2581856   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2581857   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581858   +%let vn_level =%sysfunc(varnum(&dsid, LEVEL));
2581860   +%do %while(^ %sysfunc(fetch(&dsid)));
2581861   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2581862   +   %let P_Level = %nrbquote(%sysfunc(getvarc(&dsid, &vn_level)));
2581863   +   %if "%quote(&P_Level)" = "%quote(&TargetEvent)" %then %do;
2581864   +    put " &P_Var = _P ;";
2581865   +   %end;
2581866   +   %else %do;
2581867   +    put " &P_Var = 1 - _P ;";
2581868   +    %let targetNonEvent = &P_LEVEL;
2581869   +   %end;
2581870   +%end;
2581871   +%let dsid = %sysfunc(close(&dsid));
2581873   +%end; /* the end of if - targetlevel eq binary */
2581874   +%else %do;
2581876   +/* ----     interval target  ------ */
2581878   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
2581879   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581881   +%do %while(^ %sysfunc(fetch(&dsid)));
2581882   +   %let P_Var = %sysfunc(getvarc(&dsid, &vn_var));
2581883   +%end;
2581884   +%let dsid = %sysfunc(close(&dsid));
2581886   +%let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='RESIDUAL'))));
2581887   +%let vn_var =%sysfunc(varnum(&dsid, VARIABLE));
2581888   +%do %while(^ %sysfunc(fetch(&dsid)));
2581889   +   %let R_var = %sysfunc(getvarc(&dsid, &vn_var));
2581890   +%end;
2581891   +%let dsid = %sysfunc(close(&dsid));
2581893   +    put "proc svmscore data= &emscoreout inest=&_inoutest infit=&_inoutfit
2581893  !+inclass=&_inoutclass ";
2581894   +    %if &type eq FLOW %then %do;
2581895   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR _R_=&R_VAR))";
2581896   +    %end;
2581897   +    %else %do;
2581898   +    put "              out = &emscoreout(rename=(_P_ = &P_VAR))";
2581899   +    %end;
2581900   +    put ";";
2581902   +%end; /* end of targetlevel eq interval */
2581904   +run;
2581905   +filename  _File_;
2581906   +%mend score_code;
2581909   +%macro makeDeltaCode(TargetLevel=);
2581910   +*--- Build Code to Modify Metadata ---*;
2581911   +filename X "&EM_FILE_CDELTA_TRAIN";
2581913   +/* modify columns meta */
2581914   +data _null_;
2581915   +    file X;
2581916   +        put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
2581917   +        put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
2581918   +        put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then ROLE='REJECTED';";
2581919   +        put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then ROLE='REJECTED';";
2581920   +run;
2581921   +%mend makeDeltaCode;
2581923   +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
2581924   + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
2581926   +    %do;
2581927   +    %let m_data      = &data;
2581928   +    %let m_decdata   = &decdata;
2581929   +    %let m_decmeta   = &decmeta;
2581930   +    %let m_noresfile = &noresfile;
2581931   +    %let m_resfile   = &resfile;
2581932   +    dm "afa c=sashelp.emutil.decidecode.scl";
2581933   +  %end;
2581934   +%mend EM_DECIDECODE;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.svm_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.SVM_TRAIN.SOURCE.
2581935   +%Macro Train;
2581938   +/*%let SVM_MAXNUMOBS = 10000; */
2581939   +/*%let EM_SCORECODEFORMAT=PROC;*/
2581940   +/*%let SVM_SAMPLESIZE = 100; */
2581942   +%EM_GETNAME(key=SVMPLOTDS, type=DATA) ;
2581943   +%EM_GETNAME(KEY=SVMFITSTAT, TYPE=DATA);
2581944   +%EM_GETNAME(KEY=SVMFITDS, TYPE=DATA);
2581945   +%EM_GETNAME(KEY=OUTEST, TYPE=DATA);
2581946   +%EM_GETNAME(KEY=OUTCLASS, TYPE=DATA);
2581947   +%EM_GETNAME(KEY=OUTFIT, TYPE=DATA);
2581948   +%EM_GETNAME(KEY=OUTALPHA, TYPE=DATA);
2581951   +/*---------- Check the input data set ---------------------*/
2581952   +%if &EM_IMPORT_DATA eq  %then %do;
2581953   +%PUT ERROR:THERE IS NO VALID INPUT DATA ;
2581954   +%let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
2581955   +%GOTO ENDLINE;
2581956   +%end;
2581958   +/*----------- Check the target variable  -------------------*/
2581960   +%let _targetVar= %EM_TARGET;
2581961   +%let _targetlevel = %EM_TARGET_LEVEL;
2581963   +%if &_targetVar eq  %then %do;
2581964   +%PUT ERROR:THERE IS NO VALID TARGET;
2581965   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
2581966   +%GOTO ENDLINE;
2581967   +%end;
2581969   +%let K = %SCAN(&_targetVar, 2, %STR( ));
2581970   +%if &K > %then %do;
2581971   +%PUT ERROR:THERE ARE MORE THAN ONE TARGET;
2581972   +%let  EMEXCEPTIONSTRING = exception.server.USE1TARGET;
2581973   +%GOTO ENDLINE;
2581974   +%end;
2581976   +/* check actual num of target levels */
2581977   +%if (&_targetLevel eq BINARY) %then %do;
2581978   +    %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&_targetVar,
2581978  !+nLevel=_nTargetLevel );
2581979   +    %if &_nTargetLevel  > 2 %then %do;
2581980   +    %let  EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&_targetVar
2581980  !+;
2581981   +    %GOTO ENDLINE;
2581982   +    %end;
2581983   +%end;
2581984   +%else %do;
2581985   +      %PUT  ERROR:TARGET LEVEL, &_targetLevel, IS NOT ACCEPTED. THE CURRENT SVM NODE
2581985  !+ SUPPORTS ONLY BINARY TARGET;
2581986   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINTARGET;
2581987   +      %GOTO ENDLINE;
2581988   +%end;
2581990   +%let _PROPERTY_TASK = ;
2581991   +%let _PROPERTY_CLASSTASK = ;
2581992   +%let _PROPERTY_METHOD = ;
2581993   +%if (&_targetLevel eq BINARY) %then %do;
2581994   +      %let _PROPERTY_TASK = CLASSIFICATION;
2581995   +      %let _PROPERTY_CLASSTASK = C_CLAS;
2581996   +      %let _PROPERTY_METHOD = LINSVM;
2581997   +%end;  /* end of %if (&_targetLevel eq BINARY)  */
2581998   +%else %if (&_targetLevel eq INTERVAL) %then %do;
2581999   +      /* for interval target */
2582000   +      %let _PROPERTY_TASK = REGRESSION;
2582001   +      %let _PROPERTY_CLASSTASK = L2_REG;
2582002   +      %let _PROPERTY_METHOD = LSSVM;
2582003   +%end; %else %do;
2582004   +      %let  EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
2582005   +      %GOTO ENDLINE;
2582007   +%end;
2582010   +%let _isValidationSet =NO;
2582011   +%let _testdata =;
2582012   +%let _testout =;
2582013   +%let _validSource=;
2582015   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
2582016   +        %let _isValidationSet = YES;
2582017   +        %let _testdata = &EM_IMPORT_VALIDATE;
2582018   +        %let _testout = &EM_EXPORT_VALIDATE;
2582019   +        %let _validSource= VALIDSET;
2582020   +%end;
2582021   +%else %do;
2582022   +        %if &EM_IMPORT_TEST  ne  %then %do;
2582023   +         %let _isValidationSet = YES;
2582024   +         %let _testdata = &EM_IMPORT_TEST;
2582025   +         %let _testout = &EM_EXPORT_TEST;
2582026   +         %let _validSource= TESTSET;
2582027   +         %end;
2582028   +%end;
2582030   +%if (&EM_PROPERTY_APPLYCV eq Y) and (&EM_PROPERTY_CVMETHOD eq TESTSET) %then %do;
2582031   +    %if &_isValidationSet eq NO  %then %do;
2582032   +    %let  EMEXCEPTIONSTRING = exception.server.svm.notestvalid.data;
2582033   +    %GOTO ENDLINE;
2582034   +    %end;
2582035   +%end;
2582037   +%let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
2582038   +%let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
2582039   +%let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
2582040   +%let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
2582041   +%let _num_input_class =
2582041  !+%eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
2582042   +%let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
2582044   +%if  &_num_input_total < 2 %then %do;
2582045   +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
2582046   +         %goto ENDLINE;
2582047   +         %end;
2582050   +/*
2582051   +%if (&EM_PROPERTY_SUPPRESSSAMPWARN eq N ) and ( &EM_PROPERTY_APPLYSAMPLING eq N )
2582051  !+%then %do;
2582053   +    %getNObs(inds=&EM_IMPORT_DATA, nobs=_nobs);
2582055   +    %if &_nobs > &SVM_MAXNUMOBS  %then %do;
2582056   +         %let  EMEXCEPTIONSTRING =
2582056  !+exception.server.svm.sample.warning,&SVM_MAXNUMOBS;
2582057   +               %goto endline;
2582058   +    %end;
2582059   +%end;
2582060   +*/
2582062   +/*------ Training ----------------------*/
2582063   +%if &EM_PROPERTY_APPLYSAMPLING eq Y %then %do;
2582064   +    %if (&_targetLevel ne INTERVAL) %then %do;
2582065   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
2582065  !+METADATA=&EM_DATA_VARIABLESET,
2582066   +                     METHOD=STRATIFY, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
2582066  !+INDEX=Y, INDEXNAME=_OBS_ );
2582067   +    %end;
2582068   +    %else %do;
2582069   +      %exploreSample(DATA=&EM_IMPORT_DATA, OUTPUT=_sample_train,
2582069  !+METADATA=&EM_DATA_VARIABLESET,
2582070   +                     METHOD=RANDOM, size=&EM_PROPERTY_SAMPLESIZE, sizetype=NROW,
2582070  !+INDEX=Y, INDEXNAME=_OBS_ );
2582071   +    %end;
2582072   +%end;
2582073   +%else %do;
2582074   +data _sample_train;
2582075   +    length _OBS_ 8.;
2582076   +    set &EM_IMPORT_DATA;
2582077   +    _OBS_ = _N_;
2582078   +run;
2582079   +%end;
2582080   +%let _usecgbydefault=;
2582081   +%if &EM_PROPERTY_USEITERCG eq DEFAULT %then %do;
2582082   +    %let _usecgbydefault = N;
2582083   +    %getNObs(inds=_sample_train, nobs=_trainnobs);
2582084   +    %if &_trainnobs > 3000   %then %do;
2582085   +    %let _usecgbydefault = Y;
2582086   +   %end;
2582087   +%end;
2582089   +%svm_training(indata=_sample_train,
2582090   +              task=&_PROPERTY_TASK,
2582091   +              classtask =&_PROPERTY_CLASSTASK,
2582092   +              method = &_PROPERTY_METHOD,
2582093   +              outest=&EM_USER_OUTEST,
2582094   +              outfit=&EM_USER_SVMFITSTAT,
2582095   +              outclass=&EM_USER_OUTCLASS,
2582096   +              isValidationSet=&_isValidationSet,
2582097   +              testdata =&_testdata,
2582098   +              testout =&_testout,
2582099   +              validSource=&_validSource,
2582100   +              usecgbydefault=&_usecgbydefault
2582101   +              );
2582102   +run;
2582104   +%svm_score(indata=&EM_IMPORT_DATA,
2582105   +             inest=&EM_USER_OUTEST,
2582106   +             infit=&EM_USER_SVMFITSTAT,
2582107   +             inclass=&EM_USER_OUTCLASS,
2582108   +             outindata=  _tmpTrain ,
2582109   +             outscore = &EM_EXPORT_TRAIN,
2582110   +             targetLevel =&_targetLevel
2582111   +            );
2582113   +%if &EM_IMPORT_VALIDATE  ne  %then %do;
2582114   +  %svm_score(indata=&EM_IMPORT_VALIDATE,
2582115   +             inest=&EM_USER_OUTEST,
2582116   +             infit=&EM_USER_SVMFITSTAT,
2582117   +             inclass=&EM_USER_OUTCLASS,
2582118   +             outindata=_tmpValid,
2582119   +             outscore = &EM_EXPORT_VALIDATE,
2582120   +             targetLevel =&_targetLevel
2582121   +            );
2582123   +%end;
2582124   +%if &EM_IMPORT_TEST  ne  %then %do;
2582125   +  %svm_score(indata=&EM_IMPORT_TEST,
2582126   +             inest=&EM_USER_OUTEST,
2582127   +             infit=&EM_USER_SVMFITSTAT,
2582128   +             inclass=&EM_USER_OUTCLASS,
2582129   +             outindata=_tmpTest,
2582130   +             outscore= &EM_EXPORT_TEST,
2582131   +             targetLevel =&_targetLevel
2582132   +            );
2582134   +%end;
2582136   +/*------------------ run decision codes ----------------------*/
2582138   +%let decfile = %bquote(&EM_NODEDIR)&EM_DSEP._TMPDECIDECODE.sas;
2582139   +%let noresdecfile =  %bquote(&EM_NODEDIR)&EM_DSEP._TMPNORESDECIDECODE.sas;
2582141   +%EM_DECIDECODE(data=&EM_EXPORT_TRAIN, noresfile=&noresdecfile, resfile=&decfile);
2582142   +filename _sffile_  "&decfile";
2582143   +%if %sysfunc(fexist(_sffile_)) %then
2582144   +%do;
2582145   +    data &EM_EXPORT_TRAIN;
2582146   +       set &EM_EXPORT_TRAIN;
2582147   +           %include _sffile_;
2582148   +    run;
2582149   +    %if &EM_IMPORT_VALIDATE  ne  %then %do;
2582150   +    data &EM_EXPORT_VALIDATE;
2582151   +       set  &EM_EXPORT_VALIDATE;
2582152   +           %include _sffile_;
2582153   +    %end;
2582154   +    %if &EM_IMPORT_TEST  ne  %then %do;
2582155   +        data &EM_EXPORT_TEST;
2582156   +            set  &EM_EXPORT_TEST;
2582157   +            %include _sffile_;
2582158   +        run;
2582159   +    %end;
2582160   +%let rc = %sysfunc(fdelete(_sffile_));
2582161   +%end;
2582162   +filename _sffile_ ;
2582164   +%score_code(TargetLevel =&_targetLevel, type=FLOW);
2582165   +%score_code(TargetLevel =&_targetLevel, type=PUBLISH);
2582167   +%makeDeltaCode(TargetLevel =&_targetLevel);
2582170   +/* %put SYSError =  &SYSERR;  */
2582172   +%if &SYSERR > 0 %then %do;
2582173   +      %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
2582174   +      %goto ENDLINE;
2582175   +%end;
2582177   +/* %gen_score(File=&EM_FILE_EMFLOWSCORECODE, Outclass=&EM_USER_OUTCLASS,
2582177  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
2582177  !+Cutoff=0.5, Residual=Y)
2582178   +  %gen_score(File=&EM_FILE_EMPUBLISHSCORECODE, Outclass=&EM_USER_OUTCLASS,
2582178  !+Outest=&EM_USER_OUTEST, DecMeta=&EM_DEC_DECMETA, ColumnsMeta=&EM_IMPORT_DATA_CMETA,
2582178  !+Cutoff=0.5, Residual=N)
2582179   +*/
2582182   +%EM_MODEL(TARGET=&_targetVar, DECSCORECODE=Y, FITSTATISTICS=Y, PREDICTED=Y,
2582182  !+RESIDUALS=Y);
2582184   +/*------ Make data for report data ----------------*/
2582185   +%makeSVMFitStatDs;
2582187   +/* create &EM_USER_OUTALPHA contains alphas with nozero value */
2582189   +%makeAlphaDs(target=&_targetVar, cmeta=&EM_IMPORT_DATA_CMETA);
2582191   +proc datasets lib = work nolist;
2582192   +      delete _outtrain  _sample_train ;
2582193   +run;
2582195   +%getNObs(inds=&EM_USER_OUTALPHA, nobs=_svnobs);
2582196   +%if &_svnobs < 1   %then %do;
2582197   +     %let  EMEXCEPTIONSTRING = exception.server.svm.nosvfound.warning;
2582198   +      %goto endline;
2582199   +%end;
2582202   +%if (&EM_PROPERTY_TUNINGMETHOD eq GRID) %then %do;
2582203   +%makeTunData();
2582204   +%end;
2582207   +%ENDLINE:
2582209   +%Mend Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.Meta2_TRAIN classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
2582211   +/*------------------------------------------------------------------
2582212   +  MACRO EXPLOREOBS
2582214   +  SUPPORT:  SASDHD - David Duling
2582215   +  PRODUCT:  Enterprise Miner
2582217   +  DESCRIPTION:
2582218   +  Generates maximum and default numbers of observations to
2582219   +  download for visualization depending on the record length.
2582221   +  Values were determined by trial and error using typical
2582222   +  Windows workstation configurations.
2582224   +  Discrete sets of values are returned so that user experience
2582225   +  will be consitent with similar sized data sets.
2582227   +  These macro variables are set:
2582228   +  _exploreobs_max -- maximum number of obs downloadable
2582229   +  _exploreobs_def -- default number of obs to be downloaded
2582230   +  _exploreobs_recl - record length.  Might be useful for reporting.
2582232   +  Use the _exploreobs_max to set limit the GUI selection of
2582233   +  observations for downloading.  The GUI selection for obs
2582234   +  could be reduced to "Default" and "Max".
2582236   +  Parameters
2582237   +  data=   libname.memname of input data
2582238   +  vars=   subset list of variables.
2582239   +          downloading 1 out of 500 really does work like downloading
2582240   +          1 out of 1 vars.  Users may select a subset of vars for
2582241   +                   visualizations.  Pass in the list as space delimited
2582242   +          var names.  If vars is not specified, the record length
2582243   +          of the entire data will be used.
2582244   +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
2582246   +  Control
2582247   +  Users may control the values by entering these macro variables.
2582248   +            EM_EXPLOREOBS_MAX
2582249   +            EM_EXPLOREOBS_DEFAULT
2582250   +  These values override the computed values.
2582252   +  Debugging
2582253   +  %let _exploreobs_debug=1 ;
2582254   +--------------------------------------------------------------------
2582255   +  HISTORY: 20APR2004. sasdhd. pushed.
2582256   +           18DEC2004. sasdhd. S0280556.
2582257   +           07SEP2007. sasdhd. HK1009586
2582258   +--------------------------------------------------------------------*/
2582260   +%macro exploreobs(data=,vars=, nbytes=) ;
2582262   +   /*--- variable definitions ---*/
2582263   +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
2582264   +   %local xobs xvars xlen vlen xi vname vlist ;
2582265   +   %local _exp_source _exp_notes ;
2582267   +   /*--- USER definitions ---*/
2582268   +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
2582270   +   /*--- variable intializations ---*/
2582271   +   %let _exploreobs_max=0 ;
2582272   +   %let _exploreobs_def=0 ;
2582273   +   %let _exploreobs_recl=0 ;
2582274   +   %let xvars= 0 ;
2582275   +   %let xlen = 0 ;
2582276   +   %let xobs = 0 ;
2582278   +   /*--- data error checks ---*/
2582279   +   %if "&data" eq "" %then %do ;
2582280   +            %put NOTE: DATA is not specified. ;
2582281   +            %goto term ;
2582282   +      %end ;
2582284   +   %let dsid=%sysfunc(open(&data)) ;
2582285   +   %if not &dsid %then %do ;
2582286   +            %put NOTE: DATA &data is not available. ;
2582287   +            %goto term ;
2582288   +      %end ;
2582290   +   /*--- if a vars list exists generate a subset ---*/
2582291   +   %if &vars ne %then %do ;
2582292   +         %let dsid=%sysfunc(close(&dsid)) ;
2582293   +         %if &_exploreobs_debug ne 1 %then %do ;
2582294   +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
2582295   +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
2582296   +                  options nosource nonotes ;
2582297   +         %end ;
2582298   +         data _exploreobs_temp_data ;
2582299   +         set &data(obs=0) ;
2582300   +          keep &vars ;
2582301   +         run;
2582302   +         %if &_exploreobs_debug ne 1 %then %do ;
2582303   +                  options &_exp_source &_exp_notes ;
2582304   +         %end ;
2582305   +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
2582306   +         %if &dsid eq 0 %then %do ;
2582307   +                  %put NOTE: Sample is not available.;
2582308   +                  %goto term ;
2582309   +            %end ;
2582310   +      %end ;
2582312   +   /*--- get var attributes ---*/
2582313   +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
2582314   +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
2582315   +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
2582316   +   %let dsid= %sysfunc(close(&dsid)) ;
2582318   +   /*--- set default and max obs ---*/
2582319   +   %let _exploreobs_recl=%eval(&xlen) ;
2582320   +   %if &_exploreobs_recl eq 0 %then %do ;
2582321   +             %let _exploreobs_max= 0 ;
2582322   +             %let _exploreobs_def= 0 ;
2582323   +             %goto term ;
2582325   +   %end ;
2582326   +   %else
2582327   +   %if &_exploreobs_recl le 32 %then %do ;
2582328   +             %let _exploreobs_max=100000 ;
2582329   +             %let _exploreobs_def= 10000 ;
2582330   +   %end ;
2582331   +   %else
2582332   +   %if &_exploreobs_recl le 128 %then %do ;
2582333   +             %let _exploreobs_max=60000 ;
2582334   +             %let _exploreobs_def= 6000 ;
2582335   +   %end ;
2582336   +   %else
2582337   +   %if &_exploreobs_recl lt 1000 %then %do ;
2582338   +             %let _exploreobs_max=20000 ;
2582339   +             %let _exploreobs_def= 2000 ;
2582340   +   %end ;
2582341   +   %else
2582342   +   %if &_exploreobs_recl lt 5000 %then %do ;
2582343   +             %let _exploreobs_max= 10000 ;
2582344   +             %let _exploreobs_def=  1000 ;
2582345   +   %end ;
2582346   +   %else
2582347   +   %if &_exploreobs_recl lt 20000 %then %do ;
2582348   +             %let _exploreobs_max= 5000 ;
2582349   +             %let _exploreobs_def=  500 ;
2582350   +   %end ;
2582351   +   %else %do ;
2582352   +             %let _exploreobs_max= 1000 ;
2582353   +             %let _exploreobs_def=  200 ;
2582354   +   %end ;
2582356   +   /*--- Users options ---*/
2582357   +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
2582358   +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
2582359   +   %end;
2582360   +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
2582361   +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
2582362   +   %end;
2582364   +    /*--- S0868273 ---*/
2582365   +    %if "&NBYTES" ne "" %then %do;
2582366   +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
2582367   +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
2582368   +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
2582368  !+&EM_EXPLOREOBS_MAX));
2582369   +       %end;
2582371   +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
2582372   +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
2582373   +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
2582373  !+&EM_EXPLOREOBS_DEFAULT));
2582374   +          %if ^&_exploreobs_def %then
2582375   +              %let _exploreobs_def = 1;
2582377   +       %end;
2582378   +    %end;
2582380   +   /*--- Terminate ---*/
2582381   +   %term:
2582383   +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
2582383  !+max=&_exploreobs_max : def= &_exploreobs_def ;
2582384   +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS8.Meta2_TRAIN;
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS8.SVM2_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (ROLE in('TARGET', 'SEGMENT')) and (LEVEL ne 'INTERVAL');
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), 
"'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM2_VARIABLESET.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Stratified sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   proc freq data=EMWS8.Meta2_TRAIN noprint;
MPRINT(EXPLORESAMPLE):   table 'DepVar'n /out=STRATASUMMARY (rename=(count=_npop_ 
percent=_pctpop_)) missing;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   quit;
MPRINT(EXPLORESAMPLE):   proc sort data=STRATASUMMARY out=STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   by descending _npop_;
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   STRATA_SIZE = int(1000 * (_npop_ / 2374) + 0.5);
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EXPLORESAMPLE):   data STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   length _SFormat1 $200;
MPRINT(EXPLORESAMPLE):   _SFormat1 = strip(put( 'DepVar'n, BEST.));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: The data set WORK.STRATASUMMARY has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set STRATASUMMARY end=eof;
MPRINT(EXPLORESAMPLE):   length string $4000;
MPRINT(EXPLORESAMPLE):   retain obsnum 0;
MPRINT(EXPLORESAMPLE):   if _N_=1 then do;
MPRINT(EXPLORESAMPLE):   call execute("data _sample_train ;");
MPRINT(EXPLORESAMPLE):   call execute("length _OBS_ 8;");
MPRINT(EXPLORESAMPLE):   call execute("set EMWS8.Meta2_TRAIN ;");
MPRINT(EXPLORESAMPLE):   call execute("_OBS_=_N_;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   if _N_>1 then call execute("else ");
MPRINT(EXPLORESAMPLE):   obsnum = obsnum+1;
MPRINT(EXPLORESAMPLE):   call execute("if ");
MPRINT(EXPLORESAMPLE):   string = tranwrd(_SFormat1, "'","''");
MPRINT(EXPLORESAMPLE):   call execute("strip(put('DepVar'n, BEST.))='"!!strip(string)!!"'");
MPRINT(EXPLORESAMPLE):   call execute("then do;");
MPRINT(EXPLORESAMPLE):   call execute("   _N"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("if _S"!!strip(put(obsnum, 
z6.))!!'<'!!strip(put(STRATA_SIZE, best.))!!" then do;");
MPRINT(EXPLORESAMPLE):   call execute("   if ranuni(12345)*("!!strip(put(_npop_, best.))!!' - 
_N'!!strip(put(obsnum, z6.))!!')');
MPRINT(EXPLORESAMPLE):   call execute("         <=("!!strip(put(STRATA_SIZE, best.))!!' - 
_S'!!strip(put(obsnum, z6.))!!') then do;');
MPRINT(EXPLORESAMPLE):   call execute("   _S"!!strip(put(obsnum, z6.))!!"+1;");
MPRINT(EXPLORESAMPLE):   call execute("   output;");
MPRINT(EXPLORESAMPLE):   call execute("   end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("end;");
MPRINT(EXPLORESAMPLE):   call execute("drop "!!"_S"!!strip(put(obsnum, z6.))!!' 
_N'!!strip(put(obsnum, z6.))!!";");
MPRINT(EXPLORESAMPLE):   if eof then do;
MPRINT(EXPLORESAMPLE):   call execute("run;");
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

MPRINT(EXPLORESAMPLE):   data _sample_train ;
MPRINT(EXPLORESAMPLE):   length _OBS_ 8;
MPRINT(EXPLORESAMPLE):   set EMWS8.Meta2_TRAIN ;
MPRINT(EXPLORESAMPLE):   _OBS_=_N_;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000001+1;
MPRINT(EXPLORESAMPLE):   if _S000001<849 then do;
MPRINT(EXPLORESAMPLE):   <=(849 - _S000001) then do;
MPRINT(EXPLORESAMPLE):   _S000001+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000001 _N000001;
MPRINT(EXPLORESAMPLE):   then do;
MPRINT(EXPLORESAMPLE):   _N000002+1;
MPRINT(EXPLORESAMPLE):   if _S000002<151 then do;
MPRINT(EXPLORESAMPLE):   <=(151 - _S000002) then do;
MPRINT(EXPLORESAMPLE):   _S000002+1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   drop _S000002 _N000002;
MPRINT(EXPLORESAMPLE):   run;
NOTE: There were 2 observations read from the data set WORK.STRATASUMMARY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + data _sample_train ;
2         + length _OBS_ 8;
3         + set EMWS8.Meta2_TRAIN ;
4         + _OBS_=_N_;
5         + if
6         + strip(put('DepVar'n, BEST.))='0'
7         + then do;
8         +    _N000001+1;
9         + if _S000001<849 then do;
10        +    if ranuni(12345)*(2015 - _N000001)
11        +          <=(849 - _S000001) then do;
12        +    _S000001+1;
13        +    output;
14        +    end;
15        + end;
16        + end;
17        + drop _S000001 _N000001;
18        + else
19        + if
20        + strip(put('DepVar'n, BEST.))='1'
21        + then do;
22        +    _N000002+1;
23        + if _S000002<151 then do;
24        +    if ranuni(12345)*(359 - _N000002)
25        +          <=(151 - _S000002) then do;
26        +    _S000002+1;
27        +    output;
28        +    end;
29        + end;
30        + end;
31        + drop _S000002 _N000002;
32        + run;

NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META2_TRAIN.
NOTE: The data set WORK._SAMPLE_TRAIN has 1000 observations and 46 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EXPLORESAMPLE):   proc datasets lib=work nolist;
MPRINT(EXPLORESAMPLE):   delete STRATASUMMARY;
MPRINT(EXPLORESAMPLE):   run;

NOTE: Deleting WORK.STRATASUMMARY (memtype=DATA).
MPRINT(EXPLORESAMPLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set _sample_train end=eof;
MPRINT(GETNOBS):   if eof then call symput("_trainnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      12:34   
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKE_DMDB):   proc dmdb batch dmdbcat= _emdmdb data=_sample_train out= _emdmdb ;
MPRINT(MAKE_DMDB):   var
MPRINT(EM_INTERVAL):   Income Kidhome MntFishProducts MntFruits MntGoldProds MntMeatProducts 
MntSweetProducts MntWines NumCatalogPurchases NumDealsPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth Recency Teenhome _dataobs_
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   class
MPRINT(EM_CLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain 
Custid DepVar Education Marital_Status
MPRINT(MAKE_DMDB):  ;
MPRINT(MAKE_DMDB):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(MAKE_DMDB):   ;
MPRINT(MAKE_DMDB):   run ;

NOTE: Records processed = 1000   Memory used = 511K.
NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: The data set WORK._EMDMDB has 1000 observations and 26 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   options debug="nlpitermsg=2";
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   ods output tun_crt = EMWS8.SVM2_TUNINGCRIT;
MPRINT(SVM_TRAINING):   proc svm data= _emdmdb dmdbcat= _emdmdb nomonitor outfit= 
EMWS8.SVM2_SVMFITSTAT outclass= EMWS8.SVM2_OUTCLASS outest= EMWS8.SVM2_OUTEST out = _outtrain 
maxiter = 2000 maxfunc = 5000 gconv = 1.0E-8 absgconv = 5.0E-4 xconv = 1.0E-8 absxconv = 
5.0E-4 xscale method= FQP kernel = LINEAR tun = GRID CV = RANDOM ;
MPRINT(SVM_TRAINING):   var
MPRINT(EM_INPUT):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain 
Education Income Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds MntMeatProducts 
MntSweetProducts MntWines NumCatalogPurchases NumDealsPurchases NumStorePurchases 
NumWebPurchases NumWebVisitsMonth Recency Teenhome
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(SVM_TRAINING):  ;
MPRINT(SVM_TRAINING):   C 0.1 to 1 by 0.1 ;
MPRINT(SVM_TRAINING):   run;

NOTE: For cross validation default fold=10 is set.
NOTE: The data set EMWS8.SVM2_OUTCLASS has 39 observations and 9 variables.
1000 records read
NOTE: Method  FQP is very unusual and not very efficient for 1000 observations and 37 
      variables.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: GCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
NOTE: ABSGCONV convergence criterion satisfied.
1000 records read
1000 records read
1000 records read
1000 records read
1000 records read
NOTE: The data set WORK._OUTTRAIN has 1000 observations and 34 variables.
NOTE: The data set EMWS8.SVM2_OUTEST has 5 observations and 42 variables.
NOTE: The data set EMWS8.SVM2_SVMFITSTAT has 2 observations and 30 variables.
WARNING: This is an experimental release of the SVM procedure. It has not had the same level 
         of testing as other components of the SAS system.
*** Total Number of Runs through Data :      260
*** Number of Kernel Evaluations: 47939
*** Time for Optimization: 876
*** Total Processing Time: 877
*** Total Number of Trainings :      121
NOTE: The data set EMWS8.SVM2_TUNINGCRIT has 10 observations and 5 variables.
NOTE: The PROCEDURE SVM printed pages 2295-2299.
NOTE: PROCEDURE SVM used (Total process time):
      real time           14:37.10
      cpu time            14:18.72
      

MPRINT(SVM_TRAINING):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   run;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta2_TRAIN inest=EMWS8.SVM2_OUTEST 
infit=EMWS8.SVM2_SVMFITSTAT inclass=EMWS8.SVM2_OUTCLASS 
out=EMWS8.SVM2_TRAIN(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META2_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=26. April 2016 20.16 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM2_TRAIN(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM2_TRAIN;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas.
2582387   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2582388   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
2582389   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2582390   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
2582391   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
2582392   +if
2582393   + F_DepVar ne '1'
2582394   +and F_DepVar ne '0'
2582395   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
2582396   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
2582397   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
2582398   +end;
MPRINT(SVM_SCORE):   end;
2582399   +else do;
MPRINT(SVM_SCORE):   else do;
2582400   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
2582401   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
2582402   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
2582403   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
2582404   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
2582405   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
2582406   +end;
MPRINT(SVM_SCORE):   end;
2582407   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM2_TRAIN.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(SVM_SCORE):   proc svmscore data=EMWS8.Meta2_VALIDATE inest=EMWS8.SVM2_OUTEST 
infit=EMWS8.SVM2_SVMFITSTAT inclass=EMWS8.SVM2_OUTCLASS 
out=EMWS8.SVM2_VALIDATE(rename=(_F_=F_DepVar _I_=I_DepVar));
MPRINT(SVM_SCORE):   run;

WARNING: This is an experimental release of the SVMSCORE procedure. It has not had the same 
         level of testing as other components of the SAS system.
NOTE: View EMWS8.META2_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
      
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set EMWS8.SVM2_VALIDATE has 1018 observations and 51 variables.
NOTE: PROCEDURE SVMSCORE used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      

MPRINT(SVM_SCORE):   filename resifref 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas";
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.SVM2_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), 
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file resifref;
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put 
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;

NOTE: The file RESIFREF is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=26. April 2016 20.16 Uhr

NOTE: 21 records were written to the file RESIFREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SVM_SCORE):  ;
MPRINT(SVM_SCORE):   data EMWS8.SVM2_VALIDATE(drop=_P);
MPRINT(SVM_SCORE):   set EMWS8.SVM2_VALIDATE;
MPRINT(SVM_SCORE):   if (_P_ < -600) then _p =0;
MPRINT(SVM_SCORE):   else _P = 1/(1+EXP((-1)*(_P_)));
MPRINT(SVM_SCORE):   P_DepVar1 = _P;
MPRINT(SVM_SCORE):   P_DepVar0 = 1 - _P;
NOTE: %INCLUDE (level 1) file RESIFREF is file 
      C:\\predictive-models-project\Workspaces\EMWS8\SVM2\tmprescode.sas.
2582408   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2582409   +*Computing Residual Vars: DepVar;
MPRINT(SVM_SCORE):   *Computing Residual Vars: DepVar;
2582410   +*------------------------------------------------------------*;
MPRINT(SVM_SCORE):   *------------------------------------------------------------*;
2582411   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(SVM_SCORE):   Label R_DepVar1= 'Residual: DepVar=1';
2582412   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(SVM_SCORE):   Label R_DepVar0= 'Residual: DepVar=0';
2582413   +if
2582414   + F_DepVar ne '1'
2582415   +and F_DepVar ne '0'
2582416   + then do;
MPRINT(SVM_SCORE):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
2582417   +R_DepVar1=.;
MPRINT(SVM_SCORE):   R_DepVar1=.;
2582418   +R_DepVar0=.;
MPRINT(SVM_SCORE):   R_DepVar0=.;
2582419   +end;
MPRINT(SVM_SCORE):   end;
2582420   +else do;
MPRINT(SVM_SCORE):   else do;
2582421   +R_DepVar1= - P_DepVar1;
MPRINT(SVM_SCORE):   R_DepVar1= - P_DepVar1;
2582422   +R_DepVar0= - P_DepVar0;
MPRINT(SVM_SCORE):   R_DepVar0= - P_DepVar0;
2582423   +select(F_DepVar);
MPRINT(SVM_SCORE):   select(F_DepVar);
2582424   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(SVM_SCORE):   when('1')R_DepVar1= R_DepVar1+1;
2582425   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(SVM_SCORE):   when('0')R_DepVar0= R_DepVar0+1;
2582426   +otherwise;
MPRINT(SVM_SCORE):   otherwise;
2582427   +end;
MPRINT(SVM_SCORE):   end;
2582428   +end;
MPRINT(SVM_SCORE):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SVM_SCORE):   run;

NOTE: There were 1018 observations read from the data set EMWS8.SVM2_VALIDATE.
NOTE: The data set EMWS8.SVM2_VALIDATE has 1018 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SVM_SCORE):   filename resifref;
NOTE: Fileref RESIFREF has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DECIDECODE):   dm "afa c=sashelp.emutil.decidecode.scl";
2582429    data SVM2_SCORE/view=SVM2_SCORE;
MPRINT(EM_DECIDECODE):   data SVM2_SCORE/view=SVM2_SCORE;
2582430    set EMWS8.SVM2_TRAIN;
MPRINT(EM_DECIDECODE):   set EMWS8.SVM2_TRAIN;
2582431    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: DATA STEP view saved on file WORK.SVM2_SCORE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: There were 2 observations read from the data set EMWS8.SVM2_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
2582432    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
2582433    * SVM2: Create decision matrix;
MPRINT(EM_DECIDECODE):   * SVM2: Create decision matrix;
2582434    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
2582435    data WORK.DepVar;
MPRINT(EM_DECIDECODE):   data WORK.DepVar;
2582436      length   DepVar                           $  32
2582437               COUNT                                8
2582438               DATAPRIOR                            8
2582439               TRAINPRIOR                           8
2582440               DECPRIOR                             8
2582441               DECISION1                            8
2582442               DECISION2                            8
2582443               ;
MPRINT(EM_DECIDECODE):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 ;
2582444    
2582445      label    COUNT="Level Counts"
2582446               DATAPRIOR="Data Proportions"
2582447               TRAINPRIOR="Training Proportions"
2582448               DECPRIOR="Decision Priors"
2582449               DECISION1="1"
2582450               DECISION2="0"
2582451               ;
MPRINT(EM_DECIDECODE):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
2582452      format   COUNT 10.
2582453               ;
MPRINT(EM_DECIDECODE):   format COUNT 10. ;
2582454    DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
2582454  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DECIDECODE):   DepVar="1";
MPRINT(EM_DECIDECODE):   COUNT=359;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.151221567;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=1;
MPRINT(EM_DECIDECODE):   DECISION2=0;
2582455    output;
MPRINT(EM_DECIDECODE):   output;
2582456    DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
2582456  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DECIDECODE):   DepVar="0";
MPRINT(EM_DECIDECODE):   COUNT=2015;
MPRINT(EM_DECIDECODE):   DATAPRIOR=0.848778433;
MPRINT(EM_DECIDECODE):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECIDECODE):   DECPRIOR=.;
MPRINT(EM_DECIDECODE):   DECISION1=0;
MPRINT(EM_DECIDECODE):   DECISION2=1;
2582457    output;
MPRINT(EM_DECIDECODE):   output;
2582458    ;
MPRINT(EM_DECIDECODE):   ;
2582459    run;
MPRINT(EM_DECIDECODE):   run;

NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2582460    proc datasets lib=work nolist;
MPRINT(EM_DECIDECODE):   proc datasets lib=work nolist;
2582461    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DECIDECODE):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECIDECODE):   label DECISION1= '1';
MPRINT(EM_DECIDECODE):   label DECISION2= '0';
MPRINT(EM_DECIDECODE):   run;
2582462    label DECISION1= '1';
2582463    label DECISION2= '0';
2582464    run;

NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
2582465    quit;
MPRINT(EM_DECIDECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

2582466    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):    *------------------------------------------------------------*;
2582467    * SVM2 Generate decision score code;
MPRINT(EM_DECIDECODE):   * SVM2 Generate decision score code;
2582468    *------------------------------------------------------------*;
MPRINT(EM_DECIDECODE):   *------------------------------------------------------------*;
2582469    run;
MPRINT(EM_DECIDECODE):   run;

MPRINT(EM_DECIDECODE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _sffile_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\_TMPDECIDECODE.sas";
MPRINT(TRAIN):   filename _sffile_ ;
NOTE: Fileref _SFFILE_ has been deassigned.
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMFLOWSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=EMWS8.SVM2_OUTEST 
infit=EMWS8.SVM2_SVMFITSTAT inclass=EMWS8.SVM2_OUTCLASS";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_F_=F_DepVar 
_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=28. April 2016 10.43 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 116.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 5 observations read from the data set EMWS8.SVM2_OUTEST.
NOTE: The data set WORK._INOUTEST has 5 observations and 42 variables.
2582470    %em_copyfile(infref=#LN20176, outfref=#LN20175, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN20175 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN20176",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN20175 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=28. April 2016 10.43 Uhr

NOTE: 104 records were written to the file #LN20175.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_SVMFITSTAT.
NOTE: The data set WORK._INOUTFIT has 2 observations and 30 variables.
2582471    %em_copyfile(infref=#LN20178, outfref=#LN20177, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN20177 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN20178",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN20177 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=8201,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=28. April 2016 10.43 Uhr

NOTE: 65 records were written to the file #LN20177.
      The minimum record length was 1.
      The maximum record length was 199.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(EM_DATA2CODE):   proc display c=sashelp.emutil.data2code.scl;
MPRINT(EM_DATA2CODE):   run;

NOTE: There were 39 observations read from the data set EMWS8.SVM2_OUTCLASS.
NOTE: The data set WORK._INOUTCLASS has 39 observations and 9 variables.
2582472    %em_copyfile(infref=#LN20180, outfref=#LN20179, append=Y);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file #LN20179 MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("#LN20180",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file #LN20179 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=11571,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=28. April 2016 10.43 Uhr

NOTE: 92 records were written to the file #LN20179.
      The minimum record length was 1.
      The maximum record length was 143.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DATA2CODE):  ;

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DATA2CODE):   
MPRINT(SCORE_CODE):  ;
MPRINT(SCORE_CODE):   filename _File_ 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas";
MPRINT(SCORE_CODE):   data _null_;
MPRINT(SCORE_CODE):   FILE _File_ MOD;
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put '/* ' "SVM Score Code " ' */';
MPRINT(SCORE_CODE):   put '/*-------------------------------------------------*/';
MPRINT(SCORE_CODE):   put ' ';
MPRINT(SCORE_CODE):   put "proc svmscore data= &em_score_output inest=WORK._inoutest 
infit=WORK._inoutfit inclass=WORK._inoutclass";
MPRINT(SCORE_CODE):   put "              out = &em_score_output(rename=(_I_=I_DepVar))";
MPRINT(SCORE_CODE):   put ";";
MPRINT(SCORE_CODE):   put "run;";
MPRINT(SCORE_CODE):   put "data &em_score_output(drop=_P);";
MPRINT(SCORE_CODE):   put "     set &em_score_output;";
MPRINT(SCORE_CODE):   put "if (_P_ < -600) then _p =0;";
MPRINT(SCORE_CODE):   put "else _P = 1/(1+EXP((-1)*(_P_)));";
MPRINT(SCORE_CODE):   put " P_DepVar1 = _P ;";
MPRINT(SCORE_CODE):   put " P_DepVar0 = 1 - _P ;";
MPRINT(SCORE_CODE):   run;

NOTE: The file _FILE_ is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=17508,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=28. April 2016 10.43 Uhr

NOTE: 15 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 103.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE_CODE):   filename _File_;
NOTE: Fileref _FILE_ has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X 
"C:\\predictive-models-project\Workspaces\EMWS8\SVM2\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   file X;
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_Y_'  then ROLE='PREDICT';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_R_'  then ROLE='RESIDUAL';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_ALPHA_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   put "if upcase(trim(left(NAME))) eq  '_BOUND_'  then 
ROLE='REJECTED';";
MPRINT(MAKEDELTACODE):   run;

NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\SVM2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 10.43 Uhr,
      Create Time=26. April 2016 19.41 Uhr

NOTE: 4 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM2_SVMFITSTAT;
MPRINT(MAKESVMFITSTATDS):   Label _Bias_ = "Bias";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR2_ = "Kernel Function Parameter 2";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR3_ = "Kernel Function Parameter 3";
MPRINT(MAKESVMFITSTATDS):   Label _K_PAR_ = "Kernel Function Parameter 1";
MPRINT(MAKESVMFITSTATDS):   Label _L1_ = "L1 Loss";
MPRINT(MAKESVMFITSTATDS):   Label _Margin_ = "Geometric Margin";
MPRINT(MAKESVMFITSTATDS):   Label _NCLEV_ = "Number of Class Variable Levels";
MPRINT(MAKESVMFITSTATDS):   Label _NCV_ = "Number of Class Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NIV_ = "Number of Interval Variables";
MPRINT(MAKESVMFITSTATDS):   Label _NLV_ = "Norm of Longest Vector";
MPRINT(MAKESVMFITSTATDS):   Label _NOBS_ = "Number of Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NSV_ = "Number of Support Vectors";
MPRINT(MAKESVMFITSTATDS):   Label _NTRAIN_ = "Number of Training Observations";
MPRINT(MAKESVMFITSTATDS):   Label _NYLEV_ = "Number of Target levels";
MPRINT(MAKESVMFITSTATDS):   Label _NormW_ = "L2 Norm of W";
MPRINT(MAKESVMFITSTATDS):   Label _OBJ_ = "Objective Function";
MPRINT(MAKESVMFITSTATDS):   Label _Radius_ = "Radius of Sphere";
MPRINT(MAKESVMFITSTATDS):   Label _RegC_ = "Regularization Parameter";
MPRINT(MAKESVMFITSTATDS):   Label _SVOM_ = "Support Vectors on Margin";
MPRINT(MAKESVMFITSTATDS):   Label _VCDim_ = "Estimated VC Dimension";
MPRINT(MAKESVMFITSTATDS):   if _TYPE_ ='_ACCTAB_' then delete;
MPRINT(MAKESVMFITSTATDS):   _BIAS_= _K_PAR_;
MPRINT(MAKESVMFITSTATDS):   DROP _K_PAR_ _K_PAR2_ _K_PAR3_ _L1_;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 2 observations read from the data set EMWS8.SVM2_SVMFITSTAT.
NOTE: The data set EMWS8.SVM2_SVMFITDS has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKESVMFITSTATDS):   proc transpose data =EMWS8.SVM2_SVMFITDS out =EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 1 observations read from the data set EMWS8.SVM2_SVMFITDS.
NOTE: The data set EMWS8.SVM2_SVMFITDS has 17 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKESVMFITSTATDS):   data EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   set EMWS8.SVM2_SVMFITDS;
MPRINT(MAKESVMFITSTATDS):   Label _LABEL_ = "Label";
MPRINT(MAKESVMFITSTATDS):   Label _NAME_ = "Name";
MPRINT(MAKESVMFITSTATDS):   Label COL1 = "Statistic";
MPRINT(MAKESVMFITSTATDS):   Rename COL1 = Train;
MPRINT(MAKESVMFITSTATDS):   if _NAME_ = '_ACCU_' then delete;
MPRINT(MAKESVMFITSTATDS):   run;

NOTE: There were 17 observations read from the data set EMWS8.SVM2_SVMFITDS.
NOTE: The data set EMWS8.SVM2_SVMFITDS has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAKEALPHADS):   data EMWS8.SVM2_OUTALPHA;
MPRINT(MAKEALPHADS):   set _sample_train;
MPRINT(MAKEALPHADS):   set _outtrain(keep=_ALPHA_ _BOUND_);
MPRINT(MAKEALPHADS):   keep _OBS_ _dataobs_ _ALPHA_ _BOUND_ DepVar;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set WORK._SAMPLE_TRAIN.
NOTE: There were 1000 observations read from the data set WORK._OUTTRAIN.
NOTE: The data set EMWS8.SVM2_OUTALPHA has 1000 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM2_TRAIN;
MPRINT(MAKEALPHADS):   length _OBS_ 8;
MPRINT(MAKEALPHADS):   set EMWS8.SVM2_TRAIN;
MPRINT(MAKEALPHADS):   _OBS_ = _N_;
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM2_TRAIN.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM2_TRAIN(Drop=_OBS_);
MPRINT(MAKEALPHADS):   merge EMWS8.SVM2_TRAIN EMWS8.SVM2_OUTALPHA(drop=DepVar);
MPRINT(MAKEALPHADS):   by _OBS_;
MPRINT(MAKEALPHADS):   if _ALPHA_ =. then _ALPHA_=0;
MPRINT(MAKEALPHADS):   if _BOUND_ ="" then _BOUND_="_LBC";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 2374 observations read from the data set EMWS8.SVM2_TRAIN.
NOTE: There were 1000 observations read from the data set EMWS8.SVM2_OUTALPHA.
NOTE: The data set EMWS8.SVM2_TRAIN has 2374 observations and 57 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEALPHADS):   data EMWS8.SVM2_OUTALPHA;
MPRINT(MAKEALPHADS):   set EMWS8.SVM2_OUTALPHA;
MPRINT(MAKEALPHADS):   if _ALPHA_ = 0 then delete;
MPRINT(MAKEALPHADS):   drop _OBS_;
MPRINT(MAKEALPHADS):   Label _dataobs_ = "Observation Index";
MPRINT(MAKEALPHADS):   Label _ALPHA_ = "Lagrange Mutiplier(alpha)";
MPRINT(MAKEALPHADS):   Label DepVar = "Target Variable";
MPRINT(MAKEALPHADS):   Label _BOUND_ = "Bound";
MPRINT(MAKEALPHADS):   run;

NOTE: There were 1000 observations read from the data set EMWS8.SVM2_OUTALPHA.
NOTE: The data set EMWS8.SVM2_OUTALPHA has 188 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib = work nolist;
MPRINT(TRAIN):   delete _outtrain _sample_train ;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._OUTTRAIN (memtype=DATA).
NOTE: Deleting WORK._SAMPLE_TRAIN (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS8.SVM2_OUTALPHA end=eof;
MPRINT(GETNOBS):   if eof then call symput("_svnobs", _N_);
MPRINT(GETNOBS):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      16:34   
NOTE: There were 188 observations read from the data set EMWS8.SVM2_OUTALPHA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(MAKETUNDATA):   data EMWS8.SVM2_TUNINGCRIT;
MPRINT(MAKETUNDATA):   set EMWS8.SVM2_TUNINGCRIT;
MPRINT(MAKETUNDATA):   Drop N;
MPRINT(MAKETUNDATA):   Label C = "Regularization Parameter";
MPRINT(MAKETUNDATA):   Label KF1 = "First Kernel Parameter";
MPRINT(MAKETUNDATA):   Label KF2 = "Second Kernel Parameter";
MPRINT(MAKETUNDATA):   Label NMisc = "Misclassification (N)";
MPRINT(MAKETUNDATA):   Label Perc = "Misclassification Rate (%)";
MPRINT(MAKETUNDATA):   Label ERROR = "Train Error";
MPRINT(MAKETUNDATA):   Label TstError = "Test Error";
MPRINT(MAKETUNDATA):   run;

NOTE: Variable KF1 is uninitialized.
NOTE: Variable KF2 is uninitialized.
NOTE: Variable TstError is uninitialized.
NOTE: There were 10 observations read from the data set EMWS8.SVM2_TUNINGCRIT.
NOTE: The data set EMWS8.SVM2_TUNINGCRIT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: SVM2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2582473    
2582474    *------------------------------------------------------------*;
2582475    * End TRAIN: SVM2;
2582476    *------------------------------------------------------------*;

2582477    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
2582478    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
2582479    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2582480    ;
MPRINT(EM_DIAGRAM):   ;
2582481    ;
MPRINT(EM_DIAGRAM):   ;
2582482    ;
MPRINT(EM_DIAGRAM):   ;
2582483    ;
MPRINT(EM_DIAGRAM):   ;
2582484    quit;
MPRINT(EM_DIAGRAM):   quit;
2582485    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2582486    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
2582487    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
2582488    /*; *"; *'; */
2582489    ;
MPRINT(EM_DIAGRAM):   ;
2582490    run;
MPRINT(EM_DIAGRAM):   run;
2582491    quit;
MPRINT(EM_DIAGRAM):   quit;
2582492    /* Reset EM Options */
2582493    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
2582494    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
2582495    goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
