*------------------------------------------------------------*
User:                Lukas Fahr
Date:                21. April 2016
Time:                18.53 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_S4Y5J
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_S4Y5J new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
775486     proc freq data=EMWS8.Neural5_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Neural5_VariableSet noprint;
775487     table ROLE*LEVEL/out=WORK.Neural5META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Neural5META;
775488     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 48 observations read from the data set EMWS8.NEURAL5_VARIABLESET.
NOTE: The data set WORK.NEURAL5META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
775489     proc print data=WORK.Neural5META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural5META label noobs;
775490     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
775491     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
775491   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
775491   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
775492     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
775493     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
775494     run;
 
NOTE: There were 6 observations read from the data set WORK.NEURAL5META.
NOTE: The PROCEDURE PRINT printed page 860.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
775495     title10;
MPRINT(EM_DIAGRAM):   title10;
775496     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.BINNING_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural5_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Neural5_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural5_DepVar_DD
out=EMWS8.Neural5_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
775543     data WORK.Neural5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural5_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
775544     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
775545     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
775545   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
775545   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
775546        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
775546   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
775546   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
775547     set EMWS8.NEURAL5_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.NEURAL5_DEPVAR_DM( where=(_TYPE_="TARGET"));
775548     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
775549     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
775550     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
775551     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
775552     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
775553     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
775554     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
775555     end;
MPRINT(EM_DIAGRAM):   end;
775556     output;
MPRINT(EM_DIAGRAM):   output;
775557     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL5_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL5_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775558     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
775559     proc print data=WORK.Neural5_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural5_EVENT noobs label;
775560     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
775561     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
775562     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
775563     run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL5_EVENT.
NOTE: The PROCEDURE PRINT printed page 861.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
775564     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
775565     proc print data = EMWS8.Neural5_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Neural5_DepVar_DM noobs label;
775566     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
775567     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
775568     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
775568   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
775568   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
775569     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
775570     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
775571     run;
 
NOTE: There were 7 observations read from the data set EMWS8.NEURAL5_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 862.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775572     title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural5: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M25J0MZ_;
MPRINT(EM_DIAGRAM):   set WORK.M25J0MZ_;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
775582     data WORK.M25J0MZ_;
MPRINT(EM_DIAGRAM):    data WORK.M25J0MZ_;
775583     set WORK.M25J0MZ_ end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M25J0MZ_ end=eof;
775584     output;
MPRINT(EM_DIAGRAM):   output;
775585     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
775586     NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
775587     ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
775588     LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
775589     TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
775590     output;
MPRINT(EM_DIAGRAM):   output;
775591     end;
MPRINT(EM_DIAGRAM):   end;
775592     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set WORK.M25J0MZ_.
NOTE: The data set WORK.M25J0MZ_ has 17 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.NEURAL5_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
775593     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
775594     * Neural5: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural5: Create decision matrix;
775595     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
775596     data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
775597       length   DepVar                           $  32
775598                COUNT                                8
775599                DATAPRIOR                            8
775600                TRAINPRIOR                           8
775601                DECPRIOR                             8
775602                DECISION1                            8
775603                DECISION2                            8
775604                ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
775605
775606       label    COUNT="Level Counts"
775607                DATAPRIOR="Data Proportions"
775608                TRAINPRIOR="Training Proportions"
775609                DECPRIOR="Decision Priors"
775610                DECISION1="1"
775611                DECISION2="0"
775612                ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
775613       format   COUNT 10.
775614                ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
775615     DepVar="1"; COUNT=359; DATAPRIOR=0.0643642072; TRAINPRIOR=0.15122156697556;
775615   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.0643642072;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
775616     output;
MPRINT(EM_DIAGRAM):   output;
775617     DepVar="0"; COUNT=2015; DATAPRIOR=0.9356357928; TRAINPRIOR=0.84877843302443;
775617   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.9356357928;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
775618     output;
MPRINT(EM_DIAGRAM):   output;
775619     ;
MPRINT(EM_DIAGRAM):   ;
775620     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775621     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
775622     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
775623     label DECISION1= '1';
775624     label DECISION2= '0';
775625     run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
775626     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
 
 
775627     data EM_Neural5;
MPRINT(EM_DIAGRAM):   data EM_Neural5;
775628     set EMWS8.BINNING_TRAIN(keep=
775629     DepVar GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt GRP_MntFishProducts
775630     GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases
775631     GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency
775632     Year_Birth );
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_TRAIN(keep= DepVar GRP_AcceptedCmp5 GRP_Frq GRP_Income
GRP_Mnt GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines
GRP_NumCatalogPurchases GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq
GRP_Recency Year_Birth );
775633     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: The data set WORK.EM_NEURAL5 has 2374 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural5: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775634     *------------------------------------------------------------* ;
775635     * Neural5: DMDBClass Macro ;
775636     *------------------------------------------------------------* ;
775637     %macro DMDBClass;
775638         DepVar(DESC) GRP_AcceptedCmp5(ASC) GRP_Frq(ASC) GRP_Income(ASC) GRP_Mnt(ASC)
775639        GRP_MntFishProducts(ASC) GRP_MntGoldProds(ASC) GRP_MntMeatProducts(ASC)
775640        GRP_MntWines(ASC) GRP_NumCatalogPurchases(ASC) GRP_NumDistPurchases(ASC)
775641        GRP_NumWebPurchases(ASC) GRP_RFMstat(ASC) GRP_RMntFrq(ASC) GRP_Recency(ASC)
775642     %mend DMDBClass;
775643     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775644     * Neural5: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural5: DMDBVar Macro ;
775645     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775646     %macro DMDBVar;
775647         Year_Birth
775648     %mend DMDBVar;
775649     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
775650     * Neural5: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural5: Create DMDB;
775651     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
775652     proc dmdb batch data=WORK.EM_Neural5
775653     dmdbcat=WORK.Neural5_DMDB
775654     maxlevel = 513
775655     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural5 dmdbcat=WORK.Neural5_DMDB maxlevel
= 513 ;
MPRINT(EM_DIAGRAM):   class
775656     class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC) GRP_AcceptedCmp5(ASC) GRP_Frq(ASC) GRP_Income(ASC)
GRP_Mnt(ASC) GRP_MntFishProducts(ASC) GRP_MntGoldProds(ASC) GRP_MntMeatProducts(ASC)
GRP_MntWines(ASC) GRP_NumCatalogPurchases(ASC) GRP_NumDistPurchases(ASC)
GRP_NumWebPurchases(ASC) GRP_RFMstat(ASC) GRP_RMntFrq(ASC) GRP_Recency(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
775657     var %DMDBVar;
MPRINT(DMDBVAR):   Year_Birth
MPRINT(EM_DIAGRAM):  ;
775658     target
775659     DepVar
775660     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
775661     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set WORK.EM_NEURAL5.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
775662     quit;
775663     *--- end code ---*;
 
775664     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
775665     * Neural5: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural5: Interval Input Variables Macro ;
775666     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775667     %macro INTINPUTS;
775668         Year_Birth
775669     %mend INTINPUTS;
775670     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775671     * Neural5: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural5: Binary Inputs Macro ;
775672     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775673     %macro BININPUTS;
775674
775675     %mend BININPUTS;
775676     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775677     * Neural5: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural5: Nominal Inputs Macro ;
775678     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775679     %macro NOMINPUTS;
775680         GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt GRP_MntFishProducts
775681        GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases
775682        GRP_NumDistPurchases GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency
775683     %mend NOMINPUTS;
775684     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775685     * Neural5: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural5: Ordinal Inputs Macro ;
775686     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
775687     %macro ORDINPUTS;
775688
775689     %mend ORDINPUTS;
775690     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
775691     * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
775692     ;
MPRINT(EM_DIAGRAM):   ;
775693     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
775694     proc neural data=EM_Neural5 dmdbcat=WORK.Neural5_DMDB
775695     validdata = EMWS8.BINNING_VALIDATE
775696     random=12345
775697     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural5 dmdbcat=WORK.Neural5_DMDB validdata =
EMWS8.BINNING_VALIDATE random=12345 ;
775698     nloptions
775699     ;
MPRINT(EM_DIAGRAM):   nloptions ;
775700     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
775701     netopts
775702     decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
775703     input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   Year_Birth
775704     ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
775705     input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   GRP_AcceptedCmp5 GRP_Frq GRP_Income GRP_Mnt GRP_MntFishProducts
GRP_MntGoldProds GRP_MntMeatProducts GRP_MntWines GRP_NumCatalogPurchases GRP_NumDistPurchases
GRP_NumWebPurchases GRP_RFMstat GRP_RMntFrq GRP_Recency
775706     ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
775707     target DepVar / level=NOMINAL id=DepVar
775708     bias
775709     ;
MPRINT(EM_DIAGRAM):   target DepVar / level=NOMINAL id=DepVar bias ;
775710     arch MLP
775711     Hidden=1
775712     ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=1 ;
775713     Prelim 5 preiter=10
775714     pretime=3600
775715     Outest=EMWS8.Neural5_PRELIM_OUTEST
775716     ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS8.Neural5_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set EMWS8.NEURAL5_PRELIM_OUTEST has 11 observations and 58 variables.
775717     save network=EMWS8.Neural5_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS8.Neural5_NETWORK.dm_neural;
NOTE: Entry EMWS8.NEURAL5_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS8.NEURAL5_NETWORK.DM_NEURAL has been closed.
775718     train Maxiter=50
775719     maxtime=14400
775720     Outest=EMWS8.Neural5_outest estiter=1
775721     Outfit=EMWS8.Neural5_OUTFIT
775722     ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS8.Neural5_outest estiter=1
Outfit=EMWS8.Neural5_OUTFIT ;
NOTE: Convergence criterion (FCONV=0.0001) satisfied.
NOTE: The data set EMWS8.NEURAL5_OUTEST has 70 observations and 58 variables.
NOTE: The data set EMWS8.NEURAL5_OUTFIT has 52 observations and 36 variables.
775723     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL5 has 2374 observations and 16 variables.
NOTE: The data set EMWS8.BINNING_VALIDATE has . observations and 59 variables.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           2.51 seconds
      cpu time            2.51 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 863-866.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           2.52 seconds
      cpu time            2.54 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
775724     quit;
 
775725     proc sort data=EMWS8.Neural5_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL"))
775725   ! out=fit_Neural5;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural5_OUTFIT(where=(_iter_ ne . and
_NAME_="OVERALL")) out=fit_Neural5;
775726     by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
775727     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.NEURAL5_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL5 has 26 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
775728     %GLOBAL ITER;
775729     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
775730     set fit_Neural5(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural5(obs=1);
775731     call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
775732     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL5.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775733     data EMWS8.Neural5_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_INITIAL;
775734     set EMWS8.Neural5_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_outest(where=(_ITER_ eq 8 and _OBJ_ ne .));
775735     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL5_OUTEST.
      WHERE (_ITER_=8) and (_OBJ_ not = .);
NOTE: The data set EMWS8.NEURAL5_INITIAL has 1 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775736     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
775737     * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
775738     ;
MPRINT(EM_DIAGRAM):   ;
775739     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
775740     proc neural data=EM_Neural5 dmdbcat=WORK.Neural5_DMDB
775741     validdata = EMWS8.BINNING_VALIDATE
775742     network = EMWS8.Neural5_NETWORK.dm_neural
775743     random=12345
775744     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural5 dmdbcat=WORK.Neural5_DMDB validdata =
EMWS8.BINNING_VALIDATE network = EMWS8.Neural5_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS8.NEURAL5_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS8.NEURAL5_NETWORK.DM_NEURAL has been closed.
775745     nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
775746     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
775747     initial inest=EMWS8.Neural5_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS8.Neural5_INITIAL;
NOTE: The data set EMWS8.NEURAL5_INITIAL has 1 observations and 58 variables.
775748     train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
775749     code file="C:\\predictive-models-project\Workspaces\EMWS8\Neural5\SCORECODE.sas"
775750     group=Neural5
775751     ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Neural5\SCORECODE.sas" group=Neural5 ;
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Neural5\SCORECODE.sas
      opened.
775752     ;
MPRINT(EM_DIAGRAM):   ;
775753     code
775753   ! file="C:\\predictive-models-project\Workspaces\EMWS8\Neural5\RESIDUALSCORECODE.sas"
775754     group=Neural5
775755     residual
775756     ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Neural5\RESIDUALSCORECODE.sas"
group=Neural5 residual ;
NOTE: External file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural5\RESIDUALSCORECODE.sas opened.
775757     ;
MPRINT(EM_DIAGRAM):   ;
775758     score data=EMWS8.BINNING_TRAIN out=_NULL_
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
775759     outfit=WORK.FIT1
775760     role=TRAIN
775761     outkey=EMWS8.Neural5_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS8.BINNING_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN
outkey=EMWS8.Neural5_OUTKEY;
NOTE: The data set EMWS8.NEURAL5_OUTKEY has 53 observations and 8 variables.
NOTE: The data set EMWS8.BINNING_TRAIN has . observations and 59 variables.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
775762     score data=EMWS8.BINNING_VALIDATE out=_NULL_
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
775763     outfit=WORK.FIT2
775764     role=VALID
775765     outkey=EMWS8.Neural5_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS8.BINNING_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID
outkey=EMWS8.Neural5_OUTKEY;
NOTE: The data set EMWS8.NEURAL5_OUTKEY has 53 observations and 8 variables.
NOTE: The data set EMWS8.BINNING_VALIDATE has . observations and 59 variables.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
775766     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL5 has 2374 observations and 16 variables.
NOTE: The data set EMWS8.BINNING_VALIDATE has . observations and 59 variables.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.21 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
775767     quit;
775768     data EMWS8.Neural5_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_OUTFIT;
775769     merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
775770     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS8.NEURAL5_OUTFIT has 2 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775771     data EMWS8.Neural5_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMESTIMATE;
775772     set EMWS8.Neural5_outest;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_outest;
775773     if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
775774     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 70 observations read from the data set EMWS8.NEURAL5_OUTEST.
NOTE: The data set EMWS8.NEURAL5_EMESTIMATE has 26 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775775     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
775776     delete EM_Neural5;
MPRINT(EM_DIAGRAM):   delete EM_Neural5;
775777     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL5 (memtype=DATA).
775778     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
775779     data EMWS8.Neural5_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
775780     set fit_Neural5;
MPRINT(EM_DIAGRAM):   set fit_Neural5;
775781     attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  ,
775781   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
775782     attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  ,
775782   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
775783     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK.FIT_NEURAL5.
NOTE: The data set EMWS8.NEURAL5_PLOTDS has 26 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
775784     proc sort data=EMWS8.Neural5_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural5_PLOTDS;
775785     by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
775786     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.NEURAL5_PLOTDS.
NOTE: The data set EMWS8.NEURAL5_PLOTDS has 26 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775787     data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_
775787   ! where=(_type_ eq "PARMS" and _iter_ eq 8) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_
_averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 8) );
775788     set EMWS8.Neural5_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMESTIMATE;
775789     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set EMWS8.NEURAL5_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 50 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775790     proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
775791     by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
775792     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 50 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
775793     proc transpose data=tempweight out=EMWS8.Neural5_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS8.Neural5_WEIGHTDS;
775794     by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
775795     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS8.NEURAL5_WEIGHTDS has 48 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775796     data EMWS8.Neural5_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_WEIGHTDS;
775797     set EMWS8.Neural5_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_WEIGHTDS;
775798     FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
775799     TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
775800     WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
775801     if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
775802     label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM
775802   ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO =
775802   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
775803        "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
775804     keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
775805     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 48 observations read from the data set EMWS8.NEURAL5_WEIGHTDS.
NOTE: The data set EMWS8.NEURAL5_WEIGHTDS has 43 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
775806     proc sort data=EMWS8.Neural5_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural5_WEIGHTDS nodupkey;
775807     by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
775808     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 43 observations read from the data set EMWS8.NEURAL5_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.NEURAL5_WEIGHTDS has 43 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0LF4I9A
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0LF4I9A new;
MPRINT(EM_DIAGRAM):   run;
775910     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
775911     set EMWS8.Neural5_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_OUTKEY;
775912     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
775913     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS8.NEURAL5_OUTKEY.
NOTE: The data set WORK.OUTKEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
775914     filename emflow
775914   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural5: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
775915     *------------------------------------------------------------*;
775916     * Neural5: Scoring DATA data;
775917     *------------------------------------------------------------*;
775918     data EMWS8.Neural5_TRAIN
775919     / view=EMWS8.Neural5_TRAIN
775920     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_TRAIN / view=EMWS8.Neural5_TRAIN ;
775921     set EMWS8.BINNING_TRAIN
775922     ;
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_TRAIN ;
775923     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMFLOWSCORE.sas.
775924    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
775925    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
775926    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
775927    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
775928    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
775929    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
775930    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
775931    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
775932    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
775933    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
775934    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
775935    +LENGTH _WARN_ $4
775936    +      F_DepVar  $ 12
775937    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
775938    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
775939    +
775940    +      label GRP_AcceptedCmp52 = 'Dummy: GRP_AcceptedCmp5=2' ;
MPRINT(EM_DIAGRAM):   label GRP_AcceptedCmp52 = 'Dummy: GRP_AcceptedCmp5=2' ;
775941    +
775942    +      label GRP_Frq2 = 'Dummy: GRP_Frq=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Frq2 = 'Dummy: GRP_Frq=2' ;
775943    +
775944    +      label GRP_Frq3 = 'Dummy: GRP_Frq=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Frq3 = 'Dummy: GRP_Frq=3' ;
775945    +
775946    +      label GRP_Frq4 = 'Dummy: GRP_Frq=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Frq4 = 'Dummy: GRP_Frq=4' ;
775947    +
775948    +      label GRP_Income2 = 'Dummy: GRP_Income=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Income2 = 'Dummy: GRP_Income=2' ;
775949    +
775950    +      label GRP_Income3 = 'Dummy: GRP_Income=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Income3 = 'Dummy: GRP_Income=3' ;
775951    +
775952    +      label GRP_Income4 = 'Dummy: GRP_Income=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Income4 = 'Dummy: GRP_Income=4' ;
775953    +
775954    +      label GRP_Mnt2 = 'Dummy: GRP_Mnt=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Mnt2 = 'Dummy: GRP_Mnt=2' ;
775955    +
775956    +      label GRP_Mnt3 = 'Dummy: GRP_Mnt=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Mnt3 = 'Dummy: GRP_Mnt=3' ;
775957    +
775958    +      label GRP_Mnt4 = 'Dummy: GRP_Mnt=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Mnt4 = 'Dummy: GRP_Mnt=4' ;
775959    +
775960    +      label GRP_MntFishProducts2 = 'Dummy: GRP_MntFishProducts=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntFishProducts2 = 'Dummy: GRP_MntFishProducts=2' ;
775961    +
775962    +      label GRP_MntFishProducts3 = 'Dummy: GRP_MntFishProducts=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntFishProducts3 = 'Dummy: GRP_MntFishProducts=3' ;
775963    +
775964    +      label GRP_MntFishProducts4 = 'Dummy: GRP_MntFishProducts=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntFishProducts4 = 'Dummy: GRP_MntFishProducts=4' ;
775965    +
775966    +      label GRP_MntGoldProds2 = 'Dummy: GRP_MntGoldProds=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntGoldProds2 = 'Dummy: GRP_MntGoldProds=2' ;
775967    +
775968    +      label GRP_MntGoldProds3 = 'Dummy: GRP_MntGoldProds=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntGoldProds3 = 'Dummy: GRP_MntGoldProds=3' ;
775969    +
775970    +      label GRP_MntGoldProds4 = 'Dummy: GRP_MntGoldProds=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntGoldProds4 = 'Dummy: GRP_MntGoldProds=4' ;
775971    +
775972    +      label GRP_MntMeatProducts2 = 'Dummy: GRP_MntMeatProducts=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntMeatProducts2 = 'Dummy: GRP_MntMeatProducts=2' ;
775973    +
775974    +      label GRP_MntMeatProducts3 = 'Dummy: GRP_MntMeatProducts=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntMeatProducts3 = 'Dummy: GRP_MntMeatProducts=3' ;
775975    +
775976    +      label GRP_MntMeatProducts4 = 'Dummy: GRP_MntMeatProducts=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntMeatProducts4 = 'Dummy: GRP_MntMeatProducts=4' ;
775977    +
775978    +      label GRP_MntWines2 = 'Dummy: GRP_MntWines=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntWines2 = 'Dummy: GRP_MntWines=2' ;
775979    +
775980    +      label GRP_MntWines3 = 'Dummy: GRP_MntWines=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntWines3 = 'Dummy: GRP_MntWines=3' ;
775981    +
775982    +      label GRP_MntWines4 = 'Dummy: GRP_MntWines=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntWines4 = 'Dummy: GRP_MntWines=4' ;
775983    +
775984    +      label GRP_NumCatalogPurchases3 = 'Dummy: GRP_NumCatalogPurchases=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NumCatalogPurchases3 = 'Dummy: GRP_NumCatalogPurchases=3' ;
775985    +
775986    +      label GRP_NumCatalogPurchases4 = 'Dummy: GRP_NumCatalogPurchases=4' ;
MPRINT(EM_DIAGRAM):   label GRP_NumCatalogPurchases4 = 'Dummy: GRP_NumCatalogPurchases=4' ;
775987    +
775988    +      label GRP_NumDistPurchases2 = 'Dummy: GRP_NumDistPurchases=2' ;
MPRINT(EM_DIAGRAM):   label GRP_NumDistPurchases2 = 'Dummy: GRP_NumDistPurchases=2' ;
775989    +
775990    +      label GRP_NumDistPurchases3 = 'Dummy: GRP_NumDistPurchases=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NumDistPurchases3 = 'Dummy: GRP_NumDistPurchases=3' ;
775991    +
775992    +      label GRP_NumDistPurchases4 = 'Dummy: GRP_NumDistPurchases=4' ;
MPRINT(EM_DIAGRAM):   label GRP_NumDistPurchases4 = 'Dummy: GRP_NumDistPurchases=4' ;
775993    +
775994    +      label GRP_NumWebPurchases2 = 'Dummy: GRP_NumWebPurchases=2' ;
MPRINT(EM_DIAGRAM):   label GRP_NumWebPurchases2 = 'Dummy: GRP_NumWebPurchases=2' ;
775995    +
775996    +      label GRP_NumWebPurchases3 = 'Dummy: GRP_NumWebPurchases=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NumWebPurchases3 = 'Dummy: GRP_NumWebPurchases=3' ;
775997    +
775998    +      label GRP_NumWebPurchases4 = 'Dummy: GRP_NumWebPurchases=4' ;
MPRINT(EM_DIAGRAM):   label GRP_NumWebPurchases4 = 'Dummy: GRP_NumWebPurchases=4' ;
775999    +
776000    +      label GRP_RFMstat2 = 'Dummy: GRP_RFMstat=2' ;
MPRINT(EM_DIAGRAM):   label GRP_RFMstat2 = 'Dummy: GRP_RFMstat=2' ;
776001    +
776002    +      label GRP_RFMstat3 = 'Dummy: GRP_RFMstat=3' ;
MPRINT(EM_DIAGRAM):   label GRP_RFMstat3 = 'Dummy: GRP_RFMstat=3' ;
776003    +
776004    +      label GRP_RFMstat4 = 'Dummy: GRP_RFMstat=4' ;
MPRINT(EM_DIAGRAM):   label GRP_RFMstat4 = 'Dummy: GRP_RFMstat=4' ;
776005    +
776006    +      label GRP_RMntFrq2 = 'Dummy: GRP_RMntFrq=2' ;
MPRINT(EM_DIAGRAM):   label GRP_RMntFrq2 = 'Dummy: GRP_RMntFrq=2' ;
776007    +
776008    +      label GRP_RMntFrq3 = 'Dummy: GRP_RMntFrq=3' ;
MPRINT(EM_DIAGRAM):   label GRP_RMntFrq3 = 'Dummy: GRP_RMntFrq=3' ;
776009    +
776010    +      label GRP_RMntFrq4 = 'Dummy: GRP_RMntFrq=4' ;
MPRINT(EM_DIAGRAM):   label GRP_RMntFrq4 = 'Dummy: GRP_RMntFrq=4' ;
776011    +
776012    +      label GRP_Recency2 = 'Dummy: GRP_Recency=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Recency2 = 'Dummy: GRP_Recency=2' ;
776013    +
776014    +      label GRP_Recency3 = 'Dummy: GRP_Recency=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Recency3 = 'Dummy: GRP_Recency=3' ;
776015    +
776016    +      label GRP_Recency4 = 'Dummy: GRP_Recency=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Recency4 = 'Dummy: GRP_Recency=4' ;
776017    +
776018    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
776019    +
776020    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
776021    +
776022    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
776023    +
776024    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
776025    +
776026    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
776027    +
776028    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
776029    +
776030    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
776031    +
776032    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
776033    +
776034    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
776035    +
776036    +*** Generate dummy variables for GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmp5 ;
776037    +drop GRP_AcceptedCmp52 ;
MPRINT(EM_DIAGRAM):   drop GRP_AcceptedCmp52 ;
776038    +if missing( GRP_AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmp5 ) then do;
776039    +   GRP_AcceptedCmp52 = .;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = .;
776040    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776041    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776042    +end;
MPRINT(EM_DIAGRAM):   end;
776043    +else do;
MPRINT(EM_DIAGRAM):   else do;
776044    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776045    +   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
776046    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776047    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
776048    +      GRP_AcceptedCmp52 = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = 1;
776049    +   end;
MPRINT(EM_DIAGRAM):   end;
776050    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776051    +      GRP_AcceptedCmp52 = -1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = -1;
776052    +   end;
MPRINT(EM_DIAGRAM):   end;
776053    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776054    +      GRP_AcceptedCmp52 = .;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = .;
776055    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776056    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776057    +   end;
MPRINT(EM_DIAGRAM):   end;
776058    +end;
MPRINT(EM_DIAGRAM):   end;
776059    +
776060    +*** Generate dummy variables for GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Frq ;
776061    +drop GRP_Frq2 GRP_Frq3 GRP_Frq4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Frq2 GRP_Frq3 GRP_Frq4 ;
776062    +if missing( GRP_Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Frq ) then do;
776063    +   GRP_Frq2 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = .;
776064    +   GRP_Frq3 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = .;
776065    +   GRP_Frq4 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = .;
776066    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776067    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776068    +end;
MPRINT(EM_DIAGRAM):   end;
776069    +else do;
MPRINT(EM_DIAGRAM):   else do;
776070    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776071    +   _dm12 = put( GRP_Frq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Frq , BEST12. );
776072    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776073    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
776074    +      GRP_Frq2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = -1;
776075    +      GRP_Frq3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = -1;
776076    +      GRP_Frq4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = -1;
776077    +   end;
MPRINT(EM_DIAGRAM):   end;
776078    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776079    +      GRP_Frq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = 0;
776080    +      GRP_Frq3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = 1;
776081    +      GRP_Frq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = 0;
776082    +   end;
MPRINT(EM_DIAGRAM):   end;
776083    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776084    +      GRP_Frq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = 0;
776085    +      GRP_Frq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = 0;
776086    +      GRP_Frq4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = 1;
776087    +   end;
MPRINT(EM_DIAGRAM):   end;
776088    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776089    +      GRP_Frq2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = 1;
776090    +      GRP_Frq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = 0;
776091    +      GRP_Frq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = 0;
776092    +   end;
MPRINT(EM_DIAGRAM):   end;
776093    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776094    +      GRP_Frq2 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = .;
776095    +      GRP_Frq3 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = .;
776096    +      GRP_Frq4 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = .;
776097    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776098    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776099    +   end;
MPRINT(EM_DIAGRAM):   end;
776100    +end;
MPRINT(EM_DIAGRAM):   end;
776101    +
776102    +*** Generate dummy variables for GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Income ;
776103    +drop GRP_Income2 GRP_Income3 GRP_Income4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Income2 GRP_Income3 GRP_Income4 ;
776104    +if missing( GRP_Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Income ) then do;
776105    +   GRP_Income2 = .;
MPRINT(EM_DIAGRAM):   GRP_Income2 = .;
776106    +   GRP_Income3 = .;
MPRINT(EM_DIAGRAM):   GRP_Income3 = .;
776107    +   GRP_Income4 = .;
MPRINT(EM_DIAGRAM):   GRP_Income4 = .;
776108    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776109    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776110    +end;
MPRINT(EM_DIAGRAM):   end;
776111    +else do;
MPRINT(EM_DIAGRAM):   else do;
776112    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776113    +   _dm12 = put( GRP_Income , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Income , BEST12. );
776114    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776115    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
776116    +      GRP_Income2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Income2 = -1;
776117    +      GRP_Income3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Income3 = -1;
776118    +      GRP_Income4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Income4 = -1;
776119    +   end;
MPRINT(EM_DIAGRAM):   end;
776120    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776121    +      GRP_Income2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income2 = 0;
776122    +      GRP_Income3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income3 = 0;
776123    +      GRP_Income4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Income4 = 1;
776124    +   end;
MPRINT(EM_DIAGRAM):   end;
776125    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776126    +      GRP_Income2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income2 = 0;
776127    +      GRP_Income3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Income3 = 1;
776128    +      GRP_Income4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income4 = 0;
776129    +   end;
MPRINT(EM_DIAGRAM):   end;
776130    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776131    +      GRP_Income2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Income2 = 1;
776132    +      GRP_Income3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income3 = 0;
776133    +      GRP_Income4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income4 = 0;
776134    +   end;
MPRINT(EM_DIAGRAM):   end;
776135    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776136    +      GRP_Income2 = .;
MPRINT(EM_DIAGRAM):   GRP_Income2 = .;
776137    +      GRP_Income3 = .;
MPRINT(EM_DIAGRAM):   GRP_Income3 = .;
776138    +      GRP_Income4 = .;
MPRINT(EM_DIAGRAM):   GRP_Income4 = .;
776139    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776140    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776141    +   end;
MPRINT(EM_DIAGRAM):   end;
776142    +end;
MPRINT(EM_DIAGRAM):   end;
776143    +
776144    +*** Generate dummy variables for GRP_Mnt ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Mnt ;
776145    +drop GRP_Mnt2 GRP_Mnt3 GRP_Mnt4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Mnt2 GRP_Mnt3 GRP_Mnt4 ;
776146    +if missing( GRP_Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Mnt ) then do;
776147    +   GRP_Mnt2 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = .;
776148    +   GRP_Mnt3 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = .;
776149    +   GRP_Mnt4 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = .;
776150    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776151    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776152    +end;
MPRINT(EM_DIAGRAM):   end;
776153    +else do;
MPRINT(EM_DIAGRAM):   else do;
776154    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776155    +   _dm12 = put( GRP_Mnt , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Mnt , BEST12. );
776156    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776157    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776158    +      GRP_Mnt2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = 0;
776159    +      GRP_Mnt3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = 1;
776160    +      GRP_Mnt4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = 0;
776161    +   end;
MPRINT(EM_DIAGRAM):   end;
776162    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776163    +      GRP_Mnt2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = -1;
776164    +      GRP_Mnt3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = -1;
776165    +      GRP_Mnt4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = -1;
776166    +   end;
MPRINT(EM_DIAGRAM):   end;
776167    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776168    +      GRP_Mnt2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = 0;
776169    +      GRP_Mnt3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = 0;
776170    +      GRP_Mnt4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = 1;
776171    +   end;
MPRINT(EM_DIAGRAM):   end;
776172    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776173    +      GRP_Mnt2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = 1;
776174    +      GRP_Mnt3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = 0;
776175    +      GRP_Mnt4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = 0;
776176    +   end;
MPRINT(EM_DIAGRAM):   end;
776177    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776178    +      GRP_Mnt2 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = .;
776179    +      GRP_Mnt3 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = .;
776180    +      GRP_Mnt4 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = .;
776181    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776182    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776183    +   end;
MPRINT(EM_DIAGRAM):   end;
776184    +end;
MPRINT(EM_DIAGRAM):   end;
776185    +
776186    +*** Generate dummy variables for GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntFishProducts ;
776187    +drop GRP_MntFishProducts2 GRP_MntFishProducts3 GRP_MntFishProducts4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntFishProducts2 GRP_MntFishProducts3 GRP_MntFishProducts4 ;
776188    +if missing( GRP_MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntFishProducts ) then do;
776189    +   GRP_MntFishProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = .;
776190    +   GRP_MntFishProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = .;
776191    +   GRP_MntFishProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = .;
776192    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776193    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776194    +end;
MPRINT(EM_DIAGRAM):   end;
776195    +else do;
MPRINT(EM_DIAGRAM):   else do;
776196    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776197    +   _dm12 = put( GRP_MntFishProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntFishProducts , BEST12. );
776198    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776199    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776200    +      GRP_MntFishProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = 0;
776201    +      GRP_MntFishProducts3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = 1;
776202    +      GRP_MntFishProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = 0;
776203    +   end;
MPRINT(EM_DIAGRAM):   end;
776204    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776205    +      GRP_MntFishProducts2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = -1;
776206    +      GRP_MntFishProducts3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = -1;
776207    +      GRP_MntFishProducts4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = -1;
776208    +   end;
MPRINT(EM_DIAGRAM):   end;
776209    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776210    +      GRP_MntFishProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = 0;
776211    +      GRP_MntFishProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = 0;
776212    +      GRP_MntFishProducts4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = 1;
776213    +   end;
MPRINT(EM_DIAGRAM):   end;
776214    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776215    +      GRP_MntFishProducts2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = 1;
776216    +      GRP_MntFishProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = 0;
776217    +      GRP_MntFishProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = 0;
776218    +   end;
MPRINT(EM_DIAGRAM):   end;
776219    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776220    +      GRP_MntFishProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = .;
776221    +      GRP_MntFishProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = .;
776222    +      GRP_MntFishProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = .;
776223    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776224    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776225    +   end;
MPRINT(EM_DIAGRAM):   end;
776226    +end;
MPRINT(EM_DIAGRAM):   end;
776227    +
776228    +*** Generate dummy variables for GRP_MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntGoldProds ;
776229    +drop GRP_MntGoldProds2 GRP_MntGoldProds3 GRP_MntGoldProds4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntGoldProds2 GRP_MntGoldProds3 GRP_MntGoldProds4 ;
776230    +if missing( GRP_MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntGoldProds ) then do;
776231    +   GRP_MntGoldProds2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = .;
776232    +   GRP_MntGoldProds3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = .;
776233    +   GRP_MntGoldProds4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = .;
776234    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776235    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776236    +end;
MPRINT(EM_DIAGRAM):   end;
776237    +else do;
MPRINT(EM_DIAGRAM):   else do;
776238    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776239    +   _dm12 = put( GRP_MntGoldProds , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntGoldProds , BEST12. );
776240    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776241    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776242    +      GRP_MntGoldProds2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = 0;
776243    +      GRP_MntGoldProds3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = 1;
776244    +      GRP_MntGoldProds4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = 0;
776245    +   end;
MPRINT(EM_DIAGRAM):   end;
776246    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776247    +      GRP_MntGoldProds2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = 0;
776248    +      GRP_MntGoldProds3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = 0;
776249    +      GRP_MntGoldProds4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = 1;
776250    +   end;
MPRINT(EM_DIAGRAM):   end;
776251    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776252    +      GRP_MntGoldProds2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = -1;
776253    +      GRP_MntGoldProds3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = -1;
776254    +      GRP_MntGoldProds4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = -1;
776255    +   end;
MPRINT(EM_DIAGRAM):   end;
776256    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776257    +      GRP_MntGoldProds2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = 1;
776258    +      GRP_MntGoldProds3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = 0;
776259    +      GRP_MntGoldProds4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = 0;
776260    +   end;
MPRINT(EM_DIAGRAM):   end;
776261    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776262    +      GRP_MntGoldProds2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = .;
776263    +      GRP_MntGoldProds3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = .;
776264    +      GRP_MntGoldProds4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = .;
776265    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776266    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776267    +   end;
MPRINT(EM_DIAGRAM):   end;
776268    +end;
MPRINT(EM_DIAGRAM):   end;
776269    +
776270    +*** Generate dummy variables for GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntMeatProducts ;
776271    +drop GRP_MntMeatProducts2 GRP_MntMeatProducts3 GRP_MntMeatProducts4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntMeatProducts2 GRP_MntMeatProducts3 GRP_MntMeatProducts4 ;
776272    +if missing( GRP_MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntMeatProducts ) then do;
776273    +   GRP_MntMeatProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = .;
776274    +   GRP_MntMeatProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = .;
776275    +   GRP_MntMeatProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = .;
776276    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776277    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776278    +end;
MPRINT(EM_DIAGRAM):   end;
776279    +else do;
MPRINT(EM_DIAGRAM):   else do;
776280    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776281    +   _dm12 = put( GRP_MntMeatProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntMeatProducts , BEST12. );
776282    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776283    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776284    +      GRP_MntMeatProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = 0;
776285    +      GRP_MntMeatProducts3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = 1;
776286    +      GRP_MntMeatProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = 0;
776287    +   end;
MPRINT(EM_DIAGRAM):   end;
776288    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776289    +      GRP_MntMeatProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = 0;
776290    +      GRP_MntMeatProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = 0;
776291    +      GRP_MntMeatProducts4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = 1;
776292    +   end;
MPRINT(EM_DIAGRAM):   end;
776293    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776294    +      GRP_MntMeatProducts2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = -1;
776295    +      GRP_MntMeatProducts3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = -1;
776296    +      GRP_MntMeatProducts4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = -1;
776297    +   end;
MPRINT(EM_DIAGRAM):   end;
776298    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776299    +      GRP_MntMeatProducts2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = 1;
776300    +      GRP_MntMeatProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = 0;
776301    +      GRP_MntMeatProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = 0;
776302    +   end;
MPRINT(EM_DIAGRAM):   end;
776303    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776304    +      GRP_MntMeatProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = .;
776305    +      GRP_MntMeatProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = .;
776306    +      GRP_MntMeatProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = .;
776307    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776308    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776309    +   end;
MPRINT(EM_DIAGRAM):   end;
776310    +end;
MPRINT(EM_DIAGRAM):   end;
776311    +
776312    +*** Generate dummy variables for GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntWines ;
776313    +drop GRP_MntWines2 GRP_MntWines3 GRP_MntWines4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntWines2 GRP_MntWines3 GRP_MntWines4 ;
776314    +if missing( GRP_MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntWines ) then do;
776315    +   GRP_MntWines2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = .;
776316    +   GRP_MntWines3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = .;
776317    +   GRP_MntWines4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = .;
776318    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776319    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776320    +end;
MPRINT(EM_DIAGRAM):   end;
776321    +else do;
MPRINT(EM_DIAGRAM):   else do;
776322    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776323    +   _dm12 = put( GRP_MntWines , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntWines , BEST12. );
776324    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776325    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776326    +      GRP_MntWines2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = 0;
776327    +      GRP_MntWines3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = 1;
776328    +      GRP_MntWines4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = 0;
776329    +   end;
MPRINT(EM_DIAGRAM):   end;
776330    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776331    +      GRP_MntWines2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = -1;
776332    +      GRP_MntWines3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = -1;
776333    +      GRP_MntWines4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = -1;
776334    +   end;
MPRINT(EM_DIAGRAM):   end;
776335    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776336    +      GRP_MntWines2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = 0;
776337    +      GRP_MntWines3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = 0;
776338    +      GRP_MntWines4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = 1;
776339    +   end;
MPRINT(EM_DIAGRAM):   end;
776340    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776341    +      GRP_MntWines2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = 1;
776342    +      GRP_MntWines3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = 0;
776343    +      GRP_MntWines4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = 0;
776344    +   end;
MPRINT(EM_DIAGRAM):   end;
776345    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776346    +      GRP_MntWines2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = .;
776347    +      GRP_MntWines3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = .;
776348    +      GRP_MntWines4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = .;
776349    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776350    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776351    +   end;
MPRINT(EM_DIAGRAM):   end;
776352    +end;
MPRINT(EM_DIAGRAM):   end;
776353    +
776354    +*** Generate dummy variables for GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumCatalogPurchases ;
776355    +drop GRP_NumCatalogPurchases3 GRP_NumCatalogPurchases4 ;
MPRINT(EM_DIAGRAM):   drop GRP_NumCatalogPurchases3 GRP_NumCatalogPurchases4 ;
776356    +if missing( GRP_NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumCatalogPurchases ) then do;
776357    +   GRP_NumCatalogPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = .;
776358    +   GRP_NumCatalogPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = .;
776359    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776360    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776361    +end;
MPRINT(EM_DIAGRAM):   end;
776362    +else do;
MPRINT(EM_DIAGRAM):   else do;
776363    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776364    +   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
776365    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776366    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776367    +      GRP_NumCatalogPurchases3 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = 1;
776368    +      GRP_NumCatalogPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = 0;
776369    +   end;
MPRINT(EM_DIAGRAM):   end;
776370    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776371    +      GRP_NumCatalogPurchases3 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = -1;
776372    +      GRP_NumCatalogPurchases4 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = -1;
776373    +   end;
MPRINT(EM_DIAGRAM):   end;
776374    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776375    +      GRP_NumCatalogPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = 0;
776376    +      GRP_NumCatalogPurchases4 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = 1;
776377    +   end;
MPRINT(EM_DIAGRAM):   end;
776378    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776379    +      GRP_NumCatalogPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = .;
776380    +      GRP_NumCatalogPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = .;
776381    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776382    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776383    +   end;
MPRINT(EM_DIAGRAM):   end;
776384    +end;
MPRINT(EM_DIAGRAM):   end;
776385    +
776386    +*** Generate dummy variables for GRP_NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumDistPurchases ;
776387    +drop GRP_NumDistPurchases2 GRP_NumDistPurchases3 GRP_NumDistPurchases4 ;
MPRINT(EM_DIAGRAM):   drop GRP_NumDistPurchases2 GRP_NumDistPurchases3 GRP_NumDistPurchases4 ;
776388    +if missing( GRP_NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumDistPurchases ) then do;
776389    +   GRP_NumDistPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = .;
776390    +   GRP_NumDistPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = .;
776391    +   GRP_NumDistPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = .;
776392    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776393    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776394    +end;
MPRINT(EM_DIAGRAM):   end;
776395    +else do;
MPRINT(EM_DIAGRAM):   else do;
776396    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776397    +   _dm12 = put( GRP_NumDistPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumDistPurchases , BEST12. );
776398    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776399    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
776400    +      GRP_NumDistPurchases2 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = -1;
776401    +      GRP_NumDistPurchases3 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = -1;
776402    +      GRP_NumDistPurchases4 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = -1;
776403    +   end;
MPRINT(EM_DIAGRAM):   end;
776404    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776405    +      GRP_NumDistPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = 0;
776406    +      GRP_NumDistPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = 0;
776407    +      GRP_NumDistPurchases4 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = 1;
776408    +   end;
MPRINT(EM_DIAGRAM):   end;
776409    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776410    +      GRP_NumDistPurchases2 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = 1;
776411    +      GRP_NumDistPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = 0;
776412    +      GRP_NumDistPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = 0;
776413    +   end;
MPRINT(EM_DIAGRAM):   end;
776414    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776415    +      GRP_NumDistPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = 0;
776416    +      GRP_NumDistPurchases3 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = 1;
776417    +      GRP_NumDistPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = 0;
776418    +   end;
MPRINT(EM_DIAGRAM):   end;
776419    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776420    +      GRP_NumDistPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = .;
776421    +      GRP_NumDistPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = .;
776422    +      GRP_NumDistPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = .;
776423    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776424    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776425    +   end;
MPRINT(EM_DIAGRAM):   end;
776426    +end;
MPRINT(EM_DIAGRAM):   end;
776427    +
776428    +*** Generate dummy variables for GRP_NumWebPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumWebPurchases ;
776429    +drop GRP_NumWebPurchases2 GRP_NumWebPurchases3 GRP_NumWebPurchases4 ;
MPRINT(EM_DIAGRAM):   drop GRP_NumWebPurchases2 GRP_NumWebPurchases3 GRP_NumWebPurchases4 ;
776430    +if missing( GRP_NumWebPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumWebPurchases ) then do;
776431    +   GRP_NumWebPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = .;
776432    +   GRP_NumWebPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = .;
776433    +   GRP_NumWebPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = .;
776434    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776435    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776436    +end;
MPRINT(EM_DIAGRAM):   end;
776437    +else do;
MPRINT(EM_DIAGRAM):   else do;
776438    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776439    +   _dm12 = put( GRP_NumWebPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumWebPurchases , BEST12. );
776440    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776441    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776442    +      GRP_NumWebPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = 0;
776443    +      GRP_NumWebPurchases3 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = 1;
776444    +      GRP_NumWebPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = 0;
776445    +   end;
MPRINT(EM_DIAGRAM):   end;
776446    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776447    +      GRP_NumWebPurchases2 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = -1;
776448    +      GRP_NumWebPurchases3 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = -1;
776449    +      GRP_NumWebPurchases4 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = -1;
776450    +   end;
MPRINT(EM_DIAGRAM):   end;
776451    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776452    +      GRP_NumWebPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = 0;
776453    +      GRP_NumWebPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = 0;
776454    +      GRP_NumWebPurchases4 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = 1;
776455    +   end;
MPRINT(EM_DIAGRAM):   end;
776456    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776457    +      GRP_NumWebPurchases2 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = 1;
776458    +      GRP_NumWebPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = 0;
776459    +      GRP_NumWebPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = 0;
776460    +   end;
MPRINT(EM_DIAGRAM):   end;
776461    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776462    +      GRP_NumWebPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = .;
776463    +      GRP_NumWebPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = .;
776464    +      GRP_NumWebPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = .;
776465    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776466    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776467    +   end;
MPRINT(EM_DIAGRAM):   end;
776468    +end;
MPRINT(EM_DIAGRAM):   end;
776469    +
776470    +*** Generate dummy variables for GRP_RFMstat ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RFMstat ;
776471    +drop GRP_RFMstat2 GRP_RFMstat3 GRP_RFMstat4 ;
MPRINT(EM_DIAGRAM):   drop GRP_RFMstat2 GRP_RFMstat3 GRP_RFMstat4 ;
776472    +if missing( GRP_RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RFMstat ) then do;
776473    +   GRP_RFMstat2 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = .;
776474    +   GRP_RFMstat3 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = .;
776475    +   GRP_RFMstat4 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = .;
776476    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776477    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776478    +end;
MPRINT(EM_DIAGRAM):   end;
776479    +else do;
MPRINT(EM_DIAGRAM):   else do;
776480    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776481    +   _dm12 = put( GRP_RFMstat , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RFMstat , BEST12. );
776482    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776483    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
776484    +      GRP_RFMstat2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = 0;
776485    +      GRP_RFMstat3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = 0;
776486    +      GRP_RFMstat4 = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = 1;
776487    +   end;
MPRINT(EM_DIAGRAM):   end;
776488    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776489    +      GRP_RFMstat2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = 0;
776490    +      GRP_RFMstat3 = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = 1;
776491    +      GRP_RFMstat4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = 0;
776492    +   end;
MPRINT(EM_DIAGRAM):   end;
776493    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776494    +      GRP_RFMstat2 = -1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = -1;
776495    +      GRP_RFMstat3 = -1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = -1;
776496    +      GRP_RFMstat4 = -1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = -1;
776497    +   end;
MPRINT(EM_DIAGRAM):   end;
776498    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776499    +      GRP_RFMstat2 = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = 1;
776500    +      GRP_RFMstat3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = 0;
776501    +      GRP_RFMstat4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = 0;
776502    +   end;
MPRINT(EM_DIAGRAM):   end;
776503    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776504    +      GRP_RFMstat2 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = .;
776505    +      GRP_RFMstat3 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = .;
776506    +      GRP_RFMstat4 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = .;
776507    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776508    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776509    +   end;
MPRINT(EM_DIAGRAM):   end;
776510    +end;
MPRINT(EM_DIAGRAM):   end;
776511    +
776512    +*** Generate dummy variables for GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RMntFrq ;
776513    +drop GRP_RMntFrq2 GRP_RMntFrq3 GRP_RMntFrq4 ;
MPRINT(EM_DIAGRAM):   drop GRP_RMntFrq2 GRP_RMntFrq3 GRP_RMntFrq4 ;
776514    +if missing( GRP_RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RMntFrq ) then do;
776515    +   GRP_RMntFrq2 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = .;
776516    +   GRP_RMntFrq3 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = .;
776517    +   GRP_RMntFrq4 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = .;
776518    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776519    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776520    +end;
MPRINT(EM_DIAGRAM):   end;
776521    +else do;
MPRINT(EM_DIAGRAM):   else do;
776522    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776523    +   _dm12 = put( GRP_RMntFrq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RMntFrq , BEST12. );
776524    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776525    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776526    +      GRP_RMntFrq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = 0;
776527    +      GRP_RMntFrq3 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = 1;
776528    +      GRP_RMntFrq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = 0;
776529    +   end;
MPRINT(EM_DIAGRAM):   end;
776530    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776531    +      GRP_RMntFrq2 = -1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = -1;
776532    +      GRP_RMntFrq3 = -1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = -1;
776533    +      GRP_RMntFrq4 = -1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = -1;
776534    +   end;
MPRINT(EM_DIAGRAM):   end;
776535    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776536    +      GRP_RMntFrq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = 0;
776537    +      GRP_RMntFrq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = 0;
776538    +      GRP_RMntFrq4 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = 1;
776539    +   end;
MPRINT(EM_DIAGRAM):   end;
776540    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776541    +      GRP_RMntFrq2 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = 1;
776542    +      GRP_RMntFrq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = 0;
776543    +      GRP_RMntFrq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = 0;
776544    +   end;
MPRINT(EM_DIAGRAM):   end;
776545    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776546    +      GRP_RMntFrq2 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = .;
776547    +      GRP_RMntFrq3 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = .;
776548    +      GRP_RMntFrq4 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = .;
776549    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776550    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776551    +   end;
MPRINT(EM_DIAGRAM):   end;
776552    +end;
MPRINT(EM_DIAGRAM):   end;
776553    +
776554    +*** Generate dummy variables for GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Recency ;
776555    +drop GRP_Recency2 GRP_Recency3 GRP_Recency4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Recency2 GRP_Recency3 GRP_Recency4 ;
776556    +if missing( GRP_Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Recency ) then do;
776557    +   GRP_Recency2 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = .;
776558    +   GRP_Recency3 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = .;
776559    +   GRP_Recency4 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = .;
776560    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776561    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776562    +end;
MPRINT(EM_DIAGRAM):   end;
776563    +else do;
MPRINT(EM_DIAGRAM):   else do;
776564    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776565    +   _dm12 = put( GRP_Recency , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Recency , BEST12. );
776566    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776567    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
776568    +      GRP_Recency2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = -1;
776569    +      GRP_Recency3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = -1;
776570    +      GRP_Recency4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = -1;
776571    +   end;
MPRINT(EM_DIAGRAM):   end;
776572    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776573    +      GRP_Recency2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = 0;
776574    +      GRP_Recency3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = 0;
776575    +      GRP_Recency4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = 1;
776576    +   end;
MPRINT(EM_DIAGRAM):   end;
776577    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776578    +      GRP_Recency2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = 0;
776579    +      GRP_Recency3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = 1;
776580    +      GRP_Recency4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = 0;
776581    +   end;
MPRINT(EM_DIAGRAM):   end;
776582    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776583    +      GRP_Recency2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = 1;
776584    +      GRP_Recency3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = 0;
776585    +      GRP_Recency4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = 0;
776586    +   end;
MPRINT(EM_DIAGRAM):   end;
776587    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776588    +      GRP_Recency2 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = .;
776589    +      GRP_Recency3 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = .;
776590    +      GRP_Recency4 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = .;
776591    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776592    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776593    +   end;
MPRINT(EM_DIAGRAM):   end;
776594    +end;
MPRINT(EM_DIAGRAM):   end;
776595    +
776596    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776597    +*** Checking missing input Interval
776598    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
776599    +
776600    +IF NMISS(
776601    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Year_Birth ) THEN DO;
776602    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
776603    +
776604    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776605    +END;
MPRINT(EM_DIAGRAM):   END;
776606    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776607    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
776608    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776609    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
776610    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
776611    +END;
MPRINT(EM_DIAGRAM):   END;
776612    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
776613    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
776614    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
776615    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
776616    +END;
MPRINT(EM_DIAGRAM):   END;
776617    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776618    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
776619    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776620    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776621    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
776622    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776623    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
776624    +   H11  =     -0.0249129843743 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.0249129843743 * S_Year_Birth ;
776625    +   H11  = H11  +     0.12725616992691 * GRP_AcceptedCmp52
776626    +          +    -0.26945372540537 * GRP_Frq2  +    -0.02807540638783 * GRP_Frq3
776627    +          +     0.09639274822287 * GRP_Frq4  +    -0.12205097466688 *
776628    +        GRP_Income2  +    -0.11081339105891 * GRP_Income3
776629    +          +     0.11708983682544 * GRP_Income4  +     0.08213996698973 *
776630    +        GRP_Mnt2  +     0.04755736117379 * GRP_Mnt3  +    -0.04386204709619 *
776631    +        GRP_Mnt4  +    -0.08900126769754 * GRP_MntFishProducts2
776632    +          +    -0.01139329678589 * GRP_MntFishProducts3
776633    +          +     0.01080020635436 * GRP_MntFishProducts4
776634    +          +     0.03276801167604 * GRP_MntGoldProds2
776635    +          +     0.00684607145566 * GRP_MntGoldProds3
776636    +          +     0.00079341373044 * GRP_MntGoldProds4
776637    +          +     0.17029271800291 * GRP_MntMeatProducts2
776638    +          +     0.03003718456752 * GRP_MntMeatProducts3
776639    +          +    -0.06730384984954 * GRP_MntMeatProducts4
776640    +          +    -0.12738653189788 * GRP_MntWines2  +    -0.05870095101029 *
776641    +        GRP_MntWines3  +     0.07315089663035 * GRP_MntWines4
776642    +          +      0.1241456955943 * GRP_NumCatalogPurchases3
776643    +          +    -0.00574720008996 * GRP_NumCatalogPurchases4
776644    +          +     0.32158219504705 * GRP_NumDistPurchases2
776645    +          +      0.0000285685731 * GRP_NumDistPurchases3
776646    +          +    -0.05920668594102 * GRP_NumDistPurchases4
776647    +          +    -0.02186462965936 * GRP_NumWebPurchases2
776648    +          +    -0.01225939075207 * GRP_NumWebPurchases3
776649    +          +     0.00325978185796 * GRP_NumWebPurchases4
776650    +          +     0.08029400003818 * GRP_RFMstat2  +     0.01517552489443 *
776651    +        GRP_RFMstat3  +    -0.02560149548828 * GRP_RFMstat4
776652    +          +    -0.06091086754789 * GRP_RMntFrq2  +    -0.03720166216597 *
776653    +        GRP_RMntFrq3  +     0.09749105098352 * GRP_RMntFrq4
776654    +          +    -0.21514477253983 * GRP_Recency2  +    -0.05786796429946 *
776655    +        GRP_Recency3  +     0.06630148536635 * GRP_Recency4 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.12725616992691 * GRP_AcceptedCmp52 + -0.26945372540537 *
GRP_Frq2 + -0.02807540638783 * GRP_Frq3 + 0.09639274822287 * GRP_Frq4 + -0.12205097466688 *
GRP_Income2 + -0.11081339105891 * GRP_Income3 + 0.11708983682544 * GRP_Income4 +
0.08213996698973 * GRP_Mnt2 + 0.04755736117379 * GRP_Mnt3 + -0.04386204709619 * GRP_Mnt4 +
-0.08900126769754 * GRP_MntFishProducts2 + -0.01139329678589 * GRP_MntFishProducts3 +
0.01080020635436 * GRP_MntFishProducts4 + 0.03276801167604 * GRP_MntGoldProds2 +
0.00684607145566 * GRP_MntGoldProds3 + 0.00079341373044 * GRP_MntGoldProds4 + 0.17029271800291
* GRP_MntMeatProducts2 + 0.03003718456752 * GRP_MntMeatProducts3 + -0.06730384984954 *
GRP_MntMeatProducts4 + -0.12738653189788 * GRP_MntWines2 + -0.05870095101029 * GRP_MntWines3 +
0.07315089663035 * GRP_MntWines4 + 0.1241456955943 * GRP_NumCatalogPurchases3 +
-0.00574720008996 * GRP_NumCatalogPurchases4 + 0.32158219504705 * GRP_NumDistPurchases2 +
0.0000285685731 * GRP_NumDistPurchases3 + -0.05920668594102 * GRP_NumDistPurchases4 +
-0.02186462965936 * GRP_NumWebPurchases2 + -0.01225939075207 * GRP_NumWebPurchases3 +
0.00325978185796 * GRP_NumWebPurchases4 + 0.08029400003818 * GRP_RFMstat2 + 0.01517552489443 *
GRP_RFMstat3 + -0.02560149548828 * GRP_RFMstat4 + -0.06091086754789 * GRP_RMntFrq2 +
-0.03720166216597 * GRP_RMntFrq3 + 0.09749105098352 * GRP_RMntFrq4 + -0.21514477253983 *
GRP_Recency2 + -0.05786796429946 * GRP_Recency3 + 0.06630148536635 * GRP_Recency4 ;
776656    +   H11  =     -0.2495737283502 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.2495737283502 + H11 ;
776657    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
776658    +END;
MPRINT(EM_DIAGRAM):   END;
776659    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
776660    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
776661    +END;
MPRINT(EM_DIAGRAM):   END;
776662    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776663    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
776664    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776665    +
776666    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
776667    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
776668    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
776669    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
776670    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
776671    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776672    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
776673    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
776674    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
776675    +end;
MPRINT(EM_DIAGRAM):   end;
776676    +else do;
MPRINT(EM_DIAGRAM):   else do;
776677    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
776678    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
776679    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
776680    +   end;
MPRINT(EM_DIAGRAM):   end;
776681    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
776682    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
776683    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
776684    +   end;
MPRINT(EM_DIAGRAM):   end;
776685    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776686    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
776687    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
776688    +   end;
MPRINT(EM_DIAGRAM):   end;
776689    +end;
MPRINT(EM_DIAGRAM):   end;
776690    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
776691    +   P_DepVar1  =    -9.21655554427872 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -9.21655554427872 * H11 ;
776692    +   P_DepVar1  =    -3.98078306870422 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.98078306870422 + P_DepVar1 ;
776693    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
776694    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
776695    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
776696    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
776697    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
776698    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
776699    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
776700    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
776701    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
776702    +END;
MPRINT(EM_DIAGRAM):   END;
776703    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
776704    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
776705    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
776706    +END;
MPRINT(EM_DIAGRAM):   END;
776707    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
776708    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
776709    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
776710    +END;
MPRINT(EM_DIAGRAM):   END;
776711    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
776712    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
776713    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
776714    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
776715    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
776716    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
776717    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
776718    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776719    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
776720    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
776721    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
776722    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
776723    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
776724    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
776725    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
776726    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
776727    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
776728    +END;
MPRINT(EM_DIAGRAM):   END;
776729    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
776730    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
776731    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
776732    +drop
776733    +H11
776734    +;
MPRINT(EM_DIAGRAM):   drop H11 ;
776735    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
776736     run;
 
NOTE: DATA STEP view saved on file EMWS8.NEURAL5_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
776737     quit;
776738     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
776739     filename emflow
776739   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural5: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
776740     *------------------------------------------------------------*;
776741     * Neural5: Scoring VALIDATE data;
776742     *------------------------------------------------------------*;
776743     data EMWS8.Neural5_VALIDATE
776744     / view=EMWS8.Neural5_VALIDATE
776745     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_VALIDATE / view=EMWS8.Neural5_VALIDATE ;
776746     set EMWS8.BINNING_VALIDATE
776747     ;
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_VALIDATE ;
776748     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMFLOWSCORE.sas.
776749    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
776750    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
776751    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
776752    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
776753    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
776754    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
776755    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
776756    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
776757    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
776758    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
776759    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
776760    +LENGTH _WARN_ $4
776761    +      F_DepVar  $ 12
776762    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
776763    +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
776764    +
776765    +      label GRP_AcceptedCmp52 = 'Dummy: GRP_AcceptedCmp5=2' ;
MPRINT(EM_DIAGRAM):   label GRP_AcceptedCmp52 = 'Dummy: GRP_AcceptedCmp5=2' ;
776766    +
776767    +      label GRP_Frq2 = 'Dummy: GRP_Frq=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Frq2 = 'Dummy: GRP_Frq=2' ;
776768    +
776769    +      label GRP_Frq3 = 'Dummy: GRP_Frq=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Frq3 = 'Dummy: GRP_Frq=3' ;
776770    +
776771    +      label GRP_Frq4 = 'Dummy: GRP_Frq=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Frq4 = 'Dummy: GRP_Frq=4' ;
776772    +
776773    +      label GRP_Income2 = 'Dummy: GRP_Income=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Income2 = 'Dummy: GRP_Income=2' ;
776774    +
776775    +      label GRP_Income3 = 'Dummy: GRP_Income=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Income3 = 'Dummy: GRP_Income=3' ;
776776    +
776777    +      label GRP_Income4 = 'Dummy: GRP_Income=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Income4 = 'Dummy: GRP_Income=4' ;
776778    +
776779    +      label GRP_Mnt2 = 'Dummy: GRP_Mnt=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Mnt2 = 'Dummy: GRP_Mnt=2' ;
776780    +
776781    +      label GRP_Mnt3 = 'Dummy: GRP_Mnt=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Mnt3 = 'Dummy: GRP_Mnt=3' ;
776782    +
776783    +      label GRP_Mnt4 = 'Dummy: GRP_Mnt=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Mnt4 = 'Dummy: GRP_Mnt=4' ;
776784    +
776785    +      label GRP_MntFishProducts2 = 'Dummy: GRP_MntFishProducts=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntFishProducts2 = 'Dummy: GRP_MntFishProducts=2' ;
776786    +
776787    +      label GRP_MntFishProducts3 = 'Dummy: GRP_MntFishProducts=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntFishProducts3 = 'Dummy: GRP_MntFishProducts=3' ;
776788    +
776789    +      label GRP_MntFishProducts4 = 'Dummy: GRP_MntFishProducts=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntFishProducts4 = 'Dummy: GRP_MntFishProducts=4' ;
776790    +
776791    +      label GRP_MntGoldProds2 = 'Dummy: GRP_MntGoldProds=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntGoldProds2 = 'Dummy: GRP_MntGoldProds=2' ;
776792    +
776793    +      label GRP_MntGoldProds3 = 'Dummy: GRP_MntGoldProds=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntGoldProds3 = 'Dummy: GRP_MntGoldProds=3' ;
776794    +
776795    +      label GRP_MntGoldProds4 = 'Dummy: GRP_MntGoldProds=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntGoldProds4 = 'Dummy: GRP_MntGoldProds=4' ;
776796    +
776797    +      label GRP_MntMeatProducts2 = 'Dummy: GRP_MntMeatProducts=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntMeatProducts2 = 'Dummy: GRP_MntMeatProducts=2' ;
776798    +
776799    +      label GRP_MntMeatProducts3 = 'Dummy: GRP_MntMeatProducts=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntMeatProducts3 = 'Dummy: GRP_MntMeatProducts=3' ;
776800    +
776801    +      label GRP_MntMeatProducts4 = 'Dummy: GRP_MntMeatProducts=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntMeatProducts4 = 'Dummy: GRP_MntMeatProducts=4' ;
776802    +
776803    +      label GRP_MntWines2 = 'Dummy: GRP_MntWines=2' ;
MPRINT(EM_DIAGRAM):   label GRP_MntWines2 = 'Dummy: GRP_MntWines=2' ;
776804    +
776805    +      label GRP_MntWines3 = 'Dummy: GRP_MntWines=3' ;
MPRINT(EM_DIAGRAM):   label GRP_MntWines3 = 'Dummy: GRP_MntWines=3' ;
776806    +
776807    +      label GRP_MntWines4 = 'Dummy: GRP_MntWines=4' ;
MPRINT(EM_DIAGRAM):   label GRP_MntWines4 = 'Dummy: GRP_MntWines=4' ;
776808    +
776809    +      label GRP_NumCatalogPurchases3 = 'Dummy: GRP_NumCatalogPurchases=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NumCatalogPurchases3 = 'Dummy: GRP_NumCatalogPurchases=3' ;
776810    +
776811    +      label GRP_NumCatalogPurchases4 = 'Dummy: GRP_NumCatalogPurchases=4' ;
MPRINT(EM_DIAGRAM):   label GRP_NumCatalogPurchases4 = 'Dummy: GRP_NumCatalogPurchases=4' ;
776812    +
776813    +      label GRP_NumDistPurchases2 = 'Dummy: GRP_NumDistPurchases=2' ;
MPRINT(EM_DIAGRAM):   label GRP_NumDistPurchases2 = 'Dummy: GRP_NumDistPurchases=2' ;
776814    +
776815    +      label GRP_NumDistPurchases3 = 'Dummy: GRP_NumDistPurchases=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NumDistPurchases3 = 'Dummy: GRP_NumDistPurchases=3' ;
776816    +
776817    +      label GRP_NumDistPurchases4 = 'Dummy: GRP_NumDistPurchases=4' ;
MPRINT(EM_DIAGRAM):   label GRP_NumDistPurchases4 = 'Dummy: GRP_NumDistPurchases=4' ;
776818    +
776819    +      label GRP_NumWebPurchases2 = 'Dummy: GRP_NumWebPurchases=2' ;
MPRINT(EM_DIAGRAM):   label GRP_NumWebPurchases2 = 'Dummy: GRP_NumWebPurchases=2' ;
776820    +
776821    +      label GRP_NumWebPurchases3 = 'Dummy: GRP_NumWebPurchases=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NumWebPurchases3 = 'Dummy: GRP_NumWebPurchases=3' ;
776822    +
776823    +      label GRP_NumWebPurchases4 = 'Dummy: GRP_NumWebPurchases=4' ;
MPRINT(EM_DIAGRAM):   label GRP_NumWebPurchases4 = 'Dummy: GRP_NumWebPurchases=4' ;
776824    +
776825    +      label GRP_RFMstat2 = 'Dummy: GRP_RFMstat=2' ;
MPRINT(EM_DIAGRAM):   label GRP_RFMstat2 = 'Dummy: GRP_RFMstat=2' ;
776826    +
776827    +      label GRP_RFMstat3 = 'Dummy: GRP_RFMstat=3' ;
MPRINT(EM_DIAGRAM):   label GRP_RFMstat3 = 'Dummy: GRP_RFMstat=3' ;
776828    +
776829    +      label GRP_RFMstat4 = 'Dummy: GRP_RFMstat=4' ;
MPRINT(EM_DIAGRAM):   label GRP_RFMstat4 = 'Dummy: GRP_RFMstat=4' ;
776830    +
776831    +      label GRP_RMntFrq2 = 'Dummy: GRP_RMntFrq=2' ;
MPRINT(EM_DIAGRAM):   label GRP_RMntFrq2 = 'Dummy: GRP_RMntFrq=2' ;
776832    +
776833    +      label GRP_RMntFrq3 = 'Dummy: GRP_RMntFrq=3' ;
MPRINT(EM_DIAGRAM):   label GRP_RMntFrq3 = 'Dummy: GRP_RMntFrq=3' ;
776834    +
776835    +      label GRP_RMntFrq4 = 'Dummy: GRP_RMntFrq=4' ;
MPRINT(EM_DIAGRAM):   label GRP_RMntFrq4 = 'Dummy: GRP_RMntFrq=4' ;
776836    +
776837    +      label GRP_Recency2 = 'Dummy: GRP_Recency=2' ;
MPRINT(EM_DIAGRAM):   label GRP_Recency2 = 'Dummy: GRP_Recency=2' ;
776838    +
776839    +      label GRP_Recency3 = 'Dummy: GRP_Recency=3' ;
MPRINT(EM_DIAGRAM):   label GRP_Recency3 = 'Dummy: GRP_Recency=3' ;
776840    +
776841    +      label GRP_Recency4 = 'Dummy: GRP_Recency=4' ;
MPRINT(EM_DIAGRAM):   label GRP_Recency4 = 'Dummy: GRP_Recency=4' ;
776842    +
776843    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
776844    +
776845    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
776846    +
776847    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
776848    +
776849    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
776850    +
776851    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
776852    +
776853    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
776854    +
776855    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
776856    +
776857    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
776858    +
776859    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
776860    +
776861    +*** Generate dummy variables for GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmp5 ;
776862    +drop GRP_AcceptedCmp52 ;
MPRINT(EM_DIAGRAM):   drop GRP_AcceptedCmp52 ;
776863    +if missing( GRP_AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmp5 ) then do;
776864    +   GRP_AcceptedCmp52 = .;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = .;
776865    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776866    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776867    +end;
MPRINT(EM_DIAGRAM):   end;
776868    +else do;
MPRINT(EM_DIAGRAM):   else do;
776869    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776870    +   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
776871    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776872    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
776873    +      GRP_AcceptedCmp52 = 1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = 1;
776874    +   end;
MPRINT(EM_DIAGRAM):   end;
776875    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776876    +      GRP_AcceptedCmp52 = -1;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = -1;
776877    +   end;
MPRINT(EM_DIAGRAM):   end;
776878    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776879    +      GRP_AcceptedCmp52 = .;
MPRINT(EM_DIAGRAM):   GRP_AcceptedCmp52 = .;
776880    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776881    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776882    +   end;
MPRINT(EM_DIAGRAM):   end;
776883    +end;
MPRINT(EM_DIAGRAM):   end;
776884    +
776885    +*** Generate dummy variables for GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Frq ;
776886    +drop GRP_Frq2 GRP_Frq3 GRP_Frq4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Frq2 GRP_Frq3 GRP_Frq4 ;
776887    +if missing( GRP_Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Frq ) then do;
776888    +   GRP_Frq2 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = .;
776889    +   GRP_Frq3 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = .;
776890    +   GRP_Frq4 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = .;
776891    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776892    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776893    +end;
MPRINT(EM_DIAGRAM):   end;
776894    +else do;
MPRINT(EM_DIAGRAM):   else do;
776895    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776896    +   _dm12 = put( GRP_Frq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Frq , BEST12. );
776897    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776898    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
776899    +      GRP_Frq2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = -1;
776900    +      GRP_Frq3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = -1;
776901    +      GRP_Frq4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = -1;
776902    +   end;
MPRINT(EM_DIAGRAM):   end;
776903    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776904    +      GRP_Frq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = 0;
776905    +      GRP_Frq3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = 1;
776906    +      GRP_Frq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = 0;
776907    +   end;
MPRINT(EM_DIAGRAM):   end;
776908    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776909    +      GRP_Frq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = 0;
776910    +      GRP_Frq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = 0;
776911    +      GRP_Frq4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = 1;
776912    +   end;
MPRINT(EM_DIAGRAM):   end;
776913    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776914    +      GRP_Frq2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = 1;
776915    +      GRP_Frq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = 0;
776916    +      GRP_Frq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = 0;
776917    +   end;
MPRINT(EM_DIAGRAM):   end;
776918    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776919    +      GRP_Frq2 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq2 = .;
776920    +      GRP_Frq3 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq3 = .;
776921    +      GRP_Frq4 = .;
MPRINT(EM_DIAGRAM):   GRP_Frq4 = .;
776922    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776923    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776924    +   end;
MPRINT(EM_DIAGRAM):   end;
776925    +end;
MPRINT(EM_DIAGRAM):   end;
776926    +
776927    +*** Generate dummy variables for GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Income ;
776928    +drop GRP_Income2 GRP_Income3 GRP_Income4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Income2 GRP_Income3 GRP_Income4 ;
776929    +if missing( GRP_Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Income ) then do;
776930    +   GRP_Income2 = .;
MPRINT(EM_DIAGRAM):   GRP_Income2 = .;
776931    +   GRP_Income3 = .;
MPRINT(EM_DIAGRAM):   GRP_Income3 = .;
776932    +   GRP_Income4 = .;
MPRINT(EM_DIAGRAM):   GRP_Income4 = .;
776933    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776934    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776935    +end;
MPRINT(EM_DIAGRAM):   end;
776936    +else do;
MPRINT(EM_DIAGRAM):   else do;
776937    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776938    +   _dm12 = put( GRP_Income , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Income , BEST12. );
776939    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776940    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
776941    +      GRP_Income2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Income2 = -1;
776942    +      GRP_Income3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Income3 = -1;
776943    +      GRP_Income4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Income4 = -1;
776944    +   end;
MPRINT(EM_DIAGRAM):   end;
776945    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776946    +      GRP_Income2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income2 = 0;
776947    +      GRP_Income3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income3 = 0;
776948    +      GRP_Income4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Income4 = 1;
776949    +   end;
MPRINT(EM_DIAGRAM):   end;
776950    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
776951    +      GRP_Income2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income2 = 0;
776952    +      GRP_Income3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Income3 = 1;
776953    +      GRP_Income4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income4 = 0;
776954    +   end;
MPRINT(EM_DIAGRAM):   end;
776955    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776956    +      GRP_Income2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Income2 = 1;
776957    +      GRP_Income3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income3 = 0;
776958    +      GRP_Income4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Income4 = 0;
776959    +   end;
MPRINT(EM_DIAGRAM):   end;
776960    +   else do;
MPRINT(EM_DIAGRAM):   else do;
776961    +      GRP_Income2 = .;
MPRINT(EM_DIAGRAM):   GRP_Income2 = .;
776962    +      GRP_Income3 = .;
MPRINT(EM_DIAGRAM):   GRP_Income3 = .;
776963    +      GRP_Income4 = .;
MPRINT(EM_DIAGRAM):   GRP_Income4 = .;
776964    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
776965    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776966    +   end;
MPRINT(EM_DIAGRAM):   end;
776967    +end;
MPRINT(EM_DIAGRAM):   end;
776968    +
776969    +*** Generate dummy variables for GRP_Mnt ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Mnt ;
776970    +drop GRP_Mnt2 GRP_Mnt3 GRP_Mnt4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Mnt2 GRP_Mnt3 GRP_Mnt4 ;
776971    +if missing( GRP_Mnt ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Mnt ) then do;
776972    +   GRP_Mnt2 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = .;
776973    +   GRP_Mnt3 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = .;
776974    +   GRP_Mnt4 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = .;
776975    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
776976    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
776977    +end;
MPRINT(EM_DIAGRAM):   end;
776978    +else do;
MPRINT(EM_DIAGRAM):   else do;
776979    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
776980    +   _dm12 = put( GRP_Mnt , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Mnt , BEST12. );
776981    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
776982    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
776983    +      GRP_Mnt2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = 0;
776984    +      GRP_Mnt3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = 1;
776985    +      GRP_Mnt4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = 0;
776986    +   end;
MPRINT(EM_DIAGRAM):   end;
776987    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
776988    +      GRP_Mnt2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = -1;
776989    +      GRP_Mnt3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = -1;
776990    +      GRP_Mnt4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = -1;
776991    +   end;
MPRINT(EM_DIAGRAM):   end;
776992    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
776993    +      GRP_Mnt2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = 0;
776994    +      GRP_Mnt3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = 0;
776995    +      GRP_Mnt4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = 1;
776996    +   end;
MPRINT(EM_DIAGRAM):   end;
776997    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
776998    +      GRP_Mnt2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = 1;
776999    +      GRP_Mnt3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = 0;
777000    +      GRP_Mnt4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = 0;
777001    +   end;
MPRINT(EM_DIAGRAM):   end;
777002    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777003    +      GRP_Mnt2 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt2 = .;
777004    +      GRP_Mnt3 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt3 = .;
777005    +      GRP_Mnt4 = .;
MPRINT(EM_DIAGRAM):   GRP_Mnt4 = .;
777006    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777007    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777008    +   end;
MPRINT(EM_DIAGRAM):   end;
777009    +end;
MPRINT(EM_DIAGRAM):   end;
777010    +
777011    +*** Generate dummy variables for GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntFishProducts ;
777012    +drop GRP_MntFishProducts2 GRP_MntFishProducts3 GRP_MntFishProducts4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntFishProducts2 GRP_MntFishProducts3 GRP_MntFishProducts4 ;
777013    +if missing( GRP_MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntFishProducts ) then do;
777014    +   GRP_MntFishProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = .;
777015    +   GRP_MntFishProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = .;
777016    +   GRP_MntFishProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = .;
777017    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777018    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777019    +end;
MPRINT(EM_DIAGRAM):   end;
777020    +else do;
MPRINT(EM_DIAGRAM):   else do;
777021    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777022    +   _dm12 = put( GRP_MntFishProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntFishProducts , BEST12. );
777023    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777024    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
777025    +      GRP_MntFishProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = 0;
777026    +      GRP_MntFishProducts3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = 1;
777027    +      GRP_MntFishProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = 0;
777028    +   end;
MPRINT(EM_DIAGRAM):   end;
777029    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777030    +      GRP_MntFishProducts2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = -1;
777031    +      GRP_MntFishProducts3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = -1;
777032    +      GRP_MntFishProducts4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = -1;
777033    +   end;
MPRINT(EM_DIAGRAM):   end;
777034    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777035    +      GRP_MntFishProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = 0;
777036    +      GRP_MntFishProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = 0;
777037    +      GRP_MntFishProducts4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = 1;
777038    +   end;
MPRINT(EM_DIAGRAM):   end;
777039    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777040    +      GRP_MntFishProducts2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = 1;
777041    +      GRP_MntFishProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = 0;
777042    +      GRP_MntFishProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = 0;
777043    +   end;
MPRINT(EM_DIAGRAM):   end;
777044    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777045    +      GRP_MntFishProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts2 = .;
777046    +      GRP_MntFishProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts3 = .;
777047    +      GRP_MntFishProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntFishProducts4 = .;
777048    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777049    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777050    +   end;
MPRINT(EM_DIAGRAM):   end;
777051    +end;
MPRINT(EM_DIAGRAM):   end;
777052    +
777053    +*** Generate dummy variables for GRP_MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntGoldProds ;
777054    +drop GRP_MntGoldProds2 GRP_MntGoldProds3 GRP_MntGoldProds4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntGoldProds2 GRP_MntGoldProds3 GRP_MntGoldProds4 ;
777055    +if missing( GRP_MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntGoldProds ) then do;
777056    +   GRP_MntGoldProds2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = .;
777057    +   GRP_MntGoldProds3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = .;
777058    +   GRP_MntGoldProds4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = .;
777059    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777060    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777061    +end;
MPRINT(EM_DIAGRAM):   end;
777062    +else do;
MPRINT(EM_DIAGRAM):   else do;
777063    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777064    +   _dm12 = put( GRP_MntGoldProds , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntGoldProds , BEST12. );
777065    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777066    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
777067    +      GRP_MntGoldProds2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = 0;
777068    +      GRP_MntGoldProds3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = 1;
777069    +      GRP_MntGoldProds4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = 0;
777070    +   end;
MPRINT(EM_DIAGRAM):   end;
777071    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777072    +      GRP_MntGoldProds2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = 0;
777073    +      GRP_MntGoldProds3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = 0;
777074    +      GRP_MntGoldProds4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = 1;
777075    +   end;
MPRINT(EM_DIAGRAM):   end;
777076    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777077    +      GRP_MntGoldProds2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = -1;
777078    +      GRP_MntGoldProds3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = -1;
777079    +      GRP_MntGoldProds4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = -1;
777080    +   end;
MPRINT(EM_DIAGRAM):   end;
777081    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777082    +      GRP_MntGoldProds2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = 1;
777083    +      GRP_MntGoldProds3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = 0;
777084    +      GRP_MntGoldProds4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = 0;
777085    +   end;
MPRINT(EM_DIAGRAM):   end;
777086    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777087    +      GRP_MntGoldProds2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds2 = .;
777088    +      GRP_MntGoldProds3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds3 = .;
777089    +      GRP_MntGoldProds4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntGoldProds4 = .;
777090    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777091    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777092    +   end;
MPRINT(EM_DIAGRAM):   end;
777093    +end;
MPRINT(EM_DIAGRAM):   end;
777094    +
777095    +*** Generate dummy variables for GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntMeatProducts ;
777096    +drop GRP_MntMeatProducts2 GRP_MntMeatProducts3 GRP_MntMeatProducts4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntMeatProducts2 GRP_MntMeatProducts3 GRP_MntMeatProducts4 ;
777097    +if missing( GRP_MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntMeatProducts ) then do;
777098    +   GRP_MntMeatProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = .;
777099    +   GRP_MntMeatProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = .;
777100    +   GRP_MntMeatProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = .;
777101    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777102    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777103    +end;
MPRINT(EM_DIAGRAM):   end;
777104    +else do;
MPRINT(EM_DIAGRAM):   else do;
777105    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777106    +   _dm12 = put( GRP_MntMeatProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntMeatProducts , BEST12. );
777107    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777108    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
777109    +      GRP_MntMeatProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = 0;
777110    +      GRP_MntMeatProducts3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = 1;
777111    +      GRP_MntMeatProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = 0;
777112    +   end;
MPRINT(EM_DIAGRAM):   end;
777113    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777114    +      GRP_MntMeatProducts2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = 0;
777115    +      GRP_MntMeatProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = 0;
777116    +      GRP_MntMeatProducts4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = 1;
777117    +   end;
MPRINT(EM_DIAGRAM):   end;
777118    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777119    +      GRP_MntMeatProducts2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = -1;
777120    +      GRP_MntMeatProducts3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = -1;
777121    +      GRP_MntMeatProducts4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = -1;
777122    +   end;
MPRINT(EM_DIAGRAM):   end;
777123    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777124    +      GRP_MntMeatProducts2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = 1;
777125    +      GRP_MntMeatProducts3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = 0;
777126    +      GRP_MntMeatProducts4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = 0;
777127    +   end;
MPRINT(EM_DIAGRAM):   end;
777128    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777129    +      GRP_MntMeatProducts2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts2 = .;
777130    +      GRP_MntMeatProducts3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts3 = .;
777131    +      GRP_MntMeatProducts4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntMeatProducts4 = .;
777132    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777133    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777134    +   end;
MPRINT(EM_DIAGRAM):   end;
777135    +end;
MPRINT(EM_DIAGRAM):   end;
777136    +
777137    +*** Generate dummy variables for GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntWines ;
777138    +drop GRP_MntWines2 GRP_MntWines3 GRP_MntWines4 ;
MPRINT(EM_DIAGRAM):   drop GRP_MntWines2 GRP_MntWines3 GRP_MntWines4 ;
777139    +if missing( GRP_MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntWines ) then do;
777140    +   GRP_MntWines2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = .;
777141    +   GRP_MntWines3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = .;
777142    +   GRP_MntWines4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = .;
777143    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777144    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777145    +end;
MPRINT(EM_DIAGRAM):   end;
777146    +else do;
MPRINT(EM_DIAGRAM):   else do;
777147    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777148    +   _dm12 = put( GRP_MntWines , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntWines , BEST12. );
777149    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777150    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
777151    +      GRP_MntWines2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = 0;
777152    +      GRP_MntWines3 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = 1;
777153    +      GRP_MntWines4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = 0;
777154    +   end;
MPRINT(EM_DIAGRAM):   end;
777155    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777156    +      GRP_MntWines2 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = -1;
777157    +      GRP_MntWines3 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = -1;
777158    +      GRP_MntWines4 = -1;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = -1;
777159    +   end;
MPRINT(EM_DIAGRAM):   end;
777160    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777161    +      GRP_MntWines2 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = 0;
777162    +      GRP_MntWines3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = 0;
777163    +      GRP_MntWines4 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = 1;
777164    +   end;
MPRINT(EM_DIAGRAM):   end;
777165    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777166    +      GRP_MntWines2 = 1;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = 1;
777167    +      GRP_MntWines3 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = 0;
777168    +      GRP_MntWines4 = 0;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = 0;
777169    +   end;
MPRINT(EM_DIAGRAM):   end;
777170    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777171    +      GRP_MntWines2 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines2 = .;
777172    +      GRP_MntWines3 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines3 = .;
777173    +      GRP_MntWines4 = .;
MPRINT(EM_DIAGRAM):   GRP_MntWines4 = .;
777174    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777175    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777176    +   end;
MPRINT(EM_DIAGRAM):   end;
777177    +end;
MPRINT(EM_DIAGRAM):   end;
777178    +
777179    +*** Generate dummy variables for GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumCatalogPurchases ;
777180    +drop GRP_NumCatalogPurchases3 GRP_NumCatalogPurchases4 ;
MPRINT(EM_DIAGRAM):   drop GRP_NumCatalogPurchases3 GRP_NumCatalogPurchases4 ;
777181    +if missing( GRP_NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumCatalogPurchases ) then do;
777182    +   GRP_NumCatalogPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = .;
777183    +   GRP_NumCatalogPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = .;
777184    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777185    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777186    +end;
MPRINT(EM_DIAGRAM):   end;
777187    +else do;
MPRINT(EM_DIAGRAM):   else do;
777188    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777189    +   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
777190    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777191    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
777192    +      GRP_NumCatalogPurchases3 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = 1;
777193    +      GRP_NumCatalogPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = 0;
777194    +   end;
MPRINT(EM_DIAGRAM):   end;
777195    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777196    +      GRP_NumCatalogPurchases3 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = -1;
777197    +      GRP_NumCatalogPurchases4 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = -1;
777198    +   end;
MPRINT(EM_DIAGRAM):   end;
777199    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777200    +      GRP_NumCatalogPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = 0;
777201    +      GRP_NumCatalogPurchases4 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = 1;
777202    +   end;
MPRINT(EM_DIAGRAM):   end;
777203    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777204    +      GRP_NumCatalogPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases3 = .;
777205    +      GRP_NumCatalogPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumCatalogPurchases4 = .;
777206    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777207    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777208    +   end;
MPRINT(EM_DIAGRAM):   end;
777209    +end;
MPRINT(EM_DIAGRAM):   end;
777210    +
777211    +*** Generate dummy variables for GRP_NumDistPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumDistPurchases ;
777212    +drop GRP_NumDistPurchases2 GRP_NumDistPurchases3 GRP_NumDistPurchases4 ;
MPRINT(EM_DIAGRAM):   drop GRP_NumDistPurchases2 GRP_NumDistPurchases3 GRP_NumDistPurchases4 ;
777213    +if missing( GRP_NumDistPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumDistPurchases ) then do;
777214    +   GRP_NumDistPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = .;
777215    +   GRP_NumDistPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = .;
777216    +   GRP_NumDistPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = .;
777217    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777218    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777219    +end;
MPRINT(EM_DIAGRAM):   end;
777220    +else do;
MPRINT(EM_DIAGRAM):   else do;
777221    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777222    +   _dm12 = put( GRP_NumDistPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumDistPurchases , BEST12. );
777223    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777224    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
777225    +      GRP_NumDistPurchases2 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = -1;
777226    +      GRP_NumDistPurchases3 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = -1;
777227    +      GRP_NumDistPurchases4 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = -1;
777228    +   end;
MPRINT(EM_DIAGRAM):   end;
777229    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777230    +      GRP_NumDistPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = 0;
777231    +      GRP_NumDistPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = 0;
777232    +      GRP_NumDistPurchases4 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = 1;
777233    +   end;
MPRINT(EM_DIAGRAM):   end;
777234    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777235    +      GRP_NumDistPurchases2 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = 1;
777236    +      GRP_NumDistPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = 0;
777237    +      GRP_NumDistPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = 0;
777238    +   end;
MPRINT(EM_DIAGRAM):   end;
777239    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
777240    +      GRP_NumDistPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = 0;
777241    +      GRP_NumDistPurchases3 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = 1;
777242    +      GRP_NumDistPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = 0;
777243    +   end;
MPRINT(EM_DIAGRAM):   end;
777244    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777245    +      GRP_NumDistPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases2 = .;
777246    +      GRP_NumDistPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases3 = .;
777247    +      GRP_NumDistPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumDistPurchases4 = .;
777248    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777249    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777250    +   end;
MPRINT(EM_DIAGRAM):   end;
777251    +end;
MPRINT(EM_DIAGRAM):   end;
777252    +
777253    +*** Generate dummy variables for GRP_NumWebPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumWebPurchases ;
777254    +drop GRP_NumWebPurchases2 GRP_NumWebPurchases3 GRP_NumWebPurchases4 ;
MPRINT(EM_DIAGRAM):   drop GRP_NumWebPurchases2 GRP_NumWebPurchases3 GRP_NumWebPurchases4 ;
777255    +if missing( GRP_NumWebPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumWebPurchases ) then do;
777256    +   GRP_NumWebPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = .;
777257    +   GRP_NumWebPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = .;
777258    +   GRP_NumWebPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = .;
777259    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777260    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777261    +end;
MPRINT(EM_DIAGRAM):   end;
777262    +else do;
MPRINT(EM_DIAGRAM):   else do;
777263    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777264    +   _dm12 = put( GRP_NumWebPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumWebPurchases , BEST12. );
777265    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777266    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
777267    +      GRP_NumWebPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = 0;
777268    +      GRP_NumWebPurchases3 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = 1;
777269    +      GRP_NumWebPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = 0;
777270    +   end;
MPRINT(EM_DIAGRAM):   end;
777271    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777272    +      GRP_NumWebPurchases2 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = -1;
777273    +      GRP_NumWebPurchases3 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = -1;
777274    +      GRP_NumWebPurchases4 = -1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = -1;
777275    +   end;
MPRINT(EM_DIAGRAM):   end;
777276    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777277    +      GRP_NumWebPurchases2 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = 0;
777278    +      GRP_NumWebPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = 0;
777279    +      GRP_NumWebPurchases4 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = 1;
777280    +   end;
MPRINT(EM_DIAGRAM):   end;
777281    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777282    +      GRP_NumWebPurchases2 = 1;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = 1;
777283    +      GRP_NumWebPurchases3 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = 0;
777284    +      GRP_NumWebPurchases4 = 0;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = 0;
777285    +   end;
MPRINT(EM_DIAGRAM):   end;
777286    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777287    +      GRP_NumWebPurchases2 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases2 = .;
777288    +      GRP_NumWebPurchases3 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases3 = .;
777289    +      GRP_NumWebPurchases4 = .;
MPRINT(EM_DIAGRAM):   GRP_NumWebPurchases4 = .;
777290    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777291    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777292    +   end;
MPRINT(EM_DIAGRAM):   end;
777293    +end;
MPRINT(EM_DIAGRAM):   end;
777294    +
777295    +*** Generate dummy variables for GRP_RFMstat ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RFMstat ;
777296    +drop GRP_RFMstat2 GRP_RFMstat3 GRP_RFMstat4 ;
MPRINT(EM_DIAGRAM):   drop GRP_RFMstat2 GRP_RFMstat3 GRP_RFMstat4 ;
777297    +if missing( GRP_RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RFMstat ) then do;
777298    +   GRP_RFMstat2 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = .;
777299    +   GRP_RFMstat3 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = .;
777300    +   GRP_RFMstat4 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = .;
777301    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777302    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777303    +end;
MPRINT(EM_DIAGRAM):   end;
777304    +else do;
MPRINT(EM_DIAGRAM):   else do;
777305    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777306    +   _dm12 = put( GRP_RFMstat , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RFMstat , BEST12. );
777307    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777308    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
777309    +      GRP_RFMstat2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = 0;
777310    +      GRP_RFMstat3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = 0;
777311    +      GRP_RFMstat4 = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = 1;
777312    +   end;
MPRINT(EM_DIAGRAM):   end;
777313    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
777314    +      GRP_RFMstat2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = 0;
777315    +      GRP_RFMstat3 = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = 1;
777316    +      GRP_RFMstat4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = 0;
777317    +   end;
MPRINT(EM_DIAGRAM):   end;
777318    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777319    +      GRP_RFMstat2 = -1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = -1;
777320    +      GRP_RFMstat3 = -1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = -1;
777321    +      GRP_RFMstat4 = -1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = -1;
777322    +   end;
MPRINT(EM_DIAGRAM):   end;
777323    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777324    +      GRP_RFMstat2 = 1;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = 1;
777325    +      GRP_RFMstat3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = 0;
777326    +      GRP_RFMstat4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = 0;
777327    +   end;
MPRINT(EM_DIAGRAM):   end;
777328    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777329    +      GRP_RFMstat2 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat2 = .;
777330    +      GRP_RFMstat3 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat3 = .;
777331    +      GRP_RFMstat4 = .;
MPRINT(EM_DIAGRAM):   GRP_RFMstat4 = .;
777332    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777333    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777334    +   end;
MPRINT(EM_DIAGRAM):   end;
777335    +end;
MPRINT(EM_DIAGRAM):   end;
777336    +
777337    +*** Generate dummy variables for GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RMntFrq ;
777338    +drop GRP_RMntFrq2 GRP_RMntFrq3 GRP_RMntFrq4 ;
MPRINT(EM_DIAGRAM):   drop GRP_RMntFrq2 GRP_RMntFrq3 GRP_RMntFrq4 ;
777339    +if missing( GRP_RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RMntFrq ) then do;
777340    +   GRP_RMntFrq2 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = .;
777341    +   GRP_RMntFrq3 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = .;
777342    +   GRP_RMntFrq4 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = .;
777343    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777344    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777345    +end;
MPRINT(EM_DIAGRAM):   end;
777346    +else do;
MPRINT(EM_DIAGRAM):   else do;
777347    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777348    +   _dm12 = put( GRP_RMntFrq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RMntFrq , BEST12. );
777349    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777350    +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
777351    +      GRP_RMntFrq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = 0;
777352    +      GRP_RMntFrq3 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = 1;
777353    +      GRP_RMntFrq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = 0;
777354    +   end;
MPRINT(EM_DIAGRAM):   end;
777355    +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
777356    +      GRP_RMntFrq2 = -1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = -1;
777357    +      GRP_RMntFrq3 = -1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = -1;
777358    +      GRP_RMntFrq4 = -1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = -1;
777359    +   end;
MPRINT(EM_DIAGRAM):   end;
777360    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777361    +      GRP_RMntFrq2 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = 0;
777362    +      GRP_RMntFrq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = 0;
777363    +      GRP_RMntFrq4 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = 1;
777364    +   end;
MPRINT(EM_DIAGRAM):   end;
777365    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777366    +      GRP_RMntFrq2 = 1;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = 1;
777367    +      GRP_RMntFrq3 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = 0;
777368    +      GRP_RMntFrq4 = 0;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = 0;
777369    +   end;
MPRINT(EM_DIAGRAM):   end;
777370    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777371    +      GRP_RMntFrq2 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq2 = .;
777372    +      GRP_RMntFrq3 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq3 = .;
777373    +      GRP_RMntFrq4 = .;
MPRINT(EM_DIAGRAM):   GRP_RMntFrq4 = .;
777374    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777375    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777376    +   end;
MPRINT(EM_DIAGRAM):   end;
777377    +end;
MPRINT(EM_DIAGRAM):   end;
777378    +
777379    +*** Generate dummy variables for GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Recency ;
777380    +drop GRP_Recency2 GRP_Recency3 GRP_Recency4 ;
MPRINT(EM_DIAGRAM):   drop GRP_Recency2 GRP_Recency3 GRP_Recency4 ;
777381    +if missing( GRP_Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Recency ) then do;
777382    +   GRP_Recency2 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = .;
777383    +   GRP_Recency3 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = .;
777384    +   GRP_Recency4 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = .;
777385    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
777386    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777387    +end;
MPRINT(EM_DIAGRAM):   end;
777388    +else do;
MPRINT(EM_DIAGRAM):   else do;
777389    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
777390    +   _dm12 = put( GRP_Recency , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Recency , BEST12. );
777391    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777392    +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
777393    +      GRP_Recency2 = -1;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = -1;
777394    +      GRP_Recency3 = -1;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = -1;
777395    +      GRP_Recency4 = -1;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = -1;
777396    +   end;
MPRINT(EM_DIAGRAM):   end;
777397    +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
777398    +      GRP_Recency2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = 0;
777399    +      GRP_Recency3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = 0;
777400    +      GRP_Recency4 = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = 1;
777401    +   end;
MPRINT(EM_DIAGRAM):   end;
777402    +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
777403    +      GRP_Recency2 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = 0;
777404    +      GRP_Recency3 = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = 1;
777405    +      GRP_Recency4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = 0;
777406    +   end;
MPRINT(EM_DIAGRAM):   end;
777407    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
777408    +      GRP_Recency2 = 1;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = 1;
777409    +      GRP_Recency3 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = 0;
777410    +      GRP_Recency4 = 0;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = 0;
777411    +   end;
MPRINT(EM_DIAGRAM):   end;
777412    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777413    +      GRP_Recency2 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency2 = .;
777414    +      GRP_Recency3 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency3 = .;
777415    +      GRP_Recency4 = .;
MPRINT(EM_DIAGRAM):   GRP_Recency4 = .;
777416    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
777417    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777418    +   end;
MPRINT(EM_DIAGRAM):   end;
777419    +end;
MPRINT(EM_DIAGRAM):   end;
777420    +
777421    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777422    +*** Checking missing input Interval
777423    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
777424    +
777425    +IF NMISS(
777426    +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Year_Birth ) THEN DO;
777427    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
777428    +
777429    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
777430    +END;
MPRINT(EM_DIAGRAM):   END;
777431    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777432    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
777433    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777434    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
777435    +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
777436    +END;
MPRINT(EM_DIAGRAM):   END;
777437    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
777438    +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
777439    +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
777440    +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
777441    +END;
MPRINT(EM_DIAGRAM):   END;
777442    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777443    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
777444    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777445    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777446    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
777447    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777448    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
777449    +   H11  =     -0.0249129843743 * S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H11 = -0.0249129843743 * S_Year_Birth ;
777450    +   H11  = H11  +     0.12725616992691 * GRP_AcceptedCmp52
777451    +          +    -0.26945372540537 * GRP_Frq2  +    -0.02807540638783 * GRP_Frq3
777452    +          +     0.09639274822287 * GRP_Frq4  +    -0.12205097466688 *
777453    +        GRP_Income2  +    -0.11081339105891 * GRP_Income3
777454    +          +     0.11708983682544 * GRP_Income4  +     0.08213996698973 *
777455    +        GRP_Mnt2  +     0.04755736117379 * GRP_Mnt3  +    -0.04386204709619 *
777456    +        GRP_Mnt4  +    -0.08900126769754 * GRP_MntFishProducts2
777457    +          +    -0.01139329678589 * GRP_MntFishProducts3
777458    +          +     0.01080020635436 * GRP_MntFishProducts4
777459    +          +     0.03276801167604 * GRP_MntGoldProds2
777460    +          +     0.00684607145566 * GRP_MntGoldProds3
777461    +          +     0.00079341373044 * GRP_MntGoldProds4
777462    +          +     0.17029271800291 * GRP_MntMeatProducts2
777463    +          +     0.03003718456752 * GRP_MntMeatProducts3
777464    +          +    -0.06730384984954 * GRP_MntMeatProducts4
777465    +          +    -0.12738653189788 * GRP_MntWines2  +    -0.05870095101029 *
777466    +        GRP_MntWines3  +     0.07315089663035 * GRP_MntWines4
777467    +          +      0.1241456955943 * GRP_NumCatalogPurchases3
777468    +          +    -0.00574720008996 * GRP_NumCatalogPurchases4
777469    +          +     0.32158219504705 * GRP_NumDistPurchases2
777470    +          +      0.0000285685731 * GRP_NumDistPurchases3
777471    +          +    -0.05920668594102 * GRP_NumDistPurchases4
777472    +          +    -0.02186462965936 * GRP_NumWebPurchases2
777473    +          +    -0.01225939075207 * GRP_NumWebPurchases3
777474    +          +     0.00325978185796 * GRP_NumWebPurchases4
777475    +          +     0.08029400003818 * GRP_RFMstat2  +     0.01517552489443 *
777476    +        GRP_RFMstat3  +    -0.02560149548828 * GRP_RFMstat4
777477    +          +    -0.06091086754789 * GRP_RMntFrq2  +    -0.03720166216597 *
777478    +        GRP_RMntFrq3  +     0.09749105098352 * GRP_RMntFrq4
777479    +          +    -0.21514477253983 * GRP_Recency2  +    -0.05786796429946 *
777480    +        GRP_Recency3  +     0.06630148536635 * GRP_Recency4 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.12725616992691 * GRP_AcceptedCmp52 + -0.26945372540537 *
GRP_Frq2 + -0.02807540638783 * GRP_Frq3 + 0.09639274822287 * GRP_Frq4 + -0.12205097466688 *
GRP_Income2 + -0.11081339105891 * GRP_Income3 + 0.11708983682544 * GRP_Income4 +
0.08213996698973 * GRP_Mnt2 + 0.04755736117379 * GRP_Mnt3 + -0.04386204709619 * GRP_Mnt4 +
-0.08900126769754 * GRP_MntFishProducts2 + -0.01139329678589 * GRP_MntFishProducts3 +
0.01080020635436 * GRP_MntFishProducts4 + 0.03276801167604 * GRP_MntGoldProds2 +
0.00684607145566 * GRP_MntGoldProds3 + 0.00079341373044 * GRP_MntGoldProds4 + 0.17029271800291
* GRP_MntMeatProducts2 + 0.03003718456752 * GRP_MntMeatProducts3 + -0.06730384984954 *
GRP_MntMeatProducts4 + -0.12738653189788 * GRP_MntWines2 + -0.05870095101029 * GRP_MntWines3 +
0.07315089663035 * GRP_MntWines4 + 0.1241456955943 * GRP_NumCatalogPurchases3 +
-0.00574720008996 * GRP_NumCatalogPurchases4 + 0.32158219504705 * GRP_NumDistPurchases2 +
0.0000285685731 * GRP_NumDistPurchases3 + -0.05920668594102 * GRP_NumDistPurchases4 +
-0.02186462965936 * GRP_NumWebPurchases2 + -0.01225939075207 * GRP_NumWebPurchases3 +
0.00325978185796 * GRP_NumWebPurchases4 + 0.08029400003818 * GRP_RFMstat2 + 0.01517552489443 *
GRP_RFMstat3 + -0.02560149548828 * GRP_RFMstat4 + -0.06091086754789 * GRP_RMntFrq2 +
-0.03720166216597 * GRP_RMntFrq3 + 0.09749105098352 * GRP_RMntFrq4 + -0.21514477253983 *
GRP_Recency2 + -0.05786796429946 * GRP_Recency3 + 0.06630148536635 * GRP_Recency4 ;
777481    +   H11  =     -0.2495737283502 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.2495737283502 + H11 ;
777482    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
777483    +END;
MPRINT(EM_DIAGRAM):   END;
777484    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
777485    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
777486    +END;
MPRINT(EM_DIAGRAM):   END;
777487    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777488    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
777489    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777490    +
777491    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
777492    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
777493    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
777494    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
777495    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
777496    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
777497    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
777498    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
777499    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
777500    +end;
MPRINT(EM_DIAGRAM):   end;
777501    +else do;
MPRINT(EM_DIAGRAM):   else do;
777502    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
777503    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
777504    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
777505    +   end;
MPRINT(EM_DIAGRAM):   end;
777506    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
777507    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
777508    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
777509    +   end;
MPRINT(EM_DIAGRAM):   end;
777510    +   else do;
MPRINT(EM_DIAGRAM):   else do;
777511    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
777512    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
777513    +   end;
MPRINT(EM_DIAGRAM):   end;
777514    +end;
MPRINT(EM_DIAGRAM):   end;
777515    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
777516    +   P_DepVar1  =    -9.21655554427872 * H11 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -9.21655554427872 * H11 ;
777517    +   P_DepVar1  =    -3.98078306870422 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.98078306870422 + P_DepVar1 ;
777518    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
777519    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
777520    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
777521    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
777522    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
777523    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
777524    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
777525    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
777526    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
777527    +END;
MPRINT(EM_DIAGRAM):   END;
777528    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
777529    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
777530    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
777531    +END;
MPRINT(EM_DIAGRAM):   END;
777532    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
777533    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
777534    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
777535    +END;
MPRINT(EM_DIAGRAM):   END;
777536    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
777537    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
777538    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
777539    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
777540    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
777541    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
777542    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
777543    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777544    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
777545    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
777546    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
777547    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
777548    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
777549    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
777550    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
777551    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
777552    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
777553    +END;
MPRINT(EM_DIAGRAM):   END;
777554    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
777555    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
777556    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
777557    +drop
777558    +H11
777559    +;
MPRINT(EM_DIAGRAM):   drop H11 ;
777560    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
777561     run;
 
NOTE: DATA STEP view saved on file EMWS8.NEURAL5_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
777562     quit;
777563     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
777564     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
777565     * Neural5: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural5: Computing metadata for TRAIN data;
777566     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.NEURAL5_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural5_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural5_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural5_TRAIN out=WORK.M1TWEPWT noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1TWEPWT;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1TWEPWT(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1TWEPWT;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1TWEPWT;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M05BS57K NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05BS57K;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M05BS57K;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06G46_0(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M05BS57K;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05BS57K;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M05BS57K;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
The SAS System
 
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05BS57K;
MPRINT(EMADVISECOLUMNS):   set WORK.M05BS57K;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural5";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural5";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural5: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
777878     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
777879     set EMWS8.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMINFO;
777880     where DATA='Neural5' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural5' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
777881     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.NEURAL5_EMINFO.
      WHERE (DATA='Neural5') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777882     data EMWS8.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_EMINFO;
777883     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
777884     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
777885     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.NEURAL5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
777889     run;
777890     data EMWS8.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMINFO;
777891     set EMWS8.Neural5_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMINFO WORK.MODELTEMP_INFO;
777892     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.NEURAL5_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777893     proc sort data = EMWS8.Neural5_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural5_EMINFO NOTHREADS;
777894     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
777895     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.NEURAL5_EMINFO.
NOTE: The data set EMWS8.NEURAL5_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777896     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
777897     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
777898     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777899     proc sort data = EMWS8.Neural5_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural5_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
777900     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
777901     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL5_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777902     data EMWS8.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMINFO;
777903     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
777904     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
777905     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL5_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777906     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
777907     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
777908     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
777909     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS8.NEURAL5_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS8.NEURAL5_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.52 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                21. April 2016
Time:                18.52 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0U_WBAU
"C:\\predictive-models-project\Workspaces\EMWS8\Neural5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0U_WBAU new;
MPRINT(EM_DIAGRAM):   run;
777933     data EMWS8.Neural5_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_EMOUTFIT(rename=(_NAME_=TARGET));
777934     set EMWS8.Neural5_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_OUTFIT(where=(_NAME_ eq 'OVERALL'));
777935     label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
777936     if _NAME_='OVERALL' then _NAME_='DepVar';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='DepVar';
777937     drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
777938     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL5_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS8.NEURAL5_EMOUTFIT has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777939     proc sort data=EMWS8.Neural5_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural5_EMOUTFIT nodupkey;
777940     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
777941     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL5_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.NEURAL5_EMOUTFIT has 1 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
777942     data EMWS8.Neural5_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_EMOUTFIT;
777943     set EMWS8.Neural5_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMOUTFIT;
777944     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
777945     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
777945   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
777946     if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
777947     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL5_EMOUTFIT.
NOTE: The data set EMWS8.NEURAL5_EMOUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777948     proc sort data=EMWS8.Neural5_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural5_EMREPORTFIT nothreads;
777949     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
777950     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS8.NEURAL5_EMREPORTFIT.
NOTE: The data set EMWS8.NEURAL5_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777951     %let _EMwarndup = 0;
777952     %let _EMtargetdup =;
777953     %let _EMASEtargetdup =;
777954     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
777955     set EMWS8.Neural5_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMOUTFIT;
777956     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
777957     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
777958     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
777959     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
777960     end;
MPRINT(EM_DIAGRAM):   end;
777961     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL5_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777962     proc sort data=EMWS8.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
777963     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
777964     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 50 observations read from the data set EMWS8.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 50 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
777965     proc sort data=EMWS8.Neural5_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural5_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
777966     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
777967     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 48 observations read from the data set EMWS8.NEURAL5_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 48 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777968     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
777969     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
777970     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
777971     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 50 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 48 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 50 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777972     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
777973     set EMWS8.Neural5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_CMeta_TRAIN;
777974     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
777974   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
777975     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL5_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
777976     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
777977     set EMWS8.Neural5_TRAIN(keep=
777978     F_DepVar
777979     I_DepVar
777980     P_DepVar0
777981     P_DepVar1
777982     R_DepVar0
777983     R_DepVar1
777984     U_DepVar
777985     _WARN_
777986     DepVar
777987     );
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
777988     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.NEURAL5_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.NEURAL5_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Neural5_01I0QEU nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural5_01I0QEU;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural5_01I0QEU(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural5_01I0QEU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural5_01I0QEU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000303452 OVLMAX 0.9535312658 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
782254     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
782255     set EMWS8.Neural5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_CMeta_TRAIN;
782256     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
782256   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
782257     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL5_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
782258     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
782259     set EMWS8.Neural5_VALIDATE(keep=
782260     F_DepVar
782261     I_DepVar
782262     P_DepVar0
782263     P_DepVar1
782264     R_DepVar0
782265     R_DepVar1
782266     U_DepVar
782267     _WARN_
782268     DepVar
782269     );
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
782270     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.NEURAL5_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.BINNING_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.NEURAL5_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Neural5_2UP0LVK nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural5_2UP0LVK;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural5_2UP0LVK(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMCLASSIFICATION WORK.Neural5_2UP0LVK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural5_2UP0LVK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural5_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000488512 OVLMAX 0.9471632454 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
786545     %let _cn = %sysfunc(getoption(CENTER));
786546     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
786547     proc print data=EMWS8.Neural5_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural5_EMREPORTFIT noobs label;
786548     var STAT LABEL TRAIN
786549     VALIDATE
786550     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
786551     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
786552     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
786553     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
786554     run;
 
NOTE: There were 21 observations read from the data set EMWS8.NEURAL5_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 867.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
786555     title10;
MPRINT(EM_DIAGRAM):   title10;
786556     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
786557     proc sort data=EMWS8.Neural5_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural5_EMCLASSIFICATION nothreads;
786558     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
786559     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL5_EMCLASSIFICATION.
NOTE: The data set EMWS8.NEURAL5_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
786560     %let _cn = %sysfunc(getoption(CENTER));
786561     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
786562     proc print data=EMWS8.Neural5_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural5_EMCLASSIFICATION noobs label;
786563     var from into pct_row pct_col count percent
786564     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
786565     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
786566     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
786567     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
786568     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
786569     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
786570     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
786571     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
786572     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
786573     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
786574     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
786575     run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL5_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 868.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
786576     title9;
MPRINT(EM_DIAGRAM):   title9;
786577     title10;
MPRINT(EM_DIAGRAM):   title10;
786578     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
786579     %let _cn = %sysfunc(getoption(CENTER));
786580     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
786581     data EMWS8.Neural5_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural5_EMEVENTREPORT;
786582     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
786582   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
786583     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
786583   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
786583   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
786583   ! FALSEEVENT
786584     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
786584   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
786584   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
786585        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
786586     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
786587     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
786588     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
786589     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
786590     set EMWS8.Neural5_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural5_EMEVENTREPORT;
786591     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.NEURAL5_EMEVENTREPORT.
NOTE: The data set EMWS8.NEURAL5_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
786592     proc print data=EMWS8.Neural5_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural5_EMEVENTREPORT noobs label;
786593     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
786594     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
786595     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
786596     run;
 
NOTE: There were 2 observations read from the data set EMWS8.NEURAL5_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 869.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
786597     title10;
MPRINT(EM_DIAGRAM):   title10;
786598     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
786599     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
786600     modify Neural5_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural5_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
786601     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
786602     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
786602   ! ;
MPRINT(EM_DIAGRAM):   run;
786603     run;
 
NOTE: MODIFY was successful for EMWS8.NEURAL5_EMRANK.DATA.
786604     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
786605     %let _cn = %sysfunc(getoption(CENTER));
786606     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
786607     proc print data=EMWS8.Neural5_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural5_EMRANK label noobs;
786608     var
786609     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
786610     by
786611     notsorted DATAROLE
786612     notsorted TARGET
786613     notsorted TARGETLABEL
786614     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
786615     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
786616     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
786617     run;
 
NOTE: There were 40 observations read from the data set EMWS8.NEURAL5_EMRANK.
NOTE: The PROCEDURE PRINT printed page 870.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
786618     title10;
MPRINT(EM_DIAGRAM):   title10;
786619     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
786620     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
786621     modify Neural5_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural5_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
786622     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
786622   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
786623     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
786623   ! ;
MPRINT(EM_DIAGRAM):   run;
786624     run;
 
NOTE: MODIFY was successful for EMWS8.NEURAL5_EMSCOREDIST.DATA.
786625     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural5_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
