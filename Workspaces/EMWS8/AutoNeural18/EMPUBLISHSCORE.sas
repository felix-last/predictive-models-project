***********************************;
*** Begin Scoring Code for Neural;
***********************************;
DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
 _DM_BAD = 0;
 _NOCL_ = .;
 _MAX_ = .;
 _MAXP_ = .;
 _SUM_ = .;
 _NTRIALS = .;
 _EPS =                1E-10;
LENGTH _WARN_ $4
;
      label S_PC_1 = 'Standard: PC_1' ;

      label S_PC_10 = 'Standard: PC_10' ;

      label S_PC_11 = 'Standard: PC_11' ;

      label S_PC_12 = 'Standard: PC_12' ;

      label S_PC_13 = 'Standard: PC_13' ;

      label S_PC_14 = 'Standard: PC_14' ;

      label S_PC_15 = 'Standard: PC_15' ;

      label S_PC_16 = 'Standard: PC_16' ;

      label S_PC_17 = 'Standard: PC_17' ;

      label S_PC_2 = 'Standard: PC_2' ;

      label S_PC_3 = 'Standard: PC_3' ;

      label S_PC_4 = 'Standard: PC_4' ;

      label S_PC_5 = 'Standard: PC_5' ;

      label S_PC_6 = 'Standard: PC_6' ;

      label S_PC_7 = 'Standard: PC_7' ;

      label S_PC_8 = 'Standard: PC_8' ;

      label S_PC_9 = 'Standard: PC_9' ;

      label S_Year_Birth = 'Standard: Year_Birth' ;

      label H1x1_1 = 'Hidden: H1x1_=1' ;

      label H1x1_2 = 'Hidden: H1x1_=2' ;

      label H1x1_3 = 'Hidden: H1x1_=3' ;

      label H1x2_1 = 'Hidden: H1x2_=1' ;

      label H1x2_2 = 'Hidden: H1x2_=2' ;

      label H1x2_3 = 'Hidden: H1x2_=3' ;

      label H1x3_1 = 'Hidden: H1x3_=1' ;

      label H1x3_2 = 'Hidden: H1x3_=2' ;

      label H1x3_3 = 'Hidden: H1x3_=3' ;

      label H1x4_1 = 'Hidden: H1x4_=1' ;

      label H1x4_2 = 'Hidden: H1x4_=2' ;

      label H1x4_3 = 'Hidden: H1x4_=3' ;

      label H2x1_1 = 'Hidden: H2x1_=1' ;

      label H2x1_2 = 'Hidden: H2x1_=2' ;

      label H2x1_3 = 'Hidden: H2x1_=3' ;

      label H2x2_1 = 'Hidden: H2x2_=1' ;

      label H2x2_2 = 'Hidden: H2x2_=2' ;

      label H2x2_3 = 'Hidden: H2x2_=3' ;

      label H2x3_1 = 'Hidden: H2x3_=1' ;

      label H2x3_2 = 'Hidden: H2x3_=2' ;

      label H2x3_3 = 'Hidden: H2x3_=3' ;

      label H3x1_1 = 'Hidden: H3x1_=1' ;

      label H3x1_2 = 'Hidden: H3x1_=2' ;

      label H3x1_3 = 'Hidden: H3x1_=3' ;

      label H3x2_1 = 'Hidden: H3x2_=1' ;

      label H3x2_2 = 'Hidden: H3x2_=2' ;

      label H3x2_3 = 'Hidden: H3x2_=3' ;

      label H4x1_1 = 'Hidden: H4x1_=1' ;

      label H4x1_2 = 'Hidden: H4x1_=2' ;

      label H4x1_3 = 'Hidden: H4x1_=3' ;

      label I_DepVar = 'Into: DepVar' ;

      label U_DepVar = 'Unnormalized Into: DepVar' ;

      label P_DepVar1 = 'Predicted: DepVar=1' ;

      label P_DepVar0 = 'Predicted: DepVar=0' ;

      label  _WARN_ = "Warnings";

*** *************************;
*** Checking missing input Interval
*** *************************;

IF NMISS(
   PC_1 ,
   PC_10 ,
   PC_11 ,
   PC_12 ,
   PC_13 ,
   PC_14 ,
   PC_15 ,
   PC_16 ,
   PC_17 ,
   PC_2 ,
   PC_3 ,
   PC_4 ,
   PC_5 ,
   PC_6 ,
   PC_7 ,
   PC_8 ,
   PC_9 ,
   Year_Birth   ) THEN DO;
   SUBSTR(_WARN_, 1, 1) = 'M';

   _DM_BAD = 1;
END;
*** *************************;
*** Writing the Node interval ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
   S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
   S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
   S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
   S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
   S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
   S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
   S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
   S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
   S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
   S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
   S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
   S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
   S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
   S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
   S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
   S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
END;
ELSE DO;
   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
   ELSE S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
   ELSE S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
   ELSE S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
   ELSE S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
   ELSE S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
   ELSE S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
   ELSE S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
   ELSE S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
   ELSE S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
   ELSE S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
   ELSE S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
   ELSE S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
   ELSE S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
   ELSE S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
   ELSE S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
   ELSE S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
   ELSE S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
        Year_Birth ;
END;
*** *************************;
*** Writing the Node H1x1_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H1x1_1  =     0.07723269924752 * S_PC_1  +     0.43743330545012 * S_PC_10
          +      1.6693115657792 * S_PC_11  +    -0.64722248381133 * S_PC_12
          +    -1.14011516948896 * S_PC_13  +     0.13365171033005 * S_PC_14
          +    -0.87932467478542 * S_PC_15  +      0.1891397274897 * S_PC_16
          +     0.93293917054445 * S_PC_17  +    -6.03439059205619 * S_PC_2
          +    -2.87849566755714 * S_PC_3  +     3.62710637032582 * S_PC_4
          +     0.18299783411397 * S_PC_5  +    -0.57854626628773 * S_PC_6
          +     1.53212873074737 * S_PC_7  +    -4.58356670489514 * S_PC_8
          +    -1.33584602395783 * S_PC_9  +     0.27972685229597 *
        S_Year_Birth ;
   H1x1_2  =      0.4295062431615 * S_PC_1  +     1.74475330655505 * S_PC_10
          +     2.23910233765174 * S_PC_11  +    -1.25371934636809 * S_PC_12
          +    -0.75166168153719 * S_PC_13  +     0.30586217171617 * S_PC_14
          +    -0.14707761142861 * S_PC_15  +     0.06789179881861 * S_PC_16
          +     0.15708065500364 * S_PC_17  +    -3.27197596660455 * S_PC_2
          +    -1.83455401439583 * S_PC_3  +    -1.33583150986124 * S_PC_4
          +     3.76700369809262 * S_PC_5  +     3.87817856654224 * S_PC_6
          +      1.3460326103488 * S_PC_7  +    -5.95757633892394 * S_PC_8
          +    -1.37588259826469 * S_PC_9  +     0.28058850697694 *
        S_Year_Birth ;
   H1x1_1  =     1.57200769060994 + H1x1_1 ;
   H1x1_2  =     0.00854073179305 + H1x1_2 ;
   H1x1_3  = 0;
   _MAX_ = MAX (H1x1_1 , H1x1_2 , H1x1_3 );
   _SUM_ = 0.;
   H1x1_1  = EXP(H1x1_1  - _MAX_);
   _SUM_ = _SUM_ + H1x1_1 ;
   H1x1_2  = EXP(H1x1_2  - _MAX_);
   _SUM_ = _SUM_ + H1x1_2 ;
   H1x1_3  = EXP(H1x1_3  - _MAX_);
   _SUM_ = _SUM_ + H1x1_3 ;
   H1x1_1  = H1x1_1  / _SUM_;
   H1x1_2  = H1x1_2  / _SUM_;
   H1x1_3  = H1x1_3  / _SUM_;
END;
ELSE DO;
   H1x1_1  = .;
   H1x1_2  = .;
   H1x1_3  = .;
END;
*** *************************;
*** Writing the Node H1x2_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H1x2_1  =    -2.09077003382313 * S_PC_1  +    -2.68998470873609 * S_PC_10
          +     1.22193300919824 * S_PC_11  +     1.69229496424731 * S_PC_12
          +    -0.70219302099638 * S_PC_13  +     0.71691278821801 * S_PC_14
          +    -0.79717444166607 * S_PC_15  +     0.75087952429581 * S_PC_16
          +    -0.63761714428085 * S_PC_17  +     3.05570889853319 * S_PC_2
          +    -0.67965194572009 * S_PC_3  +     0.27216947842522 * S_PC_4
          +    -0.30605214794042 * S_PC_5  +     4.15429282676847 * S_PC_6
          +    -0.29813935151942 * S_PC_7  +    -0.51866797567812 * S_PC_8
          +    -0.87253914316211 * S_PC_9  +     0.83340951033676 *
        S_Year_Birth ;
   H1x2_2  =    -0.72679656462034 * S_PC_1  +     1.54950514971273 * S_PC_10
          +    -0.24794354545961 * S_PC_11  +     -0.2336090989613 * S_PC_12
          +     2.22361254868991 * S_PC_13  +    -0.65402788192767 * S_PC_14
          +     0.69937232509444 * S_PC_15  +    -0.50976658559197 * S_PC_16
          +    -0.04331993112708 * S_PC_17  +     1.33721375032267 * S_PC_2
          +    -0.46941753497909 * S_PC_3  +      0.0318756188075 * S_PC_4
          +     0.18416014255651 * S_PC_5  +    -0.54651907811311 * S_PC_6
          +     0.19643924756506 * S_PC_7  +    -0.16327677617544 * S_PC_8
          +    -0.63026861876226 * S_PC_9  +    -0.20733722446633 *
        S_Year_Birth ;
   H1x2_1  =    -0.45484074595841 + H1x2_1 ;
   H1x2_2  =     1.65544923473661 + H1x2_2 ;
   H1x2_3  = 0;
   _MAX_ = MAX (H1x2_1 , H1x2_2 , H1x2_3 );
   _SUM_ = 0.;
   H1x2_1  = EXP(H1x2_1  - _MAX_);
   _SUM_ = _SUM_ + H1x2_1 ;
   H1x2_2  = EXP(H1x2_2  - _MAX_);
   _SUM_ = _SUM_ + H1x2_2 ;
   H1x2_3  = EXP(H1x2_3  - _MAX_);
   _SUM_ = _SUM_ + H1x2_3 ;
   H1x2_1  = H1x2_1  / _SUM_;
   H1x2_2  = H1x2_2  / _SUM_;
   H1x2_3  = H1x2_3  / _SUM_;
END;
ELSE DO;
   H1x2_1  = .;
   H1x2_2  = .;
   H1x2_3  = .;
END;
*** *************************;
*** Writing the Node H1x3_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H1x3_1  =     1.48114761979115 * S_PC_1  +    -0.77808542245614 * S_PC_10
          +    -0.30819901448035 * S_PC_11  +     0.56026788023458 * S_PC_12
          +     1.47931516853408 * S_PC_13  +     0.00542792617507 * S_PC_14
          +    -1.73236906231289 * S_PC_15  +    -0.83926333373259 * S_PC_16
          +     1.11418743009677 * S_PC_17  +     1.20202383644325 * S_PC_2
          +     0.04213393267284 * S_PC_3  +     2.27162803788709 * S_PC_4
          +      0.2901263213926 * S_PC_5  +     1.96650957669993 * S_PC_6
          +    -0.25353965539248 * S_PC_7  +    -1.87254461218534 * S_PC_8
          +    -1.60867246668536 * S_PC_9  +    -1.81517523903099 *
        S_Year_Birth ;
   H1x3_2  =     1.57346661513148 * S_PC_1  +     0.43195496243177 * S_PC_10
          +      0.8633889943093 * S_PC_11  +     0.19899107002304 * S_PC_12
          +     0.89004694351718 * S_PC_13  +     0.20427645322052 * S_PC_14
          +     1.59337923843551 * S_PC_15  +     1.67691489307996 * S_PC_16
          +     1.00334157857434 * S_PC_17  +    -1.05358529225436 * S_PC_2
          +    -1.83367619193431 * S_PC_3  +     2.70866972328632 * S_PC_4
          +    -0.21267354790891 * S_PC_5  +     -1.3443463775433 * S_PC_6
          +     1.11114248765341 * S_PC_7  +     0.97676765396811 * S_PC_8
          +     0.06263998354893 * S_PC_9  +    -1.81223070920192 *
        S_Year_Birth ;
   H1x3_1  =    -1.38533008257086 + H1x3_1 ;
   H1x3_2  =     1.12341983705313 + H1x3_2 ;
   H1x3_3  = 0;
   _MAX_ = MAX (H1x3_1 , H1x3_2 , H1x3_3 );
   _SUM_ = 0.;
   H1x3_1  = EXP(H1x3_1  - _MAX_);
   _SUM_ = _SUM_ + H1x3_1 ;
   H1x3_2  = EXP(H1x3_2  - _MAX_);
   _SUM_ = _SUM_ + H1x3_2 ;
   H1x3_3  = EXP(H1x3_3  - _MAX_);
   _SUM_ = _SUM_ + H1x3_3 ;
   H1x3_1  = H1x3_1  / _SUM_;
   H1x3_2  = H1x3_2  / _SUM_;
   H1x3_3  = H1x3_3  / _SUM_;
END;
ELSE DO;
   H1x3_1  = .;
   H1x3_2  = .;
   H1x3_3  = .;
END;
*** *************************;
*** Writing the Node H1x4_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H1x4_1  =    -0.80016530267676 * S_PC_1  +     0.61481990683794 * S_PC_10
          +     0.98014276653455 * S_PC_11  +     0.96774210975431 * S_PC_12
          +    -0.24220452892914 * S_PC_13  +    -1.51001392301164 * S_PC_14
          +     0.87644450132968 * S_PC_15  +    -0.38985062946846 * S_PC_16
          +    -0.54364633571498 * S_PC_17  +    -0.53950247180635 * S_PC_2
          +    -1.81008396411344 * S_PC_3  +     0.14770896241053 * S_PC_4
          +     0.29429972379263 * S_PC_5  +      0.5432632338697 * S_PC_6
          +     0.81795185751595 * S_PC_7  +      1.7101808517267 * S_PC_8
          +    -0.72272176691606 * S_PC_9  +     2.21178075137818 *
        S_Year_Birth ;
   H1x4_2  =     2.94582724887707 * S_PC_1  +    -1.04477313406074 * S_PC_10
          +     -2.4839961217725 * S_PC_11  +     0.20099584530937 * S_PC_12
          +    -0.06864475460031 * S_PC_13  +     0.19225464743494 * S_PC_14
          +     0.61674704994894 * S_PC_15  +     0.80994823370663 * S_PC_16
          +     1.36897006856312 * S_PC_17  +      0.3486096099276 * S_PC_2
          +     1.23622183682513 * S_PC_3  +      0.7033453624158 * S_PC_4
          +     0.40583140737089 * S_PC_5  +     -0.3056392458601 * S_PC_6
          +    -1.01410157426394 * S_PC_7  +    -1.13889506022266 * S_PC_8
          +    -0.70945228861297 * S_PC_9  +        1.60977491949 *
        S_Year_Birth ;
   H1x4_1  =    -0.31373086905649 + H1x4_1 ;
   H1x4_2  =    -0.23423875584785 + H1x4_2 ;
   H1x4_3  = 0;
   _MAX_ = MAX (H1x4_1 , H1x4_2 , H1x4_3 );
   _SUM_ = 0.;
   H1x4_1  = EXP(H1x4_1  - _MAX_);
   _SUM_ = _SUM_ + H1x4_1 ;
   H1x4_2  = EXP(H1x4_2  - _MAX_);
   _SUM_ = _SUM_ + H1x4_2 ;
   H1x4_3  = EXP(H1x4_3  - _MAX_);
   _SUM_ = _SUM_ + H1x4_3 ;
   H1x4_1  = H1x4_1  / _SUM_;
   H1x4_2  = H1x4_2  / _SUM_;
   H1x4_3  = H1x4_3  / _SUM_;
END;
ELSE DO;
   H1x4_1  = .;
   H1x4_2  = .;
   H1x4_3  = .;
END;
*** *************************;
*** Writing the Node H2x1_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H2x1_1  =     -0.6133143841405 * H1x1_1  +    -3.83938070262105 * H1x1_2
          +     2.97647348719096 * H1x1_3 ;
   H2x1_2  =     0.84627847563363 * H1x1_1  +    -3.73586519813465 * H1x1_2
          +     1.28953521079844 * H1x1_3 ;
   H2x1_1  = H2x1_1  +    -3.07535111907469 * H1x2_1
          +    -1.10008927410552 * H1x2_2  +     5.30803737772439 * H1x2_3 ;
   H2x1_2  = H2x1_2  +     1.98363965238625 * H1x2_1
          +    -0.95287434555938 * H1x2_2  +    -1.11784150106077 * H1x2_3 ;
   H2x1_1  = H2x1_1  +      0.5063143580136 * H1x3_1
          +    -0.34731032997063 * H1x3_2  +     0.17242916251088 * H1x3_3 ;
   H2x1_2  = H2x1_2  +    -1.49859177763656 * H1x3_1
          +    -0.47439550056563 * H1x3_2  +     0.98620031562872 * H1x3_3 ;
   H2x1_1  = H2x1_1  +     1.66849180018854 * H1x4_1
          +    -1.05465412898618 * H1x4_2  +    -0.76816922190923 * H1x4_3 ;
   H2x1_2  = H2x1_2  +    -0.64156638450484 * H1x4_1
          +     1.44483282099634 * H1x4_2  +     1.18433408020201 * H1x4_3 ;
   H2x1_1  =    -1.35727593871832 + H2x1_1 ;
   H2x1_2  =    -2.02415682222477 + H2x1_2 ;
   H2x1_3  = 0;
   _MAX_ = MAX (H2x1_1 , H2x1_2 , H2x1_3 );
   _SUM_ = 0.;
   H2x1_1  = EXP(H2x1_1  - _MAX_);
   _SUM_ = _SUM_ + H2x1_1 ;
   H2x1_2  = EXP(H2x1_2  - _MAX_);
   _SUM_ = _SUM_ + H2x1_2 ;
   H2x1_3  = EXP(H2x1_3  - _MAX_);
   _SUM_ = _SUM_ + H2x1_3 ;
   H2x1_1  = H2x1_1  / _SUM_;
   H2x1_2  = H2x1_2  / _SUM_;
   H2x1_3  = H2x1_3  / _SUM_;
END;
ELSE DO;
   H2x1_1  = .;
   H2x1_2  = .;
   H2x1_3  = .;
END;
*** *************************;
*** Writing the Node H2x2_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H2x2_1  =     0.63449405645229 * H1x1_1  +     0.84446115465645 * H1x1_2
          +    -1.56766627360236 * H1x1_3 ;
   H2x2_2  =    -0.19705467445914 * H1x1_1  +     0.20974772543551 * H1x1_2
          +    -1.09606243724394 * H1x1_3 ;
   H2x2_1  = H2x2_1  +     0.45623308628354 * H1x2_1
          +     0.75010274028191 * H1x2_2  +     1.20173965917267 * H1x2_3 ;
   H2x2_2  = H2x2_2  +     0.56802075860421 * H1x2_1
          +     2.59062219455668 * H1x2_2  +    -0.90632723812936 * H1x2_3 ;
   H2x2_1  = H2x2_1  +    -0.39791324115597 * H1x3_1
          +     1.07686108370009 * H1x3_2  +     -0.1809775985606 * H1x3_3 ;
   H2x2_2  = H2x2_2  +    -1.96666697492206 * H1x3_1
          +     1.55275173372121 * H1x3_2  +    -0.09342611528757 * H1x3_3 ;
   H2x2_1  = H2x2_1  +    -2.28201609611728 * H1x4_1
          +    -1.36632864073452 * H1x4_2  +    -0.78166079848897 * H1x4_3 ;
   H2x2_2  = H2x2_2  +     0.87133348497961 * H1x4_1
          +    -0.82975118122828 * H1x4_2  +    -1.70213780111439 * H1x4_3 ;
   H2x2_1  =    -1.49163500349922 + H2x2_1 ;
   H2x2_2  =     -0.0405622301927 + H2x2_2 ;
   H2x2_3  = 0;
   _MAX_ = MAX (H2x2_1 , H2x2_2 , H2x2_3 );
   _SUM_ = 0.;
   H2x2_1  = EXP(H2x2_1  - _MAX_);
   _SUM_ = _SUM_ + H2x2_1 ;
   H2x2_2  = EXP(H2x2_2  - _MAX_);
   _SUM_ = _SUM_ + H2x2_2 ;
   H2x2_3  = EXP(H2x2_3  - _MAX_);
   _SUM_ = _SUM_ + H2x2_3 ;
   H2x2_1  = H2x2_1  / _SUM_;
   H2x2_2  = H2x2_2  / _SUM_;
   H2x2_3  = H2x2_3  / _SUM_;
END;
ELSE DO;
   H2x2_1  = .;
   H2x2_2  = .;
   H2x2_3  = .;
END;
*** *************************;
*** Writing the Node H2x3_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H2x3_1  =    -0.00478986250364 * H1x1_1  +     1.94512729287583 * H1x1_2
          +    -0.54574044877188 * H1x1_3 ;
   H2x3_2  =    -0.35130412480513 * H1x1_1  +     -0.5687847994534 * H1x1_2
          +     0.00304400166261 * H1x1_3 ;
   H2x3_1  = H2x3_1  +    -0.01368566150766 * H1x2_1
          +    -0.45146944846621 * H1x2_2  +    -0.67213884593612 * H1x2_3 ;
   H2x3_2  = H2x3_2  +    -1.18855975344434 * H1x2_1
          +     -0.9722196735443 * H1x2_2  +      -0.355434381432 * H1x2_3 ;
   H2x3_1  = H2x3_1  +    -0.45509153654361 * H1x3_1
          +    -1.71140374695887 * H1x3_2  +    -0.20303329938338 * H1x3_3 ;
   H2x3_2  = H2x3_2  +     1.04869232313058 * H1x3_1
          +     -1.0692296884809 * H1x3_2  +    -0.52352255264688 * H1x3_3 ;
   H2x3_1  = H2x3_1  +     0.14078396505176 * H1x4_1
          +     0.15304402404578 * H1x4_2  +    -0.63915963465509 * H1x4_3 ;
   H2x3_2  = H2x3_2  +    -0.36362065391576 * H1x4_1
          +    -0.01953827604863 * H1x4_2  +      0.8236573437559 * H1x4_3 ;
   H2x3_1  =    -1.45925755580396 + H2x3_1 ;
   H2x3_2  =    -2.11509373325296 + H2x3_2 ;
   H2x3_3  = 0;
   _MAX_ = MAX (H2x3_1 , H2x3_2 , H2x3_3 );
   _SUM_ = 0.;
   H2x3_1  = EXP(H2x3_1  - _MAX_);
   _SUM_ = _SUM_ + H2x3_1 ;
   H2x3_2  = EXP(H2x3_2  - _MAX_);
   _SUM_ = _SUM_ + H2x3_2 ;
   H2x3_3  = EXP(H2x3_3  - _MAX_);
   _SUM_ = _SUM_ + H2x3_3 ;
   H2x3_1  = H2x3_1  / _SUM_;
   H2x3_2  = H2x3_2  / _SUM_;
   H2x3_3  = H2x3_3  / _SUM_;
END;
ELSE DO;
   H2x3_1  = .;
   H2x3_2  = .;
   H2x3_3  = .;
END;
*** *************************;
*** Writing the Node H3x1_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H3x1_1  =    -3.08764799088394 * H2x1_1  +    -1.91738631410822 * H2x1_2
          +     6.38437371946773 * H2x1_3 ;
   H3x1_2  =    -2.95950103736455 * H2x1_1  +    -1.44269952634242 * H2x1_2
          +     0.99008255139162 * H2x1_3 ;
   H3x1_3  =    -2.74395762122593 * H2x1_1  +    -1.81036147116037 * H2x1_2
          +     3.01489730027742 * H2x1_3 ;
   H3x1_1  = H3x1_1  +     0.73548918886018 * H2x2_1
          +     0.80208488351218 * H2x2_2  +    -1.27461254024898 * H2x2_3 ;
   H3x1_2  = H3x1_2  +    -1.22577938531859 * H2x2_1
          +    -1.57729949542124 * H2x2_2  +    -0.20653566807302 * H2x2_3 ;
   H3x1_3  = H3x1_3  +    -0.94220166137452 * H2x2_1
          +    -2.23997375895636 * H2x2_2  +    -0.69569779790922 * H2x2_3 ;
   H3x1_1  = H3x1_1  +     0.47459821701313 * H2x3_1
          +     0.33884611641605 * H2x3_2  +     0.28384294800104 * H2x3_3 ;
   H3x1_2  = H3x1_2  +    -1.16110643375006 * H2x3_1
          +     1.66935308512585 * H2x3_2  +    -4.14568195267233 * H2x3_3 ;
   H3x1_3  = H3x1_3  +     1.49959471068751 * H2x3_1
          +    -0.59915928675297 * H2x3_2  +    -0.94983228816155 * H2x3_3 ;
   H3x1_1  =     0.63125998861833 + H3x1_1 ;
   H3x1_2  =    -2.73537618207087 + H3x1_2 ;
   H3x1_3  =    -1.10962396550321 + H3x1_3 ;
   DROP _EXP_BAR;
   _EXP_BAR=50;
   H3x1_1  = 1.0 / (1.0 + EXP(MIN( - H3x1_1 , _EXP_BAR)));
   H3x1_2  = 1.0 / (1.0 + EXP(MIN( - H3x1_2 , _EXP_BAR)));
   H3x1_3  = 1.0 / (1.0 + EXP(MIN( - H3x1_3 , _EXP_BAR)));
END;
ELSE DO;
   H3x1_1  = .;
   H3x1_2  = .;
   H3x1_3  = .;
END;
*** *************************;
*** Writing the Node H3x2_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H3x2_1  =    -1.04084973012353 * H2x1_1  +     0.54757336755543 * H2x1_2
          +    -2.42465723446458 * H2x1_3 ;
   H3x2_2  =    -0.44745304665935 * H2x1_1  +    -1.41662797767631 * H2x1_2
          +     1.61722186878847 * H2x1_3 ;
   H3x2_3  =    -2.03529954461846 * H2x1_1  +    -0.91129650681067 * H2x1_2
          +     2.85673907226574 * H2x1_3 ;
   H3x2_1  = H3x2_1  +    -0.27496745838336 * H2x2_1
          +     0.33713690467933 * H2x2_2  +    -0.33482440946593 * H2x2_3 ;
   H3x2_2  = H3x2_2  +     0.62817233761682 * H2x2_1
          +     0.01449619139944 * H2x2_2  +      0.2220823792987 * H2x2_3 ;
   H3x2_3  = H3x2_3  +     0.46121367972148 * H2x2_1
          +      1.5218429261845 * H2x2_2  +    -0.94334784031802 * H2x2_3 ;
   H3x2_1  = H3x2_1  +    -0.67640713318239 * H2x3_1
          +    -0.72620562367005 * H2x3_2  +    -0.30414945049952 * H2x3_3 ;
   H3x2_2  = H3x2_2  +    -0.44352623923272 * H2x3_1
          +      0.8085697022422 * H2x3_2  +    -1.69896322767729 * H2x3_3 ;
   H3x2_3  = H3x2_3  +     0.41104293419747 * H2x3_1
          +     0.28818262195501 * H2x3_2  +    -1.50518858912381 * H2x3_3 ;
   H3x2_1  =     1.16161310309265 + H3x2_1 ;
   H3x2_2  =    -0.09024108300764 + H3x2_2 ;
   H3x2_3  =    -0.25581784952458 + H3x2_3 ;
   DROP _EXP_BAR;
   _EXP_BAR=50;
   H3x2_1  = 1.0 / (1.0 + EXP(MIN( - H3x2_1 , _EXP_BAR)));
   H3x2_2  = 1.0 / (1.0 + EXP(MIN( - H3x2_2 , _EXP_BAR)));
   H3x2_3  = 1.0 / (1.0 + EXP(MIN( - H3x2_3 , _EXP_BAR)));
END;
ELSE DO;
   H3x2_1  = .;
   H3x2_2  = .;
   H3x2_3  = .;
END;
*** *************************;
*** Writing the Node H4x1_ ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   H4x1_1  =     0.21480063273209 * H3x1_1  +     0.40295874754542 * H3x1_2
          +    -0.46652932842091 * H3x1_3 ;
   H4x1_2  =     -0.6309991089273 * H3x1_1  +     0.94714102572045 * H3x1_2
          +     2.14147287324939 * H3x1_3 ;
   H4x1_3  =     7.08271783155536 * H3x1_1  +     5.80365896837882 * H3x1_2
          +     9.39096371789355 * H3x1_3 ;
   H4x1_1  = H4x1_1  +     0.53462819743794 * H3x2_1
          +    -1.20381600795509 * H3x2_2  +    -0.84571712717491 * H3x2_3 ;
   H4x1_2  = H4x1_2  +    -0.40059252904061 * H3x2_1
          +    -0.33184237889707 * H3x2_2  +    -3.44450406377857 * H3x2_3 ;
   H4x1_3  = H4x1_3  +    -2.56473440384479 * H3x2_1
          +     3.01233247745394 * H3x2_2  +    -3.53948797131919 * H3x2_3 ;
   H4x1_1  =    -1.40104706050408 + H4x1_1 ;
   H4x1_2  =    -1.48584087284959 + H4x1_2 ;
   H4x1_3  =    -5.00937717463052 + H4x1_3 ;
   DROP _EXP_BAR;
   _EXP_BAR=50;
   H4x1_1  = 1.0 / (1.0 + EXP(MIN( - H4x1_1 , _EXP_BAR)));
   H4x1_2  = 1.0 / (1.0 + EXP(MIN( - H4x1_2 , _EXP_BAR)));
   H4x1_3  = 1.0 / (1.0 + EXP(MIN( - H4x1_3 , _EXP_BAR)));
END;
ELSE DO;
   H4x1_1  = .;
   H4x1_2  = .;
   H4x1_3  = .;
END;
*** *************************;
*** Writing the Node DepVar ;
*** *************************;
IF _DM_BAD EQ 0 THEN DO;
   P_DepVar1  =     1.90607652900326 * H4x1_1  +     5.01913964820729 * H4x1_2
          +    -10.0265113542494 * H4x1_3 ;
   P_DepVar1  =     2.91350688930984 + P_DepVar1 ;
   P_DepVar0  = 0;
   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
   _SUM_ = 0.;
   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
   _SUM_ = _SUM_ + P_DepVar1 ;
   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
   _SUM_ = _SUM_ + P_DepVar0 ;
   P_DepVar1  = P_DepVar1  / _SUM_;
   P_DepVar0  = P_DepVar0  / _SUM_;
END;
ELSE DO;
   P_DepVar1  = .;
   P_DepVar0  = .;
END;
IF _DM_BAD EQ 1 THEN DO;
   P_DepVar1  =     0.15122156697556;
   P_DepVar0  =     0.84877843302443;
END;
*** *************************;
*** Writing the I_DepVar  AND U_DepVar ;
*** *************************;
_MAXP_ = P_DepVar1 ;
I_DepVar  = "1           " ;
U_DepVar  =                    1;
IF( _MAXP_ LT P_DepVar0  ) THEN DO;
   _MAXP_ = P_DepVar0 ;
   I_DepVar  = "0           " ;
   U_DepVar  =                    0;
END;
********************************;
*** End Scoring Code for Neural;
********************************;
drop S_:;
