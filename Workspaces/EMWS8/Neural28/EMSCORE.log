MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.02 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.02 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1I03L4J 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1I03L4J new;
MPRINT(EM_DIAGRAM):   run;
1009058    data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
1009059    set EMWS8.Neural28_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_OUTKEY;
1009060    if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
1009061    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set EMWS8.NEURAL28_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1009062    filename emflow
1009062  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1009063    *------------------------------------------------------------*;
1009064    * Neural28: Scoring DATA data;
1009065    *------------------------------------------------------------*;
1009066    data EMWS8.Neural28_TRAIN
1009067    / view=EMWS8.Neural28_TRAIN
1009068    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_TRAIN / view=EMWS8.Neural28_TRAIN ;
1009069    set EMWS8.Varsel_TRAIN
1009070    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
1009071    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
1009072   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1009073   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1009074   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1009075   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1009076   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1009077   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1009078   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1009079   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1009080   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1009081   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1009082   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1009083   +LENGTH _WARN_ $4
1009084   +      F_DepVar  $ 12
1009085   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1009086   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1009087   +
1009088   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1009089   +
1009090   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1009091   +
1009092   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1009093   +
1009094   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1009095   +
1009096   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1009097   +
1009098   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1009099   +
1009100   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1009101   +
1009102   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1009103   +
1009104   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1009105   +
1009106   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1009107   +
1009108   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1009109   +
1009110   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1009111   +
1009112   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1009113   +
1009114   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
1009115   +
1009116   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
1009117   +
1009118   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
1009119   +
1009120   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
1009121   +
1009122   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
1009123   +
1009124   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1009125   +
1009126   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1009127   +
1009128   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1009129   +
1009130   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1009131   +
1009132   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1009133   +
1009134   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1009135   +
1009136   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1009137   +
1009138   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1009139   +
1009140   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1009141   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1009142   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1009143   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1009144   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1009145   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1009146   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1009147   +end;
MPRINT(EM_DIAGRAM):   end;
1009148   +else do;
MPRINT(EM_DIAGRAM):   else do;
1009149   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1009150   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1009151   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1009152   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1009153   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1009154   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1009155   +   end;
MPRINT(EM_DIAGRAM):   end;
1009156   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1009157   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1009158   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1009159   +   end;
MPRINT(EM_DIAGRAM):   end;
1009160   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1009161   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1009162   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1009163   +   end;
MPRINT(EM_DIAGRAM):   end;
1009164   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1009165   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1009166   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1009167   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1009168   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1009169   +   end;
MPRINT(EM_DIAGRAM):   end;
1009170   +end;
MPRINT(EM_DIAGRAM):   end;
1009171   +
1009172   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009173   +*** Checking missing input Interval
1009174   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1009175   +
1009176   +IF NMISS(
1009177   +   AcceptedCmpTotal ,
1009178   +   Frq ,
1009179   +   Income ,
1009180   +   Mnt ,
1009181   +   MntGoldProds ,
1009182   +   MntMeatProducts ,
1009183   +   MntWines ,
1009184   +   NumDistPurchases ,
1009185   +   RFMstat ,
1009186   +   RMntFrq ,
1009187   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1009188   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1009189   +
1009190   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1009191   +END;
MPRINT(EM_DIAGRAM):   END;
1009192   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009193   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1009194   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009195   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1009196   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1009197   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1009198   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1009199   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1009200   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1009201   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1009202   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1009203   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1009204   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1009205   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1009206   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1009207   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1009208   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1009209   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1009210   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1009211   +END;
MPRINT(EM_DIAGRAM):   END;
1009212   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1009213   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1009214   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1009215   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1009216   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1009217   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1009218   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1009219   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1009220   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1009221   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1009222   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1009223   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1009224   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1009225   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1009226   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1009227   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1009228   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1009229   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1009230   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1009231   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1009232   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1009233   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1009234   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1009235   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1009236   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1009237   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1009238   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1009239   +END;
MPRINT(EM_DIAGRAM):   END;
1009240   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009241   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
1009242   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009243   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009244   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1009245   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009246   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1009247   +   H11  =     0.40839920245437 * S_AcceptedCmpTotal  +    -0.80301052154323 *
1009248   +        S_Frq  +     0.19839975683497 * S_Income  +    -0.71099382445924 *
1009249   +        S_Mnt  +    -0.15644638799226 * S_MntGoldProds
1009250   +          +    -0.05910355740416 * S_MntMeatProducts
1009251   +          +     0.23095157103241 * S_MntWines  +     0.67840217585411 *
1009252   +        S_NumDistPurchases  +     0.12536920827324 * S_RFMstat
1009253   +          +    -0.27246125863137 * S_RMntFrq  +    -1.02114645988925 *
1009254   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.40839920245437 * S_AcceptedCmpTotal + -0.80301052154323 * S_Frq 
+ 0.19839975683497 * S_Income + -0.71099382445924 * S_Mnt + -0.15644638799226 * S_MntGoldProds 
+ -0.05910355740416 * S_MntMeatProducts + 0.23095157103241 * S_MntWines + 0.67840217585411 * 
S_NumDistPurchases + 0.12536920827324 * S_RFMstat + -0.27246125863137 * S_RMntFrq + 
-1.02114645988925 * S_Recency ;
1009255   +   H12  =    -0.09503041118006 * S_AcceptedCmpTotal  +     0.74672296647411 *
1009256   +        S_Frq  +     1.82688988564051 * S_Income  +    -0.06831964209279 *
1009257   +        S_Mnt  +    -0.13330887266177 * S_MntGoldProds
1009258   +          +     0.09400377526937 * S_MntMeatProducts
1009259   +          +    -0.53358910675611 * S_MntWines  +     0.13886503925085 *
1009260   +        S_NumDistPurchases  +     0.02243224025219 * S_RFMstat
1009261   +          +    -0.03110171961938 * S_RMntFrq  +     0.39055670382948 *
1009262   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.09503041118006 * S_AcceptedCmpTotal + 0.74672296647411 * S_Frq 
+ 1.82688988564051 * S_Income + -0.06831964209279 * S_Mnt + -0.13330887266177 * S_MntGoldProds 
+ 0.09400377526937 * S_MntMeatProducts + -0.53358910675611 * S_MntWines + 0.13886503925085 * 
S_NumDistPurchases + 0.02243224025219 * S_RFMstat + -0.03110171961938 * S_RMntFrq + 
0.39055670382948 * S_Recency ;
1009263   +   H13  =    -0.07144509122078 * S_AcceptedCmpTotal  +     0.65325962599673 *
1009264   +        S_Frq  +     0.03169199805286 * S_Income  +     0.53573115818994 *
1009265   +        S_Mnt  +     0.13372718478424 * S_MntGoldProds
1009266   +          +    -1.62740823190029 * S_MntMeatProducts
1009267   +          +     0.15642273844597 * S_MntWines  +    -0.78908066213044 *
1009268   +        S_NumDistPurchases  +     -0.4365555360753 * S_RFMstat
1009269   +          +    -0.63552932650743 * S_RMntFrq  +     0.17699292292485 *
1009270   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = -0.07144509122078 * S_AcceptedCmpTotal + 0.65325962599673 * S_Frq 
+ 0.03169199805286 * S_Income + 0.53573115818994 * S_Mnt + 0.13372718478424 * S_MntGoldProds + 
-1.62740823190029 * S_MntMeatProducts + 0.15642273844597 * S_MntWines + -0.78908066213044 * 
S_NumDistPurchases + -0.4365555360753 * S_RFMstat + -0.63552932650743 * S_RMntFrq + 
0.17699292292485 * S_Recency ;
1009271   +   H14  =     0.03098188354318 * S_AcceptedCmpTotal  +    -0.04737735825642 *
1009272   +        S_Frq  +     0.30967861276694 * S_Income  +    -0.03786683388502 *
1009273   +        S_Mnt  +     0.25532115520236 * S_MntGoldProds
1009274   +          +      0.3965117290354 * S_MntMeatProducts
1009275   +          +     0.36188945634536 * S_MntWines  +    -0.24664355133344 *
1009276   +        S_NumDistPurchases  +     0.15627885374544 * S_RFMstat
1009277   +          +    -0.10763737759383 * S_RMntFrq  +     -0.4091862538023 *
1009278   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.03098188354318 * S_AcceptedCmpTotal + -0.04737735825642 * S_Frq 
+ 0.30967861276694 * S_Income + -0.03786683388502 * S_Mnt + 0.25532115520236 * S_MntGoldProds 
+ 0.3965117290354 * S_MntMeatProducts + 0.36188945634536 * S_MntWines + -0.24664355133344 * 
S_NumDistPurchases + 0.15627885374544 * S_RFMstat + -0.10763737759383 * S_RMntFrq + 
-0.4091862538023 * S_Recency ;
1009279   +   H15  =     0.27467896926965 * S_AcceptedCmpTotal  +    -1.33897347254907 *
1009280   +        S_Frq  +    -0.08574739739253 * S_Income  +    -0.68536026344277 *
1009281   +        S_Mnt  +     0.08729572232071 * S_MntGoldProds
1009282   +          +     1.44231431118379 * S_MntMeatProducts
1009283   +          +    -0.09322237385561 * S_MntWines  +      1.5568901785563 *
1009284   +        S_NumDistPurchases  +     0.06237505409693 * S_RFMstat
1009285   +          +    -1.04636887800306 * S_RMntFrq  +    -0.38411527089703 *
1009286   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.27467896926965 * S_AcceptedCmpTotal + -1.33897347254907 * S_Frq 
+ -0.08574739739253 * S_Income + -0.68536026344277 * S_Mnt + 0.08729572232071 * S_MntGoldProds 
+ 1.44231431118379 * S_MntMeatProducts + -0.09322237385561 * S_MntWines + 1.5568901785563 * 
S_NumDistPurchases + 0.06237505409693 * S_RFMstat + -1.04636887800306 * S_RMntFrq + 
-0.38411527089703 * S_Recency ;
1009287   +   H16  =    -0.89143353938241 * S_AcceptedCmpTotal  +     0.45211708970504 *
1009288   +        S_Frq  +    -0.44897699945178 * S_Income  +    -0.32314426452158 *
1009289   +        S_Mnt  +    -0.32329530597419 * S_MntGoldProds
1009290   +          +    -0.44244305964257 * S_MntMeatProducts
1009291   +          +    -0.04171589876809 * S_MntWines  +     0.42122451368745 *
1009292   +        S_NumDistPurchases  +    -0.15802898075961 * S_RFMstat
1009293   +          +    -0.40329155853226 * S_RMntFrq  +    -0.65176917675454 *
1009294   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.89143353938241 * S_AcceptedCmpTotal + 0.45211708970504 * S_Frq 
+ -0.44897699945178 * S_Income + -0.32314426452158 * S_Mnt + -0.32329530597419 * 
S_MntGoldProds + -0.44244305964257 * S_MntMeatProducts + -0.04171589876809 * S_MntWines + 
0.42122451368745 * S_NumDistPurchases + -0.15802898075961 * S_RFMstat + -0.40329155853226 * 
S_RMntFrq + -0.65176917675454 * S_Recency ;
1009295   +   H11  = H11  +     0.01448447530274 * G_Marital_Status0
1009296   +          +     0.42194179998625 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.01448447530274 * G_Marital_Status0 + 0.42194179998625 * 
G_Marital_Status1 ;
1009297   +   H12  = H12  +     0.12689198218881 * G_Marital_Status0
1009298   +          +     0.13222809503301 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.12689198218881 * G_Marital_Status0 + 0.13222809503301 * 
G_Marital_Status1 ;
1009299   +   H13  = H13  +     0.02279524261833 * G_Marital_Status0
1009300   +          +     0.22562672580832 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.02279524261833 * G_Marital_Status0 + 0.22562672580832 * 
G_Marital_Status1 ;
1009301   +   H14  = H14  +     1.11856448462308 * G_Marital_Status0
1009302   +          +     0.27730078918446 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 1.11856448462308 * G_Marital_Status0 + 0.27730078918446 * 
G_Marital_Status1 ;
1009303   +   H15  = H15  +    -0.04694745686684 * G_Marital_Status0
1009304   +          +     0.25879365732348 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.04694745686684 * G_Marital_Status0 + 0.25879365732348 * 
G_Marital_Status1 ;
1009305   +   H16  = H16  +    -0.22835702249634 * G_Marital_Status0
1009306   +          +     0.18090765090711 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.22835702249634 * G_Marital_Status0 + 0.18090765090711 * 
G_Marital_Status1 ;
1009307   +   H11  =     1.23863858658783 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.23863858658783 + H11 ;
1009308   +   H12  =    -0.12218156586843 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.12218156586843 + H12 ;
1009309   +   H13  =    -1.28170837349164 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.28170837349164 + H13 ;
1009310   +   H14  =    -2.07579206307318 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.07579206307318 + H14 ;
1009311   +   H15  =    -0.99934113480463 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.99934113480463 + H15 ;
1009312   +   H16  =     1.30250382782737 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 1.30250382782737 + H16 ;
1009313   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1009314   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
1009315   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
1009316   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
1009317   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
1009318   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
1009319   +END;
MPRINT(EM_DIAGRAM):   END;
1009320   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1009321   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1009322   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
1009323   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
1009324   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
1009325   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
1009326   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
1009327   +END;
MPRINT(EM_DIAGRAM):   END;
1009328   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009329   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1009330   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009331   +
1009332   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1009333   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1009334   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1009335   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1009336   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1009337   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1009338   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1009339   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1009340   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1009341   +end;
MPRINT(EM_DIAGRAM):   end;
1009342   +else do;
MPRINT(EM_DIAGRAM):   else do;
1009343   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1009344   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1009345   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1009346   +   end;
MPRINT(EM_DIAGRAM):   end;
1009347   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1009348   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1009349   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1009350   +   end;
MPRINT(EM_DIAGRAM):   end;
1009351   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1009352   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1009353   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1009354   +   end;
MPRINT(EM_DIAGRAM):   end;
1009355   +end;
MPRINT(EM_DIAGRAM):   end;
1009356   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1009357   +   P_DepVar1  =     3.62046962800706 * H11  +      -1.860875673098 * H12
1009358   +          +    -3.65105027155196 * H13  +     2.14381074770309 * H14
1009359   +          +     3.35729012959095 * H15  +    -2.46245459087361 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.62046962800706 * H11 + -1.860875673098 * H12 + 
-3.65105027155196 * H13 + 2.14381074770309 * H14 + 3.35729012959095 * H15 + -2.46245459087361 
* H16 ;
1009360   +   P_DepVar1  =    -2.50510283018473 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.50510283018473 + P_DepVar1 ;
1009361   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1009362   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1009363   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1009364   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1009365   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1009366   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1009367   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1009368   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1009369   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1009370   +END;
MPRINT(EM_DIAGRAM):   END;
1009371   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1009372   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1009373   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1009374   +END;
MPRINT(EM_DIAGRAM):   END;
1009375   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1009376   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1009377   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1009378   +END;
MPRINT(EM_DIAGRAM):   END;
1009379   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1009380   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1009381   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1009382   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1009383   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1009384   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1009385   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1009386   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009387   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1009388   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009389   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1009390   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1009391   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1009392   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1009393   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1009394   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1009395   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1009396   +END;
MPRINT(EM_DIAGRAM):   END;
1009397   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1009398   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1009399   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1009400   +drop
1009401   +H11
1009402   +H12
1009403   +H13
1009404   +H14
1009405   +H15
1009406   +H16
1009407   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
1009408   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1009409    run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1009410    quit;
1009411    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1009412    filename emflow
1009412  ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1009413    *------------------------------------------------------------*;
1009414    * Neural28: Scoring VALIDATE data;
1009415    *------------------------------------------------------------*;
1009416    data EMWS8.Neural28_VALIDATE
1009417    / view=EMWS8.Neural28_VALIDATE
1009418    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_VALIDATE / view=EMWS8.Neural28_VALIDATE ;
1009419    set EMWS8.Varsel_VALIDATE
1009420    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
1009421    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
1009422   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1009423   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1009424   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1009425   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1009426   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1009427   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1009428   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1009429   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1009430   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1009431   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1009432   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1009433   +LENGTH _WARN_ $4
1009434   +      F_DepVar  $ 12
1009435   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1009436   +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
1009437   +
1009438   +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
1009439   +
1009440   +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
1009441   +
1009442   +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
1009443   +
1009444   +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
1009445   +
1009446   +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
1009447   +
1009448   +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
1009449   +
1009450   +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
1009451   +
1009452   +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
1009453   +
1009454   +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
1009455   +
1009456   +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
1009457   +
1009458   +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
1009459   +
1009460   +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
1009461   +
1009462   +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
1009463   +
1009464   +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
1009465   +
1009466   +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
1009467   +
1009468   +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
1009469   +
1009470   +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
1009471   +
1009472   +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
1009473   +
1009474   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1009475   +
1009476   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1009477   +
1009478   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1009479   +
1009480   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1009481   +
1009482   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1009483   +
1009484   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1009485   +
1009486   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1009487   +
1009488   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1009489   +
1009490   +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
1009491   +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
1009492   +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
1009493   +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1009494   +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1009495   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1009496   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1009497   +end;
MPRINT(EM_DIAGRAM):   end;
1009498   +else do;
MPRINT(EM_DIAGRAM):   else do;
1009499   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1009500   +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
1009501   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1009502   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1009503   +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
1009504   +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
1009505   +   end;
MPRINT(EM_DIAGRAM):   end;
1009506   +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
1009507   +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
1009508   +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
1009509   +   end;
MPRINT(EM_DIAGRAM):   end;
1009510   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
1009511   +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
1009512   +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
1009513   +   end;
MPRINT(EM_DIAGRAM):   end;
1009514   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1009515   +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
1009516   +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
1009517   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1009518   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1009519   +   end;
MPRINT(EM_DIAGRAM):   end;
1009520   +end;
MPRINT(EM_DIAGRAM):   end;
1009521   +
1009522   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009523   +*** Checking missing input Interval
1009524   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1009525   +
1009526   +IF NMISS(
1009527   +   AcceptedCmpTotal ,
1009528   +   Frq ,
1009529   +   Income ,
1009530   +   Mnt ,
1009531   +   MntGoldProds ,
1009532   +   MntMeatProducts ,
1009533   +   MntWines ,
1009534   +   NumDistPurchases ,
1009535   +   RFMstat ,
1009536   +   RMntFrq ,
1009537   +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
1009538   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1009539   +
1009540   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1009541   +END;
MPRINT(EM_DIAGRAM):   END;
1009542   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009543   +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
1009544   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009545   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1009546   +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1009547   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1009548   +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1009549   +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1009550   +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1009551   +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1009552   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
1009553   +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1009554   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1009555   +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1009556   +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1009557   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1009558   +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1009559   +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1009560   +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1009561   +END;
MPRINT(EM_DIAGRAM):   END;
1009562   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1009563   +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
1009564   +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
1009565   +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
1009566   +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
1009567   +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
1009568   +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
1009569   +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
1009570   +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
1009571   +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
1009572   +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
1009573   +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
1009574   +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
1009575   +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
1009576   +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
1009577   +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
1009578   +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
1009579   +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
1009580   +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
1009581   +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
1009582   +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
1009583   +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
1009584   +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
1009585   +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
1009586   +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
1009587   +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
1009588   +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
1009589   +END;
MPRINT(EM_DIAGRAM):   END;
1009590   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009591   +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
1009592   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009593   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009594   +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
1009595   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009596   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1009597   +   H11  =     0.40839920245437 * S_AcceptedCmpTotal  +    -0.80301052154323 *
1009598   +        S_Frq  +     0.19839975683497 * S_Income  +    -0.71099382445924 *
1009599   +        S_Mnt  +    -0.15644638799226 * S_MntGoldProds
1009600   +          +    -0.05910355740416 * S_MntMeatProducts
1009601   +          +     0.23095157103241 * S_MntWines  +     0.67840217585411 *
1009602   +        S_NumDistPurchases  +     0.12536920827324 * S_RFMstat
1009603   +          +    -0.27246125863137 * S_RMntFrq  +    -1.02114645988925 *
1009604   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.40839920245437 * S_AcceptedCmpTotal + -0.80301052154323 * S_Frq 
+ 0.19839975683497 * S_Income + -0.71099382445924 * S_Mnt + -0.15644638799226 * S_MntGoldProds 
+ -0.05910355740416 * S_MntMeatProducts + 0.23095157103241 * S_MntWines + 0.67840217585411 * 
S_NumDistPurchases + 0.12536920827324 * S_RFMstat + -0.27246125863137 * S_RMntFrq + 
-1.02114645988925 * S_Recency ;
1009605   +   H12  =    -0.09503041118006 * S_AcceptedCmpTotal  +     0.74672296647411 *
1009606   +        S_Frq  +     1.82688988564051 * S_Income  +    -0.06831964209279 *
1009607   +        S_Mnt  +    -0.13330887266177 * S_MntGoldProds
1009608   +          +     0.09400377526937 * S_MntMeatProducts
1009609   +          +    -0.53358910675611 * S_MntWines  +     0.13886503925085 *
1009610   +        S_NumDistPurchases  +     0.02243224025219 * S_RFMstat
1009611   +          +    -0.03110171961938 * S_RMntFrq  +     0.39055670382948 *
1009612   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.09503041118006 * S_AcceptedCmpTotal + 0.74672296647411 * S_Frq 
+ 1.82688988564051 * S_Income + -0.06831964209279 * S_Mnt + -0.13330887266177 * S_MntGoldProds 
+ 0.09400377526937 * S_MntMeatProducts + -0.53358910675611 * S_MntWines + 0.13886503925085 * 
S_NumDistPurchases + 0.02243224025219 * S_RFMstat + -0.03110171961938 * S_RMntFrq + 
0.39055670382948 * S_Recency ;
1009613   +   H13  =    -0.07144509122078 * S_AcceptedCmpTotal  +     0.65325962599673 *
1009614   +        S_Frq  +     0.03169199805286 * S_Income  +     0.53573115818994 *
1009615   +        S_Mnt  +     0.13372718478424 * S_MntGoldProds
1009616   +          +    -1.62740823190029 * S_MntMeatProducts
1009617   +          +     0.15642273844597 * S_MntWines  +    -0.78908066213044 *
1009618   +        S_NumDistPurchases  +     -0.4365555360753 * S_RFMstat
1009619   +          +    -0.63552932650743 * S_RMntFrq  +     0.17699292292485 *
1009620   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = -0.07144509122078 * S_AcceptedCmpTotal + 0.65325962599673 * S_Frq 
+ 0.03169199805286 * S_Income + 0.53573115818994 * S_Mnt + 0.13372718478424 * S_MntGoldProds + 
-1.62740823190029 * S_MntMeatProducts + 0.15642273844597 * S_MntWines + -0.78908066213044 * 
S_NumDistPurchases + -0.4365555360753 * S_RFMstat + -0.63552932650743 * S_RMntFrq + 
0.17699292292485 * S_Recency ;
1009621   +   H14  =     0.03098188354318 * S_AcceptedCmpTotal  +    -0.04737735825642 *
1009622   +        S_Frq  +     0.30967861276694 * S_Income  +    -0.03786683388502 *
1009623   +        S_Mnt  +     0.25532115520236 * S_MntGoldProds
1009624   +          +      0.3965117290354 * S_MntMeatProducts
1009625   +          +     0.36188945634536 * S_MntWines  +    -0.24664355133344 *
1009626   +        S_NumDistPurchases  +     0.15627885374544 * S_RFMstat
1009627   +          +    -0.10763737759383 * S_RMntFrq  +     -0.4091862538023 *
1009628   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.03098188354318 * S_AcceptedCmpTotal + -0.04737735825642 * S_Frq 
+ 0.30967861276694 * S_Income + -0.03786683388502 * S_Mnt + 0.25532115520236 * S_MntGoldProds 
+ 0.3965117290354 * S_MntMeatProducts + 0.36188945634536 * S_MntWines + -0.24664355133344 * 
S_NumDistPurchases + 0.15627885374544 * S_RFMstat + -0.10763737759383 * S_RMntFrq + 
-0.4091862538023 * S_Recency ;
1009629   +   H15  =     0.27467896926965 * S_AcceptedCmpTotal  +    -1.33897347254907 *
1009630   +        S_Frq  +    -0.08574739739253 * S_Income  +    -0.68536026344277 *
1009631   +        S_Mnt  +     0.08729572232071 * S_MntGoldProds
1009632   +          +     1.44231431118379 * S_MntMeatProducts
1009633   +          +    -0.09322237385561 * S_MntWines  +      1.5568901785563 *
1009634   +        S_NumDistPurchases  +     0.06237505409693 * S_RFMstat
1009635   +          +    -1.04636887800306 * S_RMntFrq  +    -0.38411527089703 *
1009636   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.27467896926965 * S_AcceptedCmpTotal + -1.33897347254907 * S_Frq 
+ -0.08574739739253 * S_Income + -0.68536026344277 * S_Mnt + 0.08729572232071 * S_MntGoldProds 
+ 1.44231431118379 * S_MntMeatProducts + -0.09322237385561 * S_MntWines + 1.5568901785563 * 
S_NumDistPurchases + 0.06237505409693 * S_RFMstat + -1.04636887800306 * S_RMntFrq + 
-0.38411527089703 * S_Recency ;
1009637   +   H16  =    -0.89143353938241 * S_AcceptedCmpTotal  +     0.45211708970504 *
1009638   +        S_Frq  +    -0.44897699945178 * S_Income  +    -0.32314426452158 *
1009639   +        S_Mnt  +    -0.32329530597419 * S_MntGoldProds
1009640   +          +    -0.44244305964257 * S_MntMeatProducts
1009641   +          +    -0.04171589876809 * S_MntWines  +     0.42122451368745 *
1009642   +        S_NumDistPurchases  +    -0.15802898075961 * S_RFMstat
1009643   +          +    -0.40329155853226 * S_RMntFrq  +    -0.65176917675454 *
1009644   +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.89143353938241 * S_AcceptedCmpTotal + 0.45211708970504 * S_Frq 
+ -0.44897699945178 * S_Income + -0.32314426452158 * S_Mnt + -0.32329530597419 * 
S_MntGoldProds + -0.44244305964257 * S_MntMeatProducts + -0.04171589876809 * S_MntWines + 
0.42122451368745 * S_NumDistPurchases + -0.15802898075961 * S_RFMstat + -0.40329155853226 * 
S_RMntFrq + -0.65176917675454 * S_Recency ;
1009645   +   H11  = H11  +     0.01448447530274 * G_Marital_Status0
1009646   +          +     0.42194179998625 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.01448447530274 * G_Marital_Status0 + 0.42194179998625 * 
G_Marital_Status1 ;
1009647   +   H12  = H12  +     0.12689198218881 * G_Marital_Status0
1009648   +          +     0.13222809503301 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.12689198218881 * G_Marital_Status0 + 0.13222809503301 * 
G_Marital_Status1 ;
1009649   +   H13  = H13  +     0.02279524261833 * G_Marital_Status0
1009650   +          +     0.22562672580832 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.02279524261833 * G_Marital_Status0 + 0.22562672580832 * 
G_Marital_Status1 ;
1009651   +   H14  = H14  +     1.11856448462308 * G_Marital_Status0
1009652   +          +     0.27730078918446 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 1.11856448462308 * G_Marital_Status0 + 0.27730078918446 * 
G_Marital_Status1 ;
1009653   +   H15  = H15  +    -0.04694745686684 * G_Marital_Status0
1009654   +          +     0.25879365732348 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.04694745686684 * G_Marital_Status0 + 0.25879365732348 * 
G_Marital_Status1 ;
1009655   +   H16  = H16  +    -0.22835702249634 * G_Marital_Status0
1009656   +          +     0.18090765090711 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.22835702249634 * G_Marital_Status0 + 0.18090765090711 * 
G_Marital_Status1 ;
1009657   +   H11  =     1.23863858658783 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.23863858658783 + H11 ;
1009658   +   H12  =    -0.12218156586843 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.12218156586843 + H12 ;
1009659   +   H13  =    -1.28170837349164 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.28170837349164 + H13 ;
1009660   +   H14  =    -2.07579206307318 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.07579206307318 + H14 ;
1009661   +   H15  =    -0.99934113480463 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.99934113480463 + H15 ;
1009662   +   H16  =     1.30250382782737 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 1.30250382782737 + H16 ;
1009663   +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
1009664   +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
1009665   +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
1009666   +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
1009667   +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
1009668   +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
1009669   +END;
MPRINT(EM_DIAGRAM):   END;
1009670   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1009671   +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
1009672   +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
1009673   +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
1009674   +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
1009675   +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
1009676   +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
1009677   +END;
MPRINT(EM_DIAGRAM):   END;
1009678   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009679   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1009680   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009681   +
1009682   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1009683   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1009684   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1009685   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1009686   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1009687   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1009688   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1009689   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1009690   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1009691   +end;
MPRINT(EM_DIAGRAM):   end;
1009692   +else do;
MPRINT(EM_DIAGRAM):   else do;
1009693   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1009694   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1009695   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1009696   +   end;
MPRINT(EM_DIAGRAM):   end;
1009697   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1009698   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1009699   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1009700   +   end;
MPRINT(EM_DIAGRAM):   end;
1009701   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1009702   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1009703   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1009704   +   end;
MPRINT(EM_DIAGRAM):   end;
1009705   +end;
MPRINT(EM_DIAGRAM):   end;
1009706   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1009707   +   P_DepVar1  =     3.62046962800706 * H11  +      -1.860875673098 * H12
1009708   +          +    -3.65105027155196 * H13  +     2.14381074770309 * H14
1009709   +          +     3.35729012959095 * H15  +    -2.46245459087361 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.62046962800706 * H11 + -1.860875673098 * H12 + 
-3.65105027155196 * H13 + 2.14381074770309 * H14 + 3.35729012959095 * H15 + -2.46245459087361 
* H16 ;
1009710   +   P_DepVar1  =    -2.50510283018473 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.50510283018473 + P_DepVar1 ;
1009711   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1009712   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1009713   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1009714   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1009715   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1009716   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1009717   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1009718   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1009719   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1009720   +END;
MPRINT(EM_DIAGRAM):   END;
1009721   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1009722   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1009723   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1009724   +END;
MPRINT(EM_DIAGRAM):   END;
1009725   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1009726   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1009727   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1009728   +END;
MPRINT(EM_DIAGRAM):   END;
1009729   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1009730   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1009731   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1009732   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1009733   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1009734   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1009735   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1009736   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009737   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1009738   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1009739   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1009740   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1009741   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1009742   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1009743   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1009744   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1009745   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1009746   +END;
MPRINT(EM_DIAGRAM):   END;
1009747   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1009748   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1009749   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1009750   +drop
1009751   +H11
1009752   +H12
1009753   +H13
1009754   +H14
1009755   +H15
1009756   +H16
1009757   +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
1009758   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1009759    run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1009760    quit;
1009761    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1009762    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1009763    * Neural28: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural28: Computing metadata for TRAIN data;
1009764    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural28_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural28_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural28_TRAIN out=WORK.M1PET37Q noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1PET37Q;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PET37Q(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1PET37Q;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PET37Q;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2NSDJ1M NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2NSDJ1M;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2NSDJ1M;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3B2V7O1(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2NSDJ1M;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2NSDJ1M;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2NSDJ1M;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2NSDJ1M;
MPRINT(EMADVISECOLUMNS):   set WORK.M2NSDJ1M;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural28";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural28";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1010076    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1010077    set EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO;
1010078    where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
1010079    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL28_EMINFO.
      WHERE (DATA='Neural28') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1010080    data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural28_EMINFO;
1010081    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1010082    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1010083    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
1010087    run;
1010088    data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
1010089    set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
1010090    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1010091    proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
1010092    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1010093    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1010094    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1010095    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1010096    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1010097    proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1010098    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1010099    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1010100    data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
1010101    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1010102    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1010103    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1010104    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1010105    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1010106    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1010107    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL28_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
