MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "21. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18.50 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                21. April 2016
Time:                18.50 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3HRJI0B 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3HRJI0B new;
MPRINT(EM_DIAGRAM):   run;
508525     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
508526     set EMWS8.Neural28_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_OUTKEY;
508527     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
508528     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set EMWS8.NEURAL28_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

508529     filename emflow
508529   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
508530     *------------------------------------------------------------*;
508531     * Neural28: Scoring DATA data;
508532     *------------------------------------------------------------*;
508533     data EMWS8.Neural28_TRAIN
508534     / view=EMWS8.Neural28_TRAIN
508535     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_TRAIN / view=EMWS8.Neural28_TRAIN ;
508536     set EMWS8.Varsel_TRAIN
508537     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
508538     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
508539    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508540    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
508541    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508542    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
508543    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
508544    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
508545    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
508546    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
508547    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
508548    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
508549    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
508550    +LENGTH _WARN_ $4
508551    +      F_DepVar  $ 12
508552    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
508553    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
508554    +
508555    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
508556    +
508557    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
508558    +
508559    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
508560    +
508561    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
508562    +
508563    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
508564    +
508565    +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
508566    +
508567    +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
508568    +
508569    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
508570    +
508571    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
508572    +
508573    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
508574    +
508575    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
508576    +
508577    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
508578    +
508579    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
508580    +
508581    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
508582    +
508583    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
508584    +
508585    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
508586    +
508587    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
508588    +
508589    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
508590    +
508591    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
508592    +
508593    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
508594    +
508595    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
508596    +
508597    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
508598    +
508599    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
508600    +
508601    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
508602    +
508603    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
508604    +
508605    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
508606    +
508607    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
508608    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
508609    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
508610    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508611    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508612    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
508613    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508614    +end;
MPRINT(EM_DIAGRAM):   end;
508615    +else do;
MPRINT(EM_DIAGRAM):   else do;
508616    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
508617    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
508618    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
508619    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
508620    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
508621    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
508622    +   end;
MPRINT(EM_DIAGRAM):   end;
508623    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
508624    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
508625    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
508626    +   end;
MPRINT(EM_DIAGRAM):   end;
508627    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
508628    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
508629    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
508630    +   end;
MPRINT(EM_DIAGRAM):   end;
508631    +   else do;
MPRINT(EM_DIAGRAM):   else do;
508632    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508633    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508634    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
508635    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508636    +   end;
MPRINT(EM_DIAGRAM):   end;
508637    +end;
MPRINT(EM_DIAGRAM):   end;
508638    +
508639    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508640    +*** Checking missing input Interval
508641    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
508642    +
508643    +IF NMISS(
508644    +   AcceptedCmpTotal ,
508645    +   Frq ,
508646    +   Income ,
508647    +   Mnt ,
508648    +   MntGoldProds ,
508649    +   MntMeatProducts ,
508650    +   MntWines ,
508651    +   NumDistPurchases ,
508652    +   RFMstat ,
508653    +   RMntFrq ,
508654    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
508655    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
508656    +
508657    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508658    +END;
MPRINT(EM_DIAGRAM):   END;
508659    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508660    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
508661    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508662    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508663    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
508664    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
508665    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
508666    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
508667    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
508668    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
508669    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
508670    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
508671    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
508672    +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
508673    +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
508674    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
508675    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
508676    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
508677    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
508678    +END;
MPRINT(EM_DIAGRAM):   END;
508679    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508680    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
508681    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
508682    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
508683    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
508684    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
508685    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
508686    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
508687    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
508688    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
508689    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
508690    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
508691    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
508692    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
508693    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
508694    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
508695    +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
508696    +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
508697    +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
508698    +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
508699    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
508700    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
508701    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
508702    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
508703    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
508704    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
508705    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
508706    +END;
MPRINT(EM_DIAGRAM):   END;
508707    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508708    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
508709    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508710    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508711    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
508712    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508713    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508714    +   H11  =     0.40839920245437 * S_AcceptedCmpTotal  +    -0.80301052154323 *
508715    +        S_Frq  +     0.19839975683497 * S_Income  +    -0.71099382445924 *
508716    +        S_Mnt  +    -0.15644638799226 * S_MntGoldProds
508717    +          +    -0.05910355740416 * S_MntMeatProducts
508718    +          +     0.23095157103241 * S_MntWines  +     0.67840217585411 *
508719    +        S_NumDistPurchases  +     0.12536920827324 * S_RFMstat
508720    +          +    -0.27246125863137 * S_RMntFrq  +    -1.02114645988925 *
508721    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.40839920245437 * S_AcceptedCmpTotal + -0.80301052154323 * S_Frq 
+ 0.19839975683497 * S_Income + -0.71099382445924 * S_Mnt + -0.15644638799226 * S_MntGoldProds 
+ -0.05910355740416 * S_MntMeatProducts + 0.23095157103241 * S_MntWines + 0.67840217585411 * 
S_NumDistPurchases + 0.12536920827324 * S_RFMstat + -0.27246125863137 * S_RMntFrq + 
-1.02114645988925 * S_Recency ;
508722    +   H12  =    -0.09503041118006 * S_AcceptedCmpTotal  +     0.74672296647411 *
508723    +        S_Frq  +     1.82688988564051 * S_Income  +    -0.06831964209279 *
508724    +        S_Mnt  +    -0.13330887266177 * S_MntGoldProds
508725    +          +     0.09400377526937 * S_MntMeatProducts
508726    +          +    -0.53358910675611 * S_MntWines  +     0.13886503925085 *
508727    +        S_NumDistPurchases  +     0.02243224025219 * S_RFMstat
508728    +          +    -0.03110171961938 * S_RMntFrq  +     0.39055670382948 *
508729    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.09503041118006 * S_AcceptedCmpTotal + 0.74672296647411 * S_Frq 
+ 1.82688988564051 * S_Income + -0.06831964209279 * S_Mnt + -0.13330887266177 * S_MntGoldProds 
+ 0.09400377526937 * S_MntMeatProducts + -0.53358910675611 * S_MntWines + 0.13886503925085 * 
S_NumDistPurchases + 0.02243224025219 * S_RFMstat + -0.03110171961938 * S_RMntFrq + 
0.39055670382948 * S_Recency ;
508730    +   H13  =    -0.07144509122078 * S_AcceptedCmpTotal  +     0.65325962599673 *
508731    +        S_Frq  +     0.03169199805286 * S_Income  +     0.53573115818994 *
508732    +        S_Mnt  +     0.13372718478424 * S_MntGoldProds
508733    +          +    -1.62740823190029 * S_MntMeatProducts
508734    +          +     0.15642273844597 * S_MntWines  +    -0.78908066213044 *
508735    +        S_NumDistPurchases  +     -0.4365555360753 * S_RFMstat
508736    +          +    -0.63552932650743 * S_RMntFrq  +     0.17699292292485 *
508737    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = -0.07144509122078 * S_AcceptedCmpTotal + 0.65325962599673 * S_Frq 
+ 0.03169199805286 * S_Income + 0.53573115818994 * S_Mnt + 0.13372718478424 * S_MntGoldProds + 
-1.62740823190029 * S_MntMeatProducts + 0.15642273844597 * S_MntWines + -0.78908066213044 * 
S_NumDistPurchases + -0.4365555360753 * S_RFMstat + -0.63552932650743 * S_RMntFrq + 
0.17699292292485 * S_Recency ;
508738    +   H14  =     0.03098188354318 * S_AcceptedCmpTotal  +    -0.04737735825642 *
508739    +        S_Frq  +     0.30967861276694 * S_Income  +    -0.03786683388502 *
508740    +        S_Mnt  +     0.25532115520236 * S_MntGoldProds
508741    +          +      0.3965117290354 * S_MntMeatProducts
508742    +          +     0.36188945634536 * S_MntWines  +    -0.24664355133344 *
508743    +        S_NumDistPurchases  +     0.15627885374544 * S_RFMstat
508744    +          +    -0.10763737759383 * S_RMntFrq  +     -0.4091862538023 *
508745    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.03098188354318 * S_AcceptedCmpTotal + -0.04737735825642 * S_Frq 
+ 0.30967861276694 * S_Income + -0.03786683388502 * S_Mnt + 0.25532115520236 * S_MntGoldProds 
+ 0.3965117290354 * S_MntMeatProducts + 0.36188945634536 * S_MntWines + -0.24664355133344 * 
S_NumDistPurchases + 0.15627885374544 * S_RFMstat + -0.10763737759383 * S_RMntFrq + 
-0.4091862538023 * S_Recency ;
508746    +   H15  =     0.27467896926965 * S_AcceptedCmpTotal  +    -1.33897347254907 *
508747    +        S_Frq  +    -0.08574739739253 * S_Income  +    -0.68536026344277 *
508748    +        S_Mnt  +     0.08729572232071 * S_MntGoldProds
508749    +          +     1.44231431118379 * S_MntMeatProducts
508750    +          +    -0.09322237385561 * S_MntWines  +      1.5568901785563 *
508751    +        S_NumDistPurchases  +     0.06237505409693 * S_RFMstat
508752    +          +    -1.04636887800306 * S_RMntFrq  +    -0.38411527089703 *
508753    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.27467896926965 * S_AcceptedCmpTotal + -1.33897347254907 * S_Frq 
+ -0.08574739739253 * S_Income + -0.68536026344277 * S_Mnt + 0.08729572232071 * S_MntGoldProds 
+ 1.44231431118379 * S_MntMeatProducts + -0.09322237385561 * S_MntWines + 1.5568901785563 * 
S_NumDistPurchases + 0.06237505409693 * S_RFMstat + -1.04636887800306 * S_RMntFrq + 
-0.38411527089703 * S_Recency ;
508754    +   H16  =    -0.89143353938241 * S_AcceptedCmpTotal  +     0.45211708970504 *
508755    +        S_Frq  +    -0.44897699945178 * S_Income  +    -0.32314426452158 *
508756    +        S_Mnt  +    -0.32329530597419 * S_MntGoldProds
508757    +          +    -0.44244305964257 * S_MntMeatProducts
508758    +          +    -0.04171589876809 * S_MntWines  +     0.42122451368745 *
508759    +        S_NumDistPurchases  +    -0.15802898075961 * S_RFMstat
508760    +          +    -0.40329155853226 * S_RMntFrq  +    -0.65176917675454 *
508761    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.89143353938241 * S_AcceptedCmpTotal + 0.45211708970504 * S_Frq 
+ -0.44897699945178 * S_Income + -0.32314426452158 * S_Mnt + -0.32329530597419 * 
S_MntGoldProds + -0.44244305964257 * S_MntMeatProducts + -0.04171589876809 * S_MntWines + 
0.42122451368745 * S_NumDistPurchases + -0.15802898075961 * S_RFMstat + -0.40329155853226 * 
S_RMntFrq + -0.65176917675454 * S_Recency ;
508762    +   H11  = H11  +     0.01448447530274 * G_Marital_Status0
508763    +          +     0.42194179998625 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.01448447530274 * G_Marital_Status0 + 0.42194179998625 * 
G_Marital_Status1 ;
508764    +   H12  = H12  +     0.12689198218881 * G_Marital_Status0
508765    +          +     0.13222809503301 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.12689198218881 * G_Marital_Status0 + 0.13222809503301 * 
G_Marital_Status1 ;
508766    +   H13  = H13  +     0.02279524261833 * G_Marital_Status0
508767    +          +     0.22562672580832 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.02279524261833 * G_Marital_Status0 + 0.22562672580832 * 
G_Marital_Status1 ;
508768    +   H14  = H14  +     1.11856448462308 * G_Marital_Status0
508769    +          +     0.27730078918446 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 1.11856448462308 * G_Marital_Status0 + 0.27730078918446 * 
G_Marital_Status1 ;
508770    +   H15  = H15  +    -0.04694745686684 * G_Marital_Status0
508771    +          +     0.25879365732348 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.04694745686684 * G_Marital_Status0 + 0.25879365732348 * 
G_Marital_Status1 ;
508772    +   H16  = H16  +    -0.22835702249634 * G_Marital_Status0
508773    +          +     0.18090765090711 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.22835702249634 * G_Marital_Status0 + 0.18090765090711 * 
G_Marital_Status1 ;
508774    +   H11  =     1.23863858658783 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.23863858658783 + H11 ;
508775    +   H12  =    -0.12218156586843 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.12218156586843 + H12 ;
508776    +   H13  =    -1.28170837349164 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.28170837349164 + H13 ;
508777    +   H14  =    -2.07579206307318 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.07579206307318 + H14 ;
508778    +   H15  =    -0.99934113480463 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.99934113480463 + H15 ;
508779    +   H16  =     1.30250382782737 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 1.30250382782737 + H16 ;
508780    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
508781    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
508782    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
508783    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
508784    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
508785    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
508786    +END;
MPRINT(EM_DIAGRAM):   END;
508787    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508788    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
508789    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
508790    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
508791    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
508792    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
508793    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
508794    +END;
MPRINT(EM_DIAGRAM):   END;
508795    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508796    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
508797    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508798    +
508799    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
508800    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
508801    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
508802    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
508803    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
508804    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
508805    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
508806    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
508807    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
508808    +end;
MPRINT(EM_DIAGRAM):   end;
508809    +else do;
MPRINT(EM_DIAGRAM):   else do;
508810    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
508811    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
508812    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
508813    +   end;
MPRINT(EM_DIAGRAM):   end;
508814    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
508815    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
508816    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
508817    +   end;
MPRINT(EM_DIAGRAM):   end;
508818    +   else do;
MPRINT(EM_DIAGRAM):   else do;
508819    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
508820    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
508821    +   end;
MPRINT(EM_DIAGRAM):   end;
508822    +end;
MPRINT(EM_DIAGRAM):   end;
508823    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508824    +   P_DepVar1  =     3.62046962800706 * H11  +      -1.860875673098 * H12
508825    +          +    -3.65105027155196 * H13  +     2.14381074770309 * H14
508826    +          +     3.35729012959095 * H15  +    -2.46245459087361 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.62046962800706 * H11 + -1.860875673098 * H12 + 
-3.65105027155196 * H13 + 2.14381074770309 * H14 + 3.35729012959095 * H15 + -2.46245459087361 
* H16 ;
508827    +   P_DepVar1  =    -2.50510283018473 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.50510283018473 + P_DepVar1 ;
508828    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
508829    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
508830    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
508831    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
508832    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
508833    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
508834    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
508835    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
508836    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
508837    +END;
MPRINT(EM_DIAGRAM):   END;
508838    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508839    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
508840    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
508841    +END;
MPRINT(EM_DIAGRAM):   END;
508842    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
508843    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
508844    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
508845    +END;
MPRINT(EM_DIAGRAM):   END;
508846    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
508847    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
508848    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
508849    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
508850    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
508851    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
508852    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
508853    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508854    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
508855    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508856    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
508857    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
508858    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
508859    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
508860    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
508861    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
508862    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
508863    +END;
MPRINT(EM_DIAGRAM):   END;
508864    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
508865    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
508866    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
508867    +drop
508868    +H11
508869    +H12
508870    +H13
508871    +H14
508872    +H15
508873    +H16
508874    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
508875    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
508876     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
508877     quit;
508878     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
508879     filename emflow
508879   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
508880     *------------------------------------------------------------*;
508881     * Neural28: Scoring VALIDATE data;
508882     *------------------------------------------------------------*;
508883     data EMWS8.Neural28_VALIDATE
508884     / view=EMWS8.Neural28_VALIDATE
508885     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_VALIDATE / view=EMWS8.Neural28_VALIDATE ;
508886     set EMWS8.Varsel_VALIDATE
508887     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
508888     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
508889    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508890    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
508891    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508892    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
508893    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
508894    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
508895    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
508896    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
508897    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
508898    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
508899    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
508900    +LENGTH _WARN_ $4
508901    +      F_DepVar  $ 12
508902    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
508903    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
508904    +
508905    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
508906    +
508907    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
508908    +
508909    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
508910    +
508911    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
508912    +
508913    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
508914    +
508915    +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
508916    +
508917    +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
508918    +
508919    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
508920    +
508921    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
508922    +
508923    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
508924    +
508925    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
508926    +
508927    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
508928    +
508929    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
508930    +
508931    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
508932    +
508933    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
508934    +
508935    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
508936    +
508937    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
508938    +
508939    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
508940    +
508941    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
508942    +
508943    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
508944    +
508945    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
508946    +
508947    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
508948    +
508949    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
508950    +
508951    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
508952    +
508953    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
508954    +
508955    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
508956    +
508957    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
508958    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
508959    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
508960    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508961    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508962    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
508963    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508964    +end;
MPRINT(EM_DIAGRAM):   end;
508965    +else do;
MPRINT(EM_DIAGRAM):   else do;
508966    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
508967    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
508968    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
508969    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
508970    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
508971    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
508972    +   end;
MPRINT(EM_DIAGRAM):   end;
508973    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
508974    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
508975    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
508976    +   end;
MPRINT(EM_DIAGRAM):   end;
508977    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
508978    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
508979    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
508980    +   end;
MPRINT(EM_DIAGRAM):   end;
508981    +   else do;
MPRINT(EM_DIAGRAM):   else do;
508982    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508983    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508984    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
508985    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508986    +   end;
MPRINT(EM_DIAGRAM):   end;
508987    +end;
MPRINT(EM_DIAGRAM):   end;
508988    +
508989    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508990    +*** Checking missing input Interval
508991    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
508992    +
508993    +IF NMISS(
508994    +   AcceptedCmpTotal ,
508995    +   Frq ,
508996    +   Income ,
508997    +   Mnt ,
508998    +   MntGoldProds ,
508999    +   MntMeatProducts ,
509000    +   MntWines ,
509001    +   NumDistPurchases ,
509002    +   RFMstat ,
509003    +   RMntFrq ,
509004    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
509005    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
509006    +
509007    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
509008    +END;
MPRINT(EM_DIAGRAM):   END;
509009    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509010    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
509011    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509012    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
509013    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
509014    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
509015    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
509016    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
509017    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
509018    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
509019    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
509020    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
509021    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
509022    +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
509023    +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
509024    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
509025    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
509026    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
509027    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
509028    +END;
MPRINT(EM_DIAGRAM):   END;
509029    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
509030    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
509031    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
509032    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
509033    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
509034    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
509035    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
509036    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
509037    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
509038    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
509039    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
509040    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
509041    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
509042    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
509043    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
509044    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
509045    +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
509046    +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
509047    +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
509048    +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
509049    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
509050    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
509051    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
509052    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
509053    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
509054    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
509055    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
509056    +END;
MPRINT(EM_DIAGRAM):   END;
509057    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509058    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
509059    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509060    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509061    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
509062    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509063    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
509064    +   H11  =     0.40839920245437 * S_AcceptedCmpTotal  +    -0.80301052154323 *
509065    +        S_Frq  +     0.19839975683497 * S_Income  +    -0.71099382445924 *
509066    +        S_Mnt  +    -0.15644638799226 * S_MntGoldProds
509067    +          +    -0.05910355740416 * S_MntMeatProducts
509068    +          +     0.23095157103241 * S_MntWines  +     0.67840217585411 *
509069    +        S_NumDistPurchases  +     0.12536920827324 * S_RFMstat
509070    +          +    -0.27246125863137 * S_RMntFrq  +    -1.02114645988925 *
509071    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.40839920245437 * S_AcceptedCmpTotal + -0.80301052154323 * S_Frq 
+ 0.19839975683497 * S_Income + -0.71099382445924 * S_Mnt + -0.15644638799226 * S_MntGoldProds 
+ -0.05910355740416 * S_MntMeatProducts + 0.23095157103241 * S_MntWines + 0.67840217585411 * 
S_NumDistPurchases + 0.12536920827324 * S_RFMstat + -0.27246125863137 * S_RMntFrq + 
-1.02114645988925 * S_Recency ;
509072    +   H12  =    -0.09503041118006 * S_AcceptedCmpTotal  +     0.74672296647411 *
509073    +        S_Frq  +     1.82688988564051 * S_Income  +    -0.06831964209279 *
509074    +        S_Mnt  +    -0.13330887266177 * S_MntGoldProds
509075    +          +     0.09400377526937 * S_MntMeatProducts
509076    +          +    -0.53358910675611 * S_MntWines  +     0.13886503925085 *
509077    +        S_NumDistPurchases  +     0.02243224025219 * S_RFMstat
509078    +          +    -0.03110171961938 * S_RMntFrq  +     0.39055670382948 *
509079    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.09503041118006 * S_AcceptedCmpTotal + 0.74672296647411 * S_Frq 
+ 1.82688988564051 * S_Income + -0.06831964209279 * S_Mnt + -0.13330887266177 * S_MntGoldProds 
+ 0.09400377526937 * S_MntMeatProducts + -0.53358910675611 * S_MntWines + 0.13886503925085 * 
S_NumDistPurchases + 0.02243224025219 * S_RFMstat + -0.03110171961938 * S_RMntFrq + 
0.39055670382948 * S_Recency ;
509080    +   H13  =    -0.07144509122078 * S_AcceptedCmpTotal  +     0.65325962599673 *
509081    +        S_Frq  +     0.03169199805286 * S_Income  +     0.53573115818994 *
509082    +        S_Mnt  +     0.13372718478424 * S_MntGoldProds
509083    +          +    -1.62740823190029 * S_MntMeatProducts
509084    +          +     0.15642273844597 * S_MntWines  +    -0.78908066213044 *
509085    +        S_NumDistPurchases  +     -0.4365555360753 * S_RFMstat
509086    +          +    -0.63552932650743 * S_RMntFrq  +     0.17699292292485 *
509087    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = -0.07144509122078 * S_AcceptedCmpTotal + 0.65325962599673 * S_Frq 
+ 0.03169199805286 * S_Income + 0.53573115818994 * S_Mnt + 0.13372718478424 * S_MntGoldProds + 
-1.62740823190029 * S_MntMeatProducts + 0.15642273844597 * S_MntWines + -0.78908066213044 * 
S_NumDistPurchases + -0.4365555360753 * S_RFMstat + -0.63552932650743 * S_RMntFrq + 
0.17699292292485 * S_Recency ;
509088    +   H14  =     0.03098188354318 * S_AcceptedCmpTotal  +    -0.04737735825642 *
509089    +        S_Frq  +     0.30967861276694 * S_Income  +    -0.03786683388502 *
509090    +        S_Mnt  +     0.25532115520236 * S_MntGoldProds
509091    +          +      0.3965117290354 * S_MntMeatProducts
509092    +          +     0.36188945634536 * S_MntWines  +    -0.24664355133344 *
509093    +        S_NumDistPurchases  +     0.15627885374544 * S_RFMstat
509094    +          +    -0.10763737759383 * S_RMntFrq  +     -0.4091862538023 *
509095    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.03098188354318 * S_AcceptedCmpTotal + -0.04737735825642 * S_Frq 
+ 0.30967861276694 * S_Income + -0.03786683388502 * S_Mnt + 0.25532115520236 * S_MntGoldProds 
+ 0.3965117290354 * S_MntMeatProducts + 0.36188945634536 * S_MntWines + -0.24664355133344 * 
S_NumDistPurchases + 0.15627885374544 * S_RFMstat + -0.10763737759383 * S_RMntFrq + 
-0.4091862538023 * S_Recency ;
509096    +   H15  =     0.27467896926965 * S_AcceptedCmpTotal  +    -1.33897347254907 *
509097    +        S_Frq  +    -0.08574739739253 * S_Income  +    -0.68536026344277 *
509098    +        S_Mnt  +     0.08729572232071 * S_MntGoldProds
509099    +          +     1.44231431118379 * S_MntMeatProducts
509100    +          +    -0.09322237385561 * S_MntWines  +      1.5568901785563 *
509101    +        S_NumDistPurchases  +     0.06237505409693 * S_RFMstat
509102    +          +    -1.04636887800306 * S_RMntFrq  +    -0.38411527089703 *
509103    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.27467896926965 * S_AcceptedCmpTotal + -1.33897347254907 * S_Frq 
+ -0.08574739739253 * S_Income + -0.68536026344277 * S_Mnt + 0.08729572232071 * S_MntGoldProds 
+ 1.44231431118379 * S_MntMeatProducts + -0.09322237385561 * S_MntWines + 1.5568901785563 * 
S_NumDistPurchases + 0.06237505409693 * S_RFMstat + -1.04636887800306 * S_RMntFrq + 
-0.38411527089703 * S_Recency ;
509104    +   H16  =    -0.89143353938241 * S_AcceptedCmpTotal  +     0.45211708970504 *
509105    +        S_Frq  +    -0.44897699945178 * S_Income  +    -0.32314426452158 *
509106    +        S_Mnt  +    -0.32329530597419 * S_MntGoldProds
509107    +          +    -0.44244305964257 * S_MntMeatProducts
509108    +          +    -0.04171589876809 * S_MntWines  +     0.42122451368745 *
509109    +        S_NumDistPurchases  +    -0.15802898075961 * S_RFMstat
509110    +          +    -0.40329155853226 * S_RMntFrq  +    -0.65176917675454 *
509111    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.89143353938241 * S_AcceptedCmpTotal + 0.45211708970504 * S_Frq 
+ -0.44897699945178 * S_Income + -0.32314426452158 * S_Mnt + -0.32329530597419 * 
S_MntGoldProds + -0.44244305964257 * S_MntMeatProducts + -0.04171589876809 * S_MntWines + 
0.42122451368745 * S_NumDistPurchases + -0.15802898075961 * S_RFMstat + -0.40329155853226 * 
S_RMntFrq + -0.65176917675454 * S_Recency ;
509112    +   H11  = H11  +     0.01448447530274 * G_Marital_Status0
509113    +          +     0.42194179998625 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.01448447530274 * G_Marital_Status0 + 0.42194179998625 * 
G_Marital_Status1 ;
509114    +   H12  = H12  +     0.12689198218881 * G_Marital_Status0
509115    +          +     0.13222809503301 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.12689198218881 * G_Marital_Status0 + 0.13222809503301 * 
G_Marital_Status1 ;
509116    +   H13  = H13  +     0.02279524261833 * G_Marital_Status0
509117    +          +     0.22562672580832 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.02279524261833 * G_Marital_Status0 + 0.22562672580832 * 
G_Marital_Status1 ;
509118    +   H14  = H14  +     1.11856448462308 * G_Marital_Status0
509119    +          +     0.27730078918446 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 1.11856448462308 * G_Marital_Status0 + 0.27730078918446 * 
G_Marital_Status1 ;
509120    +   H15  = H15  +    -0.04694745686684 * G_Marital_Status0
509121    +          +     0.25879365732348 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.04694745686684 * G_Marital_Status0 + 0.25879365732348 * 
G_Marital_Status1 ;
509122    +   H16  = H16  +    -0.22835702249634 * G_Marital_Status0
509123    +          +     0.18090765090711 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.22835702249634 * G_Marital_Status0 + 0.18090765090711 * 
G_Marital_Status1 ;
509124    +   H11  =     1.23863858658783 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.23863858658783 + H11 ;
509125    +   H12  =    -0.12218156586843 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.12218156586843 + H12 ;
509126    +   H13  =    -1.28170837349164 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.28170837349164 + H13 ;
509127    +   H14  =    -2.07579206307318 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.07579206307318 + H14 ;
509128    +   H15  =    -0.99934113480463 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.99934113480463 + H15 ;
509129    +   H16  =     1.30250382782737 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 1.30250382782737 + H16 ;
509130    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
509131    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
509132    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
509133    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
509134    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
509135    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
509136    +END;
MPRINT(EM_DIAGRAM):   END;
509137    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
509138    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
509139    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
509140    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
509141    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
509142    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
509143    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
509144    +END;
MPRINT(EM_DIAGRAM):   END;
509145    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509146    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
509147    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509148    +
509149    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
509150    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
509151    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
509152    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
509153    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
509154    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
509155    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
509156    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
509157    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
509158    +end;
MPRINT(EM_DIAGRAM):   end;
509159    +else do;
MPRINT(EM_DIAGRAM):   else do;
509160    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
509161    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
509162    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
509163    +   end;
MPRINT(EM_DIAGRAM):   end;
509164    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
509165    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
509166    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
509167    +   end;
MPRINT(EM_DIAGRAM):   end;
509168    +   else do;
MPRINT(EM_DIAGRAM):   else do;
509169    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
509170    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
509171    +   end;
MPRINT(EM_DIAGRAM):   end;
509172    +end;
MPRINT(EM_DIAGRAM):   end;
509173    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
509174    +   P_DepVar1  =     3.62046962800706 * H11  +      -1.860875673098 * H12
509175    +          +    -3.65105027155196 * H13  +     2.14381074770309 * H14
509176    +          +     3.35729012959095 * H15  +    -2.46245459087361 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.62046962800706 * H11 + -1.860875673098 * H12 + 
-3.65105027155196 * H13 + 2.14381074770309 * H14 + 3.35729012959095 * H15 + -2.46245459087361 
* H16 ;
509177    +   P_DepVar1  =    -2.50510283018473 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.50510283018473 + P_DepVar1 ;
509178    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
509179    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
509180    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
509181    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
509182    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
509183    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
509184    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
509185    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
509186    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
509187    +END;
MPRINT(EM_DIAGRAM):   END;
509188    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
509189    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
509190    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
509191    +END;
MPRINT(EM_DIAGRAM):   END;
509192    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
509193    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
509194    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
509195    +END;
MPRINT(EM_DIAGRAM):   END;
509196    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
509197    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
509198    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
509199    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
509200    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
509201    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
509202    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
509203    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509204    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
509205    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
509206    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
509207    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
509208    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
509209    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
509210    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
509211    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
509212    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
509213    +END;
MPRINT(EM_DIAGRAM):   END;
509214    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
509215    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
509216    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
509217    +drop
509218    +H11
509219    +H12
509220    +H13
509221    +H14
509222    +H15
509223    +H16
509224    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
509225    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
509226     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
509227     quit;
509228     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
509229     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
509230     * Neural28: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural28: Computing metadata for TRAIN data;
509231     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural28_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural28_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural28_TRAIN out=WORK.M39KLNPL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39KLNPL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M39KLNPL(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39KLNPL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M39KLNPL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3F3D9R_ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3F3D9R_;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F3D9R_;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2E3HG7J(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F3D9R_;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3F3D9R_;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F3D9R_;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3F3D9R_;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F3D9R_;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural28";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural28";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
509543     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
509544     set EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO;
509545     where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
509546     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL28_EMINFO.
      WHERE (DATA='Neural28') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509547     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural28_EMINFO;
509548     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
509549     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
509550     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
509554     run;
509555     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
509556     set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
509557     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

509558     proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
509559     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509560     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509561     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
509562     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509563     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509564     proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
509565     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509566     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

509567     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
509568     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
509569     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509570     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509571     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
509572     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
509573     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
509574     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL28_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
