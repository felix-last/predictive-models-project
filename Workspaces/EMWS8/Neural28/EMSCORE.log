MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "12.31 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                12.31 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2I4NTR4 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2I4NTR4 new;
MPRINT(EM_DIAGRAM):   run;
816497     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
816498     set EMWS8.Neural28_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_OUTKEY;
816499     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
816500     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS8.NEURAL28_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

816501     filename emflow
816501   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
816502     *------------------------------------------------------------*;
816503     * Neural28: Scoring DATA data;
816504     *------------------------------------------------------------*;
816505     data EMWS8.Neural28_TRAIN
816506     / view=EMWS8.Neural28_TRAIN
816507     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_TRAIN / view=EMWS8.Neural28_TRAIN ;
816508     set EMWS8.Varsel_TRAIN
816509     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
816510     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
816511    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
816512    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
816513    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
816514    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
816515    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
816516    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
816517    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
816518    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
816519    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
816520    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
816521    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
816522    +LENGTH _WARN_ $4
816523    +      F_DepVar  $ 12
816524    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
816525    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
816526    +
816527    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
816528    +
816529    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
816530    +
816531    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
816532    +
816533    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
816534    +
816535    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
816536    +
816537    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
816538    +
816539    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
816540    +
816541    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
816542    +
816543    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
816544    +
816545    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
816546    +
816547    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
816548    +
816549    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
816550    +
816551    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
816552    +
816553    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
816554    +
816555    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
816556    +
816557    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
816558    +
816559    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
816560    +
816561    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
816562    +
816563    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
816564    +
816565    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
816566    +
816567    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
816568    +
816569    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
816570    +
816571    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
816572    +
816573    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
816574    +
816575    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
816576    +
816577    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
816578    +
816579    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
816580    +
816581    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
816582    +
816583    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
816584    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
816585    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
816586    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
816587    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
816588    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
816589    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816590    +end;
MPRINT(EM_DIAGRAM):   end;
816591    +else do;
MPRINT(EM_DIAGRAM):   else do;
816592    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
816593    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
816594    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
816595    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
816596    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
816597    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
816598    +   end;
MPRINT(EM_DIAGRAM):   end;
816599    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
816600    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
816601    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
816602    +   end;
MPRINT(EM_DIAGRAM):   end;
816603    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
816604    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
816605    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
816606    +   end;
MPRINT(EM_DIAGRAM):   end;
816607    +   else do;
MPRINT(EM_DIAGRAM):   else do;
816608    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
816609    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
816610    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
816611    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816612    +   end;
MPRINT(EM_DIAGRAM):   end;
816613    +end;
MPRINT(EM_DIAGRAM):   end;
816614    +
816615    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816616    +*** Checking missing input Interval
816617    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
816618    +
816619    +IF NMISS(
816620    +   AcceptedCmpTotal ,
816621    +   Frq ,
816622    +   Income ,
816623    +   Mnt ,
816624    +   MntFruits ,
816625    +   MntGoldProds ,
816626    +   MntMeatProducts ,
816627    +   MntSweetProducts ,
816628    +   NumCatalogPurchases ,
816629    +   NumWebPurchases ,
816630    +   RFMstat ,
816631    +   RMntFrq ,
816632    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
816633    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
816634    +
816635    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816636    +END;
MPRINT(EM_DIAGRAM):   END;
816637    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816638    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
816639    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816640    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
816641    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
816642    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
816643    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
816644    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
816645    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
816646    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
816647    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
816648    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
816649    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
816650    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
816651    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
816652    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
816653    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
816654    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
816655    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
816656    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
816657    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
816658    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
816659    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
816660    +END;
MPRINT(EM_DIAGRAM):   END;
816661    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
816662    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
816663    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
816664    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
816665    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
816666    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
816667    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
816668    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
816669    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
816670    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
816671    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
816672    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
816673    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
816674    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
816675    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
816676    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
816677    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
816678    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
816679    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
816680    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
816681    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
816682    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
816683    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
816684    +   ELSE S_NumCatalogPurchases
816685    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
816686    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
816687    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
816688    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
816689    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
816690    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
816691    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
816692    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
816693    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
816694    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
816695    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
816696    +END;
MPRINT(EM_DIAGRAM):   END;
816697    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816698    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
816699    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816700    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816701    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
816702    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816703    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
816704    +   H11  =     0.82631693872377 * S_AcceptedCmpTotal  +    -0.72798667283699 *
816705    +        S_Frq  +     0.15911649036122 * S_Income  +    -0.60456350734571 *
816706    +        S_Mnt  +    -0.74377544096034 * S_MntFruits  +    -0.12263914971644 *
816707    +        S_MntGoldProds  +     0.17677796203072 * S_MntMeatProducts
816708    +          +    -0.50748691839629 * S_MntSweetProducts
816709    +          +     0.64296516693494 * S_NumCatalogPurchases
816710    +          +     1.28350004565407 * S_NumWebPurchases
816711    +          +     0.21030868312225 * S_RFMstat  +    -0.39695828920844 *
816712    +        S_RMntFrq  +    -0.89895080438896 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.82631693872377 * S_AcceptedCmpTotal + -0.72798667283699 * S_Frq 
+ 0.15911649036122 * S_Income + -0.60456350734571 * S_Mnt + -0.74377544096034 * S_MntFruits + 
-0.12263914971644 * S_MntGoldProds + 0.17677796203072 * S_MntMeatProducts + -0.50748691839629 
* S_MntSweetProducts + 0.64296516693494 * S_NumCatalogPurchases + 1.28350004565407 * 
S_NumWebPurchases + 0.21030868312225 * S_RFMstat + -0.39695828920844 * S_RMntFrq + 
-0.89895080438896 * S_Recency ;
816713    +   H12  =     0.11667862669372 * S_AcceptedCmpTotal  +    -1.01106011934145 *
816714    +        S_Frq  +    -0.17716076384549 * S_Income  +    -0.24293226300477 *
816715    +        S_Mnt  +     -0.0787175302374 * S_MntFruits  +     0.00532047873906 *
816716    +        S_MntGoldProds  +     1.29466535738179 * S_MntMeatProducts
816717    +          +     0.17384010941361 * S_MntSweetProducts
816718    +          +     0.92948439877935 * S_NumCatalogPurchases
816719    +          +     0.22516927332959 * S_NumWebPurchases
816720    +          +     0.05028067999269 * S_RFMstat  +     0.78999743446302 *
816721    +        S_RMntFrq  +    -0.20939117765596 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.11667862669372 * S_AcceptedCmpTotal + -1.01106011934145 * S_Frq 
+ -0.17716076384549 * S_Income + -0.24293226300477 * S_Mnt + -0.0787175302374 * S_MntFruits + 
0.00532047873906 * S_MntGoldProds + 1.29466535738179 * S_MntMeatProducts + 0.17384010941361 * 
S_MntSweetProducts + 0.92948439877935 * S_NumCatalogPurchases + 0.22516927332959 * 
S_NumWebPurchases + 0.05028067999269 * S_RFMstat + 0.78999743446302 * S_RMntFrq + 
-0.20939117765596 * S_Recency ;
816722    +   H13  =     0.04357769443186 * S_AcceptedCmpTotal  +     0.15406703269953 *
816723    +        S_Frq  +     0.30195133876726 * S_Income  +     0.28819360890276 *
816724    +        S_Mnt  +     0.09892781576641 * S_MntFruits  +     0.49225212949739 *
816725    +        S_MntGoldProds  +     0.29770764897396 * S_MntMeatProducts
816726    +          +     -0.2000873376449 * S_MntSweetProducts
816727    +          +     0.12566784354514 * S_NumCatalogPurchases
816728    +          +     0.02104112723179 * S_NumWebPurchases
816729    +          +    -0.43415514019088 * S_RFMstat  +    -0.17022294749993 *
816730    +        S_RMntFrq  +     0.30357171575981 * S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.04357769443186 * S_AcceptedCmpTotal + 0.15406703269953 * S_Frq + 
0.30195133876726 * S_Income + 0.28819360890276 * S_Mnt + 0.09892781576641 * S_MntFruits + 
0.49225212949739 * S_MntGoldProds + 0.29770764897396 * S_MntMeatProducts + -0.2000873376449 * 
S_MntSweetProducts + 0.12566784354514 * S_NumCatalogPurchases + 0.02104112723179 * 
S_NumWebPurchases + -0.43415514019088 * S_RFMstat + -0.17022294749993 * S_RMntFrq + 
0.30357171575981 * S_Recency ;
816731    +   H14  =     0.89017550554492 * S_AcceptedCmpTotal  +    -1.24866436391906 *
816732    +        S_Frq  +    -0.83458596455814 * S_Income  +    -0.66942952173326 *
816733    +        S_Mnt  +    -0.22543485387319 * S_MntFruits  +    -0.10688181972933 *
816734    +        S_MntGoldProds  +     0.85050982143614 * S_MntMeatProducts
816735    +          +     0.12117759215087 * S_MntSweetProducts
816736    +          +     0.80203773582494 * S_NumCatalogPurchases
816737    +          +     0.17374160185958 * S_NumWebPurchases
816738    +          +    -0.12855081884938 * S_RFMstat  +     0.45921570261849 *
816739    +        S_RMntFrq  +    -1.09092321008268 * S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.89017550554492 * S_AcceptedCmpTotal + -1.24866436391906 * S_Frq 
+ -0.83458596455814 * S_Income + -0.66942952173326 * S_Mnt + -0.22543485387319 * S_MntFruits + 
-0.10688181972933 * S_MntGoldProds + 0.85050982143614 * S_MntMeatProducts + 0.12117759215087 * 
S_MntSweetProducts + 0.80203773582494 * S_NumCatalogPurchases + 0.17374160185958 * 
S_NumWebPurchases + -0.12855081884938 * S_RFMstat + 0.45921570261849 * S_RMntFrq + 
-1.09092321008268 * S_Recency ;
816740    +   H15  =    -0.68386094226468 * S_AcceptedCmpTotal  +    -0.44368664779237 *
816741    +        S_Frq  +    -0.63118593216016 * S_Income  +     -0.8549673235883 *
816742    +        S_Mnt  +     -0.4174049500068 * S_MntFruits  +    -0.02221537411568 *
816743    +        S_MntGoldProds  +      0.0634004340553 * S_MntMeatProducts
816744    +          +      0.2989820991785 * S_MntSweetProducts
816745    +          +     0.04398783976739 * S_NumCatalogPurchases
816746    +          +     0.40368640676572 * S_NumWebPurchases
816747    +          +    -0.50987577368598 * S_RFMstat  +    -0.24616064467414 *
816748    +        S_RMntFrq  +    -0.01932947962302 * S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = -0.68386094226468 * S_AcceptedCmpTotal + -0.44368664779237 * S_Frq 
+ -0.63118593216016 * S_Income + -0.8549673235883 * S_Mnt + -0.4174049500068 * S_MntFruits + 
-0.02221537411568 * S_MntGoldProds + 0.0634004340553 * S_MntMeatProducts + 0.2989820991785 * 
S_MntSweetProducts + 0.04398783976739 * S_NumCatalogPurchases + 0.40368640676572 * 
S_NumWebPurchases + -0.50987577368598 * S_RFMstat + -0.24616064467414 * S_RMntFrq + 
-0.01932947962302 * S_Recency ;
816749    +   H16  =    -0.69633356297868 * S_AcceptedCmpTotal  +     0.25580106272723 *
816750    +        S_Frq  +    -0.15941056497212 * S_Income  +     1.01091236070049 *
816751    +        S_Mnt  +    -0.16421220259024 * S_MntFruits  +    -0.28158219367628 *
816752    +        S_MntGoldProds  +    -0.80473865500071 * S_MntMeatProducts
816753    +          +     0.10950268819222 * S_MntSweetProducts
816754    +          +    -0.59025524598908 * S_NumCatalogPurchases
816755    +          +    -0.02069421817896 * S_NumWebPurchases
816756    +          +     -0.3615429826151 * S_RFMstat  +    -0.41611769964424 *
816757    +        S_RMntFrq  +     0.96940490611968 * S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.69633356297868 * S_AcceptedCmpTotal + 0.25580106272723 * S_Frq 
+ -0.15941056497212 * S_Income + 1.01091236070049 * S_Mnt + -0.16421220259024 * S_MntFruits + 
-0.28158219367628 * S_MntGoldProds + -0.80473865500071 * S_MntMeatProducts + 0.10950268819222 
* S_MntSweetProducts + -0.59025524598908 * S_NumCatalogPurchases + -0.02069421817896 * 
S_NumWebPurchases + -0.3615429826151 * S_RFMstat + -0.41611769964424 * S_RMntFrq + 
0.96940490611968 * S_Recency ;
816758    +   H11  = H11  +        0.45545922927 * G_Marital_Status0
816759    +          +     0.12818067118838 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.45545922927 * G_Marital_Status0 + 0.12818067118838 * 
G_Marital_Status1 ;
816760    +   H12  = H12  +    -0.20371081343188 * G_Marital_Status0
816761    +          +      0.0869800653918 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.20371081343188 * G_Marital_Status0 + 0.0869800653918 * 
G_Marital_Status1 ;
816762    +   H13  = H13  +    -0.33845151454936 * G_Marital_Status0
816763    +          +    -0.43733288680739 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.33845151454936 * G_Marital_Status0 + -0.43733288680739 * 
G_Marital_Status1 ;
816764    +   H14  = H14  +     0.11759980770855 * G_Marital_Status0
816765    +          +    -0.01680808105992 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.11759980770855 * G_Marital_Status0 + -0.01680808105992 * 
G_Marital_Status1 ;
816766    +   H15  = H15  +    -0.20605143700963 * G_Marital_Status0
816767    +          +     0.04987739539035 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.20605143700963 * G_Marital_Status0 + 0.04987739539035 * 
G_Marital_Status1 ;
816768    +   H16  = H16  +    -0.99478088512585 * G_Marital_Status0
816769    +          +    -0.35983290751115 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.99478088512585 * G_Marital_Status0 + -0.35983290751115 * 
G_Marital_Status1 ;
816770    +   H11  =    -0.72044866217862 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.72044866217862 + H11 ;
816771    +   H12  =     0.73797915336977 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.73797915336977 + H12 ;
816772    +   H13  =     0.82989235994379 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.82989235994379 + H13 ;
816773    +   H14  =    -0.48103007102008 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.48103007102008 + H14 ;
816774    +   H15  =     -0.4352791778041 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.4352791778041 + H15 ;
816775    +   H16  =      2.7027355184778 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 2.7027355184778 + H16 ;
816776    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
816777    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
816778    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
816779    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
816780    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
816781    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
816782    +END;
MPRINT(EM_DIAGRAM):   END;
816783    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
816784    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
816785    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
816786    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
816787    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
816788    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
816789    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
816790    +END;
MPRINT(EM_DIAGRAM):   END;
816791    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816792    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
816793    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816794    +
816795    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
816796    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
816797    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
816798    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
816799    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
816800    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
816801    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
816802    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
816803    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
816804    +end;
MPRINT(EM_DIAGRAM):   end;
816805    +else do;
MPRINT(EM_DIAGRAM):   else do;
816806    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
816807    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
816808    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
816809    +   end;
MPRINT(EM_DIAGRAM):   end;
816810    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
816811    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
816812    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
816813    +   end;
MPRINT(EM_DIAGRAM):   end;
816814    +   else do;
MPRINT(EM_DIAGRAM):   else do;
816815    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
816816    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
816817    +   end;
MPRINT(EM_DIAGRAM):   end;
816818    +end;
MPRINT(EM_DIAGRAM):   end;
816819    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
816820    +   P_DepVar1  =     1.53646139060035 * H11  +     1.98227889313385 * H12
816821    +          +     0.69366657666187 * H13  +      1.4458071195477 * H14
816822    +          +     0.81229467076169 * H15  +     -2.4762533950508 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.53646139060035 * H11 + 1.98227889313385 * H12 + 
0.69366657666187 * H13 + 1.4458071195477 * H14 + 0.81229467076169 * H15 + -2.4762533950508 * 
H16 ;
816823    +   P_DepVar1  =    -0.95559108382775 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.95559108382775 + P_DepVar1 ;
816824    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
816825    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
816826    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
816827    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
816828    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
816829    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
816830    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
816831    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
816832    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
816833    +END;
MPRINT(EM_DIAGRAM):   END;
816834    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
816835    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
816836    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
816837    +END;
MPRINT(EM_DIAGRAM):   END;
816838    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
816839    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
816840    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
816841    +END;
MPRINT(EM_DIAGRAM):   END;
816842    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
816843    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
816844    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
816845    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
816846    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
816847    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
816848    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
816849    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816850    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
816851    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816852    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
816853    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
816854    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
816855    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
816856    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
816857    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
816858    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
816859    +END;
MPRINT(EM_DIAGRAM):   END;
816860    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
816861    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
816862    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
816863    +drop
816864    +H11
816865    +H12
816866    +H13
816867    +H14
816868    +H15
816869    +H16
816870    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
816871    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
816872     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
816873     quit;
816874     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
816875     filename emflow
816875   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
816876     *------------------------------------------------------------*;
816877     * Neural28: Scoring VALIDATE data;
816878     *------------------------------------------------------------*;
816879     data EMWS8.Neural28_VALIDATE
816880     / view=EMWS8.Neural28_VALIDATE
816881     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_VALIDATE / view=EMWS8.Neural28_VALIDATE ;
816882     set EMWS8.Varsel_VALIDATE
816883     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
816884     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
816885    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
816886    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
816887    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
816888    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
816889    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
816890    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
816891    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
816892    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
816893    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
816894    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
816895    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
816896    +LENGTH _WARN_ $4
816897    +      F_DepVar  $ 12
816898    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
816899    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
816900    +
816901    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
816902    +
816903    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
816904    +
816905    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
816906    +
816907    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
816908    +
816909    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
816910    +
816911    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
816912    +
816913    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
816914    +
816915    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
816916    +
816917    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
816918    +
816919    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
816920    +
816921    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
816922    +
816923    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
816924    +
816925    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
816926    +
816927    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
816928    +
816929    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
816930    +
816931    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
816932    +
816933    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
816934    +
816935    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
816936    +
816937    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
816938    +
816939    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
816940    +
816941    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
816942    +
816943    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
816944    +
816945    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
816946    +
816947    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
816948    +
816949    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
816950    +
816951    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
816952    +
816953    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
816954    +
816955    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
816956    +
816957    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
816958    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
816959    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
816960    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
816961    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
816962    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
816963    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816964    +end;
MPRINT(EM_DIAGRAM):   end;
816965    +else do;
MPRINT(EM_DIAGRAM):   else do;
816966    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
816967    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
816968    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
816969    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
816970    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
816971    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
816972    +   end;
MPRINT(EM_DIAGRAM):   end;
816973    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
816974    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
816975    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
816976    +   end;
MPRINT(EM_DIAGRAM):   end;
816977    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
816978    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
816979    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
816980    +   end;
MPRINT(EM_DIAGRAM):   end;
816981    +   else do;
MPRINT(EM_DIAGRAM):   else do;
816982    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
816983    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
816984    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
816985    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816986    +   end;
MPRINT(EM_DIAGRAM):   end;
816987    +end;
MPRINT(EM_DIAGRAM):   end;
816988    +
816989    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816990    +*** Checking missing input Interval
816991    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
816992    +
816993    +IF NMISS(
816994    +   AcceptedCmpTotal ,
816995    +   Frq ,
816996    +   Income ,
816997    +   Mnt ,
816998    +   MntFruits ,
816999    +   MntGoldProds ,
817000    +   MntMeatProducts ,
817001    +   MntSweetProducts ,
817002    +   NumCatalogPurchases ,
817003    +   NumWebPurchases ,
817004    +   RFMstat ,
817005    +   RMntFrq ,
817006    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
817007    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
817008    +
817009    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
817010    +END;
MPRINT(EM_DIAGRAM):   END;
817011    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817012    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
817013    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817014    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817015    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
817016    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
817017    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
817018    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
817019    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
817020    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
817021    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
817022    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
817023    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
817024    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
817025    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
817026    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
817027    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
817028    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
817029    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
817030    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
817031    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
817032    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
817033    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
817034    +END;
MPRINT(EM_DIAGRAM):   END;
817035    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817036    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
817037    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
817038    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
817039    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
817040    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
817041    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
817042    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
817043    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
817044    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
817045    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
817046    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
817047    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
817048    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
817049    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
817050    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
817051    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
817052    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
817053    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
817054    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
817055    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
817056    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
817057    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
817058    +   ELSE S_NumCatalogPurchases
817059    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
817060    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
817061    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
817062    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
817063    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
817064    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
817065    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
817066    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
817067    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
817068    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
817069    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
817070    +END;
MPRINT(EM_DIAGRAM):   END;
817071    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817072    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
817073    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817074    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817075    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
817076    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817077    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817078    +   H11  =     0.82631693872377 * S_AcceptedCmpTotal  +    -0.72798667283699 *
817079    +        S_Frq  +     0.15911649036122 * S_Income  +    -0.60456350734571 *
817080    +        S_Mnt  +    -0.74377544096034 * S_MntFruits  +    -0.12263914971644 *
817081    +        S_MntGoldProds  +     0.17677796203072 * S_MntMeatProducts
817082    +          +    -0.50748691839629 * S_MntSweetProducts
817083    +          +     0.64296516693494 * S_NumCatalogPurchases
817084    +          +     1.28350004565407 * S_NumWebPurchases
817085    +          +     0.21030868312225 * S_RFMstat  +    -0.39695828920844 *
817086    +        S_RMntFrq  +    -0.89895080438896 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.82631693872377 * S_AcceptedCmpTotal + -0.72798667283699 * S_Frq 
+ 0.15911649036122 * S_Income + -0.60456350734571 * S_Mnt + -0.74377544096034 * S_MntFruits + 
-0.12263914971644 * S_MntGoldProds + 0.17677796203072 * S_MntMeatProducts + -0.50748691839629 
* S_MntSweetProducts + 0.64296516693494 * S_NumCatalogPurchases + 1.28350004565407 * 
S_NumWebPurchases + 0.21030868312225 * S_RFMstat + -0.39695828920844 * S_RMntFrq + 
-0.89895080438896 * S_Recency ;
817087    +   H12  =     0.11667862669372 * S_AcceptedCmpTotal  +    -1.01106011934145 *
817088    +        S_Frq  +    -0.17716076384549 * S_Income  +    -0.24293226300477 *
817089    +        S_Mnt  +     -0.0787175302374 * S_MntFruits  +     0.00532047873906 *
817090    +        S_MntGoldProds  +     1.29466535738179 * S_MntMeatProducts
817091    +          +     0.17384010941361 * S_MntSweetProducts
817092    +          +     0.92948439877935 * S_NumCatalogPurchases
817093    +          +     0.22516927332959 * S_NumWebPurchases
817094    +          +     0.05028067999269 * S_RFMstat  +     0.78999743446302 *
817095    +        S_RMntFrq  +    -0.20939117765596 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.11667862669372 * S_AcceptedCmpTotal + -1.01106011934145 * S_Frq 
+ -0.17716076384549 * S_Income + -0.24293226300477 * S_Mnt + -0.0787175302374 * S_MntFruits + 
0.00532047873906 * S_MntGoldProds + 1.29466535738179 * S_MntMeatProducts + 0.17384010941361 * 
S_MntSweetProducts + 0.92948439877935 * S_NumCatalogPurchases + 0.22516927332959 * 
S_NumWebPurchases + 0.05028067999269 * S_RFMstat + 0.78999743446302 * S_RMntFrq + 
-0.20939117765596 * S_Recency ;
817096    +   H13  =     0.04357769443186 * S_AcceptedCmpTotal  +     0.15406703269953 *
817097    +        S_Frq  +     0.30195133876726 * S_Income  +     0.28819360890276 *
817098    +        S_Mnt  +     0.09892781576641 * S_MntFruits  +     0.49225212949739 *
817099    +        S_MntGoldProds  +     0.29770764897396 * S_MntMeatProducts
817100    +          +     -0.2000873376449 * S_MntSweetProducts
817101    +          +     0.12566784354514 * S_NumCatalogPurchases
817102    +          +     0.02104112723179 * S_NumWebPurchases
817103    +          +    -0.43415514019088 * S_RFMstat  +    -0.17022294749993 *
817104    +        S_RMntFrq  +     0.30357171575981 * S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.04357769443186 * S_AcceptedCmpTotal + 0.15406703269953 * S_Frq + 
0.30195133876726 * S_Income + 0.28819360890276 * S_Mnt + 0.09892781576641 * S_MntFruits + 
0.49225212949739 * S_MntGoldProds + 0.29770764897396 * S_MntMeatProducts + -0.2000873376449 * 
S_MntSweetProducts + 0.12566784354514 * S_NumCatalogPurchases + 0.02104112723179 * 
S_NumWebPurchases + -0.43415514019088 * S_RFMstat + -0.17022294749993 * S_RMntFrq + 
0.30357171575981 * S_Recency ;
817105    +   H14  =     0.89017550554492 * S_AcceptedCmpTotal  +    -1.24866436391906 *
817106    +        S_Frq  +    -0.83458596455814 * S_Income  +    -0.66942952173326 *
817107    +        S_Mnt  +    -0.22543485387319 * S_MntFruits  +    -0.10688181972933 *
817108    +        S_MntGoldProds  +     0.85050982143614 * S_MntMeatProducts
817109    +          +     0.12117759215087 * S_MntSweetProducts
817110    +          +     0.80203773582494 * S_NumCatalogPurchases
817111    +          +     0.17374160185958 * S_NumWebPurchases
817112    +          +    -0.12855081884938 * S_RFMstat  +     0.45921570261849 *
817113    +        S_RMntFrq  +    -1.09092321008268 * S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.89017550554492 * S_AcceptedCmpTotal + -1.24866436391906 * S_Frq 
+ -0.83458596455814 * S_Income + -0.66942952173326 * S_Mnt + -0.22543485387319 * S_MntFruits + 
-0.10688181972933 * S_MntGoldProds + 0.85050982143614 * S_MntMeatProducts + 0.12117759215087 * 
S_MntSweetProducts + 0.80203773582494 * S_NumCatalogPurchases + 0.17374160185958 * 
S_NumWebPurchases + -0.12855081884938 * S_RFMstat + 0.45921570261849 * S_RMntFrq + 
-1.09092321008268 * S_Recency ;
817114    +   H15  =    -0.68386094226468 * S_AcceptedCmpTotal  +    -0.44368664779237 *
817115    +        S_Frq  +    -0.63118593216016 * S_Income  +     -0.8549673235883 *
817116    +        S_Mnt  +     -0.4174049500068 * S_MntFruits  +    -0.02221537411568 *
817117    +        S_MntGoldProds  +      0.0634004340553 * S_MntMeatProducts
817118    +          +      0.2989820991785 * S_MntSweetProducts
817119    +          +     0.04398783976739 * S_NumCatalogPurchases
817120    +          +     0.40368640676572 * S_NumWebPurchases
817121    +          +    -0.50987577368598 * S_RFMstat  +    -0.24616064467414 *
817122    +        S_RMntFrq  +    -0.01932947962302 * S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = -0.68386094226468 * S_AcceptedCmpTotal + -0.44368664779237 * S_Frq 
+ -0.63118593216016 * S_Income + -0.8549673235883 * S_Mnt + -0.4174049500068 * S_MntFruits + 
-0.02221537411568 * S_MntGoldProds + 0.0634004340553 * S_MntMeatProducts + 0.2989820991785 * 
S_MntSweetProducts + 0.04398783976739 * S_NumCatalogPurchases + 0.40368640676572 * 
S_NumWebPurchases + -0.50987577368598 * S_RFMstat + -0.24616064467414 * S_RMntFrq + 
-0.01932947962302 * S_Recency ;
817123    +   H16  =    -0.69633356297868 * S_AcceptedCmpTotal  +     0.25580106272723 *
817124    +        S_Frq  +    -0.15941056497212 * S_Income  +     1.01091236070049 *
817125    +        S_Mnt  +    -0.16421220259024 * S_MntFruits  +    -0.28158219367628 *
817126    +        S_MntGoldProds  +    -0.80473865500071 * S_MntMeatProducts
817127    +          +     0.10950268819222 * S_MntSweetProducts
817128    +          +    -0.59025524598908 * S_NumCatalogPurchases
817129    +          +    -0.02069421817896 * S_NumWebPurchases
817130    +          +     -0.3615429826151 * S_RFMstat  +    -0.41611769964424 *
817131    +        S_RMntFrq  +     0.96940490611968 * S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.69633356297868 * S_AcceptedCmpTotal + 0.25580106272723 * S_Frq 
+ -0.15941056497212 * S_Income + 1.01091236070049 * S_Mnt + -0.16421220259024 * S_MntFruits + 
-0.28158219367628 * S_MntGoldProds + -0.80473865500071 * S_MntMeatProducts + 0.10950268819222 
* S_MntSweetProducts + -0.59025524598908 * S_NumCatalogPurchases + -0.02069421817896 * 
S_NumWebPurchases + -0.3615429826151 * S_RFMstat + -0.41611769964424 * S_RMntFrq + 
0.96940490611968 * S_Recency ;
817132    +   H11  = H11  +        0.45545922927 * G_Marital_Status0
817133    +          +     0.12818067118838 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.45545922927 * G_Marital_Status0 + 0.12818067118838 * 
G_Marital_Status1 ;
817134    +   H12  = H12  +    -0.20371081343188 * G_Marital_Status0
817135    +          +      0.0869800653918 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.20371081343188 * G_Marital_Status0 + 0.0869800653918 * 
G_Marital_Status1 ;
817136    +   H13  = H13  +    -0.33845151454936 * G_Marital_Status0
817137    +          +    -0.43733288680739 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.33845151454936 * G_Marital_Status0 + -0.43733288680739 * 
G_Marital_Status1 ;
817138    +   H14  = H14  +     0.11759980770855 * G_Marital_Status0
817139    +          +    -0.01680808105992 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.11759980770855 * G_Marital_Status0 + -0.01680808105992 * 
G_Marital_Status1 ;
817140    +   H15  = H15  +    -0.20605143700963 * G_Marital_Status0
817141    +          +     0.04987739539035 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.20605143700963 * G_Marital_Status0 + 0.04987739539035 * 
G_Marital_Status1 ;
817142    +   H16  = H16  +    -0.99478088512585 * G_Marital_Status0
817143    +          +    -0.35983290751115 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.99478088512585 * G_Marital_Status0 + -0.35983290751115 * 
G_Marital_Status1 ;
817144    +   H11  =    -0.72044866217862 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.72044866217862 + H11 ;
817145    +   H12  =     0.73797915336977 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.73797915336977 + H12 ;
817146    +   H13  =     0.82989235994379 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.82989235994379 + H13 ;
817147    +   H14  =    -0.48103007102008 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.48103007102008 + H14 ;
817148    +   H15  =     -0.4352791778041 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.4352791778041 + H15 ;
817149    +   H16  =      2.7027355184778 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 2.7027355184778 + H16 ;
817150    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
817151    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
817152    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
817153    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
817154    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
817155    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
817156    +END;
MPRINT(EM_DIAGRAM):   END;
817157    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817158    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
817159    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
817160    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
817161    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
817162    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
817163    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
817164    +END;
MPRINT(EM_DIAGRAM):   END;
817165    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817166    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
817167    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817168    +
817169    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
817170    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
817171    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
817172    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
817173    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
817174    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
817175    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
817176    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
817177    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
817178    +end;
MPRINT(EM_DIAGRAM):   end;
817179    +else do;
MPRINT(EM_DIAGRAM):   else do;
817180    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
817181    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
817182    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
817183    +   end;
MPRINT(EM_DIAGRAM):   end;
817184    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
817185    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
817186    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
817187    +   end;
MPRINT(EM_DIAGRAM):   end;
817188    +   else do;
MPRINT(EM_DIAGRAM):   else do;
817189    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
817190    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
817191    +   end;
MPRINT(EM_DIAGRAM):   end;
817192    +end;
MPRINT(EM_DIAGRAM):   end;
817193    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817194    +   P_DepVar1  =     1.53646139060035 * H11  +     1.98227889313385 * H12
817195    +          +     0.69366657666187 * H13  +      1.4458071195477 * H14
817196    +          +     0.81229467076169 * H15  +     -2.4762533950508 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.53646139060035 * H11 + 1.98227889313385 * H12 + 
0.69366657666187 * H13 + 1.4458071195477 * H14 + 0.81229467076169 * H15 + -2.4762533950508 * 
H16 ;
817197    +   P_DepVar1  =    -0.95559108382775 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -0.95559108382775 + P_DepVar1 ;
817198    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
817199    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
817200    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
817201    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
817202    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
817203    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
817204    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
817205    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
817206    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
817207    +END;
MPRINT(EM_DIAGRAM):   END;
817208    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817209    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
817210    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
817211    +END;
MPRINT(EM_DIAGRAM):   END;
817212    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
817213    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
817214    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
817215    +END;
MPRINT(EM_DIAGRAM):   END;
817216    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
817217    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
817218    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
817219    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
817220    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
817221    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
817222    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
817223    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817224    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
817225    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817226    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
817227    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
817228    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
817229    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
817230    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
817231    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
817232    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
817233    +END;
MPRINT(EM_DIAGRAM):   END;
817234    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
817235    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
817236    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
817237    +drop
817238    +H11
817239    +H12
817240    +H13
817241    +H14
817242    +H15
817243    +H16
817244    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
817245    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
817246     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
817247     quit;
817248     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
817249     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
817250     * Neural28: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural28: Computing metadata for TRAIN data;
817251     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural28_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural28_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural28_TRAIN out=WORK.M2QI0IUV noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QI0IUV;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QI0IUV(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QI0IUV;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QI0IUV;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2LRLSQD NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2LRLSQD;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LRLSQD;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_R395M(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LRLSQD;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2LRLSQD;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LRLSQD;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2LRLSQD;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LRLSQD;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural28";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural28";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
817563     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
817564     set EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO;
817565     where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
817566     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL28_EMINFO.
      WHERE (DATA='Neural28') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817567     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural28_EMINFO;
817568     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
817569     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
817570     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
817574     run;
817575     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
817576     set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
817577     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817578     proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
817579     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817580     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817581     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
817582     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817583     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

817584     proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
817585     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817586     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817587     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
817588     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
817589     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817590     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817591     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
817592     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
817593     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
817594     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL28_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
