MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.08 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                16.08 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0LZ4G4V 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0LZ4G4V new;
MPRINT(EM_DIAGRAM):   run;
355388     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
355389     set EMWS8.Neural28_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_OUTKEY;
355390     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
355391     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set EMWS8.NEURAL28_OUTKEY.
NOTE: The data set WORK.OUTKEY has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

355392     filename emflow
355392   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
355393     *------------------------------------------------------------*;
355394     * Neural28: Scoring DATA data;
355395     *------------------------------------------------------------*;
355396     data EMWS8.Neural28_TRAIN
355397     / view=EMWS8.Neural28_TRAIN
355398     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_TRAIN / view=EMWS8.Neural28_TRAIN ;
355399     set EMWS8.Varsel_TRAIN
355400     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
355401     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
355402    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
355403    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
355404    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
355405    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
355406    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
355407    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
355408    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
355409    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
355410    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
355411    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
355412    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
355413    +LENGTH _WARN_ $4
355414    +      F_DepVar  $ 12
355415    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
355416    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
355417    +
355418    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
355419    +
355420    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
355421    +
355422    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
355423    +
355424    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
355425    +
355426    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
355427    +
355428    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
355429    +
355430    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
355431    +
355432    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
355433    +
355434    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
355435    +
355436    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
355437    +
355438    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
355439    +
355440    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
355441    +
355442    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
355443    +
355444    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
355445    +
355446    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
355447    +
355448    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
355449    +
355450    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
355451    +
355452    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
355453    +
355454    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
355455    +
355456    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355457    +*** Checking missing input Interval
355458    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
355459    +
355460    +IF NMISS(
355461    +   AcceptedCmpTotal ,
355462    +   Mnt ,
355463    +   MntMeatProducts ,
355464    +   NumCatalogPurchases ,
355465    +   RFMstat ,
355466    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases 
, RFMstat , Recency ) THEN DO;
355467    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
355468    +
355469    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
355470    +END;
MPRINT(EM_DIAGRAM):   END;
355471    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355472    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
355473    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355474    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
355475    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
355476    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
355477    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
355478    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
355479    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
355480    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
355481    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
355482    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
355483    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
355484    +END;
MPRINT(EM_DIAGRAM):   END;
355485    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
355486    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
355487    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
355488    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
355489    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
355490    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
355491    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
355492    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
355493    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
355494    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
355495    +   ELSE S_NumCatalogPurchases
355496    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
355497    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
355498    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
355499    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
355500    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
355501    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
355502    +END;
MPRINT(EM_DIAGRAM):   END;
355503    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355504    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
355505    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355506    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
355507    +   H11  =     -0.1481294920829 * S_AcceptedCmpTotal  +    -0.31967651937983 *
355508    +        S_Mnt  +    -0.25501160560688 * S_MntMeatProducts
355509    +          +    -0.26541354265094 * S_NumCatalogPurchases
355510    +          +    -0.05107291503479 * S_RFMstat  +     0.26055761102982 *
355511    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.1481294920829 * S_AcceptedCmpTotal + -0.31967651937983 * S_Mnt 
+ -0.25501160560688 * S_MntMeatProducts + -0.26541354265094 * S_NumCatalogPurchases + 
-0.05107291503479 * S_RFMstat + 0.26055761102982 * S_Recency ;
355512    +   H12  =    -0.53585265877367 * S_AcceptedCmpTotal  +    -0.63949625372724 *
355513    +        S_Mnt  +    -0.71298935461349 * S_MntMeatProducts
355514    +          +     0.26625422734047 * S_NumCatalogPurchases
355515    +          +     0.04789590805202 * S_RFMstat  +     -0.2457029388315 *
355516    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.53585265877367 * S_AcceptedCmpTotal + -0.63949625372724 * S_Mnt 
+ -0.71298935461349 * S_MntMeatProducts + 0.26625422734047 * S_NumCatalogPurchases + 
0.04789590805202 * S_RFMstat + -0.2457029388315 * S_Recency ;
355517    +   H13  =     0.36156584602692 * S_AcceptedCmpTotal  +    -3.37453529906718 *
355518    +        S_Mnt  +     1.02675869236561 * S_MntMeatProducts
355519    +          +     0.00910121928187 * S_NumCatalogPurchases
355520    +          +     0.20581491047897 * S_RFMstat  +    -0.18898725892086 *
355521    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.36156584602692 * S_AcceptedCmpTotal + -3.37453529906718 * S_Mnt 
+ 1.02675869236561 * S_MntMeatProducts + 0.00910121928187 * S_NumCatalogPurchases + 
0.20581491047897 * S_RFMstat + -0.18898725892086 * S_Recency ;
355522    +   H14  =    -0.14179052521941 * S_AcceptedCmpTotal  +     0.30769772196415 *
355523    +        S_Mnt  +     0.17433696286114 * S_MntMeatProducts
355524    +          +     0.12575078713396 * S_NumCatalogPurchases
355525    +          +    -0.02826822167447 * S_RFMstat  +     0.28366844846854 *
355526    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = -0.14179052521941 * S_AcceptedCmpTotal + 0.30769772196415 * S_Mnt 
+ 0.17433696286114 * S_MntMeatProducts + 0.12575078713396 * S_NumCatalogPurchases + 
-0.02826822167447 * S_RFMstat + 0.28366844846854 * S_Recency ;
355527    +   H15  =      0.0992610666113 * S_AcceptedCmpTotal  +    -0.08290546162861 *
355528    +        S_Mnt  +     2.79374557573421 * S_MntMeatProducts
355529    +          +     0.34145061374457 * S_NumCatalogPurchases
355530    +          +     1.24642569428903 * S_RFMstat  +    -0.05791964822006 *
355531    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.0992610666113 * S_AcceptedCmpTotal + -0.08290546162861 * S_Mnt + 
2.79374557573421 * S_MntMeatProducts + 0.34145061374457 * S_NumCatalogPurchases + 
1.24642569428903 * S_RFMstat + -0.05791964822006 * S_Recency ;
355532    +   H16  =    -0.70732539360309 * S_AcceptedCmpTotal  +    -6.01133749430879 *
355533    +        S_Mnt  +      2.7772635267037 * S_MntMeatProducts
355534    +          +     3.89195901397454 * S_NumCatalogPurchases
355535    +          +     -2.3989156332421 * S_RFMstat  +    -0.49366295107927 *
355536    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.70732539360309 * S_AcceptedCmpTotal + -6.01133749430879 * S_Mnt 
+ 2.7772635267037 * S_MntMeatProducts + 3.89195901397454 * S_NumCatalogPurchases + 
-2.3989156332421 * S_RFMstat + -0.49366295107927 * S_Recency ;
355537    +   H11  =     1.84373127923043 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.84373127923043 + H11 ;
355538    +   H12  =     0.28145390491001 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.28145390491001 + H12 ;
355539    +   H13  =    -2.13618632038915 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -2.13618632038915 + H13 ;
355540    +   H14  =    -0.43724663060956 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.43724663060956 + H14 ;
355541    +   H15  =     2.87870499074164 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 2.87870499074164 + H15 ;
355542    +   H16  =    -1.50303768685501 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.50303768685501 + H16 ;
355543    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
355544    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
355545    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
355546    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
355547    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
355548    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
355549    +END;
MPRINT(EM_DIAGRAM):   END;
355550    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
355551    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
355552    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
355553    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
355554    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
355555    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
355556    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
355557    +END;
MPRINT(EM_DIAGRAM):   END;
355558    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355559    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
355560    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355561    +
355562    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
355563    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
355564    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
355565    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
355566    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
355567    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
355568    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
355569    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
355570    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
355571    +end;
MPRINT(EM_DIAGRAM):   end;
355572    +else do;
MPRINT(EM_DIAGRAM):   else do;
355573    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
355574    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
355575    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
355576    +   end;
MPRINT(EM_DIAGRAM):   end;
355577    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
355578    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
355579    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
355580    +   end;
MPRINT(EM_DIAGRAM):   end;
355581    +   else do;
MPRINT(EM_DIAGRAM):   else do;
355582    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
355583    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
355584    +   end;
MPRINT(EM_DIAGRAM):   end;
355585    +end;
MPRINT(EM_DIAGRAM):   end;
355586    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
355587    +   P_DepVar1  =    -5.40879672831374 * H11  +    -2.30275649942132 * H12
355588    +          +     3.92987383270932 * H13  +    -5.94814919610295 * H14
355589    +          +      8.1691029468057 * H15  +     1.41618936614917 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.40879672831374 * H11 + -2.30275649942132 * H12 + 
3.92987383270932 * H13 + -5.94814919610295 * H14 + 8.1691029468057 * H15 + 1.41618936614917 * 
H16 ;
355590    +   P_DepVar1  =    -3.18163491507868 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.18163491507868 + P_DepVar1 ;
355591    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
355592    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
355593    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
355594    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
355595    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
355596    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
355597    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
355598    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
355599    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
355600    +END;
MPRINT(EM_DIAGRAM):   END;
355601    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
355602    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
355603    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
355604    +END;
MPRINT(EM_DIAGRAM):   END;
355605    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
355606    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
355607    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
355608    +END;
MPRINT(EM_DIAGRAM):   END;
355609    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
355610    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
355611    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
355612    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
355613    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
355614    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
355615    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
355616    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355617    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
355618    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355619    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
355620    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
355621    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
355622    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
355623    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
355624    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
355625    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
355626    +END;
MPRINT(EM_DIAGRAM):   END;
355627    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
355628    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
355629    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
355630    +drop
355631    +H11
355632    +H12
355633    +H13
355634    +H14
355635    +H15
355636    +H16
355637    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
355638    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
355639     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
355640     quit;
355641     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
355642     filename emflow
355642   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
355643     *------------------------------------------------------------*;
355644     * Neural28: Scoring VALIDATE data;
355645     *------------------------------------------------------------*;
355646     data EMWS8.Neural28_VALIDATE
355647     / view=EMWS8.Neural28_VALIDATE
355648     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_VALIDATE / view=EMWS8.Neural28_VALIDATE ;
355649     set EMWS8.Varsel_VALIDATE
355650     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
355651     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural28\EMFLOWSCORE.sas.
355652    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
355653    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
355654    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
355655    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
355656    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
355657    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
355658    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
355659    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
355660    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
355661    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
355662    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
355663    +LENGTH _WARN_ $4
355664    +      F_DepVar  $ 12
355665    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
355666    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
355667    +
355668    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
355669    +
355670    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
355671    +
355672    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
355673    +
355674    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
355675    +
355676    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
355677    +
355678    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
355679    +
355680    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
355681    +
355682    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
355683    +
355684    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
355685    +
355686    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
355687    +
355688    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
355689    +
355690    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
355691    +
355692    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
355693    +
355694    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
355695    +
355696    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
355697    +
355698    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
355699    +
355700    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
355701    +
355702    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
355703    +
355704    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
355705    +
355706    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355707    +*** Checking missing input Interval
355708    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
355709    +
355710    +IF NMISS(
355711    +   AcceptedCmpTotal ,
355712    +   Mnt ,
355713    +   MntMeatProducts ,
355714    +   NumCatalogPurchases ,
355715    +   RFMstat ,
355716    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases 
, RFMstat , Recency ) THEN DO;
355717    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
355718    +
355719    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
355720    +END;
MPRINT(EM_DIAGRAM):   END;
355721    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355722    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
355723    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355724    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
355725    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
355726    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
355727    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
355728    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
355729    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
355730    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
355731    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
355732    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
355733    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
355734    +END;
MPRINT(EM_DIAGRAM):   END;
355735    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
355736    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
355737    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
355738    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
355739    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
355740    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
355741    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
355742    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
355743    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
355744    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
355745    +   ELSE S_NumCatalogPurchases
355746    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
355747    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
355748    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
355749    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
355750    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
355751    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
355752    +END;
MPRINT(EM_DIAGRAM):   END;
355753    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355754    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
355755    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355756    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
355757    +   H11  =     -0.1481294920829 * S_AcceptedCmpTotal  +    -0.31967651937983 *
355758    +        S_Mnt  +    -0.25501160560688 * S_MntMeatProducts
355759    +          +    -0.26541354265094 * S_NumCatalogPurchases
355760    +          +    -0.05107291503479 * S_RFMstat  +     0.26055761102982 *
355761    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.1481294920829 * S_AcceptedCmpTotal + -0.31967651937983 * S_Mnt 
+ -0.25501160560688 * S_MntMeatProducts + -0.26541354265094 * S_NumCatalogPurchases + 
-0.05107291503479 * S_RFMstat + 0.26055761102982 * S_Recency ;
355762    +   H12  =    -0.53585265877367 * S_AcceptedCmpTotal  +    -0.63949625372724 *
355763    +        S_Mnt  +    -0.71298935461349 * S_MntMeatProducts
355764    +          +     0.26625422734047 * S_NumCatalogPurchases
355765    +          +     0.04789590805202 * S_RFMstat  +     -0.2457029388315 *
355766    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.53585265877367 * S_AcceptedCmpTotal + -0.63949625372724 * S_Mnt 
+ -0.71298935461349 * S_MntMeatProducts + 0.26625422734047 * S_NumCatalogPurchases + 
0.04789590805202 * S_RFMstat + -0.2457029388315 * S_Recency ;
355767    +   H13  =     0.36156584602692 * S_AcceptedCmpTotal  +    -3.37453529906718 *
355768    +        S_Mnt  +     1.02675869236561 * S_MntMeatProducts
355769    +          +     0.00910121928187 * S_NumCatalogPurchases
355770    +          +     0.20581491047897 * S_RFMstat  +    -0.18898725892086 *
355771    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.36156584602692 * S_AcceptedCmpTotal + -3.37453529906718 * S_Mnt 
+ 1.02675869236561 * S_MntMeatProducts + 0.00910121928187 * S_NumCatalogPurchases + 
0.20581491047897 * S_RFMstat + -0.18898725892086 * S_Recency ;
355772    +   H14  =    -0.14179052521941 * S_AcceptedCmpTotal  +     0.30769772196415 *
355773    +        S_Mnt  +     0.17433696286114 * S_MntMeatProducts
355774    +          +     0.12575078713396 * S_NumCatalogPurchases
355775    +          +    -0.02826822167447 * S_RFMstat  +     0.28366844846854 *
355776    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = -0.14179052521941 * S_AcceptedCmpTotal + 0.30769772196415 * S_Mnt 
+ 0.17433696286114 * S_MntMeatProducts + 0.12575078713396 * S_NumCatalogPurchases + 
-0.02826822167447 * S_RFMstat + 0.28366844846854 * S_Recency ;
355777    +   H15  =      0.0992610666113 * S_AcceptedCmpTotal  +    -0.08290546162861 *
355778    +        S_Mnt  +     2.79374557573421 * S_MntMeatProducts
355779    +          +     0.34145061374457 * S_NumCatalogPurchases
355780    +          +     1.24642569428903 * S_RFMstat  +    -0.05791964822006 *
355781    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.0992610666113 * S_AcceptedCmpTotal + -0.08290546162861 * S_Mnt + 
2.79374557573421 * S_MntMeatProducts + 0.34145061374457 * S_NumCatalogPurchases + 
1.24642569428903 * S_RFMstat + -0.05791964822006 * S_Recency ;
355782    +   H16  =    -0.70732539360309 * S_AcceptedCmpTotal  +    -6.01133749430879 *
355783    +        S_Mnt  +      2.7772635267037 * S_MntMeatProducts
355784    +          +     3.89195901397454 * S_NumCatalogPurchases
355785    +          +     -2.3989156332421 * S_RFMstat  +    -0.49366295107927 *
355786    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = -0.70732539360309 * S_AcceptedCmpTotal + -6.01133749430879 * S_Mnt 
+ 2.7772635267037 * S_MntMeatProducts + 3.89195901397454 * S_NumCatalogPurchases + 
-2.3989156332421 * S_RFMstat + -0.49366295107927 * S_Recency ;
355787    +   H11  =     1.84373127923043 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.84373127923043 + H11 ;
355788    +   H12  =     0.28145390491001 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.28145390491001 + H12 ;
355789    +   H13  =    -2.13618632038915 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -2.13618632038915 + H13 ;
355790    +   H14  =    -0.43724663060956 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.43724663060956 + H14 ;
355791    +   H15  =     2.87870499074164 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 2.87870499074164 + H15 ;
355792    +   H16  =    -1.50303768685501 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.50303768685501 + H16 ;
355793    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
355794    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
355795    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
355796    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
355797    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
355798    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
355799    +END;
MPRINT(EM_DIAGRAM):   END;
355800    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
355801    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
355802    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
355803    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
355804    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
355805    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
355806    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
355807    +END;
MPRINT(EM_DIAGRAM):   END;
355808    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355809    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
355810    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355811    +
355812    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
355813    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
355814    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
355815    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
355816    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
355817    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
355818    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
355819    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
355820    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
355821    +end;
MPRINT(EM_DIAGRAM):   end;
355822    +else do;
MPRINT(EM_DIAGRAM):   else do;
355823    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
355824    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
355825    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
355826    +   end;
MPRINT(EM_DIAGRAM):   end;
355827    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
355828    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
355829    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
355830    +   end;
MPRINT(EM_DIAGRAM):   end;
355831    +   else do;
MPRINT(EM_DIAGRAM):   else do;
355832    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
355833    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
355834    +   end;
MPRINT(EM_DIAGRAM):   end;
355835    +end;
MPRINT(EM_DIAGRAM):   end;
355836    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
355837    +   P_DepVar1  =    -5.40879672831374 * H11  +    -2.30275649942132 * H12
355838    +          +     3.92987383270932 * H13  +    -5.94814919610295 * H14
355839    +          +      8.1691029468057 * H15  +     1.41618936614917 * H16 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -5.40879672831374 * H11 + -2.30275649942132 * H12 + 
3.92987383270932 * H13 + -5.94814919610295 * H14 + 8.1691029468057 * H15 + 1.41618936614917 * 
H16 ;
355840    +   P_DepVar1  =    -3.18163491507868 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -3.18163491507868 + P_DepVar1 ;
355841    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
355842    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
355843    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
355844    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
355845    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
355846    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
355847    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
355848    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
355849    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
355850    +END;
MPRINT(EM_DIAGRAM):   END;
355851    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
355852    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
355853    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
355854    +END;
MPRINT(EM_DIAGRAM):   END;
355855    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
355856    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
355857    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
355858    +END;
MPRINT(EM_DIAGRAM):   END;
355859    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
355860    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
355861    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
355862    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
355863    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
355864    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
355865    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
355866    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355867    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
355868    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
355869    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
355870    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
355871    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
355872    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
355873    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
355874    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
355875    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
355876    +END;
MPRINT(EM_DIAGRAM):   END;
355877    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
355878    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
355879    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
355880    +drop
355881    +H11
355882    +H12
355883    +H13
355884    +H14
355885    +H15
355886    +H16
355887    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 ;
355888    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
355889     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL28_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
355890     quit;
355891     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
355892     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
355893     * Neural28: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural28: Computing metadata for TRAIN data;
355894     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural28\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural28_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural28_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural28_TRAIN out=WORK.M39FAKZY noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39FAKZY;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M39FAKZY(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39FAKZY;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M39FAKZY;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M30WAZBF NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M30WAZBF;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M30WAZBF;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3MSTL15(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M30WAZBF;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M30WAZBF;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M30WAZBF;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M30WAZBF;
MPRINT(EMADVISECOLUMNS):   set WORK.M30WAZBF;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural28";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural28";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural28";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural28: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
356206     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
356207     set EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO;
356208     where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural28' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
356209     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL28_EMINFO.
      WHERE (DATA='Neural28') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

356210     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural28_EMINFO;
356211     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
356212     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
356213     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
356217     run;
356218     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
356219     set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural28_EMINFO WORK.MODELTEMP_INFO;
356220     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

356221     proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural28_EMINFO NOTHREADS;
356222     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
356223     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

356224     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
356225     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
356226     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

356227     proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural28_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
356228     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
356229     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL28_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

356230     data EMWS8.Neural28_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural28_EMINFO;
356231     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
356232     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
356233     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL28_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

356234     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
356235     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
356236     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
356237     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL28_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL28_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
