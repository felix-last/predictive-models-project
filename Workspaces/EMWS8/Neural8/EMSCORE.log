MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.08 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                16.08 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2GSW1MS 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2GSW1MS new;
MPRINT(EM_DIAGRAM):   run;
339830     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
339831     set EMWS8.Neural8_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_OUTKEY;
339832     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
339833     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 25 observations read from the data set EMWS8.NEURAL8_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

339834     filename emflow
339834   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
339835     *------------------------------------------------------------*;
339836     * Neural8: Scoring DATA data;
339837     *------------------------------------------------------------*;
339838     data EMWS8.Neural8_TRAIN
339839     / view=EMWS8.Neural8_TRAIN
339840     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_TRAIN / view=EMWS8.Neural8_TRAIN ;
339841     set EMWS8.Varsel_TRAIN
339842     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
339843     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas.
339844    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
339845    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
339846    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
339847    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
339848    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
339849    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
339850    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
339851    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
339852    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
339853    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
339854    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
339855    +LENGTH _WARN_ $4
339856    +      F_DepVar  $ 12
339857    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
339858    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
339859    +
339860    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
339861    +
339862    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
339863    +
339864    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
339865    +
339866    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
339867    +
339868    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
339869    +
339870    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
339871    +
339872    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
339873    +
339874    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
339875    +
339876    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
339877    +
339878    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
339879    +
339880    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
339881    +
339882    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
339883    +
339884    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
339885    +
339886    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
339887    +
339888    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
339889    +
339890    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
339891    +
339892    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
339893    +
339894    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
339895    +
339896    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
339897    +
339898    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
339899    +
339900    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
339901    +*** Checking missing input Interval
339902    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
339903    +
339904    +IF NMISS(
339905    +   AcceptedCmpTotal ,
339906    +   Mnt ,
339907    +   MntMeatProducts ,
339908    +   NumCatalogPurchases ,
339909    +   RFMstat ,
339910    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases 
, RFMstat , Recency ) THEN DO;
339911    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
339912    +
339913    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
339914    +END;
MPRINT(EM_DIAGRAM):   END;
339915    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
339916    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
339917    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
339918    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
339919    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
339920    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
339921    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
339922    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
339923    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
339924    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
339925    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
339926    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
339927    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
339928    +END;
MPRINT(EM_DIAGRAM):   END;
339929    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
339930    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
339931    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
339932    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
339933    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
339934    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
339935    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
339936    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
339937    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
339938    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
339939    +   ELSE S_NumCatalogPurchases
339940    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
339941    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
339942    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
339943    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
339944    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
339945    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
339946    +END;
MPRINT(EM_DIAGRAM):   END;
339947    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
339948    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
339949    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
339950    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
339951    +   H11  =     0.26517495321118 * S_AcceptedCmpTotal  +    -0.87413825198876 *
339952    +        S_Mnt  +     5.04044337479394 * S_MntMeatProducts
339953    +          +     0.73338587137623 * S_NumCatalogPurchases
339954    +          +     1.75847953793442 * S_RFMstat  +    -0.20116057418843 *
339955    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.26517495321118 * S_AcceptedCmpTotal + -0.87413825198876 * S_Mnt 
+ 5.04044337479394 * S_MntMeatProducts + 0.73338587137623 * S_NumCatalogPurchases + 
1.75847953793442 * S_RFMstat + -0.20116057418843 * S_Recency ;
339956    +   H12  =    -0.29419263200782 * S_AcceptedCmpTotal  +     0.13220940274202 *
339957    +        S_Mnt  +    -1.04971607430808 * S_MntMeatProducts
339958    +          +      0.6935189671617 * S_NumCatalogPurchases
339959    +          +     0.36816983288974 * S_RFMstat  +    -0.00643331274093 *
339960    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.29419263200782 * S_AcceptedCmpTotal + 0.13220940274202 * S_Mnt 
+ -1.04971607430808 * S_MntMeatProducts + 0.6935189671617 * S_NumCatalogPurchases + 
0.36816983288974 * S_RFMstat + -0.00643331274093 * S_Recency ;
339961    +   H13  =     0.13829897408873 * S_AcceptedCmpTotal  +    -2.23121471987064 *
339962    +        S_Mnt  +     0.62841690349858 * S_MntMeatProducts
339963    +          +     0.29630592582375 * S_NumCatalogPurchases
339964    +          +     0.64308296429787 * S_RFMstat  +     0.59591409485522 *
339965    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.13829897408873 * S_AcceptedCmpTotal + -2.23121471987064 * S_Mnt 
+ 0.62841690349858 * S_MntMeatProducts + 0.29630592582375 * S_NumCatalogPurchases + 
0.64308296429787 * S_RFMstat + 0.59591409485522 * S_Recency ;
339966    +   H14  =    -3.95384198121982 * S_AcceptedCmpTotal  +     2.01854341617621 *
339967    +        S_Mnt  +     2.79950511807496 * S_MntMeatProducts
339968    +          +    -2.17483369150477 * S_NumCatalogPurchases
339969    +          +     0.45727826044187 * S_RFMstat  +    -3.04663085487194 *
339970    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = -3.95384198121982 * S_AcceptedCmpTotal + 2.01854341617621 * S_Mnt 
+ 2.79950511807496 * S_MntMeatProducts + -2.17483369150477 * S_NumCatalogPurchases + 
0.45727826044187 * S_RFMstat + -3.04663085487194 * S_Recency ;
339971    +   H15  =     -0.0515719302773 * S_AcceptedCmpTotal  +    -1.87581836231223 *
339972    +        S_Mnt  +      2.2761907205026 * S_MntMeatProducts
339973    +          +    -1.72538913893407 * S_NumCatalogPurchases
339974    +          +     -0.3123592120938 * S_RFMstat  +     1.58063513304145 *
339975    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = -0.0515719302773 * S_AcceptedCmpTotal + -1.87581836231223 * S_Mnt 
+ 2.2761907205026 * S_MntMeatProducts + -1.72538913893407 * S_NumCatalogPurchases + 
-0.3123592120938 * S_RFMstat + 1.58063513304145 * S_Recency ;
339976    +   H16  =     0.29634579301776 * S_AcceptedCmpTotal  +    -0.70611444699748 *
339977    +        S_Mnt  +     0.18537198194998 * S_MntMeatProducts
339978    +          +     0.10728494982101 * S_NumCatalogPurchases
339979    +          +     0.25847373125288 * S_RFMstat  +    -0.10825431765799 *
339980    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = 0.29634579301776 * S_AcceptedCmpTotal + -0.70611444699748 * S_Mnt 
+ 0.18537198194998 * S_MntMeatProducts + 0.10728494982101 * S_NumCatalogPurchases + 
0.25847373125288 * S_RFMstat + -0.10825431765799 * S_Recency ;
339981    +   H17  =     0.42494872289576 * S_AcceptedCmpTotal  +     2.86832982257419 *
339982    +        S_Mnt  +    -1.29224109729356 * S_MntMeatProducts
339983    +          +    -1.97575805984161 * S_NumCatalogPurchases
339984    +          +      1.1851910683945 * S_RFMstat  +     0.14034943341983 *
339985    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H17 = 0.42494872289576 * S_AcceptedCmpTotal + 2.86832982257419 * S_Mnt + 
-1.29224109729356 * S_MntMeatProducts + -1.97575805984161 * S_NumCatalogPurchases + 
1.1851910683945 * S_RFMstat + 0.14034943341983 * S_Recency ;
339986    +   H11  =     4.10698399107728 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 4.10698399107728 + H11 ;
339987    +   H12  =    -0.85937202501212 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.85937202501212 + H12 ;
339988    +   H13  =     1.76913863070128 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.76913863070128 + H13 ;
339989    +   H14  =    -0.83369559754745 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.83369559754745 + H14 ;
339990    +   H15  =     5.14916643261102 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 5.14916643261102 + H15 ;
339991    +   H16  =    -0.07308651583377 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -0.07308651583377 + H16 ;
339992    +   H17  =     0.67214048080922 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.67214048080922 + H17 ;
339993    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
339994    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
339995    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
339996    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
339997    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
339998    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
339999    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
340000    +END;
MPRINT(EM_DIAGRAM):   END;
340001    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
340002    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
340003    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
340004    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
340005    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
340006    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
340007    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
340008    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
340009    +END;
MPRINT(EM_DIAGRAM):   END;
340010    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340011    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
340012    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340013    +
340014    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
340015    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
340016    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
340017    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
340018    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
340019    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
340020    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
340021    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
340022    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
340023    +end;
MPRINT(EM_DIAGRAM):   end;
340024    +else do;
MPRINT(EM_DIAGRAM):   else do;
340025    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
340026    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
340027    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
340028    +   end;
MPRINT(EM_DIAGRAM):   end;
340029    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
340030    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
340031    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
340032    +   end;
MPRINT(EM_DIAGRAM):   end;
340033    +   else do;
MPRINT(EM_DIAGRAM):   else do;
340034    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
340035    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
340036    +   end;
MPRINT(EM_DIAGRAM):   end;
340037    +end;
MPRINT(EM_DIAGRAM):   end;
340038    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
340039    +   P_DepVar1  =     3.48539232013053 * H11  +    -3.36283315259488 * H12
340040    +          +    -3.73944893696602 * H13  +     0.66404245877611 * H14
340041    +          +    -1.98199539124105 * H15  +     8.06594226275618 * H16
340042    +          +    -2.04910263577918 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.48539232013053 * H11 + -3.36283315259488 * H12 + 
-3.73944893696602 * H13 + 0.66404245877611 * H14 + -1.98199539124105 * H15 + 8.06594226275618 
* H16 + -2.04910263577918 * H17 ;
340043    +   P_DepVar1  =    -2.26663057425607 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.26663057425607 + P_DepVar1 ;
340044    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
340045    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
340046    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
340047    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
340048    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
340049    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
340050    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
340051    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
340052    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
340053    +END;
MPRINT(EM_DIAGRAM):   END;
340054    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
340055    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
340056    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
340057    +END;
MPRINT(EM_DIAGRAM):   END;
340058    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
340059    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
340060    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
340061    +END;
MPRINT(EM_DIAGRAM):   END;
340062    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
340063    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
340064    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
340065    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
340066    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
340067    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
340068    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
340069    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340070    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
340071    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340072    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
340073    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
340074    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
340075    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
340076    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
340077    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
340078    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
340079    +END;
MPRINT(EM_DIAGRAM):   END;
340080    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
340081    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
340082    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
340083    +drop
340084    +H11
340085    +H12
340086    +H13
340087    +H14
340088    +H15
340089    +H16
340090    +H17
340091    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
340092    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
340093     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL8_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
340094     quit;
340095     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
340096     filename emflow
340096   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
340097     *------------------------------------------------------------*;
340098     * Neural8: Scoring VALIDATE data;
340099     *------------------------------------------------------------*;
340100     data EMWS8.Neural8_VALIDATE
340101     / view=EMWS8.Neural8_VALIDATE
340102     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_VALIDATE / view=EMWS8.Neural8_VALIDATE ;
340103     set EMWS8.Varsel_VALIDATE
340104     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
340105     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas.
340106    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
340107    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
340108    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
340109    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
340110    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
340111    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
340112    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
340113    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
340114    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
340115    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
340116    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
340117    +LENGTH _WARN_ $4
340118    +      F_DepVar  $ 12
340119    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
340120    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
340121    +
340122    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
340123    +
340124    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
340125    +
340126    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
340127    +
340128    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
340129    +
340130    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
340131    +
340132    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
340133    +
340134    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
340135    +
340136    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
340137    +
340138    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
340139    +
340140    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
340141    +
340142    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
340143    +
340144    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
340145    +
340146    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
340147    +
340148    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
340149    +
340150    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
340151    +
340152    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
340153    +
340154    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
340155    +
340156    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
340157    +
340158    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
340159    +
340160    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
340161    +
340162    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340163    +*** Checking missing input Interval
340164    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
340165    +
340166    +IF NMISS(
340167    +   AcceptedCmpTotal ,
340168    +   Mnt ,
340169    +   MntMeatProducts ,
340170    +   NumCatalogPurchases ,
340171    +   RFMstat ,
340172    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Mnt , MntMeatProducts , NumCatalogPurchases 
, RFMstat , Recency ) THEN DO;
340173    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
340174    +
340175    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
340176    +END;
MPRINT(EM_DIAGRAM):   END;
340177    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340178    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
340179    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340180    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
340181    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
340182    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
340183    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
340184    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
340185    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
340186    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
340187    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
340188    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
340189    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
340190    +END;
MPRINT(EM_DIAGRAM):   END;
340191    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
340192    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
340193    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
340194    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
340195    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
340196    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
340197    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
340198    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
340199    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
340200    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
340201    +   ELSE S_NumCatalogPurchases
340202    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
340203    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
340204    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
340205    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
340206    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
340207    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
340208    +END;
MPRINT(EM_DIAGRAM):   END;
340209    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340210    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
340211    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340212    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
340213    +   H11  =     0.26517495321118 * S_AcceptedCmpTotal  +    -0.87413825198876 *
340214    +        S_Mnt  +     5.04044337479394 * S_MntMeatProducts
340215    +          +     0.73338587137623 * S_NumCatalogPurchases
340216    +          +     1.75847953793442 * S_RFMstat  +    -0.20116057418843 *
340217    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.26517495321118 * S_AcceptedCmpTotal + -0.87413825198876 * S_Mnt 
+ 5.04044337479394 * S_MntMeatProducts + 0.73338587137623 * S_NumCatalogPurchases + 
1.75847953793442 * S_RFMstat + -0.20116057418843 * S_Recency ;
340218    +   H12  =    -0.29419263200782 * S_AcceptedCmpTotal  +     0.13220940274202 *
340219    +        S_Mnt  +    -1.04971607430808 * S_MntMeatProducts
340220    +          +      0.6935189671617 * S_NumCatalogPurchases
340221    +          +     0.36816983288974 * S_RFMstat  +    -0.00643331274093 *
340222    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.29419263200782 * S_AcceptedCmpTotal + 0.13220940274202 * S_Mnt 
+ -1.04971607430808 * S_MntMeatProducts + 0.6935189671617 * S_NumCatalogPurchases + 
0.36816983288974 * S_RFMstat + -0.00643331274093 * S_Recency ;
340223    +   H13  =     0.13829897408873 * S_AcceptedCmpTotal  +    -2.23121471987064 *
340224    +        S_Mnt  +     0.62841690349858 * S_MntMeatProducts
340225    +          +     0.29630592582375 * S_NumCatalogPurchases
340226    +          +     0.64308296429787 * S_RFMstat  +     0.59591409485522 *
340227    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.13829897408873 * S_AcceptedCmpTotal + -2.23121471987064 * S_Mnt 
+ 0.62841690349858 * S_MntMeatProducts + 0.29630592582375 * S_NumCatalogPurchases + 
0.64308296429787 * S_RFMstat + 0.59591409485522 * S_Recency ;
340228    +   H14  =    -3.95384198121982 * S_AcceptedCmpTotal  +     2.01854341617621 *
340229    +        S_Mnt  +     2.79950511807496 * S_MntMeatProducts
340230    +          +    -2.17483369150477 * S_NumCatalogPurchases
340231    +          +     0.45727826044187 * S_RFMstat  +    -3.04663085487194 *
340232    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = -3.95384198121982 * S_AcceptedCmpTotal + 2.01854341617621 * S_Mnt 
+ 2.79950511807496 * S_MntMeatProducts + -2.17483369150477 * S_NumCatalogPurchases + 
0.45727826044187 * S_RFMstat + -3.04663085487194 * S_Recency ;
340233    +   H15  =     -0.0515719302773 * S_AcceptedCmpTotal  +    -1.87581836231223 *
340234    +        S_Mnt  +      2.2761907205026 * S_MntMeatProducts
340235    +          +    -1.72538913893407 * S_NumCatalogPurchases
340236    +          +     -0.3123592120938 * S_RFMstat  +     1.58063513304145 *
340237    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = -0.0515719302773 * S_AcceptedCmpTotal + -1.87581836231223 * S_Mnt 
+ 2.2761907205026 * S_MntMeatProducts + -1.72538913893407 * S_NumCatalogPurchases + 
-0.3123592120938 * S_RFMstat + 1.58063513304145 * S_Recency ;
340238    +   H16  =     0.29634579301776 * S_AcceptedCmpTotal  +    -0.70611444699748 *
340239    +        S_Mnt  +     0.18537198194998 * S_MntMeatProducts
340240    +          +     0.10728494982101 * S_NumCatalogPurchases
340241    +          +     0.25847373125288 * S_RFMstat  +    -0.10825431765799 *
340242    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = 0.29634579301776 * S_AcceptedCmpTotal + -0.70611444699748 * S_Mnt 
+ 0.18537198194998 * S_MntMeatProducts + 0.10728494982101 * S_NumCatalogPurchases + 
0.25847373125288 * S_RFMstat + -0.10825431765799 * S_Recency ;
340243    +   H17  =     0.42494872289576 * S_AcceptedCmpTotal  +     2.86832982257419 *
340244    +        S_Mnt  +    -1.29224109729356 * S_MntMeatProducts
340245    +          +    -1.97575805984161 * S_NumCatalogPurchases
340246    +          +      1.1851910683945 * S_RFMstat  +     0.14034943341983 *
340247    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H17 = 0.42494872289576 * S_AcceptedCmpTotal + 2.86832982257419 * S_Mnt + 
-1.29224109729356 * S_MntMeatProducts + -1.97575805984161 * S_NumCatalogPurchases + 
1.1851910683945 * S_RFMstat + 0.14034943341983 * S_Recency ;
340248    +   H11  =     4.10698399107728 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 4.10698399107728 + H11 ;
340249    +   H12  =    -0.85937202501212 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.85937202501212 + H12 ;
340250    +   H13  =     1.76913863070128 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.76913863070128 + H13 ;
340251    +   H14  =    -0.83369559754745 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.83369559754745 + H14 ;
340252    +   H15  =     5.14916643261102 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 5.14916643261102 + H15 ;
340253    +   H16  =    -0.07308651583377 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -0.07308651583377 + H16 ;
340254    +   H17  =     0.67214048080922 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.67214048080922 + H17 ;
340255    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
340256    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
340257    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
340258    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
340259    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
340260    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
340261    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
340262    +END;
MPRINT(EM_DIAGRAM):   END;
340263    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
340264    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
340265    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
340266    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
340267    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
340268    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
340269    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
340270    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
340271    +END;
MPRINT(EM_DIAGRAM):   END;
340272    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340273    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
340274    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340275    +
340276    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
340277    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
340278    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
340279    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
340280    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
340281    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
340282    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
340283    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
340284    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
340285    +end;
MPRINT(EM_DIAGRAM):   end;
340286    +else do;
MPRINT(EM_DIAGRAM):   else do;
340287    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
340288    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
340289    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
340290    +   end;
MPRINT(EM_DIAGRAM):   end;
340291    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
340292    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
340293    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
340294    +   end;
MPRINT(EM_DIAGRAM):   end;
340295    +   else do;
MPRINT(EM_DIAGRAM):   else do;
340296    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
340297    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
340298    +   end;
MPRINT(EM_DIAGRAM):   end;
340299    +end;
MPRINT(EM_DIAGRAM):   end;
340300    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
340301    +   P_DepVar1  =     3.48539232013053 * H11  +    -3.36283315259488 * H12
340302    +          +    -3.73944893696602 * H13  +     0.66404245877611 * H14
340303    +          +    -1.98199539124105 * H15  +     8.06594226275618 * H16
340304    +          +    -2.04910263577918 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.48539232013053 * H11 + -3.36283315259488 * H12 + 
-3.73944893696602 * H13 + 0.66404245877611 * H14 + -1.98199539124105 * H15 + 8.06594226275618 
* H16 + -2.04910263577918 * H17 ;
340305    +   P_DepVar1  =    -2.26663057425607 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.26663057425607 + P_DepVar1 ;
340306    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
340307    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
340308    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
340309    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
340310    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
340311    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
340312    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
340313    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
340314    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
340315    +END;
MPRINT(EM_DIAGRAM):   END;
340316    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
340317    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
340318    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
340319    +END;
MPRINT(EM_DIAGRAM):   END;
340320    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
340321    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
340322    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
340323    +END;
MPRINT(EM_DIAGRAM):   END;
340324    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
340325    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
340326    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
340327    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
340328    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
340329    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
340330    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
340331    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340332    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
340333    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
340334    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
340335    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
340336    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
340337    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
340338    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
340339    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
340340    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
340341    +END;
MPRINT(EM_DIAGRAM):   END;
340342    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
340343    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
340344    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
340345    +drop
340346    +H11
340347    +H12
340348    +H13
340349    +H14
340350    +H15
340351    +H16
340352    +H17
340353    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
340354    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
340355     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL8_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
340356     quit;
340357     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
340358     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
340359     * Neural8: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural8: Computing metadata for TRAIN data;
340360     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL8_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural8_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural8_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural8_TRAIN out=WORK.M1_TW321 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_TW321;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_TW321(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_TW321;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_TW321;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M12549NT NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12549NT;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M12549NT;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UD58E7(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M12549NT;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12549NT;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M12549NT;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12549NT;
MPRINT(EMADVISECOLUMNS):   set WORK.M12549NT;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural8";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural8";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
340672     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
340673     set EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_EMINFO;
340674     where DATA='Neural8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
340675     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL8_EMINFO.
      WHERE (DATA='Neural8') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

340676     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural8_EMINFO;
340677     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
340678     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
340679     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
340683     run;
340684     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_EMINFO;
340685     set EMWS8.Neural8_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_EMINFO WORK.MODELTEMP_INFO;
340686     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

340687     proc sort data = EMWS8.Neural8_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural8_EMINFO NOTHREADS;
340688     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
340689     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

340690     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
340691     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
340692     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.03 seconds
      

340693     proc sort data = EMWS8.Neural8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
340694     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
340695     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

340696     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_EMINFO;
340697     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
340698     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
340699     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

340700     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
340701     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
340702     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
340703     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL8_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL8_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
