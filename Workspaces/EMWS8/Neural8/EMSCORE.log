MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.24 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                17.24 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2QEQIO3 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2QEQIO3 new;
MPRINT(EM_DIAGRAM):   run;
508230     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
508231     set EMWS8.Neural8_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_OUTKEY;
508232     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
508233     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 32 observations read from the data set EMWS8.NEURAL8_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

508234     filename emflow
508234   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
508235     *------------------------------------------------------------*;
508236     * Neural8: Scoring DATA data;
508237     *------------------------------------------------------------*;
508238     data EMWS8.Neural8_TRAIN
508239     / view=EMWS8.Neural8_TRAIN
508240     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_TRAIN / view=EMWS8.Neural8_TRAIN ;
508241     set EMWS8.Varsel_TRAIN
508242     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
508243     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas.
508244    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508245    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
508246    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508247    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
508248    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
508249    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
508250    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
508251    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
508252    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
508253    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
508254    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
508255    +LENGTH _WARN_ $4
508256    +      F_DepVar  $ 12
508257    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
508258    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
508259    +
508260    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
508261    +
508262    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
508263    +
508264    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
508265    +
508266    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
508267    +
508268    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
508269    +
508270    +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
508271    +
508272    +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
508273    +
508274    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
508275    +
508276    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
508277    +
508278    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
508279    +
508280    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
508281    +
508282    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
508283    +
508284    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
508285    +
508286    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
508287    +
508288    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
508289    +
508290    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
508291    +
508292    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
508293    +
508294    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
508295    +
508296    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
508297    +
508298    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
508299    +
508300    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
508301    +
508302    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
508303    +
508304    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
508305    +
508306    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
508307    +
508308    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
508309    +
508310    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
508311    +
508312    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
508313    +
508314    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
508315    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
508316    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
508317    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508318    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508319    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
508320    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508321    +end;
MPRINT(EM_DIAGRAM):   end;
508322    +else do;
MPRINT(EM_DIAGRAM):   else do;
508323    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
508324    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
508325    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
508326    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
508327    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
508328    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
508329    +   end;
MPRINT(EM_DIAGRAM):   end;
508330    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
508331    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
508332    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
508333    +   end;
MPRINT(EM_DIAGRAM):   end;
508334    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
508335    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
508336    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
508337    +   end;
MPRINT(EM_DIAGRAM):   end;
508338    +   else do;
MPRINT(EM_DIAGRAM):   else do;
508339    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508340    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508341    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
508342    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508343    +   end;
MPRINT(EM_DIAGRAM):   end;
508344    +end;
MPRINT(EM_DIAGRAM):   end;
508345    +
508346    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508347    +*** Checking missing input Interval
508348    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
508349    +
508350    +IF NMISS(
508351    +   AcceptedCmpTotal ,
508352    +   Frq ,
508353    +   Income ,
508354    +   Mnt ,
508355    +   MntGoldProds ,
508356    +   MntMeatProducts ,
508357    +   MntWines ,
508358    +   NumDistPurchases ,
508359    +   RFMstat ,
508360    +   RMntFrq ,
508361    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
508362    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
508363    +
508364    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508365    +END;
MPRINT(EM_DIAGRAM):   END;
508366    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508367    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
508368    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508369    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508370    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
508371    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
508372    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
508373    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
508374    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
508375    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
508376    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
508377    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
508378    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
508379    +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
508380    +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
508381    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
508382    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
508383    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
508384    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
508385    +END;
MPRINT(EM_DIAGRAM):   END;
508386    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508387    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
508388    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
508389    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
508390    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
508391    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
508392    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
508393    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
508394    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
508395    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
508396    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
508397    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
508398    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
508399    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
508400    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
508401    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
508402    +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
508403    +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
508404    +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
508405    +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
508406    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
508407    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
508408    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
508409    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
508410    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
508411    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
508412    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
508413    +END;
MPRINT(EM_DIAGRAM):   END;
508414    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508415    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
508416    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508417    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508418    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
508419    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508420    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508421    +   H11  =     0.33294813803267 * S_AcceptedCmpTotal  +    -1.24039573879629 *
508422    +        S_Frq  +    -0.05312453396461 * S_Income  +    -1.10582794272994 *
508423    +        S_Mnt  +    -0.07760643003938 * S_MntGoldProds
508424    +          +     1.40615546889198 * S_MntMeatProducts
508425    +          +    -0.07607000653866 * S_MntWines  +      1.3974050378538 *
508426    +        S_NumDistPurchases  +     0.21523028866532 * S_RFMstat
508427    +          +    -0.90250971189164 * S_RMntFrq  +    -0.29921926423225 *
508428    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.33294813803267 * S_AcceptedCmpTotal + -1.24039573879629 * S_Frq 
+ -0.05312453396461 * S_Income + -1.10582794272994 * S_Mnt + -0.07760643003938 * 
S_MntGoldProds + 1.40615546889198 * S_MntMeatProducts + -0.07607000653866 * S_MntWines + 
1.3974050378538 * S_NumDistPurchases + 0.21523028866532 * S_RFMstat + -0.90250971189164 * 
S_RMntFrq + -0.29921926423225 * S_Recency ;
508429    +   H12  =    -0.12895365437344 * S_AcceptedCmpTotal  +     -1.3313949600547 *
508430    +        S_Frq  +    -1.37899106632441 * S_Income  +    -0.58761109294666 *
508431    +        S_Mnt  +     0.35202206207132 * S_MntGoldProds
508432    +          +     0.09184646817235 * S_MntMeatProducts
508433    +          +     0.13335664554613 * S_MntWines  +     0.61353674232736 *
508434    +        S_NumDistPurchases  +     0.35066529273924 * S_RFMstat
508435    +          +     0.65664535290196 * S_RMntFrq  +    -0.18186117718946 *
508436    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.12895365437344 * S_AcceptedCmpTotal + -1.3313949600547 * S_Frq 
+ -1.37899106632441 * S_Income + -0.58761109294666 * S_Mnt + 0.35202206207132 * S_MntGoldProds 
+ 0.09184646817235 * S_MntMeatProducts + 0.13335664554613 * S_MntWines + 0.61353674232736 * 
S_NumDistPurchases + 0.35066529273924 * S_RFMstat + 0.65664535290196 * S_RMntFrq + 
-0.18186117718946 * S_Recency ;
508437    +   H13  =     0.37357969261544 * S_AcceptedCmpTotal  +     0.39633284030412 *
508438    +        S_Frq  +     0.64644973118257 * S_Income  +    -0.00934866805665 *
508439    +        S_Mnt  +     0.34942371005238 * S_MntGoldProds
508440    +          +     0.39891627134773 * S_MntMeatProducts
508441    +          +    -0.03684678353498 * S_MntWines  +     1.02433172338367 *
508442    +        S_NumDistPurchases  +     0.20910974889856 * S_RFMstat
508443    +          +     0.07904474603466 * S_RMntFrq  +    -0.30357080495082 *
508444    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.37357969261544 * S_AcceptedCmpTotal + 0.39633284030412 * S_Frq + 
0.64644973118257 * S_Income + -0.00934866805665 * S_Mnt + 0.34942371005238 * S_MntGoldProds + 
0.39891627134773 * S_MntMeatProducts + -0.03684678353498 * S_MntWines + 1.02433172338367 * 
S_NumDistPurchases + 0.20910974889856 * S_RFMstat + 0.07904474603466 * S_RMntFrq + 
-0.30357080495082 * S_Recency ;
508445    +   H14  =     0.13554328647808 * S_AcceptedCmpTotal  +    -0.07048372524888 *
508446    +        S_Frq  +     0.04610079419509 * S_Income  +     0.10924113857251 *
508447    +        S_Mnt  +     0.12915488369242 * S_MntGoldProds
508448    +          +     0.18610321199349 * S_MntMeatProducts
508449    +          +     0.70556343816133 * S_MntWines  +     0.25728143320607 *
508450    +        S_NumDistPurchases  +     0.15972524961567 * S_RFMstat
508451    +          +     0.01276365258392 * S_RMntFrq  +    -0.66413982659745 *
508452    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.13554328647808 * S_AcceptedCmpTotal + -0.07048372524888 * S_Frq 
+ 0.04610079419509 * S_Income + 0.10924113857251 * S_Mnt + 0.12915488369242 * S_MntGoldProds + 
0.18610321199349 * S_MntMeatProducts + 0.70556343816133 * S_MntWines + 0.25728143320607 * 
S_NumDistPurchases + 0.15972524961567 * S_RFMstat + 0.01276365258392 * S_RMntFrq + 
-0.66413982659745 * S_Recency ;
508453    +   H15  =     -1.1420503402904 * S_AcceptedCmpTotal  +     0.71380555863062 *
508454    +        S_Frq  +    -0.24803616582173 * S_Income  +     0.13154058420998 *
508455    +        S_Mnt  +    -0.42749671288369 * S_MntGoldProds
508456    +          +     -1.3154288229161 * S_MntMeatProducts
508457    +          +      -0.255711705654 * S_MntWines  +     0.11914899881729 *
508458    +        S_NumDistPurchases  +    -0.05982295822576 * S_RFMstat
508459    +          +    -0.69679195615668 * S_RMntFrq  +    -0.21391830972623 *
508460    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = -1.1420503402904 * S_AcceptedCmpTotal + 0.71380555863062 * S_Frq + 
-0.24803616582173 * S_Income + 0.13154058420998 * S_Mnt + -0.42749671288369 * S_MntGoldProds + 
-1.3154288229161 * S_MntMeatProducts + -0.255711705654 * S_MntWines + 0.11914899881729 * 
S_NumDistPurchases + -0.05982295822576 * S_RFMstat + -0.69679195615668 * S_RMntFrq + 
-0.21391830972623 * S_Recency ;
508461    +   H16  =     0.00981250946025 * S_AcceptedCmpTotal  +     0.04123504196179 *
508462    +        S_Frq  +     0.12222635666431 * S_Income  +     0.29796072335771 *
508463    +        S_Mnt  +     0.22410489312536 * S_MntGoldProds
508464    +          +    -1.05184346257138 * S_MntMeatProducts
508465    +          +     0.19959913357382 * S_MntWines  +    -0.69776033144787 *
508466    +        S_NumDistPurchases  +    -0.40844675601616 * S_RFMstat
508467    +          +    -0.86567751620087 * S_RMntFrq  +       0.363703677148 *
508468    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = 0.00981250946025 * S_AcceptedCmpTotal + 0.04123504196179 * S_Frq + 
0.12222635666431 * S_Income + 0.29796072335771 * S_Mnt + 0.22410489312536 * S_MntGoldProds + 
-1.05184346257138 * S_MntMeatProducts + 0.19959913357382 * S_MntWines + -0.69776033144787 * 
S_NumDistPurchases + -0.40844675601616 * S_RFMstat + -0.86567751620087 * S_RMntFrq + 
0.363703677148 * S_Recency ;
508469    +   H17  =     0.94478838355387 * S_AcceptedCmpTotal  +    -0.70060201854486 *
508470    +        S_Frq  +     -0.1828959052644 * S_Income  +    -0.69020858610444 *
508471    +        S_Mnt  +    -0.10810625538739 * S_MntGoldProds
508472    +          +     0.08623383006102 * S_MntMeatProducts
508473    +          +    -0.10662594781542 * S_MntWines  +     0.49956982718189 *
508474    +        S_NumDistPurchases  +    -0.52485639325545 * S_RFMstat
508475    +          +    -0.21634639560711 * S_RMntFrq  +    -1.54075315391445 *
508476    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H17 = 0.94478838355387 * S_AcceptedCmpTotal + -0.70060201854486 * S_Frq 
+ -0.1828959052644 * S_Income + -0.69020858610444 * S_Mnt + -0.10810625538739 * S_MntGoldProds 
+ 0.08623383006102 * S_MntMeatProducts + -0.10662594781542 * S_MntWines + 0.49956982718189 * 
S_NumDistPurchases + -0.52485639325545 * S_RFMstat + -0.21634639560711 * S_RMntFrq + 
-1.54075315391445 * S_Recency ;
508477    +   H11  = H11  +     0.16164655653565 * G_Marital_Status0
508478    +          +     0.08705670063172 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.16164655653565 * G_Marital_Status0 + 0.08705670063172 * 
G_Marital_Status1 ;
508479    +   H12  = H12  +     0.00173619463191 * G_Marital_Status0
508480    +          +    -0.01602297769528 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.00173619463191 * G_Marital_Status0 + -0.01602297769528 * 
G_Marital_Status1 ;
508481    +   H13  = H13  +    -0.20647507845797 * G_Marital_Status0
508482    +          +    -0.14268881423356 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.20647507845797 * G_Marital_Status0 + -0.14268881423356 * 
G_Marital_Status1 ;
508483    +   H14  = H14  +     0.66515401547718 * G_Marital_Status0
508484    +          +     0.13894686879381 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.66515401547718 * G_Marital_Status0 + 0.13894686879381 * 
G_Marital_Status1 ;
508485    +   H15  = H15  +    -0.10602970955306 * G_Marital_Status0
508486    +          +     0.12966863964317 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.10602970955306 * G_Marital_Status0 + 0.12966863964317 * 
G_Marital_Status1 ;
508487    +   H16  = H16  +     0.25775977539205 * G_Marital_Status0
508488    +          +     0.20902791963936 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.25775977539205 * G_Marital_Status0 + 0.20902791963936 * 
G_Marital_Status1 ;
508489    +   H17  = H17  +     0.54268893569335 * G_Marital_Status0
508490    +          +     0.63641124967593 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.54268893569335 * G_Marital_Status0 + 0.63641124967593 * 
G_Marital_Status1 ;
508491    +   H11  =    -0.89307077259606 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.89307077259606 + H11 ;
508492    +   H12  =    -0.52976269769549 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.52976269769549 + H12 ;
508493    +   H13  =     1.93938724237609 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.93938724237609 + H13 ;
508494    +   H14  =    -2.08624954900209 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.08624954900209 + H14 ;
508495    +   H15  =     1.21926205411217 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 1.21926205411217 + H15 ;
508496    +   H16  =    -0.82614580546756 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -0.82614580546756 + H16 ;
508497    +   H17  =     0.88553151374376 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.88553151374376 + H17 ;
508498    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
508499    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
508500    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
508501    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
508502    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
508503    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
508504    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
508505    +END;
MPRINT(EM_DIAGRAM):   END;
508506    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508507    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
508508    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
508509    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
508510    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
508511    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
508512    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
508513    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
508514    +END;
MPRINT(EM_DIAGRAM):   END;
508515    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508516    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
508517    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508518    +
508519    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
508520    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
508521    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
508522    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
508523    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
508524    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
508525    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
508526    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
508527    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
508528    +end;
MPRINT(EM_DIAGRAM):   end;
508529    +else do;
MPRINT(EM_DIAGRAM):   else do;
508530    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
508531    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
508532    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
508533    +   end;
MPRINT(EM_DIAGRAM):   end;
508534    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
508535    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
508536    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
508537    +   end;
MPRINT(EM_DIAGRAM):   end;
508538    +   else do;
MPRINT(EM_DIAGRAM):   else do;
508539    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
508540    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
508541    +   end;
MPRINT(EM_DIAGRAM):   end;
508542    +end;
MPRINT(EM_DIAGRAM):   end;
508543    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508544    +   P_DepVar1  =     2.95606472513759 * H11  +     1.89470964296724 * H12
508545    +          +     1.54768089051578 * H13  +     1.66736822539449 * H14
508546    +          +    -1.78269941197359 * H15  +    -1.37291423165719 * H16
508547    +          +      2.0599951000352 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.95606472513759 * H11 + 1.89470964296724 * H12 + 
1.54768089051578 * H13 + 1.66736822539449 * H14 + -1.78269941197359 * H15 + -1.37291423165719 
* H16 + 2.0599951000352 * H17 ;
508548    +   P_DepVar1  =    -1.26664447892937 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.26664447892937 + P_DepVar1 ;
508549    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
508550    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
508551    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
508552    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
508553    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
508554    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
508555    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
508556    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
508557    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
508558    +END;
MPRINT(EM_DIAGRAM):   END;
508559    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508560    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
508561    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
508562    +END;
MPRINT(EM_DIAGRAM):   END;
508563    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
508564    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
508565    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
508566    +END;
MPRINT(EM_DIAGRAM):   END;
508567    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
508568    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
508569    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
508570    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
508571    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
508572    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
508573    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
508574    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508575    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
508576    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508577    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
508578    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
508579    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
508580    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
508581    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
508582    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
508583    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
508584    +END;
MPRINT(EM_DIAGRAM):   END;
508585    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
508586    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
508587    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
508588    +drop
508589    +H11
508590    +H12
508591    +H13
508592    +H14
508593    +H15
508594    +H16
508595    +H17
508596    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
508597    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
508598     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL8_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
508599     quit;
508600     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
508601     filename emflow
508601   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
508602     *------------------------------------------------------------*;
508603     * Neural8: Scoring VALIDATE data;
508604     *------------------------------------------------------------*;
508605     data EMWS8.Neural8_VALIDATE
508606     / view=EMWS8.Neural8_VALIDATE
508607     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_VALIDATE / view=EMWS8.Neural8_VALIDATE ;
508608     set EMWS8.Varsel_VALIDATE
508609     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
508610     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas.
508611    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508612    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
508613    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
508614    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
508615    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
508616    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
508617    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
508618    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
508619    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
508620    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
508621    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
508622    +LENGTH _WARN_ $4
508623    +      F_DepVar  $ 12
508624    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
508625    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
508626    +
508627    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
508628    +
508629    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
508630    +
508631    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
508632    +
508633    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
508634    +
508635    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
508636    +
508637    +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
508638    +
508639    +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
508640    +
508641    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
508642    +
508643    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
508644    +
508645    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
508646    +
508647    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
508648    +
508649    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
508650    +
508651    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
508652    +
508653    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
508654    +
508655    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
508656    +
508657    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
508658    +
508659    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
508660    +
508661    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
508662    +
508663    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
508664    +
508665    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
508666    +
508667    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
508668    +
508669    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
508670    +
508671    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
508672    +
508673    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
508674    +
508675    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
508676    +
508677    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
508678    +
508679    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
508680    +
508681    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
508682    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
508683    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
508684    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508685    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508686    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
508687    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508688    +end;
MPRINT(EM_DIAGRAM):   end;
508689    +else do;
MPRINT(EM_DIAGRAM):   else do;
508690    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
508691    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
508692    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
508693    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
508694    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
508695    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
508696    +   end;
MPRINT(EM_DIAGRAM):   end;
508697    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
508698    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
508699    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
508700    +   end;
MPRINT(EM_DIAGRAM):   end;
508701    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
508702    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
508703    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
508704    +   end;
MPRINT(EM_DIAGRAM):   end;
508705    +   else do;
MPRINT(EM_DIAGRAM):   else do;
508706    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
508707    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
508708    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
508709    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508710    +   end;
MPRINT(EM_DIAGRAM):   end;
508711    +end;
MPRINT(EM_DIAGRAM):   end;
508712    +
508713    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508714    +*** Checking missing input Interval
508715    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
508716    +
508717    +IF NMISS(
508718    +   AcceptedCmpTotal ,
508719    +   Frq ,
508720    +   Income ,
508721    +   Mnt ,
508722    +   MntGoldProds ,
508723    +   MntMeatProducts ,
508724    +   MntWines ,
508725    +   NumDistPurchases ,
508726    +   RFMstat ,
508727    +   RMntFrq ,
508728    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntGoldProds , 
MntMeatProducts , MntWines , NumDistPurchases , RFMstat , RMntFrq , Recency ) THEN DO;
508729    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
508730    +
508731    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
508732    +END;
MPRINT(EM_DIAGRAM):   END;
508733    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508734    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
508735    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508736    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508737    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
508738    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
508739    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
508740    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
508741    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
508742    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
508743    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
508744    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
508745    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
508746    +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
508747    +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
508748    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
508749    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
508750    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
508751    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
508752    +END;
MPRINT(EM_DIAGRAM):   END;
508753    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508754    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
508755    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
508756    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
508757    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
508758    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
508759    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
508760    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
508761    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
508762    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
508763    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
508764    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
508765    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
508766    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
508767    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
508768    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
508769    +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
508770    +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
508771    +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
508772    +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
508773    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 * 
NumDistPurchases ;
508774    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
508775    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
508776    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
508777    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
508778    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
508779    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
508780    +END;
MPRINT(EM_DIAGRAM):   END;
508781    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508782    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
508783    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508784    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508785    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
508786    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508787    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508788    +   H11  =     0.33294813803267 * S_AcceptedCmpTotal  +    -1.24039573879629 *
508789    +        S_Frq  +    -0.05312453396461 * S_Income  +    -1.10582794272994 *
508790    +        S_Mnt  +    -0.07760643003938 * S_MntGoldProds
508791    +          +     1.40615546889198 * S_MntMeatProducts
508792    +          +    -0.07607000653866 * S_MntWines  +      1.3974050378538 *
508793    +        S_NumDistPurchases  +     0.21523028866532 * S_RFMstat
508794    +          +    -0.90250971189164 * S_RMntFrq  +    -0.29921926423225 *
508795    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.33294813803267 * S_AcceptedCmpTotal + -1.24039573879629 * S_Frq 
+ -0.05312453396461 * S_Income + -1.10582794272994 * S_Mnt + -0.07760643003938 * 
S_MntGoldProds + 1.40615546889198 * S_MntMeatProducts + -0.07607000653866 * S_MntWines + 
1.3974050378538 * S_NumDistPurchases + 0.21523028866532 * S_RFMstat + -0.90250971189164 * 
S_RMntFrq + -0.29921926423225 * S_Recency ;
508796    +   H12  =    -0.12895365437344 * S_AcceptedCmpTotal  +     -1.3313949600547 *
508797    +        S_Frq  +    -1.37899106632441 * S_Income  +    -0.58761109294666 *
508798    +        S_Mnt  +     0.35202206207132 * S_MntGoldProds
508799    +          +     0.09184646817235 * S_MntMeatProducts
508800    +          +     0.13335664554613 * S_MntWines  +     0.61353674232736 *
508801    +        S_NumDistPurchases  +     0.35066529273924 * S_RFMstat
508802    +          +     0.65664535290196 * S_RMntFrq  +    -0.18186117718946 *
508803    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.12895365437344 * S_AcceptedCmpTotal + -1.3313949600547 * S_Frq 
+ -1.37899106632441 * S_Income + -0.58761109294666 * S_Mnt + 0.35202206207132 * S_MntGoldProds 
+ 0.09184646817235 * S_MntMeatProducts + 0.13335664554613 * S_MntWines + 0.61353674232736 * 
S_NumDistPurchases + 0.35066529273924 * S_RFMstat + 0.65664535290196 * S_RMntFrq + 
-0.18186117718946 * S_Recency ;
508804    +   H13  =     0.37357969261544 * S_AcceptedCmpTotal  +     0.39633284030412 *
508805    +        S_Frq  +     0.64644973118257 * S_Income  +    -0.00934866805665 *
508806    +        S_Mnt  +     0.34942371005238 * S_MntGoldProds
508807    +          +     0.39891627134773 * S_MntMeatProducts
508808    +          +    -0.03684678353498 * S_MntWines  +     1.02433172338367 *
508809    +        S_NumDistPurchases  +     0.20910974889856 * S_RFMstat
508810    +          +     0.07904474603466 * S_RMntFrq  +    -0.30357080495082 *
508811    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.37357969261544 * S_AcceptedCmpTotal + 0.39633284030412 * S_Frq + 
0.64644973118257 * S_Income + -0.00934866805665 * S_Mnt + 0.34942371005238 * S_MntGoldProds + 
0.39891627134773 * S_MntMeatProducts + -0.03684678353498 * S_MntWines + 1.02433172338367 * 
S_NumDistPurchases + 0.20910974889856 * S_RFMstat + 0.07904474603466 * S_RMntFrq + 
-0.30357080495082 * S_Recency ;
508812    +   H14  =     0.13554328647808 * S_AcceptedCmpTotal  +    -0.07048372524888 *
508813    +        S_Frq  +     0.04610079419509 * S_Income  +     0.10924113857251 *
508814    +        S_Mnt  +     0.12915488369242 * S_MntGoldProds
508815    +          +     0.18610321199349 * S_MntMeatProducts
508816    +          +     0.70556343816133 * S_MntWines  +     0.25728143320607 *
508817    +        S_NumDistPurchases  +     0.15972524961567 * S_RFMstat
508818    +          +     0.01276365258392 * S_RMntFrq  +    -0.66413982659745 *
508819    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.13554328647808 * S_AcceptedCmpTotal + -0.07048372524888 * S_Frq 
+ 0.04610079419509 * S_Income + 0.10924113857251 * S_Mnt + 0.12915488369242 * S_MntGoldProds + 
0.18610321199349 * S_MntMeatProducts + 0.70556343816133 * S_MntWines + 0.25728143320607 * 
S_NumDistPurchases + 0.15972524961567 * S_RFMstat + 0.01276365258392 * S_RMntFrq + 
-0.66413982659745 * S_Recency ;
508820    +   H15  =     -1.1420503402904 * S_AcceptedCmpTotal  +     0.71380555863062 *
508821    +        S_Frq  +    -0.24803616582173 * S_Income  +     0.13154058420998 *
508822    +        S_Mnt  +    -0.42749671288369 * S_MntGoldProds
508823    +          +     -1.3154288229161 * S_MntMeatProducts
508824    +          +      -0.255711705654 * S_MntWines  +     0.11914899881729 *
508825    +        S_NumDistPurchases  +    -0.05982295822576 * S_RFMstat
508826    +          +    -0.69679195615668 * S_RMntFrq  +    -0.21391830972623 *
508827    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = -1.1420503402904 * S_AcceptedCmpTotal + 0.71380555863062 * S_Frq + 
-0.24803616582173 * S_Income + 0.13154058420998 * S_Mnt + -0.42749671288369 * S_MntGoldProds + 
-1.3154288229161 * S_MntMeatProducts + -0.255711705654 * S_MntWines + 0.11914899881729 * 
S_NumDistPurchases + -0.05982295822576 * S_RFMstat + -0.69679195615668 * S_RMntFrq + 
-0.21391830972623 * S_Recency ;
508828    +   H16  =     0.00981250946025 * S_AcceptedCmpTotal  +     0.04123504196179 *
508829    +        S_Frq  +     0.12222635666431 * S_Income  +     0.29796072335771 *
508830    +        S_Mnt  +     0.22410489312536 * S_MntGoldProds
508831    +          +    -1.05184346257138 * S_MntMeatProducts
508832    +          +     0.19959913357382 * S_MntWines  +    -0.69776033144787 *
508833    +        S_NumDistPurchases  +    -0.40844675601616 * S_RFMstat
508834    +          +    -0.86567751620087 * S_RMntFrq  +       0.363703677148 *
508835    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = 0.00981250946025 * S_AcceptedCmpTotal + 0.04123504196179 * S_Frq + 
0.12222635666431 * S_Income + 0.29796072335771 * S_Mnt + 0.22410489312536 * S_MntGoldProds + 
-1.05184346257138 * S_MntMeatProducts + 0.19959913357382 * S_MntWines + -0.69776033144787 * 
S_NumDistPurchases + -0.40844675601616 * S_RFMstat + -0.86567751620087 * S_RMntFrq + 
0.363703677148 * S_Recency ;
508836    +   H17  =     0.94478838355387 * S_AcceptedCmpTotal  +    -0.70060201854486 *
508837    +        S_Frq  +     -0.1828959052644 * S_Income  +    -0.69020858610444 *
508838    +        S_Mnt  +    -0.10810625538739 * S_MntGoldProds
508839    +          +     0.08623383006102 * S_MntMeatProducts
508840    +          +    -0.10662594781542 * S_MntWines  +     0.49956982718189 *
508841    +        S_NumDistPurchases  +    -0.52485639325545 * S_RFMstat
508842    +          +    -0.21634639560711 * S_RMntFrq  +    -1.54075315391445 *
508843    +        S_Recency ;
MPRINT(EM_DIAGRAM):   H17 = 0.94478838355387 * S_AcceptedCmpTotal + -0.70060201854486 * S_Frq 
+ -0.1828959052644 * S_Income + -0.69020858610444 * S_Mnt + -0.10810625538739 * S_MntGoldProds 
+ 0.08623383006102 * S_MntMeatProducts + -0.10662594781542 * S_MntWines + 0.49956982718189 * 
S_NumDistPurchases + -0.52485639325545 * S_RFMstat + -0.21634639560711 * S_RMntFrq + 
-1.54075315391445 * S_Recency ;
508844    +   H11  = H11  +     0.16164655653565 * G_Marital_Status0
508845    +          +     0.08705670063172 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.16164655653565 * G_Marital_Status0 + 0.08705670063172 * 
G_Marital_Status1 ;
508846    +   H12  = H12  +     0.00173619463191 * G_Marital_Status0
508847    +          +    -0.01602297769528 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.00173619463191 * G_Marital_Status0 + -0.01602297769528 * 
G_Marital_Status1 ;
508848    +   H13  = H13  +    -0.20647507845797 * G_Marital_Status0
508849    +          +    -0.14268881423356 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.20647507845797 * G_Marital_Status0 + -0.14268881423356 * 
G_Marital_Status1 ;
508850    +   H14  = H14  +     0.66515401547718 * G_Marital_Status0
508851    +          +     0.13894686879381 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.66515401547718 * G_Marital_Status0 + 0.13894686879381 * 
G_Marital_Status1 ;
508852    +   H15  = H15  +    -0.10602970955306 * G_Marital_Status0
508853    +          +     0.12966863964317 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.10602970955306 * G_Marital_Status0 + 0.12966863964317 * 
G_Marital_Status1 ;
508854    +   H16  = H16  +     0.25775977539205 * G_Marital_Status0
508855    +          +     0.20902791963936 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.25775977539205 * G_Marital_Status0 + 0.20902791963936 * 
G_Marital_Status1 ;
508856    +   H17  = H17  +     0.54268893569335 * G_Marital_Status0
508857    +          +     0.63641124967593 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.54268893569335 * G_Marital_Status0 + 0.63641124967593 * 
G_Marital_Status1 ;
508858    +   H11  =    -0.89307077259606 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.89307077259606 + H11 ;
508859    +   H12  =    -0.52976269769549 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.52976269769549 + H12 ;
508860    +   H13  =     1.93938724237609 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.93938724237609 + H13 ;
508861    +   H14  =    -2.08624954900209 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -2.08624954900209 + H14 ;
508862    +   H15  =     1.21926205411217 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 1.21926205411217 + H15 ;
508863    +   H16  =    -0.82614580546756 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -0.82614580546756 + H16 ;
508864    +   H17  =     0.88553151374376 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 0.88553151374376 + H17 ;
508865    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
508866    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
508867    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
508868    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
508869    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
508870    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
508871    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
508872    +END;
MPRINT(EM_DIAGRAM):   END;
508873    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508874    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
508875    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
508876    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
508877    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
508878    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
508879    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
508880    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
508881    +END;
MPRINT(EM_DIAGRAM):   END;
508882    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508883    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
508884    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508885    +
508886    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
508887    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
508888    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
508889    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
508890    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
508891    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
508892    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
508893    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
508894    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
508895    +end;
MPRINT(EM_DIAGRAM):   end;
508896    +else do;
MPRINT(EM_DIAGRAM):   else do;
508897    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
508898    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
508899    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
508900    +   end;
MPRINT(EM_DIAGRAM):   end;
508901    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
508902    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
508903    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
508904    +   end;
MPRINT(EM_DIAGRAM):   end;
508905    +   else do;
MPRINT(EM_DIAGRAM):   else do;
508906    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
508907    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
508908    +   end;
MPRINT(EM_DIAGRAM):   end;
508909    +end;
MPRINT(EM_DIAGRAM):   end;
508910    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
508911    +   P_DepVar1  =     2.95606472513759 * H11  +     1.89470964296724 * H12
508912    +          +     1.54768089051578 * H13  +     1.66736822539449 * H14
508913    +          +    -1.78269941197359 * H15  +    -1.37291423165719 * H16
508914    +          +      2.0599951000352 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.95606472513759 * H11 + 1.89470964296724 * H12 + 
1.54768089051578 * H13 + 1.66736822539449 * H14 + -1.78269941197359 * H15 + -1.37291423165719 
* H16 + 2.0599951000352 * H17 ;
508915    +   P_DepVar1  =    -1.26664447892937 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.26664447892937 + P_DepVar1 ;
508916    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
508917    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
508918    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
508919    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
508920    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
508921    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
508922    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
508923    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
508924    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
508925    +END;
MPRINT(EM_DIAGRAM):   END;
508926    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
508927    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
508928    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
508929    +END;
MPRINT(EM_DIAGRAM):   END;
508930    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
508931    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
508932    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
508933    +END;
MPRINT(EM_DIAGRAM):   END;
508934    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
508935    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
508936    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
508937    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
508938    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
508939    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
508940    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
508941    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508942    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
508943    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
508944    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
508945    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
508946    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
508947    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
508948    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
508949    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
508950    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
508951    +END;
MPRINT(EM_DIAGRAM):   END;
508952    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
508953    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
508954    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
508955    +drop
508956    +H11
508957    +H12
508958    +H13
508959    +H14
508960    +H15
508961    +H16
508962    +H17
508963    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
508964    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
508965     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL8_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
508966     quit;
508967     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
508968     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
508969     * Neural8: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural8: Computing metadata for TRAIN data;
508970     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL8_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural8_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural8_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural8_TRAIN out=WORK.M1RM0EPV noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1RM0EPV;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1RM0EPV(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1RM0EPV;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1RM0EPV;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M12EWXGD NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12EWXGD;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M12EWXGD;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0J31UYP(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M12EWXGD;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12EWXGD;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M12EWXGD;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12EWXGD;
MPRINT(EMADVISECOLUMNS):   set WORK.M12EWXGD;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural8";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural8";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
509282     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
509283     set EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_EMINFO;
509284     where DATA='Neural8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
509285     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL8_EMINFO.
      WHERE (DATA='Neural8') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509286     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural8_EMINFO;
509287     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
509288     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
509289     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
509293     run;
509294     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_EMINFO;
509295     set EMWS8.Neural8_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_EMINFO WORK.MODELTEMP_INFO;
509296     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

509297     proc sort data = EMWS8.Neural8_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural8_EMINFO NOTHREADS;
509298     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509299     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509300     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
509301     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509302     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509303     proc sort data = EMWS8.Neural8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
509304     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509305     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

509306     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_EMINFO;
509307     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
509308     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
509309     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

509310     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
509311     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
509312     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
509313     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS8.NEURAL8_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.NEURAL8_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
