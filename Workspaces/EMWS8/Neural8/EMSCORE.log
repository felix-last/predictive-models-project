MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.27 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                17.27 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O37SVJMZ 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O37SVJMZ new;
MPRINT(EM_DIAGRAM):   run;
895419     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
895420     set EMWS8.Neural8_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_OUTKEY;
895421     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
895422     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set EMWS8.NEURAL8_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

895423     filename emflow
895423   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
895424     *------------------------------------------------------------*;
895425     * Neural8: Scoring DATA data;
895426     *------------------------------------------------------------*;
895427     data EMWS8.Neural8_TRAIN
895428     / view=EMWS8.Neural8_TRAIN
895429     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_TRAIN / view=EMWS8.Neural8_TRAIN ;
895430     set EMWS8.Varsel_TRAIN
895431     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
895432     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas.
895433    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
895434    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
895435    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
895436    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
895437    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
895438    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
895439    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
895440    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
895441    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
895442    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
895443    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
895444    +LENGTH _WARN_ $4
895445    +      F_DepVar  $ 12
895446    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
895447    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
895448    +
895449    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
895450    +
895451    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
895452    +
895453    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
895454    +
895455    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
895456    +
895457    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
895458    +
895459    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
895460    +
895461    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
895462    +
895463    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
895464    +
895465    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
895466    +
895467    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
895468    +
895469    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
895470    +
895471    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
895472    +
895473    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
895474    +
895475    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
895476    +
895477    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
895478    +
895479    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
895480    +
895481    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
895482    +
895483    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
895484    +
895485    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
895486    +
895487    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
895488    +
895489    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
895490    +
895491    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
895492    +
895493    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
895494    +
895495    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
895496    +
895497    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
895498    +
895499    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
895500    +
895501    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
895502    +
895503    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
895504    +
895505    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
895506    +
895507    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
895508    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
895509    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
895510    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
895511    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
895512    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
895513    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
895514    +end;
MPRINT(EM_DIAGRAM):   end;
895515    +else do;
MPRINT(EM_DIAGRAM):   else do;
895516    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
895517    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
895518    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
895519    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
895520    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
895521    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
895522    +   end;
MPRINT(EM_DIAGRAM):   end;
895523    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
895524    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
895525    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
895526    +   end;
MPRINT(EM_DIAGRAM):   end;
895527    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
895528    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
895529    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
895530    +   end;
MPRINT(EM_DIAGRAM):   end;
895531    +   else do;
MPRINT(EM_DIAGRAM):   else do;
895532    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
895533    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
895534    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
895535    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
895536    +   end;
MPRINT(EM_DIAGRAM):   end;
895537    +end;
MPRINT(EM_DIAGRAM):   end;
895538    +
895539    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895540    +*** Checking missing input Interval
895541    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
895542    +
895543    +IF NMISS(
895544    +   AcceptedCmpTotal ,
895545    +   Frq ,
895546    +   Income ,
895547    +   Mnt ,
895548    +   MntFruits ,
895549    +   MntGoldProds ,
895550    +   MntMeatProducts ,
895551    +   MntSweetProducts ,
895552    +   NumCatalogPurchases ,
895553    +   NumWebPurchases ,
895554    +   RFMstat ,
895555    +   RMntFrq ,
895556    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
895557    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
895558    +
895559    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
895560    +END;
MPRINT(EM_DIAGRAM):   END;
895561    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895562    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
895563    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895564    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
895565    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
895566    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
895567    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
895568    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
895569    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
895570    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
895571    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
895572    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
895573    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
895574    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
895575    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
895576    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
895577    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
895578    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
895579    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
895580    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
895581    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
895582    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
895583    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
895584    +END;
MPRINT(EM_DIAGRAM):   END;
895585    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
895586    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
895587    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
895588    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
895589    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
895590    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
895591    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
895592    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
895593    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
895594    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
895595    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
895596    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
895597    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
895598    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
895599    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
895600    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
895601    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
895602    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
895603    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
895604    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
895605    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
895606    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
895607    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
895608    +   ELSE S_NumCatalogPurchases
895609    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
895610    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
895611    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
895612    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
895613    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
895614    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
895615    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
895616    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
895617    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
895618    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
895619    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
895620    +END;
MPRINT(EM_DIAGRAM):   END;
895621    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895622    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
895623    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895624    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895625    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
895626    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895627    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
895628    +   H11  =     0.00179298802892 * S_AcceptedCmpTotal  +     0.01784009275608 *
895629    +        S_Frq  +     0.69409617936033 * S_Income  +    -0.28641816886809 *
895630    +        S_Mnt  +     0.21745721720131 * S_MntFruits  +    -0.38924339437831 *
895631    +        S_MntGoldProds  +     0.48302006424722 * S_MntMeatProducts
895632    +          +     0.32217287817742 * S_MntSweetProducts
895633    +          +     0.37317765763795 * S_NumCatalogPurchases
895634    +          +     0.31712152035565 * S_NumWebPurchases
895635    +          +    -0.00101711956377 * S_RFMstat  +    -0.50814709993968 *
895636    +        S_RMntFrq  +     -0.2674878177058 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.00179298802892 * S_AcceptedCmpTotal + 0.01784009275608 * S_Frq + 
0.69409617936033 * S_Income + -0.28641816886809 * S_Mnt + 0.21745721720131 * S_MntFruits + 
-0.38924339437831 * S_MntGoldProds + 0.48302006424722 * S_MntMeatProducts + 0.32217287817742 * 
S_MntSweetProducts + 0.37317765763795 * S_NumCatalogPurchases + 0.31712152035565 * 
S_NumWebPurchases + -0.00101711956377 * S_RFMstat + -0.50814709993968 * S_RMntFrq + 
-0.2674878177058 * S_Recency ;
895637    +   H12  =    -0.13522102699695 * S_AcceptedCmpTotal  +     0.62468738576113 *
895638    +        S_Frq  +     0.33525631913577 * S_Income  +     0.49596519260867 *
895639    +        S_Mnt  +    -0.07840703709606 * S_MntFruits  +    -0.13407863606593 *
895640    +        S_MntGoldProds  +     0.07892036440987 * S_MntMeatProducts
895641    +          +    -0.19345300638771 * S_MntSweetProducts
895642    +          +     0.37926806634405 * S_NumCatalogPurchases
895643    +          +     0.17926711405358 * S_NumWebPurchases
895644    +          +    -0.56247478537915 * S_RFMstat  +    -0.83222377723575 *
895645    +        S_RMntFrq  +     0.06152905340066 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.13522102699695 * S_AcceptedCmpTotal + 0.62468738576113 * S_Frq 
+ 0.33525631913577 * S_Income + 0.49596519260867 * S_Mnt + -0.07840703709606 * S_MntFruits + 
-0.13407863606593 * S_MntGoldProds + 0.07892036440987 * S_MntMeatProducts + -0.19345300638771 
* S_MntSweetProducts + 0.37926806634405 * S_NumCatalogPurchases + 0.17926711405358 * 
S_NumWebPurchases + -0.56247478537915 * S_RFMstat + -0.83222377723575 * S_RMntFrq + 
0.06152905340066 * S_Recency ;
895646    +   H13  =     0.52085707566671 * S_AcceptedCmpTotal  +    -0.43119445779869 *
895647    +        S_Frq  +    -0.38451776725994 * S_Income  +    -0.43893571865073 *
895648    +        S_Mnt  +    -0.18147736658896 * S_MntFruits  +    -0.02759924916073 *
895649    +        S_MntGoldProds  +     0.41710329802839 * S_MntMeatProducts
895650    +          +    -0.11238728777733 * S_MntSweetProducts
895651    +          +     0.39955878063516 * S_NumCatalogPurchases
895652    +          +     0.37701883017309 * S_NumWebPurchases
895653    +          +    -0.03011513977353 * S_RFMstat  +     0.05558894855861 *
895654    +        S_RMntFrq  +    -0.53097904952065 * S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.52085707566671 * S_AcceptedCmpTotal + -0.43119445779869 * S_Frq 
+ -0.38451776725994 * S_Income + -0.43893571865073 * S_Mnt + -0.18147736658896 * S_MntFruits + 
-0.02759924916073 * S_MntGoldProds + 0.41710329802839 * S_MntMeatProducts + -0.11238728777733 
* S_MntSweetProducts + 0.39955878063516 * S_NumCatalogPurchases + 0.37701883017309 * 
S_NumWebPurchases + -0.03011513977353 * S_RFMstat + 0.05558894855861 * S_RMntFrq + 
-0.53097904952065 * S_Recency ;
895655    +   H14  =     0.01011198652387 * S_AcceptedCmpTotal  +     0.50914419302954 *
895656    +        S_Frq  +     0.36935051571942 * S_Income  +    -0.14541266632981 *
895657    +        S_Mnt  +     0.70809835135242 * S_MntFruits  +     0.17636828127553 *
895658    +        S_MntGoldProds  +    -0.39065133922684 * S_MntMeatProducts
895659    +          +      0.2693109494597 * S_MntSweetProducts
895660    +          +      0.1081864929712 * S_NumCatalogPurchases
895661    +          +     0.04463189601793 * S_NumWebPurchases
895662    +          +     0.17598396305598 * S_RFMstat  +    -0.26428585222285 *
895663    +        S_RMntFrq  +    -0.35066600356743 * S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.01011198652387 * S_AcceptedCmpTotal + 0.50914419302954 * S_Frq + 
0.36935051571942 * S_Income + -0.14541266632981 * S_Mnt + 0.70809835135242 * S_MntFruits + 
0.17636828127553 * S_MntGoldProds + -0.39065133922684 * S_MntMeatProducts + 0.2693109494597 * 
S_MntSweetProducts + 0.1081864929712 * S_NumCatalogPurchases + 0.04463189601793 * 
S_NumWebPurchases + 0.17598396305598 * S_RFMstat + -0.26428585222285 * S_RMntFrq + 
-0.35066600356743 * S_Recency ;
895664    +   H15  =     0.25974646459449 * S_AcceptedCmpTotal  +    -0.01084764302849 *
895665    +        S_Frq  +    -0.25453296848623 * S_Income  +    -0.24485320547361 *
895666    +        S_Mnt  +      0.3523119885561 * S_MntFruits  +    -0.23948230282173 *
895667    +        S_MntGoldProds  +    -0.61077291955379 * S_MntMeatProducts
895668    +          +     0.69250340520766 * S_MntSweetProducts
895669    +          +    -0.92476508978686 * S_NumCatalogPurchases
895670    +          +    -0.85062812213631 * S_NumWebPurchases
895671    +          +    -0.13668170504261 * S_RFMstat  +    -0.39159958659757 *
895672    +        S_RMntFrq  +     0.31541831647045 * S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.25974646459449 * S_AcceptedCmpTotal + -0.01084764302849 * S_Frq 
+ -0.25453296848623 * S_Income + -0.24485320547361 * S_Mnt + 0.3523119885561 * S_MntFruits + 
-0.23948230282173 * S_MntGoldProds + -0.61077291955379 * S_MntMeatProducts + 0.69250340520766 
* S_MntSweetProducts + -0.92476508978686 * S_NumCatalogPurchases + -0.85062812213631 * 
S_NumWebPurchases + -0.13668170504261 * S_RFMstat + -0.39159958659757 * S_RMntFrq + 
0.31541831647045 * S_Recency ;
895673    +   H16  =     0.30881424897223 * S_AcceptedCmpTotal  +      0.2794364053658 *
895674    +        S_Frq  +    -0.13255692208785 * S_Income  +      0.1084623497397 *
895675    +        S_Mnt  +    -0.21377822064675 * S_MntFruits  +     0.66167304100171 *
895676    +        S_MntGoldProds  +    -0.18059030828344 * S_MntMeatProducts
895677    +          +      0.1342841887454 * S_MntSweetProducts
895678    +          +    -0.35353451726224 * S_NumCatalogPurchases
895679    +          +     0.19726071632213 * S_NumWebPurchases
895680    +          +    -0.67773182477521 * S_RFMstat  +    -0.05559124023026 *
895681    +        S_RMntFrq  +     0.29135046009186 * S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = 0.30881424897223 * S_AcceptedCmpTotal + 0.2794364053658 * S_Frq + 
-0.13255692208785 * S_Income + 0.1084623497397 * S_Mnt + -0.21377822064675 * S_MntFruits + 
0.66167304100171 * S_MntGoldProds + -0.18059030828344 * S_MntMeatProducts + 0.1342841887454 * 
S_MntSweetProducts + -0.35353451726224 * S_NumCatalogPurchases + 0.19726071632213 * 
S_NumWebPurchases + -0.67773182477521 * S_RFMstat + -0.05559124023026 * S_RMntFrq + 
0.29135046009186 * S_Recency ;
895682    +   H17  =    -0.56474657283939 * S_AcceptedCmpTotal  +     0.49714469636668 *
895683    +        S_Frq  +     0.38873911121939 * S_Income  +     0.18672296356038 *
895684    +        S_Mnt  +    -0.12290033905766 * S_MntFruits  +    -0.55117454621073 *
895685    +        S_MntGoldProds  +    -0.34157249684624 * S_MntMeatProducts
895686    +          +    -0.03878223698579 * S_MntSweetProducts
895687    +          +    -0.44318159654535 * S_NumCatalogPurchases
895688    +          +     0.28629379958053 * S_NumWebPurchases
895689    +          +    -0.33628587814816 * S_RFMstat  +     0.01539005969109 *
895690    +        S_RMntFrq  +      0.4669281349511 * S_Recency ;
MPRINT(EM_DIAGRAM):   H17 = -0.56474657283939 * S_AcceptedCmpTotal + 0.49714469636668 * S_Frq 
+ 0.38873911121939 * S_Income + 0.18672296356038 * S_Mnt + -0.12290033905766 * S_MntFruits + 
-0.55117454621073 * S_MntGoldProds + -0.34157249684624 * S_MntMeatProducts + -0.03878223698579 
* S_MntSweetProducts + -0.44318159654535 * S_NumCatalogPurchases + 0.28629379958053 * 
S_NumWebPurchases + -0.33628587814816 * S_RFMstat + 0.01539005969109 * S_RMntFrq + 
0.4669281349511 * S_Recency ;
895691    +   H11  = H11  +     0.54366812821853 * G_Marital_Status0
895692    +          +    -0.24270884269566 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.54366812821853 * G_Marital_Status0 + -0.24270884269566 * 
G_Marital_Status1 ;
895693    +   H12  = H12  +     0.12201873252315 * G_Marital_Status0
895694    +          +      0.2708540168877 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.12201873252315 * G_Marital_Status0 + 0.2708540168877 * 
G_Marital_Status1 ;
895695    +   H13  = H13  +     0.21773390953206 * G_Marital_Status0
895696    +          +      0.1849184915243 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.21773390953206 * G_Marital_Status0 + 0.1849184915243 * 
G_Marital_Status1 ;
895697    +   H14  = H14  +     0.42359989920789 * G_Marital_Status0
895698    +          +     -0.0427682060318 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.42359989920789 * G_Marital_Status0 + -0.0427682060318 * 
G_Marital_Status1 ;
895699    +   H15  = H15  +     0.39852794737212 * G_Marital_Status0
895700    +          +      0.4834959104522 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.39852794737212 * G_Marital_Status0 + 0.4834959104522 * 
G_Marital_Status1 ;
895701    +   H16  = H16  +     0.34117172602716 * G_Marital_Status0
895702    +          +     0.01719507366738 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.34117172602716 * G_Marital_Status0 + 0.01719507366738 * 
G_Marital_Status1 ;
895703    +   H17  = H17  +    -0.48271020073977 * G_Marital_Status0
895704    +          +    -0.38643265086902 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H17 = H17 + -0.48271020073977 * G_Marital_Status0 + -0.38643265086902 * 
G_Marital_Status1 ;
895705    +   H11  =    -1.92887755316705 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.92887755316705 + H11 ;
895706    +   H12  =     1.10580453552439 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.10580453552439 + H12 ;
895707    +   H13  =     -0.0396459221076 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.0396459221076 + H13 ;
895708    +   H14  =    -0.24030684440152 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.24030684440152 + H14 ;
895709    +   H15  =    -1.57024900687106 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.57024900687106 + H15 ;
895710    +   H16  =    -0.33224481657704 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -0.33224481657704 + H16 ;
895711    +   H17  =     1.22710614099789 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 1.22710614099789 + H17 ;
895712    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
895713    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
895714    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
895715    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
895716    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
895717    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
895718    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
895719    +END;
MPRINT(EM_DIAGRAM):   END;
895720    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
895721    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
895722    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
895723    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
895724    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
895725    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
895726    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
895727    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
895728    +END;
MPRINT(EM_DIAGRAM):   END;
895729    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895730    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
895731    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895732    +
895733    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
895734    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
895735    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
895736    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
895737    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
895738    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
895739    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
895740    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
895741    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
895742    +end;
MPRINT(EM_DIAGRAM):   end;
895743    +else do;
MPRINT(EM_DIAGRAM):   else do;
895744    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
895745    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
895746    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
895747    +   end;
MPRINT(EM_DIAGRAM):   end;
895748    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
895749    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
895750    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
895751    +   end;
MPRINT(EM_DIAGRAM):   end;
895752    +   else do;
MPRINT(EM_DIAGRAM):   else do;
895753    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
895754    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
895755    +   end;
MPRINT(EM_DIAGRAM):   end;
895756    +end;
MPRINT(EM_DIAGRAM):   end;
895757    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
895758    +   P_DepVar1  =     1.21462455419854 * H11  +    -0.32480789724651 * H12
895759    +          +     2.96475008226038 * H13  +     -0.7919726093423 * H14
895760    +          +    -2.29353966226595 * H15  +     -0.7223088500433 * H16
895761    +          +    -2.44182031584859 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.21462455419854 * H11 + -0.32480789724651 * H12 + 
2.96475008226038 * H13 + -0.7919726093423 * H14 + -2.29353966226595 * H15 + -0.7223088500433 * 
H16 + -2.44182031584859 * H17 ;
895762    +   P_DepVar1  =    -1.63832895249218 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.63832895249218 + P_DepVar1 ;
895763    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
895764    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
895765    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
895766    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
895767    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
895768    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
895769    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
895770    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
895771    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
895772    +END;
MPRINT(EM_DIAGRAM):   END;
895773    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
895774    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
895775    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
895776    +END;
MPRINT(EM_DIAGRAM):   END;
895777    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
895778    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
895779    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
895780    +END;
MPRINT(EM_DIAGRAM):   END;
895781    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
895782    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
895783    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
895784    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
895785    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
895786    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
895787    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
895788    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895789    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
895790    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895791    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
895792    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
895793    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
895794    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
895795    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
895796    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
895797    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
895798    +END;
MPRINT(EM_DIAGRAM):   END;
895799    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
895800    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
895801    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
895802    +drop
895803    +H11
895804    +H12
895805    +H13
895806    +H14
895807    +H15
895808    +H16
895809    +H17
895810    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
895811    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
895812     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL8_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
895813     quit;
895814     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
895815     filename emflow
895815   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
895816     *------------------------------------------------------------*;
895817     * Neural8: Scoring VALIDATE data;
895818     *------------------------------------------------------------*;
895819     data EMWS8.Neural8_VALIDATE
895820     / view=EMWS8.Neural8_VALIDATE
895821     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_VALIDATE / view=EMWS8.Neural8_VALIDATE ;
895822     set EMWS8.Varsel_VALIDATE
895823     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
895824     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural8\EMFLOWSCORE.sas.
895825    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
895826    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
895827    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
895828    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
895829    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
895830    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
895831    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
895832    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
895833    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
895834    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
895835    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
895836    +LENGTH _WARN_ $4
895837    +      F_DepVar  $ 12
895838    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
895839    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
895840    +
895841    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
895842    +
895843    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
895844    +
895845    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
895846    +
895847    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
895848    +
895849    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
895850    +
895851    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
895852    +
895853    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
895854    +
895855    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
895856    +
895857    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
895858    +
895859    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
895860    +
895861    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
895862    +
895863    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
895864    +
895865    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
895866    +
895867    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
895868    +
895869    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
895870    +
895871    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
895872    +
895873    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
895874    +
895875    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
895876    +
895877    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
895878    +
895879    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
895880    +
895881    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
895882    +
895883    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
895884    +
895885    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
895886    +
895887    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
895888    +
895889    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
895890    +
895891    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
895892    +
895893    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
895894    +
895895    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
895896    +
895897    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
895898    +
895899    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
895900    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
895901    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
895902    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
895903    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
895904    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
895905    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
895906    +end;
MPRINT(EM_DIAGRAM):   end;
895907    +else do;
MPRINT(EM_DIAGRAM):   else do;
895908    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
895909    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
895910    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
895911    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
895912    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
895913    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
895914    +   end;
MPRINT(EM_DIAGRAM):   end;
895915    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
895916    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
895917    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
895918    +   end;
MPRINT(EM_DIAGRAM):   end;
895919    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
895920    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
895921    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
895922    +   end;
MPRINT(EM_DIAGRAM):   end;
895923    +   else do;
MPRINT(EM_DIAGRAM):   else do;
895924    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
895925    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
895926    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
895927    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
895928    +   end;
MPRINT(EM_DIAGRAM):   end;
895929    +end;
MPRINT(EM_DIAGRAM):   end;
895930    +
895931    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895932    +*** Checking missing input Interval
895933    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
895934    +
895935    +IF NMISS(
895936    +   AcceptedCmpTotal ,
895937    +   Frq ,
895938    +   Income ,
895939    +   Mnt ,
895940    +   MntFruits ,
895941    +   MntGoldProds ,
895942    +   MntMeatProducts ,
895943    +   MntSweetProducts ,
895944    +   NumCatalogPurchases ,
895945    +   NumWebPurchases ,
895946    +   RFMstat ,
895947    +   RMntFrq ,
895948    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
895949    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
895950    +
895951    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
895952    +END;
MPRINT(EM_DIAGRAM):   END;
895953    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895954    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
895955    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
895956    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
895957    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
895958    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
895959    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
895960    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
895961    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
895962    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
895963    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
895964    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
895965    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
895966    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
895967    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
895968    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
895969    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
895970    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
895971    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
895972    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
895973    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
895974    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
895975    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
895976    +END;
MPRINT(EM_DIAGRAM):   END;
895977    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
895978    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
895979    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
895980    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
895981    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
895982    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
895983    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
895984    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
895985    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
895986    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
895987    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
895988    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
895989    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
895990    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
895991    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
895992    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
895993    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
895994    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
895995    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
895996    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
895997    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
895998    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
895999    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
896000    +   ELSE S_NumCatalogPurchases
896001    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
896002    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
896003    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
896004    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
896005    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
896006    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
896007    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
896008    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
896009    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
896010    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
896011    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
896012    +END;
MPRINT(EM_DIAGRAM):   END;
896013    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896014    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
896015    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896016    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896017    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
896018    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896019    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
896020    +   H11  =     0.00179298802892 * S_AcceptedCmpTotal  +     0.01784009275608 *
896021    +        S_Frq  +     0.69409617936033 * S_Income  +    -0.28641816886809 *
896022    +        S_Mnt  +     0.21745721720131 * S_MntFruits  +    -0.38924339437831 *
896023    +        S_MntGoldProds  +     0.48302006424722 * S_MntMeatProducts
896024    +          +     0.32217287817742 * S_MntSweetProducts
896025    +          +     0.37317765763795 * S_NumCatalogPurchases
896026    +          +     0.31712152035565 * S_NumWebPurchases
896027    +          +    -0.00101711956377 * S_RFMstat  +    -0.50814709993968 *
896028    +        S_RMntFrq  +     -0.2674878177058 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = 0.00179298802892 * S_AcceptedCmpTotal + 0.01784009275608 * S_Frq + 
0.69409617936033 * S_Income + -0.28641816886809 * S_Mnt + 0.21745721720131 * S_MntFruits + 
-0.38924339437831 * S_MntGoldProds + 0.48302006424722 * S_MntMeatProducts + 0.32217287817742 * 
S_MntSweetProducts + 0.37317765763795 * S_NumCatalogPurchases + 0.31712152035565 * 
S_NumWebPurchases + -0.00101711956377 * S_RFMstat + -0.50814709993968 * S_RMntFrq + 
-0.2674878177058 * S_Recency ;
896029    +   H12  =    -0.13522102699695 * S_AcceptedCmpTotal  +     0.62468738576113 *
896030    +        S_Frq  +     0.33525631913577 * S_Income  +     0.49596519260867 *
896031    +        S_Mnt  +    -0.07840703709606 * S_MntFruits  +    -0.13407863606593 *
896032    +        S_MntGoldProds  +     0.07892036440987 * S_MntMeatProducts
896033    +          +    -0.19345300638771 * S_MntSweetProducts
896034    +          +     0.37926806634405 * S_NumCatalogPurchases
896035    +          +     0.17926711405358 * S_NumWebPurchases
896036    +          +    -0.56247478537915 * S_RFMstat  +    -0.83222377723575 *
896037    +        S_RMntFrq  +     0.06152905340066 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = -0.13522102699695 * S_AcceptedCmpTotal + 0.62468738576113 * S_Frq 
+ 0.33525631913577 * S_Income + 0.49596519260867 * S_Mnt + -0.07840703709606 * S_MntFruits + 
-0.13407863606593 * S_MntGoldProds + 0.07892036440987 * S_MntMeatProducts + -0.19345300638771 
* S_MntSweetProducts + 0.37926806634405 * S_NumCatalogPurchases + 0.17926711405358 * 
S_NumWebPurchases + -0.56247478537915 * S_RFMstat + -0.83222377723575 * S_RMntFrq + 
0.06152905340066 * S_Recency ;
896038    +   H13  =     0.52085707566671 * S_AcceptedCmpTotal  +    -0.43119445779869 *
896039    +        S_Frq  +    -0.38451776725994 * S_Income  +    -0.43893571865073 *
896040    +        S_Mnt  +    -0.18147736658896 * S_MntFruits  +    -0.02759924916073 *
896041    +        S_MntGoldProds  +     0.41710329802839 * S_MntMeatProducts
896042    +          +    -0.11238728777733 * S_MntSweetProducts
896043    +          +     0.39955878063516 * S_NumCatalogPurchases
896044    +          +     0.37701883017309 * S_NumWebPurchases
896045    +          +    -0.03011513977353 * S_RFMstat  +     0.05558894855861 *
896046    +        S_RMntFrq  +    -0.53097904952065 * S_Recency ;
MPRINT(EM_DIAGRAM):   H13 = 0.52085707566671 * S_AcceptedCmpTotal + -0.43119445779869 * S_Frq 
+ -0.38451776725994 * S_Income + -0.43893571865073 * S_Mnt + -0.18147736658896 * S_MntFruits + 
-0.02759924916073 * S_MntGoldProds + 0.41710329802839 * S_MntMeatProducts + -0.11238728777733 
* S_MntSweetProducts + 0.39955878063516 * S_NumCatalogPurchases + 0.37701883017309 * 
S_NumWebPurchases + -0.03011513977353 * S_RFMstat + 0.05558894855861 * S_RMntFrq + 
-0.53097904952065 * S_Recency ;
896047    +   H14  =     0.01011198652387 * S_AcceptedCmpTotal  +     0.50914419302954 *
896048    +        S_Frq  +     0.36935051571942 * S_Income  +    -0.14541266632981 *
896049    +        S_Mnt  +     0.70809835135242 * S_MntFruits  +     0.17636828127553 *
896050    +        S_MntGoldProds  +    -0.39065133922684 * S_MntMeatProducts
896051    +          +      0.2693109494597 * S_MntSweetProducts
896052    +          +      0.1081864929712 * S_NumCatalogPurchases
896053    +          +     0.04463189601793 * S_NumWebPurchases
896054    +          +     0.17598396305598 * S_RFMstat  +    -0.26428585222285 *
896055    +        S_RMntFrq  +    -0.35066600356743 * S_Recency ;
MPRINT(EM_DIAGRAM):   H14 = 0.01011198652387 * S_AcceptedCmpTotal + 0.50914419302954 * S_Frq + 
0.36935051571942 * S_Income + -0.14541266632981 * S_Mnt + 0.70809835135242 * S_MntFruits + 
0.17636828127553 * S_MntGoldProds + -0.39065133922684 * S_MntMeatProducts + 0.2693109494597 * 
S_MntSweetProducts + 0.1081864929712 * S_NumCatalogPurchases + 0.04463189601793 * 
S_NumWebPurchases + 0.17598396305598 * S_RFMstat + -0.26428585222285 * S_RMntFrq + 
-0.35066600356743 * S_Recency ;
896056    +   H15  =     0.25974646459449 * S_AcceptedCmpTotal  +    -0.01084764302849 *
896057    +        S_Frq  +    -0.25453296848623 * S_Income  +    -0.24485320547361 *
896058    +        S_Mnt  +      0.3523119885561 * S_MntFruits  +    -0.23948230282173 *
896059    +        S_MntGoldProds  +    -0.61077291955379 * S_MntMeatProducts
896060    +          +     0.69250340520766 * S_MntSweetProducts
896061    +          +    -0.92476508978686 * S_NumCatalogPurchases
896062    +          +    -0.85062812213631 * S_NumWebPurchases
896063    +          +    -0.13668170504261 * S_RFMstat  +    -0.39159958659757 *
896064    +        S_RMntFrq  +     0.31541831647045 * S_Recency ;
MPRINT(EM_DIAGRAM):   H15 = 0.25974646459449 * S_AcceptedCmpTotal + -0.01084764302849 * S_Frq 
+ -0.25453296848623 * S_Income + -0.24485320547361 * S_Mnt + 0.3523119885561 * S_MntFruits + 
-0.23948230282173 * S_MntGoldProds + -0.61077291955379 * S_MntMeatProducts + 0.69250340520766 
* S_MntSweetProducts + -0.92476508978686 * S_NumCatalogPurchases + -0.85062812213631 * 
S_NumWebPurchases + -0.13668170504261 * S_RFMstat + -0.39159958659757 * S_RMntFrq + 
0.31541831647045 * S_Recency ;
896065    +   H16  =     0.30881424897223 * S_AcceptedCmpTotal  +      0.2794364053658 *
896066    +        S_Frq  +    -0.13255692208785 * S_Income  +      0.1084623497397 *
896067    +        S_Mnt  +    -0.21377822064675 * S_MntFruits  +     0.66167304100171 *
896068    +        S_MntGoldProds  +    -0.18059030828344 * S_MntMeatProducts
896069    +          +      0.1342841887454 * S_MntSweetProducts
896070    +          +    -0.35353451726224 * S_NumCatalogPurchases
896071    +          +     0.19726071632213 * S_NumWebPurchases
896072    +          +    -0.67773182477521 * S_RFMstat  +    -0.05559124023026 *
896073    +        S_RMntFrq  +     0.29135046009186 * S_Recency ;
MPRINT(EM_DIAGRAM):   H16 = 0.30881424897223 * S_AcceptedCmpTotal + 0.2794364053658 * S_Frq + 
-0.13255692208785 * S_Income + 0.1084623497397 * S_Mnt + -0.21377822064675 * S_MntFruits + 
0.66167304100171 * S_MntGoldProds + -0.18059030828344 * S_MntMeatProducts + 0.1342841887454 * 
S_MntSweetProducts + -0.35353451726224 * S_NumCatalogPurchases + 0.19726071632213 * 
S_NumWebPurchases + -0.67773182477521 * S_RFMstat + -0.05559124023026 * S_RMntFrq + 
0.29135046009186 * S_Recency ;
896074    +   H17  =    -0.56474657283939 * S_AcceptedCmpTotal  +     0.49714469636668 *
896075    +        S_Frq  +     0.38873911121939 * S_Income  +     0.18672296356038 *
896076    +        S_Mnt  +    -0.12290033905766 * S_MntFruits  +    -0.55117454621073 *
896077    +        S_MntGoldProds  +    -0.34157249684624 * S_MntMeatProducts
896078    +          +    -0.03878223698579 * S_MntSweetProducts
896079    +          +    -0.44318159654535 * S_NumCatalogPurchases
896080    +          +     0.28629379958053 * S_NumWebPurchases
896081    +          +    -0.33628587814816 * S_RFMstat  +     0.01539005969109 *
896082    +        S_RMntFrq  +      0.4669281349511 * S_Recency ;
MPRINT(EM_DIAGRAM):   H17 = -0.56474657283939 * S_AcceptedCmpTotal + 0.49714469636668 * S_Frq 
+ 0.38873911121939 * S_Income + 0.18672296356038 * S_Mnt + -0.12290033905766 * S_MntFruits + 
-0.55117454621073 * S_MntGoldProds + -0.34157249684624 * S_MntMeatProducts + -0.03878223698579 
* S_MntSweetProducts + -0.44318159654535 * S_NumCatalogPurchases + 0.28629379958053 * 
S_NumWebPurchases + -0.33628587814816 * S_RFMstat + 0.01539005969109 * S_RMntFrq + 
0.4669281349511 * S_Recency ;
896083    +   H11  = H11  +     0.54366812821853 * G_Marital_Status0
896084    +          +    -0.24270884269566 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.54366812821853 * G_Marital_Status0 + -0.24270884269566 * 
G_Marital_Status1 ;
896085    +   H12  = H12  +     0.12201873252315 * G_Marital_Status0
896086    +          +      0.2708540168877 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.12201873252315 * G_Marital_Status0 + 0.2708540168877 * 
G_Marital_Status1 ;
896087    +   H13  = H13  +     0.21773390953206 * G_Marital_Status0
896088    +          +      0.1849184915243 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.21773390953206 * G_Marital_Status0 + 0.1849184915243 * 
G_Marital_Status1 ;
896089    +   H14  = H14  +     0.42359989920789 * G_Marital_Status0
896090    +          +     -0.0427682060318 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.42359989920789 * G_Marital_Status0 + -0.0427682060318 * 
G_Marital_Status1 ;
896091    +   H15  = H15  +     0.39852794737212 * G_Marital_Status0
896092    +          +      0.4834959104522 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.39852794737212 * G_Marital_Status0 + 0.4834959104522 * 
G_Marital_Status1 ;
896093    +   H16  = H16  +     0.34117172602716 * G_Marital_Status0
896094    +          +     0.01719507366738 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.34117172602716 * G_Marital_Status0 + 0.01719507366738 * 
G_Marital_Status1 ;
896095    +   H17  = H17  +    -0.48271020073977 * G_Marital_Status0
896096    +          +    -0.38643265086902 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H17 = H17 + -0.48271020073977 * G_Marital_Status0 + -0.38643265086902 * 
G_Marital_Status1 ;
896097    +   H11  =    -1.92887755316705 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.92887755316705 + H11 ;
896098    +   H12  =     1.10580453552439 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.10580453552439 + H12 ;
896099    +   H13  =     -0.0396459221076 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -0.0396459221076 + H13 ;
896100    +   H14  =    -0.24030684440152 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.24030684440152 + H14 ;
896101    +   H15  =    -1.57024900687106 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.57024900687106 + H15 ;
896102    +   H16  =    -0.33224481657704 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -0.33224481657704 + H16 ;
896103    +   H17  =     1.22710614099789 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = 1.22710614099789 + H17 ;
896104    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
896105    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
896106    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
896107    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
896108    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
896109    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
896110    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
896111    +END;
MPRINT(EM_DIAGRAM):   END;
896112    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
896113    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
896114    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
896115    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
896116    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
896117    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
896118    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
896119    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
896120    +END;
MPRINT(EM_DIAGRAM):   END;
896121    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896122    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
896123    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896124    +
896125    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
896126    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
896127    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
896128    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
896129    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
896130    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
896131    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
896132    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
896133    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
896134    +end;
MPRINT(EM_DIAGRAM):   end;
896135    +else do;
MPRINT(EM_DIAGRAM):   else do;
896136    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
896137    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
896138    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
896139    +   end;
MPRINT(EM_DIAGRAM):   end;
896140    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
896141    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
896142    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
896143    +   end;
MPRINT(EM_DIAGRAM):   end;
896144    +   else do;
MPRINT(EM_DIAGRAM):   else do;
896145    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
896146    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
896147    +   end;
MPRINT(EM_DIAGRAM):   end;
896148    +end;
MPRINT(EM_DIAGRAM):   end;
896149    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
896150    +   P_DepVar1  =     1.21462455419854 * H11  +    -0.32480789724651 * H12
896151    +          +     2.96475008226038 * H13  +     -0.7919726093423 * H14
896152    +          +    -2.29353966226595 * H15  +     -0.7223088500433 * H16
896153    +          +    -2.44182031584859 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1.21462455419854 * H11 + -0.32480789724651 * H12 + 
2.96475008226038 * H13 + -0.7919726093423 * H14 + -2.29353966226595 * H15 + -0.7223088500433 * 
H16 + -2.44182031584859 * H17 ;
896154    +   P_DepVar1  =    -1.63832895249218 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.63832895249218 + P_DepVar1 ;
896155    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
896156    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
896157    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
896158    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
896159    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
896160    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
896161    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
896162    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
896163    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
896164    +END;
MPRINT(EM_DIAGRAM):   END;
896165    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
896166    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
896167    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
896168    +END;
MPRINT(EM_DIAGRAM):   END;
896169    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
896170    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
896171    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
896172    +END;
MPRINT(EM_DIAGRAM):   END;
896173    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
896174    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
896175    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
896176    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
896177    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
896178    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
896179    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
896180    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896181    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
896182    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
896183    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
896184    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
896185    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
896186    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
896187    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
896188    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
896189    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
896190    +END;
MPRINT(EM_DIAGRAM):   END;
896191    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
896192    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
896193    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
896194    +drop
896195    +H11
896196    +H12
896197    +H13
896198    +H14
896199    +H15
896200    +H16
896201    +H17
896202    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
896203    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
896204     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL8_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
896205     quit;
896206     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
896207     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
896208     * Neural8: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural8: Computing metadata for TRAIN data;
896209     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL8_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural8\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural8_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural8_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural8_TRAIN out=WORK.M0O50CX9 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0O50CX9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0O50CX9(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0O50CX9;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0O50CX9;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0G3X59X NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0G3X59X;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0G3X59X;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M14IIYCW(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0G3X59X;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0G3X59X;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0G3X59X;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0G3X59X;
MPRINT(EMADVISECOLUMNS):   set WORK.M0G3X59X;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural8";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural8";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural8";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural8: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
896521     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
896522     set EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_EMINFO;
896523     where DATA='Neural8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural8' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
896524     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL8_EMINFO.
      WHERE (DATA='Neural8') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

896525     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural8_EMINFO;
896526     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
896527     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
896528     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
896532     run;
896533     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_EMINFO;
896534     set EMWS8.Neural8_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural8_EMINFO WORK.MODELTEMP_INFO;
896535     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

896536     proc sort data = EMWS8.Neural8_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural8_EMINFO NOTHREADS;
896537     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
896538     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

896539     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
896540     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
896541     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

896542     proc sort data = EMWS8.Neural8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural8_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
896543     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
896544     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL8_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

896545     data EMWS8.Neural8_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural8_EMINFO;
896546     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
896547     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
896548     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL8_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

896549     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
896550     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
896551     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
896552     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL8_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL8_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
