MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.42 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                11. April 2016
Time:                16.42 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_XO6UK "C:\\predictive-models-project\Workspaces\EMWS8\Filter2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_XO6UK new;
MPRINT(EM_DIAGRAM):   run;
21989      proc sort data=EMWS8.Filter2_INTERVAL;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Filter2_INTERVAL;
21990      by name;
MPRINT(EM_DIAGRAM):   by name;
21991      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21992      proc print data=EMWS8.Filter2_INTERVAL(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Filter2_INTERVAL(obs=500) noobs label;
21993      where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N');
MPRINT(EM_DIAGRAM):   where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N');
21994      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_filterintervallimits_title,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Filter Limits for Interval Variables";
21995      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   run;
21996      run;

NOTE: There were 10 observations read from the data set EMWS8.FILTER2_INTERVAL.
      WHERE (INTERVALMIN not = .) or (INTERVALMAX not = .) or (KEEPMISSING='N');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21997      title9;
MPRINT(EM_DIAGRAM):   title9;
21998      title10;
MPRINT(EM_DIAGRAM):   title10;
21999      data WORK.DATA_FILTERED / view=WORK.DATA_FILTERED;
MPRINT(EM_DIAGRAM):    data WORK.DATA_FILTERED / view=WORK.DATA_FILTERED;
22000      set EMWS8.FIMPORT_train;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_train;
22001      if
22002      ( Income eq . or (Income<=107000))
22003      and ( MntFishProducts eq . or (MntFishProducts<=200))
22004      and ( MntFruits eq . or (MntFruits<=157))
22005      and ( MntGoldProds eq . or (MntGoldProds<=196))
22006      and ( MntMeatProducts eq . or (MntMeatProducts<=964))
22007      and ( MntSweetProducts eq . or (MntSweetProducts<=143.2))
22008      and ( MntWines eq . or (MntWines<=1325))
22009      and ( NumCatalogPurchases eq . or (NumCatalogPurchases<=14))
22010      and ( NumDealsPurchases eq . or (NumDealsPurchases<=10.5))
22011      and ( NumWebVisitsMonth eq . or (NumWebVisitsMonth<=13.42))
22012      then do;
MPRINT(EM_DIAGRAM):   if ( Income eq . or (Income<=107000)) and ( MntFishProducts eq . or (MntFishProducts<=200)) and ( MntFruits eq . or (MntFruits<=157)) and ( MntGoldProds eq . or (MntGoldProds<=196)) and ( MntMeatProducts eq . or 
(MntMeatProducts<=964)) and ( MntSweetProducts eq . or (MntSweetProducts<=143.2)) and ( MntWines eq . or (MntWines<=1325)) and ( NumCatalogPurchases eq . or (NumCatalogPurchases<=14)) and ( NumDealsPurchases eq . or (NumDealsPurchases<=10.5)) and ( 
NumWebVisitsMonth eq . or (NumWebVisitsMonth<=13.42)) then do;
22013      if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
22014      else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
22015      end;
MPRINT(EM_DIAGRAM):   end;
22016      else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
22017      label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
22018      if M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER = 0;
22019      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file WORK.DATA_FILTERED.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

22020      data WORK.DATA_EXCLUDED / view=WORK.DATA_EXCLUDED;
MPRINT(EM_DIAGRAM):   data WORK.DATA_EXCLUDED / view=WORK.DATA_EXCLUDED;
22021      set EMWS8.FIMPORT_train;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_train;
22022      if
22023      ( Income eq . or (Income<=107000))
22024      and ( MntFishProducts eq . or (MntFishProducts<=200))
22025      and ( MntFruits eq . or (MntFruits<=157))
22026      and ( MntGoldProds eq . or (MntGoldProds<=196))
22027      and ( MntMeatProducts eq . or (MntMeatProducts<=964))
22028      and ( MntSweetProducts eq . or (MntSweetProducts<=143.2))
22029      and ( MntWines eq . or (MntWines<=1325))
22030      and ( NumCatalogPurchases eq . or (NumCatalogPurchases<=14))
22031      and ( NumDealsPurchases eq . or (NumDealsPurchases<=10.5))
22032      and ( NumWebVisitsMonth eq . or (NumWebVisitsMonth<=13.42))
22033      then do;
MPRINT(EM_DIAGRAM):   if ( Income eq . or (Income<=107000)) and ( MntFishProducts eq . or (MntFishProducts<=200)) and ( MntFruits eq . or (MntFruits<=157)) and ( MntGoldProds eq . or (MntGoldProds<=196)) and ( MntMeatProducts eq . or 
(MntMeatProducts<=964)) and ( MntSweetProducts eq . or (MntSweetProducts<=143.2)) and ( MntWines eq . or (MntWines<=1325)) and ( NumCatalogPurchases eq . or (NumCatalogPurchases<=14)) and ( NumDealsPurchases eq . or (NumDealsPurchases<=10.5)) and ( 
NumWebVisitsMonth eq . or (NumWebVisitsMonth<=13.42)) then do;
22034      if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
22035      else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
22036      end;
MPRINT(EM_DIAGRAM):   end;
22037      else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
22038      label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
22039      if M_FILTER = 1;
MPRINT(EM_DIAGRAM):   if M_FILTER = 1;
22040      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file WORK.DATA_EXCLUDED.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * createcountreport;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS8.FIMPORT_train;
NOTE: View EMWS8.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from WORK.DATA_FILTERED;
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: View WORK.DATA_FILTERED.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
22041      data WORK.Filter2COUNT;
MPRINT(EM_DIAGRAM):    data WORK.Filter2COUNT;
22042      length DATAROLE $16;
MPRINT(EM_DIAGRAM):   length DATAROLE $16;
22043      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, NOQUOTE))" FILTERED = "%sysfunc(sasmsg(sashelp.dmine, rpt_filtered_vlabel, NOQUOTE))" EXCLUDED = "%sysfunc(sasmsg(sashelp.dmine, rpt_excluded_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" FILTERED = "Filtered" EXCLUDED = "Excluded";
22044      DATAROLE = 'TRAIN';
MPRINT(EM_DIAGRAM):   DATAROLE = 'TRAIN';
22045      DATA = 3500;
MPRINT(EM_DIAGRAM):   DATA = 3500;
22046      FILTERED = 3105;
MPRINT(EM_DIAGRAM):   FILTERED = 3105;
22047      EXCLUDED = 395;
MPRINT(EM_DIAGRAM):   EXCLUDED = 395;
22048      output;
MPRINT(EM_DIAGRAM):   output;
22049      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.FILTER2COUNT has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22050      proc print data=WORK.Filter2COUNT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Filter2COUNT noobs label;
22051      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22052      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_numberobs_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Number Of Observations";
MPRINT(EM_DIAGRAM):   run;
22053      run;

NOTE: There were 1 observations read from the data set WORK.FILTER2COUNT.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

22054      title9;
MPRINT(EM_DIAGRAM):   title9;
22055      title10;
MPRINT(EM_DIAGRAM):   title10;
22056      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22057      * createstattable;
MPRINT(EM_DIAGRAM):   * createstattable;
22058      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22059      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22060      * Filter2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Filter2: DMDBClass Macro ;
22061      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22062      %macro DMDBClass;
22063          DepVar(DESC)
22064      %mend DMDBClass;
22065      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22066      * Filter2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Filter2: DMDBVar Macro ;
22067      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22068      %macro DMDBVar;
22069          Income MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
22070         MntWines NumCatalogPurchases NumDealsPurchases NumWebVisitsMonth
22071      %mend DMDBVar;
22072      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22073      * Filter2: Create DMDB;
MPRINT(EM_DIAGRAM):   * Filter2: Create DMDB;
22074      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22075      proc dmdb batch data=WORK.DATA_EXCLUDED
22076      dmdbcat=WORK.Filter2_DMDB
22077      varout=WORK.FILTER_VARSTATS
22078      maxlevel = 513
22079      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.DATA_EXCLUDED dmdbcat=WORK.Filter2_DMDB varout=WORK.FILTER_VARSTATS maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
22080      class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
22081      var %DMDBVar;
MPRINT(DMDBVAR):   Income MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts MntWines NumCatalogPurchases NumDealsPurchases NumWebVisitsMonth
MPRINT(EM_DIAGRAM):  ;
22082      target
22083      DepVar
22084      ;
MPRINT(EM_DIAGRAM):   target DepVar ;
22085      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Records processed = 395   Memory used = 511K.
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_DATA.
NOTE: View WORK.DATA_EXCLUDED.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 3500 observations read from the data set EMWS8.FIMPORT_TRAIN.
NOTE: There were 395 observations read from the data set WORK.DATA_EXCLUDED.
NOTE: The data set WORK.FILTER_VARSTATS has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
22086      quit;
22087      *--- end code ---*;

22088      data WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):    data WORK.FILTER_VARSTATS;
22089      length DATAROLE $10 TYPE $8 NAME $32;
MPRINT(EM_DIAGRAM):   length DATAROLE $10 TYPE $8 NAME $32;
22090      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
22091      label N = "%sysfunc(sasmsg(sashelp.dmine, rpt_nonMiss_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label N = "Non Missing";
22092      label NMISS = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NMISS = "Missing";
22093      label MIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MIN = "Minimum";
22094      label MAX = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MAX = "Maximum";
22095      label MEAN = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MEAN = "Mean";
22096      label STD = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label STD = "Standard Deviation";
22097      label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SKEWNESS = "Skewness";
22098      label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label KURTOSIS = "Kurtosis";
22099      label NUMCAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NUMCAT = "Number of Levels";
22100      retain DATAROLE "TRAIN" type "EXCLUDED";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN" type "EXCLUDED";
22101      set WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   set WORK.FILTER_VARSTATS;
22102      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable NUMCAT is uninitialized.
NOTE: There were 10 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: The data set WORK.FILTER_VARSTATS has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22103      proc append base=EMWS8.Filter2_STATS data=WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   proc append base=EMWS8.Filter2_STATS data=WORK.FILTER_VARSTATS;
22104      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK.FILTER_VARSTATS to EMWS8.FILTER2_STATS.
NOTE: There were 10 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: 10 observations added.
NOTE: The data set EMWS8.FILTER2_STATS has 20 observations and 11 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22105      proc sort data=EMWS8.Filter2_STATS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Filter2_STATS;
22106      by DATAROLE NAME;
MPRINT(EM_DIAGRAM):   by DATAROLE NAME;
22107      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS8.FILTER2_STATS.
NOTE: The data set EMWS8.FILTER2_STATS has 20 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22108      proc transpose data=EMWS8.Filter2_STATS out=EMWS8.Filter2_STATS(rename=(NAME=VARIABLE _LABEL_=STATISTIC));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Filter2_STATS out=EMWS8.Filter2_STATS(rename=(NAME=VARIABLE _LABEL_=STATISTIC));
22109      by DATAROLE NAME;
MPRINT(EM_DIAGRAM):   by DATAROLE NAME;
22110      id TYPE;
MPRINT(EM_DIAGRAM):   id TYPE;
22111      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS8.FILTER2_STATS.
NOTE: The data set EMWS8.FILTER2_STATS has 80 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

22112      proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS8 nolist;
22113      modify Filter2_STATS;
MPRINT(EM_DIAGRAM):   modify Filter2_STATS;
22114      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" STATISTIC = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel, NOQUOTE))" EXCLUDED="Excluded" ORIGINAL = "%sysfunc(sasmsg(sashelp.dmine, rpt_original_vlabel,
22114    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Variable" STATISTIC = "Statistics" EXCLUDED= "Excluded" ORIGINAL = "Original";
MPRINT(EM_DIAGRAM):   run;
22115      run;

NOTE: MODIFY was successful for EMWS8.FILTER2_STATS.DATA.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

22116      proc sort data=EMWS8.Filter2_STATS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Filter2_STATS;
22117      by DATAROLE VARIABLE;
MPRINT(EM_DIAGRAM):   by DATAROLE VARIABLE;
22118      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 80 observations read from the data set EMWS8.FILTER2_STATS.
NOTE: The data set EMWS8.FILTER2_STATS has 80 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

22119      %let _cn = %sysfunc(getoption(CENTER));
22120      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
22121      proc print data=EMWS8.Filter2_STATS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Filter2_STATS(obs=500) noobs label;
22122      var STATISTIC ORIGINAL
22123      EXCLUDED
22124      ;
MPRINT(EM_DIAGRAM):   var STATISTIC ORIGINAL EXCLUDED ;
22125      by DATAROLE VARIABLE;
MPRINT(EM_DIAGRAM):   by DATAROLE VARIABLE;
22126      where ORIGINAL ne .;
MPRINT(EM_DIAGRAM):   where ORIGINAL ne .;
22127      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_filterstat_title,    NOQUOTE, EXCLUDED))";
MPRINT(EM_DIAGRAM):   title9 "Statistics for Original and EXCLUDED Data";
22128      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   run;
22129      run;

NOTE: There were 80 observations read from the data set EMWS8.FILTER2_STATS.
      WHERE ORIGINAL not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22130      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
22131      title9;
MPRINT(EM_DIAGRAM):   title9;
22132      title10;
MPRINT(EM_DIAGRAM):   title10;
22133      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22134      * createhistogramtable;
MPRINT(EM_DIAGRAM):   * createhistogramtable;
22135      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22136      data WORK.Filter2DMDBC;
MPRINT(EM_DIAGRAM):   data WORK.Filter2DMDBC;
22137      set WORK.Filter2DMDBC(where=(report='Y'));
MPRINT(EM_DIAGRAM):   set WORK.Filter2DMDBC(where=(report='Y'));
22138      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK.FILTER2DMDBC.
      WHERE report='Y';
NOTE: The data set WORK.FILTER2DMDBC has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

22139      filename vdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
MPRINT(EM_DIAGRAM):    filename vdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
22140      %inc vdist;
NOTE: %INCLUDE (level 1) file VDIST is file SASHELP.EMUTIL.EM_VARDIST.SOURCE.
22141     +%macro var_profile(DATA=, OUTPUT=_INTERVAL, VARS=, METADATA=, COMPUTESTAT=Y, STAT=_STAT, PCTLSTAT=_PCTLSTAT, FREQ=,
22142     +                   BINDATA=, BIN=Y, NUMBARS=8, MINMAX=N);
22143     +   %let _em_nodeid = EM;
22144     +   %if %symexist(EM_NODEID) %then %do;
22145     +       %let _em_nodeid = &em_nodeid;
22146     +   %end;
22148     +   %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingsummarystats_note, NOQUOTE, &_em_nodeid));
22149     +   %put &EM_CODEBAR;
22150     +   %put * &msgString;
22151     +   %put &EM_CODEBAR;
22153     +   /* Process metadata data set */
22154     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
22155     +   %if %sysfunc(exist(&metadata))>0 and (&metadata ne ) %then %do;
22156     +       %let FREQ=;
22157     +       %let _nobs=0;
22158     +       data _null;
22159     +          set &metadata(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
22160     +          if eof then call symput('_nobs', put(_N_, best.));
22161     +       run;
22162     +       %if "&_nobs" ne "0" %then %do;
22163     +           data _null_;
22164     +              file _mac;
22165     +              length _VARS $80; retain _vars;
22166     +              if _n_ =1 then put '%macro _vars;';
22167     +              set &metadata end=eof;
22168     +              where LEVEL = 'INTERVAL' or ROLE='FREQ';
22169     +              if ROLE='FREQ' then call symput('FREQ', trim(NAME));
22170     +              else do;
22171     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
22172     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
22173     +                 else do;
22174     +                    put _Vars;
22175     +                    _vars = strip(NAME);
22176     +                 end;
22177     +              end;
22179     +              if eof then do;
22180     +                 put _Vars;
22181     +                 put '%mend _vars;';
22182     +              end;
22183     +           run;
22184     +       %end;
22185     +       %else %do;
22186     +           data _null_;
22187     +              file _mac;
22188     +              put '%macro _vars;';
22189     +              put '%mend _vars;';
22190     +           run;
22191     +       %end;
22192     +   %end;
22193     +   %else %do;
22194     +       data _null_;
22195     +          file _mac;
22196     +          put '%macro _vars;';
22197     +          put '%mend _vars;';
22198     +       run;
22199     +   %end;
22200     +   %inc _mac;
22201     +   filename _mac;
22203     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
22205     +   /* Check if FREQ variable is in the data set */
22206     +   %if &freq ne %then %do;
22207     +       data _null_;
22208     +          dsid = open("&data");
22209     +          if dsid>0 then do;
22210     +               if varnum(dsid, "&FREQ")<1 then
22211     +                  call symput('FREQ', '');
22212     +               dsid = close(dsid);
22213     +          end;
22214     +       run;
22215     +   %end;
22217     +   %if &bindata eq %then %do;
22218     +       %let bindata = _BOUNDS;
22219     +       proc datasets lib=work nolist mt=(DATA VIEW);
22220     +          delete _BOUNDS;
22221     +       run;
22222     +   %end;
22224     +   %global _EM_VARDISTOBS_MAX;
22225     +   %let _EM_VARDISTOBS_MAX = 1000000;
22227     +   %if %symexist(EM_VARDISTOBS_MAX) %then %do;
22228     +       %let _EM_VARDISTOBS_MAX= %eval(&EM_VARDISTOBS_MAX);
22229     +   %end;
22231     +   %if &computeStat = Y %then %do;
22232     +       proc dmdb data=&DATA(obs=&_EM_VARDISTOBS_MAX) varout=&STAT(rename=(NAME=VARIABLE));
22233     +          var %_Vars &vars;
22234     +          %if &FREQ ne %then %do;
22235     +              freq &FREQ;
22236     +          %end;
22237     +       run;
22238     +       proc sort data=&stat;
22239     +          by VARIABLE;
22240     +       run;
22242     +       %if ^%sysfunc(indexc(&STAT, .)) %then %do;
22243     +           %let _library = WORK;
22244     +           %let _member  = &STAT;
22245     +      %end;
22246     +      %else %do;
22247     +          %let _library = %scan(&STAT, 1, .);
22248     +          %let _member  = %scan(&STAT, 2, .);
22249     +      %end;
22251     +      proc datasets library=&_library nolist;
22252     +         modify &_member;
22253     +         label NMISS    = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
22254     +         label MIN      = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
22255     +         label MAX      = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
22256     +         label MEAN     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
22257     +         label STD      = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
22258     +         label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
22259     +         label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
22260     +      run;
22261     +      quit;
22262     +   %end;
22264     +   %if &BIN ne N %then %do;
22265     +       %if %sysfunc(exist(&bindata))<1 %then %do;
22266     +           %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingmidpoints_note, NOQUOTE, &_em_nodeid));
22267     +           %put &EM_CODEBAR;
22268     +           %put * &msgString;
22269     +           %put &EM_CODEBAR;
22270     +           filename fref catalog 'work.em.profileformat.source';
22272     +            %let _maxlevel = %eval(&numbars + 1);
22273     +            proc dmdb data=&data(obs=&_EM_VARDISTOBS_MAX) classout=_CLASSOUT maxlevel=&_maxlevel;
22274     +               class %_vars &vars;
22275     +            run;
22276     +            proc freq data=_CLASSOUT ORDER=DATA noprint;
22277     +               table NAME / OUT = _COUNT(where=(COUNT<&_maxlevel));
22278     +            run;
22279     +           proc sort data=_COUNT(keep=NAME COUNT rename=(COUNT=_NUMCLASSBINS_));
22280     +              by NAME;
22281     +           run;
22282     +           proc sort data=_CLASSOUT;
22283     +              by NAME;
22284     +          run;
22285     +          proc transpose data=_CLASSOUT out=_DISCRETEMID(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
22286     +             var NRAW;
22287     +             by NAME;
22288     +          run;
22289     +          proc delete data=WORK._CLASSOUT;
22290     +          run;
22291     +          data _null_;
22292     +             dsid = open('_DISCRETEMID');
22293     +             if dsid then do;
22294     +                call symput('NUMCLASSBARS', left(trim(put(attrn(dsid, 'NVARS')-1, best12.))));
22295     +                dsid = close(dsid);
22296     +             end;
22297     +          run;
22298     +          data _DISCRETEMID;
22299     +             merge _DISCRETEMID _COUNT(in=_b rename=(NAME=VARIABLE));
22300     +             keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars _NUMCLASSBINS_;
22301     +             by VARIABLE;
22302     +             if _b then output;
22303     +          run;
22305     +          data _EMVARDIST / view=_EMVARDIST;
22306     +             set &DATA(keep=%_VARS &vars &FREQ  obs=&_EM_VARDISTOBS_MAX);
22307     +          run;
22308     +          proc stdize data=_EMVARDIST outstat=&pctlstat  out=_null_ pctlpts=(0 5 25 50 75 95 100);
22309     +             var %_vars &vars;
22310     +             %if &FREQ ne %then %do;
22311     +                 freq &FREQ / notrunc;
22312     +             %end;
22313     +          run;
22314     +          proc datasets lib=WORK NOLIST;
22315     +             delete _EMVARDIST / mt=view;
22316     +          run;
22317     +          quit;
22318     +          %if %upcase(&minmax) = Y %then %do;
22319     +              proc transpose data=&pctlstat out=_MINMAXDATA(rename=(_NAME_=VARIABLE COL1=MIN COL2=MAX));
22320     +                 where  _type_ in('P0', 'P100');
22321     +              run;
22322     +              data _MINMAXDATA(keep=Variable Value Pos);
22323     +                 set _MINMAXDATA;
22324     +                 label VARIABLE  = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
22325     +                 Value = min; Pos=1; output;
22326     +                 Value = max; Pos=3; output;
22327     +              run;
22328     +          %end;
22329     +          proc transpose data=&pctlstat out=&bindata(rename=(_NAME_=VARIABLE COL1=MIN COL2=P5
22330     +                                                             COL3=P95 COL4=MAX));
22331     +             where  _type_ in('P0', 'P5', 'P95', 'P100');
22332     +          run;
22333     +          proc sort data=&bindata;
22334     +             by VARIABLE;
22335     +          run;
22337     +          %let new_numbars=%eval(&NUMBARS+12);
22338     +          data &bindata;
22339     +             set &bindata;
22340     +             length Format $12;
22341     +             array _midpoint{&new_NUMBARS};
22342     +             array _bounds{&new_NUMBARS};
22343     +             if (max - min)>1e-10 then do;
22344     +                step = abs(P95-P5)/&NUMBARS;
22345     +                lstep = abs(p5- min)/5;
22346     +                ustep = abs(max-p95)/5;
22347     +                /* No outlying values */;
22348     +                if lstep<=step and ustep<=step then do;
22349     +                   step = abs(MIN-MAX)/&NUMBARS;
22350     +                   START=MIN;
22351     +                   do i=1 to &numbars;
22352     +                      _bounds(i)   = MIN + i*step;      if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
22353     +                      _midpoint(i) = MIN+ (i-0.5)*step; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
22354     +                   end;
22355     +                   %let new_numbars = &numbars;
22356     +                end;
22357     +                else do;
22358     +                   if lstep<=step then do;
22359     +                      step = abs(MIN-P95)/&NUMBARS;
22360     +                      /* Start Histogram at MIN value */
22361     +                      do i=1 to &NUMBARS;
22362     +                         _bounds(i)   = MIN + i*step;       if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
22363     +                         _midpoint(i) = MIN+ (i-0.5)*step;  if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
22364     +                      end;
22365     +                      /* Make BINS with upper outliers width */
22366     +                      do i=1 to 5;
22367     +                         numbars = &numbars + i;
22368     +                         _bounds(numbars)   = P95 + i*ustep;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
22369     +                         _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
22370     +                      end;
22371     +                       %let new_numbars = %eval(&numbars+5);
22372     +                   end;
22373     +                   else do;
22374     +                      /* Make BINS with lower outliers width */
22375     +                      do i=1 to 5;
22376     +                         _bounds(i)   = P5 - (5-i)*lstep; if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
22377     +                         _midpoint(i) = P5 - (5 - i + 0.5)*lstep - abs(lstep-step)/2; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
22378     +                      end;
22379     +                      if ustep<= step then do;
22380     +                         step = abs(P5-MAX)/&NUMBARS;
22381     +                         /* End Histogram at MAX value */
22382     +                         do i=1 to &NUMBARS;
22383     +                            numbars = i+5;
22384     +                            _bounds(numbars)   = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
22385     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
22386     +                         end;
22387     +                          %let new_numbars = %eval(&numbars+5);
22388     +                      end;
22389     +                      else do;
22390     +                         do i=1 to &NUMBARS;
22391     +                            numbars = i+5;
22392     +                            _bounds(numbars)  = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
22393     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
22394     +                         end;
22395     +                         /* Make BINS with upper outliers width */
22396     +                         do i=1 to 5;
22397     +                            numbars = &numbars+5+i;
22398     +                            _bounds(numbars)   = P95 + i*ustep; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
22399     +                            _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
22400     +                         end;
22401     +                         %let new_numbars = %eval(&numbars+10);
22402     +                      end;
22403     +                   end;
22404     +                end;
22405     +             end;
22406     +             else do;
22407     +                _bounds(1)   = MIN;
22408     +                _midpoint(1) = MIN;
22409     +             end;
22410     +             Format = 'F'!!trim(left(put(_n_,6.)))!!'_';
22411     +          run;
22412     +          %if %sysfunc(exist(_DISCRETEMID)) %then %do;
22413     +              data &bindata;
22414     +                 merge &bindata _DISCRETEMID(in = _b);
22415     +                 by VARIABLE;
22416     +                 if _b then _DISCRETE=1;
22417     +                 else _DISCRETE=0;
22418     +              run;
22419     +          %end;
22421     +          data _null_;
22422     +             file fref;
22423     +             set &bindata end=eof;
22424     +             array _bounds{&NEW_NUMBARS};
22425     +             array _midpoint{&NEW_NUMBARS};
22426     +             if _n_=1 then
22427     +                put 'proc format;';
22429     +             put 'value ' Format;
22430     +             if _DISCRETE then do;
22431     +                 do i=1 to &numbars;
22432     +                    _MID = _midpoint{i};
22433     +                    if _MID ne . and i<= _NUMCLASSBINS_ then
22434     +                       put _MID '="' _MID '"';
22435     +                 end;
22436     +                 put ';';
22437     +             end;
22438     +             else do;
22439     +                if min eq max then do;
22440     +                   put 'low - high ="' MIN '";';
22441     +                end;
22442     +                else do;
22443     +                   _LB  = MIN;
22444     +                   _MID = _midpoint{1};
22445     +                   _UB  = _bounds{1};
22446     +                   put 'LOW -' _UB '="' _MID '"';
22448     +                   do i=1 to &NEW_NUMBARS-1;
22449     +                      _LB  = _bounds{i};
22450     +                      j=i+1;
22451     +                      _MID = _midpoint{j};
22452     +                      _UB  = _bounds{j};
22453     +                      if (_UB ne .) and (_LB ne _UB) then do;
22454     +                         if _UB>=MAX then
22455     +                            put _LB '-HIGH="' _MID '"';
22456     +                         else
22457     +                            put _LB '-' _UB '="' _MID '"';
22458     +                      end;
22459     +                   end;
22460     +                end;
22461     +             end;
22462     +             put ';';
22463     +             if eof then put 'run;';
22464     +          run;
22466     +          %inc fref;
22468     +          filename fref;
22469     +      %end;
22471     +      data _binneddata / view=_binneddata;
22472     +         set &DATA(obs=&_EM_VARDISTOBS_MAX);
22474     +         %let dsid    =%sysfunc(open(&bindata));
22475     +         %let namenum = %sysfunc(varnum(&dsid, VARIABLE));
22476     +         %let fmtnum  = %sysfunc(varnum(&dsid, FORMAT));
22477     +         %let obs = %sysfunc(fetch(&dsid));
22479     +         %if (&obs=0) %then %do;
22480     +             format
22481     +         %end;
22483     +         %let _count = 0;
22484     +         %do %while(&obs=0);
22485     +             %let _count = %eval(&_count +1);
22486     +             %let _name = %sysfunc(getvarc(&dsid, &namenum));
22487     +             %let _fmtname = %sysfunc(getvarc(&dsid, &fmtnum));
22488     +             %do;
22489     +                &_name &_fmtname..
22490     +             %end;
22491     +             %let obs = %sysfunc(fetch(&dsid));
22492     +         %end;
22493     +         %let dsid=%sysfunc(close(&dsid));
22494     +         ;
22495     +      run;
22496     +   %end;
22498     +    %if &bin ne N %then %do;
22499     +        proc dmdb data=_binneddata(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
22500     +    %end;
22501     +    %else %do;
22502     +        proc dmdb data = &data(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
22503     +    %end;
22504     +      class %_vars &vars;
22505     +      %if &FREQ ne %then %do;
22506     +          freq &FREQ;
22507     +      %end;
22508     +   run;
22509     +   data &output;
22510     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
22511     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
22512     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
22513     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
22514     +      set _temptab;
22515     +      format VALUE 12.3 count;
22516     +      value = inputn(level, 'best12.');
22517     +      keep VARIABLE COUNT PERCENT VALUE;
22518     +   run;
22519     +   %if &BIN ne N and %sysfunc(exist(_MINMAXDATA)) and &minmax=Y %then %do;
22520     +       data &output;
22521     +          set &output(in=_a) _MINMAXDATA;
22522     +          if _a then Pos=2;
22523     +       run;
22524     +       proc sort data=&output out=&output(drop=pos);
22525     +          by VARIABLE POS VALUE;
22526     +          where VALUE ne .;
22527     +       run;
22528     +   %end;
22529     +   proc datasets lib=work nolist mt=(DATA VIEW);
22530     +      delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
22531     +   run;
22532     +   quit;
22534     +   %doend:
22535     +%mend var_profile;
NOTE: %INCLUDE (level 1) ending.
22536      filename vdist;
MPRINT(EM_DIAGRAM):   filename vdist;
NOTE: Fileref VDIST has been deassigned.
22537      %let em_nodeid = Filter2;
22538      %var_profile(DATA=EMWS8.FIMPORT_train, OUTPUT=WORK._HISTDATA, METADATA=WORK.Filter2DMDBC, COMPUTESTAT=N, BINDATA=_bindata, STAT=_STAT, FREQ=, BIN=Y, NUMBARS= 16);
*------------------------------------------------------------*
* Filter2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.Filter2DMDBC(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTER2DMDBC.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Montag, 11. April 2016 16.42 Uhr,
      Last Modified=Montag, 11. April 2016 16.42 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD12952_WN7LF-LEAVE_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
22539     +%macro _vars;
22540     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

22541      %var_profile(DATA=WORK.DATA_EXCLUDED, OUTPUT=WORK._HISTDATA, METADATA=WORK.Filter2DMDBC, COMPUTESTAT=N, STAT=_STAT, BIN=Y, BINDATA=_bindata, NUMBARS= 16);
MPRINT(EM_DIAGRAM):   
*------------------------------------------------------------*
* Filter2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.Filter2DMDBC(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTER2DMDBC.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Montag, 11. April 2016 16.42 Uhr,
      Last Modified=Montag, 11. April 2016 16.42 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD12952_WN7LF-LEAVE_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
22542     +%macro _vars;
22543     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

22544      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22545      * Filter2: Creating Bar Chart Table;
MPRINT(EM_DIAGRAM):   * Filter2: Creating Bar Chart Table;
22546      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22547      filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
MPRINT(EM_DIAGRAM):   filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
22548      %inc cdist;
NOTE: %INCLUDE (level 1) file CDIST is file SASHELP.EMUTIL.EM_CLASSDIST.SOURCE.
22549     +%macro class_profile(DATA=, OUTPUT=_CLASS, VARS=, METADATA=, WHERE=, STAT=_STAT, FREQ=);
22550     +   %if %INDEX(&EM_DEBUG, LOG SOURCE) %then %do;
22551     +       %put *** Statistics for Class variables ***;
22552     +       %put >>> DATA= &data  OUTPUT= &output;
22553     +       %put >>> VAR= &vars;
22554     +       %put >>> WHERE=  &where;
22555     +       %put >>> FREQ=  &freq;
22556     +   %end;
22558     +      /* Process metadata data set */
22559     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
22560     +   %if %sysfunc(exist(&metadata))>0 and ("&metadata" ne "") %then %do;
22561     +       %let FREQ=;
22562     +       %let _nobs=0;
22563     +       data _null;
22564     +          set &metadata(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
22565     +          if eof then call symput('_nobs', put(_N_, best.));
22566     +       run;
22567     +       %if "&_nobs" ne "0" %then %do;
22568     +           data _null_;
22569     +              file _mac;
22570     +              length _VARS $80; retain _vars;
22571     +              if _n_ =1 then put '%macro _vars;';
22572     +              set &metadata end=eof;
22573     +              where LEVEL ne 'INTERVAL' or ROLE='FREQ';
22574     +              if ROLE='FREQ' then call symput('FREQ', NAME);
22575     +              else do;
22576     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
22577     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
22578     +                 else do;
22579     +                    put _Vars;
22580     +                    _vars = strip(NAME);
22581     +                 end;
22582     +              end;
22583     +              if eof then do;
22584     +                 put _Vars;
22585     +                 put '%mend _vars;';
22586     +              end;
22587     +           run;
22588     +       %end;
22589     +       %else %do;
22590     +           data _null_;
22591     +              file _mac;
22592     +              put '%macro _vars;';
22593     +              put '%mend _vars;';
22594     +           run;
22595     +       %end;
22596     +   %end;
22597     +   %else %do;
22598     +       data _null_;
22599     +          file _mac;
22600     +          put '%macro _vars;';
22601     +          put '%mend _vars;';
22602     +       run;
22603     +   %end;
22604     +   %inc _mac;
22605     +   filename _mac;
22607     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
22609     +   /* Check if FREQ variable is in the data set */
22610     +   %if &freq ne %then %do;
22611     +       data _null_;
22612     +          dsid = open("&data");
22613     +          if dsid>0 then do;
22614     +               if varnum(dsid, "&FREQ")<1 then
22615     +                  call symput('FREQ', '');
22616     +               dsid = close(dsid);
22617     +          end;
22618     +       run;
22619     +   %end;
22621     +   proc dmdb data=&DATA  nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
22622     +      class %_Vars &vars;
22623     +      %if &FREQ ne %then %do;
22624     +          freq &FREQ;
22625     +      %end;
22626     +      %if %bquote(&WHERE) ne %then %do;
22627     +            where &WHERE;
22628     +      %end;
22629     +   run;
22630     +   proc sort data=_tempclass;
22631     +      by VARIABLE;
22632     +   run;
22633     +   data &output;
22634     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
22635     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
22636     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
22637     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
22638     +      set _tempclass;
22639     +      format COUNT;
22640     +      keep VARIABLE COUNT PERCENT VALUE;
22641     +   run;
22642     +   proc means data=&output noprint;
22643     +      class VARIABLE;
22644     +      var COUNT;
22645     +      output out=&STAT N=NUMCAT;
22646     +   run;
22647     +   data &STAT;
22648     +      set &STAT;
22649     +      where _TYPE_=1;
22650     +      KEEP VARIABLE NUMCAT;
22651     +      label NUMCAT   = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
22652     +      format NUMCAT 8.;
22653     +   run;
22654     +   proc datasets lib=work nolist;
22655     +      delete _tempclass;
22656     +   run;
22657     +   quit;
22659     +   %doend:
22660     +%mend class_profile;
NOTE: %INCLUDE (level 1) ending.
22662      filename cdist;
MPRINT(EM_DIAGRAM):   filename cdist;
NOTE: Fileref CDIST has been deassigned.
22663      %let em_nodeid = Filter2;
22664      %class_profile(DATA=EMWS8.FIMPORT_train, OUTPUT=WORK._BARDATA, METADATA=WORK.Filter2DMDBC, STAT=_STAT);
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set WORK.Filter2DMDBC(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTER2DMDBC.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Montag, 11. April 2016 16.42 Uhr,
      Last Modified=Montag, 11. April 2016 16.42 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD12952_WN7LF-LEAVE_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
22665     +%macro _vars;
22666     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

22667      %class_profile(DATA=WORK.DATA_EXCLUDED, OUTPUT=WORK._BARDATA, METADATA=WORK.Filter2DMDBC, STAT=_STAT);
MPRINT(EM_DIAGRAM):   
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set WORK.Filter2DMDBC(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;

NOTE: There were 0 observations read from the data set WORK.FILTER2DMDBC.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;

NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Montag, 11. April 2016 16.42 Uhr,
      Last Modified=Montag, 11. April 2016 16.42 Uhr,
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary Files\_TD12952_WN7LF-LEAVE_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_7PRO

NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
22668     +%macro _vars;
22669     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;

22670      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22671      * Filter2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Filter2: Computing metadata for TRAIN data;
22672      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.FILTER2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\\predictive-models-project\Workspaces\EMWS8\Filter2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Filter2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Filter2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Filter2_TRAIN out=WORK.M1PC_TT7 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1PC_TT7;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PC_TT7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1PC_TT7;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PC_TT7;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1R6VN3L NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1R6VN3L;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1R6VN3L;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M07P2EM5(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1R6VN3L;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1R6VN3L;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1R6VN3L;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1R6VN3L;
MPRINT(EMADVISECOLUMNS):   set WORK.M1R6VN3L;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.FIMPORT_train noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.FIMPORT_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Filter2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Filter2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Filter2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="M_FILTER" then do;
MPRINT(EM_DIAGRAM):   role ="REJECTED";
MPRINT(EM_DIAGRAM):   level = "BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS8.FILTER2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
