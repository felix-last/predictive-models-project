MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                09.23 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3TKSWRR 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3TKSWRR new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.23 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\\predictive-models-project\Workspaces\EMWS8\Boost3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1262360    proc freq data=EMWS8.Boost3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Boost3_VariableSet noprint;
1262361    table ROLE*LEVEL/out=WORK.Boost3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Boost3META;
1262362    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS8.BOOST3_VARIABLESET.
NOTE: The data set WORK.BOOST3META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1262363    proc print data=WORK.Boost3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost3META label noobs;
1262364    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1262365    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1262365  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1262365  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
1262366    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1262367    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1262368    run;

NOTE: There were 4 observations read from the data set WORK.BOOST3META.
NOTE: The PROCEDURE PRINT printed page 1232.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1262369    title10;
MPRINT(EM_DIAGRAM):   title10;
1262370    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN 
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN 
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN 
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.PRINCOMP_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Boost3_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Boost3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost3_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Boost3_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Boost3_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR 
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Boost3_DepVar_DD 
out=EMWS8.Boost3_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
1262417    data WORK.Boost3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Boost3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1262418    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1262419    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1262419  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1262419  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1262420       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1262420  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1262420  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1262421    set EMWS8.BOOST3_DEPVAR_DM( where=(_TYPE_="TARGET"));
The SAS System

MPRINT(EM_DIAGRAM):   set EMWS8.BOOST3_DEPVAR_DM( where=(_TYPE_="TARGET"));
1262422    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1262423    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1262424    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1262425    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1262426    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1262427    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1262428    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1262429    end;
MPRINT(EM_DIAGRAM):   end;
1262430    output;
MPRINT(EM_DIAGRAM):   output;
1262431    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.BOOST3_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.BOOST3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1262432    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1262433    proc print data=WORK.Boost3_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost3_EVENT noobs label;
1262434    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1262435    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1262436    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1262437    run;

NOTE: There were 1 observations read from the data set WORK.BOOST3_EVENT.
NOTE: The PROCEDURE PRINT printed page 1233.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1262438    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
1262439    proc print data = EMWS8.Boost3_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Boost3_DepVar_DM noobs label;
1262440    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1262441    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
1262442    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1262442  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1262442  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1262443    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1262444    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1262445    run;

NOTE: There were 7 observations read from the data set EMWS8.BOOST3_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1234.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1262446    title10;
MPRINT(EM_DIAGRAM):   title10;
1262447    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Tugas';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Predictive Models';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost3: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=359;
MPRINT(EM_DECDATA):   DATAPRIOR=0.151221567;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2015;
MPRINT(EM_DECDATA):   DATAPRIOR=0.848778433;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS8.Boost3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS8.Boost3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
1262913    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1262914    * Boost3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost3: Generation of macros and macro variables;
1262915    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
1262916    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

1262917    %let EMEXCEPTIONSTRING=;
1262918    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1262919    * TRAIN: Boost3;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost3;
1262920    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1262921    %let EM_ACTION = TRAIN;
1262922    %let syscc = 0;
1262923    %macro main;
1262924    
1262925      filename temp catalog 'sashelp.emmodl.boost_macros.source';
1262926      %include temp;
1262927      filename temp;
1262928    
1262929      %setProperties;
1262930    
1262931      %if %upcase(&EM_ACTION) = CREATE %then %do;
1262932        filename temp catalog 'sashelp.emmodl.boost_create.source';
1262933        %include temp;
1262934        filename temp;
1262935    
1262936        %create;
1262937      %end;
1262938    
1262939       %else
1262940       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1262941    
1262942           filename temp catalog 'sashelp.emmodl.boost_train.source';
1262943           %include temp;
1262944           filename temp;
1262945           %train;
1262946       %end;
1262947    
1262948      %else
1262949      %if %upcase(&EM_ACTION) = SCORE %then %do;
1262950        filename temp catalog 'sashelp.emmodl.boost_score.source';
1262951        %include temp;
1262952        filename temp;
1262953    
1262954        %score;
1262955    
1262956      %end;
1262957    
1262958      %else
1262959      %if %upcase(&EM_ACTION) = REPORT %then %do;
1262960    
1262961           filename temp catalog 'sashelp.emmodl.boost_report.source';
1262962           %include temp;
1262963           filename temp;
1262964    
1262965           %report;
1262966       %end;
1262967    
1262968       %doendm:
1262969    %mend main;
1262970    
1262971    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
1262973   +%macro SetProperties;
1262975   +     /* boost options */
1262976   +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
1262977   +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
1262978   +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
1262979   +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
1262980   +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
1262981   +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
1262982   +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
1262983   +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
1262984   +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
1262985   +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
1262986   +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
1262987   +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
1262989   +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
1262990   +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
1262991   +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
1262992   +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
1262993   +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
1262994   +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
1262995   +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
1262996   +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
1262998   +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
1262999   +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
1263000   +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
1263001   +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
1263003   +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
1263004   +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
1263005   +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
1263007   +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
1263011   +%macro train;
1263013   +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
1263014   +   %include temp;
1263015   +   filename temp;
1263017   +   %if &EM_IMPORT_DATA eq %then %do;
1263018   +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
1263019   +       %put &em_codebar;
1263020   +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
1263020  !+NOQUOTE));
1263021   +       %put &errormsg;
1263022   +       %put &em_codebar;
1263023   +       %goto doendm;
1263024   +   %end;
1263025   +   %else
1263026   +       %let EMEXCEPTIONSTRING =;
1263028   +   %if  &EM_NUM_TARGET ne 1 %then %do;
1263029   +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
1263030   +        %put &em_codebar;
1263031   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
1263031  !+NOQUOTE));
1263032   +        %put &errormsg;
1263033   +        %put &em_codebar;
1263034   +        %goto doendm;
1263035   +   %end;
1263037   +   %let target_level = %EM_TARGET_LEVEL;
1263038   +   %let target_var = %EM_TARGET;
1263040   +   /* check actual num of target levels */
1263041   +   %if (&target_Level eq BINARY) %then %do;
1263042   +      %CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=&target_Var,
1263043   +                              nLevel=_nTargetLevel );
1263044   +      %if &_nTargetLevel  > 2 %then %do;
1263045   +        %let EMEXCEPTIONSTRING =
1263045  !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
1263046   +        %put &em_codebar;
1263047   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
1263047  !+NOQUOTE));
1263048   +        %put &errormsg;
1263049   +        %put &em_codebar;
1263050   +        %goto doendm;
1263051   +      %end;
1263052   +   %end;
1263054   +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
1263054  !+(&EM_NUM_ORDINAL_INPUT < 1)
1263055   +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
1263056   +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
1263057   +        %put &em_codebar;
1263058   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
1263058  !+;
1263059   +        %put &errormsg;
1263060   +        %put &em_codebar;
1263061   +        %goto doendm;
1263062   +   %end;
1263064   +   /* Initialize property macro variables */
1263065   +   %SetProperties;
1263067   +   /* data sets */
1263068   +   %EM_GETNAME(key=MODEL, type=DATA);
1263069   +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
1263070   +   %EM_GETNAME(key=SUBFIT, type=DATA);
1263071   +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
1263073   +   /* files
1263074   +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
1263076   +   /* retrieve target information */
1263077   +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
1263079   +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
1263080   +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
1263081   +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
1263082   +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
1263083   +   %do %while(^ %sysfunc(fetch(&dsid)));
1263084   +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
1263085   +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
1263086   +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
1263087   +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
1263088   +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
1263089   +   %end;
1263090   +   %let dsid = %sysfunc(close(&dsid));
1263092   +   /* if target level is ORDINAL, throw run time exception -- proc boost does not
1263092  !+support ordinal target */
1263093   +   %if &Target_Level eq ORDINAL %then %do;
1263094   +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
1263095   +        %put &em_codebar;
1263096   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
1263096  !+error_invalidordinaltarget_note, NOQUOTE));
1263097   +        %put &errormsg;
1263098   +        %put &em_codebar;
1263099   +        %goto doendm;
1263100   +   %end;
1263102   +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be
1263102  !+thrown */
1263103   +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq .
1263103  !+)) %then %do;
1263104   +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
1263105   +        %put &em_codebar;
1263106   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note,
1263106  !+NOQUOTE));
1263107   +        %put &errormsg;
1263108   +        %put &em_codebar;
1263109   +        %goto doendm;
1263110   +   %end;
1263112   +   %runBoostProcedure;
1263115   +   %doendm:
1263116   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
1263117   +%Macro CheckBinaryTargetLevel(indata=, target=,  nLevel= );
1263118   +  %global &nLevel;
1263119   +  proc dmdb batch data=&indata
1263120   +    classout=_tmp_dmdbout;
1263121   +    class &target;
1263122   +  run;
1263123   +  data _tmp_dmdbout;
1263124   +    set _tmp_dmdbout;
1263125   +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
1263126   +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
1263127   +  run;
1263128   +  data _null_;
1263129   +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
1263130   +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
1263131   +    %let dsid = %sysfunc(close(&dsid));
1263132   +     call symput("&nLevel", put(&_obs, Best12.));
1263133   +  run;
1263135   +  proc datasets lib=work nolist;
1263136   +     delete _tmp_dmdbout;
1263137   +  run;
1263138   +  quit;
1263139   +%Mend CheckBinaryTargetLevel;
1263142   +%macro runBoostProcedure;
1263144   +  proc sql;
1263145   +    reset noprint;
1263146   +    select count(*) into :nobs from &EM_IMPORT_DATA;
1263147   +  quit;
1263149   +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
1263151   +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
1263152   +      iterations = &EM_PROPERTY_ITERATIONS
1263153   +    %end;
1263155   +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
1263156   +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
1263157   +       trainproportion = &tprop
1263158   +    %end;
1263160   +    %if &EM_PROPERTY_SEED ne %then %do;
1263161   +       seed = &EM_PROPERTY_SEED
1263162   +    %end;
1263164   +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
1263165   +       shrinkage = &EM_PROPERTY_SHRINKAGE
1263166   +    %end;
1263168   +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
1263169   +      leaffraction = &EM_PROPERTY_LEAFFRACTION
1263170   +    %end;
1263172   +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
1263173   +    %if &splitsize ge &nobs %then %do;
1263174   +       %let splitsize= .;
1263175   +    %end;
1263176   +    %if &splitsize ne . %then %do;
1263177   +      splitsize = &splitsize
1263178   +    %end;
1263180   +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
1263181   +      mincatsize = &EM_PROPERTY_MINCATSIZE
1263182   +    %end;
1263184   +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
1263185   +       maxbranch = &EM_PROPERTY_MAXBRANCH
1263186   +    %end;
1263188   +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
1263189   +       maxdepth = &EM_PROPERTY_MAXDEPTH
1263190   +    %end;
1263192   +    %let nsurrs = ;
1263193   +    %if &EM_PROPERTY_NSURRS ne %then %do;
1263194   +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT +
1263194  !+&EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
1263195   +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
1263196   +      maxsurrs = &nsurrs
1263197   +    %end;
1263199   +    %if &EM_PROPERTY_MISSING ne %then %do;
1263200   +      Missing = &EM_PROPERTY_MISSING
1263201   +    %end;
1263203   +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
1263204   +      reusevar = &EM_PROPERTY_REUSEVAR
1263205   +    %end;
1263206   +/*
1263207   +    %if &EM_PROPERTY_PRECISION ne %then %do;
1263208   +      intervaldecimals=&EM_PROPERTY_PRECISION
1263209   +    %end;
1263210   +*/
1263211   +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
1263212   +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
1263213   +    %end;
1263215   +    %if &Target_Event ne %then %do;
1263216   +      Event="&Target_Event"
1263217   +    %end;
1263219   +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
1263220   +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
1263221   +    %end;
1263223   +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
1263224   +      IntervalBins = &EM_PROPERTY_INTERVALBINS
1263225   +    %end;
1263227   +    %if &TARGET_LEVEL eq INTERVAL %then %do;
1263228   +      %if &EM_PROPERTY_HUBER ne %then %do;
1263229   +        Huber=&EM_PROPERTY_HUBER
1263230   +      %end;
1263231   +    %end;
1263232   +    ;
1263234   +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
1263235   +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
1263236   +    %end;
1263238   +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED
1263238  !+ne  %then %do;
1263239   +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT
1263239  !+%EM_NOMINAL_REJECTED / level = nominal;
1263240   +    %end;
1263242   +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
1263243   +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
1263244   +    %end;
1263246   +    %if %EM_FREQ ne %then %do;
1263247   +       freq %EM_FREQ;
1263248   +    %end;
1263250   +    target %EM_TARGET / level = &TARGET_LEVEL;
1263252   +    &EM_DEC_STATEMENT;
1263254   +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
1263255   +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
1263256   +    %end;
1263257   +    %if &EM_PROPERTY_NODESIZE ne %then %do;
1263258   +       nodesize = &EM_PROPERTY_NODESIZE
1263259   +    %end;
1263260   +    ;
1263261   +    save model=&EM_USER_MODEL;
1263262   +  run;
1263263   +  quit;
1263264   +  %em_checkerror();
1263266   +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS8.PRINCOMP_TRAIN 
classout=_tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.19 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS8.PRINCOMP_TRAIN;
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS8.PRINCOMP_TRAIN iterations = 
1000 trainproportion = 1 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 20 
maxbranch = 2 maxdepth = 2 maxsurrs = 0 Missing = USEINSEARCH reusevar = 15 Exhaustive = 5000 
Event="1                               " CategoricalBins = 100 IntervalBins = 300 ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 
PC_4 PC_5 PC_6 PC_7 PC_8 PC_9 Year_Birth
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(RUNBOOSTPROCEDURE):   / level = BINARY;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = RAM nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS8.Boost3_MODEL;
NOTE: 1523189 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 144039936 bytes.
NOTE: Passed training data 5000 times.
NOTE: Current TREEBOOST model contains 1000 trees.
NOTE: Training used 1138368 bytes of work memory.
NOTE: The data set EMWS8.BOOST3_MODEL has 122485 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           18.05 seconds
      cpu time            18.03 seconds
      
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           18.06 seconds
      cpu time            18.04 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

1263269    %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1263270    
1263271    *------------------------------------------------------------*;
1263272    * End TRAIN: Boost3;
1263273    *------------------------------------------------------------*;

1263274    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1263275    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
1263276    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1263277    ;
MPRINT(EM_DIAGRAM):   ;
1263278    ;
MPRINT(EM_DIAGRAM):   ;
1263279    ;
MPRINT(EM_DIAGRAM):   ;
1263280    ;
MPRINT(EM_DIAGRAM):   ;
1263281    quit;
MPRINT(EM_DIAGRAM):   quit;
1263282    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1263283    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
1263284    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1263285    /*; *"; *'; */
1263286    ;
MPRINT(EM_DIAGRAM):   ;
1263287    run;
MPRINT(EM_DIAGRAM):   run;
1263288    quit;
MPRINT(EM_DIAGRAM):   quit;
1263289    /* Reset EM Options */
1263290    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
1263291    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
1263292    goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
