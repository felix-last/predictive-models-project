*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                16.42 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.42 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                16.42 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2NUU1MC
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2NUU1MC new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.42 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.42 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1066678    proc freq data=EMWS8.Reg3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Reg3_VariableSet noprint;
1066679    table ROLE*LEVEL/out=WORK.Reg3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Reg3META;
1066680    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 51 observations read from the data set EMWS8.REG3_VARIABLESET.
NOTE: The data set WORK.REG3META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1066681    proc print data=WORK.Reg3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg3META label noobs;
1066682    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1066683    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1066683  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1066683  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
1066684    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1066685    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1066686    run;
 
NOTE: There were 6 observations read from the data set WORK.REG3META.
NOTE: The PROCEDURE PRINT printed page 744.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1066687    title10;
MPRINT(EM_DIAGRAM):   title10;
1066688    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN
EMWS8.BINNING_TRAIN EMWS8.BINNING_TRAIN EMWS8 BINNING_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.BINNING_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Reg3_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Reg3_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Reg3_DepVar_DD
out=EMWS8.Reg3_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
1066735    data WORK.Reg3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1066736    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1066737    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1066737  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1066737  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1066738       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1066738  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1066738  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1066739    set EMWS8.REG3_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.REG3_DEPVAR_DM( where=(_TYPE_="TARGET"));
1066740    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1066741    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1066742    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1066743    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1066744    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1066745    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1066746    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1066747    end;
MPRINT(EM_DIAGRAM):   end;
1066748    output;
MPRINT(EM_DIAGRAM):   output;
1066749    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG3_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1066750    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1066751    proc print data=WORK.Reg3_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg3_EVENT noobs label;
1066752    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1066753    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1066754    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1066755    run;
 
NOTE: There were 1 observations read from the data set WORK.REG3_EVENT.
NOTE: The PROCEDURE PRINT printed page 745.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1066756    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1066757    proc print data = EMWS8.Reg3_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Reg3_DepVar_DM noobs label;
1066758    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1066759    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
1066760    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1066760  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1066760  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1066761    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1066762    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1066763    run;
 
NOTE: There were 7 observations read from the data set EMWS8.REG3_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 746.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1066764    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Preparing metadata for Training
*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1ZTXWER;
MPRINT(EM_DIAGRAM):   set WORK.M1ZTXWER;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
1066774    data WORK.M1ZTXWER;
MPRINT(EM_DIAGRAM):    data WORK.M1ZTXWER;
1066775    set WORK.M1ZTXWER end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M1ZTXWER end=eof;
1066776    output;
MPRINT(EM_DIAGRAM):   output;
1066777    if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
1066778    NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
1066779    ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
1066780    LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
1066781    TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
1066782    output;
MPRINT(EM_DIAGRAM):   output;
1066783    end;
MPRINT(EM_DIAGRAM):   end;
1066784    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.M1ZTXWER.
NOTE: The data set WORK.M1ZTXWER has 20 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.REG3_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
1066785    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1066786    * Reg3: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg3: Create decision matrix;
1066787    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1066788    data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
1066789      length   DepVar                           $  32
1066790               COUNT                                8
1066791               DATAPRIOR                            8
1066792               TRAINPRIOR                           8
1066793               DECPRIOR                             8
1066794               DECISION1                            8
1066795               DECISION2                            8
1066796               ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
1066797
1066798      label    COUNT="Level Counts"
1066799               DATAPRIOR="Data Proportions"
1066800               TRAINPRIOR="Training Proportions"
1066801               DECPRIOR="Decision Priors"
1066802               DECISION1="1"
1066803               DECISION2="0"
1066804               ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
1066805      format   COUNT 10.
1066806               ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
1066807    DepVar="1"; COUNT=359; DATAPRIOR=0.0643642072; TRAINPRIOR=0.15122156697556;
1066807  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.0643642072;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
1066808    output;
MPRINT(EM_DIAGRAM):   output;
1066809    DepVar="0"; COUNT=2015; DATAPRIOR=0.9356357928; TRAINPRIOR=0.84877843302443;
1066809  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.9356357928;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
1066810    output;
MPRINT(EM_DIAGRAM):   output;
1066811    ;
MPRINT(EM_DIAGRAM):   ;
1066812    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1066813    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1066814    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
1066815    label DECISION1= '1';
1066816    label DECISION2= '0';
1066817    run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
1066818    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1066819    data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
1066820    set EMWS8.BINNING_TRAIN(keep=
1066821    DepVar GRP_AcceptedCmp5 GRP_AcceptedCmpTotal GRP_Frq GRP_Income GRP_Mnt
1066822    GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntSweetProducts
1066823    GRP_MntWines GRP_NumCatalogPurchases GRP_NumDistPurchases GRP_NumWebPurchases
1066824    GRP_NumWebVisitsMonth GRP_RFMstat GRP_RMntFrq GRP_Recency Year_Birth );
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_TRAIN(keep= DepVar GRP_AcceptedCmp5
GRP_AcceptedCmpTotal GRP_Frq GRP_Income GRP_Mnt GRP_MntFishProducts GRP_MntGoldProds
GRP_MntMeatProducts GRP_MntSweetProducts GRP_MntWines GRP_NumCatalogPurchases
GRP_NumDistPurchases GRP_NumWebPurchases GRP_NumWebVisitsMonth GRP_RFMstat GRP_RMntFrq
GRP_Recency Year_Birth );
1066825    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg3: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1066826    *------------------------------------------------------------* ;
1066827    * Reg3: DMDBClass Macro ;
1066828    *------------------------------------------------------------* ;
1066829    %macro DMDBClass;
1066830        DepVar(DESC) GRP_AcceptedCmp5(ASC) GRP_AcceptedCmpTotal(ASC) GRP_Frq(ASC)
1066831       GRP_Income(ASC) GRP_Mnt(ASC) GRP_MntFishProducts(ASC) GRP_MntGoldProds(ASC)
1066832       GRP_MntMeatProducts(ASC) GRP_MntSweetProducts(ASC) GRP_MntWines(ASC)
1066833       GRP_NumCatalogPurchases(ASC) GRP_NumDistPurchases(ASC) GRP_NumWebPurchases(ASC)
1066834       GRP_NumWebVisitsMonth(ASC) GRP_RFMstat(ASC) GRP_RMntFrq(ASC) GRP_Recency(ASC)
1066835    %mend DMDBClass;
1066836    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1066837    * Reg3: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg3: DMDBVar Macro ;
1066838    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1066839    %macro DMDBVar;
1066840        Year_Birth
1066841    %mend DMDBVar;
1066842    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1066843    * Reg3: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg3: Create DMDB;
1066844    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1066845    proc dmdb batch data=WORK.EM_DMREG
1066846    dmdbcat=WORK.Reg3_DMDB
1066847    maxlevel = 513
1066848    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg3_DMDB maxlevel = 513
;
MPRINT(EM_DIAGRAM):   class
1066849    class %DMDBClass;
MPRINT(DMDBCLASS):   DepVar(DESC) GRP_AcceptedCmp5(ASC) GRP_AcceptedCmpTotal(ASC) GRP_Frq(ASC)
GRP_Income(ASC) GRP_Mnt(ASC) GRP_MntFishProducts(ASC) GRP_MntGoldProds(ASC)
GRP_MntMeatProducts(ASC) GRP_MntSweetProducts(ASC) GRP_MntWines(ASC)
GRP_NumCatalogPurchases(ASC) GRP_NumDistPurchases(ASC) GRP_NumWebPurchases(ASC)
GRP_NumWebVisitsMonth(ASC) GRP_RFMstat(ASC) GRP_RMntFrq(ASC) GRP_Recency(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
1066850    var %DMDBVar;
MPRINT(DMDBVAR):   Year_Birth
MPRINT(EM_DIAGRAM):  ;
1066851    target
1066852    DepVar
1066853    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
1066854    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
1066855    quit;
1066856    *--- end code ---*;
 
1066857    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1066858    * Reg3: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg3: Run DMREG procedure;
1066859    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1066860    proc dmreg data=EM_DMREG dmdbcat=WORK.Reg3_DMDB
1066861    validata = EMWS8.BINNING_VALIDATE
1066862    outest = EMWS8.Reg3_EMESTIMATE
1066863    outterms = EMWS8.Reg3_OUTTERMS
1066864    outmap= EMWS8.Reg3_MAPDS namelen=200
1066865    ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg3_DMDB validata =
EMWS8.BINNING_VALIDATE outest = EMWS8.Reg3_EMESTIMATE outterms = EMWS8.Reg3_OUTTERMS outmap=
EMWS8.Reg3_MAPDS namelen=200 ;
1066866    class
1066867    DepVar
1066868    GRP_AcceptedCmp5
1066869    GRP_AcceptedCmpTotal
1066870    GRP_Frq
1066871    GRP_Income
1066872    GRP_Mnt
1066873    GRP_MntFishProducts
1066874    GRP_MntGoldProds
1066875    GRP_MntMeatProducts
1066876    GRP_MntSweetProducts
1066877    GRP_MntWines
1066878    GRP_NumCatalogPurchases
1066879    GRP_NumDistPurchases
1066880    GRP_NumWebPurchases
1066881    GRP_NumWebVisitsMonth
1066882    GRP_RFMstat
1066883    GRP_RMntFrq
1066884    GRP_Recency
1066885    ;
MPRINT(EM_DIAGRAM):   class DepVar GRP_AcceptedCmp5 GRP_AcceptedCmpTotal GRP_Frq GRP_Income
GRP_Mnt GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntSweetProducts
GRP_MntWines GRP_NumCatalogPurchases GRP_NumDistPurchases GRP_NumWebPurchases
GRP_NumWebVisitsMonth GRP_RFMstat GRP_RMntFrq GRP_Recency ;
1066886    model DepVar =
1066887    GRP_AcceptedCmp5
1066888    GRP_AcceptedCmpTotal
1066889    GRP_Frq
1066890    GRP_Income
1066891    GRP_Mnt
1066892    GRP_MntFishProducts
1066893    GRP_MntGoldProds
1066894    GRP_MntMeatProducts
1066895    GRP_MntSweetProducts
1066896    GRP_MntWines
1066897    GRP_NumCatalogPurchases
1066898    GRP_NumDistPurchases
1066899    GRP_NumWebPurchases
1066900    GRP_NumWebVisitsMonth
1066901    GRP_RFMstat
1066902    GRP_RMntFrq
1066903    GRP_Recency
1066904    Year_Birth
1066905    /error=binomial link=LOGIT
1066906    coding=DEVIATION
1066907    nodesignprint
1066908    selection=STEPWISE choose=NONE
1066909    Hierarchy=CLASS
1066910    Rule=NONE
1066911    ;
MPRINT(EM_DIAGRAM):   model DepVar = GRP_AcceptedCmp5 GRP_AcceptedCmpTotal GRP_Frq GRP_Income
GRP_Mnt GRP_MntFishProducts GRP_MntGoldProds GRP_MntMeatProducts GRP_MntSweetProducts
GRP_MntWines GRP_NumCatalogPurchases GRP_NumDistPurchases GRP_NumWebPurchases
GRP_NumWebVisitsMonth GRP_RFMstat GRP_RMntFrq GRP_Recency Year_Birth /error=binomial
link=LOGIT coding=DEVIATION nodesignprint selection=STEPWISE choose=NONE Hierarchy=CLASS
Rule=NONE ;
1066912    ;
MPRINT(EM_DIAGRAM):   ;
1066913    code file="C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMPUBLISHSCORE.sas"
1066914    group=Reg3
1066915    ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMPUBLISHSCORE.sas" group=Reg3 ;
1066916    code file="C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas"
1066917    group=Reg3
1066918    residual
1066919    ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas" group=Reg3 residual
;
1066920    run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that DepVar='1'.
NOTE: Convergence criterion (ABSGCONV=0.00001) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMPUBLISHSCORE.sas
      opened.
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas opened.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           1.40 seconds
      cpu time            1.35 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           1.44 seconds
      cpu time            1.41 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1018 observations read from the data set EMWS8.BINNING_VALIDATE.
NOTE: The data set EMWS8.REG3_EMESTIMATE has 48 observations and 165 variables.
NOTE: The data set EMWS8.REG3_OUTTERMS has 85 observations and 6 variables.
NOTE: The data set EMWS8.REG3_MAPDS has 2 observations and 130 variables.
NOTE: The PROCEDURE DMREG printed pages 747-762.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           1.47 seconds
      cpu time            1.43 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1066921    quit;
 
1066922    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
1066923    delete Reg3_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg3_DMDB;
1066924    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG3_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
1066925    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1066926    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
1066927    delete Reg3_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg3_DMDB / memtype=catalog;
1066928    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG3_DMDB (memtype=CATALOG).
1066929    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
1066930    data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
1066931    length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
1066932    set EMWS8.Reg3_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMESTIMATE;
1066933    drop _AIC_--_VMISC_;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VMISC_;
1066934    where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
1066935    drop _STEP_ _CHOSEN_;
MPRINT(EM_DIAGRAM):   drop _STEP_ _CHOSEN_;
1066936    select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
1066937    when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
1066938    when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
1066939    when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
1066940    otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
1066941    end;
MPRINT(EM_DIAGRAM):   end;
1066942    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.REG3_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 131 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1066943    proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE
out=WORK.ESTIMATE(rename=(_NAME_=Effect));
1066944    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 129 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1066945    proc transpose data=EMWS8.Reg3_MAPDS out=WORK.MAP(rename=(_NAME_=Effect
1066945  ! INPUT=Variable
1066946    ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg3_MAPDS out=WORK.MAP(rename=(_NAME_=Effect
INPUT=Variable ));
1066947    var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
MPRINT(EM_DIAGRAM):   var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
1066948    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG3_MAPDS.
NOTE: The data set WORK.MAP has 128 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1066949    proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
1066950    by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
1066951    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 128 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1066952    proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
1066953    by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
1066954    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 129 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 129 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1066955    data EMWS8.Reg3_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EFFECTS(rename=(_LABEL_=EffectLabel));
1066956    length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
1066957    merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
1066958    by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
1066959    label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))"
1066959  ! Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign =
1066959  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
1066960       "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient =
1066960  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient =
1066960  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
1066961       "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE =
1066961  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel =
"Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect
Label" CODE = "Score Code Variable";
1066962    label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))"
1066962  !  abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
1066962  ! PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P
Value";
1066963    abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
1066964    if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
1066965    variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
1066966    classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
1066967    end;
MPRINT(EM_DIAGRAM):   end;
1066968    if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
1066969    if length(effect)>length(variable) then classlevel = substr(Effect,
1066969  ! length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect,
length(variable)+1);
1066970    end;
MPRINT(EM_DIAGRAM):   end;
1066971    if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
1066972    if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
1066973    else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
1066974    abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
1066975    if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
1066976    if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
1066977    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      44 at 1066963:13   44 at 1066974:18
NOTE: There were 129 observations read from the data set WORK.ESTIMATE.
NOTE: There were 128 observations read from the data set WORK.MAP.
NOTE: The data set EMWS8.REG3_EFFECTS has 85 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1066978    proc sort data =EMWS8.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS8.Reg3_EFFECTS;
1066979    by
1066980    descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
1066981    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 85 observations read from the data set EMWS8.REG3_EFFECTS.
NOTE: The data set EMWS8.REG3_EFFECTS has 85 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1066982    data EMWS8.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EFFECTS;
1066983    set EMWS8.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EFFECTS;
1066984    format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
1066985    label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))"
1066985  ! ;
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
1066986    retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
1066987    TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
1066988    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 85 observations read from the data set EMWS8.REG3_EFFECTS.
NOTE: The data set EMWS8.REG3_EFFECTS has 85 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1066989    proc sort data =EMWS8.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS8.Reg3_EFFECTS;
1066990    by
1066991    descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
1066992    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 85 observations read from the data set EMWS8.REG3_EFFECTS.
NOTE: The data set EMWS8.REG3_EFFECTS has 85 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1066993    data EMWS8.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EFFECTS;
1066994    set EMWS8.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EFFECTS;
1066995    format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
1066996    label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
1066997    retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
1066998    EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
1066999    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 85 observations read from the data set EMWS8.REG3_EFFECTS.
NOTE: The data set EMWS8.REG3_EFFECTS has 85 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1067000    proc transpose data=EMWS8.Reg3_EMESTIMATE
1067000  ! out=EMWS8.Reg3_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect
1067000  ! _LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg3_EMESTIMATE
out=EMWS8.Reg3_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect
_LABEL_=EffectLabel));
1067001    where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
1067002    var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
MPRINT(EM_DIAGRAM):   var 'GRP_AcceptedCmp52'n--'Year_Birth'n;
1067003    by _STEP_;
MPRINT(EM_DIAGRAM):   by _STEP_;
1067004    id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
1067005    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set EMWS8.REG3_EMESTIMATE.
      WHERE (_CHOSEN_=' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set EMWS8.REG3_ESTIMATEGRID has 1920 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1067006    data EMWS8.Reg3_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_ESTIMATEGRID;
1067007    set EMWS8.Reg3_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_ESTIMATEGRID;
1067008    if EffectLabel eq '' then EffectLabel = Effect;
MPRINT(EM_DIAGRAM):   if EffectLabel eq '' then EffectLabel = Effect;
1067009    label EffectLabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel,
1067009  ! NOQUOTE))" Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))"
1067009  ! Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel,
1067009  ! NOQUOTE))"
1067010       Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))"
1067010  ! tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))"
1067010  ! abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
1067010  ! PValue =
1067011       "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectLabel = "Effect Label" Effect = "Effect" Abscoefficient =
"Absolute Coefficient" Coefficient = "Coefficient" tvalue = "T-value" abstvalue = "Absolute
T-value" PValue = "P Value";
1067012    AbsCoefficient = abs(Coefficient);
MPRINT(EM_DIAGRAM):   AbsCoefficient = abs(Coefficient);
1067013    AbsTValue = abs(TValue);
MPRINT(EM_DIAGRAM):   AbsTValue = abs(TValue);
1067014    where coefficient ne .;
MPRINT(EM_DIAGRAM):   where coefficient ne .;
1067015    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable PValue is uninitialized.
NOTE: There were 635 observations read from the data set EMWS8.REG3_ESTIMATEGRID.
      WHERE coefficient not = .;
NOTE: The data set EMWS8.REG3_ESTIMATEGRID has 635 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.42 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                16.42 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0G53CAQ
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0G53CAQ new;
MPRINT(EM_DIAGRAM):   run;
1067117    proc transpose data=EMWS8.Reg3_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg3_EMESTIMATE out=WORK.TEMPREG;
1067118    where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
1067119    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG3_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 162 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1067120    proc transpose data=EMWS8.Reg3_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg3_MAPDS out=WORK.TEMPREG2;
1067121    var "GRP_AcceptedCmp52"n--"Year_Birth"n;
MPRINT(EM_DIAGRAM):   var "GRP_AcceptedCmp52"n--"Year_Birth"n;
1067122    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG3_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 128 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1067123    proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
1067124    by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
1067125    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 162 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 162 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1067126    proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
1067127    by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
1067128    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 128 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 128 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1067129    data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
1067130    merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
1067131    by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
1067132    if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
1067133    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 162 observations read from the data set WORK.TEMPREG.
NOTE: There were 128 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 84 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1067134    data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
1067135    length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
1067136    set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
1067137    i=1;
MPRINT(EM_DIAGRAM):   i=1;
1067138    do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
1067139    term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
1067140    i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
1067141    output;
MPRINT(EM_DIAGRAM):   output;
1067142    end;
MPRINT(EM_DIAGRAM):   end;
1067143    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 84 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 84 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1067144    proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
1067145    by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
1067146    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 84 observations read from the data set WORK.TEMPREG3.
NOTE: 72 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 12 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1067147    filename emflow
1067147  ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1067148    *------------------------------------------------------------*;
1067149    * Reg3: Scoring DATA data;
1067150    *------------------------------------------------------------*;
1067151    data EMWS8.Reg3_TRAIN
1067152    / view=EMWS8.Reg3_TRAIN
1067153    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_TRAIN / view=EMWS8.Reg3_TRAIN ;
1067154    set EMWS8.BINNING_TRAIN
1067155    ;
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_TRAIN ;
1067156    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas.
1067157   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1067158   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
1067159   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1067160   +
1067161   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1067162   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
1067163   +
1067164   +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
1067165   +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1067166   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
1067167   +array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
1067168   +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1067169   +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
1067170   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
1067171   +ARRAY REG3DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
1067172   +
1067173   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1067174   +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
1067175   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1067176   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1067177   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1067178   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067179   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1067180   +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1067181   +end;
MPRINT(EM_DIAGRAM):   end;
1067182   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067183   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1067184   +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
1067185   +   end;
MPRINT(EM_DIAGRAM):   end;
1067186   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1067187   +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
1067188   +   end;
MPRINT(EM_DIAGRAM):   end;
1067189   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067190   +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1067191   +   end;
MPRINT(EM_DIAGRAM):   end;
1067192   +end;
MPRINT(EM_DIAGRAM):   end;
1067193   +
1067194   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
1067195   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
1067196   +
1067197   +*** Generate dummy variables for GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmp5 ;
1067198   +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
1067199   +if missing( GRP_AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmp5 ) then do;
1067200   +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
1067201   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067202   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067203   +end;
MPRINT(EM_DIAGRAM):   end;
1067204   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067205   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067206   +   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
1067207   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067208   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1067209   +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
1067210   +   end;
MPRINT(EM_DIAGRAM):   end;
1067211   +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
1067212   +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
1067213   +   end;
MPRINT(EM_DIAGRAM):   end;
1067214   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067215   +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
1067216   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067217   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067218   +   end;
MPRINT(EM_DIAGRAM):   end;
1067219   +end;
MPRINT(EM_DIAGRAM):   end;
1067220   +
1067221   +*** Generate dummy variables for GRP_AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmpTotal ;
1067222   +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
1067223   +if missing( GRP_AcceptedCmpTotal ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmpTotal ) then do;
1067224   +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
1067225   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067226   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067227   +end;
MPRINT(EM_DIAGRAM):   end;
1067228   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067229   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067230   +   _dm12 = put( GRP_AcceptedCmpTotal , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmpTotal , BEST12. );
1067231   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067232   +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067233   +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
1067234   +   end;
MPRINT(EM_DIAGRAM):   end;
1067235   +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
1067236   +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
1067237   +   end;
MPRINT(EM_DIAGRAM):   end;
1067238   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067239   +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
1067240   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067241   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067242   +   end;
MPRINT(EM_DIAGRAM):   end;
1067243   +end;
MPRINT(EM_DIAGRAM):   end;
1067244   +
1067245   +*** Generate dummy variables for GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Frq ;
1067246   +drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 ;
1067247   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1067248   +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
1067249   +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
1067250   +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
1067251   +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
1067252   +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
1067253   +_3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
1067254   +_3_6 = 0;
MPRINT(EM_DIAGRAM):   _3_6 = 0;
1067255   +_3_7 = 0;
MPRINT(EM_DIAGRAM):   _3_7 = 0;
1067256   +_3_8 = 0;
MPRINT(EM_DIAGRAM):   _3_8 = 0;
1067257   +if missing( GRP_Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Frq ) then do;
1067258   +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
1067259   +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
1067260   +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
1067261   +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
1067262   +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
1067263   +   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
1067264   +   _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
1067265   +   _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
1067266   +   _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
1067267   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067268   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067269   +end;
MPRINT(EM_DIAGRAM):   end;
1067270   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067271   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067272   +   _dm12 = put( GRP_Frq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Frq , BEST12. );
1067273   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067274   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1067275   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1067276   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1067277   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1067278   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1067279   +               _3_8 = 1;
MPRINT(EM_DIAGRAM):   _3_8 = 1;
1067280   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067281   +            end;
MPRINT(EM_DIAGRAM):   end;
1067282   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067283   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1067284   +                  _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
1067285   +                  _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
1067286   +                  _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
1067287   +                  _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
1067288   +                  _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
1067289   +                  _3_5 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
1067290   +                  _3_6 = -1;
MPRINT(EM_DIAGRAM):   _3_6 = -1;
1067291   +                  _3_7 = -1;
MPRINT(EM_DIAGRAM):   _3_7 = -1;
1067292   +                  _3_8 = -1;
MPRINT(EM_DIAGRAM):   _3_8 = -1;
1067293   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067294   +               end;
MPRINT(EM_DIAGRAM):   end;
1067295   +            end;
MPRINT(EM_DIAGRAM):   end;
1067296   +         end;
MPRINT(EM_DIAGRAM):   end;
1067297   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067298   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1067299   +               _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
1067300   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067301   +            end;
MPRINT(EM_DIAGRAM):   end;
1067302   +         end;
MPRINT(EM_DIAGRAM):   end;
1067303   +      end;
MPRINT(EM_DIAGRAM):   end;
1067304   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067305   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067306   +            _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
1067307   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067308   +         end;
MPRINT(EM_DIAGRAM):   end;
1067309   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067310   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1067311   +               _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
1067312   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067313   +            end;
MPRINT(EM_DIAGRAM):   end;
1067314   +         end;
MPRINT(EM_DIAGRAM):   end;
1067315   +      end;
MPRINT(EM_DIAGRAM):   end;
1067316   +   end;
MPRINT(EM_DIAGRAM):   end;
1067317   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067318   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1067319   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1067320   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1067321   +               _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
1067322   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067323   +            end;
MPRINT(EM_DIAGRAM):   end;
1067324   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067325   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1067326   +                  _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
1067327   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067328   +               end;
MPRINT(EM_DIAGRAM):   end;
1067329   +            end;
MPRINT(EM_DIAGRAM):   end;
1067330   +         end;
MPRINT(EM_DIAGRAM):   end;
1067331   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067332   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1067333   +               _3_5 = 1;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
1067334   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067335   +            end;
MPRINT(EM_DIAGRAM):   end;
1067336   +         end;
MPRINT(EM_DIAGRAM):   end;
1067337   +      end;
MPRINT(EM_DIAGRAM):   end;
1067338   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067339   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1067340   +            _3_6 = 1;
MPRINT(EM_DIAGRAM):   _3_6 = 1;
1067341   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067342   +         end;
MPRINT(EM_DIAGRAM):   end;
1067343   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067344   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1067345   +               _3_7 = 1;
MPRINT(EM_DIAGRAM):   _3_7 = 1;
1067346   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067347   +            end;
MPRINT(EM_DIAGRAM):   end;
1067348   +         end;
MPRINT(EM_DIAGRAM):   end;
1067349   +      end;
MPRINT(EM_DIAGRAM):   end;
1067350   +   end;
MPRINT(EM_DIAGRAM):   end;
1067351   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1067352   +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
1067353   +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
1067354   +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
1067355   +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
1067356   +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
1067357   +      _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
1067358   +      _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
1067359   +      _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
1067360   +      _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
1067361   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067362   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067363   +   end;
MPRINT(EM_DIAGRAM):   end;
1067364   +end;
MPRINT(EM_DIAGRAM):   end;
1067365   +
1067366   +*** Generate dummy variables for GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Income ;
1067367   +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 ;
1067368   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1067369   +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
1067370   +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
1067371   +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
1067372   +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
1067373   +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
1067374   +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
1067375   +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
1067376   +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
1067377   +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
1067378   +if missing( GRP_Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Income ) then do;
1067379   +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
1067380   +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
1067381   +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
1067382   +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
1067383   +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
1067384   +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
1067385   +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
1067386   +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
1067387   +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
1067388   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067389   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067390   +end;
MPRINT(EM_DIAGRAM):   end;
1067391   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067392   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067393   +   _dm12 = put( GRP_Income , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Income , BEST12. );
1067394   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067395   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1067396   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1067397   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1067398   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1067399   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1067400   +               _4_8 = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
1067401   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067402   +            end;
MPRINT(EM_DIAGRAM):   end;
1067403   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067404   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1067405   +                  _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
1067406   +                  _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
1067407   +                  _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
1067408   +                  _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
1067409   +                  _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
1067410   +                  _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
1067411   +                  _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
1067412   +                  _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
1067413   +                  _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
1067414   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067415   +               end;
MPRINT(EM_DIAGRAM):   end;
1067416   +            end;
MPRINT(EM_DIAGRAM):   end;
1067417   +         end;
MPRINT(EM_DIAGRAM):   end;
1067418   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067419   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1067420   +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
1067421   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067422   +            end;
MPRINT(EM_DIAGRAM):   end;
1067423   +         end;
MPRINT(EM_DIAGRAM):   end;
1067424   +      end;
MPRINT(EM_DIAGRAM):   end;
1067425   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067426   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067427   +            _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
1067428   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067429   +         end;
MPRINT(EM_DIAGRAM):   end;
1067430   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067431   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1067432   +               _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
1067433   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067434   +            end;
MPRINT(EM_DIAGRAM):   end;
1067435   +         end;
MPRINT(EM_DIAGRAM):   end;
1067436   +      end;
MPRINT(EM_DIAGRAM):   end;
1067437   +   end;
MPRINT(EM_DIAGRAM):   end;
1067438   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067439   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1067440   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1067441   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1067442   +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
1067443   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067444   +            end;
MPRINT(EM_DIAGRAM):   end;
1067445   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067446   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1067447   +                  _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
1067448   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067449   +               end;
MPRINT(EM_DIAGRAM):   end;
1067450   +            end;
MPRINT(EM_DIAGRAM):   end;
1067451   +         end;
MPRINT(EM_DIAGRAM):   end;
1067452   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067453   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1067454   +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
1067455   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067456   +            end;
MPRINT(EM_DIAGRAM):   end;
1067457   +         end;
MPRINT(EM_DIAGRAM):   end;
1067458   +      end;
MPRINT(EM_DIAGRAM):   end;
1067459   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067460   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1067461   +            _4_6 = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
1067462   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067463   +         end;
MPRINT(EM_DIAGRAM):   end;
1067464   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067465   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1067466   +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
1067467   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067468   +            end;
MPRINT(EM_DIAGRAM):   end;
1067469   +         end;
MPRINT(EM_DIAGRAM):   end;
1067470   +      end;
MPRINT(EM_DIAGRAM):   end;
1067471   +   end;
MPRINT(EM_DIAGRAM):   end;
1067472   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1067473   +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
1067474   +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
1067475   +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
1067476   +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
1067477   +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
1067478   +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
1067479   +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
1067480   +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
1067481   +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
1067482   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067483   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067484   +   end;
MPRINT(EM_DIAGRAM):   end;
1067485   +end;
MPRINT(EM_DIAGRAM):   end;
1067486   +
1067487   +*** Generate dummy variables for GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntFishProducts ;
1067488   +drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 ;
1067489   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1067490   +_6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
1067491   +_6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
1067492   +_6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
1067493   +_6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
1067494   +_6_4 = 0;
MPRINT(EM_DIAGRAM):   _6_4 = 0;
1067495   +_6_5 = 0;
MPRINT(EM_DIAGRAM):   _6_5 = 0;
1067496   +_6_6 = 0;
MPRINT(EM_DIAGRAM):   _6_6 = 0;
1067497   +_6_7 = 0;
MPRINT(EM_DIAGRAM):   _6_7 = 0;
1067498   +if missing( GRP_MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntFishProducts ) then do;
1067499   +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
1067500   +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
1067501   +   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
1067502   +   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
1067503   +   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
1067504   +   _6_5 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
1067505   +   _6_6 = .;
MPRINT(EM_DIAGRAM):   _6_6 = .;
1067506   +   _6_7 = .;
MPRINT(EM_DIAGRAM):   _6_7 = .;
1067507   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067508   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067509   +end;
MPRINT(EM_DIAGRAM):   end;
1067510   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067511   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067512   +   _dm12 = put( GRP_MntFishProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntFishProducts , BEST12. );
1067513   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067514   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1067515   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1067516   +      if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
1067517   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1067518   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1067519   +               _6_7 = 1;
MPRINT(EM_DIAGRAM):   _6_7 = 1;
1067520   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067521   +            end;
MPRINT(EM_DIAGRAM):   end;
1067522   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067523   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1067524   +                  _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
1067525   +                  _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
1067526   +                  _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
1067527   +                  _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
1067528   +                  _6_4 = -1;
MPRINT(EM_DIAGRAM):   _6_4 = -1;
1067529   +                  _6_5 = -1;
MPRINT(EM_DIAGRAM):   _6_5 = -1;
1067530   +                  _6_6 = -1;
MPRINT(EM_DIAGRAM):   _6_6 = -1;
1067531   +                  _6_7 = -1;
MPRINT(EM_DIAGRAM):   _6_7 = -1;
1067532   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067533   +               end;
MPRINT(EM_DIAGRAM):   end;
1067534   +            end;
MPRINT(EM_DIAGRAM):   end;
1067535   +         end;
MPRINT(EM_DIAGRAM):   end;
1067536   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067537   +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067538   +               _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
1067539   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067540   +            end;
MPRINT(EM_DIAGRAM):   end;
1067541   +         end;
MPRINT(EM_DIAGRAM):   end;
1067542   +      end;
MPRINT(EM_DIAGRAM):   end;
1067543   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067544   +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1067545   +            _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
1067546   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067547   +         end;
MPRINT(EM_DIAGRAM):   end;
1067548   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067549   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1067550   +               _6_2 = 1;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
1067551   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067552   +            end;
MPRINT(EM_DIAGRAM):   end;
1067553   +         end;
MPRINT(EM_DIAGRAM):   end;
1067554   +      end;
MPRINT(EM_DIAGRAM):   end;
1067555   +   end;
MPRINT(EM_DIAGRAM):   end;
1067556   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067557   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1067558   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1067559   +            _6_3 = 1;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
1067560   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067561   +         end;
MPRINT(EM_DIAGRAM):   end;
1067562   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067563   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1067564   +               _6_4 = 1;
MPRINT(EM_DIAGRAM):   _6_4 = 1;
1067565   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067566   +            end;
MPRINT(EM_DIAGRAM):   end;
1067567   +         end;
MPRINT(EM_DIAGRAM):   end;
1067568   +      end;
MPRINT(EM_DIAGRAM):   end;
1067569   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067570   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1067571   +            _6_5 = 1;
MPRINT(EM_DIAGRAM):   _6_5 = 1;
1067572   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067573   +         end;
MPRINT(EM_DIAGRAM):   end;
1067574   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067575   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1067576   +               _6_6 = 1;
MPRINT(EM_DIAGRAM):   _6_6 = 1;
1067577   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067578   +            end;
MPRINT(EM_DIAGRAM):   end;
1067579   +         end;
MPRINT(EM_DIAGRAM):   end;
1067580   +      end;
MPRINT(EM_DIAGRAM):   end;
1067581   +   end;
MPRINT(EM_DIAGRAM):   end;
1067582   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1067583   +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
1067584   +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
1067585   +      _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
1067586   +      _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
1067587   +      _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
1067588   +      _6_5 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
1067589   +      _6_6 = .;
MPRINT(EM_DIAGRAM):   _6_6 = .;
1067590   +      _6_7 = .;
MPRINT(EM_DIAGRAM):   _6_7 = .;
1067591   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067592   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067593   +   end;
MPRINT(EM_DIAGRAM):   end;
1067594   +end;
MPRINT(EM_DIAGRAM):   end;
1067595   +
1067596   +*** Generate dummy variables for GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntMeatProducts ;
1067597   +drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 ;
1067598   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1067599   +_8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
1067600   +_8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
1067601   +_8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
1067602   +_8_3 = 0;
MPRINT(EM_DIAGRAM):   _8_3 = 0;
1067603   +_8_4 = 0;
MPRINT(EM_DIAGRAM):   _8_4 = 0;
1067604   +_8_5 = 0;
MPRINT(EM_DIAGRAM):   _8_5 = 0;
1067605   +_8_6 = 0;
MPRINT(EM_DIAGRAM):   _8_6 = 0;
1067606   +_8_7 = 0;
MPRINT(EM_DIAGRAM):   _8_7 = 0;
1067607   +_8_8 = 0;
MPRINT(EM_DIAGRAM):   _8_8 = 0;
1067608   +if missing( GRP_MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntMeatProducts ) then do;
1067609   +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
1067610   +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
1067611   +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
1067612   +   _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
1067613   +   _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
1067614   +   _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
1067615   +   _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
1067616   +   _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
1067617   +   _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
1067618   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067619   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067620   +end;
MPRINT(EM_DIAGRAM):   end;
1067621   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067622   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067623   +   _dm12 = put( GRP_MntMeatProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntMeatProducts , BEST12. );
1067624   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067625   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1067626   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1067627   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1067628   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1067629   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1067630   +               _8_8 = 1;
MPRINT(EM_DIAGRAM):   _8_8 = 1;
1067631   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067632   +            end;
MPRINT(EM_DIAGRAM):   end;
1067633   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067634   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1067635   +                  _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
1067636   +                  _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
1067637   +                  _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
1067638   +                  _8_3 = -1;
MPRINT(EM_DIAGRAM):   _8_3 = -1;
1067639   +                  _8_4 = -1;
MPRINT(EM_DIAGRAM):   _8_4 = -1;
1067640   +                  _8_5 = -1;
MPRINT(EM_DIAGRAM):   _8_5 = -1;
1067641   +                  _8_6 = -1;
MPRINT(EM_DIAGRAM):   _8_6 = -1;
1067642   +                  _8_7 = -1;
MPRINT(EM_DIAGRAM):   _8_7 = -1;
1067643   +                  _8_8 = -1;
MPRINT(EM_DIAGRAM):   _8_8 = -1;
1067644   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067645   +               end;
MPRINT(EM_DIAGRAM):   end;
1067646   +            end;
MPRINT(EM_DIAGRAM):   end;
1067647   +         end;
MPRINT(EM_DIAGRAM):   end;
1067648   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067649   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1067650   +               _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
1067651   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067652   +            end;
MPRINT(EM_DIAGRAM):   end;
1067653   +         end;
MPRINT(EM_DIAGRAM):   end;
1067654   +      end;
MPRINT(EM_DIAGRAM):   end;
1067655   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067656   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067657   +            _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
1067658   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067659   +         end;
MPRINT(EM_DIAGRAM):   end;
1067660   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067661   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1067662   +               _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
1067663   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067664   +            end;
MPRINT(EM_DIAGRAM):   end;
1067665   +         end;
MPRINT(EM_DIAGRAM):   end;
1067666   +      end;
MPRINT(EM_DIAGRAM):   end;
1067667   +   end;
MPRINT(EM_DIAGRAM):   end;
1067668   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067669   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1067670   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1067671   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1067672   +               _8_3 = 1;
MPRINT(EM_DIAGRAM):   _8_3 = 1;
1067673   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067674   +            end;
MPRINT(EM_DIAGRAM):   end;
1067675   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067676   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1067677   +                  _8_4 = 1;
MPRINT(EM_DIAGRAM):   _8_4 = 1;
1067678   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067679   +               end;
MPRINT(EM_DIAGRAM):   end;
1067680   +            end;
MPRINT(EM_DIAGRAM):   end;
1067681   +         end;
MPRINT(EM_DIAGRAM):   end;
1067682   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067683   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1067684   +               _8_5 = 1;
MPRINT(EM_DIAGRAM):   _8_5 = 1;
1067685   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067686   +            end;
MPRINT(EM_DIAGRAM):   end;
1067687   +         end;
MPRINT(EM_DIAGRAM):   end;
1067688   +      end;
MPRINT(EM_DIAGRAM):   end;
1067689   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067690   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1067691   +            _8_6 = 1;
MPRINT(EM_DIAGRAM):   _8_6 = 1;
1067692   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067693   +         end;
MPRINT(EM_DIAGRAM):   end;
1067694   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067695   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1067696   +               _8_7 = 1;
MPRINT(EM_DIAGRAM):   _8_7 = 1;
1067697   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067698   +            end;
MPRINT(EM_DIAGRAM):   end;
1067699   +         end;
MPRINT(EM_DIAGRAM):   end;
1067700   +      end;
MPRINT(EM_DIAGRAM):   end;
1067701   +   end;
MPRINT(EM_DIAGRAM):   end;
1067702   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1067703   +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
1067704   +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
1067705   +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
1067706   +      _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
1067707   +      _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
1067708   +      _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
1067709   +      _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
1067710   +      _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
1067711   +      _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
1067712   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067713   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067714   +   end;
MPRINT(EM_DIAGRAM):   end;
1067715   +end;
MPRINT(EM_DIAGRAM):   end;
1067716   +
1067717   +*** Generate dummy variables for GRP_MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntSweetProducts ;
1067718   +drop _9_0 _9_1 _9_2 _9_3 _9_4 _9_5 _9_6 _9_7 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 _9_4 _9_5 _9_6 _9_7 ;
1067719   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1067720   +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
1067721   +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
1067722   +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
1067723   +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
1067724   +_9_4 = 0;
MPRINT(EM_DIAGRAM):   _9_4 = 0;
1067725   +_9_5 = 0;
MPRINT(EM_DIAGRAM):   _9_5 = 0;
1067726   +_9_6 = 0;
MPRINT(EM_DIAGRAM):   _9_6 = 0;
1067727   +_9_7 = 0;
MPRINT(EM_DIAGRAM):   _9_7 = 0;
1067728   +if missing( GRP_MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntSweetProducts ) then do;
1067729   +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
1067730   +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
1067731   +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
1067732   +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
1067733   +   _9_4 = .;
MPRINT(EM_DIAGRAM):   _9_4 = .;
1067734   +   _9_5 = .;
MPRINT(EM_DIAGRAM):   _9_5 = .;
1067735   +   _9_6 = .;
MPRINT(EM_DIAGRAM):   _9_6 = .;
1067736   +   _9_7 = .;
MPRINT(EM_DIAGRAM):   _9_7 = .;
1067737   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067738   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067739   +end;
MPRINT(EM_DIAGRAM):   end;
1067740   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067741   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067742   +   _dm12 = put( GRP_MntSweetProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntSweetProducts , BEST12. );
1067743   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067744   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1067745   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1067746   +      if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
1067747   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1067748   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1067749   +               _9_7 = 1;
MPRINT(EM_DIAGRAM):   _9_7 = 1;
1067750   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067751   +            end;
MPRINT(EM_DIAGRAM):   end;
1067752   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067753   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1067754   +                  _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
1067755   +                  _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
1067756   +                  _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
1067757   +                  _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
1067758   +                  _9_4 = -1;
MPRINT(EM_DIAGRAM):   _9_4 = -1;
1067759   +                  _9_5 = -1;
MPRINT(EM_DIAGRAM):   _9_5 = -1;
1067760   +                  _9_6 = -1;
MPRINT(EM_DIAGRAM):   _9_6 = -1;
1067761   +                  _9_7 = -1;
MPRINT(EM_DIAGRAM):   _9_7 = -1;
1067762   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067763   +               end;
MPRINT(EM_DIAGRAM):   end;
1067764   +            end;
MPRINT(EM_DIAGRAM):   end;
1067765   +         end;
MPRINT(EM_DIAGRAM):   end;
1067766   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067767   +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067768   +               _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
1067769   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067770   +            end;
MPRINT(EM_DIAGRAM):   end;
1067771   +         end;
MPRINT(EM_DIAGRAM):   end;
1067772   +      end;
MPRINT(EM_DIAGRAM):   end;
1067773   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067774   +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1067775   +            _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
1067776   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067777   +         end;
MPRINT(EM_DIAGRAM):   end;
1067778   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067779   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1067780   +               _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
1067781   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067782   +            end;
MPRINT(EM_DIAGRAM):   end;
1067783   +         end;
MPRINT(EM_DIAGRAM):   end;
1067784   +      end;
MPRINT(EM_DIAGRAM):   end;
1067785   +   end;
MPRINT(EM_DIAGRAM):   end;
1067786   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067787   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1067788   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1067789   +            _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
1067790   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067791   +         end;
MPRINT(EM_DIAGRAM):   end;
1067792   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067793   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1067794   +               _9_4 = 1;
MPRINT(EM_DIAGRAM):   _9_4 = 1;
1067795   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067796   +            end;
MPRINT(EM_DIAGRAM):   end;
1067797   +         end;
MPRINT(EM_DIAGRAM):   end;
1067798   +      end;
MPRINT(EM_DIAGRAM):   end;
1067799   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067800   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1067801   +            _9_5 = 1;
MPRINT(EM_DIAGRAM):   _9_5 = 1;
1067802   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067803   +         end;
MPRINT(EM_DIAGRAM):   end;
1067804   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067805   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1067806   +               _9_6 = 1;
MPRINT(EM_DIAGRAM):   _9_6 = 1;
1067807   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067808   +            end;
MPRINT(EM_DIAGRAM):   end;
1067809   +         end;
MPRINT(EM_DIAGRAM):   end;
1067810   +      end;
MPRINT(EM_DIAGRAM):   end;
1067811   +   end;
MPRINT(EM_DIAGRAM):   end;
1067812   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1067813   +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
1067814   +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
1067815   +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
1067816   +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
1067817   +      _9_4 = .;
MPRINT(EM_DIAGRAM):   _9_4 = .;
1067818   +      _9_5 = .;
MPRINT(EM_DIAGRAM):   _9_5 = .;
1067819   +      _9_6 = .;
MPRINT(EM_DIAGRAM):   _9_6 = .;
1067820   +      _9_7 = .;
MPRINT(EM_DIAGRAM):   _9_7 = .;
1067821   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067822   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067823   +   end;
MPRINT(EM_DIAGRAM):   end;
1067824   +end;
MPRINT(EM_DIAGRAM):   end;
1067825   +
1067826   +*** Generate dummy variables for GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntWines ;
1067827   +drop _10_0 _10_1 _10_2 _10_3 _10_4 _10_5 _10_6 _10_7 _10_8 ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 _10_4 _10_5 _10_6 _10_7 _10_8 ;
1067828   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1067829   +_10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
1067830   +_10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
1067831   +_10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
1067832   +_10_3 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
1067833   +_10_4 = 0;
MPRINT(EM_DIAGRAM):   _10_4 = 0;
1067834   +_10_5 = 0;
MPRINT(EM_DIAGRAM):   _10_5 = 0;
1067835   +_10_6 = 0;
MPRINT(EM_DIAGRAM):   _10_6 = 0;
1067836   +_10_7 = 0;
MPRINT(EM_DIAGRAM):   _10_7 = 0;
1067837   +_10_8 = 0;
MPRINT(EM_DIAGRAM):   _10_8 = 0;
1067838   +if missing( GRP_MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntWines ) then do;
1067839   +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
1067840   +   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
1067841   +   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
1067842   +   _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
1067843   +   _10_4 = .;
MPRINT(EM_DIAGRAM):   _10_4 = .;
1067844   +   _10_5 = .;
MPRINT(EM_DIAGRAM):   _10_5 = .;
1067845   +   _10_6 = .;
MPRINT(EM_DIAGRAM):   _10_6 = .;
1067846   +   _10_7 = .;
MPRINT(EM_DIAGRAM):   _10_7 = .;
1067847   +   _10_8 = .;
MPRINT(EM_DIAGRAM):   _10_8 = .;
1067848   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067849   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067850   +end;
MPRINT(EM_DIAGRAM):   end;
1067851   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067852   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067853   +   _dm12 = put( GRP_MntWines , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntWines , BEST12. );
1067854   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067855   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1067856   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1067857   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1067858   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1067859   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1067860   +               _10_8 = 1;
MPRINT(EM_DIAGRAM):   _10_8 = 1;
1067861   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067862   +            end;
MPRINT(EM_DIAGRAM):   end;
1067863   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067864   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1067865   +                  _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
1067866   +                  _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
1067867   +                  _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
1067868   +                  _10_3 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
1067869   +                  _10_4 = -1;
MPRINT(EM_DIAGRAM):   _10_4 = -1;
1067870   +                  _10_5 = -1;
MPRINT(EM_DIAGRAM):   _10_5 = -1;
1067871   +                  _10_6 = -1;
MPRINT(EM_DIAGRAM):   _10_6 = -1;
1067872   +                  _10_7 = -1;
MPRINT(EM_DIAGRAM):   _10_7 = -1;
1067873   +                  _10_8 = -1;
MPRINT(EM_DIAGRAM):   _10_8 = -1;
1067874   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067875   +               end;
MPRINT(EM_DIAGRAM):   end;
1067876   +            end;
MPRINT(EM_DIAGRAM):   end;
1067877   +         end;
MPRINT(EM_DIAGRAM):   end;
1067878   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067879   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1067880   +               _10_0 = 1;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
1067881   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067882   +            end;
MPRINT(EM_DIAGRAM):   end;
1067883   +         end;
MPRINT(EM_DIAGRAM):   end;
1067884   +      end;
MPRINT(EM_DIAGRAM):   end;
1067885   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067886   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067887   +            _10_1 = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
1067888   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067889   +         end;
MPRINT(EM_DIAGRAM):   end;
1067890   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067891   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1067892   +               _10_2 = 1;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
1067893   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067894   +            end;
MPRINT(EM_DIAGRAM):   end;
1067895   +         end;
MPRINT(EM_DIAGRAM):   end;
1067896   +      end;
MPRINT(EM_DIAGRAM):   end;
1067897   +   end;
MPRINT(EM_DIAGRAM):   end;
1067898   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067899   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1067900   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1067901   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1067902   +               _10_3 = 1;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
1067903   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067904   +            end;
MPRINT(EM_DIAGRAM):   end;
1067905   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1067906   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1067907   +                  _10_4 = 1;
MPRINT(EM_DIAGRAM):   _10_4 = 1;
1067908   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067909   +               end;
MPRINT(EM_DIAGRAM):   end;
1067910   +            end;
MPRINT(EM_DIAGRAM):   end;
1067911   +         end;
MPRINT(EM_DIAGRAM):   end;
1067912   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067913   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1067914   +               _10_5 = 1;
MPRINT(EM_DIAGRAM):   _10_5 = 1;
1067915   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067916   +            end;
MPRINT(EM_DIAGRAM):   end;
1067917   +         end;
MPRINT(EM_DIAGRAM):   end;
1067918   +      end;
MPRINT(EM_DIAGRAM):   end;
1067919   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067920   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1067921   +            _10_6 = 1;
MPRINT(EM_DIAGRAM):   _10_6 = 1;
1067922   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067923   +         end;
MPRINT(EM_DIAGRAM):   end;
1067924   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067925   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1067926   +               _10_7 = 1;
MPRINT(EM_DIAGRAM):   _10_7 = 1;
1067927   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067928   +            end;
MPRINT(EM_DIAGRAM):   end;
1067929   +         end;
MPRINT(EM_DIAGRAM):   end;
1067930   +      end;
MPRINT(EM_DIAGRAM):   end;
1067931   +   end;
MPRINT(EM_DIAGRAM):   end;
1067932   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1067933   +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
1067934   +      _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
1067935   +      _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
1067936   +      _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
1067937   +      _10_4 = .;
MPRINT(EM_DIAGRAM):   _10_4 = .;
1067938   +      _10_5 = .;
MPRINT(EM_DIAGRAM):   _10_5 = .;
1067939   +      _10_6 = .;
MPRINT(EM_DIAGRAM):   _10_6 = .;
1067940   +      _10_7 = .;
MPRINT(EM_DIAGRAM):   _10_7 = .;
1067941   +      _10_8 = .;
MPRINT(EM_DIAGRAM):   _10_8 = .;
1067942   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1067943   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067944   +   end;
MPRINT(EM_DIAGRAM):   end;
1067945   +end;
MPRINT(EM_DIAGRAM):   end;
1067946   +
1067947   +*** Generate dummy variables for GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumCatalogPurchases ;
1067948   +drop _11_0 _11_1 _11_2 _11_3 _11_4 ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 _11_4 ;
1067949   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1067950   +_11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
1067951   +_11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
1067952   +_11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
1067953   +_11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
1067954   +_11_4 = 0;
MPRINT(EM_DIAGRAM):   _11_4 = 0;
1067955   +if missing( GRP_NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumCatalogPurchases ) then do;
1067956   +   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
1067957   +   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
1067958   +   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
1067959   +   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
1067960   +   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
1067961   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1067962   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1067963   +end;
MPRINT(EM_DIAGRAM):   end;
1067964   +else do;
MPRINT(EM_DIAGRAM):   else do;
1067965   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1067966   +   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
1067967   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1067968   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1067969   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1067970   +      if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1067971   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1067972   +            _11_0 = 1;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
1067973   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067974   +         end;
MPRINT(EM_DIAGRAM):   end;
1067975   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067976   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1067977   +               _11_1 = 1;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
1067978   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067979   +            end;
MPRINT(EM_DIAGRAM):   end;
1067980   +         end;
MPRINT(EM_DIAGRAM):   end;
1067981   +      end;
MPRINT(EM_DIAGRAM):   end;
1067982   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1067983   +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1067984   +            _11_2 = 1;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
1067985   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067986   +         end;
MPRINT(EM_DIAGRAM):   end;
1067987   +      end;
MPRINT(EM_DIAGRAM):   end;
1067988   +   end;
MPRINT(EM_DIAGRAM):   end;
1067989   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1067990   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1067991   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1067992   +            _11_3 = 1;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
1067993   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067994   +         end;
MPRINT(EM_DIAGRAM):   end;
1067995   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1067996   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1067997   +               _11_4 = 1;
MPRINT(EM_DIAGRAM):   _11_4 = 1;
1067998   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1067999   +            end;
MPRINT(EM_DIAGRAM):   end;
1068000   +         end;
MPRINT(EM_DIAGRAM):   end;
1068001   +      end;
MPRINT(EM_DIAGRAM):   end;
1068002   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068003   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1068004   +            _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
1068005   +            _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
1068006   +            _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
1068007   +            _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
1068008   +            _11_4 = -1;
MPRINT(EM_DIAGRAM):   _11_4 = -1;
1068009   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068010   +         end;
MPRINT(EM_DIAGRAM):   end;
1068011   +      end;
MPRINT(EM_DIAGRAM):   end;
1068012   +   end;
MPRINT(EM_DIAGRAM):   end;
1068013   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1068014   +      _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
1068015   +      _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
1068016   +      _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
1068017   +      _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
1068018   +      _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
1068019   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068020   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068021   +   end;
MPRINT(EM_DIAGRAM):   end;
1068022   +end;
MPRINT(EM_DIAGRAM):   end;
1068023   +
1068024   +*** Generate dummy variables for GRP_NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumWebVisitsMonth ;
1068025   +drop _14_0 _14_1 _14_2 _14_3 _14_4 _14_5 _14_6 ;
MPRINT(EM_DIAGRAM):   drop _14_0 _14_1 _14_2 _14_3 _14_4 _14_5 _14_6 ;
1068026   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1068027   +_14_0 = 0;
MPRINT(EM_DIAGRAM):   _14_0 = 0;
1068028   +_14_1 = 0;
MPRINT(EM_DIAGRAM):   _14_1 = 0;
1068029   +_14_2 = 0;
MPRINT(EM_DIAGRAM):   _14_2 = 0;
1068030   +_14_3 = 0;
MPRINT(EM_DIAGRAM):   _14_3 = 0;
1068031   +_14_4 = 0;
MPRINT(EM_DIAGRAM):   _14_4 = 0;
1068032   +_14_5 = 0;
MPRINT(EM_DIAGRAM):   _14_5 = 0;
1068033   +_14_6 = 0;
MPRINT(EM_DIAGRAM):   _14_6 = 0;
1068034   +if missing( GRP_NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumWebVisitsMonth ) then do;
1068035   +   _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
1068036   +   _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
1068037   +   _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
1068038   +   _14_3 = .;
MPRINT(EM_DIAGRAM):   _14_3 = .;
1068039   +   _14_4 = .;
MPRINT(EM_DIAGRAM):   _14_4 = .;
1068040   +   _14_5 = .;
MPRINT(EM_DIAGRAM):   _14_5 = .;
1068041   +   _14_6 = .;
MPRINT(EM_DIAGRAM):   _14_6 = .;
1068042   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068043   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068044   +end;
MPRINT(EM_DIAGRAM):   end;
1068045   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068046   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068047   +   _dm12 = put( GRP_NumWebVisitsMonth , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumWebVisitsMonth , BEST12. );
1068048   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068049   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1068050   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1068051   +      if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
1068052   +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1068053   +            _14_0 = 1;
MPRINT(EM_DIAGRAM):   _14_0 = 1;
1068054   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068055   +         end;
MPRINT(EM_DIAGRAM):   end;
1068056   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068057   +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1068058   +               _14_1 = 1;
MPRINT(EM_DIAGRAM):   _14_1 = 1;
1068059   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068060   +            end;
MPRINT(EM_DIAGRAM):   end;
1068061   +         end;
MPRINT(EM_DIAGRAM):   end;
1068062   +      end;
MPRINT(EM_DIAGRAM):   end;
1068063   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068064   +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1068065   +            _14_2 = 1;
MPRINT(EM_DIAGRAM):   _14_2 = 1;
1068066   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068067   +         end;
MPRINT(EM_DIAGRAM):   end;
1068068   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068069   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1068070   +               _14_3 = 1;
MPRINT(EM_DIAGRAM):   _14_3 = 1;
1068071   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068072   +            end;
MPRINT(EM_DIAGRAM):   end;
1068073   +         end;
MPRINT(EM_DIAGRAM):   end;
1068074   +      end;
MPRINT(EM_DIAGRAM):   end;
1068075   +   end;
MPRINT(EM_DIAGRAM):   end;
1068076   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068077   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1068078   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1068079   +            _14_4 = 1;
MPRINT(EM_DIAGRAM):   _14_4 = 1;
1068080   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068081   +         end;
MPRINT(EM_DIAGRAM):   end;
1068082   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068083   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1068084   +               _14_5 = 1;
MPRINT(EM_DIAGRAM):   _14_5 = 1;
1068085   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068086   +            end;
MPRINT(EM_DIAGRAM):   end;
1068087   +         end;
MPRINT(EM_DIAGRAM):   end;
1068088   +      end;
MPRINT(EM_DIAGRAM):   end;
1068089   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068090   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1068091   +            _14_6 = 1;
MPRINT(EM_DIAGRAM):   _14_6 = 1;
1068092   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068093   +         end;
MPRINT(EM_DIAGRAM):   end;
1068094   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068095   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1068096   +               _14_0 = -1;
MPRINT(EM_DIAGRAM):   _14_0 = -1;
1068097   +               _14_1 = -1;
MPRINT(EM_DIAGRAM):   _14_1 = -1;
1068098   +               _14_2 = -1;
MPRINT(EM_DIAGRAM):   _14_2 = -1;
1068099   +               _14_3 = -1;
MPRINT(EM_DIAGRAM):   _14_3 = -1;
1068100   +               _14_4 = -1;
MPRINT(EM_DIAGRAM):   _14_4 = -1;
1068101   +               _14_5 = -1;
MPRINT(EM_DIAGRAM):   _14_5 = -1;
1068102   +               _14_6 = -1;
MPRINT(EM_DIAGRAM):   _14_6 = -1;
1068103   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068104   +            end;
MPRINT(EM_DIAGRAM):   end;
1068105   +         end;
MPRINT(EM_DIAGRAM):   end;
1068106   +      end;
MPRINT(EM_DIAGRAM):   end;
1068107   +   end;
MPRINT(EM_DIAGRAM):   end;
1068108   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1068109   +      _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
1068110   +      _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
1068111   +      _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
1068112   +      _14_3 = .;
MPRINT(EM_DIAGRAM):   _14_3 = .;
1068113   +      _14_4 = .;
MPRINT(EM_DIAGRAM):   _14_4 = .;
1068114   +      _14_5 = .;
MPRINT(EM_DIAGRAM):   _14_5 = .;
1068115   +      _14_6 = .;
MPRINT(EM_DIAGRAM):   _14_6 = .;
1068116   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068117   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068118   +   end;
MPRINT(EM_DIAGRAM):   end;
1068119   +end;
MPRINT(EM_DIAGRAM):   end;
1068120   +
1068121   +*** Generate dummy variables for GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RMntFrq ;
1068122   +drop _16_0 _16_1 _16_2 _16_3 _16_4 _16_5 _16_6 _16_7 _16_8 ;
MPRINT(EM_DIAGRAM):   drop _16_0 _16_1 _16_2 _16_3 _16_4 _16_5 _16_6 _16_7 _16_8 ;
1068123   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1068124   +_16_0 = 0;
MPRINT(EM_DIAGRAM):   _16_0 = 0;
1068125   +_16_1 = 0;
MPRINT(EM_DIAGRAM):   _16_1 = 0;
1068126   +_16_2 = 0;
MPRINT(EM_DIAGRAM):   _16_2 = 0;
1068127   +_16_3 = 0;
MPRINT(EM_DIAGRAM):   _16_3 = 0;
1068128   +_16_4 = 0;
MPRINT(EM_DIAGRAM):   _16_4 = 0;
1068129   +_16_5 = 0;
MPRINT(EM_DIAGRAM):   _16_5 = 0;
1068130   +_16_6 = 0;
MPRINT(EM_DIAGRAM):   _16_6 = 0;
1068131   +_16_7 = 0;
MPRINT(EM_DIAGRAM):   _16_7 = 0;
1068132   +_16_8 = 0;
MPRINT(EM_DIAGRAM):   _16_8 = 0;
1068133   +if missing( GRP_RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RMntFrq ) then do;
1068134   +   _16_0 = .;
MPRINT(EM_DIAGRAM):   _16_0 = .;
1068135   +   _16_1 = .;
MPRINT(EM_DIAGRAM):   _16_1 = .;
1068136   +   _16_2 = .;
MPRINT(EM_DIAGRAM):   _16_2 = .;
1068137   +   _16_3 = .;
MPRINT(EM_DIAGRAM):   _16_3 = .;
1068138   +   _16_4 = .;
MPRINT(EM_DIAGRAM):   _16_4 = .;
1068139   +   _16_5 = .;
MPRINT(EM_DIAGRAM):   _16_5 = .;
1068140   +   _16_6 = .;
MPRINT(EM_DIAGRAM):   _16_6 = .;
1068141   +   _16_7 = .;
MPRINT(EM_DIAGRAM):   _16_7 = .;
1068142   +   _16_8 = .;
MPRINT(EM_DIAGRAM):   _16_8 = .;
1068143   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068144   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068145   +end;
MPRINT(EM_DIAGRAM):   end;
1068146   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068147   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068148   +   _dm12 = put( GRP_RMntFrq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RMntFrq , BEST12. );
1068149   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068150   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1068151   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1068152   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1068153   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1068154   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1068155   +               _16_8 = 1;
MPRINT(EM_DIAGRAM):   _16_8 = 1;
1068156   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068157   +            end;
MPRINT(EM_DIAGRAM):   end;
1068158   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068159   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1068160   +                  _16_0 = -1;
MPRINT(EM_DIAGRAM):   _16_0 = -1;
1068161   +                  _16_1 = -1;
MPRINT(EM_DIAGRAM):   _16_1 = -1;
1068162   +                  _16_2 = -1;
MPRINT(EM_DIAGRAM):   _16_2 = -1;
1068163   +                  _16_3 = -1;
MPRINT(EM_DIAGRAM):   _16_3 = -1;
1068164   +                  _16_4 = -1;
MPRINT(EM_DIAGRAM):   _16_4 = -1;
1068165   +                  _16_5 = -1;
MPRINT(EM_DIAGRAM):   _16_5 = -1;
1068166   +                  _16_6 = -1;
MPRINT(EM_DIAGRAM):   _16_6 = -1;
1068167   +                  _16_7 = -1;
MPRINT(EM_DIAGRAM):   _16_7 = -1;
1068168   +                  _16_8 = -1;
MPRINT(EM_DIAGRAM):   _16_8 = -1;
1068169   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068170   +               end;
MPRINT(EM_DIAGRAM):   end;
1068171   +            end;
MPRINT(EM_DIAGRAM):   end;
1068172   +         end;
MPRINT(EM_DIAGRAM):   end;
1068173   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068174   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1068175   +               _16_0 = 1;
MPRINT(EM_DIAGRAM):   _16_0 = 1;
1068176   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068177   +            end;
MPRINT(EM_DIAGRAM):   end;
1068178   +         end;
MPRINT(EM_DIAGRAM):   end;
1068179   +      end;
MPRINT(EM_DIAGRAM):   end;
1068180   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068181   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1068182   +            _16_1 = 1;
MPRINT(EM_DIAGRAM):   _16_1 = 1;
1068183   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068184   +         end;
MPRINT(EM_DIAGRAM):   end;
1068185   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068186   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1068187   +               _16_2 = 1;
MPRINT(EM_DIAGRAM):   _16_2 = 1;
1068188   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068189   +            end;
MPRINT(EM_DIAGRAM):   end;
1068190   +         end;
MPRINT(EM_DIAGRAM):   end;
1068191   +      end;
MPRINT(EM_DIAGRAM):   end;
1068192   +   end;
MPRINT(EM_DIAGRAM):   end;
1068193   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068194   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1068195   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1068196   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1068197   +               _16_3 = 1;
MPRINT(EM_DIAGRAM):   _16_3 = 1;
1068198   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068199   +            end;
MPRINT(EM_DIAGRAM):   end;
1068200   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068201   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1068202   +                  _16_4 = 1;
MPRINT(EM_DIAGRAM):   _16_4 = 1;
1068203   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068204   +               end;
MPRINT(EM_DIAGRAM):   end;
1068205   +            end;
MPRINT(EM_DIAGRAM):   end;
1068206   +         end;
MPRINT(EM_DIAGRAM):   end;
1068207   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068208   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1068209   +               _16_5 = 1;
MPRINT(EM_DIAGRAM):   _16_5 = 1;
1068210   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068211   +            end;
MPRINT(EM_DIAGRAM):   end;
1068212   +         end;
MPRINT(EM_DIAGRAM):   end;
1068213   +      end;
MPRINT(EM_DIAGRAM):   end;
1068214   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068215   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1068216   +            _16_6 = 1;
MPRINT(EM_DIAGRAM):   _16_6 = 1;
1068217   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068218   +         end;
MPRINT(EM_DIAGRAM):   end;
1068219   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068220   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1068221   +               _16_7 = 1;
MPRINT(EM_DIAGRAM):   _16_7 = 1;
1068222   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068223   +            end;
MPRINT(EM_DIAGRAM):   end;
1068224   +         end;
MPRINT(EM_DIAGRAM):   end;
1068225   +      end;
MPRINT(EM_DIAGRAM):   end;
1068226   +   end;
MPRINT(EM_DIAGRAM):   end;
1068227   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1068228   +      _16_0 = .;
MPRINT(EM_DIAGRAM):   _16_0 = .;
1068229   +      _16_1 = .;
MPRINT(EM_DIAGRAM):   _16_1 = .;
1068230   +      _16_2 = .;
MPRINT(EM_DIAGRAM):   _16_2 = .;
1068231   +      _16_3 = .;
MPRINT(EM_DIAGRAM):   _16_3 = .;
1068232   +      _16_4 = .;
MPRINT(EM_DIAGRAM):   _16_4 = .;
1068233   +      _16_5 = .;
MPRINT(EM_DIAGRAM):   _16_5 = .;
1068234   +      _16_6 = .;
MPRINT(EM_DIAGRAM):   _16_6 = .;
1068235   +      _16_7 = .;
MPRINT(EM_DIAGRAM):   _16_7 = .;
1068236   +      _16_8 = .;
MPRINT(EM_DIAGRAM):   _16_8 = .;
1068237   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068238   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068239   +   end;
MPRINT(EM_DIAGRAM):   end;
1068240   +end;
MPRINT(EM_DIAGRAM):   end;
1068241   +
1068242   +*** Generate dummy variables for GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Recency ;
1068243   +drop _17_0 _17_1 _17_2 _17_3 _17_4 _17_5 _17_6 _17_7 _17_8 ;
MPRINT(EM_DIAGRAM):   drop _17_0 _17_1 _17_2 _17_3 _17_4 _17_5 _17_6 _17_7 _17_8 ;
1068244   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1068245   +_17_0 = 0;
MPRINT(EM_DIAGRAM):   _17_0 = 0;
1068246   +_17_1 = 0;
MPRINT(EM_DIAGRAM):   _17_1 = 0;
1068247   +_17_2 = 0;
MPRINT(EM_DIAGRAM):   _17_2 = 0;
1068248   +_17_3 = 0;
MPRINT(EM_DIAGRAM):   _17_3 = 0;
1068249   +_17_4 = 0;
MPRINT(EM_DIAGRAM):   _17_4 = 0;
1068250   +_17_5 = 0;
MPRINT(EM_DIAGRAM):   _17_5 = 0;
1068251   +_17_6 = 0;
MPRINT(EM_DIAGRAM):   _17_6 = 0;
1068252   +_17_7 = 0;
MPRINT(EM_DIAGRAM):   _17_7 = 0;
1068253   +_17_8 = 0;
MPRINT(EM_DIAGRAM):   _17_8 = 0;
1068254   +if missing( GRP_Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Recency ) then do;
1068255   +   _17_0 = .;
MPRINT(EM_DIAGRAM):   _17_0 = .;
1068256   +   _17_1 = .;
MPRINT(EM_DIAGRAM):   _17_1 = .;
1068257   +   _17_2 = .;
MPRINT(EM_DIAGRAM):   _17_2 = .;
1068258   +   _17_3 = .;
MPRINT(EM_DIAGRAM):   _17_3 = .;
1068259   +   _17_4 = .;
MPRINT(EM_DIAGRAM):   _17_4 = .;
1068260   +   _17_5 = .;
MPRINT(EM_DIAGRAM):   _17_5 = .;
1068261   +   _17_6 = .;
MPRINT(EM_DIAGRAM):   _17_6 = .;
1068262   +   _17_7 = .;
MPRINT(EM_DIAGRAM):   _17_7 = .;
1068263   +   _17_8 = .;
MPRINT(EM_DIAGRAM):   _17_8 = .;
1068264   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068265   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068266   +end;
MPRINT(EM_DIAGRAM):   end;
1068267   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068268   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068269   +   _dm12 = put( GRP_Recency , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Recency , BEST12. );
1068270   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068271   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1068272   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1068273   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1068274   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1068275   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1068276   +               _17_8 = 1;
MPRINT(EM_DIAGRAM):   _17_8 = 1;
1068277   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068278   +            end;
MPRINT(EM_DIAGRAM):   end;
1068279   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068280   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1068281   +                  _17_0 = -1;
MPRINT(EM_DIAGRAM):   _17_0 = -1;
1068282   +                  _17_1 = -1;
MPRINT(EM_DIAGRAM):   _17_1 = -1;
1068283   +                  _17_2 = -1;
MPRINT(EM_DIAGRAM):   _17_2 = -1;
1068284   +                  _17_3 = -1;
MPRINT(EM_DIAGRAM):   _17_3 = -1;
1068285   +                  _17_4 = -1;
MPRINT(EM_DIAGRAM):   _17_4 = -1;
1068286   +                  _17_5 = -1;
MPRINT(EM_DIAGRAM):   _17_5 = -1;
1068287   +                  _17_6 = -1;
MPRINT(EM_DIAGRAM):   _17_6 = -1;
1068288   +                  _17_7 = -1;
MPRINT(EM_DIAGRAM):   _17_7 = -1;
1068289   +                  _17_8 = -1;
MPRINT(EM_DIAGRAM):   _17_8 = -1;
1068290   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068291   +               end;
MPRINT(EM_DIAGRAM):   end;
1068292   +            end;
MPRINT(EM_DIAGRAM):   end;
1068293   +         end;
MPRINT(EM_DIAGRAM):   end;
1068294   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068295   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1068296   +               _17_0 = 1;
MPRINT(EM_DIAGRAM):   _17_0 = 1;
1068297   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068298   +            end;
MPRINT(EM_DIAGRAM):   end;
1068299   +         end;
MPRINT(EM_DIAGRAM):   end;
1068300   +      end;
MPRINT(EM_DIAGRAM):   end;
1068301   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068302   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1068303   +            _17_1 = 1;
MPRINT(EM_DIAGRAM):   _17_1 = 1;
1068304   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068305   +         end;
MPRINT(EM_DIAGRAM):   end;
1068306   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068307   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1068308   +               _17_2 = 1;
MPRINT(EM_DIAGRAM):   _17_2 = 1;
1068309   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068310   +            end;
MPRINT(EM_DIAGRAM):   end;
1068311   +         end;
MPRINT(EM_DIAGRAM):   end;
1068312   +      end;
MPRINT(EM_DIAGRAM):   end;
1068313   +   end;
MPRINT(EM_DIAGRAM):   end;
1068314   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068315   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1068316   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1068317   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1068318   +               _17_3 = 1;
MPRINT(EM_DIAGRAM):   _17_3 = 1;
1068319   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068320   +            end;
MPRINT(EM_DIAGRAM):   end;
1068321   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068322   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1068323   +                  _17_4 = 1;
MPRINT(EM_DIAGRAM):   _17_4 = 1;
1068324   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068325   +               end;
MPRINT(EM_DIAGRAM):   end;
1068326   +            end;
MPRINT(EM_DIAGRAM):   end;
1068327   +         end;
MPRINT(EM_DIAGRAM):   end;
1068328   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068329   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1068330   +               _17_5 = 1;
MPRINT(EM_DIAGRAM):   _17_5 = 1;
1068331   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068332   +            end;
MPRINT(EM_DIAGRAM):   end;
1068333   +         end;
MPRINT(EM_DIAGRAM):   end;
1068334   +      end;
MPRINT(EM_DIAGRAM):   end;
1068335   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068336   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1068337   +            _17_6 = 1;
MPRINT(EM_DIAGRAM):   _17_6 = 1;
1068338   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068339   +         end;
MPRINT(EM_DIAGRAM):   end;
1068340   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068341   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1068342   +               _17_7 = 1;
MPRINT(EM_DIAGRAM):   _17_7 = 1;
1068343   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068344   +            end;
MPRINT(EM_DIAGRAM):   end;
1068345   +         end;
MPRINT(EM_DIAGRAM):   end;
1068346   +      end;
MPRINT(EM_DIAGRAM):   end;
1068347   +   end;
MPRINT(EM_DIAGRAM):   end;
1068348   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1068349   +      _17_0 = .;
MPRINT(EM_DIAGRAM):   _17_0 = .;
1068350   +      _17_1 = .;
MPRINT(EM_DIAGRAM):   _17_1 = .;
1068351   +      _17_2 = .;
MPRINT(EM_DIAGRAM):   _17_2 = .;
1068352   +      _17_3 = .;
MPRINT(EM_DIAGRAM):   _17_3 = .;
1068353   +      _17_4 = .;
MPRINT(EM_DIAGRAM):   _17_4 = .;
1068354   +      _17_5 = .;
MPRINT(EM_DIAGRAM):   _17_5 = .;
1068355   +      _17_6 = .;
MPRINT(EM_DIAGRAM):   _17_6 = .;
1068356   +      _17_7 = .;
MPRINT(EM_DIAGRAM):   _17_7 = .;
1068357   +      _17_8 = .;
MPRINT(EM_DIAGRAM):   _17_8 = .;
1068358   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068359   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068360   +   end;
MPRINT(EM_DIAGRAM):   end;
1068361   +end;
MPRINT(EM_DIAGRAM):   end;
1068362   +
1068363   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
1068364   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
1068365   +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
1068366   +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
1068367   +   goto REG3DR1;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
1068368   +end;
MPRINT(EM_DIAGRAM):   end;
1068369   +
1068370   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
1068371   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
1068372   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
1068373   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
1068374   +
1068375   +***  Effect: GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_AcceptedCmp5 ;
1068376   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068377   +_LP0 = _LP0 + (    -0.7446790765921) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.7446790765921) * _TEMP * _1_0;
1068378   +
1068379   +***  Effect: GRP_AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_AcceptedCmpTotal ;
1068380   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068381   +_LP0 = _LP0 + (   -1.47644515097353) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.47644515097353) * _TEMP * _2_0;
1068382   +
1068383   +***  Effect: GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Frq ;
1068384   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068385   +_LP0 = _LP0 + (    1.60669977062618) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.60669977062618) * _TEMP * _3_0;
1068386   +_LP0 = _LP0 + (    2.43462608830259) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.43462608830259) * _TEMP * _3_1;
1068387   +_LP0 = _LP0 + (     2.0853454925309) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.0853454925309) * _TEMP * _3_2;
1068388   +_LP0 = _LP0 + (    1.39670974961972) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.39670974961972) * _TEMP * _3_3;
1068389   +_LP0 = _LP0 + (    0.42808058742905) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.42808058742905) * _TEMP * _3_4;
1068390   +_LP0 = _LP0 + (   -0.71021933964392) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71021933964392) * _TEMP * _3_5;
1068391   +_LP0 = _LP0 + (   -0.48135407112575) * _TEMP * _3_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48135407112575) * _TEMP * _3_6;
1068392   +_LP0 = _LP0 + (   -1.63572249476541) * _TEMP * _3_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63572249476541) * _TEMP * _3_7;
1068393   +_LP0 = _LP0 + (   -1.72256503137932) * _TEMP * _3_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.72256503137932) * _TEMP * _3_8;
1068394   +
1068395   +***  Effect: GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Income ;
1068396   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068397   +_LP0 = _LP0 + (    -1.1068873777974) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.1068873777974) * _TEMP * _4_0;
1068398   +_LP0 = _LP0 + (    -0.9547086898092) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9547086898092) * _TEMP * _4_1;
1068399   +_LP0 = _LP0 + (   -0.31212332505455) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31212332505455) * _TEMP * _4_2;
1068400   +_LP0 = _LP0 + (     0.4494292325574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4494292325574) * _TEMP * _4_3;
1068401   +_LP0 = _LP0 + (    0.32802633763272) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.32802633763272) * _TEMP * _4_4;
1068402   +_LP0 = _LP0 + (   -0.19075671306322) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.19075671306322) * _TEMP * _4_5;
1068403   +_LP0 = _LP0 + (   -0.77559003357315) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.77559003357315) * _TEMP * _4_6;
1068404   +_LP0 = _LP0 + (    0.18603490415793) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18603490415793) * _TEMP * _4_7;
1068405   +_LP0 = _LP0 + (    0.63801918363541) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.63801918363541) * _TEMP * _4_8;
1068406   +
1068407   +***  Effect: GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntFishProducts ;
1068408   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068409   +_LP0 = _LP0 + (    0.95284156310019) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.95284156310019) * _TEMP * _6_0;
1068410   +_LP0 = _LP0 + (    0.26502435397607) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.26502435397607) * _TEMP * _6_1;
1068411   +_LP0 = _LP0 + (    0.17695765630059) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17695765630059) * _TEMP * _6_2;
1068412   +_LP0 = _LP0 + (   -0.14572197867389) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14572197867389) * _TEMP * _6_3;
1068413   +_LP0 = _LP0 + (    0.01505271297294) * _TEMP * _6_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01505271297294) * _TEMP * _6_4;
1068414   +_LP0 = _LP0 + (    0.54563980035699) * _TEMP * _6_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.54563980035699) * _TEMP * _6_5;
1068415   +_LP0 = _LP0 + (   -0.52118071899185) * _TEMP * _6_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.52118071899185) * _TEMP * _6_6;
1068416   +_LP0 = _LP0 + (    -0.4363500869228) * _TEMP * _6_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4363500869228) * _TEMP * _6_7;
1068417   +
1068418   +***  Effect: GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntMeatProducts ;
1068419   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068420   +_LP0 = _LP0 + (   -8.31770021190691) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.31770021190691) * _TEMP * _8_0;
1068421   +_LP0 = _LP0 + (   -4.36624878948483) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.36624878948483) * _TEMP * _8_1;
1068422   +_LP0 = _LP0 + (   -3.04851308469506) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.04851308469506) * _TEMP * _8_2;
1068423   +_LP0 = _LP0 + (   -1.48432419417486) * _TEMP * _8_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.48432419417486) * _TEMP * _8_3;
1068424   +_LP0 = _LP0 + (    0.88788868200015) * _TEMP * _8_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.88788868200015) * _TEMP * _8_4;
1068425   +_LP0 = _LP0 + (    1.33039344853623) * _TEMP * _8_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.33039344853623) * _TEMP * _8_5;
1068426   +_LP0 = _LP0 + (    2.74637356935852) * _TEMP * _8_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.74637356935852) * _TEMP * _8_6;
1068427   +_LP0 = _LP0 + (    2.83781421974894) * _TEMP * _8_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.83781421974894) * _TEMP * _8_7;
1068428   +_LP0 = _LP0 + (    4.06889115404295) * _TEMP * _8_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.06889115404295) * _TEMP * _8_8;
1068429   +
1068430   +***  Effect: GRP_MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntSweetProducts ;
1068431   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068432   +_LP0 = _LP0 + (    0.30891510159184) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.30891510159184) * _TEMP * _9_0;
1068433   +_LP0 = _LP0 + (    0.71823102140593) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71823102140593) * _TEMP * _9_1;
1068434   +_LP0 = _LP0 + (    0.40751268124015) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.40751268124015) * _TEMP * _9_2;
1068435   +_LP0 = _LP0 + (    -0.0500970886438) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0500970886438) * _TEMP * _9_3;
1068436   +_LP0 = _LP0 + (    0.75914971161272) * _TEMP * _9_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.75914971161272) * _TEMP * _9_4;
1068437   +_LP0 = _LP0 + (   -0.27777464352641) * _TEMP * _9_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27777464352641) * _TEMP * _9_5;
1068438   +_LP0 = _LP0 + (   -0.19862700981974) * _TEMP * _9_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.19862700981974) * _TEMP * _9_6;
1068439   +_LP0 = _LP0 + (   -0.38787782785805) * _TEMP * _9_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.38787782785805) * _TEMP * _9_7;
1068440   +
1068441   +***  Effect: GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntWines ;
1068442   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068443   +_LP0 = _LP0 + (    3.97976057988328) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.97976057988328) * _TEMP * _10_0;
1068444   +_LP0 = _LP0 + (     2.7500535043595) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.7500535043595) * _TEMP * _10_1;
1068445   +_LP0 = _LP0 + (    2.23351774782852) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.23351774782852) * _TEMP * _10_2;
1068446   +_LP0 = _LP0 + (     1.7536016671876) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.7536016671876) * _TEMP * _10_3;
1068447   +_LP0 = _LP0 + (     0.1640545854573) * _TEMP * _10_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.1640545854573) * _TEMP * _10_4;
1068448   +_LP0 = _LP0 + (   -0.36967718483959) * _TEMP * _10_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36967718483959) * _TEMP * _10_5;
1068449   +_LP0 = _LP0 + (   -1.60242387302593) * _TEMP * _10_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.60242387302593) * _TEMP * _10_6;
1068450   +_LP0 = _LP0 + (   -2.18568823441387) * _TEMP * _10_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.18568823441387) * _TEMP * _10_7;
1068451   +_LP0 = _LP0 + (   -3.01781681630858) * _TEMP * _10_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.01781681630858) * _TEMP * _10_8;
1068452   +
1068453   +***  Effect: GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumCatalogPurchases ;
1068454   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068455   +_LP0 = _LP0 + (   -6.23994183900208) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.23994183900208) * _TEMP * _11_0;
1068456   +_LP0 = _LP0 + (   -2.68869740629193) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.68869740629193) * _TEMP * _11_1;
1068457   +_LP0 = _LP0 + (   -0.15877773244651) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.15877773244651) * _TEMP * _11_2;
1068458   +_LP0 = _LP0 + (    1.53123175936135) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.53123175936135) * _TEMP * _11_3;
1068459   +_LP0 = _LP0 + (    2.69517926058072) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.69517926058072) * _TEMP * _11_4;
1068460   +
1068461   +***  Effect: GRP_NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumWebVisitsMonth ;
1068462   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068463   +_LP0 = _LP0 + (    -3.3002412240753) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.3002412240753) * _TEMP * _14_0;
1068464   +_LP0 = _LP0 + (   -2.20033226941868) * _TEMP * _14_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.20033226941868) * _TEMP * _14_1;
1068465   +_LP0 = _LP0 + (   -1.72135475558275) * _TEMP * _14_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.72135475558275) * _TEMP * _14_2;
1068466   +_LP0 = _LP0 + (   -0.69842997035409) * _TEMP * _14_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.69842997035409) * _TEMP * _14_3;
1068467   +_LP0 = _LP0 + (    0.59993420393711) * _TEMP * _14_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59993420393711) * _TEMP * _14_4;
1068468   +_LP0 = _LP0 + (    0.72581883605563) * _TEMP * _14_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72581883605563) * _TEMP * _14_5;
1068469   +_LP0 = _LP0 + (    2.32956561429985) * _TEMP * _14_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.32956561429985) * _TEMP * _14_6;
1068470   +
1068471   +***  Effect: GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_RMntFrq ;
1068472   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068473   +_LP0 = _LP0 + (    2.78248187088817) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.78248187088817) * _TEMP * _16_0;
1068474   +_LP0 = _LP0 + (    1.57916958099666) * _TEMP * _16_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.57916958099666) * _TEMP * _16_1;
1068475   +_LP0 = _LP0 + (    0.80760708078323) * _TEMP * _16_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.80760708078323) * _TEMP * _16_2;
1068476   +_LP0 = _LP0 + (   -0.84109819008678) * _TEMP * _16_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.84109819008678) * _TEMP * _16_3;
1068477   +_LP0 = _LP0 + (   -0.83990394353114) * _TEMP * _16_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.83990394353114) * _TEMP * _16_4;
1068478   +_LP0 = _LP0 + (   -1.88920830968665) * _TEMP * _16_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.88920830968665) * _TEMP * _16_5;
1068479   +_LP0 = _LP0 + (   -1.53102493561927) * _TEMP * _16_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53102493561927) * _TEMP * _16_6;
1068480   +_LP0 = _LP0 + (   -0.00003768720234) * _TEMP * _16_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00003768720234) * _TEMP * _16_7;
1068481   +_LP0 = _LP0 + (   -0.59460667119256) * _TEMP * _16_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.59460667119256) * _TEMP * _16_8;
1068482   +
1068483   +***  Effect: GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Recency ;
1068484   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1068485   +_LP0 = _LP0 + (    4.15436119707335) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.15436119707335) * _TEMP * _17_0;
1068486   +_LP0 = _LP0 + (    3.08080497220808) * _TEMP * _17_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.08080497220808) * _TEMP * _17_1;
1068487   +_LP0 = _LP0 + (    2.90742407234312) * _TEMP * _17_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.90742407234312) * _TEMP * _17_2;
1068488   +_LP0 = _LP0 + (    1.50207200800462) * _TEMP * _17_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50207200800462) * _TEMP * _17_3;
1068489   +_LP0 = _LP0 + (   -0.21286194047464) * _TEMP * _17_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.21286194047464) * _TEMP * _17_4;
1068490   +_LP0 = _LP0 + (    -0.3852938818758) * _TEMP * _17_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3852938818758) * _TEMP * _17_5;
1068491   +_LP0 = _LP0 + (   -1.39433099504826) * _TEMP * _17_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.39433099504826) * _TEMP * _17_6;
1068492   +_LP0 = _LP0 + (   -1.80436921997444) * _TEMP * _17_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.80436921997444) * _TEMP * _17_7;
1068493   +_LP0 = _LP0 + (   -3.75257988441601) * _TEMP * _17_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.75257988441601) * _TEMP * _17_8;
1068494   +
1068495   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
1068496   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
1068497   +_TEMP =    -3.20489068488757 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -3.20489068488757 + _LP0;
1068498   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
1068499   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
1068500   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
1068501   +end;
MPRINT(EM_DIAGRAM):   end;
1068502   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
1068503   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
1068504   +
1068505   +REG3DR1:
1068506   +
1068507   +*** Residuals;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Residuals;
1068508   +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
1068509   +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1068510   +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1068511   +end;
MPRINT(EM_DIAGRAM):   end;
1068512   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068513   +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1068514   +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1068515   +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
1068516   +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
1068517   +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
1068518   +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
1068519   +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
1068520   +   end;
MPRINT(EM_DIAGRAM):   end;
1068521   +end;
MPRINT(EM_DIAGRAM):   end;
1068522   +
1068523   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
1068524   +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1068525   +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1068526   +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
1068527   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
1068528   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
1068529   +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
1068530   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
1068531   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
1068532   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
1068533   +end;
MPRINT(EM_DIAGRAM):   end;
1068534   +I_DepVar = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG3DRF[_IY];
1068535   +U_DepVar = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG3DRU[_IY];
1068536   +
1068537   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1068538   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
1068539   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1068540    run;
 
NOTE: DATA STEP view saved on file EMWS8.REG3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1068541    quit;
1068542    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1068543    filename emflow
1068543  ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1068544    *------------------------------------------------------------*;
1068545    * Reg3: Scoring VALIDATE data;
1068546    *------------------------------------------------------------*;
1068547    data EMWS8.Reg3_VALIDATE
1068548    / view=EMWS8.Reg3_VALIDATE
1068549    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_VALIDATE / view=EMWS8.Reg3_VALIDATE ;
1068550    set EMWS8.BINNING_VALIDATE
1068551    ;
MPRINT(EM_DIAGRAM):   set EMWS8.BINNING_VALIDATE ;
1068552    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMFLOWSCORE.sas.
1068553   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1068554   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
1068555   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1068556   +
1068557   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1068558   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
1068559   +
1068560   +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
1068561   +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1068562   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
1068563   +array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
1068564   +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1068565   +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
1068566   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
1068567   +ARRAY REG3DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
1068568   +
1068569   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1068570   +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
1068571   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1068572   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1068573   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1068574   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068575   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1068576   +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1068577   +end;
MPRINT(EM_DIAGRAM):   end;
1068578   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068579   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1068580   +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
1068581   +   end;
MPRINT(EM_DIAGRAM):   end;
1068582   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1068583   +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
1068584   +   end;
MPRINT(EM_DIAGRAM):   end;
1068585   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068586   +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1068587   +   end;
MPRINT(EM_DIAGRAM):   end;
1068588   +end;
MPRINT(EM_DIAGRAM):   end;
1068589   +
1068590   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
1068591   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
1068592   +
1068593   +*** Generate dummy variables for GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmp5 ;
1068594   +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
1068595   +if missing( GRP_AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmp5 ) then do;
1068596   +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
1068597   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068598   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068599   +end;
MPRINT(EM_DIAGRAM):   end;
1068600   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068601   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068602   +   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmp5 , BEST12. );
1068603   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068604   +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1068605   +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
1068606   +   end;
MPRINT(EM_DIAGRAM):   end;
1068607   +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
1068608   +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
1068609   +   end;
MPRINT(EM_DIAGRAM):   end;
1068610   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068611   +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
1068612   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068613   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068614   +   end;
MPRINT(EM_DIAGRAM):   end;
1068615   +end;
MPRINT(EM_DIAGRAM):   end;
1068616   +
1068617   +*** Generate dummy variables for GRP_AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_AcceptedCmpTotal ;
1068618   +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
1068619   +if missing( GRP_AcceptedCmpTotal ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_AcceptedCmpTotal ) then do;
1068620   +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
1068621   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068622   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068623   +end;
MPRINT(EM_DIAGRAM):   end;
1068624   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068625   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068626   +   _dm12 = put( GRP_AcceptedCmpTotal , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_AcceptedCmpTotal , BEST12. );
1068627   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068628   +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1068629   +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
1068630   +   end;
MPRINT(EM_DIAGRAM):   end;
1068631   +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
1068632   +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
1068633   +   end;
MPRINT(EM_DIAGRAM):   end;
1068634   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068635   +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
1068636   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068637   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068638   +   end;
MPRINT(EM_DIAGRAM):   end;
1068639   +end;
MPRINT(EM_DIAGRAM):   end;
1068640   +
1068641   +*** Generate dummy variables for GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Frq ;
1068642   +drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 _3_6 _3_7 _3_8 ;
1068643   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1068644   +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
1068645   +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
1068646   +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
1068647   +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
1068648   +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
1068649   +_3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
1068650   +_3_6 = 0;
MPRINT(EM_DIAGRAM):   _3_6 = 0;
1068651   +_3_7 = 0;
MPRINT(EM_DIAGRAM):   _3_7 = 0;
1068652   +_3_8 = 0;
MPRINT(EM_DIAGRAM):   _3_8 = 0;
1068653   +if missing( GRP_Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Frq ) then do;
1068654   +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
1068655   +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
1068656   +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
1068657   +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
1068658   +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
1068659   +   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
1068660   +   _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
1068661   +   _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
1068662   +   _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
1068663   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068664   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068665   +end;
MPRINT(EM_DIAGRAM):   end;
1068666   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068667   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068668   +   _dm12 = put( GRP_Frq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Frq , BEST12. );
1068669   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068670   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1068671   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1068672   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1068673   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1068674   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1068675   +               _3_8 = 1;
MPRINT(EM_DIAGRAM):   _3_8 = 1;
1068676   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068677   +            end;
MPRINT(EM_DIAGRAM):   end;
1068678   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068679   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1068680   +                  _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
1068681   +                  _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
1068682   +                  _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
1068683   +                  _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
1068684   +                  _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
1068685   +                  _3_5 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
1068686   +                  _3_6 = -1;
MPRINT(EM_DIAGRAM):   _3_6 = -1;
1068687   +                  _3_7 = -1;
MPRINT(EM_DIAGRAM):   _3_7 = -1;
1068688   +                  _3_8 = -1;
MPRINT(EM_DIAGRAM):   _3_8 = -1;
1068689   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068690   +               end;
MPRINT(EM_DIAGRAM):   end;
1068691   +            end;
MPRINT(EM_DIAGRAM):   end;
1068692   +         end;
MPRINT(EM_DIAGRAM):   end;
1068693   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068694   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1068695   +               _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
1068696   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068697   +            end;
MPRINT(EM_DIAGRAM):   end;
1068698   +         end;
MPRINT(EM_DIAGRAM):   end;
1068699   +      end;
MPRINT(EM_DIAGRAM):   end;
1068700   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068701   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1068702   +            _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
1068703   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068704   +         end;
MPRINT(EM_DIAGRAM):   end;
1068705   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068706   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1068707   +               _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
1068708   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068709   +            end;
MPRINT(EM_DIAGRAM):   end;
1068710   +         end;
MPRINT(EM_DIAGRAM):   end;
1068711   +      end;
MPRINT(EM_DIAGRAM):   end;
1068712   +   end;
MPRINT(EM_DIAGRAM):   end;
1068713   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068714   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1068715   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1068716   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1068717   +               _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
1068718   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068719   +            end;
MPRINT(EM_DIAGRAM):   end;
1068720   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068721   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1068722   +                  _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
1068723   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068724   +               end;
MPRINT(EM_DIAGRAM):   end;
1068725   +            end;
MPRINT(EM_DIAGRAM):   end;
1068726   +         end;
MPRINT(EM_DIAGRAM):   end;
1068727   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068728   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1068729   +               _3_5 = 1;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
1068730   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068731   +            end;
MPRINT(EM_DIAGRAM):   end;
1068732   +         end;
MPRINT(EM_DIAGRAM):   end;
1068733   +      end;
MPRINT(EM_DIAGRAM):   end;
1068734   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068735   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1068736   +            _3_6 = 1;
MPRINT(EM_DIAGRAM):   _3_6 = 1;
1068737   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068738   +         end;
MPRINT(EM_DIAGRAM):   end;
1068739   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068740   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1068741   +               _3_7 = 1;
MPRINT(EM_DIAGRAM):   _3_7 = 1;
1068742   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068743   +            end;
MPRINT(EM_DIAGRAM):   end;
1068744   +         end;
MPRINT(EM_DIAGRAM):   end;
1068745   +      end;
MPRINT(EM_DIAGRAM):   end;
1068746   +   end;
MPRINT(EM_DIAGRAM):   end;
1068747   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1068748   +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
1068749   +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
1068750   +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
1068751   +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
1068752   +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
1068753   +      _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
1068754   +      _3_6 = .;
MPRINT(EM_DIAGRAM):   _3_6 = .;
1068755   +      _3_7 = .;
MPRINT(EM_DIAGRAM):   _3_7 = .;
1068756   +      _3_8 = .;
MPRINT(EM_DIAGRAM):   _3_8 = .;
1068757   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068758   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068759   +   end;
MPRINT(EM_DIAGRAM):   end;
1068760   +end;
MPRINT(EM_DIAGRAM):   end;
1068761   +
1068762   +*** Generate dummy variables for GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Income ;
1068763   +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 ;
1068764   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1068765   +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
1068766   +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
1068767   +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
1068768   +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
1068769   +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
1068770   +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
1068771   +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
1068772   +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
1068773   +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
1068774   +if missing( GRP_Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Income ) then do;
1068775   +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
1068776   +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
1068777   +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
1068778   +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
1068779   +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
1068780   +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
1068781   +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
1068782   +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
1068783   +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
1068784   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068785   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068786   +end;
MPRINT(EM_DIAGRAM):   end;
1068787   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068788   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068789   +   _dm12 = put( GRP_Income , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Income , BEST12. );
1068790   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068791   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1068792   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1068793   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1068794   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1068795   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1068796   +               _4_8 = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
1068797   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068798   +            end;
MPRINT(EM_DIAGRAM):   end;
1068799   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068800   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1068801   +                  _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
1068802   +                  _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
1068803   +                  _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
1068804   +                  _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
1068805   +                  _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
1068806   +                  _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
1068807   +                  _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
1068808   +                  _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
1068809   +                  _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
1068810   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068811   +               end;
MPRINT(EM_DIAGRAM):   end;
1068812   +            end;
MPRINT(EM_DIAGRAM):   end;
1068813   +         end;
MPRINT(EM_DIAGRAM):   end;
1068814   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068815   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1068816   +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
1068817   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068818   +            end;
MPRINT(EM_DIAGRAM):   end;
1068819   +         end;
MPRINT(EM_DIAGRAM):   end;
1068820   +      end;
MPRINT(EM_DIAGRAM):   end;
1068821   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068822   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1068823   +            _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
1068824   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068825   +         end;
MPRINT(EM_DIAGRAM):   end;
1068826   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068827   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1068828   +               _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
1068829   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068830   +            end;
MPRINT(EM_DIAGRAM):   end;
1068831   +         end;
MPRINT(EM_DIAGRAM):   end;
1068832   +      end;
MPRINT(EM_DIAGRAM):   end;
1068833   +   end;
MPRINT(EM_DIAGRAM):   end;
1068834   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068835   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1068836   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1068837   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1068838   +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
1068839   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068840   +            end;
MPRINT(EM_DIAGRAM):   end;
1068841   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068842   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1068843   +                  _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
1068844   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068845   +               end;
MPRINT(EM_DIAGRAM):   end;
1068846   +            end;
MPRINT(EM_DIAGRAM):   end;
1068847   +         end;
MPRINT(EM_DIAGRAM):   end;
1068848   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068849   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1068850   +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
1068851   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068852   +            end;
MPRINT(EM_DIAGRAM):   end;
1068853   +         end;
MPRINT(EM_DIAGRAM):   end;
1068854   +      end;
MPRINT(EM_DIAGRAM):   end;
1068855   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068856   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1068857   +            _4_6 = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
1068858   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068859   +         end;
MPRINT(EM_DIAGRAM):   end;
1068860   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068861   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1068862   +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
1068863   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068864   +            end;
MPRINT(EM_DIAGRAM):   end;
1068865   +         end;
MPRINT(EM_DIAGRAM):   end;
1068866   +      end;
MPRINT(EM_DIAGRAM):   end;
1068867   +   end;
MPRINT(EM_DIAGRAM):   end;
1068868   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1068869   +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
1068870   +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
1068871   +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
1068872   +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
1068873   +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
1068874   +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
1068875   +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
1068876   +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
1068877   +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
1068878   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068879   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068880   +   end;
MPRINT(EM_DIAGRAM):   end;
1068881   +end;
MPRINT(EM_DIAGRAM):   end;
1068882   +
1068883   +*** Generate dummy variables for GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntFishProducts ;
1068884   +drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 ;
1068885   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1068886   +_6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
1068887   +_6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
1068888   +_6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
1068889   +_6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
1068890   +_6_4 = 0;
MPRINT(EM_DIAGRAM):   _6_4 = 0;
1068891   +_6_5 = 0;
MPRINT(EM_DIAGRAM):   _6_5 = 0;
1068892   +_6_6 = 0;
MPRINT(EM_DIAGRAM):   _6_6 = 0;
1068893   +_6_7 = 0;
MPRINT(EM_DIAGRAM):   _6_7 = 0;
1068894   +if missing( GRP_MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntFishProducts ) then do;
1068895   +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
1068896   +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
1068897   +   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
1068898   +   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
1068899   +   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
1068900   +   _6_5 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
1068901   +   _6_6 = .;
MPRINT(EM_DIAGRAM):   _6_6 = .;
1068902   +   _6_7 = .;
MPRINT(EM_DIAGRAM):   _6_7 = .;
1068903   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1068904   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068905   +end;
MPRINT(EM_DIAGRAM):   end;
1068906   +else do;
MPRINT(EM_DIAGRAM):   else do;
1068907   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1068908   +   _dm12 = put( GRP_MntFishProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntFishProducts , BEST12. );
1068909   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1068910   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1068911   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1068912   +      if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
1068913   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1068914   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1068915   +               _6_7 = 1;
MPRINT(EM_DIAGRAM):   _6_7 = 1;
1068916   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068917   +            end;
MPRINT(EM_DIAGRAM):   end;
1068918   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1068919   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1068920   +                  _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
1068921   +                  _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
1068922   +                  _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
1068923   +                  _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
1068924   +                  _6_4 = -1;
MPRINT(EM_DIAGRAM):   _6_4 = -1;
1068925   +                  _6_5 = -1;
MPRINT(EM_DIAGRAM):   _6_5 = -1;
1068926   +                  _6_6 = -1;
MPRINT(EM_DIAGRAM):   _6_6 = -1;
1068927   +                  _6_7 = -1;
MPRINT(EM_DIAGRAM):   _6_7 = -1;
1068928   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068929   +               end;
MPRINT(EM_DIAGRAM):   end;
1068930   +            end;
MPRINT(EM_DIAGRAM):   end;
1068931   +         end;
MPRINT(EM_DIAGRAM):   end;
1068932   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068933   +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1068934   +               _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
1068935   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068936   +            end;
MPRINT(EM_DIAGRAM):   end;
1068937   +         end;
MPRINT(EM_DIAGRAM):   end;
1068938   +      end;
MPRINT(EM_DIAGRAM):   end;
1068939   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068940   +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1068941   +            _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
1068942   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068943   +         end;
MPRINT(EM_DIAGRAM):   end;
1068944   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068945   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1068946   +               _6_2 = 1;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
1068947   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068948   +            end;
MPRINT(EM_DIAGRAM):   end;
1068949   +         end;
MPRINT(EM_DIAGRAM):   end;
1068950   +      end;
MPRINT(EM_DIAGRAM):   end;
1068951   +   end;
MPRINT(EM_DIAGRAM):   end;
1068952   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1068953   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1068954   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1068955   +            _6_3 = 1;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
1068956   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068957   +         end;
MPRINT(EM_DIAGRAM):   end;
1068958   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068959   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1068960   +               _6_4 = 1;
MPRINT(EM_DIAGRAM):   _6_4 = 1;
1068961   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068962   +            end;
MPRINT(EM_DIAGRAM):   end;
1068963   +         end;
MPRINT(EM_DIAGRAM):   end;
1068964   +      end;
MPRINT(EM_DIAGRAM):   end;
1068965   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1068966   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1068967   +            _6_5 = 1;
MPRINT(EM_DIAGRAM):   _6_5 = 1;
1068968   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068969   +         end;
MPRINT(EM_DIAGRAM):   end;
1068970   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1068971   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1068972   +               _6_6 = 1;
MPRINT(EM_DIAGRAM):   _6_6 = 1;
1068973   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1068974   +            end;
MPRINT(EM_DIAGRAM):   end;
1068975   +         end;
MPRINT(EM_DIAGRAM):   end;
1068976   +      end;
MPRINT(EM_DIAGRAM):   end;
1068977   +   end;
MPRINT(EM_DIAGRAM):   end;
1068978   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1068979   +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
1068980   +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
1068981   +      _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
1068982   +      _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
1068983   +      _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
1068984   +      _6_5 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
1068985   +      _6_6 = .;
MPRINT(EM_DIAGRAM):   _6_6 = .;
1068986   +      _6_7 = .;
MPRINT(EM_DIAGRAM):   _6_7 = .;
1068987   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1068988   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1068989   +   end;
MPRINT(EM_DIAGRAM):   end;
1068990   +end;
MPRINT(EM_DIAGRAM):   end;
1068991   +
1068992   +*** Generate dummy variables for GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntMeatProducts ;
1068993   +drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 ;
1068994   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1068995   +_8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
1068996   +_8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
1068997   +_8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
1068998   +_8_3 = 0;
MPRINT(EM_DIAGRAM):   _8_3 = 0;
1068999   +_8_4 = 0;
MPRINT(EM_DIAGRAM):   _8_4 = 0;
1069000   +_8_5 = 0;
MPRINT(EM_DIAGRAM):   _8_5 = 0;
1069001   +_8_6 = 0;
MPRINT(EM_DIAGRAM):   _8_6 = 0;
1069002   +_8_7 = 0;
MPRINT(EM_DIAGRAM):   _8_7 = 0;
1069003   +_8_8 = 0;
MPRINT(EM_DIAGRAM):   _8_8 = 0;
1069004   +if missing( GRP_MntMeatProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntMeatProducts ) then do;
1069005   +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
1069006   +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
1069007   +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
1069008   +   _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
1069009   +   _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
1069010   +   _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
1069011   +   _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
1069012   +   _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
1069013   +   _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
1069014   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1069015   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069016   +end;
MPRINT(EM_DIAGRAM):   end;
1069017   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069018   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1069019   +   _dm12 = put( GRP_MntMeatProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntMeatProducts , BEST12. );
1069020   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1069021   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1069022   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1069023   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1069024   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1069025   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1069026   +               _8_8 = 1;
MPRINT(EM_DIAGRAM):   _8_8 = 1;
1069027   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069028   +            end;
MPRINT(EM_DIAGRAM):   end;
1069029   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069030   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1069031   +                  _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
1069032   +                  _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
1069033   +                  _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
1069034   +                  _8_3 = -1;
MPRINT(EM_DIAGRAM):   _8_3 = -1;
1069035   +                  _8_4 = -1;
MPRINT(EM_DIAGRAM):   _8_4 = -1;
1069036   +                  _8_5 = -1;
MPRINT(EM_DIAGRAM):   _8_5 = -1;
1069037   +                  _8_6 = -1;
MPRINT(EM_DIAGRAM):   _8_6 = -1;
1069038   +                  _8_7 = -1;
MPRINT(EM_DIAGRAM):   _8_7 = -1;
1069039   +                  _8_8 = -1;
MPRINT(EM_DIAGRAM):   _8_8 = -1;
1069040   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069041   +               end;
MPRINT(EM_DIAGRAM):   end;
1069042   +            end;
MPRINT(EM_DIAGRAM):   end;
1069043   +         end;
MPRINT(EM_DIAGRAM):   end;
1069044   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069045   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1069046   +               _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
1069047   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069048   +            end;
MPRINT(EM_DIAGRAM):   end;
1069049   +         end;
MPRINT(EM_DIAGRAM):   end;
1069050   +      end;
MPRINT(EM_DIAGRAM):   end;
1069051   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069052   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1069053   +            _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
1069054   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069055   +         end;
MPRINT(EM_DIAGRAM):   end;
1069056   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069057   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1069058   +               _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
1069059   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069060   +            end;
MPRINT(EM_DIAGRAM):   end;
1069061   +         end;
MPRINT(EM_DIAGRAM):   end;
1069062   +      end;
MPRINT(EM_DIAGRAM):   end;
1069063   +   end;
MPRINT(EM_DIAGRAM):   end;
1069064   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1069065   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1069066   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1069067   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1069068   +               _8_3 = 1;
MPRINT(EM_DIAGRAM):   _8_3 = 1;
1069069   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069070   +            end;
MPRINT(EM_DIAGRAM):   end;
1069071   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069072   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1069073   +                  _8_4 = 1;
MPRINT(EM_DIAGRAM):   _8_4 = 1;
1069074   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069075   +               end;
MPRINT(EM_DIAGRAM):   end;
1069076   +            end;
MPRINT(EM_DIAGRAM):   end;
1069077   +         end;
MPRINT(EM_DIAGRAM):   end;
1069078   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069079   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1069080   +               _8_5 = 1;
MPRINT(EM_DIAGRAM):   _8_5 = 1;
1069081   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069082   +            end;
MPRINT(EM_DIAGRAM):   end;
1069083   +         end;
MPRINT(EM_DIAGRAM):   end;
1069084   +      end;
MPRINT(EM_DIAGRAM):   end;
1069085   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069086   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1069087   +            _8_6 = 1;
MPRINT(EM_DIAGRAM):   _8_6 = 1;
1069088   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069089   +         end;
MPRINT(EM_DIAGRAM):   end;
1069090   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069091   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1069092   +               _8_7 = 1;
MPRINT(EM_DIAGRAM):   _8_7 = 1;
1069093   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069094   +            end;
MPRINT(EM_DIAGRAM):   end;
1069095   +         end;
MPRINT(EM_DIAGRAM):   end;
1069096   +      end;
MPRINT(EM_DIAGRAM):   end;
1069097   +   end;
MPRINT(EM_DIAGRAM):   end;
1069098   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1069099   +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
1069100   +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
1069101   +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
1069102   +      _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
1069103   +      _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
1069104   +      _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
1069105   +      _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
1069106   +      _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
1069107   +      _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
1069108   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1069109   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069110   +   end;
MPRINT(EM_DIAGRAM):   end;
1069111   +end;
MPRINT(EM_DIAGRAM):   end;
1069112   +
1069113   +*** Generate dummy variables for GRP_MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntSweetProducts ;
1069114   +drop _9_0 _9_1 _9_2 _9_3 _9_4 _9_5 _9_6 _9_7 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 _9_4 _9_5 _9_6 _9_7 ;
1069115   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1069116   +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
1069117   +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
1069118   +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
1069119   +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
1069120   +_9_4 = 0;
MPRINT(EM_DIAGRAM):   _9_4 = 0;
1069121   +_9_5 = 0;
MPRINT(EM_DIAGRAM):   _9_5 = 0;
1069122   +_9_6 = 0;
MPRINT(EM_DIAGRAM):   _9_6 = 0;
1069123   +_9_7 = 0;
MPRINT(EM_DIAGRAM):   _9_7 = 0;
1069124   +if missing( GRP_MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntSweetProducts ) then do;
1069125   +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
1069126   +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
1069127   +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
1069128   +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
1069129   +   _9_4 = .;
MPRINT(EM_DIAGRAM):   _9_4 = .;
1069130   +   _9_5 = .;
MPRINT(EM_DIAGRAM):   _9_5 = .;
1069131   +   _9_6 = .;
MPRINT(EM_DIAGRAM):   _9_6 = .;
1069132   +   _9_7 = .;
MPRINT(EM_DIAGRAM):   _9_7 = .;
1069133   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1069134   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069135   +end;
MPRINT(EM_DIAGRAM):   end;
1069136   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069137   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1069138   +   _dm12 = put( GRP_MntSweetProducts , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntSweetProducts , BEST12. );
1069139   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1069140   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1069141   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1069142   +      if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
1069143   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1069144   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1069145   +               _9_7 = 1;
MPRINT(EM_DIAGRAM):   _9_7 = 1;
1069146   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069147   +            end;
MPRINT(EM_DIAGRAM):   end;
1069148   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069149   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1069150   +                  _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
1069151   +                  _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
1069152   +                  _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
1069153   +                  _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
1069154   +                  _9_4 = -1;
MPRINT(EM_DIAGRAM):   _9_4 = -1;
1069155   +                  _9_5 = -1;
MPRINT(EM_DIAGRAM):   _9_5 = -1;
1069156   +                  _9_6 = -1;
MPRINT(EM_DIAGRAM):   _9_6 = -1;
1069157   +                  _9_7 = -1;
MPRINT(EM_DIAGRAM):   _9_7 = -1;
1069158   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069159   +               end;
MPRINT(EM_DIAGRAM):   end;
1069160   +            end;
MPRINT(EM_DIAGRAM):   end;
1069161   +         end;
MPRINT(EM_DIAGRAM):   end;
1069162   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069163   +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1069164   +               _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
1069165   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069166   +            end;
MPRINT(EM_DIAGRAM):   end;
1069167   +         end;
MPRINT(EM_DIAGRAM):   end;
1069168   +      end;
MPRINT(EM_DIAGRAM):   end;
1069169   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069170   +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1069171   +            _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
1069172   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069173   +         end;
MPRINT(EM_DIAGRAM):   end;
1069174   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069175   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1069176   +               _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
1069177   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069178   +            end;
MPRINT(EM_DIAGRAM):   end;
1069179   +         end;
MPRINT(EM_DIAGRAM):   end;
1069180   +      end;
MPRINT(EM_DIAGRAM):   end;
1069181   +   end;
MPRINT(EM_DIAGRAM):   end;
1069182   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1069183   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1069184   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1069185   +            _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
1069186   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069187   +         end;
MPRINT(EM_DIAGRAM):   end;
1069188   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069189   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1069190   +               _9_4 = 1;
MPRINT(EM_DIAGRAM):   _9_4 = 1;
1069191   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069192   +            end;
MPRINT(EM_DIAGRAM):   end;
1069193   +         end;
MPRINT(EM_DIAGRAM):   end;
1069194   +      end;
MPRINT(EM_DIAGRAM):   end;
1069195   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069196   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1069197   +            _9_5 = 1;
MPRINT(EM_DIAGRAM):   _9_5 = 1;
1069198   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069199   +         end;
MPRINT(EM_DIAGRAM):   end;
1069200   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069201   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1069202   +               _9_6 = 1;
MPRINT(EM_DIAGRAM):   _9_6 = 1;
1069203   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069204   +            end;
MPRINT(EM_DIAGRAM):   end;
1069205   +         end;
MPRINT(EM_DIAGRAM):   end;
1069206   +      end;
MPRINT(EM_DIAGRAM):   end;
1069207   +   end;
MPRINT(EM_DIAGRAM):   end;
1069208   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1069209   +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
1069210   +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
1069211   +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
1069212   +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
1069213   +      _9_4 = .;
MPRINT(EM_DIAGRAM):   _9_4 = .;
1069214   +      _9_5 = .;
MPRINT(EM_DIAGRAM):   _9_5 = .;
1069215   +      _9_6 = .;
MPRINT(EM_DIAGRAM):   _9_6 = .;
1069216   +      _9_7 = .;
MPRINT(EM_DIAGRAM):   _9_7 = .;
1069217   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1069218   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069219   +   end;
MPRINT(EM_DIAGRAM):   end;
1069220   +end;
MPRINT(EM_DIAGRAM):   end;
1069221   +
1069222   +*** Generate dummy variables for GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_MntWines ;
1069223   +drop _10_0 _10_1 _10_2 _10_3 _10_4 _10_5 _10_6 _10_7 _10_8 ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 _10_4 _10_5 _10_6 _10_7 _10_8 ;
1069224   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1069225   +_10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
1069226   +_10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
1069227   +_10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
1069228   +_10_3 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
1069229   +_10_4 = 0;
MPRINT(EM_DIAGRAM):   _10_4 = 0;
1069230   +_10_5 = 0;
MPRINT(EM_DIAGRAM):   _10_5 = 0;
1069231   +_10_6 = 0;
MPRINT(EM_DIAGRAM):   _10_6 = 0;
1069232   +_10_7 = 0;
MPRINT(EM_DIAGRAM):   _10_7 = 0;
1069233   +_10_8 = 0;
MPRINT(EM_DIAGRAM):   _10_8 = 0;
1069234   +if missing( GRP_MntWines ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_MntWines ) then do;
1069235   +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
1069236   +   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
1069237   +   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
1069238   +   _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
1069239   +   _10_4 = .;
MPRINT(EM_DIAGRAM):   _10_4 = .;
1069240   +   _10_5 = .;
MPRINT(EM_DIAGRAM):   _10_5 = .;
1069241   +   _10_6 = .;
MPRINT(EM_DIAGRAM):   _10_6 = .;
1069242   +   _10_7 = .;
MPRINT(EM_DIAGRAM):   _10_7 = .;
1069243   +   _10_8 = .;
MPRINT(EM_DIAGRAM):   _10_8 = .;
1069244   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1069245   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069246   +end;
MPRINT(EM_DIAGRAM):   end;
1069247   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069248   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1069249   +   _dm12 = put( GRP_MntWines , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_MntWines , BEST12. );
1069250   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1069251   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1069252   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1069253   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1069254   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1069255   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1069256   +               _10_8 = 1;
MPRINT(EM_DIAGRAM):   _10_8 = 1;
1069257   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069258   +            end;
MPRINT(EM_DIAGRAM):   end;
1069259   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069260   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1069261   +                  _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
1069262   +                  _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
1069263   +                  _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
1069264   +                  _10_3 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
1069265   +                  _10_4 = -1;
MPRINT(EM_DIAGRAM):   _10_4 = -1;
1069266   +                  _10_5 = -1;
MPRINT(EM_DIAGRAM):   _10_5 = -1;
1069267   +                  _10_6 = -1;
MPRINT(EM_DIAGRAM):   _10_6 = -1;
1069268   +                  _10_7 = -1;
MPRINT(EM_DIAGRAM):   _10_7 = -1;
1069269   +                  _10_8 = -1;
MPRINT(EM_DIAGRAM):   _10_8 = -1;
1069270   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069271   +               end;
MPRINT(EM_DIAGRAM):   end;
1069272   +            end;
MPRINT(EM_DIAGRAM):   end;
1069273   +         end;
MPRINT(EM_DIAGRAM):   end;
1069274   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069275   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1069276   +               _10_0 = 1;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
1069277   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069278   +            end;
MPRINT(EM_DIAGRAM):   end;
1069279   +         end;
MPRINT(EM_DIAGRAM):   end;
1069280   +      end;
MPRINT(EM_DIAGRAM):   end;
1069281   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069282   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1069283   +            _10_1 = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
1069284   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069285   +         end;
MPRINT(EM_DIAGRAM):   end;
1069286   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069287   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1069288   +               _10_2 = 1;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
1069289   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069290   +            end;
MPRINT(EM_DIAGRAM):   end;
1069291   +         end;
MPRINT(EM_DIAGRAM):   end;
1069292   +      end;
MPRINT(EM_DIAGRAM):   end;
1069293   +   end;
MPRINT(EM_DIAGRAM):   end;
1069294   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1069295   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1069296   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1069297   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1069298   +               _10_3 = 1;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
1069299   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069300   +            end;
MPRINT(EM_DIAGRAM):   end;
1069301   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069302   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1069303   +                  _10_4 = 1;
MPRINT(EM_DIAGRAM):   _10_4 = 1;
1069304   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069305   +               end;
MPRINT(EM_DIAGRAM):   end;
1069306   +            end;
MPRINT(EM_DIAGRAM):   end;
1069307   +         end;
MPRINT(EM_DIAGRAM):   end;
1069308   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069309   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1069310   +               _10_5 = 1;
MPRINT(EM_DIAGRAM):   _10_5 = 1;
1069311   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069312   +            end;
MPRINT(EM_DIAGRAM):   end;
1069313   +         end;
MPRINT(EM_DIAGRAM):   end;
1069314   +      end;
MPRINT(EM_DIAGRAM):   end;
1069315   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069316   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1069317   +            _10_6 = 1;
MPRINT(EM_DIAGRAM):   _10_6 = 1;
1069318   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069319   +         end;
MPRINT(EM_DIAGRAM):   end;
1069320   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069321   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1069322   +               _10_7 = 1;
MPRINT(EM_DIAGRAM):   _10_7 = 1;
1069323   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069324   +            end;
MPRINT(EM_DIAGRAM):   end;
1069325   +         end;
MPRINT(EM_DIAGRAM):   end;
1069326   +      end;
MPRINT(EM_DIAGRAM):   end;
1069327   +   end;
MPRINT(EM_DIAGRAM):   end;
1069328   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1069329   +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
1069330   +      _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
1069331   +      _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
1069332   +      _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
1069333   +      _10_4 = .;
MPRINT(EM_DIAGRAM):   _10_4 = .;
1069334   +      _10_5 = .;
MPRINT(EM_DIAGRAM):   _10_5 = .;
1069335   +      _10_6 = .;
MPRINT(EM_DIAGRAM):   _10_6 = .;
1069336   +      _10_7 = .;
MPRINT(EM_DIAGRAM):   _10_7 = .;
1069337   +      _10_8 = .;
MPRINT(EM_DIAGRAM):   _10_8 = .;
1069338   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1069339   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069340   +   end;
MPRINT(EM_DIAGRAM):   end;
1069341   +end;
MPRINT(EM_DIAGRAM):   end;
1069342   +
1069343   +*** Generate dummy variables for GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumCatalogPurchases ;
1069344   +drop _11_0 _11_1 _11_2 _11_3 _11_4 ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 _11_4 ;
1069345   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1069346   +_11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
1069347   +_11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
1069348   +_11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
1069349   +_11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
1069350   +_11_4 = 0;
MPRINT(EM_DIAGRAM):   _11_4 = 0;
1069351   +if missing( GRP_NumCatalogPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumCatalogPurchases ) then do;
1069352   +   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
1069353   +   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
1069354   +   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
1069355   +   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
1069356   +   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
The SAS System
 
1069357   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1069358   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069359   +end;
MPRINT(EM_DIAGRAM):   end;
1069360   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069361   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1069362   +   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumCatalogPurchases , BEST12. );
1069363   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1069364   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1069365   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1069366   +      if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1069367   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1069368   +            _11_0 = 1;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
1069369   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069370   +         end;
MPRINT(EM_DIAGRAM):   end;
1069371   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069372   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1069373   +               _11_1 = 1;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
1069374   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069375   +            end;
MPRINT(EM_DIAGRAM):   end;
1069376   +         end;
MPRINT(EM_DIAGRAM):   end;
1069377   +      end;
MPRINT(EM_DIAGRAM):   end;
1069378   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069379   +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1069380   +            _11_2 = 1;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
1069381   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069382   +         end;
MPRINT(EM_DIAGRAM):   end;
1069383   +      end;
MPRINT(EM_DIAGRAM):   end;
1069384   +   end;
MPRINT(EM_DIAGRAM):   end;
1069385   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1069386   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1069387   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1069388   +            _11_3 = 1;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
1069389   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069390   +         end;
MPRINT(EM_DIAGRAM):   end;
1069391   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069392   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1069393   +               _11_4 = 1;
MPRINT(EM_DIAGRAM):   _11_4 = 1;
1069394   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069395   +            end;
MPRINT(EM_DIAGRAM):   end;
1069396   +         end;
MPRINT(EM_DIAGRAM):   end;
1069397   +      end;
MPRINT(EM_DIAGRAM):   end;
1069398   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069399   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1069400   +            _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
1069401   +            _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
1069402   +            _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
1069403   +            _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
1069404   +            _11_4 = -1;
MPRINT(EM_DIAGRAM):   _11_4 = -1;
1069405   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069406   +         end;
MPRINT(EM_DIAGRAM):   end;
1069407   +      end;
MPRINT(EM_DIAGRAM):   end;
1069408   +   end;
MPRINT(EM_DIAGRAM):   end;
1069409   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1069410   +      _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
1069411   +      _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
1069412   +      _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
1069413   +      _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
1069414   +      _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
1069415   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1069416   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069417   +   end;
MPRINT(EM_DIAGRAM):   end;
1069418   +end;
MPRINT(EM_DIAGRAM):   end;
1069419   +
1069420   +*** Generate dummy variables for GRP_NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NumWebVisitsMonth ;
1069421   +drop _14_0 _14_1 _14_2 _14_3 _14_4 _14_5 _14_6 ;
MPRINT(EM_DIAGRAM):   drop _14_0 _14_1 _14_2 _14_3 _14_4 _14_5 _14_6 ;
1069422   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1069423   +_14_0 = 0;
MPRINT(EM_DIAGRAM):   _14_0 = 0;
1069424   +_14_1 = 0;
MPRINT(EM_DIAGRAM):   _14_1 = 0;
1069425   +_14_2 = 0;
MPRINT(EM_DIAGRAM):   _14_2 = 0;
1069426   +_14_3 = 0;
MPRINT(EM_DIAGRAM):   _14_3 = 0;
1069427   +_14_4 = 0;
MPRINT(EM_DIAGRAM):   _14_4 = 0;
1069428   +_14_5 = 0;
MPRINT(EM_DIAGRAM):   _14_5 = 0;
1069429   +_14_6 = 0;
MPRINT(EM_DIAGRAM):   _14_6 = 0;
1069430   +if missing( GRP_NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NumWebVisitsMonth ) then do;
1069431   +   _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
1069432   +   _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
1069433   +   _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
1069434   +   _14_3 = .;
MPRINT(EM_DIAGRAM):   _14_3 = .;
1069435   +   _14_4 = .;
MPRINT(EM_DIAGRAM):   _14_4 = .;
1069436   +   _14_5 = .;
MPRINT(EM_DIAGRAM):   _14_5 = .;
1069437   +   _14_6 = .;
MPRINT(EM_DIAGRAM):   _14_6 = .;
1069438   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1069439   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069440   +end;
MPRINT(EM_DIAGRAM):   end;
1069441   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069442   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1069443   +   _dm12 = put( GRP_NumWebVisitsMonth , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NumWebVisitsMonth , BEST12. );
1069444   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1069445   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1069446   +   if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
1069447   +      if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
1069448   +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1069449   +            _14_0 = 1;
MPRINT(EM_DIAGRAM):   _14_0 = 1;
1069450   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069451   +         end;
MPRINT(EM_DIAGRAM):   end;
1069452   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069453   +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1069454   +               _14_1 = 1;
MPRINT(EM_DIAGRAM):   _14_1 = 1;
1069455   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069456   +            end;
MPRINT(EM_DIAGRAM):   end;
1069457   +         end;
MPRINT(EM_DIAGRAM):   end;
1069458   +      end;
MPRINT(EM_DIAGRAM):   end;
1069459   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069460   +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1069461   +            _14_2 = 1;
MPRINT(EM_DIAGRAM):   _14_2 = 1;
1069462   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069463   +         end;
MPRINT(EM_DIAGRAM):   end;
1069464   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069465   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1069466   +               _14_3 = 1;
MPRINT(EM_DIAGRAM):   _14_3 = 1;
1069467   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069468   +            end;
MPRINT(EM_DIAGRAM):   end;
1069469   +         end;
MPRINT(EM_DIAGRAM):   end;
1069470   +      end;
MPRINT(EM_DIAGRAM):   end;
1069471   +   end;
MPRINT(EM_DIAGRAM):   end;
1069472   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1069473   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1069474   +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1069475   +            _14_4 = 1;
MPRINT(EM_DIAGRAM):   _14_4 = 1;
1069476   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069477   +         end;
MPRINT(EM_DIAGRAM):   end;
1069478   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069479   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1069480   +               _14_5 = 1;
MPRINT(EM_DIAGRAM):   _14_5 = 1;
1069481   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069482   +            end;
MPRINT(EM_DIAGRAM):   end;
1069483   +         end;
MPRINT(EM_DIAGRAM):   end;
1069484   +      end;
MPRINT(EM_DIAGRAM):   end;
1069485   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069486   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1069487   +            _14_6 = 1;
MPRINT(EM_DIAGRAM):   _14_6 = 1;
1069488   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069489   +         end;
MPRINT(EM_DIAGRAM):   end;
1069490   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069491   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1069492   +               _14_0 = -1;
MPRINT(EM_DIAGRAM):   _14_0 = -1;
1069493   +               _14_1 = -1;
MPRINT(EM_DIAGRAM):   _14_1 = -1;
1069494   +               _14_2 = -1;
MPRINT(EM_DIAGRAM):   _14_2 = -1;
1069495   +               _14_3 = -1;
MPRINT(EM_DIAGRAM):   _14_3 = -1;
1069496   +               _14_4 = -1;
MPRINT(EM_DIAGRAM):   _14_4 = -1;
1069497   +               _14_5 = -1;
MPRINT(EM_DIAGRAM):   _14_5 = -1;
1069498   +               _14_6 = -1;
MPRINT(EM_DIAGRAM):   _14_6 = -1;
1069499   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069500   +            end;
MPRINT(EM_DIAGRAM):   end;
1069501   +         end;
MPRINT(EM_DIAGRAM):   end;
1069502   +      end;
MPRINT(EM_DIAGRAM):   end;
1069503   +   end;
MPRINT(EM_DIAGRAM):   end;
1069504   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1069505   +      _14_0 = .;
MPRINT(EM_DIAGRAM):   _14_0 = .;
1069506   +      _14_1 = .;
MPRINT(EM_DIAGRAM):   _14_1 = .;
1069507   +      _14_2 = .;
MPRINT(EM_DIAGRAM):   _14_2 = .;
1069508   +      _14_3 = .;
MPRINT(EM_DIAGRAM):   _14_3 = .;
1069509   +      _14_4 = .;
MPRINT(EM_DIAGRAM):   _14_4 = .;
1069510   +      _14_5 = .;
MPRINT(EM_DIAGRAM):   _14_5 = .;
1069511   +      _14_6 = .;
MPRINT(EM_DIAGRAM):   _14_6 = .;
1069512   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1069513   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069514   +   end;
MPRINT(EM_DIAGRAM):   end;
1069515   +end;
MPRINT(EM_DIAGRAM):   end;
1069516   +
1069517   +*** Generate dummy variables for GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_RMntFrq ;
1069518   +drop _16_0 _16_1 _16_2 _16_3 _16_4 _16_5 _16_6 _16_7 _16_8 ;
MPRINT(EM_DIAGRAM):   drop _16_0 _16_1 _16_2 _16_3 _16_4 _16_5 _16_6 _16_7 _16_8 ;
1069519   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1069520   +_16_0 = 0;
MPRINT(EM_DIAGRAM):   _16_0 = 0;
1069521   +_16_1 = 0;
MPRINT(EM_DIAGRAM):   _16_1 = 0;
1069522   +_16_2 = 0;
MPRINT(EM_DIAGRAM):   _16_2 = 0;
1069523   +_16_3 = 0;
MPRINT(EM_DIAGRAM):   _16_3 = 0;
1069524   +_16_4 = 0;
MPRINT(EM_DIAGRAM):   _16_4 = 0;
1069525   +_16_5 = 0;
MPRINT(EM_DIAGRAM):   _16_5 = 0;
1069526   +_16_6 = 0;
MPRINT(EM_DIAGRAM):   _16_6 = 0;
1069527   +_16_7 = 0;
MPRINT(EM_DIAGRAM):   _16_7 = 0;
1069528   +_16_8 = 0;
MPRINT(EM_DIAGRAM):   _16_8 = 0;
1069529   +if missing( GRP_RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_RMntFrq ) then do;
1069530   +   _16_0 = .;
MPRINT(EM_DIAGRAM):   _16_0 = .;
1069531   +   _16_1 = .;
MPRINT(EM_DIAGRAM):   _16_1 = .;
1069532   +   _16_2 = .;
MPRINT(EM_DIAGRAM):   _16_2 = .;
1069533   +   _16_3 = .;
MPRINT(EM_DIAGRAM):   _16_3 = .;
1069534   +   _16_4 = .;
MPRINT(EM_DIAGRAM):   _16_4 = .;
1069535   +   _16_5 = .;
MPRINT(EM_DIAGRAM):   _16_5 = .;
1069536   +   _16_6 = .;
MPRINT(EM_DIAGRAM):   _16_6 = .;
1069537   +   _16_7 = .;
MPRINT(EM_DIAGRAM):   _16_7 = .;
1069538   +   _16_8 = .;
MPRINT(EM_DIAGRAM):   _16_8 = .;
1069539   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1069540   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069541   +end;
MPRINT(EM_DIAGRAM):   end;
1069542   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069543   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1069544   +   _dm12 = put( GRP_RMntFrq , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_RMntFrq , BEST12. );
1069545   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1069546   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1069547   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1069548   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1069549   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1069550   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1069551   +               _16_8 = 1;
MPRINT(EM_DIAGRAM):   _16_8 = 1;
1069552   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069553   +            end;
MPRINT(EM_DIAGRAM):   end;
1069554   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069555   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1069556   +                  _16_0 = -1;
MPRINT(EM_DIAGRAM):   _16_0 = -1;
1069557   +                  _16_1 = -1;
MPRINT(EM_DIAGRAM):   _16_1 = -1;
1069558   +                  _16_2 = -1;
MPRINT(EM_DIAGRAM):   _16_2 = -1;
1069559   +                  _16_3 = -1;
MPRINT(EM_DIAGRAM):   _16_3 = -1;
1069560   +                  _16_4 = -1;
MPRINT(EM_DIAGRAM):   _16_4 = -1;
1069561   +                  _16_5 = -1;
MPRINT(EM_DIAGRAM):   _16_5 = -1;
1069562   +                  _16_6 = -1;
MPRINT(EM_DIAGRAM):   _16_6 = -1;
1069563   +                  _16_7 = -1;
MPRINT(EM_DIAGRAM):   _16_7 = -1;
1069564   +                  _16_8 = -1;
MPRINT(EM_DIAGRAM):   _16_8 = -1;
1069565   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069566   +               end;
MPRINT(EM_DIAGRAM):   end;
1069567   +            end;
MPRINT(EM_DIAGRAM):   end;
1069568   +         end;
MPRINT(EM_DIAGRAM):   end;
1069569   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069570   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1069571   +               _16_0 = 1;
MPRINT(EM_DIAGRAM):   _16_0 = 1;
1069572   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069573   +            end;
MPRINT(EM_DIAGRAM):   end;
1069574   +         end;
MPRINT(EM_DIAGRAM):   end;
1069575   +      end;
MPRINT(EM_DIAGRAM):   end;
1069576   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069577   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1069578   +            _16_1 = 1;
MPRINT(EM_DIAGRAM):   _16_1 = 1;
1069579   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069580   +         end;
MPRINT(EM_DIAGRAM):   end;
1069581   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069582   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1069583   +               _16_2 = 1;
MPRINT(EM_DIAGRAM):   _16_2 = 1;
1069584   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069585   +            end;
MPRINT(EM_DIAGRAM):   end;
1069586   +         end;
MPRINT(EM_DIAGRAM):   end;
1069587   +      end;
MPRINT(EM_DIAGRAM):   end;
1069588   +   end;
MPRINT(EM_DIAGRAM):   end;
1069589   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1069590   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1069591   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1069592   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1069593   +               _16_3 = 1;
MPRINT(EM_DIAGRAM):   _16_3 = 1;
1069594   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069595   +            end;
MPRINT(EM_DIAGRAM):   end;
1069596   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069597   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1069598   +                  _16_4 = 1;
MPRINT(EM_DIAGRAM):   _16_4 = 1;
1069599   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069600   +               end;
MPRINT(EM_DIAGRAM):   end;
1069601   +            end;
MPRINT(EM_DIAGRAM):   end;
1069602   +         end;
MPRINT(EM_DIAGRAM):   end;
1069603   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069604   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1069605   +               _16_5 = 1;
MPRINT(EM_DIAGRAM):   _16_5 = 1;
1069606   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069607   +            end;
MPRINT(EM_DIAGRAM):   end;
1069608   +         end;
MPRINT(EM_DIAGRAM):   end;
1069609   +      end;
MPRINT(EM_DIAGRAM):   end;
1069610   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069611   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1069612   +            _16_6 = 1;
MPRINT(EM_DIAGRAM):   _16_6 = 1;
1069613   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069614   +         end;
MPRINT(EM_DIAGRAM):   end;
1069615   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069616   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1069617   +               _16_7 = 1;
MPRINT(EM_DIAGRAM):   _16_7 = 1;
1069618   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069619   +            end;
MPRINT(EM_DIAGRAM):   end;
1069620   +         end;
MPRINT(EM_DIAGRAM):   end;
1069621   +      end;
MPRINT(EM_DIAGRAM):   end;
1069622   +   end;
MPRINT(EM_DIAGRAM):   end;
1069623   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1069624   +      _16_0 = .;
MPRINT(EM_DIAGRAM):   _16_0 = .;
1069625   +      _16_1 = .;
MPRINT(EM_DIAGRAM):   _16_1 = .;
1069626   +      _16_2 = .;
MPRINT(EM_DIAGRAM):   _16_2 = .;
1069627   +      _16_3 = .;
MPRINT(EM_DIAGRAM):   _16_3 = .;
1069628   +      _16_4 = .;
MPRINT(EM_DIAGRAM):   _16_4 = .;
1069629   +      _16_5 = .;
MPRINT(EM_DIAGRAM):   _16_5 = .;
1069630   +      _16_6 = .;
MPRINT(EM_DIAGRAM):   _16_6 = .;
1069631   +      _16_7 = .;
MPRINT(EM_DIAGRAM):   _16_7 = .;
1069632   +      _16_8 = .;
MPRINT(EM_DIAGRAM):   _16_8 = .;
1069633   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1069634   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069635   +   end;
MPRINT(EM_DIAGRAM):   end;
1069636   +end;
MPRINT(EM_DIAGRAM):   end;
1069637   +
1069638   +*** Generate dummy variables for GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Recency ;
1069639   +drop _17_0 _17_1 _17_2 _17_3 _17_4 _17_5 _17_6 _17_7 _17_8 ;
MPRINT(EM_DIAGRAM):   drop _17_0 _17_1 _17_2 _17_3 _17_4 _17_5 _17_6 _17_7 _17_8 ;
1069640   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
1069641   +_17_0 = 0;
MPRINT(EM_DIAGRAM):   _17_0 = 0;
1069642   +_17_1 = 0;
MPRINT(EM_DIAGRAM):   _17_1 = 0;
1069643   +_17_2 = 0;
MPRINT(EM_DIAGRAM):   _17_2 = 0;
1069644   +_17_3 = 0;
MPRINT(EM_DIAGRAM):   _17_3 = 0;
1069645   +_17_4 = 0;
MPRINT(EM_DIAGRAM):   _17_4 = 0;
1069646   +_17_5 = 0;
MPRINT(EM_DIAGRAM):   _17_5 = 0;
1069647   +_17_6 = 0;
MPRINT(EM_DIAGRAM):   _17_6 = 0;
1069648   +_17_7 = 0;
MPRINT(EM_DIAGRAM):   _17_7 = 0;
1069649   +_17_8 = 0;
MPRINT(EM_DIAGRAM):   _17_8 = 0;
1069650   +if missing( GRP_Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Recency ) then do;
1069651   +   _17_0 = .;
MPRINT(EM_DIAGRAM):   _17_0 = .;
1069652   +   _17_1 = .;
MPRINT(EM_DIAGRAM):   _17_1 = .;
1069653   +   _17_2 = .;
MPRINT(EM_DIAGRAM):   _17_2 = .;
1069654   +   _17_3 = .;
MPRINT(EM_DIAGRAM):   _17_3 = .;
1069655   +   _17_4 = .;
MPRINT(EM_DIAGRAM):   _17_4 = .;
1069656   +   _17_5 = .;
MPRINT(EM_DIAGRAM):   _17_5 = .;
1069657   +   _17_6 = .;
MPRINT(EM_DIAGRAM):   _17_6 = .;
1069658   +   _17_7 = .;
MPRINT(EM_DIAGRAM):   _17_7 = .;
1069659   +   _17_8 = .;
MPRINT(EM_DIAGRAM):   _17_8 = .;
1069660   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1069661   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069662   +end;
MPRINT(EM_DIAGRAM):   end;
1069663   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069664   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
1069665   +   _dm12 = put( GRP_Recency , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Recency , BEST12. );
1069666   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1069667   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
1069668   +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
1069669   +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
1069670   +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
1069671   +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
1069672   +               _17_8 = 1;
MPRINT(EM_DIAGRAM):   _17_8 = 1;
1069673   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069674   +            end;
MPRINT(EM_DIAGRAM):   end;
1069675   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069676   +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
1069677   +                  _17_0 = -1;
MPRINT(EM_DIAGRAM):   _17_0 = -1;
1069678   +                  _17_1 = -1;
MPRINT(EM_DIAGRAM):   _17_1 = -1;
1069679   +                  _17_2 = -1;
MPRINT(EM_DIAGRAM):   _17_2 = -1;
1069680   +                  _17_3 = -1;
MPRINT(EM_DIAGRAM):   _17_3 = -1;
1069681   +                  _17_4 = -1;
MPRINT(EM_DIAGRAM):   _17_4 = -1;
1069682   +                  _17_5 = -1;
MPRINT(EM_DIAGRAM):   _17_5 = -1;
1069683   +                  _17_6 = -1;
MPRINT(EM_DIAGRAM):   _17_6 = -1;
1069684   +                  _17_7 = -1;
MPRINT(EM_DIAGRAM):   _17_7 = -1;
1069685   +                  _17_8 = -1;
MPRINT(EM_DIAGRAM):   _17_8 = -1;
1069686   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069687   +               end;
MPRINT(EM_DIAGRAM):   end;
1069688   +            end;
MPRINT(EM_DIAGRAM):   end;
1069689   +         end;
MPRINT(EM_DIAGRAM):   end;
1069690   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069691   +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
1069692   +               _17_0 = 1;
MPRINT(EM_DIAGRAM):   _17_0 = 1;
1069693   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069694   +            end;
MPRINT(EM_DIAGRAM):   end;
1069695   +         end;
MPRINT(EM_DIAGRAM):   end;
1069696   +      end;
MPRINT(EM_DIAGRAM):   end;
1069697   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069698   +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
1069699   +            _17_1 = 1;
MPRINT(EM_DIAGRAM):   _17_1 = 1;
1069700   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069701   +         end;
MPRINT(EM_DIAGRAM):   end;
1069702   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069703   +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
1069704   +               _17_2 = 1;
MPRINT(EM_DIAGRAM):   _17_2 = 1;
1069705   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069706   +            end;
MPRINT(EM_DIAGRAM):   end;
1069707   +         end;
MPRINT(EM_DIAGRAM):   end;
1069708   +      end;
MPRINT(EM_DIAGRAM):   end;
1069709   +   end;
MPRINT(EM_DIAGRAM):   end;
1069710   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1069711   +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
1069712   +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
1069713   +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
1069714   +               _17_3 = 1;
MPRINT(EM_DIAGRAM):   _17_3 = 1;
1069715   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069716   +            end;
MPRINT(EM_DIAGRAM):   end;
1069717   +            else do;
MPRINT(EM_DIAGRAM):   else do;
1069718   +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
1069719   +                  _17_4 = 1;
MPRINT(EM_DIAGRAM):   _17_4 = 1;
1069720   +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069721   +               end;
MPRINT(EM_DIAGRAM):   end;
1069722   +            end;
MPRINT(EM_DIAGRAM):   end;
1069723   +         end;
MPRINT(EM_DIAGRAM):   end;
1069724   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069725   +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
1069726   +               _17_5 = 1;
MPRINT(EM_DIAGRAM):   _17_5 = 1;
1069727   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069728   +            end;
MPRINT(EM_DIAGRAM):   end;
1069729   +         end;
MPRINT(EM_DIAGRAM):   end;
1069730   +      end;
MPRINT(EM_DIAGRAM):   end;
1069731   +      else do;
MPRINT(EM_DIAGRAM):   else do;
1069732   +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
1069733   +            _17_6 = 1;
MPRINT(EM_DIAGRAM):   _17_6 = 1;
1069734   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069735   +         end;
MPRINT(EM_DIAGRAM):   end;
1069736   +         else do;
MPRINT(EM_DIAGRAM):   else do;
1069737   +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
1069738   +               _17_7 = 1;
MPRINT(EM_DIAGRAM):   _17_7 = 1;
1069739   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
1069740   +            end;
MPRINT(EM_DIAGRAM):   end;
1069741   +         end;
MPRINT(EM_DIAGRAM):   end;
1069742   +      end;
MPRINT(EM_DIAGRAM):   end;
1069743   +   end;
MPRINT(EM_DIAGRAM):   end;
1069744   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
1069745   +      _17_0 = .;
MPRINT(EM_DIAGRAM):   _17_0 = .;
1069746   +      _17_1 = .;
MPRINT(EM_DIAGRAM):   _17_1 = .;
1069747   +      _17_2 = .;
MPRINT(EM_DIAGRAM):   _17_2 = .;
1069748   +      _17_3 = .;
MPRINT(EM_DIAGRAM):   _17_3 = .;
1069749   +      _17_4 = .;
MPRINT(EM_DIAGRAM):   _17_4 = .;
1069750   +      _17_5 = .;
MPRINT(EM_DIAGRAM):   _17_5 = .;
1069751   +      _17_6 = .;
MPRINT(EM_DIAGRAM):   _17_6 = .;
1069752   +      _17_7 = .;
MPRINT(EM_DIAGRAM):   _17_7 = .;
1069753   +      _17_8 = .;
MPRINT(EM_DIAGRAM):   _17_8 = .;
1069754   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
1069755   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1069756   +   end;
MPRINT(EM_DIAGRAM):   end;
1069757   +end;
MPRINT(EM_DIAGRAM):   end;
1069758   +
1069759   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
1069760   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
1069761   +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
1069762   +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
1069763   +   goto REG3DR1;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
1069764   +end;
MPRINT(EM_DIAGRAM):   end;
1069765   +
1069766   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
1069767   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
1069768   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
1069769   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
1069770   +
1069771   +***  Effect: GRP_AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_AcceptedCmp5 ;
1069772   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069773   +_LP0 = _LP0 + (    -0.7446790765921) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.7446790765921) * _TEMP * _1_0;
1069774   +
1069775   +***  Effect: GRP_AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_AcceptedCmpTotal ;
1069776   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069777   +_LP0 = _LP0 + (   -1.47644515097353) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.47644515097353) * _TEMP * _2_0;
1069778   +
1069779   +***  Effect: GRP_Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Frq ;
1069780   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069781   +_LP0 = _LP0 + (    1.60669977062618) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.60669977062618) * _TEMP * _3_0;
1069782   +_LP0 = _LP0 + (    2.43462608830259) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.43462608830259) * _TEMP * _3_1;
1069783   +_LP0 = _LP0 + (     2.0853454925309) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.0853454925309) * _TEMP * _3_2;
1069784   +_LP0 = _LP0 + (    1.39670974961972) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.39670974961972) * _TEMP * _3_3;
1069785   +_LP0 = _LP0 + (    0.42808058742905) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.42808058742905) * _TEMP * _3_4;
1069786   +_LP0 = _LP0 + (   -0.71021933964392) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71021933964392) * _TEMP * _3_5;
1069787   +_LP0 = _LP0 + (   -0.48135407112575) * _TEMP * _3_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48135407112575) * _TEMP * _3_6;
1069788   +_LP0 = _LP0 + (   -1.63572249476541) * _TEMP * _3_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63572249476541) * _TEMP * _3_7;
1069789   +_LP0 = _LP0 + (   -1.72256503137932) * _TEMP * _3_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.72256503137932) * _TEMP * _3_8;
1069790   +
1069791   +***  Effect: GRP_Income ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Income ;
1069792   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069793   +_LP0 = _LP0 + (    -1.1068873777974) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.1068873777974) * _TEMP * _4_0;
1069794   +_LP0 = _LP0 + (    -0.9547086898092) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9547086898092) * _TEMP * _4_1;
1069795   +_LP0 = _LP0 + (   -0.31212332505455) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31212332505455) * _TEMP * _4_2;
1069796   +_LP0 = _LP0 + (     0.4494292325574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4494292325574) * _TEMP * _4_3;
1069797   +_LP0 = _LP0 + (    0.32802633763272) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.32802633763272) * _TEMP * _4_4;
1069798   +_LP0 = _LP0 + (   -0.19075671306322) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.19075671306322) * _TEMP * _4_5;
1069799   +_LP0 = _LP0 + (   -0.77559003357315) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.77559003357315) * _TEMP * _4_6;
1069800   +_LP0 = _LP0 + (    0.18603490415793) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18603490415793) * _TEMP * _4_7;
1069801   +_LP0 = _LP0 + (    0.63801918363541) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.63801918363541) * _TEMP * _4_8;
1069802   +
1069803   +***  Effect: GRP_MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntFishProducts ;
1069804   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069805   +_LP0 = _LP0 + (    0.95284156310019) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.95284156310019) * _TEMP * _6_0;
1069806   +_LP0 = _LP0 + (    0.26502435397607) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.26502435397607) * _TEMP * _6_1;
1069807   +_LP0 = _LP0 + (    0.17695765630059) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17695765630059) * _TEMP * _6_2;
1069808   +_LP0 = _LP0 + (   -0.14572197867389) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14572197867389) * _TEMP * _6_3;
1069809   +_LP0 = _LP0 + (    0.01505271297294) * _TEMP * _6_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01505271297294) * _TEMP * _6_4;
1069810   +_LP0 = _LP0 + (    0.54563980035699) * _TEMP * _6_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.54563980035699) * _TEMP * _6_5;
1069811   +_LP0 = _LP0 + (   -0.52118071899185) * _TEMP * _6_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.52118071899185) * _TEMP * _6_6;
1069812   +_LP0 = _LP0 + (    -0.4363500869228) * _TEMP * _6_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4363500869228) * _TEMP * _6_7;
1069813   +
1069814   +***  Effect: GRP_MntMeatProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntMeatProducts ;
1069815   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069816   +_LP0 = _LP0 + (   -8.31770021190691) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.31770021190691) * _TEMP * _8_0;
1069817   +_LP0 = _LP0 + (   -4.36624878948483) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.36624878948483) * _TEMP * _8_1;
1069818   +_LP0 = _LP0 + (   -3.04851308469506) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.04851308469506) * _TEMP * _8_2;
1069819   +_LP0 = _LP0 + (   -1.48432419417486) * _TEMP * _8_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.48432419417486) * _TEMP * _8_3;
1069820   +_LP0 = _LP0 + (    0.88788868200015) * _TEMP * _8_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.88788868200015) * _TEMP * _8_4;
1069821   +_LP0 = _LP0 + (    1.33039344853623) * _TEMP * _8_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.33039344853623) * _TEMP * _8_5;
1069822   +_LP0 = _LP0 + (    2.74637356935852) * _TEMP * _8_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.74637356935852) * _TEMP * _8_6;
1069823   +_LP0 = _LP0 + (    2.83781421974894) * _TEMP * _8_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.83781421974894) * _TEMP * _8_7;
1069824   +_LP0 = _LP0 + (    4.06889115404295) * _TEMP * _8_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.06889115404295) * _TEMP * _8_8;
1069825   +
1069826   +***  Effect: GRP_MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntSweetProducts ;
1069827   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069828   +_LP0 = _LP0 + (    0.30891510159184) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.30891510159184) * _TEMP * _9_0;
1069829   +_LP0 = _LP0 + (    0.71823102140593) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71823102140593) * _TEMP * _9_1;
1069830   +_LP0 = _LP0 + (    0.40751268124015) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.40751268124015) * _TEMP * _9_2;
1069831   +_LP0 = _LP0 + (    -0.0500970886438) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0500970886438) * _TEMP * _9_3;
1069832   +_LP0 = _LP0 + (    0.75914971161272) * _TEMP * _9_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.75914971161272) * _TEMP * _9_4;
1069833   +_LP0 = _LP0 + (   -0.27777464352641) * _TEMP * _9_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27777464352641) * _TEMP * _9_5;
1069834   +_LP0 = _LP0 + (   -0.19862700981974) * _TEMP * _9_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.19862700981974) * _TEMP * _9_6;
1069835   +_LP0 = _LP0 + (   -0.38787782785805) * _TEMP * _9_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.38787782785805) * _TEMP * _9_7;
1069836   +
1069837   +***  Effect: GRP_MntWines ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_MntWines ;
1069838   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069839   +_LP0 = _LP0 + (    3.97976057988328) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.97976057988328) * _TEMP * _10_0;
1069840   +_LP0 = _LP0 + (     2.7500535043595) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.7500535043595) * _TEMP * _10_1;
1069841   +_LP0 = _LP0 + (    2.23351774782852) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.23351774782852) * _TEMP * _10_2;
1069842   +_LP0 = _LP0 + (     1.7536016671876) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.7536016671876) * _TEMP * _10_3;
1069843   +_LP0 = _LP0 + (     0.1640545854573) * _TEMP * _10_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.1640545854573) * _TEMP * _10_4;
1069844   +_LP0 = _LP0 + (   -0.36967718483959) * _TEMP * _10_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36967718483959) * _TEMP * _10_5;
1069845   +_LP0 = _LP0 + (   -1.60242387302593) * _TEMP * _10_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.60242387302593) * _TEMP * _10_6;
1069846   +_LP0 = _LP0 + (   -2.18568823441387) * _TEMP * _10_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.18568823441387) * _TEMP * _10_7;
1069847   +_LP0 = _LP0 + (   -3.01781681630858) * _TEMP * _10_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.01781681630858) * _TEMP * _10_8;
1069848   +
1069849   +***  Effect: GRP_NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumCatalogPurchases ;
1069850   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069851   +_LP0 = _LP0 + (   -6.23994183900208) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.23994183900208) * _TEMP * _11_0;
1069852   +_LP0 = _LP0 + (   -2.68869740629193) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.68869740629193) * _TEMP * _11_1;
1069853   +_LP0 = _LP0 + (   -0.15877773244651) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.15877773244651) * _TEMP * _11_2;
1069854   +_LP0 = _LP0 + (    1.53123175936135) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.53123175936135) * _TEMP * _11_3;
1069855   +_LP0 = _LP0 + (    2.69517926058072) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.69517926058072) * _TEMP * _11_4;
1069856   +
1069857   +***  Effect: GRP_NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NumWebVisitsMonth ;
1069858   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069859   +_LP0 = _LP0 + (    -3.3002412240753) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.3002412240753) * _TEMP * _14_0;
1069860   +_LP0 = _LP0 + (   -2.20033226941868) * _TEMP * _14_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.20033226941868) * _TEMP * _14_1;
1069861   +_LP0 = _LP0 + (   -1.72135475558275) * _TEMP * _14_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.72135475558275) * _TEMP * _14_2;
1069862   +_LP0 = _LP0 + (   -0.69842997035409) * _TEMP * _14_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.69842997035409) * _TEMP * _14_3;
1069863   +_LP0 = _LP0 + (    0.59993420393711) * _TEMP * _14_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59993420393711) * _TEMP * _14_4;
1069864   +_LP0 = _LP0 + (    0.72581883605563) * _TEMP * _14_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72581883605563) * _TEMP * _14_5;
1069865   +_LP0 = _LP0 + (    2.32956561429985) * _TEMP * _14_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.32956561429985) * _TEMP * _14_6;
1069866   +
1069867   +***  Effect: GRP_RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_RMntFrq ;
1069868   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069869   +_LP0 = _LP0 + (    2.78248187088817) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.78248187088817) * _TEMP * _16_0;
1069870   +_LP0 = _LP0 + (    1.57916958099666) * _TEMP * _16_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.57916958099666) * _TEMP * _16_1;
1069871   +_LP0 = _LP0 + (    0.80760708078323) * _TEMP * _16_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.80760708078323) * _TEMP * _16_2;
1069872   +_LP0 = _LP0 + (   -0.84109819008678) * _TEMP * _16_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.84109819008678) * _TEMP * _16_3;
1069873   +_LP0 = _LP0 + (   -0.83990394353114) * _TEMP * _16_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.83990394353114) * _TEMP * _16_4;
1069874   +_LP0 = _LP0 + (   -1.88920830968665) * _TEMP * _16_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.88920830968665) * _TEMP * _16_5;
1069875   +_LP0 = _LP0 + (   -1.53102493561927) * _TEMP * _16_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53102493561927) * _TEMP * _16_6;
1069876   +_LP0 = _LP0 + (   -0.00003768720234) * _TEMP * _16_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00003768720234) * _TEMP * _16_7;
1069877   +_LP0 = _LP0 + (   -0.59460667119256) * _TEMP * _16_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.59460667119256) * _TEMP * _16_8;
1069878   +
1069879   +***  Effect: GRP_Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Recency ;
1069880   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
1069881   +_LP0 = _LP0 + (    4.15436119707335) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.15436119707335) * _TEMP * _17_0;
1069882   +_LP0 = _LP0 + (    3.08080497220808) * _TEMP * _17_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.08080497220808) * _TEMP * _17_1;
1069883   +_LP0 = _LP0 + (    2.90742407234312) * _TEMP * _17_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.90742407234312) * _TEMP * _17_2;
1069884   +_LP0 = _LP0 + (    1.50207200800462) * _TEMP * _17_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50207200800462) * _TEMP * _17_3;
1069885   +_LP0 = _LP0 + (   -0.21286194047464) * _TEMP * _17_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.21286194047464) * _TEMP * _17_4;
1069886   +_LP0 = _LP0 + (    -0.3852938818758) * _TEMP * _17_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3852938818758) * _TEMP * _17_5;
1069887   +_LP0 = _LP0 + (   -1.39433099504826) * _TEMP * _17_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.39433099504826) * _TEMP * _17_6;
1069888   +_LP0 = _LP0 + (   -1.80436921997444) * _TEMP * _17_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.80436921997444) * _TEMP * _17_7;
1069889   +_LP0 = _LP0 + (   -3.75257988441601) * _TEMP * _17_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.75257988441601) * _TEMP * _17_8;
1069890   +
1069891   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
1069892   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
1069893   +_TEMP =    -3.20489068488757 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -3.20489068488757 + _LP0;
1069894   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
1069895   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
1069896   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
1069897   +end;
MPRINT(EM_DIAGRAM):   end;
1069898   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
1069899   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
1069900   +
1069901   +REG3DR1:
1069902   +
1069903   +*** Residuals;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Residuals;
1069904   +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
1069905   +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1069906   +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1069907   +end;
MPRINT(EM_DIAGRAM):   end;
1069908   +else do;
MPRINT(EM_DIAGRAM):   else do;
1069909   +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1069910   +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1069911   +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
1069912   +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
1069913   +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
1069914   +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
1069915   +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
1069916   +   end;
MPRINT(EM_DIAGRAM):   end;
1069917   +end;
MPRINT(EM_DIAGRAM):   end;
1069918   +
1069919   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
1069920   +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1069921   +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1069922   +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
1069923   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
1069924   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
1069925   +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
1069926   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
1069927   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
1069928   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
1069929   +end;
MPRINT(EM_DIAGRAM):   end;
1069930   +I_DepVar = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG3DRF[_IY];
1069931   +U_DepVar = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG3DRU[_IY];
1069932   +
1069933   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1069934   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
1069935   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1069936    run;
 
NOTE: DATA STEP view saved on file EMWS8.REG3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.47 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.47 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1069937    quit;
1069938    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1069939    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1069940    * Reg3: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg3: Computing metadata for TRAIN data;
1069941    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.REG3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg3_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg3_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg3_TRAIN out=WORK.M3CBOGDW noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CBOGDW;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CBOGDW(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CBOGDW;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CBOGDW;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1WN19YZ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WN19YZ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WN19YZ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2X082US(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WN19YZ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WN19YZ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WN19YZ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WN19YZ;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WN19YZ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg3";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg3";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg3";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'GRP_ACCEPTEDCMP5' 'GRP_ACCEPTEDCMPTOTAL' 'GRP_FRQ'
'GRP_INCOME' 'GRP_MNTFISHPRODUCTS' 'GRP_MNTMEATPRODUCTS' 'GRP_MNTSWEETPRODUCTS' 'GRP_MNTWINES'
'GRP_NUMCATALOGPURCHASES' 'GRP_NUMWEBVISITSMONTH' 'GRP_RMNTFRQ' 'GRP_RECENCY' ) then
ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg3: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1070273    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1070274    set EMWS8.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMINFO;
1070275    where DATA='Reg3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
1070276    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.REG3_EMINFO.
      WHERE (DATA='Reg3') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070277    data EMWS8.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_EMINFO;
1070278    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1070279    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1070280    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.REG3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1070284    run;
1070285    data EMWS8.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EMINFO;
1070286    set EMWS8.Reg3_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMINFO WORK.MODELTEMP_INFO;
1070287    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.REG3_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070288    proc sort data = EMWS8.Reg3_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg3_EMINFO NOTHREADS;
1070289    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1070290    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.REG3_EMINFO.
NOTE: The data set EMWS8.REG3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070291    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1070292    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1070293    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070294    proc sort data = EMWS8.Reg3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1070295    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1070296    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070297    data EMWS8.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EMINFO;
1070298    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1070299    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1070300    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1070301    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1070302    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1070303    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1070304    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS8.REG3_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS8.REG3_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.42 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                16.42 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0N4T9Q0
"C:\\predictive-models-project\Workspaces\EMWS8\Reg3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0N4T9Q0 new;
MPRINT(EM_DIAGRAM):   run;
1070328    data EMWS8.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_EMOUTFIT;
1070329    length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
1070330    set EMWS8.Reg3_EMESTIMATE end=eof;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMESTIMATE end=eof;
1070331    where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
1070332    drop _STEP_--Year_Birth;
MPRINT(EM_DIAGRAM):   drop _STEP_--Year_Birth;
1070333    if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
1070334    TARGET = "DepVar";
MPRINT(EM_DIAGRAM):   TARGET = "DepVar";
1070335    output;
MPRINT(EM_DIAGRAM):   output;
1070336    end;
MPRINT(EM_DIAGRAM):   end;
1070337    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS8.REG3_EMESTIMATE.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS8.REG3_EMOUTFIT has 1 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070338    data EMWS8.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_EMOUTFIT;
1070339    set EMWS8.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMOUTFIT;
1070340    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1070341    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
1070341  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1070342    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1070343    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG3_EMOUTFIT.
NOTE: The data set EMWS8.REG3_EMOUTFIT has 1 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070344    proc sort data=EMWS8.Reg3_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Reg3_EMREPORTFIT nothreads;
1070345    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1070346    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS8.REG3_EMREPORTFIT.
NOTE: The data set EMWS8.REG3_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070347    %let _EMwarndup = 0;
1070348    %let _EMtargetdup =;
1070349    %let _EMASEtargetdup =;
1070350    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1070351    set EMWS8.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMOUTFIT;
1070352    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1070353    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1070354    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1070355    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1070356    end;
MPRINT(EM_DIAGRAM):   end;
1070357    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.REG3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070358    proc sort data=EMWS8.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
1070359    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1070360    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS8.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 53 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1070361    proc sort data=EMWS8.Reg3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Reg3_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
1070362    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1070363    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 51 observations read from the data set EMWS8.REG3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 51 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070364    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1070365    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1070366    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1070367    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 51 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 53 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1070368    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1070369    set EMWS8.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_CMeta_TRAIN;
1070370    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1070370  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1070371    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1070372    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1070373    set EMWS8.Reg3_TRAIN(keep=
1070374    F_DepVar
1070375    I_DepVar
1070376    P_DepVar0
1070377    P_DepVar1
1070378    R_DepVar0
1070379    R_DepVar1
1070380    U_DepVar
1070381    _WARN_
1070382    DepVar
1070383    );
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1070384    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.REG3_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.BINNING_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.REG3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Reg3_2_4XTKY nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_2_4XTKY;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg3_2_4XTKY(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_2_4XTKY;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_2_4XTKY;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 1.5274907E-9 OVLMAX 0.999930948 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1074650    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1074651    set EMWS8.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_CMeta_TRAIN;
1074652    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1074652  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1074653    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1074654    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1074655    set EMWS8.Reg3_VALIDATE(keep=
1074656    F_DepVar
1074657    I_DepVar
1074658    P_DepVar0
1074659    P_DepVar1
1074660    R_DepVar0
1074661    R_DepVar1
1074662    U_DepVar
1074663    _WARN_
1074664    DepVar
1074665    );
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1074666    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.REG3_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.BINNING_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.REG3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Reg3_24VS008 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_24VS008;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg3_24VS008(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMCLASSIFICATION WORK.Reg3_24VS008;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_24VS008;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 1.9811711E-9 OVLMAX 0.9998823899 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1078941    %let _cn = %sysfunc(getoption(CENTER));
1078942    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1078943    proc print data=EMWS8.Reg3_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg3_EMREPORTFIT noobs label;
1078944    var STAT LABEL TRAIN
1078945    VALIDATE
1078946    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
1078947    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1078948    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1078949    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1078950    run;
 
NOTE: There were 20 observations read from the data set EMWS8.REG3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 763.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1078951    title10;
MPRINT(EM_DIAGRAM):   title10;
1078952    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1078953    proc sort data=EMWS8.Reg3_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Reg3_EMCLASSIFICATION nothreads;
1078954    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1078955    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG3_EMCLASSIFICATION.
NOTE: The data set EMWS8.REG3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1078956    %let _cn = %sysfunc(getoption(CENTER));
1078957    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1078958    proc print data=EMWS8.Reg3_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg3_EMCLASSIFICATION noobs label;
1078959    var from into pct_row pct_col count percent
1078960    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1078961    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1078962    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1078963    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1078964    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1078965    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1078966    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1078967    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1078968    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1078969    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1078970    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1078971    run;
 
NOTE: There were 8 observations read from the data set EMWS8.REG3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 764.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1078972    title9;
MPRINT(EM_DIAGRAM):   title9;
1078973    title10;
MPRINT(EM_DIAGRAM):   title10;
1078974    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1078975    %let _cn = %sysfunc(getoption(CENTER));
1078976    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1078977    data EMWS8.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg3_EMEVENTREPORT;
1078978    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
1078978  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
1078979    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1078979  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
1078979  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
1078979  ! FALSEEVENT
1078980    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
1078980  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
1078980  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
1078981       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
1078982    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
1078983    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
1078984    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
1078985    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
1078986    set EMWS8.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg3_EMEVENTREPORT;
1078987    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG3_EMEVENTREPORT.
NOTE: The data set EMWS8.REG3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1078988    proc print data=EMWS8.Reg3_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg3_EMEVENTREPORT noobs label;
1078989    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1078990    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
1078991    by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
1078992    run;
 
NOTE: There were 2 observations read from the data set EMWS8.REG3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 765.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1078993    title10;
MPRINT(EM_DIAGRAM):   title10;
1078994    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1078995    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1078996    modify Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1078997    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1078998    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1078998  ! ;
MPRINT(EM_DIAGRAM):   run;
1078999    run;
 
NOTE: MODIFY was successful for EMWS8.REG3_EMRANK.DATA.
1079000    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.17 seconds
      cpu time            0.18 seconds
 
 
1079001    %let _cn = %sysfunc(getoption(CENTER));
1079002    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1079003    proc print data=EMWS8.Reg3_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg3_EMRANK label noobs;
1079004    var
1079005    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1079006    by
1079007    notsorted DATAROLE
1079008    notsorted TARGET
1079009    notsorted TARGETLABEL
1079010    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1079011    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1079012    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1079013    run;
 
NOTE: There were 40 observations read from the data set EMWS8.REG3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 766.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1079014    title10;
MPRINT(EM_DIAGRAM):   title10;
1079015    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1079016    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1079017    modify Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1079018    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
1079018  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1079019    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1079019  ! ;
MPRINT(EM_DIAGRAM):   run;
1079020    run;
 
NOTE: MODIFY was successful for EMWS8.REG3_EMSCOREDIST.DATA.
1079021    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Reg3_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
