MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.25 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.25 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2BTHS3V 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2BTHS3V new;
MPRINT(EM_DIAGRAM):   run;
1474991    proc transpose data=EMWS8.Reg2_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg2_EMESTIMATE out=WORK.TEMPREG;
1474992    where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
1474993    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.REG2_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 52 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1474994    proc transpose data=EMWS8.Reg2_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg2_MAPDS out=WORK.TEMPREG2;
1474995    var "PC_1"n--"Year_Birth"n;
MPRINT(EM_DIAGRAM):   var "PC_1"n--"Year_Birth"n;
1474996    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS8.REG2_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 18 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1474997    proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
1474998    by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
1474999    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 52 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 52 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475000    proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
1475001    by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
1475002    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475003    data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
1475004    merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
1475005    by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
1475006    if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
1475007    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 52 observations read from the data set WORK.TEMPREG.
NOTE: There were 18 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1475008    data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
1475009    length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
1475010    set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
1475011    i=1;
MPRINT(EM_DIAGRAM):   i=1;
1475012    do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
1475013    term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
1475014    i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
1475015    output;
MPRINT(EM_DIAGRAM):   output;
1475016    end;
MPRINT(EM_DIAGRAM):   end;
1475017    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475018    proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
1475019    by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
1475020    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK.TEMPREG3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475021    filename emflow
1475021  ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1475022    *------------------------------------------------------------*;
1475023    * Reg2: Scoring DATA data;
1475024    *------------------------------------------------------------*;
1475025    data EMWS8.Reg2_TRAIN
1475026    / view=EMWS8.Reg2_TRAIN
1475027    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_TRAIN / view=EMWS8.Reg2_TRAIN ;
1475028    set EMWS8.PRINCOMP_TRAIN
1475029    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
1475030    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas.
1475031   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1475032   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
1475033   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1475034   +
1475035   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1475036   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
1475037   +
1475038   +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
1475039   +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1475040   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
1475041   +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
1475042   +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1475043   +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
1475044   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
1475045   +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
1475046   +
1475047   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1475048   +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
1475049   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1475050   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1475051   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1475052   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1475053   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1475054   +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1475055   +end;
MPRINT(EM_DIAGRAM):   end;
1475056   +else do;
MPRINT(EM_DIAGRAM):   else do;
1475057   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1475058   +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
1475059   +   end;
MPRINT(EM_DIAGRAM):   end;
1475060   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1475061   +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
1475062   +   end;
MPRINT(EM_DIAGRAM):   end;
1475063   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1475064   +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1475065   +   end;
MPRINT(EM_DIAGRAM):   end;
1475066   +end;
MPRINT(EM_DIAGRAM):   end;
1475067   +
1475068   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
1475069   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
1475070   +
1475071   +*** Check PC_1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_1 for missing values ;
1475072   +if missing( PC_1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_1 ) then do;
1475073   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475074   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475075   +end;
MPRINT(EM_DIAGRAM):   end;
1475076   +
1475077   +*** Check PC_10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_10 for missing values ;
1475078   +if missing( PC_10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_10 ) then do;
1475079   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475080   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475081   +end;
MPRINT(EM_DIAGRAM):   end;
1475082   +
1475083   +*** Check PC_11 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_11 for missing values ;
1475084   +if missing( PC_11 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_11 ) then do;
1475085   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475086   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475087   +end;
MPRINT(EM_DIAGRAM):   end;
1475088   +
1475089   +*** Check PC_13 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_13 for missing values ;
1475090   +if missing( PC_13 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_13 ) then do;
1475091   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475092   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475093   +end;
MPRINT(EM_DIAGRAM):   end;
1475094   +
1475095   +*** Check PC_14 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_14 for missing values ;
1475096   +if missing( PC_14 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_14 ) then do;
1475097   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475098   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475099   +end;
MPRINT(EM_DIAGRAM):   end;
1475100   +
1475101   +*** Check PC_15 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_15 for missing values ;
1475102   +if missing( PC_15 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_15 ) then do;
1475103   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475104   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475105   +end;
MPRINT(EM_DIAGRAM):   end;
1475106   +
1475107   +*** Check PC_16 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_16 for missing values ;
1475108   +if missing( PC_16 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_16 ) then do;
1475109   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475110   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475111   +end;
MPRINT(EM_DIAGRAM):   end;
1475112   +
1475113   +*** Check PC_2 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_2 for missing values ;
1475114   +if missing( PC_2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_2 ) then do;
1475115   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475116   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475117   +end;
MPRINT(EM_DIAGRAM):   end;
1475118   +
1475119   +*** Check PC_3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_3 for missing values ;
1475120   +if missing( PC_3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_3 ) then do;
1475121   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475122   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475123   +end;
MPRINT(EM_DIAGRAM):   end;
1475124   +
1475125   +*** Check PC_4 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_4 for missing values ;
1475126   +if missing( PC_4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_4 ) then do;
1475127   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475128   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475129   +end;
MPRINT(EM_DIAGRAM):   end;
1475130   +
1475131   +*** Check PC_5 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_5 for missing values ;
1475132   +if missing( PC_5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_5 ) then do;
1475133   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475134   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475135   +end;
MPRINT(EM_DIAGRAM):   end;
1475136   +
1475137   +*** Check PC_6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_6 for missing values ;
1475138   +if missing( PC_6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_6 ) then do;
1475139   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475140   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475141   +end;
MPRINT(EM_DIAGRAM):   end;
1475142   +
1475143   +*** Check PC_7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_7 for missing values ;
1475144   +if missing( PC_7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_7 ) then do;
1475145   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475146   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475147   +end;
MPRINT(EM_DIAGRAM):   end;
1475148   +
1475149   +*** Check PC_8 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_8 for missing values ;
1475150   +if missing( PC_8 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_8 ) then do;
1475151   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475152   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475153   +end;
MPRINT(EM_DIAGRAM):   end;
1475154   +
1475155   +*** Check PC_9 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_9 for missing values ;
1475156   +if missing( PC_9 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_9 ) then do;
1475157   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475158   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475159   +end;
MPRINT(EM_DIAGRAM):   end;
1475160   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
1475161   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
1475162   +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
1475163   +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
1475164   +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
1475165   +end;
MPRINT(EM_DIAGRAM):   end;
1475166   +
1475167   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
1475168   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
1475169   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
1475170   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
1475171   +
1475172   +***  Effect: PC_1 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_1 ;
1475173   +_TEMP = PC_1 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_1 ;
1475174   +_LP0 = _LP0 + (    0.26594657755316 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.26594657755316 * _TEMP);
1475175   +
1475176   +***  Effect: PC_10 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_10 ;
1475177   +_TEMP = PC_10 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_10 ;
1475178   +_LP0 = _LP0 + (   -0.66855613546057 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66855613546057 * _TEMP);
1475179   +
1475180   +***  Effect: PC_11 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_11 ;
1475181   +_TEMP = PC_11 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_11 ;
1475182   +_LP0 = _LP0 + (    0.24502125577396 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.24502125577396 * _TEMP);
1475183   +
1475184   +***  Effect: PC_13 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_13 ;
1475185   +_TEMP = PC_13 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_13 ;
1475186   +_LP0 = _LP0 + (   -1.07516774950906 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.07516774950906 * _TEMP);
1475187   +
1475188   +***  Effect: PC_14 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_14 ;
1475189   +_TEMP = PC_14 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_14 ;
1475190   +_LP0 = _LP0 + (    0.44141295199698 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.44141295199698 * _TEMP);
1475191   +
1475192   +***  Effect: PC_15 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_15 ;
1475193   +_TEMP = PC_15 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_15 ;
1475194   +_LP0 = _LP0 + (   -0.26430323600477 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.26430323600477 * _TEMP);
1475195   +
1475196   +***  Effect: PC_16 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_16 ;
1475197   +_TEMP = PC_16 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_16 ;
1475198   +_LP0 = _LP0 + (    0.28920725604738 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28920725604738 * _TEMP);
1475199   +
1475200   +***  Effect: PC_2 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_2 ;
1475201   +_TEMP = PC_2 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_2 ;
1475202   +_LP0 = _LP0 + (    -0.4951050343302 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4951050343302 * _TEMP);
1475203   +
1475204   +***  Effect: PC_3 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_3 ;
1475205   +_TEMP = PC_3 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_3 ;
1475206   +_LP0 = _LP0 + (   -0.10464422167621 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.10464422167621 * _TEMP);
1475207   +
1475208   +***  Effect: PC_4 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_4 ;
1475209   +_TEMP = PC_4 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_4 ;
1475210   +_LP0 = _LP0 + (    0.13700638064558 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13700638064558 * _TEMP);
1475211   +
1475212   +***  Effect: PC_5 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_5 ;
1475213   +_TEMP = PC_5 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_5 ;
1475214   +_LP0 = _LP0 + (   -0.35162446972971 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35162446972971 * _TEMP);
1475215   +
1475216   +***  Effect: PC_6 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_6 ;
1475217   +_TEMP = PC_6 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_6 ;
1475218   +_LP0 = _LP0 + (    0.16099346673641 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16099346673641 * _TEMP);
1475219   +
1475220   +***  Effect: PC_7 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_7 ;
1475221   +_TEMP = PC_7 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_7 ;
1475222   +_LP0 = _LP0 + (    0.13772986491344 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13772986491344 * _TEMP);
1475223   +
1475224   +***  Effect: PC_8 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_8 ;
1475225   +_TEMP = PC_8 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_8 ;
1475226   +_LP0 = _LP0 + (    0.33585596147387 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.33585596147387 * _TEMP);
1475227   +
1475228   +***  Effect: PC_9 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_9 ;
1475229   +_TEMP = PC_9 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_9 ;
1475230   +_LP0 = _LP0 + (    0.46197234510528 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46197234510528 * _TEMP);
1475231   +
1475232   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
1475233   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
1475234   +_TEMP =    -2.76129402773586 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -2.76129402773586 + _LP0;
1475235   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
1475236   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
1475237   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
1475238   +end;
MPRINT(EM_DIAGRAM):   end;
1475239   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
1475240   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
1475241   +
1475242   +REG2DR1:
1475243   +
1475244   +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
1475245   +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
1475246   +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1475247   +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1475248   +end;
MPRINT(EM_DIAGRAM):   end;
1475249   +else do;
MPRINT(EM_DIAGRAM):   else do;
1475250   +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1475251   +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1475252   +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
1475253   +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
1475254   +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
1475255   +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
1475256   +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
1475257   +   end;
MPRINT(EM_DIAGRAM):   end;
1475258   +end;
MPRINT(EM_DIAGRAM):   end;
1475259   +
1475260   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
1475261   +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1475262   +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1475263   +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
1475264   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
1475265   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
1475266   +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
1475267   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
1475268   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
1475269   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
1475270   +end;
MPRINT(EM_DIAGRAM):   end;
1475271   +I_DepVar = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG2DRF[_IY];
1475272   +U_DepVar = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG2DRU[_IY];
1475273   +
1475274   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1475275   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
1475276   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1475277    run;

NOTE: DATA STEP view saved on file EMWS8.REG2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1475278    quit;
1475279    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1475280    filename emflow
1475280  ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1475281    *------------------------------------------------------------*;
1475282    * Reg2: Scoring VALIDATE data;
1475283    *------------------------------------------------------------*;
1475284    data EMWS8.Reg2_VALIDATE
1475285    / view=EMWS8.Reg2_VALIDATE
1475286    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_VALIDATE / view=EMWS8.Reg2_VALIDATE ;
1475287    set EMWS8.PRINCOMP_VALIDATE
1475288    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
1475289    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas.
1475290   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1475291   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
1475292   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1475293   +
1475294   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
1475295   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
1475296   +
1475297   +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
1475298   +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1475299   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
1475300   +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
1475301   +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1475302   +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
1475303   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
1475304   +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
1475305   +
1475306   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1475307   +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
1475308   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1475309   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1475310   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1475311   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1475312   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1475313   +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1475314   +end;
MPRINT(EM_DIAGRAM):   end;
1475315   +else do;
MPRINT(EM_DIAGRAM):   else do;
1475316   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1475317   +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
1475318   +   end;
MPRINT(EM_DIAGRAM):   end;
1475319   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1475320   +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
1475321   +   end;
MPRINT(EM_DIAGRAM):   end;
1475322   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1475323   +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
1475324   +   end;
MPRINT(EM_DIAGRAM):   end;
1475325   +end;
MPRINT(EM_DIAGRAM):   end;
1475326   +
1475327   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
1475328   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
1475329   +
1475330   +*** Check PC_1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_1 for missing values ;
1475331   +if missing( PC_1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_1 ) then do;
1475332   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475333   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475334   +end;
MPRINT(EM_DIAGRAM):   end;
1475335   +
1475336   +*** Check PC_10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_10 for missing values ;
1475337   +if missing( PC_10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_10 ) then do;
1475338   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475339   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475340   +end;
MPRINT(EM_DIAGRAM):   end;
1475341   +
1475342   +*** Check PC_11 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_11 for missing values ;
1475343   +if missing( PC_11 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_11 ) then do;
1475344   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475345   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475346   +end;
MPRINT(EM_DIAGRAM):   end;
1475347   +
1475348   +*** Check PC_13 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_13 for missing values ;
1475349   +if missing( PC_13 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_13 ) then do;
1475350   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475351   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475352   +end;
MPRINT(EM_DIAGRAM):   end;
1475353   +
1475354   +*** Check PC_14 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_14 for missing values ;
1475355   +if missing( PC_14 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_14 ) then do;
1475356   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475357   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475358   +end;
MPRINT(EM_DIAGRAM):   end;
1475359   +
1475360   +*** Check PC_15 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_15 for missing values ;
1475361   +if missing( PC_15 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_15 ) then do;
1475362   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475363   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475364   +end;
MPRINT(EM_DIAGRAM):   end;
1475365   +
1475366   +*** Check PC_16 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_16 for missing values ;
1475367   +if missing( PC_16 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_16 ) then do;
1475368   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475369   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475370   +end;
MPRINT(EM_DIAGRAM):   end;
1475371   +
1475372   +*** Check PC_2 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_2 for missing values ;
1475373   +if missing( PC_2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_2 ) then do;
1475374   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475375   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475376   +end;
MPRINT(EM_DIAGRAM):   end;
1475377   +
1475378   +*** Check PC_3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_3 for missing values ;
1475379   +if missing( PC_3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_3 ) then do;
1475380   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475381   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475382   +end;
MPRINT(EM_DIAGRAM):   end;
1475383   +
1475384   +*** Check PC_4 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_4 for missing values ;
1475385   +if missing( PC_4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_4 ) then do;
1475386   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475387   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475388   +end;
MPRINT(EM_DIAGRAM):   end;
1475389   +
1475390   +*** Check PC_5 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_5 for missing values ;
1475391   +if missing( PC_5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_5 ) then do;
1475392   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475393   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475394   +end;
MPRINT(EM_DIAGRAM):   end;
1475395   +
1475396   +*** Check PC_6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_6 for missing values ;
1475397   +if missing( PC_6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_6 ) then do;
1475398   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475399   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475400   +end;
MPRINT(EM_DIAGRAM):   end;
1475401   +
1475402   +*** Check PC_7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_7 for missing values ;
1475403   +if missing( PC_7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_7 ) then do;
1475404   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475405   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475406   +end;
MPRINT(EM_DIAGRAM):   end;
1475407   +
1475408   +*** Check PC_8 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_8 for missing values ;
1475409   +if missing( PC_8 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_8 ) then do;
1475410   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475411   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475412   +end;
MPRINT(EM_DIAGRAM):   end;
1475413   +
1475414   +*** Check PC_9 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_9 for missing values ;
1475415   +if missing( PC_9 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_9 ) then do;
1475416   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
1475417   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1475418   +end;
MPRINT(EM_DIAGRAM):   end;
1475419   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
1475420   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
1475421   +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
1475422   +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
1475423   +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
1475424   +end;
MPRINT(EM_DIAGRAM):   end;
1475425   +
1475426   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
1475427   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
1475428   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
1475429   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
1475430   +
1475431   +***  Effect: PC_1 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_1 ;
1475432   +_TEMP = PC_1 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_1 ;
1475433   +_LP0 = _LP0 + (    0.26594657755316 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.26594657755316 * _TEMP);
1475434   +
1475435   +***  Effect: PC_10 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_10 ;
1475436   +_TEMP = PC_10 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_10 ;
1475437   +_LP0 = _LP0 + (   -0.66855613546057 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66855613546057 * _TEMP);
1475438   +
1475439   +***  Effect: PC_11 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_11 ;
1475440   +_TEMP = PC_11 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_11 ;
1475441   +_LP0 = _LP0 + (    0.24502125577396 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.24502125577396 * _TEMP);
1475442   +
1475443   +***  Effect: PC_13 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_13 ;
1475444   +_TEMP = PC_13 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_13 ;
1475445   +_LP0 = _LP0 + (   -1.07516774950906 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.07516774950906 * _TEMP);
1475446   +
1475447   +***  Effect: PC_14 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_14 ;
1475448   +_TEMP = PC_14 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_14 ;
1475449   +_LP0 = _LP0 + (    0.44141295199698 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.44141295199698 * _TEMP);
1475450   +
1475451   +***  Effect: PC_15 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_15 ;
1475452   +_TEMP = PC_15 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_15 ;
1475453   +_LP0 = _LP0 + (   -0.26430323600477 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.26430323600477 * _TEMP);
1475454   +
1475455   +***  Effect: PC_16 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_16 ;
1475456   +_TEMP = PC_16 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_16 ;
1475457   +_LP0 = _LP0 + (    0.28920725604738 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28920725604738 * _TEMP);
1475458   +
1475459   +***  Effect: PC_2 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_2 ;
1475460   +_TEMP = PC_2 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_2 ;
1475461   +_LP0 = _LP0 + (    -0.4951050343302 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4951050343302 * _TEMP);
1475462   +
1475463   +***  Effect: PC_3 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_3 ;
1475464   +_TEMP = PC_3 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_3 ;
1475465   +_LP0 = _LP0 + (   -0.10464422167621 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.10464422167621 * _TEMP);
1475466   +
1475467   +***  Effect: PC_4 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_4 ;
1475468   +_TEMP = PC_4 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_4 ;
1475469   +_LP0 = _LP0 + (    0.13700638064558 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13700638064558 * _TEMP);
1475470   +
1475471   +***  Effect: PC_5 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_5 ;
1475472   +_TEMP = PC_5 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_5 ;
1475473   +_LP0 = _LP0 + (   -0.35162446972971 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35162446972971 * _TEMP);
1475474   +
1475475   +***  Effect: PC_6 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_6 ;
1475476   +_TEMP = PC_6 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_6 ;
1475477   +_LP0 = _LP0 + (    0.16099346673641 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16099346673641 * _TEMP);
1475478   +
1475479   +***  Effect: PC_7 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_7 ;
1475480   +_TEMP = PC_7 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_7 ;
1475481   +_LP0 = _LP0 + (    0.13772986491344 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13772986491344 * _TEMP);
1475482   +
1475483   +***  Effect: PC_8 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_8 ;
1475484   +_TEMP = PC_8 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_8 ;
1475485   +_LP0 = _LP0 + (    0.33585596147387 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.33585596147387 * _TEMP);
1475486   +
1475487   +***  Effect: PC_9 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_9 ;
1475488   +_TEMP = PC_9 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_9 ;
1475489   +_LP0 = _LP0 + (    0.46197234510528 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46197234510528 * _TEMP);
1475490   +
1475491   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
1475492   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
1475493   +_TEMP =    -2.76129402773586 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -2.76129402773586 + _LP0;
1475494   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
1475495   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
1475496   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
1475497   +end;
MPRINT(EM_DIAGRAM):   end;
1475498   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
1475499   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
1475500   +
1475501   +REG2DR1:
1475502   +
1475503   +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
1475504   +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
1475505   +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1475506   +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1475507   +end;
MPRINT(EM_DIAGRAM):   end;
1475508   +else do;
MPRINT(EM_DIAGRAM):   else do;
1475509   +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1475510   +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1475511   +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
1475512   +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
1475513   +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
1475514   +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
1475515   +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
1475516   +   end;
MPRINT(EM_DIAGRAM):   end;
1475517   +end;
MPRINT(EM_DIAGRAM):   end;
1475518   +
1475519   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
1475520   +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1475521   +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1475522   +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
1475523   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
1475524   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
1475525   +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
1475526   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
1475527   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
1475528   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
1475529   +end;
MPRINT(EM_DIAGRAM):   end;
1475530   +I_DepVar = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG2DRF[_IY];
1475531   +U_DepVar = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG2DRU[_IY];
1475532   +
1475533   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
1475534   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
1475535   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1475536    run;

NOTE: DATA STEP view saved on file EMWS8.REG2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1475537    quit;
1475538    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1475539    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1475540    * Reg2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg2: Computing metadata for TRAIN data;
1475541    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.REG2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg2_TRAIN out=WORK.M28_26JX noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M28_26JX;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M28_26JX(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M28_26JX;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M28_26JX;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2P9I7UL NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2P9I7UL;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2P9I7UL;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01GTVTZ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2P9I7UL;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2P9I7UL;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2P9I7UL;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2P9I7UL;
MPRINT(EMADVISECOLUMNS):   set WORK.M2P9I7UL;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg2";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'PC_1' 'PC_10' 'PC_11' 'PC_13' 'PC_14' 'PC_15' 
'PC_16' 'PC_2' 'PC_3' 'PC_4' 'PC_5' 'PC_6' 'PC_7' 'PC_8' 'PC_9' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg2: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1475876    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1475877    set EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg2_EMINFO;
1475878    where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
1475879    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.REG2_EMINFO.
      WHERE (DATA='Reg2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475880    data EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg2_EMINFO;
1475881    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1475882    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1475883    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
1475887    run;
1475888    data EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_EMINFO;
1475889    set EMWS8.Reg2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg2_EMINFO WORK.MODELTEMP_INFO;
1475890    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475891    proc sort data = EMWS8.Reg2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg2_EMINFO NOTHREADS;
1475892    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1475893    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG2_EMINFO.
NOTE: The data set EMWS8.REG2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1475894    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1475895    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1475896    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475897    proc sort data = EMWS8.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1475898    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1475899    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1475900    data EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_EMINFO;
1475901    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1475902    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1475903    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1475904    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1475905    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1475906    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1475907    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.REG2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
