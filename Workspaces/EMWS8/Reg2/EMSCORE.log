MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                17.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1ZCKF4V 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1ZCKF4V new;
MPRINT(EM_DIAGRAM):   run;
769991     proc transpose data=EMWS8.Reg2_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS8.Reg2_EMESTIMATE out=WORK.TEMPREG;
769992     where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
769993     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.REG2_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 52 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

769994     proc transpose data=EMWS8.Reg2_MAPDS out=WORK.TEMPREG2;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS8.Reg2_MAPDS out=WORK.TEMPREG2;
769995     var "PC_1"n--"Year_Birth"n;
MPRINT(EM_DIAGRAM):   var "PC_1"n--"Year_Birth"n;
769996     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS8.REG2_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 18 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

769997     proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
769998     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
769999     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 52 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 52 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

770000     proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
770001     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
770002     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770003     data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
770004     merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
770005     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
770006     if (ina and inb) and DepVar ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and DepVar ne . then output;
770007     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 52 observations read from the data set WORK.TEMPREG.
NOTE: There were 18 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770008     data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
770009     length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
770010     set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
770011     i=1;
MPRINT(EM_DIAGRAM):   i=1;
770012     do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
770013     term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
770014     i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
770015     output;
MPRINT(EM_DIAGRAM):   output;
770016     end;
MPRINT(EM_DIAGRAM):   end;
770017     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

770018     proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
770019     by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
770020     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK.TEMPREG3.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 15 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770021     filename emflow
770021   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
770022     *------------------------------------------------------------*;
770023     * Reg2: Scoring DATA data;
770024     *------------------------------------------------------------*;
770025     data EMWS8.Reg2_TRAIN
770026     / view=EMWS8.Reg2_TRAIN
770027     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_TRAIN / view=EMWS8.Reg2_TRAIN ;
770028     set EMWS8.PRINCOMP_TRAIN
770029     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
770030     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas.
770031    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
770032    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
770033    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
770034    +
770035    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
770036    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
770037    +
770038    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
770039    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
770040    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
770041    +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
770042    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
770043    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
770044    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
770045    +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
770046    +
770047    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
770048    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
770049    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
770050    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
770051    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
770052    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
770053    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
770054    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
770055    +end;
MPRINT(EM_DIAGRAM):   end;
770056    +else do;
MPRINT(EM_DIAGRAM):   else do;
770057    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
770058    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
770059    +   end;
MPRINT(EM_DIAGRAM):   end;
770060    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
770061    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
770062    +   end;
MPRINT(EM_DIAGRAM):   end;
770063    +   else do;
MPRINT(EM_DIAGRAM):   else do;
770064    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
770065    +   end;
MPRINT(EM_DIAGRAM):   end;
770066    +end;
MPRINT(EM_DIAGRAM):   end;
770067    +
770068    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
770069    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
770070    +
770071    +*** Check PC_1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_1 for missing values ;
770072    +if missing( PC_1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_1 ) then do;
770073    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770074    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770075    +end;
MPRINT(EM_DIAGRAM):   end;
770076    +
770077    +*** Check PC_10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_10 for missing values ;
770078    +if missing( PC_10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_10 ) then do;
770079    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770080    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770081    +end;
MPRINT(EM_DIAGRAM):   end;
770082    +
770083    +*** Check PC_11 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_11 for missing values ;
770084    +if missing( PC_11 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_11 ) then do;
770085    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770086    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770087    +end;
MPRINT(EM_DIAGRAM):   end;
770088    +
770089    +*** Check PC_13 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_13 for missing values ;
770090    +if missing( PC_13 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_13 ) then do;
770091    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770092    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770093    +end;
MPRINT(EM_DIAGRAM):   end;
770094    +
770095    +*** Check PC_14 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_14 for missing values ;
770096    +if missing( PC_14 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_14 ) then do;
770097    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770098    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770099    +end;
MPRINT(EM_DIAGRAM):   end;
770100    +
770101    +*** Check PC_15 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_15 for missing values ;
770102    +if missing( PC_15 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_15 ) then do;
770103    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770104    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770105    +end;
MPRINT(EM_DIAGRAM):   end;
770106    +
770107    +*** Check PC_16 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_16 for missing values ;
770108    +if missing( PC_16 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_16 ) then do;
770109    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770110    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770111    +end;
MPRINT(EM_DIAGRAM):   end;
770112    +
770113    +*** Check PC_2 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_2 for missing values ;
770114    +if missing( PC_2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_2 ) then do;
770115    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770116    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770117    +end;
MPRINT(EM_DIAGRAM):   end;
770118    +
770119    +*** Check PC_3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_3 for missing values ;
770120    +if missing( PC_3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_3 ) then do;
770121    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770122    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770123    +end;
MPRINT(EM_DIAGRAM):   end;
770124    +
770125    +*** Check PC_4 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_4 for missing values ;
770126    +if missing( PC_4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_4 ) then do;
770127    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770128    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770129    +end;
MPRINT(EM_DIAGRAM):   end;
770130    +
770131    +*** Check PC_5 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_5 for missing values ;
770132    +if missing( PC_5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_5 ) then do;
770133    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770134    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770135    +end;
MPRINT(EM_DIAGRAM):   end;
770136    +
770137    +*** Check PC_6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_6 for missing values ;
770138    +if missing( PC_6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_6 ) then do;
770139    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770140    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770141    +end;
MPRINT(EM_DIAGRAM):   end;
770142    +
770143    +*** Check PC_7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_7 for missing values ;
770144    +if missing( PC_7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_7 ) then do;
770145    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770146    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770147    +end;
MPRINT(EM_DIAGRAM):   end;
770148    +
770149    +*** Check PC_8 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_8 for missing values ;
770150    +if missing( PC_8 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_8 ) then do;
770151    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770152    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770153    +end;
MPRINT(EM_DIAGRAM):   end;
770154    +
770155    +*** Check PC_9 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_9 for missing values ;
770156    +if missing( PC_9 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_9 ) then do;
770157    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770158    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770159    +end;
MPRINT(EM_DIAGRAM):   end;
770160    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
770161    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
770162    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
770163    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
770164    +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
770165    +end;
MPRINT(EM_DIAGRAM):   end;
770166    +
770167    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
770168    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
770169    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
770170    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
770171    +
770172    +***  Effect: PC_1 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_1 ;
770173    +_TEMP = PC_1 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_1 ;
770174    +_LP0 = _LP0 + (    0.26588047366542 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.26588047366542 * _TEMP);
770175    +
770176    +***  Effect: PC_10 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_10 ;
770177    +_TEMP = PC_10 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_10 ;
770178    +_LP0 = _LP0 + (   -0.66919261648431 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66919261648431 * _TEMP);
770179    +
770180    +***  Effect: PC_11 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_11 ;
770181    +_TEMP = PC_11 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_11 ;
770182    +_LP0 = _LP0 + (    0.24414650462815 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.24414650462815 * _TEMP);
770183    +
770184    +***  Effect: PC_13 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_13 ;
770185    +_TEMP = PC_13 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_13 ;
770186    +_LP0 = _LP0 + (   -1.07436868401794 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.07436868401794 * _TEMP);
770187    +
770188    +***  Effect: PC_14 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_14 ;
770189    +_TEMP = PC_14 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_14 ;
770190    +_LP0 = _LP0 + (    0.44251390953597 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.44251390953597 * _TEMP);
770191    +
770192    +***  Effect: PC_15 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_15 ;
770193    +_TEMP = PC_15 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_15 ;
770194    +_LP0 = _LP0 + (   -0.26512634322926 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.26512634322926 * _TEMP);
770195    +
770196    +***  Effect: PC_16 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_16 ;
770197    +_TEMP = PC_16 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_16 ;
770198    +_LP0 = _LP0 + (    0.28971609982801 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28971609982801 * _TEMP);
770199    +
770200    +***  Effect: PC_2 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_2 ;
770201    +_TEMP = PC_2 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_2 ;
770202    +_LP0 = _LP0 + (   -0.49528883857799 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.49528883857799 * _TEMP);
770203    +
770204    +***  Effect: PC_3 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_3 ;
770205    +_TEMP = PC_3 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_3 ;
770206    +_LP0 = _LP0 + (   -0.10447517157595 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.10447517157595 * _TEMP);
770207    +
770208    +***  Effect: PC_4 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_4 ;
770209    +_TEMP = PC_4 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_4 ;
770210    +_LP0 = _LP0 + (    0.13678148584551 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13678148584551 * _TEMP);
770211    +
770212    +***  Effect: PC_5 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_5 ;
770213    +_TEMP = PC_5 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_5 ;
770214    +_LP0 = _LP0 + (   -0.35151849887767 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35151849887767 * _TEMP);
770215    +
770216    +***  Effect: PC_6 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_6 ;
770217    +_TEMP = PC_6 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_6 ;
770218    +_LP0 = _LP0 + (     0.1612221904472 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.1612221904472 * _TEMP);
770219    +
770220    +***  Effect: PC_7 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_7 ;
770221    +_TEMP = PC_7 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_7 ;
770222    +_LP0 = _LP0 + (    0.13756842141361 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13756842141361 * _TEMP);
770223    +
770224    +***  Effect: PC_8 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_8 ;
770225    +_TEMP = PC_8 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_8 ;
770226    +_LP0 = _LP0 + (    0.33565116397792 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.33565116397792 * _TEMP);
770227    +
770228    +***  Effect: PC_9 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_9 ;
770229    +_TEMP = PC_9 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_9 ;
770230    +_LP0 = _LP0 + (    0.46160039482548 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46160039482548 * _TEMP);
770231    +
770232    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
770233    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
770234    +_TEMP =    -2.76146098736578 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -2.76146098736578 + _LP0;
770235    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
770236    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
770237    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
770238    +end;
MPRINT(EM_DIAGRAM):   end;
770239    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
770240    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
770241    +
770242    +REG2DR1:
770243    +
770244    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
770245    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
770246    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
770247    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
770248    +end;
MPRINT(EM_DIAGRAM):   end;
770249    +else do;
MPRINT(EM_DIAGRAM):   else do;
770250    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
770251    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
770252    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
770253    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
770254    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
770255    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
770256    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
770257    +   end;
MPRINT(EM_DIAGRAM):   end;
770258    +end;
MPRINT(EM_DIAGRAM):   end;
770259    +
770260    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
770261    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
770262    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
770263    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
770264    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
770265    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
770266    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
770267    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
770268    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
770269    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
770270    +end;
MPRINT(EM_DIAGRAM):   end;
770271    +I_DepVar = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG2DRF[_IY];
770272    +U_DepVar = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG2DRU[_IY];
770273    +
770274    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
770275    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
770276    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
770277     run;

NOTE: DATA STEP view saved on file EMWS8.REG2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
770278     quit;
770279     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
770280     filename emflow
770280   ! "C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
770281     *------------------------------------------------------------*;
770282     * Reg2: Scoring VALIDATE data;
770283     *------------------------------------------------------------*;
770284     data EMWS8.Reg2_VALIDATE
770285     / view=EMWS8.Reg2_VALIDATE
770286     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_VALIDATE / view=EMWS8.Reg2_VALIDATE ;
770287     set EMWS8.PRINCOMP_VALIDATE
770288     ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
770289     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Reg2\EMFLOWSCORE.sas.
770290    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
770291    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
770292    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
770293    +
770294    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
770295    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
770296    +
770297    +length I_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length I_DepVar $ 12;
770298    +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
770299    +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
770300    +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
770301    +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
770302    +format U_DepVar BEST.;
MPRINT(EM_DIAGRAM):   format U_DepVar BEST.;
770303    +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
770304    +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
770305    +
770306    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
770307    +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
770308    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
770309    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
770310    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
770311    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
770312    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
770313    +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
770314    +end;
MPRINT(EM_DIAGRAM):   end;
770315    +else do;
MPRINT(EM_DIAGRAM):   else do;
770316    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
770317    +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
770318    +   end;
MPRINT(EM_DIAGRAM):   end;
770319    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
770320    +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
770321    +   end;
MPRINT(EM_DIAGRAM):   end;
770322    +   else do;
MPRINT(EM_DIAGRAM):   else do;
770323    +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
770324    +   end;
MPRINT(EM_DIAGRAM):   end;
770325    +end;
MPRINT(EM_DIAGRAM):   end;
770326    +
770327    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
770328    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
770329    +
770330    +*** Check PC_1 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_1 for missing values ;
770331    +if missing( PC_1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_1 ) then do;
770332    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770333    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770334    +end;
MPRINT(EM_DIAGRAM):   end;
770335    +
770336    +*** Check PC_10 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_10 for missing values ;
770337    +if missing( PC_10 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_10 ) then do;
770338    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770339    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770340    +end;
MPRINT(EM_DIAGRAM):   end;
770341    +
770342    +*** Check PC_11 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_11 for missing values ;
770343    +if missing( PC_11 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_11 ) then do;
770344    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770345    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770346    +end;
MPRINT(EM_DIAGRAM):   end;
770347    +
770348    +*** Check PC_13 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_13 for missing values ;
770349    +if missing( PC_13 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_13 ) then do;
770350    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770351    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770352    +end;
MPRINT(EM_DIAGRAM):   end;
770353    +
770354    +*** Check PC_14 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_14 for missing values ;
770355    +if missing( PC_14 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_14 ) then do;
770356    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770357    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770358    +end;
MPRINT(EM_DIAGRAM):   end;
770359    +
770360    +*** Check PC_15 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_15 for missing values ;
770361    +if missing( PC_15 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_15 ) then do;
770362    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770363    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770364    +end;
MPRINT(EM_DIAGRAM):   end;
770365    +
770366    +*** Check PC_16 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_16 for missing values ;
770367    +if missing( PC_16 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_16 ) then do;
770368    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770369    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770370    +end;
MPRINT(EM_DIAGRAM):   end;
770371    +
770372    +*** Check PC_2 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_2 for missing values ;
770373    +if missing( PC_2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_2 ) then do;
770374    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770375    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770376    +end;
MPRINT(EM_DIAGRAM):   end;
770377    +
770378    +*** Check PC_3 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_3 for missing values ;
770379    +if missing( PC_3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_3 ) then do;
770380    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770381    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770382    +end;
MPRINT(EM_DIAGRAM):   end;
770383    +
770384    +*** Check PC_4 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_4 for missing values ;
770385    +if missing( PC_4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_4 ) then do;
770386    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770387    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770388    +end;
MPRINT(EM_DIAGRAM):   end;
770389    +
770390    +*** Check PC_5 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_5 for missing values ;
770391    +if missing( PC_5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_5 ) then do;
770392    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770393    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770394    +end;
MPRINT(EM_DIAGRAM):   end;
770395    +
770396    +*** Check PC_6 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_6 for missing values ;
770397    +if missing( PC_6 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_6 ) then do;
770398    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770399    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770400    +end;
MPRINT(EM_DIAGRAM):   end;
770401    +
770402    +*** Check PC_7 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_7 for missing values ;
770403    +if missing( PC_7 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_7 ) then do;
770404    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770405    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770406    +end;
MPRINT(EM_DIAGRAM):   end;
770407    +
770408    +*** Check PC_8 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_8 for missing values ;
770409    +if missing( PC_8 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_8 ) then do;
770410    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770411    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770412    +end;
MPRINT(EM_DIAGRAM):   end;
770413    +
770414    +*** Check PC_9 for missing values ;
MPRINT(EM_DIAGRAM):   *** Check PC_9 for missing values ;
770415    +if missing( PC_9 ) then do;
MPRINT(EM_DIAGRAM):   if missing( PC_9 ) then do;
770416    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
770417    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
770418    +end;
MPRINT(EM_DIAGRAM):   end;
770419    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
770420    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
770421    +   _P0 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P0 = 0.151221567;
770422    +   _P1 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P1 = 0.848778433;
770423    +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
770424    +end;
MPRINT(EM_DIAGRAM):   end;
770425    +
770426    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
770427    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
770428    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
770429    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
770430    +
770431    +***  Effect: PC_1 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_1 ;
770432    +_TEMP = PC_1 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_1 ;
770433    +_LP0 = _LP0 + (    0.26588047366542 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.26588047366542 * _TEMP);
770434    +
770435    +***  Effect: PC_10 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_10 ;
770436    +_TEMP = PC_10 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_10 ;
770437    +_LP0 = _LP0 + (   -0.66919261648431 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66919261648431 * _TEMP);
770438    +
770439    +***  Effect: PC_11 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_11 ;
770440    +_TEMP = PC_11 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_11 ;
770441    +_LP0 = _LP0 + (    0.24414650462815 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.24414650462815 * _TEMP);
770442    +
770443    +***  Effect: PC_13 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_13 ;
770444    +_TEMP = PC_13 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_13 ;
770445    +_LP0 = _LP0 + (   -1.07436868401794 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.07436868401794 * _TEMP);
770446    +
770447    +***  Effect: PC_14 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_14 ;
770448    +_TEMP = PC_14 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_14 ;
770449    +_LP0 = _LP0 + (    0.44251390953597 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.44251390953597 * _TEMP);
770450    +
770451    +***  Effect: PC_15 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_15 ;
770452    +_TEMP = PC_15 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_15 ;
770453    +_LP0 = _LP0 + (   -0.26512634322926 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.26512634322926 * _TEMP);
770454    +
770455    +***  Effect: PC_16 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_16 ;
770456    +_TEMP = PC_16 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_16 ;
770457    +_LP0 = _LP0 + (    0.28971609982801 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28971609982801 * _TEMP);
770458    +
770459    +***  Effect: PC_2 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_2 ;
770460    +_TEMP = PC_2 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_2 ;
770461    +_LP0 = _LP0 + (   -0.49528883857799 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.49528883857799 * _TEMP);
770462    +
770463    +***  Effect: PC_3 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_3 ;
770464    +_TEMP = PC_3 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_3 ;
770465    +_LP0 = _LP0 + (   -0.10447517157595 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.10447517157595 * _TEMP);
770466    +
770467    +***  Effect: PC_4 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_4 ;
770468    +_TEMP = PC_4 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_4 ;
770469    +_LP0 = _LP0 + (    0.13678148584551 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13678148584551 * _TEMP);
770470    +
770471    +***  Effect: PC_5 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_5 ;
770472    +_TEMP = PC_5 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_5 ;
770473    +_LP0 = _LP0 + (   -0.35151849887767 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.35151849887767 * _TEMP);
770474    +
770475    +***  Effect: PC_6 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_6 ;
770476    +_TEMP = PC_6 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_6 ;
770477    +_LP0 = _LP0 + (     0.1612221904472 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.1612221904472 * _TEMP);
770478    +
770479    +***  Effect: PC_7 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_7 ;
770480    +_TEMP = PC_7 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_7 ;
770481    +_LP0 = _LP0 + (    0.13756842141361 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.13756842141361 * _TEMP);
770482    +
770483    +***  Effect: PC_8 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_8 ;
770484    +_TEMP = PC_8 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_8 ;
770485    +_LP0 = _LP0 + (    0.33565116397792 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.33565116397792 * _TEMP);
770486    +
770487    +***  Effect: PC_9 ;
MPRINT(EM_DIAGRAM):   *** Effect: PC_9 ;
770488    +_TEMP = PC_9 ;
MPRINT(EM_DIAGRAM):   _TEMP = PC_9 ;
770489    +_LP0 = _LP0 + (    0.46160039482548 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46160039482548 * _TEMP);
770490    +
770491    +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
770492    +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
770493    +_TEMP =    -2.76146098736578 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -2.76146098736578 + _LP0;
770494    +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
770495    +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
770496    +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
770497    +end;
MPRINT(EM_DIAGRAM):   end;
770498    +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
770499    +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
770500    +
770501    +REG2DR1:
770502    +
770503    +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
770504    +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
770505    +   R_DepVar1 = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
770506    +   R_DepVar0 = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
770507    +end;
MPRINT(EM_DIAGRAM):   end;
770508    +else do;
MPRINT(EM_DIAGRAM):   else do;
770509    +    label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
770510    +    label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
770511    +   R_DepVar1 = - _P0;
MPRINT(EM_DIAGRAM):   R_DepVar1 = - _P0;
770512    +   R_DepVar0 = - _P1;
MPRINT(EM_DIAGRAM):   R_DepVar0 = - _P1;
770513    +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
770514    +      when (0)  R_DepVar1 = R_DepVar1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_DepVar1 = R_DepVar1 + 1;
770515    +      when (1)  R_DepVar0 = R_DepVar0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_DepVar0 = R_DepVar0 + 1;
770516    +   end;
MPRINT(EM_DIAGRAM):   end;
770517    +end;
MPRINT(EM_DIAGRAM):   end;
770518    +
770519    +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
770520    +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
770521    +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
770522    +P_DepVar1 = _P0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = _P0;
770523    +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
770524    +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
770525    +P_DepVar0 = _P1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = _P1;
770526    +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
770527    +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
770528    +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
770529    +end;
MPRINT(EM_DIAGRAM):   end;
770530    +I_DepVar = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_DepVar = REG2DRF[_IY];
770531    +U_DepVar = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_DepVar = REG2DRU[_IY];
770532    +
770533    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
770534    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
770535    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
770536     run;

NOTE: DATA STEP view saved on file EMWS8.REG2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
770537     quit;
770538     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
770539     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
770540     * Reg2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg2: Computing metadata for TRAIN data;
770541     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.REG2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Reg2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Reg2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Reg2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Reg2_TRAIN out=WORK.M1B3OPQT noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B3OPQT;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B3OPQT(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B3OPQT;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B3OPQT;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3G3N5ML NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3G3N5ML;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3G3N5ML;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1X_1LG6(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3G3N5ML;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3G3N5ML;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3G3N5ML;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3G3N5ML;
MPRINT(EMADVISECOLUMNS):   set WORK.M3G3N5ML;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg2";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Reg2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'PC_1' 'PC_10' 'PC_11' 'PC_13' 'PC_14' 'PC_15' 
'PC_16' 'PC_2' 'PC_3' 'PC_4' 'PC_5' 'PC_6' 'PC_7' 'PC_8' 'PC_9' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg2: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
770876     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
770877     set EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg2_EMINFO;
770878     where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
770879     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.REG2_EMINFO.
      WHERE (DATA='Reg2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770880     data EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Reg2_EMINFO;
770881     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
770882     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
770883     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
770887     run;
770888     data EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_EMINFO;
770889     set EMWS8.Reg2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Reg2_EMINFO WORK.MODELTEMP_INFO;
770890     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770891     proc sort data = EMWS8.Reg2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Reg2_EMINFO NOTHREADS;
770892     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
770893     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.REG2_EMINFO.
NOTE: The data set EMWS8.REG2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770894     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
770895     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
770896     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

770897     proc sort data = EMWS8.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
770898     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
770899     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.REG2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770900     data EMWS8.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Reg2_EMINFO;
770901     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
770902     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
770903     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.REG2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

770904     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
770905     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
770906     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
770907     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.REG2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS8.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
