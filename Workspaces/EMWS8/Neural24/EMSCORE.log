MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17.26 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                19. April 2016
Time:                17.26 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1MWR1F6 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural24\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1MWR1F6 new;
MPRINT(EM_DIAGRAM):   run;
816832     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
816833     set EMWS8.Neural24_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural24_OUTKEY;
816834     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
816835     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set EMWS8.NEURAL24_OUTKEY.
NOTE: The data set WORK.OUTKEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

816836     filename emflow
816836   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural24\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural24\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural24: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
816837     *------------------------------------------------------------*;
816838     * Neural24: Scoring DATA data;
816839     *------------------------------------------------------------*;
816840     data EMWS8.Neural24_TRAIN
816841     / view=EMWS8.Neural24_TRAIN
816842     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural24_TRAIN / view=EMWS8.Neural24_TRAIN ;
816843     set EMWS8.Varsel_TRAIN
816844     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_TRAIN ;
816845     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural24\EMFLOWSCORE.sas.
816846    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
816847    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
816848    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
816849    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
816850    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
816851    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
816852    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
816853    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
816854    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
816855    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
816856    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
816857    +LENGTH _WARN_ $4
816858    +      F_DepVar  $ 12
816859    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
816860    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
816861    +
816862    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
816863    +
816864    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
816865    +
816866    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
816867    +
816868    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
816869    +
816870    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
816871    +
816872    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
816873    +
816874    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
816875    +
816876    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
816877    +
816878    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
816879    +
816880    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
816881    +
816882    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
816883    +
816884    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
816885    +
816886    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
816887    +
816888    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
816889    +
816890    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
816891    +
816892    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
816893    +
816894    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
816895    +
816896    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
816897    +
816898    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
816899    +
816900    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
816901    +
816902    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
816903    +
816904    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
816905    +
816906    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
816907    +
816908    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
816909    +
816910    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
816911    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
816912    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
816913    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
816914    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
816915    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
816916    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816917    +end;
MPRINT(EM_DIAGRAM):   end;
816918    +else do;
MPRINT(EM_DIAGRAM):   else do;
816919    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
816920    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
816921    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
816922    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
816923    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
816924    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
816925    +   end;
MPRINT(EM_DIAGRAM):   end;
816926    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
816927    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
816928    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
816929    +   end;
MPRINT(EM_DIAGRAM):   end;
816930    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
816931    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
816932    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
816933    +   end;
MPRINT(EM_DIAGRAM):   end;
816934    +   else do;
MPRINT(EM_DIAGRAM):   else do;
816935    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
816936    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
816937    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
816938    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816939    +   end;
MPRINT(EM_DIAGRAM):   end;
816940    +end;
MPRINT(EM_DIAGRAM):   end;
816941    +
816942    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816943    +*** Checking missing input Interval
816944    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
816945    +
816946    +IF NMISS(
816947    +   AcceptedCmpTotal ,
816948    +   Frq ,
816949    +   Income ,
816950    +   Mnt ,
816951    +   MntFruits ,
816952    +   MntGoldProds ,
816953    +   MntMeatProducts ,
816954    +   MntSweetProducts ,
816955    +   NumCatalogPurchases ,
816956    +   NumWebPurchases ,
816957    +   RFMstat ,
816958    +   RMntFrq ,
816959    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
816960    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
816961    +
816962    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
816963    +END;
MPRINT(EM_DIAGRAM):   END;
816964    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816965    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
816966    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
816967    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
816968    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
816969    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
816970    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
816971    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
816972    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
816973    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
816974    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
816975    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
816976    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
816977    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
816978    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
816979    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
816980    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
816981    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
816982    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
816983    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
816984    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
816985    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
816986    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
816987    +END;
MPRINT(EM_DIAGRAM):   END;
816988    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
816989    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
816990    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
816991    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
816992    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
816993    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
816994    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
816995    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
816996    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
816997    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
816998    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
816999    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
817000    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
817001    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
817002    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
817003    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
817004    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
817005    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
817006    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
817007    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
817008    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
817009    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
817010    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
817011    +   ELSE S_NumCatalogPurchases
817012    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
817013    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
817014    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
817015    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
817016    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
817017    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
817018    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
817019    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
817020    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
817021    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
817022    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
817023    +END;
MPRINT(EM_DIAGRAM):   END;
817024    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817025    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
817026    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817027    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817028    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
817029    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817030    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817031    +   H11  =    -0.23012961341552 * S_AcceptedCmpTotal  +     0.46196798170863 *
817032    +        S_Frq  +     0.10792957007496 * S_Income  +     0.01598495816724 *
817033    +        S_Mnt  +     0.04110199082094 * S_MntFruits  +    -0.03861520815517 *
817034    +        S_MntGoldProds  +    -0.21282606264093 * S_MntMeatProducts
817035    +          +     0.01715600461602 * S_MntSweetProducts
817036    +          +    -0.23329547812839 * S_NumCatalogPurchases
817037    +          +    -0.11507537772092 * S_NumWebPurchases
817038    +          +    -0.03410149182919 * S_RFMstat  +     0.14966504694497 *
817039    +        S_RMntFrq  +     0.28566269847001 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.23012961341552 * S_AcceptedCmpTotal + 0.46196798170863 * S_Frq 
+ 0.10792957007496 * S_Income + 0.01598495816724 * S_Mnt + 0.04110199082094 * S_MntFruits + 
-0.03861520815517 * S_MntGoldProds + -0.21282606264093 * S_MntMeatProducts + 0.01715600461602 
* S_MntSweetProducts + -0.23329547812839 * S_NumCatalogPurchases + -0.11507537772092 * 
S_NumWebPurchases + -0.03410149182919 * S_RFMstat + 0.14966504694497 * S_RMntFrq + 
0.28566269847001 * S_Recency ;
817040    +   H12  =     0.05540254918167 * S_AcceptedCmpTotal  +     1.29235531722682 *
817041    +        S_Frq  +     0.06366828093255 * S_Income  +    -0.26947825948002 *
817042    +        S_Mnt  +     0.21714508305015 * S_MntFruits  +     0.26812345284438 *
817043    +        S_MntGoldProds  +    -4.04479521582802 * S_MntMeatProducts
817044    +          +     0.04792709763034 * S_MntSweetProducts
817045    +          +    -1.08549455020763 * S_NumCatalogPurchases
817046    +          +    -0.48337305556946 * S_NumWebPurchases
817047    +          +    -0.22222278831599 * S_RFMstat  +    -0.23407358569927 *
817048    +        S_RMntFrq  +    -0.01186280761112 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.05540254918167 * S_AcceptedCmpTotal + 1.29235531722682 * S_Frq + 
0.06366828093255 * S_Income + -0.26947825948002 * S_Mnt + 0.21714508305015 * S_MntFruits + 
0.26812345284438 * S_MntGoldProds + -4.04479521582802 * S_MntMeatProducts + 0.04792709763034 * 
S_MntSweetProducts + -1.08549455020763 * S_NumCatalogPurchases + -0.48337305556946 * 
S_NumWebPurchases + -0.22222278831599 * S_RFMstat + -0.23407358569927 * S_RMntFrq + 
-0.01186280761112 * S_Recency ;
817049    +   H11  = H11  +    -0.14627707216264 * G_Marital_Status0
817050    +          +    -0.05689581037738 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14627707216264 * G_Marital_Status0 + -0.05689581037738 * 
G_Marital_Status1 ;
817051    +   H12  = H12  +     0.20389328110579 * G_Marital_Status0
817052    +          +     0.12863423712687 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.20389328110579 * G_Marital_Status0 + 0.12863423712687 * 
G_Marital_Status1 ;
817053    +   H11  =     0.26937694072834 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.26937694072834 + H11 ;
817054    +   H12  =    -3.07173299704836 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -3.07173299704836 + H12 ;
817055    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
817056    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
817057    +END;
MPRINT(EM_DIAGRAM):   END;
817058    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817059    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
817060    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
817061    +END;
MPRINT(EM_DIAGRAM):   END;
817062    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817063    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
817064    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817065    +
817066    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
817067    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
817068    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
817069    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
817070    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
817071    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
817072    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
817073    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
817074    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
817075    +end;
MPRINT(EM_DIAGRAM):   end;
817076    +else do;
MPRINT(EM_DIAGRAM):   else do;
817077    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
817078    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
817079    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
817080    +   end;
MPRINT(EM_DIAGRAM):   end;
817081    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
817082    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
817083    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
817084    +   end;
MPRINT(EM_DIAGRAM):   end;
817085    +   else do;
MPRINT(EM_DIAGRAM):   else do;
817086    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
817087    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
817088    +   end;
MPRINT(EM_DIAGRAM):   end;
817089    +end;
MPRINT(EM_DIAGRAM):   end;
817090    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817091    +   P_DepVar1  =    -8.61120981649634 * H11  +    -5.72570140806215 * H12 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.61120981649634 * H11 + -5.72570140806215 * H12 ;
817092    +   P_DepVar1  =    -4.82159913495753 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -4.82159913495753 + P_DepVar1 ;
817093    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
817094    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
817095    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
817096    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
817097    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
817098    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
817099    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
817100    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
817101    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
817102    +END;
MPRINT(EM_DIAGRAM):   END;
817103    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817104    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
817105    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
817106    +END;
MPRINT(EM_DIAGRAM):   END;
817107    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
817108    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
817109    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
817110    +END;
MPRINT(EM_DIAGRAM):   END;
817111    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
817112    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
817113    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
817114    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
817115    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
817116    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
817117    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
817118    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817119    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
817120    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817121    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
817122    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
817123    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
817124    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
817125    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
817126    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
817127    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
817128    +END;
MPRINT(EM_DIAGRAM):   END;
817129    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
817130    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
817131    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
817132    +drop
817133    +H11
817134    +H12
817135    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 ;
817136    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
817137     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL24_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
817138     quit;
817139     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
817140     filename emflow
817140   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural24\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural24\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural24: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
817141     *------------------------------------------------------------*;
817142     * Neural24: Scoring VALIDATE data;
817143     *------------------------------------------------------------*;
817144     data EMWS8.Neural24_VALIDATE
817145     / view=EMWS8.Neural24_VALIDATE
817146     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural24_VALIDATE / view=EMWS8.Neural24_VALIDATE ;
817147     set EMWS8.Varsel_VALIDATE
817148     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Varsel_VALIDATE ;
817149     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\Neural24\EMFLOWSCORE.sas.
817150    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
817151    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
817152    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
817153    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
817154    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
817155    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
817156    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
817157    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
817158    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
817159    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
817160    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
817161    +LENGTH _WARN_ $4
817162    +      F_DepVar  $ 12
817163    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
817164    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
817165    +
817166    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
817167    +
817168    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
817169    +
817170    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
817171    +
817172    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
817173    +
817174    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
817175    +
817176    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
817177    +
817178    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
817179    +
817180    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
817181    +
817182    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
817183    +
817184    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
817185    +
817186    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
817187    +
817188    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
817189    +
817190    +      label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status0 = 'Dummy: G_Marital_Status=0' ;
817191    +
817192    +      label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
MPRINT(EM_DIAGRAM):   label G_Marital_Status1 = 'Dummy: G_Marital_Status=1' ;
817193    +
817194    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
817195    +
817196    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
817197    +
817198    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
817199    +
817200    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
817201    +
817202    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
817203    +
817204    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
817205    +
817206    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
817207    +
817208    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
817209    +
817210    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
817211    +
817212    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
817213    +
817214    +*** Generate dummy variables for G_Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_Marital_Status ;
817215    +drop G_Marital_Status0 G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   drop G_Marital_Status0 G_Marital_Status1 ;
817216    +if missing( G_Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_Marital_Status ) then do;
817217    +   G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
817218    +   G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
817219    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
817220    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
817221    +end;
MPRINT(EM_DIAGRAM):   end;
817222    +else do;
MPRINT(EM_DIAGRAM):   else do;
817223    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
817224    +   _dm12 = put( G_Marital_Status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_Marital_Status , BEST12. );
817225    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
817226    +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
817227    +      G_Marital_Status0 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = -1;
817228    +      G_Marital_Status1 = -1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = -1;
817229    +   end;
MPRINT(EM_DIAGRAM):   end;
817230    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
817231    +      G_Marital_Status0 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 1;
817232    +      G_Marital_Status1 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 0;
817233    +   end;
MPRINT(EM_DIAGRAM):   end;
817234    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
817235    +      G_Marital_Status0 = 0;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = 0;
817236    +      G_Marital_Status1 = 1;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = 1;
817237    +   end;
MPRINT(EM_DIAGRAM):   end;
817238    +   else do;
MPRINT(EM_DIAGRAM):   else do;
817239    +      G_Marital_Status0 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status0 = .;
817240    +      G_Marital_Status1 = .;
MPRINT(EM_DIAGRAM):   G_Marital_Status1 = .;
817241    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
817242    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
817243    +   end;
MPRINT(EM_DIAGRAM):   end;
817244    +end;
MPRINT(EM_DIAGRAM):   end;
817245    +
817246    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817247    +*** Checking missing input Interval
817248    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
817249    +
817250    +IF NMISS(
817251    +   AcceptedCmpTotal ,
817252    +   Frq ,
817253    +   Income ,
817254    +   Mnt ,
817255    +   MntFruits ,
817256    +   MntGoldProds ,
817257    +   MntMeatProducts ,
817258    +   MntSweetProducts ,
817259    +   NumCatalogPurchases ,
817260    +   NumWebPurchases ,
817261    +   RFMstat ,
817262    +   RMntFrq ,
817263    +   Recency   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Frq , Income , Mnt , MntFruits , 
MntGoldProds , MntMeatProducts , MntSweetProducts , NumCatalogPurchases , NumWebPurchases , 
RFMstat , RMntFrq , Recency ) THEN DO;
817264    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
817265    +
817266    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
817267    +END;
MPRINT(EM_DIAGRAM):   END;
817268    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817269    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
817270    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817271    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817272    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
817273    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
817274    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
817275    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
817276    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
817277    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
817278    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
817279    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
817280    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
817281    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
817282    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
817283    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
817284    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
817285    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
817286    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
817287    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
817288    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
817289    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
817290    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
817291    +END;
MPRINT(EM_DIAGRAM):   END;
817292    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817293    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
817294    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
817295    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 * 
AcceptedCmpTotal ;
817296    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
817297    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
817298    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
817299    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
817300    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
817301    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
817302    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
817303    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
817304    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
817305    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
817306    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
817307    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds 
;
817308    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
817309    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
817310    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 * 
MntMeatProducts ;
817311    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
817312    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
817313    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 * 
MntSweetProducts ;
817314    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
817315    +   ELSE S_NumCatalogPurchases
817316    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
817317    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 * 
NumCatalogPurchases ;
817318    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
817319    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
817320    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 * 
NumWebPurchases ;
817321    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
817322    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
817323    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
817324    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
817325    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
817326    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
817327    +END;
MPRINT(EM_DIAGRAM):   END;
817328    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817329    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
817330    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817331    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817332    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
817333    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817334    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817335    +   H11  =    -0.23012961341552 * S_AcceptedCmpTotal  +     0.46196798170863 *
817336    +        S_Frq  +     0.10792957007496 * S_Income  +     0.01598495816724 *
817337    +        S_Mnt  +     0.04110199082094 * S_MntFruits  +    -0.03861520815517 *
817338    +        S_MntGoldProds  +    -0.21282606264093 * S_MntMeatProducts
817339    +          +     0.01715600461602 * S_MntSweetProducts
817340    +          +    -0.23329547812839 * S_NumCatalogPurchases
817341    +          +    -0.11507537772092 * S_NumWebPurchases
817342    +          +    -0.03410149182919 * S_RFMstat  +     0.14966504694497 *
817343    +        S_RMntFrq  +     0.28566269847001 * S_Recency ;
MPRINT(EM_DIAGRAM):   H11 = -0.23012961341552 * S_AcceptedCmpTotal + 0.46196798170863 * S_Frq 
+ 0.10792957007496 * S_Income + 0.01598495816724 * S_Mnt + 0.04110199082094 * S_MntFruits + 
-0.03861520815517 * S_MntGoldProds + -0.21282606264093 * S_MntMeatProducts + 0.01715600461602 
* S_MntSweetProducts + -0.23329547812839 * S_NumCatalogPurchases + -0.11507537772092 * 
S_NumWebPurchases + -0.03410149182919 * S_RFMstat + 0.14966504694497 * S_RMntFrq + 
0.28566269847001 * S_Recency ;
817344    +   H12  =     0.05540254918167 * S_AcceptedCmpTotal  +     1.29235531722682 *
817345    +        S_Frq  +     0.06366828093255 * S_Income  +    -0.26947825948002 *
817346    +        S_Mnt  +     0.21714508305015 * S_MntFruits  +     0.26812345284438 *
817347    +        S_MntGoldProds  +    -4.04479521582802 * S_MntMeatProducts
817348    +          +     0.04792709763034 * S_MntSweetProducts
817349    +          +    -1.08549455020763 * S_NumCatalogPurchases
817350    +          +    -0.48337305556946 * S_NumWebPurchases
817351    +          +    -0.22222278831599 * S_RFMstat  +    -0.23407358569927 *
817352    +        S_RMntFrq  +    -0.01186280761112 * S_Recency ;
MPRINT(EM_DIAGRAM):   H12 = 0.05540254918167 * S_AcceptedCmpTotal + 1.29235531722682 * S_Frq + 
0.06366828093255 * S_Income + -0.26947825948002 * S_Mnt + 0.21714508305015 * S_MntFruits + 
0.26812345284438 * S_MntGoldProds + -4.04479521582802 * S_MntMeatProducts + 0.04792709763034 * 
S_MntSweetProducts + -1.08549455020763 * S_NumCatalogPurchases + -0.48337305556946 * 
S_NumWebPurchases + -0.22222278831599 * S_RFMstat + -0.23407358569927 * S_RMntFrq + 
-0.01186280761112 * S_Recency ;
817353    +   H11  = H11  +    -0.14627707216264 * G_Marital_Status0
817354    +          +    -0.05689581037738 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14627707216264 * G_Marital_Status0 + -0.05689581037738 * 
G_Marital_Status1 ;
817355    +   H12  = H12  +     0.20389328110579 * G_Marital_Status0
817356    +          +     0.12863423712687 * G_Marital_Status1 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.20389328110579 * G_Marital_Status0 + 0.12863423712687 * 
G_Marital_Status1 ;
817357    +   H11  =     0.26937694072834 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.26937694072834 + H11 ;
817358    +   H12  =    -3.07173299704836 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -3.07173299704836 + H12 ;
817359    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
817360    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
817361    +END;
MPRINT(EM_DIAGRAM):   END;
817362    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817363    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
817364    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
817365    +END;
MPRINT(EM_DIAGRAM):   END;
817366    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817367    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
817368    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817369    +
817370    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
817371    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
817372    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
817373    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
817374    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
817375    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
817376    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
817377    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
817378    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
817379    +end;
MPRINT(EM_DIAGRAM):   end;
817380    +else do;
MPRINT(EM_DIAGRAM):   else do;
817381    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
817382    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
817383    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
817384    +   end;
MPRINT(EM_DIAGRAM):   end;
817385    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
817386    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
817387    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
817388    +   end;
MPRINT(EM_DIAGRAM):   end;
817389    +   else do;
MPRINT(EM_DIAGRAM):   else do;
817390    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
817391    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
817392    +   end;
MPRINT(EM_DIAGRAM):   end;
817393    +end;
MPRINT(EM_DIAGRAM):   end;
817394    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
817395    +   P_DepVar1  =    -8.61120981649634 * H11  +    -5.72570140806215 * H12 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -8.61120981649634 * H11 + -5.72570140806215 * H12 ;
817396    +   P_DepVar1  =    -4.82159913495753 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -4.82159913495753 + P_DepVar1 ;
817397    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
817398    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
817399    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
817400    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
817401    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
817402    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
817403    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
817404    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
817405    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
817406    +END;
MPRINT(EM_DIAGRAM):   END;
817407    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
817408    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
817409    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
817410    +END;
MPRINT(EM_DIAGRAM):   END;
817411    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
817412    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
817413    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
817414    +END;
MPRINT(EM_DIAGRAM):   END;
817415    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
817416    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
817417    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
817418    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
817419    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
817420    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
817421    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
817422    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817423    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
817424    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
817425    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
817426    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
817427    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
817428    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
817429    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
817430    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
817431    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
817432    +END;
MPRINT(EM_DIAGRAM):   END;
817433    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
817434    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
817435    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
817436    +drop
817437    +H11
817438    +H12
817439    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 ;
817440    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
817441     run;

NOTE: DATA STEP view saved on file EMWS8.NEURAL24_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
817442     quit;
817443     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
817444     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
817445     * Neural24: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural24: Computing metadata for TRAIN data;
817446     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.NEURAL24_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\Neural24\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural24_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural24_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural24_TRAIN out=WORK.M0T3ZBT1 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0T3ZBT1;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0T3ZBT1(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0T3ZBT1;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0T3ZBT1;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M063SI5I NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M063SI5I;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M063SI5I;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0MJQEGR(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M063SI5I;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M063SI5I;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M063SI5I;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M063SI5I;
MPRINT(EMADVISECOLUMNS):   set WORK.M063SI5I;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural24_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural24";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural24";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural24";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural24: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
817758     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
817759     set EMWS8.Neural24_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural24_EMINFO;
817760     where DATA='Neural24' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural24' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
817761     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.NEURAL24_EMINFO.
      WHERE (DATA='Neural24') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

817762     data EMWS8.Neural24_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural24_EMINFO;
817763     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
817764     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
817765     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.NEURAL24_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
817769     run;
817770     data EMWS8.Neural24_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural24_EMINFO;
817771     set EMWS8.Neural24_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural24_EMINFO WORK.MODELTEMP_INFO;
817772     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL24_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL24_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817773     proc sort data = EMWS8.Neural24_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural24_EMINFO NOTHREADS;
817774     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817775     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.NEURAL24_EMINFO.
NOTE: The data set EMWS8.NEURAL24_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817776     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
817777     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817778     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817779     proc sort data = EMWS8.Neural24_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural24_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
817780     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817781     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL24_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

817782     data EMWS8.Neural24_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural24_EMINFO;
817783     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
817784     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
817785     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL24_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

817786     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
817787     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
817788     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
817789     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS8.NEURAL24_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.NEURAL24_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
