*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                09.25 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.25 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                09.25 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3MS9CZI
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3MS9CZI new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.25 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.25 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1490179    proc freq data=EMWS8.Tree2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Tree2_VariableSet noprint;
1490180    table ROLE*LEVEL/out=WORK.Tree2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree2META;
1490181    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS8.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1490182    proc print data=WORK.Tree2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2META label noobs;
1490183    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1490184    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1490184  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1490184  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
1490185    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1490186    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1490187    run;
 
NOTE: There were 2 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1300.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490188    title10;
MPRINT(EM_DIAGRAM):   title10;
1490189    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN
EMWS8.PRINCOMP_TRAIN EMWS8.PRINCOMP_TRAIN EMWS8 PRINCOMP_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.PRINCOMP_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Tree2_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_DepVar_DD
out=EMWS8.Tree2_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
1490236    data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1490237    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1490238    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1490238  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1490238  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1490239       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1490239  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1490239  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1490240    set EMWS8.TREE2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.TREE2_DEPVAR_DM( where=(_TYPE_="TARGET"));
1490241    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1490242    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1490243    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1490244    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1490245    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1490246    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1490247    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1490248    end;
MPRINT(EM_DIAGRAM):   end;
1490249    output;
MPRINT(EM_DIAGRAM):   output;
1490250    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.TREE2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490251    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1490252    proc print data=WORK.Tree2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2_EVENT noobs label;
1490253    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1490254    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1490255    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1490256    run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 1301.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490257    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1490258    proc print data = EMWS8.Tree2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Tree2_DepVar_DM noobs label;
1490259    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1490260    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
1490261    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1490261  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1490261  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1490262    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1490263    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1490264    run;
 
NOTE: There were 7 observations read from the data set EMWS8.TREE2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1302.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490265    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Preparing metadata for Training;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M0V_UIYD;
MPRINT(EM_DIAGRAM):   set WORK.M0V_UIYD;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
1490274    data work.Tree2_tarmetads;
MPRINT(EM_DIAGRAM):    data work.Tree2_tarmetads;
1490275    set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
1490276    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.PRINCOMP_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE2_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490277    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1490278    set WORK.M0V_UIYD;
MPRINT(EM_DIAGRAM):   set WORK.M0V_UIYD;
1490279    where role='TARGET' AND use='Y';
MPRINT(EM_DIAGRAM):   where role='TARGET' AND use='Y';
1490280    call symput('targetUsed', NAME);
MPRINT(EM_DIAGRAM):   call symput('targetUsed', NAME);
1490281    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M0V_UIYD.
      WHERE (role='TARGET') and (use='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490282    data WORK.M0V_UIYD;
MPRINT(EM_DIAGRAM):    data WORK.M0V_UIYD;
1490283    set WORK.M0V_UIYD end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M0V_UIYD end=eof;
1490284    output;
MPRINT(EM_DIAGRAM):   output;
1490285    if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
1490286    NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
1490287    ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
1490288    LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
1490289    TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
1490290    output;
MPRINT(EM_DIAGRAM):   output;
1490291    end;
MPRINT(EM_DIAGRAM):   end;
1490292    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.M0V_UIYD.
NOTE: The data set WORK.M0V_UIYD has 20 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.TREE2_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
1490293    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1490294    * Tree2: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Tree2: Create decision matrix;
1490295    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1490296    data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
1490297      length   DepVar                           $  32
1490298               COUNT                                8
1490299               DATAPRIOR                            8
1490300               TRAINPRIOR                           8
1490301               DECPRIOR                             8
1490302               DECISION1                            8
1490303               DECISION2                            8
1490304               ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
1490305
1490306      label    COUNT="Level Counts"
1490307               DATAPRIOR="Data Proportions"
1490308               TRAINPRIOR="Training Proportions"
1490309               DECPRIOR="Decision Priors"
1490310               DECISION1="1"
1490311               DECISION2="0"
1490312               ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
1490313      format   COUNT 10.
1490314               ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
1490315    DepVar="1"; COUNT=359; DATAPRIOR=0.0643642072; TRAINPRIOR=0.15122156697556;
1490315  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.0643642072;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
1490316    output;
MPRINT(EM_DIAGRAM):   output;
1490317    DepVar="0"; COUNT=2015; DATAPRIOR=0.9356357928; TRAINPRIOR=0.84877843302443;
1490317  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.9356357928;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
1490318    output;
MPRINT(EM_DIAGRAM):   output;
1490319    ;
MPRINT(EM_DIAGRAM):   ;
1490320    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490321    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1490322    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
1490323    label DECISION1= '1';
1490324    label DECISION2= '0';
1490325    run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
1490326    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Tree2: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490327    *------------------------------------------------------------* ;
1490328    * Tree2: Tree Variables Macro ;
1490329    *------------------------------------------------------------* ;
1490330    %macro EM_TREEVARS;
1490331        PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5 PC_6
1490332       PC_7 PC_8 PC_9 Year_Birth
1490333    %mend EM_TREEVARS;
1490334    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490335    * Tree2: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Tree2: Tree Targets Macro ;
1490336    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490337    %macro EM_TREETARGETS;
1490338        DepVar
1490339    %mend EM_TREETARGETS;
1490340    data EMWS8.EM_Tree2 / view=EMWS8.EM_Tree2;
MPRINT(EM_DIAGRAM):   data EMWS8.EM_Tree2 / view=EMWS8.EM_Tree2;
1490341    set
1490341  ! EMWS8.PRINCOMP_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN(keep
MPRINT(EM_DIAGRAM):  =PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5
PC_6 PC_7 PC_8 PC_9 Year_Birth DepVar);
1490342    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS8.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Tree2: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490343    *------------------------------------------------------------* ;
1490344    * Tree2: Interval Inputs Macro ;
1490345    *------------------------------------------------------------* ;
1490346    %macro INTINPUTS;
1490347        PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5 PC_6
1490348       PC_7 PC_8 PC_9 Year_Birth
1490349    %mend INTINPUTS;
1490350    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490351    * Tree2: Binary and Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Tree2: Binary and Nominal Inputs Macro ;
1490352    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490353    %macro NOMINPUTS;
1490354
1490355    %mend NOMINPUTS;
1490356    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490357    * Tree2: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Tree2: Ordinal Inputs Macro ;
1490358    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
1490359    %macro ORDINPUTS;
1490360
1490361    %mend ORDINPUTS;
1490362    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1490363    * Tree2: Run ARBOR procedure;
MPRINT(EM_DIAGRAM):   * Tree2: Run ARBOR procedure;
1490364    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
 
A profit/loss matrix must be defined for AssessMeasure=PROFIT/LOSS
The value for Assessment Measure has been reset to DECISION.
 
1490365    proc arbor data=EMWS8.EM_Tree2
1490366    Leafsize=5
1490367    Mincatsize = 5
1490368    Maxbranch=2
1490369    Maxdepth=6
1490370    alpha = 0.2
1490371    Padjust=
1490372    CHAIDBEFORE
1490373    DEPTH
1490374    MAXRULES=5
1490375    MAXSURRS=0
1490376    Missing=USEINSEARCH
1490377    Exhaustive=5000
1490378    event='1'
1490379    ;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS8.EM_Tree2 Leafsize=5 Mincatsize = 5 Maxbranch=2
Maxdepth=6 alpha = 0.2 Padjust= CHAIDBEFORE DEPTH MAXRULES=5 MAXSURRS=0 Missing=USEINSEARCH
Exhaustive=5000 event='1' ;
1490380    ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
1490381    input %INTINPUTS
MPRINT(INTINPUTS):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_3 PC_4 PC_5
PC_6 PC_7 PC_8 PC_9 Year_Birth
1490382    / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
1490383    target DepVar / level=BINARY
1490384    Criterion=PROBCHISQ
1490385    ;
MPRINT(EM_DIAGRAM):   target DepVar / level=BINARY Criterion=PROBCHISQ ;
1490386    ;
MPRINT(EM_DIAGRAM):   ;
1490387    Performance DISK
1490388    NodeSize=20000
1490389    ;
MPRINT(EM_DIAGRAM):   Performance DISK NodeSize=20000 ;
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
1490390    Assess
1490391    Validata=EMWS8.PRINCOMP_VALIDATE
1490392    measure=MISC
1490393    ;
MPRINT(EM_DIAGRAM):   Assess Validata=EMWS8.PRINCOMP_VALIDATE measure=MISC ;
NOTE: 1415692 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 172601344 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1196752 bytes of work memory.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The subtree sequence contains 27 subtrees. The largest has 53 nodes and 27 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
1490394    SUBTREE BEST
1490395    ;
MPRINT(EM_DIAGRAM):   SUBTREE BEST ;
NOTE: Using subtree with 23 nodes and 12 leaves.
1490396    MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: Created macro variable NLEAVES equal to 12.
1490397    save
1490398    MODEL=EMWS8.Tree2_EMTREE
1490399    SEQUENCE=EMWS8.Tree2_OUTSEQ
1490400    IMPORTANCE=EMWS8.Tree2_OUTIMPORT
1490401    NODESTAT=EMWS8.Tree2_OUTNODES
1490402    SUMMARY=EMWS8.Tree2_OUTSUMMARY
1490403    STATSBYNODE=EMWS8.Tree2_OUTSTATS
1490404    Topology=EMWS8.Tree2_OUTTOPOLOGY
1490405    Pathlistnonmissing = EMWS8.Tree2_OUTPATH
1490406    Rules = EMWS8.Tree2_OUTRULES
1490407    ;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS8.Tree2_EMTREE SEQUENCE=EMWS8.Tree2_OUTSEQ
IMPORTANCE=EMWS8.Tree2_OUTIMPORT NODESTAT=EMWS8.Tree2_OUTNODES SUMMARY=EMWS8.Tree2_OUTSUMMARY
STATSBYNODE=EMWS8.Tree2_OUTSTATS Topology=EMWS8.Tree2_OUTTOPOLOGY Pathlistnonmissing =
EMWS8.Tree2_OUTPATH Rules = EMWS8.Tree2_OUTRULES ;
NOTE: The data set EMWS8.TREE2_OUTIMPORT has 18 observations and 6 variables.
NOTE: The data set EMWS8.TREE2_EMTREE has 1674 observations and 4 variables.
NOTE: The data set EMWS8.TREE2_OUTNODES has 23 observations and 24 variables.
NOTE: The data set EMWS8.TREE2_OUTPATH has 110 observations and 7 variables.
NOTE: The data set EMWS8.TREE2_OUTRULES has 341 observations and 6 variables.
NOTE: The data set EMWS8.TREE2_OUTSEQ has 27 observations and 20 variables.
NOTE: The data set EMWS8.TREE2_OUTSTATS has 161 observations and 5 variables.
NOTE: The data set EMWS8.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS8.TREE2_OUTTOPOLOGY has 23 observations and 5 variables.
1490408    code file="C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMPUBLISHSCORE.sas"
1490409    group=Tree2
1490410    ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMPUBLISHSCORE.sas" group=Tree2 ;
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMPUBLISHSCORE.sas
      opened.
1490411    code file="C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas"
1490412    group=Tree2
1490413    residual
1490414    ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas" group=Tree2
residual ;
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas
      opened.
1490415    score data=EMWS8.EM_Tree2 out=_NULL_
NOTE: View EMWS8.EM_TREE2.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
1490416    outfit=WORK.FIT1
1490417    role=TRAIN
1490418    ;
MPRINT(EM_DIAGRAM):   score data=EMWS8.EM_Tree2 out=_NULL_ outfit=WORK.FIT1 role=TRAIN ;
NOTE: The data set WORK.FIT1 has 1 observations and 10 variables.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
1490419    score data=EMWS8.PRINCOMP_VALIDATE out=_NULL_
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
1490420    outfit=WORK.FIT2
1490421    role=VALID
1490422    ;
MPRINT(EM_DIAGRAM):   score data=EMWS8.PRINCOMP_VALIDATE out=_NULL_ outfit=WORK.FIT2
role=VALID ;
NOTE: The data set WORK.FIT2 has 1 observations and 8 variables.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
1490423    run;
MPRINT(EM_DIAGRAM):   run;
 
1490424    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.EM_TREE2.VIEW used (Total process time):
      real time           0.48 seconds
      cpu time            0.45 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.49 seconds
      cpu time            0.45 seconds
 
 
1490425    %put &nleaves;
12
1490426    data EMWS8.Tree2_OUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_OUTFIT;
1490427    merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
1490428    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT1.
NOTE: There were 1 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS8.TREE2_OUTFIT has 1 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490429    data EMWS8.Tree2_OUTIMPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_OUTIMPORT;
1490430    set EMWS8.Tree2_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTIMPORT;
1490431    label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL =
1490431  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES =
1490431  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
1490432       "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES =
1490432  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
1490433    VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
1490433  ! RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
1490434    ;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of
Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules"
VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training Importance" ;
1490435    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: There were 18 observations read from the data set EMWS8.TREE2_OUTIMPORT.
NOTE: The data set EMWS8.TREE2_OUTIMPORT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490436    filename x "C:\\predictive-models-project\Workspaces\EMWS8\Tree2\OUTDESCRIBE.txt"
1490436  ! encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\OUTDESCRIBE.txt" encoding='utf-8' NOBOM;
1490437    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1490438    length varname $22;
MPRINT(EM_DIAGRAM):   length varname $22;
1490439    retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
1490440    set EMWS8.Tree2_OUTPATH;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTPATH;
1490441    if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
1490442    else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
1490443    output;
MPRINT(EM_DIAGRAM):   output;
1490444    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set EMWS8.TREE2_OUTPATH.
NOTE: The data set WORK.TEMP has 110 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490445    proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
1490446    by node;
MPRINT(EM_DIAGRAM):   by node;
1490447    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 110 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490448    proc sort data=EMWS8.Tree2_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_OUTNODES out=outnodes;
1490449    by node;
MPRINT(EM_DIAGRAM):   by node;
1490450    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490451    data temp;
MPRINT(EM_DIAGRAM):   data temp;
1490452    merge temp(in=_a) outnodes(keep= node
1490453    NPRIORS
1490454    P_DepVar0
1490455    P_DepVar1
1490456    );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P_DepVar0 P_DepVar1 );
1490457    by node;
MPRINT(EM_DIAGRAM):   by node;
1490458    if _a;
MPRINT(EM_DIAGRAM):   if _a;
1490459    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: There were 23 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 110 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490460    proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
1490461    by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
1490462    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 110 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490463    data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
1490464    file x;
MPRINT(EM_DIAGRAM):   file x;
1490465    set temp;
MPRINT(EM_DIAGRAM):   set temp;
1490466    by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
1490467    retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
1490468    length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
1490469    if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
1490470    origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
1490471    oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
1490472    end;
MPRINT(EM_DIAGRAM):   end;
1490473    if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
1490474    put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
1490475    put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
1490476    put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
1490477    end;
MPRINT(EM_DIAGRAM):   end;
1490478    if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
1490479    if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
1490480    if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
1490481    if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
1490482    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
1490483    string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
1490484    end;
MPRINT(EM_DIAGRAM):   end;
1490485    else do;
MPRINT(EM_DIAGRAM):   else do;
1490486    string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
1490487    end;
MPRINT(EM_DIAGRAM):   end;
1490488    end;
MPRINT(EM_DIAGRAM):   end;
1490489    end;
MPRINT(EM_DIAGRAM):   end;
1490490    else do;
MPRINT(EM_DIAGRAM):   else do;
1490491    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
1490492    string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
1490493    end;
MPRINT(EM_DIAGRAM):   end;
1490494    else do;
MPRINT(EM_DIAGRAM):   else do;
1490495    string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
1490496    end;
MPRINT(EM_DIAGRAM):   end;
1490497    end;
MPRINT(EM_DIAGRAM):   end;
1490498    end;
MPRINT(EM_DIAGRAM):   end;
1490499    else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
1490500    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
1490501    string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
1490502    end;
MPRINT(EM_DIAGRAM):   end;
1490503    else do;
MPRINT(EM_DIAGRAM):   else do;
1490504    string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
1490505    end;
MPRINT(EM_DIAGRAM):   end;
1490506    end;
MPRINT(EM_DIAGRAM):   end;
1490507    else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
1490508    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
1490509    string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
1490510    end;
MPRINT(EM_DIAGRAM):   end;
1490511    else do;
MPRINT(EM_DIAGRAM):   else do;
1490512    string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
1490513    end;
MPRINT(EM_DIAGRAM):   end;
1490514    end;
MPRINT(EM_DIAGRAM):   end;
1490515    else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
1490516    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
1490517    string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
1490518    end;
MPRINT(EM_DIAGRAM):   end;
1490519    else do;
MPRINT(EM_DIAGRAM):   else do;
1490520    string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
1490521    end;
MPRINT(EM_DIAGRAM):   end;
1490522    end;
MPRINT(EM_DIAGRAM):   end;
1490523    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
1490524    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
1490525    end;
MPRINT(EM_DIAGRAM):   end;
1490526    else do;
MPRINT(EM_DIAGRAM):   else do;
1490527    if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
1490528    if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
1490529    if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
1490530    if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||"
1490530  ! "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
1490531    else string= " if "|| strip(varname)||" "||strip(relation)||"
1490531  ! "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
1490532    end;
MPRINT(EM_DIAGRAM):   end;
1490533    end;
MPRINT(EM_DIAGRAM):   end;
1490534    else do;
MPRINT(EM_DIAGRAM):   else do;
1490535    if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||"
1490535  ! "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(character_value);
1490536    else string= " if "|| strip(varname)||" "||strip(relation)||"
1490536  ! "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
1490537    end;
MPRINT(EM_DIAGRAM):   end;
1490538    end;
MPRINT(EM_DIAGRAM):   end;
1490539    else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
1490540    string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
1490541    end;
MPRINT(EM_DIAGRAM):   end;
1490542    else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
1490543    end;
MPRINT(EM_DIAGRAM):   end;
1490544    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
1490545    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
1490546    end;
MPRINT(EM_DIAGRAM):   end;
1490547    if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
1490548    if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
1490549    if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
1490550    string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
1490551    end;
MPRINT(EM_DIAGRAM):   end;
1490552    end;
MPRINT(EM_DIAGRAM):   end;
1490553    put string;
MPRINT(EM_DIAGRAM):   put string;
1490554    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
1490555    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
1490556    end;
MPRINT(EM_DIAGRAM):   end;
1490557    if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
1490558    put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
1490559    put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
1490560    put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
1490561    put " Predicted: DepVar=0  = " P_DepVar0;
MPRINT(EM_DIAGRAM):   put " Predicted: DepVar=0  = " P_DepVar0;
1490562    put " Predicted: DepVar=1  = " P_DepVar1;
MPRINT(EM_DIAGRAM):   put " Predicted: DepVar=1  = " P_DepVar1;
1490563    put " ";
MPRINT(EM_DIAGRAM):   put " ";
1490564    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
1490565    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
1490566    end;
MPRINT(EM_DIAGRAM):   end;
1490567    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      1490483:67    1490486:66    1490530:108   1490531:72
NOTE: The file X is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Tree2\OUTDESCRIBE.txt,
      RECFM=V,LRECL=1536,File Size (bytes)=0,
      Last Modified=28. April 2016 09.25 Uhr,
      Create Time=16. April 2016 20.12 Uhr
 
NOTE: 153 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 85.
NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490568    filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
1490569    data WORK.M1H54FLC;
MPRINT(EM_DIAGRAM):    data WORK.M1H54FLC;
1490570    set WORK.M1H54FLC;
MPRINT(EM_DIAGRAM):   set WORK.M1H54FLC;
1490571    where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
1490572    if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
1490573    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.M1H54FLC.
      WHERE (use='Y') or ((role='INPUT') and (use='D'));
NOTE: The data set WORK.M1H54FLC has 19 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490574    data work.Tree2_tarmetads;
MPRINT(EM_DIAGRAM):    data work.Tree2_tarmetads;
1490575    set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
1490576    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.PRINCOMP_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE2_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490577    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):    title10 "Variable Importance";
1490578    data EMWS8.Tree2_OUTIMPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_OUTIMPORT;
1490579    set EMWS8.Tree2_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTIMPORT;
1490580    importance=put(importance, 15.4);
MPRINT(EM_DIAGRAM):   importance=put(importance, 15.4);
1490581    vimportance=put(vimportance, 15.4);
MPRINT(EM_DIAGRAM):   vimportance=put(vimportance, 15.4);
1490582    ratio=put(ratio, 15.4);
MPRINT(EM_DIAGRAM):   ratio=put(ratio, 15.4);
1490583    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1490580:12   1490581:13   1490582:7
NOTE: There were 18 observations read from the data set EMWS8.TREE2_OUTIMPORT.
NOTE: The data set EMWS8.TREE2_OUTIMPORT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490584    proc print data=EMWS8.Tree2_OUTIMPORT(where=(nrules>0));
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Tree2_OUTIMPORT(where=(nrules>0));
1490585    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 1303.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490586    title10;
MPRINT(EM_DIAGRAM):   title10;
1490587    data EMWS8.Tree2_OUTSEQ;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_OUTSEQ;
1490588    set EMWS8.Tree2_OUTSEQ;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTSEQ;
1490589    _ASE_ = put(_ASE_, 15.4);
MPRINT(EM_DIAGRAM):   _ASE_ = put(_ASE_, 15.4);
1490590    _ASSESS_ = put(_ASSESS_, 15.4);
MPRINT(EM_DIAGRAM):   _ASSESS_ = put(_ASSESS_, 15.4);
1490591    _MAX_ = put(_MAX_, 15.4);
MPRINT(EM_DIAGRAM):   _MAX_ = put(_MAX_, 15.4);
1490592    _SSE_ = put(_SSE_, 15.4);
MPRINT(EM_DIAGRAM):   _SSE_ = put(_SSE_, 15.4);
1490593    _RASE_ = put(_RASE_, 15.4);
MPRINT(EM_DIAGRAM):   _RASE_ = put(_RASE_, 15.4);
1490594    _MISC_ = put(_MISC_, 15.4);
MPRINT(EM_DIAGRAM):   _MISC_ = put(_MISC_, 15.4);
1490595    _VASE_ = put(_VASE_, 15.4);
MPRINT(EM_DIAGRAM):   _VASE_ = put(_VASE_, 15.4);
1490596    _VASSESS_ = put(_VASSESS_, 15.4);
MPRINT(EM_DIAGRAM):   _VASSESS_ = put(_VASSESS_, 15.4);
1490597    _VMAX_ = put(_VMAX_, 15.4);
MPRINT(EM_DIAGRAM):   _VMAX_ = put(_VMAX_, 15.4);
1490598    _VSSE_ = put(_VSSE_, 15.4);
MPRINT(EM_DIAGRAM):   _VSSE_ = put(_VSSE_, 15.4);
1490599    _VRASE_ = put(_VRASE_, 15.4);
MPRINT(EM_DIAGRAM):   _VRASE_ = put(_VRASE_, 15.4);
1490600    _VMISC_ = put(_VMISC_, 15.4);
MPRINT(EM_DIAGRAM):   _VMISC_ = put(_VMISC_, 15.4);
1490601    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1490589:9    1490590:12   1490591:9    1490592:9    1490593:10   1490594:10
      1490595:10   1490596:13   1490597:10   1490598:10   1490599:11   1490600:11
NOTE: There were 27 observations read from the data set EMWS8.TREE2_OUTSEQ.
NOTE: The data set EMWS8.TREE2_OUTSEQ has 27 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
1490602    data WORK.M1H54FLC;
MPRINT(EM_DIAGRAM):   data WORK.M1H54FLC;
1490603    set WORK.M1H54FLC end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M1H54FLC end=eof;
1490604    output;
MPRINT(EM_DIAGRAM):   output;
1490605    if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
1490606    NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
1490607    ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
1490608    LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
1490609    TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
1490610    output;
MPRINT(EM_DIAGRAM):   output;
1490611    end;
MPRINT(EM_DIAGRAM):   end;
1490612    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.M1H54FLC.
NOTE: The data set WORK.M1H54FLC has 20 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490613    /* belowtext */
1490614    data templabel;
MPRINT(EM_DIAGRAM):    data templabel;
1490615    set EMWS8.Tree2_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTRULES;
1490616    if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
1490617    rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
1490618    keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
1490619    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 341 observations read from the data set EMWS8.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPLABEL has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490620    data tempvar;
MPRINT(EM_DIAGRAM):   data tempvar;
1490621    set EMWS8.Tree2_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTRULES;
1490622    if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
1490623    keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
1490624    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 341 observations read from the data set EMWS8.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPVAR has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490625    proc sort data=templabel;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
1490626    by node;
MPRINT(EM_DIAGRAM):   by node;
1490627    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPLABEL.
NOTE: The data set WORK.TEMPLABEL has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490628    proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
1490629    by node;
MPRINT(EM_DIAGRAM):   by node;
1490630    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490631    data tempbelow;
MPRINT(EM_DIAGRAM):   data tempbelow;
1490632    merge templabel tempvar;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
1490633    by node;
MPRINT(EM_DIAGRAM):   by node;
1490634    if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
1490635    keep node belowtext;
MPRINT(EM_DIAGRAM):   keep node belowtext;
1490636    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPLABEL.
NOTE: There were 11 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPBELOW has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490637    proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
1490638    by node;
MPRINT(EM_DIAGRAM):   by node;
1490639    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TEMPBELOW has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490640    /* abovetext */
1490641    data tempoutrules;
MPRINT(EM_DIAGRAM):   data tempoutrules;
1490642    set EMWS8.Tree2_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTRULES;
1490643    if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
1490644    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 341 observations read from the data set EMWS8.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490645    proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
1490646    by node numeric_value;
MPRINT(EM_DIAGRAM):   by node numeric_value;
1490647    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490648    data tempabove;
MPRINT(EM_DIAGRAM):   data tempabove;
1490649    set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
1490650    by parent numeric_value;
MPRINT(EM_DIAGRAM):   by parent numeric_value;
1490651    retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
1490652    length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   length abovetext tempstring origchar $45;
1490653    if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
1490654    if first.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
1490655    if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
1490656    numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
1490657    abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
1490658    branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
1490659    origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
1490660    output;
MPRINT(EM_DIAGRAM):   output;
1490661    end;
MPRINT(EM_DIAGRAM):   end;
1490662    else do;
MPRINT(EM_DIAGRAM):   else do;
1490663    abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
1490664    branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
1490665    origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
1490666    output;
MPRINT(EM_DIAGRAM):   output;
1490667    end;
MPRINT(EM_DIAGRAM):   end;
1490668    if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
1490669    if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
1490670    numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
1490671    branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
1490672    abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
1490673    output;
MPRINT(EM_DIAGRAM):   output;
1490674    end;
MPRINT(EM_DIAGRAM):   end;
1490675    else do;
MPRINT(EM_DIAGRAM):   else do;
1490676    branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
1490677    abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
1490678    output;
MPRINT(EM_DIAGRAM):   output;
1490679    end;
MPRINT(EM_DIAGRAM):   end;
1490680    end;
MPRINT(EM_DIAGRAM):   end;
1490681    end;
MPRINT(EM_DIAGRAM):   end;
1490682    else if last.parent then do;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
1490683    if ( missing(character_value) AND (origval ne numeric_value)) or (
1490683  ! ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or (
^missing(character_value) AND (origchar ne character_value)) then do;
1490684    if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
1490685    numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
1490686    abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
1490687    end;
MPRINT(EM_DIAGRAM):   end;
1490688    else do;
MPRINT(EM_DIAGRAM):   else do;
1490689    abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
1490690    end;
MPRINT(EM_DIAGRAM):   end;
1490691    branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
1490692    output;
MPRINT(EM_DIAGRAM):   output;
1490693    if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
1490694    numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
1490695    abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
1490696    end;
MPRINT(EM_DIAGRAM):   end;
1490697    else do;
MPRINT(EM_DIAGRAM):   else do;
1490698    abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
1490699    end;
MPRINT(EM_DIAGRAM):   end;
1490700    branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
1490701    output;
MPRINT(EM_DIAGRAM):   output;
1490702    end;
MPRINT(EM_DIAGRAM):   end;
1490703    else do;
MPRINT(EM_DIAGRAM):   else do;
1490704    if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
1490705    numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
1490706    abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
1490707    end;
MPRINT(EM_DIAGRAM):   end;
1490708    else do;
MPRINT(EM_DIAGRAM):   else do;
1490709    abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
1490710    end;
MPRINT(EM_DIAGRAM):   end;
1490711    branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
1490712    output;
MPRINT(EM_DIAGRAM):   output;
1490713    end;
MPRINT(EM_DIAGRAM):   end;
1490714    end;
MPRINT(EM_DIAGRAM):   end;
1490715    else do;
MPRINT(EM_DIAGRAM):   else do;
1490716    if ( missing(character_value) AND (origval ne numeric_value)) or (
1490716  ! ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or (
^missing(character_value) AND (origchar ne character_value)) then do;
1490717    if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
1490718    numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
1490719    abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
1490720    origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
1490721    end;
MPRINT(EM_DIAGRAM):   end;
1490722    else do;
MPRINT(EM_DIAGRAM):   else do;
1490723    abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
1490724    origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
1490725    end;
MPRINT(EM_DIAGRAM):   end;
1490726    branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
1490727    output;
MPRINT(EM_DIAGRAM):   output;
1490728    end;
MPRINT(EM_DIAGRAM):   end;
1490729    else do;
MPRINT(EM_DIAGRAM):   else do;
1490730    if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
1490731    numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
1490732    abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
1490733    origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
1490734    end;
MPRINT(EM_DIAGRAM):   end;
1490735    else do;
MPRINT(EM_DIAGRAM):   else do;
1490736    abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
1490737    origval = character_value;
MPRINT(EM_DIAGRAM):   origval = character_value;
1490738    end;
MPRINT(EM_DIAGRAM):   end;
1490739    branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
1490740    output;
MPRINT(EM_DIAGRAM):   output;
1490741    end;
MPRINT(EM_DIAGRAM):   end;
1490742    end;
MPRINT(EM_DIAGRAM):   end;
1490743    end;
MPRINT(EM_DIAGRAM):   end;
1490744    else do;
MPRINT(EM_DIAGRAM):   else do;
1490745    if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
1490746    flag = 0;
MPRINT(EM_DIAGRAM):   flag = 0;
1490747    abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
1490748    branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
1490749    if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
1490750    output;
MPRINT(EM_DIAGRAM):   output;
1490751    end;
MPRINT(EM_DIAGRAM):   end;
1490752    end;
MPRINT(EM_DIAGRAM):   end;
1490753    else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
1490754    if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
1490755    tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
1490756    length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
1490757    if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
1490758    abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
1490759    end;
MPRINT(EM_DIAGRAM):   end;
1490760    else do;
MPRINT(EM_DIAGRAM):   else do;
1490761    abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
1490762    flag = 1;
MPRINT(EM_DIAGRAM):   flag = 1;
1490763    end;
MPRINT(EM_DIAGRAM):   end;
1490764    end;
MPRINT(EM_DIAGRAM):   end;
1490765    branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
1490766    output;
MPRINT(EM_DIAGRAM):   output;
1490767    end;
MPRINT(EM_DIAGRAM):   end;
1490768    else do;
MPRINT(EM_DIAGRAM):   else do;
1490769    if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
1490770    tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
1490771    length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
1490772    if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
1490773    abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
1490774    end;
MPRINT(EM_DIAGRAM):   end;
1490775    else do;
MPRINT(EM_DIAGRAM):   else do;
1490776    abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
1490777    flag=1;
MPRINT(EM_DIAGRAM):   flag=1;
1490778    end;
MPRINT(EM_DIAGRAM):   end;
1490779    end;
MPRINT(EM_DIAGRAM):   end;
1490780    branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
1490781    end;
MPRINT(EM_DIAGRAM):   end;
1490782    end;
MPRINT(EM_DIAGRAM):   end;
1490783    keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
1490784    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      1490657:25   1490672:26   1490686:24   1490686:47   1490695:26   1490706:26
      1490719:24   1490719:47   1490732:26
NOTE: Character values have been converted to numeric values at the places given by:
      (Line):(Column).
      1490737:11
NOTE: There were 11 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPABOVE has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490785    /* MIssing value to abovetext */
1490786    data tempmissing;
MPRINT(EM_DIAGRAM):   data tempmissing;
1490787    set EMWS8.Tree2_OUTRULES;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTRULES;
1490788    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
1490789    rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
1490790    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 341 observations read from the data set EMWS8.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490791    proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
1490792    by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
1490793    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.TEMPABOVE.
NOTE: The data set WORK.TEMPABOVE has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490794    proc sort data=EMWS8.Tree2_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_OUTNODES out=tempoutnodes;
1490795    by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
1490796    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490797    proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
1490798    by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
1490799    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490800    data WORK.TREE_37SDEY4_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.TREE_37SDEY4_outnodes;
1490801    merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
1490802    by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
1490803    length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
1490804    retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
1490805    if _a then do;
MPRINT(EM_DIAGRAM):   if _a then do;
1490806    if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
1490807    abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel,
1490807  ! noquote))";
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Or Missing";
1490808    end;
MPRINT(EM_DIAGRAM):   end;
1490809    else do;
MPRINT(EM_DIAGRAM):   else do;
1490810    abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext = " Missing Values Only";
1490811    end;
MPRINT(EM_DIAGRAM):   end;
1490812    end;
MPRINT(EM_DIAGRAM):   end;
1490813    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine,
1490813  ! tree_nonmiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Non-Missing Values";
1490814    if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
1490815    traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
1490816    validtotal=VN;
MPRINT(EM_DIAGRAM):   validtotal=VN;
1490817    end;
MPRINT(EM_DIAGRAM):   end;
1490818    drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
1490819    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.TEMPABOVE.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TREE_37SDEY4_OUTNODES has 23 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490820    proc sort data=WORK.TREE_37SDEY4_outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TREE_37SDEY4_outnodes;
1490821    by node;
MPRINT(EM_DIAGRAM):   by node;
1490822    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TREE_37SDEY4_OUTNODES.
NOTE: The data set WORK.TREE_37SDEY4_OUTNODES has 23 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490823    proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
1490824    by node;
MPRINT(EM_DIAGRAM):   by node;
1490825    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490826    data WORK.TREE_37SDEY4_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.TREE_37SDEY4_outnodes;
1490827    merge WORK.TREE_37SDEY4_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   merge WORK.TREE_37SDEY4_outnodes tempbelow;
1490828    by node;
MPRINT(EM_DIAGRAM):   by node;
1490829    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TREE_37SDEY4_OUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TREE_37SDEY4_OUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490830    data tempoutstats;
MPRINT(EM_DIAGRAM):    data tempoutstats;
1490831    set EMWS8.Tree2_OUTSTATS;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTSTATS;
1490832    length tarlevel $8;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
1490833    tarlevel ="BINARY";
MPRINT(EM_DIAGRAM):   tarlevel ="BINARY";
1490834    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 161 observations read from the data set EMWS8.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 161 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490835    data EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_TREE_PLOT;
1490836    length NODETEXT TEXTALL $800 N VN NODECOLOR 8;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N VN NODECOLOR 8;
1490837    set WORK.TREE_37SDEY4_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.TREE_37SDEY4_outnodes;
1490838    label parent = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentID_vlabel, noquote))" depth
1490838  !  = "%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, noquote))" belowtext=
1490838  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_belowtext_vlabel, noquote))" abovetext =
1490839       "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))" linkwidth =
1490839  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_linkwidth_vlabel, noquote))" nodetext =
1490839  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nodetext_vlabel, noquote))" textall =
1490840       "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))" N =
1490840  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainn_vlabel, noquote))" VN =
1490840  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))" nodecolor =
1490841       "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label parent = "Parent Id" depth = "Depth" belowtext= "Below Text"
abovetext = "Above Text" linkwidth = "Link Width" nodetext = "Node Text" textall = "All Text"
N = "Train: Number of Observations" VN = "Valid: Number of Observations" nodecolor = "Node
Color";
1490842    keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N VN NODECOLOR
1490842  ! ;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N
VN NODECOLOR;
1490843    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TEXTALL is uninitialized.
NOTE: Variable NODECOLOR is uninitialized.
NOTE: There were 23 observations read from the data set WORK.TREE_37SDEY4_OUTNODES.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1490844    proc sort data=EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_TREE_PLOT;
1490845    by node;
MPRINT(EM_DIAGRAM):   by node;
1490846    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490847    data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
1490848    set EMWS8.Tree2_OUTSTATS;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTSTATS;
1490849    retain eventlevel;
MPRINT(EM_DIAGRAM):   retain eventlevel;
1490850    if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
1490851    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 161 observations read from the data set EMWS8.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPCOLOR has 161 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490852    data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
1490853    set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
1490854    if 'BINARY' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'BINARY' ne 'INTERVAL' then do;
1490855    if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
1490856    end;
MPRINT(EM_DIAGRAM):   end;
1490857    else do;
MPRINT(EM_DIAGRAM):   else do;
1490858    if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
1490859    end;
MPRINT(EM_DIAGRAM):   end;
1490860    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 161 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490861    data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
1490862    set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
1490863    length nodecolor 8;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
1490864    if 'BINARY' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'BINARY' ne 'INTERVAL' then do;
1490865    nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
1490866    end;
MPRINT(EM_DIAGRAM):   end;
1490867    else do;
MPRINT(EM_DIAGRAM):   else do;
1490868    nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
1490869    end;
MPRINT(EM_DIAGRAM):   end;
1490870    keep node nodecolor;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
1490871    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490872    proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
1490873    by node statname;
MPRINT(EM_DIAGRAM):   by node statname;
1490874    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 161 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 161 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490875    proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
1490876    by node;
MPRINT(EM_DIAGRAM):   by node;
1490877    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490878    data EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_TREE_PLOT;
1490879    merge EMWS8.Tree2_TREE_PLOT tempoutstats tempcolor;
MPRINT(EM_DIAGRAM):   merge EMWS8.Tree2_TREE_PLOT tempoutstats tempcolor;
1490880    length text $800 _RASE_ _VRASE_ 8;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ _VRASE_ 8;
1490881    retain _RASE_ _VRASE_ VN eventlevel;
MPRINT(EM_DIAGRAM):   retain _RASE_ _VRASE_ VN eventlevel;
1490882    by node;
MPRINT(EM_DIAGRAM):   by node;
1490883    if STATNAME = 'N' then N=STATVALUE;
MPRINT(EM_DIAGRAM):   if STATNAME = 'N' then N=STATVALUE;
1490884    else if STATNAME = 'VALID: N' then VN=STATVALUE;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'VALID: N' then VN=STATVALUE;
1490885    if STATNAME='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if STATNAME='NPRIORS' then N=statvalue;
1490886    else if STATNAME = 'VALID: NPRIORS' then VN=STATVALUE;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'VALID: NPRIORS' then VN=STATVALUE;
1490887    if STATNAME = 'RASE' then _RASE_ = STATVALUE;
MPRINT(EM_DIAGRAM):   if STATNAME = 'RASE' then _RASE_ = STATVALUE;
1490888    else if STATNAME = 'VALID: RASE' then _VRASE_ = STATVALUE;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'VALID: RASE' then _VRASE_ = STATVALUE;
1490889    else if STATNAME = 'PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'PREDICTION' then eventlevel=CATEGORY;
1490890    if last.node then output EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   if last.node then output EMWS8.Tree2_TREE_PLOT;
1490891    if STATNAME ="N" or STATNAME="VALID: N" or STATNAME="TARGET" or STATNAME="RASE" or
1490891  ! STATNAME="VALID: RASE" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="N" or STATNAME="VALID: N" or STATNAME="TARGET" or
STATNAME="RASE" or STATNAME="VALID: RASE" then delete;
1490892    if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE PROFIT" then
1490892  ! delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE
PROFIT" then delete;
1490893    if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS"
then delete;
1490894    if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
1490895    if tarlevel ^='INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^='INTERVAL' then do;
1490896    if STATNAME = "PREDICTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME = "PREDICTION" then delete;
1490897    if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
1490898    end;
MPRINT(EM_DIAGRAM):   end;
1490899    label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))" _VRASE_
1490899  ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_vrase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Train: Root Average Square Error" _VRASE_ = "Valid: Root
Average Square Error";
1490900    drop STATNAME STATVALUE;
MPRINT(EM_DIAGRAM):   drop STATNAME STATVALUE;
1490901    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable text is uninitialized.
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: There were 161 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 23 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1490902    data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
1490903    set tempoutstats;
MPRINT(EM_DIAGRAM):   set tempoutstats;
1490904    if STATNAME^="N" AND STATNAME ^="VALID: N" AND STATNAME^="RASE" AND STATNAME
1490904  ! ^="VALID: RASE" AND STATNAME ^="TARGET";
MPRINT(EM_DIAGRAM):   if STATNAME^="N" AND STATNAME ^="VALID: N" AND STATNAME^="RASE" AND
STATNAME ^="VALID: RASE" AND STATNAME ^="TARGET";
1490905    if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE PROFIT" then
1490905  ! delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE
PROFIT" then delete;
1490906    if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS"
then delete;
1490907    if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
1490908    if TARLEVEL ^="INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if TARLEVEL ^="INTERVAL" then do;
1490909    if STATNAME="PREDICTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION" then delete;
1490910    if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
1490911    end;
MPRINT(EM_DIAGRAM):   end;
1490912    if NODE = . then delete;
MPRINT(EM_DIAGRAM):   if NODE = . then delete;
1490913    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 161 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TREE_TEMP has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490914    proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):    proc sort data=tree_temp;
1490915    by node category;
MPRINT(EM_DIAGRAM):   by node category;
1490916    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 92 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 92 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490917    data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
1490918    merge EMWS8.Tree2_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS8.Tree2_TREE_PLOT tree_temp;
1490919    by node;
MPRINT(EM_DIAGRAM):   by node;
1490920    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: There were 92 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 92 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1490921    data EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_TREE_PLOT;
1490922    merge EMWS8.Tree2_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS8.Tree2_TREE_PLOT tree_temp;
1490923    length text textall nodetext stext ntext $800 P_DepVar1 V_DepVar1 8;
MPRINT(EM_DIAGRAM):   length text textall nodetext stext ntext $800 P_DepVar1 V_DepVar1 8;
1490924    retain P_DepVar1 V_DepVar1 ntext stext textall;
MPRINT(EM_DIAGRAM):   retain P_DepVar1 V_DepVar1 ntext stext textall;
1490925    by node category;
MPRINT(EM_DIAGRAM):   by node category;
1490926    _RASE_ = .;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
1490927    _VRASE_ = .;
MPRINT(EM_DIAGRAM):   _VRASE_ = .;
1490928    if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
1490929    if CATEGORY=EVENTLEVEL AND STATNAME = "PROBABILITY" then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME = "PROBABILITY" then do;
1490930    P_DepVar1 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   P_DepVar1 = round(STATVALUE, .01);
1490931    end;
MPRINT(EM_DIAGRAM):   end;
1490932    else if CATEGORY=EVENTLEVEL AND STATNAME = "VALID: PROBABILITY" then do;
MPRINT(EM_DIAGRAM):   else if CATEGORY=EVENTLEVEL AND STATNAME = "VALID: PROBABILITY" then do;
1490933    V_DepVar1 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   V_DepVar1 = round(STATVALUE, .01);
1490934    end;
MPRINT(EM_DIAGRAM):   end;
1490935    if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
1490936    * P_DepVar1 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   * P_DepVar1 = round(STATVALUE, .01);
1490937    if first.category then do;
MPRINT(EM_DIAGRAM):   if first.category then do;
1490938    ntext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   ntext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE,
percent13.1));
1490939    end;
MPRINT(EM_DIAGRAM):   end;
1490940    else do;
MPRINT(EM_DIAGRAM):   else do;
1490941    ntext=trim(ntext)||right(put(STATVALUE, percent15.1));
MPRINT(EM_DIAGRAM):   ntext=trim(ntext)||right(put(STATVALUE, percent15.1));
1490942    end;
MPRINT(EM_DIAGRAM):   end;
1490943    end;
MPRINT(EM_DIAGRAM):   end;
1490944    if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
1490945    stext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   stext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE,
percent13.1));
1490946    end;
MPRINT(EM_DIAGRAM):   end;
1490947    else do;
MPRINT(EM_DIAGRAM):   else do;
1490948    if first.category then do;
MPRINT(EM_DIAGRAM):   if first.category then do;
1490949    stext=trim(stext)||'0A'x||put(strip(CATEGORY)||':', $12.)||right(put(STATVALUE,
1490949  ! percent13.1));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||'0A'x||put(strip(CATEGORY)||':',
$12.)||right(put(STATVALUE, percent13.1));
1490950    end;
MPRINT(EM_DIAGRAM):   end;
1490951    else do;
MPRINT(EM_DIAGRAM):   else do;
1490952    stext=trim(stext)||right(put(STATVALUE, percent15.1));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||right(put(STATVALUE, percent15.1));
1490953    end;
MPRINT(EM_DIAGRAM):   end;
1490954    end;
MPRINT(EM_DIAGRAM):   end;
1490955    if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
1490956    nodetext = trim(nodetext)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine,
1490956  ! rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||put("Count:", $12.)|| put(N, 13.);
1490957    textall = trim(textall)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine,
1490957  ! rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||put("Count:", $12.)|| put(N, 13.);
1490958    textall = put("%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))",
1490958  ! $12.)||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, noquote))",
1490958  ! $13.))||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel
1490959    , noquote))", $15.));
MPRINT(EM_DIAGRAM):   textall = put("Statistic", $12.)||right(put("Train",
$13.))||right(put("Validation", $15.));
1490960    textall = trim(textall)||'0A'x||trim(stext);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||trim(stext);
1490961    textall = trim(textall)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine,
1490961  ! rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.)|| put(VN, 15.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||put("Count:", $12.)|| put(N, 13.)||
put(VN, 15.);
1490962    nodetext= put("%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))",
1490962  ! $12.)||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, noquote))" ,
1490962  ! $13.))||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel
1490963     , noquote))" , $15.));
MPRINT(EM_DIAGRAM):   nodetext= put("Statistic", $12.)||right(put("Train" ,
$13.))||right(put("Validation" , $15.));
1490964    nodetext= trim(nodetext)||'0A'x||trim(ntext);
MPRINT(EM_DIAGRAM):   nodetext= trim(nodetext)||'0A'x||trim(ntext);
1490965    nodetext= trim(nodetext)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine,
1490965  ! rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.)|| put(VN, 15.);
MPRINT(EM_DIAGRAM):   nodetext= trim(nodetext)||'0A'x||put("Count:", $12.)|| put(N, 13.)||
put(VN, 15.);
1490966    output EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS8.Tree2_TREE_PLOT;
1490967    end;
MPRINT(EM_DIAGRAM):   end;
1490968    end;
MPRINT(EM_DIAGRAM):   end;
1490969    else do;
MPRINT(EM_DIAGRAM):   else do;
1490970    if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
1490971    vprobflag = 0;
MPRINT(EM_DIAGRAM):   vprobflag = 0;
1490972    if STATNAME = "PREDICTION" then do;
MPRINT(EM_DIAGRAM):   if STATNAME = "PREDICTION" then do;
1490973    P_DepVar1 = STATVALUE;
MPRINT(EM_DIAGRAM):   P_DepVar1 = STATVALUE;
1490974    end;
MPRINT(EM_DIAGRAM):   end;
1490975    else if STATNAME="VALID: PREDICTION" then do;
MPRINT(EM_DIAGRAM):   else if STATNAME="VALID: PREDICTION" then do;
1490976    V_DepVar1 = STATVALUE;
MPRINT(EM_DIAGRAM):   V_DepVar1 = STATVALUE;
1490977    end;
MPRINT(EM_DIAGRAM):   end;
1490978    stext = put("%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))", $12.)||
1490978  ! right(put(STATVALUE, 13.4));
MPRINT(EM_DIAGRAM):   stext = put("Average", $12.)|| right(put(STATVALUE, 13.4));
1490979    end;
MPRINT(EM_DIAGRAM):   end;
1490980    else do;
MPRINT(EM_DIAGRAM):   else do;
1490981    vprobflag = 0;
MPRINT(EM_DIAGRAM):   vprobflag = 0;
1490982    if STATNAME = "PREDICTION" then do;
MPRINT(EM_DIAGRAM):   if STATNAME = "PREDICTION" then do;
1490983    P_DepVar1 = STATVALUE;
MPRINT(EM_DIAGRAM):   P_DepVar1 = STATVALUE;
1490984    end;
MPRINT(EM_DIAGRAM):   end;
1490985    else if STATNAME="VALID: PREDICTION" then do;
MPRINT(EM_DIAGRAM):   else if STATNAME="VALID: PREDICTION" then do;
1490986    V_DepVar1 = STATVALUE;
MPRINT(EM_DIAGRAM):   V_DepVar1 = STATVALUE;
1490987    end;
MPRINT(EM_DIAGRAM):   end;
1490988    stext=trim(stext)||right(put(STATVALUE, 13.4));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||right(put(STATVALUE, 13.4));
1490989    vprobflag=1;
MPRINT(EM_DIAGRAM):   vprobflag=1;
1490990    end;
MPRINT(EM_DIAGRAM):   end;
1490991    if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
1490992    nodetext = put("%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))",
1490992  ! $12.)||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, noquote))",
1490992  ! $8.))||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel
1490993    , noquote))", $15.));
MPRINT(EM_DIAGRAM):   nodetext = put("Statistic", $12.)||right(put("Train",
$8.))||right(put("Validation", $15.));
1490994    if vprobflag eq 0 then do;
MPRINT(EM_DIAGRAM):   if vprobflag eq 0 then do;
1490995    stext=trim(stext)||right(put(0, 13.4));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||right(put(0, 13.4));
1490996    end;
MPRINT(EM_DIAGRAM):   end;
1490997    nodetext = trim(nodetext)||'0A'x||trim(stext);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||trim(stext);
1490998    nodetext = trim(nodetext)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine,
1490998  ! rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 8.)|| put(VN, 15.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||put("Count:", $12.)|| put(N, 8.)||
put(VN, 15.);
1490999    textall = nodetext;
MPRINT(EM_DIAGRAM):   textall = nodetext;
1491000    output EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS8.Tree2_TREE_PLOT;
1491001    end;
MPRINT(EM_DIAGRAM):   end;
1491002    end;
MPRINT(EM_DIAGRAM):   end;
1491003    label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))" _VRASE_
1491003  ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_vrase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Train: Root Average Square Error" _VRASE_ = "Valid: Root
Average Square Error";
1491004    label P_DepVar1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_predictedvar_vlabel,
1491004  ! noquote))";
MPRINT(EM_DIAGRAM):   label P_DepVar1 = "Predicted Variable";
1491005    keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N VN NODECOLOR
1491005  !  _RASE_ _VRASE_ P_DepVar1 V_DepVar1;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N
VN NODECOLOR _RASE_ _VRASE_ P_DepVar1 V_DepVar1;
1491006    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: There were 92 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
1491007    data EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_TREE_PLOT;
1491008    set EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_TREE_PLOT;
1491009    if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
1491010    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491011    data EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_TREE_PLOT;
1491012    set EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_TREE_PLOT;
1491013    textall = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote, )):"||
1491013  ! put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   textall = "Node Id:"|| put(Node, 13.)||'0A'x||trim(textall);
1491014    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491015    data tempout;
MPRINT(EM_DIAGRAM):   data tempout;
1491016    set WORK.TREE_37SDEY4_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.TREE_37SDEY4_outnodes;
1491017    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TREE_37SDEY4_OUTNODES.
NOTE: The data set WORK.TEMPOUT has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1491018    proc sort data=tempout;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
1491019    by descending P_DepVar1;
MPRINT(EM_DIAGRAM):   by descending P_DepVar1;
1491020    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TEMPOUT has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491021    data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
1491022    set tempout;
MPRINT(EM_DIAGRAM):   set tempout;
1491023    if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
1491024    label index="%sysfunc(sasmsg(sashelp.dmine, rpt_leafindex_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label index= "Leaf Index";
1491025    label percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel  ,
1491025  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_train = "Event Percentage";
1491026    label perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel  ,
1491026  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_train = "Percent Cases";
1491027    label tprob="%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel  , NOQUOTE,
1491027  ! %nrbquote(1)))";
MPRINT(EM_DIAGRAM):   label tprob= "Training Percent 1";
1491028    label vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel  , NOQUOTE,
1491028  ! %nrbquote(1)))";
MPRINT(EM_DIAGRAM):   label vprob = "Validation Percent 1";
1491029    label percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel  ,
1491029  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_valid = "Valid: Event Percentage";
1491030    label perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel  ,
1491030  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_valid = "Valid: Percent Cases";
1491031    vprob = round(V_DepVar1, .01);
MPRINT(EM_DIAGRAM):   vprob = round(V_DepVar1, .01);
1491032    percevent_valid = round ( vprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_valid = round ( vprob*100, .01);
1491033    * perc_valid =round( ( VN / validtotal)*100, .001);
MPRINT(EM_DIAGRAM):   * perc_valid =round( ( VN / validtotal)*100, .001);
1491034    perc_valid =round( ( VN / validtotal), .01);
MPRINT(EM_DIAGRAM):   perc_valid =round( ( VN / validtotal), .01);
1491035    tprob = round(P_DepVar1, .01);
MPRINT(EM_DIAGRAM):   tprob = round(P_DepVar1, .01);
1491036    percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
1491037    *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
1491038    perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
1491039    if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
1491040    index = _n_;
MPRINT(EM_DIAGRAM):   index = _n_;
1491041    keep NODE index tprob perc_train percevent_train
1491042    vprob perc_valid percevent_valid
1491043    ;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train vprob perc_valid
percevent_valid ;
1491044    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TREE_TEMP has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1491045    proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
1491046    by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
1491047    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491048    proc sort data=EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_TREE_PLOT;
1491049    by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
1491050    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1491051    data EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_TREE_PLOT;
1491052    merge EMWS8.Tree2_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS8.Tree2_TREE_PLOT tree_temp;
1491053    by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
1491054    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: There were 12 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491055    proc sort data=EMWS8.Tree2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_TREE_PLOT;
1491056    by node index;
MPRINT(EM_DIAGRAM):   by node index;
1491057    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: The data set EMWS8.TREE2_TREE_PLOT has 23 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491058    proc sort data=EMWS8.Tree2_TREE_PLOT out=t;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Tree2_TREE_PLOT out=t;
1491059    by descending N;
MPRINT(EM_DIAGRAM):   by descending N;
1491060    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS8.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 23 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1491061    data t;
MPRINT(EM_DIAGRAM):   data t;
1491062    set t;
MPRINT(EM_DIAGRAM):   set t;
1491063    label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
1491063  ! DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
1491064    VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
1491065    ;
MPRINT(EM_DIAGRAM):   label N= "Training Observations" DEPTH= "Depth" VN= "Validation
Observations" ;
1491066    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 23 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491067    title8 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title8 "Tree Leaf Report";
1491068    proc print data=t noobs label;
MPRINT(EM_DIAGRAM):   proc print data=t noobs label;
1491069    where tprob ne .;
MPRINT(EM_DIAGRAM):   where tprob ne .;
1491070    var node depth N tprob
1491071    VN vprob
1491072    ;
MPRINT(EM_DIAGRAM):   var node depth N tprob VN vprob ;
1491073    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 1304.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491074    title8;
MPRINT(EM_DIAGRAM):   title8;
1491075    data EMWS8.Tree2_OUTSTATS;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_OUTSTATS;
1491076    set EMWS8.Tree2_OUTSTATS;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTSTATS;
1491077    if STATNAME='TARGET' then delete;
MPRINT(EM_DIAGRAM):   if STATNAME='TARGET' then delete;
1491078    if STATNAME='PREDICTION' and STATVALUE=. then delete;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' and STATVALUE=. then delete;
1491079    drop LEAF;
MPRINT(EM_DIAGRAM):   drop LEAF;
1491080    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 161 observations read from the data set EMWS8.TREE2_OUTSTATS.
NOTE: The data set EMWS8.TREE2_OUTSTATS has 138 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1491081    proc arbor inmodel=EMWS8.Tree2_EMTREE version=10;
MPRINT(EM_DIAGRAM):    proc arbor inmodel=EMWS8.Tree2_EMTREE version=10;
NOTE: 1572981 kilobytes of physical memory.
NOTE: The subtree sequence contains 27 subtrees. The largest has 53 nodes and 27 leaves.
1491082    save model = EMWS8.Tree2_EXPORTTREE;
MPRINT(EM_DIAGRAM):   save model = EMWS8.Tree2_EXPORTTREE;
NOTE: The data set EMWS8.TREE2_EXPORTTREE has 1673 observations and 4 variables.
1491083    run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1491084    data work.Tree2_tarmetads;
MPRINT(EM_DIAGRAM):   data work.Tree2_tarmetads;
1491085    set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
1491086    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.PRINCOMP_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE2_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.25 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.25 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2O6WJF9
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2O6WJF9 new;
MPRINT(EM_DIAGRAM):   run;
1491188    filename emflow
1491188  ! "C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1491189    *------------------------------------------------------------*;
1491190    * Tree2: Scoring DATA data;
1491191    *------------------------------------------------------------*;
1491192    data EMWS8.Tree2_TRAIN
1491193    / view=EMWS8.Tree2_TRAIN
1491194    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_TRAIN / view=EMWS8.Tree2_TRAIN ;
1491195    set EMWS8.PRINCOMP_TRAIN
1491196    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
1491197    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas.
1491198   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491199   +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
1491200   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491201   +
1491202   +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
1491203   +LENGTH F_DepVar  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_DepVar $ 12;
1491204   +LENGTH I_DepVar  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_DepVar $ 12;
1491205   +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
1491206   +
1491207   +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
1491208   +LABEL _NODE_  = 'Node' ;
MPRINT(EM_DIAGRAM):   LABEL _NODE_ = 'Node' ;
1491209   +LABEL _LEAF_  = 'Leaf' ;
MPRINT(EM_DIAGRAM):   LABEL _LEAF_ = 'Leaf' ;
1491210   +LABEL P_DepVar0  = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL P_DepVar0 = 'Predicted: DepVar=0' ;
1491211   +LABEL P_DepVar1  = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL P_DepVar1 = 'Predicted: DepVar=1' ;
1491212   +LABEL Q_DepVar0  = 'Unadjusted P: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL Q_DepVar0 = 'Unadjusted P: DepVar=0' ;
1491213   +LABEL Q_DepVar1  = 'Unadjusted P: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL Q_DepVar1 = 'Unadjusted P: DepVar=1' ;
1491214   +LABEL V_DepVar0  = 'Validated: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL V_DepVar0 = 'Validated: DepVar=0' ;
1491215   +LABEL V_DepVar1  = 'Validated: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL V_DepVar1 = 'Validated: DepVar=1' ;
1491216   +LABEL R_DepVar0  = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL R_DepVar0 = 'Residual: DepVar=0' ;
1491217   +LABEL R_DepVar1  = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL R_DepVar1 = 'Residual: DepVar=1' ;
1491218   +LABEL F_DepVar  = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   LABEL F_DepVar = 'From: DepVar' ;
1491219   +LABEL I_DepVar  = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   LABEL I_DepVar = 'Into: DepVar' ;
1491220   +LABEL U_DepVar  = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   LABEL U_DepVar = 'Unnormalized Into: DepVar' ;
1491221   +LABEL _WARN_  = 'Warnings' ;
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings' ;
1491222   +
1491223   +
1491224   +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
1491225   +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
1491226   +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
1491227   +
1491228   +
1491229   +_ARBFMT_12 = PUT( DepVar , BEST.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DepVar , BEST.);
1491230   + %DMNORMCP( _ARBFMT_12, F_DepVar );
MPRINT(DMNORMCP):   F_DepVar=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1491231   +
1491232   +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
1491233   +IF  NOT MISSING(PC_1 ) AND
1491234   +      4.72939183091507 <= PC_1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_1 ) AND 4.72939183091507 <= PC_1 THEN DO;
1491235   +  IF  NOT MISSING(PC_13 ) AND
1491236   +        0.79329555544069 <= PC_13  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_13 ) AND 0.79329555544069 <= PC_13 THEN DO;
1491237   +    IF  NOT MISSING(PC_3 ) AND
1491238   +      PC_3  <    -0.89926417042745 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_3 ) AND PC_3 < -0.89926417042745 THEN DO;
1491239   +      IF  NOT MISSING(PC_14 ) AND
1491240   +        PC_14  <    -0.28319704184066 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_14 ) AND PC_14 < -0.28319704184066 THEN DO;
1491241   +        _NODE_  =                   28;
MPRINT(EM_DIAGRAM):   _NODE_ = 28;
1491242   +        _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
1491243   +        P_DepVar0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.9090909090909;
1491244   +        P_DepVar1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.09090909090909;
1491245   +        Q_DepVar0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.9090909090909;
1491246   +        Q_DepVar1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.09090909090909;
1491247   +        V_DepVar0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.8;
1491248   +        V_DepVar1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.2;
1491249   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491250   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491251   +        END;
MPRINT(EM_DIAGRAM):   END;
1491252   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491253   +        _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
1491254   +        _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
1491255   +        P_DepVar0  =     0.35714285714285;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.35714285714285;
1491256   +        P_DepVar1  =     0.64285714285714;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.64285714285714;
1491257   +        Q_DepVar0  =     0.35714285714285;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.35714285714285;
1491258   +        Q_DepVar1  =     0.64285714285714;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.64285714285714;
1491259   +        V_DepVar0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.33333333333333;
1491260   +        V_DepVar1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.66666666666666;
1491261   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491262   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491263   +        END;
MPRINT(EM_DIAGRAM):   END;
1491264   +      END;
MPRINT(EM_DIAGRAM):   END;
1491265   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491266   +      _NODE_  =                   15;
MPRINT(EM_DIAGRAM):   _NODE_ = 15;
1491267   +      _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
1491268   +      P_DepVar0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.92;
1491269   +      P_DepVar1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.08;
1491270   +      Q_DepVar0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.92;
1491271   +      Q_DepVar1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.08;
1491272   +      V_DepVar0  =     0.78947368421052;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.78947368421052;
1491273   +      V_DepVar1  =     0.21052631578947;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.21052631578947;
1491274   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491275   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491276   +      END;
MPRINT(EM_DIAGRAM):   END;
1491277   +    END;
MPRINT(EM_DIAGRAM):   END;
1491278   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491279   +    IF  NOT MISSING(PC_10 ) AND
1491280   +          2.83174076962809 <= PC_10  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_10 ) AND 2.83174076962809 <= PC_10 THEN DO;
1491281   +      IF  NOT MISSING(PC_16 ) AND
1491282   +            0.82549857301853 <= PC_16  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_16 ) AND 0.82549857301853 <= PC_16 THEN DO;
1491283   +        _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
1491284   +        _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
1491285   +        P_DepVar0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.16666666666666;
1491286   +        P_DepVar1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.83333333333333;
1491287   +        Q_DepVar0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.16666666666666;
1491288   +        Q_DepVar1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.83333333333333;
1491289   +        V_DepVar0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.33333333333333;
1491290   +        V_DepVar1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.66666666666666;
1491291   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491292   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491293   +        END;
MPRINT(EM_DIAGRAM):   END;
1491294   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491295   +        _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
1491296   +        _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
1491297   +        P_DepVar0  =     0.82758620689655;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.82758620689655;
1491298   +        P_DepVar1  =     0.17241379310344;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.17241379310344;
1491299   +        Q_DepVar0  =     0.82758620689655;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.82758620689655;
1491300   +        Q_DepVar1  =     0.17241379310344;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.17241379310344;
1491301   +        V_DepVar0  =     0.76923076923076;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.76923076923076;
1491302   +        V_DepVar1  =     0.23076923076923;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.23076923076923;
1491303   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491304   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491305   +        END;
MPRINT(EM_DIAGRAM):   END;
1491306   +      END;
MPRINT(EM_DIAGRAM):   END;
1491307   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491308   +      IF  NOT MISSING(PC_2 ) AND
1491309   +            0.58053071940485 <= PC_2  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_2 ) AND 0.58053071940485 <= PC_2 THEN DO;
1491310   +        IF  NOT MISSING(PC_10 ) AND
1491311   +          PC_10  <    -1.00670288209024 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_10 ) AND PC_10 < -1.00670288209024 THEN DO;
1491312   +          _NODE_  =                   44;
MPRINT(EM_DIAGRAM):   _NODE_ = 44;
1491313   +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
1491314   +          P_DepVar0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.14285714285714;
1491315   +          P_DepVar1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.85714285714285;
1491316   +          Q_DepVar0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.14285714285714;
1491317   +          Q_DepVar1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.85714285714285;
1491318   +          V_DepVar0  =                    0;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0;
1491319   +          V_DepVar1  =                    1;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 1;
1491320   +          I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491321   +          U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491322   +          END;
MPRINT(EM_DIAGRAM):   END;
1491323   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491324   +          _NODE_  =                   45;
MPRINT(EM_DIAGRAM):   _NODE_ = 45;
1491325   +          _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
1491326   +          P_DepVar0  =                0.875;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.875;
1491327   +          P_DepVar1  =                0.125;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.125;
1491328   +          Q_DepVar0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.875;
1491329   +          Q_DepVar1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.125;
1491330   +          V_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 1;
1491331   +          V_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0;
1491332   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491333   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491334   +          END;
MPRINT(EM_DIAGRAM):   END;
1491335   +        END;
MPRINT(EM_DIAGRAM):   END;
1491336   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491337   +        IF  NOT MISSING(PC_9 ) AND
1491338   +          PC_9  <    -1.25892717055351 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_9 ) AND PC_9 < -1.25892717055351 THEN DO;
1491339   +          _NODE_  =                   42;
MPRINT(EM_DIAGRAM):   _NODE_ = 42;
1491340   +          _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
1491341   +          P_DepVar0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.5;
1491342   +          P_DepVar1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.5;
1491343   +          Q_DepVar0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.5;
1491344   +          Q_DepVar1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.5;
1491345   +          V_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 1;
1491346   +          V_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0;
1491347   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491348   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491349   +          END;
MPRINT(EM_DIAGRAM):   END;
1491350   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491351   +          _NODE_  =                   43;
MPRINT(EM_DIAGRAM):   _NODE_ = 43;
1491352   +          _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
1491353   +          P_DepVar0  =     0.05617977528089;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.05617977528089;
1491354   +          P_DepVar1  =      0.9438202247191;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.9438202247191;
1491355   +          Q_DepVar0  =     0.05617977528089;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.05617977528089;
1491356   +          Q_DepVar1  =      0.9438202247191;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.9438202247191;
1491357   +          V_DepVar0  =     0.23684210526315;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.23684210526315;
1491358   +          V_DepVar1  =     0.76315789473684;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.76315789473684;
1491359   +          I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491360   +          U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491361   +          END;
MPRINT(EM_DIAGRAM):   END;
1491362   +        END;
MPRINT(EM_DIAGRAM):   END;
1491363   +      END;
MPRINT(EM_DIAGRAM):   END;
1491364   +    END;
MPRINT(EM_DIAGRAM):   END;
1491365   +  END;
MPRINT(EM_DIAGRAM):   END;
1491366   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491367   +  IF  NOT MISSING(PC_10 ) AND
1491368   +    PC_10  <    -1.17304575722937 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_10 ) AND PC_10 < -1.17304575722937 THEN DO;
1491369   +    IF  NOT MISSING(PC_13 ) AND
1491370   +      PC_13  <    -0.26486815504637 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_13 ) AND PC_13 < -0.26486815504637 THEN DO;
1491371   +      _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
1491372   +      _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
1491373   +      P_DepVar0  =                0.375;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.375;
1491374   +      P_DepVar1  =                0.625;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.625;
1491375   +      Q_DepVar0  =                0.375;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.375;
1491376   +      Q_DepVar1  =                0.625;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.625;
1491377   +      V_DepVar0  =     0.38709677419354;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.38709677419354;
1491378   +      V_DepVar1  =     0.61290322580645;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.61290322580645;
1491379   +      I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491380   +      U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491381   +      END;
MPRINT(EM_DIAGRAM):   END;
1491382   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491383   +      _NODE_  =                    9;
MPRINT(EM_DIAGRAM):   _NODE_ = 9;
1491384   +      _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
1491385   +      P_DepVar0  =     0.75524475524475;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.75524475524475;
1491386   +      P_DepVar1  =     0.24475524475524;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.24475524475524;
1491387   +      Q_DepVar0  =     0.75524475524475;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.75524475524475;
1491388   +      Q_DepVar1  =     0.24475524475524;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.24475524475524;
1491389   +      V_DepVar0  =                 0.76;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.76;
1491390   +      V_DepVar1  =                 0.24;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.24;
1491391   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491392   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491393   +      END;
MPRINT(EM_DIAGRAM):   END;
1491394   +    END;
MPRINT(EM_DIAGRAM):   END;
1491395   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491396   +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
1491397   +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
1491398   +    P_DepVar0  =     0.92388451443569;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.92388451443569;
1491399   +    P_DepVar1  =      0.0761154855643;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.0761154855643;
1491400   +    Q_DepVar0  =     0.92388451443569;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.92388451443569;
1491401   +    Q_DepVar1  =      0.0761154855643;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.0761154855643;
1491402   +    V_DepVar0  =     0.91320293398533;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.91320293398533;
1491403   +    V_DepVar1  =     0.08679706601466;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.08679706601466;
1491404   +    I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491405   +    U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491406   +    END;
MPRINT(EM_DIAGRAM):   END;
1491407   +  END;
MPRINT(EM_DIAGRAM):   END;
1491408   +
1491409   +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
1491410   +IF  F_DepVar  NE '0'
1491411   +AND F_DepVar  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_DepVar NE '0' AND F_DepVar NE '1' THEN DO;
1491412   +        R_DepVar0  = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1491413   +        R_DepVar1  = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1491414   + END;
MPRINT(EM_DIAGRAM):   END;
1491415   + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491416   +       R_DepVar0  =  -P_DepVar0 ;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0 ;
1491417   +       R_DepVar1  =  -P_DepVar1 ;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1 ;
1491418   +       SELECT( F_DepVar  );
MPRINT(EM_DIAGRAM):   SELECT( F_DepVar );
1491419   +          WHEN( '0'  ) R_DepVar0  = R_DepVar0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_DepVar0 = R_DepVar0 +1;
1491420   +          WHEN( '1'  ) R_DepVar1  = R_DepVar1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_DepVar1 = R_DepVar1 +1;
1491421   +       END;
MPRINT(EM_DIAGRAM):   END;
1491422   + END;
MPRINT(EM_DIAGRAM):   END;
1491423   +
1491424   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491425   +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
1491426   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491427   +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1491428    run;
 
NOTE: DATA STEP view saved on file EMWS8.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1491429    quit;
1491430    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1491431    filename emflow
1491431  ! "C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1491432    *------------------------------------------------------------*;
1491433    * Tree2: Scoring VALIDATE data;
1491434    *------------------------------------------------------------*;
1491435    data EMWS8.Tree2_VALIDATE
1491436    / view=EMWS8.Tree2_VALIDATE
1491437    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_VALIDATE / view=EMWS8.Tree2_VALIDATE ;
1491438    set EMWS8.PRINCOMP_VALIDATE
1491439    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
1491440    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMFLOWSCORE.sas.
1491441   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491442   +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
1491443   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491444   +
1491445   +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
1491446   +LENGTH F_DepVar  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_DepVar $ 12;
1491447   +LENGTH I_DepVar  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_DepVar $ 12;
1491448   +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
1491449   +
1491450   +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
1491451   +LABEL _NODE_  = 'Node' ;
MPRINT(EM_DIAGRAM):   LABEL _NODE_ = 'Node' ;
1491452   +LABEL _LEAF_  = 'Leaf' ;
MPRINT(EM_DIAGRAM):   LABEL _LEAF_ = 'Leaf' ;
1491453   +LABEL P_DepVar0  = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL P_DepVar0 = 'Predicted: DepVar=0' ;
1491454   +LABEL P_DepVar1  = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL P_DepVar1 = 'Predicted: DepVar=1' ;
1491455   +LABEL Q_DepVar0  = 'Unadjusted P: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL Q_DepVar0 = 'Unadjusted P: DepVar=0' ;
1491456   +LABEL Q_DepVar1  = 'Unadjusted P: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL Q_DepVar1 = 'Unadjusted P: DepVar=1' ;
1491457   +LABEL V_DepVar0  = 'Validated: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL V_DepVar0 = 'Validated: DepVar=0' ;
1491458   +LABEL V_DepVar1  = 'Validated: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL V_DepVar1 = 'Validated: DepVar=1' ;
1491459   +LABEL R_DepVar0  = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   LABEL R_DepVar0 = 'Residual: DepVar=0' ;
1491460   +LABEL R_DepVar1  = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   LABEL R_DepVar1 = 'Residual: DepVar=1' ;
1491461   +LABEL F_DepVar  = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   LABEL F_DepVar = 'From: DepVar' ;
1491462   +LABEL I_DepVar  = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   LABEL I_DepVar = 'Into: DepVar' ;
1491463   +LABEL U_DepVar  = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   LABEL U_DepVar = 'Unnormalized Into: DepVar' ;
1491464   +LABEL _WARN_  = 'Warnings' ;
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings' ;
1491465   +
1491466   +
1491467   +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
1491468   +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
1491469   +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
1491470   +
1491471   +
1491472   +_ARBFMT_12 = PUT( DepVar , BEST.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DepVar , BEST.);
1491473   + %DMNORMCP( _ARBFMT_12, F_DepVar );
MPRINT(DMNORMCP):   F_DepVar=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1491474   +
1491475   +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
1491476   +IF  NOT MISSING(PC_1 ) AND
1491477   +      4.72939183091507 <= PC_1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_1 ) AND 4.72939183091507 <= PC_1 THEN DO;
1491478   +  IF  NOT MISSING(PC_13 ) AND
1491479   +        0.79329555544069 <= PC_13  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_13 ) AND 0.79329555544069 <= PC_13 THEN DO;
1491480   +    IF  NOT MISSING(PC_3 ) AND
1491481   +      PC_3  <    -0.89926417042745 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_3 ) AND PC_3 < -0.89926417042745 THEN DO;
1491482   +      IF  NOT MISSING(PC_14 ) AND
1491483   +        PC_14  <    -0.28319704184066 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_14 ) AND PC_14 < -0.28319704184066 THEN DO;
1491484   +        _NODE_  =                   28;
MPRINT(EM_DIAGRAM):   _NODE_ = 28;
1491485   +        _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
1491486   +        P_DepVar0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.9090909090909;
1491487   +        P_DepVar1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.09090909090909;
1491488   +        Q_DepVar0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.9090909090909;
1491489   +        Q_DepVar1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.09090909090909;
1491490   +        V_DepVar0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.8;
1491491   +        V_DepVar1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.2;
1491492   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491493   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491494   +        END;
MPRINT(EM_DIAGRAM):   END;
1491495   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491496   +        _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
1491497   +        _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
1491498   +        P_DepVar0  =     0.35714285714285;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.35714285714285;
1491499   +        P_DepVar1  =     0.64285714285714;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.64285714285714;
1491500   +        Q_DepVar0  =     0.35714285714285;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.35714285714285;
1491501   +        Q_DepVar1  =     0.64285714285714;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.64285714285714;
1491502   +        V_DepVar0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.33333333333333;
1491503   +        V_DepVar1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.66666666666666;
1491504   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491505   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491506   +        END;
MPRINT(EM_DIAGRAM):   END;
1491507   +      END;
MPRINT(EM_DIAGRAM):   END;
1491508   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491509   +      _NODE_  =                   15;
MPRINT(EM_DIAGRAM):   _NODE_ = 15;
1491510   +      _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
1491511   +      P_DepVar0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.92;
1491512   +      P_DepVar1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.08;
1491513   +      Q_DepVar0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.92;
1491514   +      Q_DepVar1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.08;
1491515   +      V_DepVar0  =     0.78947368421052;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.78947368421052;
1491516   +      V_DepVar1  =     0.21052631578947;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.21052631578947;
1491517   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491518   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491519   +      END;
MPRINT(EM_DIAGRAM):   END;
1491520   +    END;
MPRINT(EM_DIAGRAM):   END;
1491521   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491522   +    IF  NOT MISSING(PC_10 ) AND
1491523   +          2.83174076962809 <= PC_10  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_10 ) AND 2.83174076962809 <= PC_10 THEN DO;
1491524   +      IF  NOT MISSING(PC_16 ) AND
1491525   +            0.82549857301853 <= PC_16  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_16 ) AND 0.82549857301853 <= PC_16 THEN DO;
1491526   +        _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
1491527   +        _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
1491528   +        P_DepVar0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.16666666666666;
1491529   +        P_DepVar1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.83333333333333;
1491530   +        Q_DepVar0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.16666666666666;
1491531   +        Q_DepVar1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.83333333333333;
1491532   +        V_DepVar0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.33333333333333;
1491533   +        V_DepVar1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.66666666666666;
1491534   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491535   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491536   +        END;
MPRINT(EM_DIAGRAM):   END;
1491537   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491538   +        _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
1491539   +        _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
1491540   +        P_DepVar0  =     0.82758620689655;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.82758620689655;
1491541   +        P_DepVar1  =     0.17241379310344;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.17241379310344;
1491542   +        Q_DepVar0  =     0.82758620689655;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.82758620689655;
1491543   +        Q_DepVar1  =     0.17241379310344;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.17241379310344;
1491544   +        V_DepVar0  =     0.76923076923076;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.76923076923076;
1491545   +        V_DepVar1  =     0.23076923076923;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.23076923076923;
1491546   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491547   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491548   +        END;
MPRINT(EM_DIAGRAM):   END;
1491549   +      END;
MPRINT(EM_DIAGRAM):   END;
1491550   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491551   +      IF  NOT MISSING(PC_2 ) AND
1491552   +            0.58053071940485 <= PC_2  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_2 ) AND 0.58053071940485 <= PC_2 THEN DO;
1491553   +        IF  NOT MISSING(PC_10 ) AND
1491554   +          PC_10  <    -1.00670288209024 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_10 ) AND PC_10 < -1.00670288209024 THEN DO;
1491555   +          _NODE_  =                   44;
MPRINT(EM_DIAGRAM):   _NODE_ = 44;
1491556   +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
1491557   +          P_DepVar0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.14285714285714;
1491558   +          P_DepVar1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.85714285714285;
1491559   +          Q_DepVar0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.14285714285714;
1491560   +          Q_DepVar1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.85714285714285;
1491561   +          V_DepVar0  =                    0;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0;
1491562   +          V_DepVar1  =                    1;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 1;
1491563   +          I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491564   +          U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491565   +          END;
MPRINT(EM_DIAGRAM):   END;
1491566   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491567   +          _NODE_  =                   45;
MPRINT(EM_DIAGRAM):   _NODE_ = 45;
1491568   +          _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
1491569   +          P_DepVar0  =                0.875;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.875;
1491570   +          P_DepVar1  =                0.125;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.125;
1491571   +          Q_DepVar0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.875;
1491572   +          Q_DepVar1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.125;
1491573   +          V_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 1;
1491574   +          V_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0;
1491575   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491576   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491577   +          END;
MPRINT(EM_DIAGRAM):   END;
1491578   +        END;
MPRINT(EM_DIAGRAM):   END;
1491579   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491580   +        IF  NOT MISSING(PC_9 ) AND
1491581   +          PC_9  <    -1.25892717055351 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_9 ) AND PC_9 < -1.25892717055351 THEN DO;
1491582   +          _NODE_  =                   42;
MPRINT(EM_DIAGRAM):   _NODE_ = 42;
1491583   +          _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
1491584   +          P_DepVar0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.5;
1491585   +          P_DepVar1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.5;
1491586   +          Q_DepVar0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.5;
1491587   +          Q_DepVar1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.5;
1491588   +          V_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 1;
1491589   +          V_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0;
1491590   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491591   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491592   +          END;
MPRINT(EM_DIAGRAM):   END;
1491593   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491594   +          _NODE_  =                   43;
MPRINT(EM_DIAGRAM):   _NODE_ = 43;
1491595   +          _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
1491596   +          P_DepVar0  =     0.05617977528089;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.05617977528089;
1491597   +          P_DepVar1  =      0.9438202247191;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.9438202247191;
1491598   +          Q_DepVar0  =     0.05617977528089;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.05617977528089;
1491599   +          Q_DepVar1  =      0.9438202247191;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.9438202247191;
1491600   +          V_DepVar0  =     0.23684210526315;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.23684210526315;
1491601   +          V_DepVar1  =     0.76315789473684;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.76315789473684;
1491602   +          I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491603   +          U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491604   +          END;
MPRINT(EM_DIAGRAM):   END;
1491605   +        END;
MPRINT(EM_DIAGRAM):   END;
1491606   +      END;
MPRINT(EM_DIAGRAM):   END;
1491607   +    END;
MPRINT(EM_DIAGRAM):   END;
1491608   +  END;
MPRINT(EM_DIAGRAM):   END;
1491609   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491610   +  IF  NOT MISSING(PC_10 ) AND
1491611   +    PC_10  <    -1.17304575722937 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_10 ) AND PC_10 < -1.17304575722937 THEN DO;
1491612   +    IF  NOT MISSING(PC_13 ) AND
1491613   +      PC_13  <    -0.26486815504637 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PC_13 ) AND PC_13 < -0.26486815504637 THEN DO;
1491614   +      _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
1491615   +      _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
1491616   +      P_DepVar0  =                0.375;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.375;
1491617   +      P_DepVar1  =                0.625;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.625;
1491618   +      Q_DepVar0  =                0.375;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.375;
1491619   +      Q_DepVar1  =                0.625;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.625;
1491620   +      V_DepVar0  =     0.38709677419354;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.38709677419354;
1491621   +      V_DepVar1  =     0.61290322580645;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.61290322580645;
1491622   +      I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1491623   +      U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1491624   +      END;
MPRINT(EM_DIAGRAM):   END;
1491625   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491626   +      _NODE_  =                    9;
MPRINT(EM_DIAGRAM):   _NODE_ = 9;
1491627   +      _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
1491628   +      P_DepVar0  =     0.75524475524475;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.75524475524475;
1491629   +      P_DepVar1  =     0.24475524475524;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.24475524475524;
1491630   +      Q_DepVar0  =     0.75524475524475;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.75524475524475;
1491631   +      Q_DepVar1  =     0.24475524475524;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.24475524475524;
1491632   +      V_DepVar0  =                 0.76;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.76;
1491633   +      V_DepVar1  =                 0.24;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.24;
1491634   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491635   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491636   +      END;
MPRINT(EM_DIAGRAM):   END;
1491637   +    END;
MPRINT(EM_DIAGRAM):   END;
1491638   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491639   +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
1491640   +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
1491641   +    P_DepVar0  =     0.92388451443569;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.92388451443569;
1491642   +    P_DepVar1  =      0.0761154855643;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.0761154855643;
1491643   +    Q_DepVar0  =     0.92388451443569;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.92388451443569;
1491644   +    Q_DepVar1  =      0.0761154855643;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.0761154855643;
1491645   +    V_DepVar0  =     0.91320293398533;
MPRINT(EM_DIAGRAM):   V_DepVar0 = 0.91320293398533;
1491646   +    V_DepVar1  =     0.08679706601466;
MPRINT(EM_DIAGRAM):   V_DepVar1 = 0.08679706601466;
1491647   +    I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1491648   +    U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1491649   +    END;
MPRINT(EM_DIAGRAM):   END;
1491650   +  END;
MPRINT(EM_DIAGRAM):   END;
1491651   +
1491652   +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
1491653   +IF  F_DepVar  NE '0'
1491654   +AND F_DepVar  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_DepVar NE '0' AND F_DepVar NE '1' THEN DO;
1491655   +        R_DepVar0  = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1491656   +        R_DepVar1  = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1491657   + END;
MPRINT(EM_DIAGRAM):   END;
1491658   + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1491659   +       R_DepVar0  =  -P_DepVar0 ;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0 ;
1491660   +       R_DepVar1  =  -P_DepVar1 ;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1 ;
1491661   +       SELECT( F_DepVar  );
MPRINT(EM_DIAGRAM):   SELECT( F_DepVar );
1491662   +          WHEN( '0'  ) R_DepVar0  = R_DepVar0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_DepVar0 = R_DepVar0 +1;
1491663   +          WHEN( '1'  ) R_DepVar1  = R_DepVar1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_DepVar1 = R_DepVar1 +1;
1491664   +       END;
MPRINT(EM_DIAGRAM):   END;
1491665   + END;
MPRINT(EM_DIAGRAM):   END;
1491666   +
1491667   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491668   +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
1491669   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1491670   +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1491671    run;
 
NOTE: DATA STEP view saved on file EMWS8.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1491672    quit;
1491673    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1491674    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1491675    * Tree2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree2: Computing metadata for TRAIN data;
1491676    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Tree2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Tree2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Tree2_TRAIN out=WORK.M15W5YKK noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15W5YKK;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M15W5YKK(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15W5YKK;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M15W5YKK;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M25IVE4N NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M25IVE4N;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M25IVE4N;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0MGSCDT(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M25IVE4N;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M25IVE4N;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M25IVE4N;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M25IVE4N;
MPRINT(EMADVISECOLUMNS):   set WORK.M25IVE4N;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree2";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Tree2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = '_NODE_' then do;
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(name) = 'PC_1' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_10' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_13' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_2' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_9' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_16' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_14' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_3' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_12' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_11' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_7' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_17' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_4' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_5' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_6' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_15' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'PC_8' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'YEAR_BIRTH' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Tree2: TREELOWIMPORTANCE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(name) = 'Q_DepVar1' then role = "ASSESS";
MPRINT(EM_DIAGRAM):   if upcase(name) = 'Q_DepVar0' then role = "ASSESS";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1492059    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1492060    set EMWS8.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMINFO;
1492061    where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
1492062    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1492063    data EMWS8.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_EMINFO;
1492064    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1492065    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1492066    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1492070    run;
1492071    data EMWS8.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_EMINFO;
1492072    set EMWS8.Tree2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMINFO WORK.MODELTEMP_INFO;
1492073    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1492074    proc sort data = EMWS8.Tree2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Tree2_EMINFO NOTHREADS;
1492075    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1492076    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.TREE2_EMINFO.
NOTE: The data set EMWS8.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492077    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1492078    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1492079    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492080    proc sort data = EMWS8.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1492081    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1492082    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492083    data EMWS8.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_EMINFO;
1492084    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1492085    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1492086    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.TREE2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492087    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1492088    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1492089    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1492090    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS8.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS8.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.25 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                09.25 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1LM0EW6
"C:\\predictive-models-project\Workspaces\EMWS8\Tree2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1LM0EW6 new;
MPRINT(EM_DIAGRAM):   run;
1492114    data work.Tree2_tarmetads;
MPRINT(EM_DIAGRAM):    data work.Tree2_tarmetads;
1492115    set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_CMeta_TRAIN(where=(ROLE='TARGET'));
1492116    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.PRINCOMP_CMETA_TRAIN.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TREE2_TARMETADS has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492117    data EMWS8.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_EMOUTFIT;
1492118    length target $32;
MPRINT(EM_DIAGRAM):   length target $32;
1492119    set EMWS8.Tree2_OUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_OUTFIT;
1492120    drop _NW_ _SUMW_
1492121    ;
MPRINT(EM_DIAGRAM):   drop _NW_ _SUMW_ ;
1492122    target = "DepVar";
MPRINT(EM_DIAGRAM):   target = "DepVar";
1492123    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.TREE2_OUTFIT.
NOTE: The data set EMWS8.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492124    data EMWS8.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_EMOUTFIT;
1492125    set EMWS8.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMOUTFIT;
1492126    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1492127    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
1492127  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1492128    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1492129    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.TREE2_EMOUTFIT.
NOTE: The data set EMWS8.TREE2_EMOUTFIT has 1 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1492130    proc sort data=EMWS8.Tree2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Tree2_EMREPORTFIT nothreads;
1492131    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1492132    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.TREE2_EMREPORTFIT.
NOTE: The data set EMWS8.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492133    %let _EMwarndup = 0;
1492134    %let _EMtargetdup =;
1492135    %let _EMASEtargetdup =;
1492136    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1492137    set EMWS8.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMOUTFIT;
1492138    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1492139    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1492140    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1492141    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1492142    end;
MPRINT(EM_DIAGRAM):   end;
1492143    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492144    proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=WORK.SUBSETINMETA;
1492145    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1492146    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS8.PRINCOMP_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 21 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492147    proc sort data=EMWS8.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
1492148    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1492149    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS8.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1492150    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1492151    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1492152    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1492153    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 19 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 21 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1492154    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1492155    set EMWS8.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_CMeta_TRAIN;
1492156    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1492156  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1492157    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS8.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1492158    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1492159    set EMWS8.Tree2_TRAIN(keep=
1492160    F_DepVar
1492161    I_DepVar
1492162    P_DepVar0
1492163    P_DepVar1
1492164    R_DepVar0
1492165    R_DepVar1
1492166    U_DepVar
1492167    V_DepVar0
1492168    V_DepVar1
1492169    _WARN_
1492170    DepVar
1492171    );
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar V_DepVar0 V_DepVar1 _WARN_ DepVar );
1492172    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PRINCOMP_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Tree2_1EI9F3B nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree2_1EI9F3B;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree2_1EI9F3B(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_1EI9F3B;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_1EI9F3B;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0761154856 OVLMAX 0.9438202247 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1496438    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1496439    set EMWS8.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_CMeta_TRAIN;
1496440    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
1496440  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
1496441    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS8.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1496442    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1496443    set EMWS8.Tree2_VALIDATE(keep=
1496444    F_DepVar
1496445    I_DepVar
1496446    P_DepVar0
1496447    P_DepVar1
1496448    R_DepVar0
1496449    R_DepVar1
1496450    U_DepVar
1496451    V_DepVar0
1496452    V_DepVar1
1496453    _WARN_
1496454    DepVar
1496455    );
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar V_DepVar0 V_DepVar1 _WARN_ DepVar );
1496456    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PRINCOMP_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Tree2_0U2L4K2 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree2_0U2L4K2;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree2_0U2L4K2(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMCLASSIFICATION WORK.Tree2_0U2L4K2;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_0U2L4K2;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0761154856 OVLMAX 0.9438202247 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
The SAS System
 
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1500731    %let _cn = %sysfunc(getoption(CENTER));
1500732    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1500733    proc print data=EMWS8.Tree2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Tree2_EMREPORTFIT noobs label;
1500734    var STAT LABEL TRAIN
1500735    VALIDATE
1500736    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
1500737    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1500738    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1500739    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1500740    run;
 
NOTE: There were 8 observations read from the data set EMWS8.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 1305.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1500741    title10;
MPRINT(EM_DIAGRAM):   title10;
1500742    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1500743    proc sort data=EMWS8.Tree2_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Tree2_EMCLASSIFICATION nothreads;
1500744    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1500745    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS8.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1500746    %let _cn = %sysfunc(getoption(CENTER));
1500747    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1500748    proc print data=EMWS8.Tree2_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Tree2_EMCLASSIFICATION noobs label;
1500749    var from into pct_row pct_col count percent
1500750    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1500751    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1500752    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1500753    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1500754    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1500755    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1500756    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1500757    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1500758    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1500759    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1500760    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1500761    run;
 
NOTE: There were 8 observations read from the data set EMWS8.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 1306.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1500762    title9;
MPRINT(EM_DIAGRAM):   title9;
1500763    title10;
MPRINT(EM_DIAGRAM):   title10;
1500764    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1500765    %let _cn = %sysfunc(getoption(CENTER));
1500766    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1500767    data EMWS8.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Tree2_EMEVENTREPORT;
1500768    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
1500768  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
1500769    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1500769  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
1500769  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
1500769  ! FALSEEVENT
1500770    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
1500770  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
1500770  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
1500771       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
1500772    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
1500773    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
1500774    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
1500775    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
1500776    set EMWS8.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Tree2_EMEVENTREPORT;
1500777    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS8.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1500778    proc print data=EMWS8.Tree2_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Tree2_EMEVENTREPORT noobs label;
1500779    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1500780    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
1500781    by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
1500782    run;
 
NOTE: There were 2 observations read from the data set EMWS8.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 1307.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1500783    title10;
MPRINT(EM_DIAGRAM):   title10;
1500784    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1500785    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1500786    modify Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1500787    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1500788    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1500788  ! ;
MPRINT(EM_DIAGRAM):   run;
1500789    run;
 
NOTE: MODIFY was successful for EMWS8.TREE2_EMRANK.DATA.
1500790    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
1500791    %let _cn = %sysfunc(getoption(CENTER));
1500792    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1500793    proc print data=EMWS8.Tree2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Tree2_EMRANK label noobs;
1500794    var
1500795    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1500796    by
1500797    notsorted DATAROLE
1500798    notsorted TARGET
1500799    notsorted TARGETLABEL
1500800    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1500801    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1500802    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1500803    run;
 
NOTE: There were 40 observations read from the data set EMWS8.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 1308.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1500804    title10;
MPRINT(EM_DIAGRAM):   title10;
1500805    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1500806    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
1500807    modify Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1500808    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
1500808  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1500809    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1500809  ! ;
MPRINT(EM_DIAGRAM):   run;
1500810    run;
 
NOTE: MODIFY was successful for EMWS8.TREE2_EMSCOREDIST.DATA.
1500811    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.03 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Tree2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
