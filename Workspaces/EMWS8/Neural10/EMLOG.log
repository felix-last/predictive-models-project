*------------------------------------------------------------*
User:                Lukas Fahr
Date:                20. April 2016
Time:                16.24 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.24 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                20. April 2016
Time:                16.24 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1TLSRW6
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1TLSRW6 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.24 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.24 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
297796     proc freq data=EMWS8.Neural10_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Neural10_VariableSet noprint;
297797     table ROLE*LEVEL/out=WORK.Neural10META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Neural10META;
297798     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.NEURAL10_VARIABLESET.
NOTE: The data set WORK.NEURAL10META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
297799     proc print data=WORK.Neural10META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural10META label noobs;
297800     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
297801     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
297801   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
297801   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
297802     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
297803     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
297804     run;
 
NOTE: There were 5 observations read from the data set WORK.NEURAL10META.
NOTE: The PROCEDURE PRINT printed page 215.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
297805     title10;
MPRINT(EM_DIAGRAM):   title10;
297806     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN EMWS8 Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN
EMWS8.Meta_TRAIN EMWS8.Meta_TRAIN EMWS8 Meta_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural10_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Neural10_DepVar_DD
_TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural10_DepVar_DD
out=EMWS8.Neural10_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
297853     data WORK.Neural10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
297854     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
297855     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
297855   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
297855   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
297856        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
297856   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
297856   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
297857     set EMWS8.NEURAL10_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.NEURAL10_DEPVAR_DM( where=(_TYPE_="TARGET"));
297858     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
297859     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
297860     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
297861     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
297862     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
297863     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
297864     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
297865     end;
MPRINT(EM_DIAGRAM):   end;
297866     output;
MPRINT(EM_DIAGRAM):   output;
297867     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL10_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL10_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
297868     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
297869     proc print data=WORK.Neural10_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural10_EVENT noobs label;
297870     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
297871     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
297872     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
297873     run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL10_EVENT.
NOTE: The PROCEDURE PRINT printed page 216.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
297874     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
297875     proc print data = EMWS8.Neural10_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Neural10_DepVar_DM noobs label;
297876     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
297877     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
297878     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
297878   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
297878   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
297879     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
297880     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
297881     run;
 
NOTE: There were 7 observations read from the data set EMWS8.NEURAL10_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 217.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
297882     title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural10: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1_IZ2V9;
MPRINT(EM_DIAGRAM):   set WORK.M1_IZ2V9;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
297892     data WORK.M1_IZ2V9;
MPRINT(EM_DIAGRAM):    data WORK.M1_IZ2V9;
297893     set WORK.M1_IZ2V9 end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M1_IZ2V9 end=eof;
297894     output;
MPRINT(EM_DIAGRAM):   output;
297895     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
297896     NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
297897     ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
297898     LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
297899     TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
297900     output;
MPRINT(EM_DIAGRAM):   output;
297901     end;
MPRINT(EM_DIAGRAM):   end;
297902     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.M1_IZ2V9.
NOTE: The data set WORK.M1_IZ2V9 has 34 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.NEURAL10_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
297903     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
297904     * Neural10: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural10: Create decision matrix;
297905     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
297906     data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
297907       length   DepVar                           $  32
297908                COUNT                                8
297909                DATAPRIOR                            8
297910                TRAINPRIOR                           8
297911                DECPRIOR                             8
297912                DECISION1                            8
297913                DECISION2                            8
297914                ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
297915
297916       label    COUNT="Level Counts"
297917                DATAPRIOR="Data Proportions"
297918                TRAINPRIOR="Training Proportions"
297919                DECPRIOR="Decision Priors"
297920                DECISION1="1"
297921                DECISION2="0"
297922                ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
297923       format   COUNT 10.
297924                ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
297925     DepVar="1"; COUNT=359; DATAPRIOR=0.0643642072; TRAINPRIOR=0.15122156697556;
297925   ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.0643642072;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
297926     output;
MPRINT(EM_DIAGRAM):   output;
297927     DepVar="0"; COUNT=2015; DATAPRIOR=0.9356357928; TRAINPRIOR=0.84877843302443;
297927   ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.9356357928;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
297928     output;
MPRINT(EM_DIAGRAM):   output;
297929     ;
MPRINT(EM_DIAGRAM):   ;
297930     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
297931     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
297932     modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
297933     label DECISION1= '1';
297934     label DECISION2= '0';
297935     run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
297936     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
297937     data EM_Neural10;
MPRINT(EM_DIAGRAM):   data EM_Neural10;
297938     set EMWS8.Meta_TRAIN(keep=
297939     AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
297940     AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income
297941     Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
297942     MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
297943     NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases
297944     NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome );
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_TRAIN(keep= AcceptedCmp1 AcceptedCmp2 AcceptedCmp3
AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain DepVar Education Frq
HigherEducationBinary Income Kidhome Marital_Status Mnt MntFishProducts MntFruits MntGoldProds
MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome );
297945     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: The data set WORK.EM_NEURAL10 has 2374 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural10: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297946     *------------------------------------------------------------* ;
297947     * Neural10: DMDBClass Macro ;
297948     *------------------------------------------------------------* ;
297949     %macro DMDBClass;
297950         AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
297951        AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC)
297952        HigherEducationBinary(ASC) Marital_Status(ASC)
297953     %mend DMDBClass;
297954     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297955     * Neural10: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural10: DMDBVar Macro ;
297956     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297957     %macro DMDBVar;
297958         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
297959        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
297960        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
297961        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
297962     %mend DMDBVar;
297963     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
297964     * Neural10: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural10: Create DMDB;
297965     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
297966     proc dmdb batch data=WORK.EM_Neural10
297967     dmdbcat=WORK.Neural10_DMDB
297968     maxlevel = 513
297969     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural10 dmdbcat=WORK.Neural10_DMDB
maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
297970     class %DMDBClass;
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
297971     var %DMDBVar;
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
297972     target
297973     DepVar
297974     ;
MPRINT(EM_DIAGRAM):   target DepVar ;
297975     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: There were 2374 observations read from the data set WORK.EM_NEURAL10.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
297976     quit;
297977     *--- end code ---*;
 
297978     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
297979     * Neural10: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural10: Interval Input Variables Macro ;
297980     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297981     %macro INTINPUTS;
297982         AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
297983        MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer
297984        NumCatalogPurchases NumDealsPurchases NumDistPurchases NumStorePurchases
297985        NumWebPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome
297986     %mend INTINPUTS;
297987     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297988     * Neural10: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural10: Binary Inputs Macro ;
297989     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297990     %macro BININPUTS;
297991         AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
297992        HigherEducationBinary
297993     %mend BININPUTS;
297994     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297995     * Neural10: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural10: Nominal Inputs Macro ;
297996     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
297997     %macro NOMINPUTS;
297998         Education Marital_Status
297999     %mend NOMINPUTS;
298000     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
298001     * Neural10: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural10: Ordinal Inputs Macro ;
298002     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
298003     %macro ORDINPUTS;
298004
298005     %mend ORDINPUTS;
298006     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
298007     * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
298008     ;
MPRINT(EM_DIAGRAM):   ;
298009     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
298010     proc neural data=EM_Neural10 dmdbcat=WORK.Neural10_DMDB
298011     validdata = EMWS8.Meta_VALIDATE
298012     random=12345
298013     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural10 dmdbcat=WORK.Neural10_DMDB validdata =
EMWS8.Meta_VALIDATE random=12345 ;
298014     nloptions
298015     ;
MPRINT(EM_DIAGRAM):   nloptions ;
298016     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
298017     netopts
298018     decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
298019     input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   AcceptedCmpTotal Age Frq Income Kidhome Mnt MntFishProducts MntFruits
MntGoldProds MntMeatProducts MntSweetProducts MntWines MonthsAsCustomer NumCatalogPurchases
NumDealsPurchases NumDistPurchases NumStorePurchases NumWebPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
298020     ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
298021     input %BININPUTS / level=nominal id=bin
MPRINT(BININPUTS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
HigherEducationBinary
298022     ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
MPRINT(EM_DIAGRAM):   input
298023     input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   Education Marital_Status
298024     ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
298025     target DepVar / level=NOMINAL id=DepVar
298026     bias
298027     ;
MPRINT(EM_DIAGRAM):   target DepVar / level=NOMINAL id=DepVar bias ;
298028     arch MLP
298029     Hidden=7
298030     ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=7 ;
298031     Prelim 5 preiter=10
298032     pretime=3600
298033     Outest=EMWS8.Neural10_PRELIM_OUTEST
298034     ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS8.Neural10_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set EMWS8.NEURAL10_PRELIM_OUTEST has 11 observations and 296 variables.
298035     save network=EMWS8.Neural10_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS8.Neural10_NETWORK.dm_neural;
NOTE: Entry EMWS8.NEURAL10_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS8.NEURAL10_NETWORK.DM_NEURAL has been closed.
298036     train Maxiter=50
298037     maxtime=14400
298038     Outest=EMWS8.Neural10_outest estiter=1
298039     Outfit=EMWS8.Neural10_OUTFIT
298040     ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS8.Neural10_outest estiter=1
Outfit=EMWS8.Neural10_OUTFIT ;
WARNING: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 50 iterations or 2147483647 function calls.
NOTE: The data set EMWS8.NEURAL10_OUTEST has 53 observations and 296 variables.
NOTE: The data set EMWS8.NEURAL10_OUTFIT has 104 observations and 36 variables.
298041     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL10 has 2374 observations and 33 variables.
NOTE: The data set EMWS8.META_VALIDATE has . observations and 45 variables.
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           2.27 seconds
      cpu time            2.21 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 218-221.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           2.27 seconds
      cpu time            2.21 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
298042     quit;
 
298043     proc sort data=EMWS8.Neural10_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL"))
298043   ! out=fit_Neural10;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural10_OUTFIT(where=(_iter_ ne . and
_NAME_="OVERALL")) out=fit_Neural10;
298044     by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
298045     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS8.NEURAL10_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL10 has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298046     %GLOBAL ITER;
298047     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
298048     set fit_Neural10(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural10(obs=1);
298049     call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
298050     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL10.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298051     data EMWS8.Neural10_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_INITIAL;
298052     set EMWS8.Neural10_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_outest(where=(_ITER_ eq 15 and _OBJ_ ne .));
298053     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL10_OUTEST.
      WHERE (_ITER_=15) and (_OBJ_ not = .);
NOTE: The data set EMWS8.NEURAL10_INITIAL has 1 observations and 296 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
298054     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
298055     * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
298056     ;
MPRINT(EM_DIAGRAM):   ;
298057     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
298058     proc neural data=EM_Neural10 dmdbcat=WORK.Neural10_DMDB
298059     validdata = EMWS8.Meta_VALIDATE
298060     network = EMWS8.Neural10_NETWORK.dm_neural
298061     random=12345
298062     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural10 dmdbcat=WORK.Neural10_DMDB validdata =
EMWS8.Meta_VALIDATE network = EMWS8.Neural10_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS8.NEURAL10_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS8.NEURAL10_NETWORK.DM_NEURAL has been closed.
298063     nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
298064     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
298065     initial inest=EMWS8.Neural10_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS8.Neural10_INITIAL;
NOTE: The data set EMWS8.NEURAL10_INITIAL has 1 observations and 296 variables.
298066     train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
298067     code file="C:\\predictive-models-project\Workspaces\EMWS8\Neural10\SCORECODE.sas"
298068     group=Neural10
298069     ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Neural10\SCORECODE.sas" group=Neural10 ;
NOTE: External file C:\\predictive-models-project\Workspaces\EMWS8\Neural10\SCORECODE.sas
      opened.
298070     ;
MPRINT(EM_DIAGRAM):   ;
298071     code
298071   ! file="C:\\predictive-models-project\Workspaces\EMWS8\Neural10\RESIDUALSCORECODE.sas"
298072     group=Neural10
298073     residual
298074     ;
MPRINT(EM_DIAGRAM):   code
file="C:\\predictive-models-project\Workspaces\EMWS8\Neural10\RESIDUALSCORECODE.sas"
group=Neural10 residual ;
NOTE: External file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural10\RESIDUALSCORECODE.sas opened.
298075     ;
MPRINT(EM_DIAGRAM):   ;
298076     score data=EMWS8.Meta_TRAIN out=_NULL_
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
298077     outfit=WORK.FIT1
298078     role=TRAIN
298079     outkey=EMWS8.Neural10_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS8.Meta_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN
outkey=EMWS8.Neural10_OUTKEY;
NOTE: The data set EMWS8.NEURAL10_OUTKEY has 57 observations and 8 variables.
NOTE: The data set EMWS8.META_TRAIN has . observations and 45 variables.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
298080     score data=EMWS8.Meta_VALIDATE out=_NULL_
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
298081     outfit=WORK.FIT2
298082     role=VALID
298083     outkey=EMWS8.Neural10_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS8.Meta_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID
outkey=EMWS8.Neural10_OUTKEY;
NOTE: The data set EMWS8.NEURAL10_OUTKEY has 57 observations and 8 variables.
NOTE: The data set EMWS8.META_VALIDATE has . observations and 45 variables.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
298084     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL10 has 2374 observations and 33 variables.
NOTE: The data set EMWS8.META_VALIDATE has . observations and 45 variables.
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.24 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.25 seconds
      cpu time            0.24 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
298085     quit;
298086     data EMWS8.Neural10_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_OUTFIT;
298087     merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
298088     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS8.NEURAL10_OUTFIT has 2 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
298089     data EMWS8.Neural10_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMESTIMATE;
298090     set EMWS8.Neural10_outest;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_outest;
298091     if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
298092     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS8.NEURAL10_OUTEST.
NOTE: The data set EMWS8.NEURAL10_EMESTIMATE has 52 observations and 296 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298093     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
298094     delete EM_Neural10;
MPRINT(EM_DIAGRAM):   delete EM_Neural10;
298095     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL10 (memtype=DATA).
298096     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
298097     data EMWS8.Neural10_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
298098     set fit_Neural10;
MPRINT(EM_DIAGRAM):   set fit_Neural10;
298099     attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  ,
298099   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
298100     attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  ,
298100   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
298101     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK.FIT_NEURAL10.
NOTE: The data set EMWS8.NEURAL10_PLOTDS has 52 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298102     proc sort data=EMWS8.Neural10_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural10_PLOTDS;
298103     by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
298104     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS8.NEURAL10_PLOTDS.
NOTE: The data set EMWS8.NEURAL10_PLOTDS has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298105     data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_
298105   ! where=(_type_ eq "PARMS" and _iter_ eq 15) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_
_averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 15) );
298106     set EMWS8.Neural10_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMESTIMATE;
298107     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS8.NEURAL10_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 288 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298108     proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
298109     by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
298110     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 288 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
298111     proc transpose data=tempweight out=EMWS8.Neural10_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS8.Neural10_WEIGHTDS;
298112     by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
298113     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS8.NEURAL10_WEIGHTDS has 286 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298114     data EMWS8.Neural10_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_WEIGHTDS;
298115     set EMWS8.Neural10_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_WEIGHTDS;
298116     FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
298117     TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
298118     WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
298119     if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
298120     label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM
298120   ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO =
298120   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
298121        "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
298122     keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
298123     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 286 observations read from the data set EMWS8.NEURAL10_WEIGHTDS.
NOTE: The data set EMWS8.NEURAL10_WEIGHTDS has 281 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
298124     proc sort data=EMWS8.Neural10_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural10_WEIGHTDS nodupkey;
298125     by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
298126     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 281 observations read from the data set EMWS8.NEURAL10_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.NEURAL10_WEIGHTDS has 281 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.24 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                20. April 2016
Time:                16.24 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0H7BNNW
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0H7BNNW new;
MPRINT(EM_DIAGRAM):   run;
298228     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
298229     set EMWS8.Neural10_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_OUTKEY;
298230     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
298231     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 57 observations read from the data set EMWS8.NEURAL10_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
298232     filename emflow
298232   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural10: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
298233     *------------------------------------------------------------*;
298234     * Neural10: Scoring DATA data;
298235     *------------------------------------------------------------*;
298236     data EMWS8.Neural10_TRAIN
298237     / view=EMWS8.Neural10_TRAIN
298238     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_TRAIN / view=EMWS8.Neural10_TRAIN ;
298239     set EMWS8.Meta_TRAIN
298240     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_TRAIN ;
298241     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMFLOWSCORE.sas.
298242    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
298243    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
298244    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
298245    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
298246    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
298247    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
298248    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
298249    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
298250    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
298251    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
298252    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
298253    +LENGTH _WARN_ $4
298254    +      F_DepVar  $ 12
298255    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
298256    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
298257    +
298258    +      label S_Age = 'Standard: Age' ;
MPRINT(EM_DIAGRAM):   label S_Age = 'Standard: Age' ;
298259    +
298260    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
298261    +
298262    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
298263    +
298264    +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
298265    +
298266    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
298267    +
298268    +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
298269    +
298270    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
298271    +
298272    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
298273    +
298274    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
298275    +
298276    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
298277    +
298278    +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
298279    +
298280    +      label S_MonthsAsCustomer = 'Standard: MonthsAsCustomer' ;
MPRINT(EM_DIAGRAM):   label S_MonthsAsCustomer = 'Standard: MonthsAsCustomer' ;
298281    +
298282    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
298283    +
298284    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
298285    +
298286    +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
298287    +
298288    +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
298289    +
298290    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
298291    +
298292    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
298293    +
298294    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
298295    +
298296    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
298297    +
298298    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
298299    +
298300    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
298301    +
298302    +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
298303    +
298304    +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
298305    +
298306    +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
298307    +
298308    +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
298309    +
298310    +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
298311    +
298312    +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
298313    +
298314    +      label HigherEducationBinary0 = 'Dummy: HigherEducationBinary=0' ;
MPRINT(EM_DIAGRAM):   label HigherEducationBinary0 = 'Dummy: HigherEducationBinary=0' ;
298315    +
298316    +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
298317    +
298318    +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
298319    +
298320    +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
298321    +
298322    +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
298323    +
298324    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
298325    +
298326    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
298327    +
298328    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
298329    +
298330    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
298331    +
298332    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
298333    +
298334    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
298335    +
298336    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
298337    +
298338    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
298339    +
298340    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
298341    +
298342    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
298343    +
298344    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
298345    +
298346    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
298347    +
298348    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
298349    +
298350    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
298351    +
298352    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
298353    +
298354    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
298355    +
298356    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
298357    +
298358    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
298359    +
298360    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
298361    +
298362    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
298363    +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
298364    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
298365    +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
298366    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298367    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298368    +end;
MPRINT(EM_DIAGRAM):   end;
298369    +else do;
MPRINT(EM_DIAGRAM):   else do;
298370    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
298371    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
298372    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298373    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
298374    +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
298375    +   end;
MPRINT(EM_DIAGRAM):   end;
298376    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
298377    +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
298378    +   end;
MPRINT(EM_DIAGRAM):   end;
298379    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298380    +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
298381    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298382    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298383    +   end;
MPRINT(EM_DIAGRAM):   end;
298384    +end;
MPRINT(EM_DIAGRAM):   end;
298385    +
298386    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
298387    +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
298388    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
298389    +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
298390    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298391    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298392    +end;
MPRINT(EM_DIAGRAM):   end;
298393    +else do;
MPRINT(EM_DIAGRAM):   else do;
298394    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
298395    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
298396    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298397    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
298398    +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
298399    +   end;
MPRINT(EM_DIAGRAM):   end;
298400    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
298401    +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
298402    +   end;
MPRINT(EM_DIAGRAM):   end;
298403    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298404    +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
298405    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298406    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298407    +   end;
MPRINT(EM_DIAGRAM):   end;
298408    +end;
MPRINT(EM_DIAGRAM):   end;
298409    +
298410    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
298411    +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
298412    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
298413    +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
298414    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298415    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298416    +end;
MPRINT(EM_DIAGRAM):   end;
298417    +else do;
MPRINT(EM_DIAGRAM):   else do;
298418    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
298419    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
298420    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298421    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
298422    +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
298423    +   end;
MPRINT(EM_DIAGRAM):   end;
298424    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
298425    +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
298426    +   end;
MPRINT(EM_DIAGRAM):   end;
298427    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298428    +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
298429    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298430    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298431    +   end;
MPRINT(EM_DIAGRAM):   end;
298432    +end;
MPRINT(EM_DIAGRAM):   end;
298433    +
298434    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
298435    +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
298436    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
298437    +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
298438    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298439    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298440    +end;
MPRINT(EM_DIAGRAM):   end;
298441    +else do;
MPRINT(EM_DIAGRAM):   else do;
298442    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
298443    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
298444    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298445    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
298446    +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
298447    +   end;
MPRINT(EM_DIAGRAM):   end;
298448    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
298449    +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
298450    +   end;
MPRINT(EM_DIAGRAM):   end;
298451    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298452    +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
298453    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298454    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298455    +   end;
MPRINT(EM_DIAGRAM):   end;
298456    +end;
MPRINT(EM_DIAGRAM):   end;
298457    +
298458    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
298459    +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
298460    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
298461    +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
298462    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298463    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298464    +end;
MPRINT(EM_DIAGRAM):   end;
298465    +else do;
MPRINT(EM_DIAGRAM):   else do;
298466    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
298467    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
298468    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298469    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
298470    +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
298471    +   end;
MPRINT(EM_DIAGRAM):   end;
298472    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
298473    +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
298474    +   end;
MPRINT(EM_DIAGRAM):   end;
298475    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298476    +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
298477    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298478    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298479    +   end;
MPRINT(EM_DIAGRAM):   end;
298480    +end;
MPRINT(EM_DIAGRAM):   end;
298481    +
298482    +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
298483    +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
298484    +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
298485    +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
298486    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298487    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298488    +end;
MPRINT(EM_DIAGRAM):   end;
298489    +else do;
MPRINT(EM_DIAGRAM):   else do;
298490    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
298491    +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
298492    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298493    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
298494    +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
298495    +   end;
MPRINT(EM_DIAGRAM):   end;
298496    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
298497    +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
298498    +   end;
MPRINT(EM_DIAGRAM):   end;
298499    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298500    +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
298501    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298502    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298503    +   end;
MPRINT(EM_DIAGRAM):   end;
298504    +end;
MPRINT(EM_DIAGRAM):   end;
298505    +
298506    +*** Generate dummy variables for HigherEducationBinary ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HigherEducationBinary ;
298507    +drop HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   drop HigherEducationBinary0 ;
298508    +if missing( HigherEducationBinary ) then do;
MPRINT(EM_DIAGRAM):   if missing( HigherEducationBinary ) then do;
298509    +   HigherEducationBinary0 = .;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = .;
298510    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298511    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298512    +end;
MPRINT(EM_DIAGRAM):   end;
298513    +else do;
MPRINT(EM_DIAGRAM):   else do;
298514    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
298515    +   _dm12 = put( HigherEducationBinary , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( HigherEducationBinary , BEST12. );
298516    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298517    +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
298518    +      HigherEducationBinary0 = -1;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = -1;
298519    +   end;
MPRINT(EM_DIAGRAM):   end;
298520    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
298521    +      HigherEducationBinary0 = 1;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = 1;
298522    +   end;
MPRINT(EM_DIAGRAM):   end;
298523    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298524    +      HigherEducationBinary0 = .;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = .;
298525    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298526    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298527    +   end;
MPRINT(EM_DIAGRAM):   end;
298528    +end;
MPRINT(EM_DIAGRAM):   end;
298529    +
298530    +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
298531    +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation
EducationMaster ;
298532    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
298533    +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
298534    +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
298535    +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
298536    +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
298537    +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
298538    +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
298539    +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
298540    +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
298541    +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
298542    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298543    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298544    +end;
MPRINT(EM_DIAGRAM):   end;
298545    +else do;
MPRINT(EM_DIAGRAM):   else do;
298546    +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
298547    +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
298548    +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298549    +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
298550    +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
298551    +   end;
MPRINT(EM_DIAGRAM):   end;
298552    +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
298553    +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
298554    +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
298555    +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
298556    +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
298557    +   end;
MPRINT(EM_DIAGRAM):   end;
298558    +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
298559    +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
298560    +   end;
MPRINT(EM_DIAGRAM):   end;
298561    +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
298562    +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
298563    +   end;
MPRINT(EM_DIAGRAM):   end;
298564    +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
298565    +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
298566    +   end;
MPRINT(EM_DIAGRAM):   end;
298567    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298568    +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
298569    +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
298570    +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
298571    +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
298572    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298573    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298574    +   end;
MPRINT(EM_DIAGRAM):   end;
298575    +end;
MPRINT(EM_DIAGRAM):   end;
298576    +
298577    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
298578    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
298579    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
298580    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
298581    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
298582    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
298583    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
298584    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
298585    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
298586    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
298587    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
298588    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
298589    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
298590    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
298591    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298592    +end;
MPRINT(EM_DIAGRAM):   end;
298593    +else do;
MPRINT(EM_DIAGRAM):   else do;
298594    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
298595    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
298596    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
298597    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
298598    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
298599    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
298600    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
298601    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
298602    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
298603    +         end;
MPRINT(EM_DIAGRAM):   end;
298604    +         else do;
MPRINT(EM_DIAGRAM):   else do;
298605    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
298606    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
298607    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
298608    +            end;
MPRINT(EM_DIAGRAM):   end;
298609    +         end;
MPRINT(EM_DIAGRAM):   end;
298610    +      end;
MPRINT(EM_DIAGRAM):   end;
298611    +      else do;
MPRINT(EM_DIAGRAM):   else do;
298612    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
298613    +            Marital_StatusSingle = 1;
The SAS System
 
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
298614    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
298615    +         end;
MPRINT(EM_DIAGRAM):   end;
298616    +      end;
MPRINT(EM_DIAGRAM):   end;
298617    +   end;
MPRINT(EM_DIAGRAM):   end;
298618    +   else do;
MPRINT(EM_DIAGRAM):   else do;
298619    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
298620    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
298621    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
298622    +      end;
MPRINT(EM_DIAGRAM):   end;
298623    +      else do;
MPRINT(EM_DIAGRAM):   else do;
298624    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
298625    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
298626    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
298627    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
298628    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
298629    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
298630    +         end;
MPRINT(EM_DIAGRAM):   end;
298631    +      end;
MPRINT(EM_DIAGRAM):   end;
298632    +   end;
MPRINT(EM_DIAGRAM):   end;
298633    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
298634    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
298635    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
298636    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
298637    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
298638    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
298639    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298640    +   end;
MPRINT(EM_DIAGRAM):   end;
298641    +end;
MPRINT(EM_DIAGRAM):   end;
298642    +
298643    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298644    +*** Checking missing input Interval
298645    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
298646    +
298647    +IF NMISS(
298648    +   AcceptedCmpTotal ,
298649    +   Age ,
298650    +   Frq ,
298651    +   Income ,
298652    +   Kidhome ,
298653    +   Mnt ,
298654    +   MntFishProducts ,
298655    +   MntFruits ,
298656    +   MntGoldProds ,
298657    +   MntMeatProducts ,
298658    +   MntSweetProducts ,
298659    +   MntWines ,
298660    +   MonthsAsCustomer ,
298661    +   NumCatalogPurchases ,
298662    +   NumDealsPurchases ,
298663    +   NumDistPurchases ,
298664    +   NumStorePurchases ,
298665    +   NumWebPurchases ,
298666    +   NumWebVisitsMonth ,
298667    +   RFMstat ,
298668    +   RMntFrq ,
298669    +   Recency ,
298670    +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Age , Frq , Income , Kidhome , Mnt ,
MntFishProducts , MntFruits , MntGoldProds , MntMeatProducts , MntSweetProducts , MntWines ,
MonthsAsCustomer , NumCatalogPurchases , NumDealsPurchases , NumDistPurchases ,
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , RFMstat , RMntFrq , Recency ,
Teenhome ) THEN DO;
298671    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
298672    +
298673    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
298674    +END;
MPRINT(EM_DIAGRAM):   END;
298675    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298676    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
298677    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298678    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
298679    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
298680    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
298681    +   S_Age  =    -3.91319138389466 +     0.08289609202857 * Age ;
MPRINT(EM_DIAGRAM):   S_Age = -3.91319138389466 + 0.08289609202857 * Age ;
298682    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
298683    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
298684    +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
298685    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
298686    +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
298687    +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 *
MntFishProducts ;
298688    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
298689    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
298690    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
298691    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
298692    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
298693    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
298694    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 *
MntSweetProducts ;
298695    +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
298696    +   S_MonthsAsCustomer  =    -4.93133031507839 +     0.05900664899872 *
298697    +        MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   S_MonthsAsCustomer = -4.93133031507839 + 0.05900664899872 *
MonthsAsCustomer ;
298698    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
298699    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
298700    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
298701    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
298702    +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
298703    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
298704    +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
298705    +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 *
NumStorePurchases ;
298706    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
298707    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 *
NumWebPurchases ;
298708    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
298709    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
298710    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
298711    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
298712    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
298713    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
298714    +END;
MPRINT(EM_DIAGRAM):   END;
298715    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
298716    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
298717    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
298718    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
298719    +   IF MISSING( Age ) THEN S_Age  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age ) THEN S_Age = . ;
298720    +   ELSE S_Age  =    -3.91319138389466 +     0.08289609202857 * Age ;
MPRINT(EM_DIAGRAM):   ELSE S_Age = -3.91319138389466 + 0.08289609202857 * Age ;
298721    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
298722    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
298723    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
298724    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
298725    +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
298726    +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
298727    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
298728    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
298729    +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
298730    +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
298731    +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 *
MntFishProducts ;
298732    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
298733    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
298734    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
298735    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
298736    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
298737    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
298738    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
298739    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
298740    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
298741    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
298742    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
298743    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 *
MntSweetProducts ;
298744    +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
298745    +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
298746    +   IF MISSING( MonthsAsCustomer ) THEN S_MonthsAsCustomer  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MonthsAsCustomer ) THEN S_MonthsAsCustomer = . ;
298747    +   ELSE S_MonthsAsCustomer  =    -4.93133031507839 +     0.05900664899872 *
298748    +        MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   ELSE S_MonthsAsCustomer = -4.93133031507839 + 0.05900664899872 *
MonthsAsCustomer ;
298749    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
298750    +   ELSE S_NumCatalogPurchases
298751    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
298752    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
298753    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
298754    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
298755    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
298756    +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
298757    +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
298758    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
298759    +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
298760    +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
298761    +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 *
NumStorePurchases ;
298762    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
298763    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
298764    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 *
NumWebPurchases ;
298765    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
298766    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
298767    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
298768    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
298769    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
298770    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
298771    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
298772    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
298773    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
298774    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
298775    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
298776    +END;
MPRINT(EM_DIAGRAM):   END;
298777    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298778    +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
298779    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298780    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298781    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
298782    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298783    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298784    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
298785    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
298786    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
298787    +   H11  =    -0.57767711260067 * S_AcceptedCmpTotal  +    -0.24565202115681 *
298788    +        S_Age  +     0.28237167938814 * S_Frq  +    -0.14233074057941 *
298789    +        S_Income  +    -0.48552270697514 * S_Kidhome
298790    +          +     0.01742868253924 * S_Mnt  +     0.40285078623388 *
298791    +        S_MntFishProducts  +    -0.05908477313283 * S_MntFruits
298792    +          +    -0.22243233697782 * S_MntGoldProds  +    -1.17693779318926 *
298793    +        S_MntMeatProducts  +     0.01461501397476 * S_MntSweetProducts
298794    +          +     0.39575970251622 * S_MntWines  +     0.09444807481214 *
298795    +        S_MonthsAsCustomer  +    -0.53872641456476 * S_NumCatalogPurchases
298796    +          +    -0.23083265836869 * S_NumDealsPurchases
298797    +          +     0.18257445063797 * S_NumDistPurchases
298798    +          +     0.38040778765927 * S_NumStorePurchases
298799    +          +     0.25798779223068 * S_NumWebPurchases
298800    +          +    -0.11407865954525 * S_NumWebVisitsMonth
298801    +          +    -0.27830792997478 * S_RFMstat  +    -0.16107125268737 *
298802    +        S_RMntFrq  +     0.39037056980062 * S_Recency
298803    +          +     0.40608185739512 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = -0.57767711260067 * S_AcceptedCmpTotal + -0.24565202115681 * S_Age
+ 0.28237167938814 * S_Frq + -0.14233074057941 * S_Income + -0.48552270697514 * S_Kidhome +
0.01742868253924 * S_Mnt + 0.40285078623388 * S_MntFishProducts + -0.05908477313283 *
S_MntFruits + -0.22243233697782 * S_MntGoldProds + -1.17693779318926 * S_MntMeatProducts +
0.01461501397476 * S_MntSweetProducts + 0.39575970251622 * S_MntWines + 0.09444807481214 *
S_MonthsAsCustomer + -0.53872641456476 * S_NumCatalogPurchases + -0.23083265836869 *
S_NumDealsPurchases + 0.18257445063797 * S_NumDistPurchases + 0.38040778765927 *
S_NumStorePurchases + 0.25798779223068 * S_NumWebPurchases + -0.11407865954525 *
S_NumWebVisitsMonth + -0.27830792997478 * S_RFMstat + -0.16107125268737 * S_RMntFrq +
0.39037056980062 * S_Recency + 0.40608185739512 * S_Teenhome ;
298804    +   H12  =    -0.34424851582147 * S_AcceptedCmpTotal  +     0.13660525926359 *
298805    +        S_Age  +     0.23405883754868 * S_Frq  +    -0.13337059355005 *
298806    +        S_Income  +     0.23694585796773 * S_Kidhome
298807    +          +      0.4901632038269 * S_Mnt  +     0.05999578465889 *
298808    +        S_MntFishProducts  +     0.03082414442522 * S_MntFruits
298809    +          +    -0.24918186130548 * S_MntGoldProds  +    -0.88501518933423 *
298810    +        S_MntMeatProducts  +     0.12858064823466 * S_MntSweetProducts
298811    +          +     0.64920006983604 * S_MntWines  +     0.24344238362884 *
298812    +        S_MonthsAsCustomer  +    -0.13156200891896 * S_NumCatalogPurchases
298813    +          +    -0.07783411363525 * S_NumDealsPurchases
298814    +          +     0.41281579441285 * S_NumDistPurchases
298815    +          +     0.22243606867939 * S_NumStorePurchases
298816    +          +     0.27174952755013 * S_NumWebPurchases
298817    +          +    -0.60083819502794 * S_NumWebVisitsMonth
298818    +          +    -0.13817336671298 * S_RFMstat  +      0.3324108445191 *
298819    +        S_RMntFrq  +     0.36081297418321 * S_Recency
298820    +          +     0.22032899481074 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = -0.34424851582147 * S_AcceptedCmpTotal + 0.13660525926359 * S_Age
+ 0.23405883754868 * S_Frq + -0.13337059355005 * S_Income + 0.23694585796773 * S_Kidhome +
0.4901632038269 * S_Mnt + 0.05999578465889 * S_MntFishProducts + 0.03082414442522 *
S_MntFruits + -0.24918186130548 * S_MntGoldProds + -0.88501518933423 * S_MntMeatProducts +
0.12858064823466 * S_MntSweetProducts + 0.64920006983604 * S_MntWines + 0.24344238362884 *
S_MonthsAsCustomer + -0.13156200891896 * S_NumCatalogPurchases + -0.07783411363525 *
S_NumDealsPurchases + 0.41281579441285 * S_NumDistPurchases + 0.22243606867939 *
S_NumStorePurchases + 0.27174952755013 * S_NumWebPurchases + -0.60083819502794 *
S_NumWebVisitsMonth + -0.13817336671298 * S_RFMstat + 0.3324108445191 * S_RMntFrq +
0.36081297418321 * S_Recency + 0.22032899481074 * S_Teenhome ;
298821    +   H13  =    -0.62755413066471 * S_AcceptedCmpTotal  +    -0.10259881548923 *
298822    +        S_Age  +     0.04904692713298 * S_Frq  +    -0.23224576059777 *
298823    +        S_Income  +     0.20802765248799 * S_Kidhome
298824    +          +    -0.15268411625244 * S_Mnt  +    -0.48987569059027 *
298825    +        S_MntFishProducts  +    -0.14244239893529 * S_MntFruits
298826    +          +     0.10351032202518 * S_MntGoldProds  +     0.32573653231071 *
298827    +        S_MntMeatProducts  +     -0.3175031724236 * S_MntSweetProducts
298828    +          +     0.03692571780893 * S_MntWines  +     0.04373598871023 *
298829    +        S_MonthsAsCustomer  +     0.02008637671067 * S_NumCatalogPurchases
298830    +          +     0.09455783738093 * S_NumDealsPurchases
298831    +          +    -0.06039304909585 * S_NumDistPurchases
298832    +          +    -0.10306611685636 * S_NumStorePurchases
298833    +          +    -0.00323837049664 * S_NumWebPurchases
298834    +          +    -0.02899441658685 * S_NumWebVisitsMonth
298835    +          +    -0.19007543493775 * S_RFMstat  +     -0.0760616923089 *
298836    +        S_RMntFrq  +    -0.10387156664208 * S_Recency
298837    +          +     0.07932105576904 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.62755413066471 * S_AcceptedCmpTotal + -0.10259881548923 * S_Age
+ 0.04904692713298 * S_Frq + -0.23224576059777 * S_Income + 0.20802765248799 * S_Kidhome +
-0.15268411625244 * S_Mnt + -0.48987569059027 * S_MntFishProducts + -0.14244239893529 *
S_MntFruits + 0.10351032202518 * S_MntGoldProds + 0.32573653231071 * S_MntMeatProducts +
-0.3175031724236 * S_MntSweetProducts + 0.03692571780893 * S_MntWines + 0.04373598871023 *
S_MonthsAsCustomer + 0.02008637671067 * S_NumCatalogPurchases + 0.09455783738093 *
S_NumDealsPurchases + -0.06039304909585 * S_NumDistPurchases + -0.10306611685636 *
S_NumStorePurchases + -0.00323837049664 * S_NumWebPurchases + -0.02899441658685 *
S_NumWebVisitsMonth + -0.19007543493775 * S_RFMstat + -0.0760616923089 * S_RMntFrq +
-0.10387156664208 * S_Recency + 0.07932105576904 * S_Teenhome ;
298838    +   H14  =     0.59804906125706 * S_AcceptedCmpTotal  +       0.048025485549 *
298839    +        S_Age  +      0.2385514201746 * S_Frq  +     0.08479106864241 *
298840    +        S_Income  +     0.26381864865425 * S_Kidhome
298841    +          +     0.28889342773086 * S_Mnt  +    -0.21694370369651 *
298842    +        S_MntFishProducts  +    -0.01726780576394 * S_MntFruits
298843    +          +    -0.03596803527884 * S_MntGoldProds  +     2.02178262606311 *
298844    +        S_MntMeatProducts  +     0.28631958927098 * S_MntSweetProducts
298845    +          +    -0.70527934035036 * S_MntWines  +      0.0067588579357 *
298846    +        S_MonthsAsCustomer  +     1.79201675789091 * S_NumCatalogPurchases
298847    +          +      0.8306613243419 * S_NumDealsPurchases
298848    +          +     0.31439474207278 * S_NumDistPurchases
298849    +          +    -0.62131474975756 * S_NumStorePurchases
298850    +          +    -1.04845843654047 * S_NumWebPurchases
298851    +          +     0.13255915506164 * S_NumWebVisitsMonth
298852    +          +     0.37283745370069 * S_RFMstat  +    -0.00709301508027 *
298853    +        S_RMntFrq  +    -0.38407240508995 * S_Recency
298854    +          +    -0.01872338760754 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = 0.59804906125706 * S_AcceptedCmpTotal + 0.048025485549 * S_Age +
0.2385514201746 * S_Frq + 0.08479106864241 * S_Income + 0.26381864865425 * S_Kidhome +
0.28889342773086 * S_Mnt + -0.21694370369651 * S_MntFishProducts + -0.01726780576394 *
S_MntFruits + -0.03596803527884 * S_MntGoldProds + 2.02178262606311 * S_MntMeatProducts +
0.28631958927098 * S_MntSweetProducts + -0.70527934035036 * S_MntWines + 0.0067588579357 *
S_MonthsAsCustomer + 1.79201675789091 * S_NumCatalogPurchases + 0.8306613243419 *
S_NumDealsPurchases + 0.31439474207278 * S_NumDistPurchases + -0.62131474975756 *
S_NumStorePurchases + -1.04845843654047 * S_NumWebPurchases + 0.13255915506164 *
S_NumWebVisitsMonth + 0.37283745370069 * S_RFMstat + -0.00709301508027 * S_RMntFrq +
-0.38407240508995 * S_Recency + -0.01872338760754 * S_Teenhome ;
298855    +   H15  =     0.52947177432466 * S_AcceptedCmpTotal  +    -0.03040503223875 *
298856    +        S_Age  +    -0.18793482590486 * S_Frq  +      0.6935756549022 *
298857    +        S_Income  +    -0.71599192201946 * S_Kidhome
298858    +          +     0.07961196010588 * S_Mnt  +     0.08170851848499 *
298859    +        S_MntFishProducts  +    -0.09701911126913 * S_MntFruits
298860    +          +    -0.10391699524462 * S_MntGoldProds  +     0.90380593073375 *
298861    +        S_MntMeatProducts  +    -0.04455643318364 * S_MntSweetProducts
298862    +          +    -0.40964982046114 * S_MntWines  +     0.01724114428235 *
298863    +        S_MonthsAsCustomer  +     0.68455913387131 * S_NumCatalogPurchases
298864    +          +     0.63537278643623 * S_NumDealsPurchases
298865    +          +     0.00410348485264 * S_NumDistPurchases
298866    +          +    -0.78287523583925 * S_NumStorePurchases
298867    +          +    -0.73614491225189 * S_NumWebPurchases
298868    +          +      1.5997596522354 * S_NumWebVisitsMonth
298869    +          +     0.06183649633006 * S_RFMstat  +    -0.50480588353928 *
298870    +        S_RMntFrq  +    -1.33062648259706 * S_Recency
298871    +          +    -0.30553409454465 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = 0.52947177432466 * S_AcceptedCmpTotal + -0.03040503223875 * S_Age
+ -0.18793482590486 * S_Frq + 0.6935756549022 * S_Income + -0.71599192201946 * S_Kidhome +
0.07961196010588 * S_Mnt + 0.08170851848499 * S_MntFishProducts + -0.09701911126913 *
S_MntFruits + -0.10391699524462 * S_MntGoldProds + 0.90380593073375 * S_MntMeatProducts +
-0.04455643318364 * S_MntSweetProducts + -0.40964982046114 * S_MntWines + 0.01724114428235 *
S_MonthsAsCustomer + 0.68455913387131 * S_NumCatalogPurchases + 0.63537278643623 *
S_NumDealsPurchases + 0.00410348485264 * S_NumDistPurchases + -0.78287523583925 *
S_NumStorePurchases + -0.73614491225189 * S_NumWebPurchases + 1.5997596522354 *
S_NumWebVisitsMonth + 0.06183649633006 * S_RFMstat + -0.50480588353928 * S_RMntFrq +
-1.33062648259706 * S_Recency + -0.30553409454465 * S_Teenhome ;
298872    +   H16  =    -0.14433986599972 * S_AcceptedCmpTotal  +     0.33628191767642 *
298873    +        S_Age  +     0.24327822994895 * S_Frq  +      0.2593103121451 *
298874    +        S_Income  +    -0.23853377939411 * S_Kidhome
298875    +          +     0.01602761388094 * S_Mnt  +    -0.02328787783663 *
298876    +        S_MntFishProducts  +     0.00968922234423 * S_MntFruits
298877    +          +     0.11007108230683 * S_MntGoldProds  +    -0.08340432424598 *
298878    +        S_MntMeatProducts  +    -0.15484304103951 * S_MntSweetProducts
298879    +          +    -0.29018175577267 * S_MntWines  +      0.1806827453054 *
298880    +        S_MonthsAsCustomer  +     0.22550821879825 * S_NumCatalogPurchases
298881    +          +    -0.30899603957269 * S_NumDealsPurchases
298882    +          +     0.11839581082877 * S_NumDistPurchases
298883    +          +     0.20149797391098 * S_NumStorePurchases
298884    +          +      0.1616654107491 * S_NumWebPurchases
298885    +          +    -0.19271225686551 * S_NumWebVisitsMonth
298886    +          +    -0.21711023135071 * S_RFMstat  +    -0.09549242746094 *
298887    +        S_RMntFrq  +     0.01047910170627 * S_Recency
298888    +          +     -0.3020815550654 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H16 = -0.14433986599972 * S_AcceptedCmpTotal + 0.33628191767642 * S_Age
+ 0.24327822994895 * S_Frq + 0.2593103121451 * S_Income + -0.23853377939411 * S_Kidhome +
0.01602761388094 * S_Mnt + -0.02328787783663 * S_MntFishProducts + 0.00968922234423 *
S_MntFruits + 0.11007108230683 * S_MntGoldProds + -0.08340432424598 * S_MntMeatProducts +
-0.15484304103951 * S_MntSweetProducts + -0.29018175577267 * S_MntWines + 0.1806827453054 *
S_MonthsAsCustomer + 0.22550821879825 * S_NumCatalogPurchases + -0.30899603957269 *
S_NumDealsPurchases + 0.11839581082877 * S_NumDistPurchases + 0.20149797391098 *
S_NumStorePurchases + 0.1616654107491 * S_NumWebPurchases + -0.19271225686551 *
S_NumWebVisitsMonth + -0.21711023135071 * S_RFMstat + -0.09549242746094 * S_RMntFrq +
0.01047910170627 * S_Recency + -0.3020815550654 * S_Teenhome ;
298889    +   H17  =     0.16650809883276 * S_AcceptedCmpTotal  +    -0.11521097834811 *
298890    +        S_Age  +     0.03152846916741 * S_Frq  +     0.40983774195025 *
298891    +        S_Income  +    -0.48650790963695 * S_Kidhome
298892    +          +        0.11225072991 * S_Mnt  +    -0.28542831709139 *
298893    +        S_MntFishProducts  +    -0.08029856004002 * S_MntFruits
298894    +          +     0.10583838856319 * S_MntGoldProds  +     -0.0290614813393 *
298895    +        S_MntMeatProducts  +    -0.01096619652537 * S_MntSweetProducts
298896    +          +     0.04262480980522 * S_MntWines  +    -0.11669432787059 *
298897    +        S_MonthsAsCustomer  +     0.33955671970437 * S_NumCatalogPurchases
298898    +          +    -0.18889005468777 * S_NumDealsPurchases
298899    +          +     0.17240918361456 * S_NumDistPurchases
298900    +          +     0.11704610685994 * S_NumStorePurchases
298901    +          +     0.23031393640508 * S_NumWebPurchases
298902    +          +     0.66002859819524 * S_NumWebVisitsMonth
298903    +          +     0.10481676703972 * S_RFMstat  +     0.11650152002645 *
298904    +        S_RMntFrq  +    -1.13361206334881 * S_Recency
298905    +          +    -0.49528314963169 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H17 = 0.16650809883276 * S_AcceptedCmpTotal + -0.11521097834811 * S_Age
+ 0.03152846916741 * S_Frq + 0.40983774195025 * S_Income + -0.48650790963695 * S_Kidhome +
0.11225072991 * S_Mnt + -0.28542831709139 * S_MntFishProducts + -0.08029856004002 *
S_MntFruits + 0.10583838856319 * S_MntGoldProds + -0.0290614813393 * S_MntMeatProducts +
-0.01096619652537 * S_MntSweetProducts + 0.04262480980522 * S_MntWines + -0.11669432787059 *
S_MonthsAsCustomer + 0.33955671970437 * S_NumCatalogPurchases + -0.18889005468777 *
S_NumDealsPurchases + 0.17240918361456 * S_NumDistPurchases + 0.11704610685994 *
S_NumStorePurchases + 0.23031393640508 * S_NumWebPurchases + 0.66002859819524 *
S_NumWebVisitsMonth + 0.10481676703972 * S_RFMstat + 0.11650152002645 * S_RMntFrq +
-1.13361206334881 * S_Recency + -0.49528314963169 * S_Teenhome ;
298906    +   H11  = H11  +     0.13446791078699 * AcceptedCmp10
298907    +          +     0.04429639307375 * AcceptedCmp20  +    -0.13028621637792 *
298908    +        AcceptedCmp30  +    -0.11510727830726 * AcceptedCmp40
298909    +          +     0.07003922045545 * AcceptedCmp50  +    -0.27409707884649 *
298910    +        Complain0  +    -0.02797941377984 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.13446791078699 * AcceptedCmp10 + 0.04429639307375 *
AcceptedCmp20 + -0.13028621637792 * AcceptedCmp30 + -0.11510727830726 * AcceptedCmp40 +
0.07003922045545 * AcceptedCmp50 + -0.27409707884649 * Complain0 + -0.02797941377984 *
HigherEducationBinary0 ;
298911    +   H12  = H12  +     0.01887281842523 * AcceptedCmp10
298912    +          +     0.17827111339959 * AcceptedCmp20  +      0.3834139334955 *
298913    +        AcceptedCmp30  +    -0.35411645339173 * AcceptedCmp40
298914    +          +      0.3826012381491 * AcceptedCmp50  +    -0.04061443041339 *
298915    +        Complain0  +    -0.39126131137052 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.01887281842523 * AcceptedCmp10 + 0.17827111339959 *
AcceptedCmp20 + 0.3834139334955 * AcceptedCmp30 + -0.35411645339173 * AcceptedCmp40 +
0.3826012381491 * AcceptedCmp50 + -0.04061443041339 * Complain0 + -0.39126131137052 *
HigherEducationBinary0 ;
298916    +   H13  = H13  +    -0.22268259643926 * AcceptedCmp10
298917    +          +     0.06118190510274 * AcceptedCmp20  +    -0.03457087111822 *
298918    +        AcceptedCmp30  +    -0.25288986318995 * AcceptedCmp40
298919    +          +    -0.04364508506974 * AcceptedCmp50  +     0.04941913394343 *
298920    +        Complain0  +    -0.02882050630994 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.22268259643926 * AcceptedCmp10 + 0.06118190510274 *
AcceptedCmp20 + -0.03457087111822 * AcceptedCmp30 + -0.25288986318995 * AcceptedCmp40 +
-0.04364508506974 * AcceptedCmp50 + 0.04941913394343 * Complain0 + -0.02882050630994 *
HigherEducationBinary0 ;
298921    +   H14  = H14  +    -0.32915676878874 * AcceptedCmp10
298922    +          +    -0.10336607872934 * AcceptedCmp20  +      0.1864520200397 *
298923    +        AcceptedCmp30  +      0.2697012880513 * AcceptedCmp40
298924    +          +    -0.09721530691585 * AcceptedCmp50  +     0.08632814308981 *
298925    +        Complain0  +    -0.04468927647522 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.32915676878874 * AcceptedCmp10 + -0.10336607872934 *
AcceptedCmp20 + 0.1864520200397 * AcceptedCmp30 + 0.2697012880513 * AcceptedCmp40 +
-0.09721530691585 * AcceptedCmp50 + 0.08632814308981 * Complain0 + -0.04468927647522 *
HigherEducationBinary0 ;
298926    +   H15  = H15  +    -0.25850522391607 * AcceptedCmp10
298927    +          +    -0.17803227567502 * AcceptedCmp20  +     -0.1568149803523 *
298928    +        AcceptedCmp30  +    -0.36395079518876 * AcceptedCmp40
298929    +          +    -0.34483131403759 * AcceptedCmp50  +     0.01555003563174 *
298930    +        Complain0  +    -0.28594415027284 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.25850522391607 * AcceptedCmp10 + -0.17803227567502 *
AcceptedCmp20 + -0.1568149803523 * AcceptedCmp30 + -0.36395079518876 * AcceptedCmp40 +
-0.34483131403759 * AcceptedCmp50 + 0.01555003563174 * Complain0 + -0.28594415027284 *
HigherEducationBinary0 ;
298931    +   H16  = H16  +     0.01397091810403 * AcceptedCmp10
298932    +          +      0.0463641834644 * AcceptedCmp20  +    -0.03977784328807 *
298933    +        AcceptedCmp30  +     -0.0160913549772 * AcceptedCmp40
298934    +          +    -0.07333292395504 * AcceptedCmp50  +    -0.06469674138589 *
298935    +        Complain0  +     0.23688207596397 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.01397091810403 * AcceptedCmp10 + 0.0463641834644 *
AcceptedCmp20 + -0.03977784328807 * AcceptedCmp30 + -0.0160913549772 * AcceptedCmp40 +
-0.07333292395504 * AcceptedCmp50 + -0.06469674138589 * Complain0 + 0.23688207596397 *
HigherEducationBinary0 ;
298936    +   H17  = H17  +     0.01442797851067 * AcceptedCmp10
298937    +          +    -0.17701474731803 * AcceptedCmp20  +    -0.28388805248716 *
298938    +        AcceptedCmp30  +    -0.27327948779158 * AcceptedCmp40
298939    +          +    -0.13168193470011 * AcceptedCmp50  +    -0.14127010572854 *
298940    +        Complain0  +     0.33010560570117 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.01442797851067 * AcceptedCmp10 + -0.17701474731803 *
AcceptedCmp20 + -0.28388805248716 * AcceptedCmp30 + -0.27327948779158 * AcceptedCmp40 +
-0.13168193470011 * AcceptedCmp50 + -0.14127010572854 * Complain0 + 0.33010560570117 *
HigherEducationBinary0 ;
298941    +   H11  = H11  +     0.06224136252276 * Education2n_Cycle
298942    +          +     0.29245093750846 * EducationBasic  +     0.31778509227349 *
298943    +        EducationGraduation  +     0.02842294928395 * EducationMaster
298944    +          +     0.43452164349556 * Marital_StatusDivorced
298945    +          +    -0.46042593279944 * Marital_StatusMarried
298946    +          +     0.45533323427801 * Marital_StatusSingle
298947    +          +    -0.35509352048115 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.06224136252276 * Education2n_Cycle + 0.29245093750846 *
EducationBasic + 0.31778509227349 * EducationGraduation + 0.02842294928395 * EducationMaster +
0.43452164349556 * Marital_StatusDivorced + -0.46042593279944 * Marital_StatusMarried +
0.45533323427801 * Marital_StatusSingle + -0.35509352048115 * Marital_StatusTogether ;
298948    +   H12  = H12  +    -0.15299990287677 * Education2n_Cycle
298949    +          +     0.02656890344215 * EducationBasic  +    -0.05706986878494 *
298950    +        EducationGraduation  +     0.29768497071806 * EducationMaster
298951    +          +     0.11002244687305 * Marital_StatusDivorced
298952    +          +     0.52424349905683 * Marital_StatusMarried
298953    +          +     -0.3969250366321 * Marital_StatusSingle
298954    +          +     0.61408135981641 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.15299990287677 * Education2n_Cycle + 0.02656890344215 *
EducationBasic + -0.05706986878494 * EducationGraduation + 0.29768497071806 * EducationMaster
+ 0.11002244687305 * Marital_StatusDivorced + 0.52424349905683 * Marital_StatusMarried +
-0.3969250366321 * Marital_StatusSingle + 0.61408135981641 * Marital_StatusTogether ;
298955    +   H13  = H13  +     0.07276942595416 * Education2n_Cycle
298956    +          +      0.2275172950841 * EducationBasic  +     -0.0976909406084 *
298957    +        EducationGraduation  +     0.19833004850974 * EducationMaster
298958    +          +    -0.05300704180744 * Marital_StatusDivorced
298959    +          +     0.07805487103106 * Marital_StatusMarried
298960    +          +     0.20033339442958 * Marital_StatusSingle
298961    +          +     0.21842395296443 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.07276942595416 * Education2n_Cycle + 0.2275172950841 *
EducationBasic + -0.0976909406084 * EducationGraduation + 0.19833004850974 * EducationMaster +
-0.05300704180744 * Marital_StatusDivorced + 0.07805487103106 * Marital_StatusMarried +
0.20033339442958 * Marital_StatusSingle + 0.21842395296443 * Marital_StatusTogether ;
298962    +   H14  = H14  +    -0.17400384354577 * Education2n_Cycle
298963    +          +     0.11225346861296 * EducationBasic  +     -0.0442458725683 *
298964    +        EducationGraduation  +     0.29409181424889 * EducationMaster
298965    +          +    -0.42379596543146 * Marital_StatusDivorced
298966    +          +     0.66738351478416 * Marital_StatusMarried
298967    +          +    -0.37324277578462 * Marital_StatusSingle
298968    +          +     0.69171114809758 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.17400384354577 * Education2n_Cycle + 0.11225346861296 *
EducationBasic + -0.0442458725683 * EducationGraduation + 0.29409181424889 * EducationMaster +
-0.42379596543146 * Marital_StatusDivorced + 0.66738351478416 * Marital_StatusMarried +
-0.37324277578462 * Marital_StatusSingle + 0.69171114809758 * Marital_StatusTogether ;
298969    +   H15  = H15  +     0.14908434818686 * Education2n_Cycle
298970    +          +    -0.26880623082589 * EducationBasic  +     0.32861255886248 *
298971    +        EducationGraduation  +    -0.20061683006464 * EducationMaster
298972    +          +     0.88761025578489 * Marital_StatusDivorced
298973    +          +    -0.85905539883385 * Marital_StatusMarried
298974    +          +     0.73467737758558 * Marital_StatusSingle
298975    +          +    -0.96025981753604 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.14908434818686 * Education2n_Cycle + -0.26880623082589 *
EducationBasic + 0.32861255886248 * EducationGraduation + -0.20061683006464 * EducationMaster
+ 0.88761025578489 * Marital_StatusDivorced + -0.85905539883385 * Marital_StatusMarried +
0.73467737758558 * Marital_StatusSingle + -0.96025981753604 * Marital_StatusTogether ;
298976    +   H16  = H16  +     0.06300683576162 * Education2n_Cycle
298977    +          +    -0.33042090710562 * EducationBasic  +    -0.11648771701926 *
298978    +        EducationGraduation  +    -0.12214773396989 * EducationMaster
298979    +          +    -0.11980818075461 * Marital_StatusDivorced
298980    +          +    -0.16572953052582 * Marital_StatusMarried
298981    +          +     0.34617421331983 * Marital_StatusSingle
298982    +          +    -0.11159044098264 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.06300683576162 * Education2n_Cycle + -0.33042090710562 *
EducationBasic + -0.11648771701926 * EducationGraduation + -0.12214773396989 * EducationMaster
+ -0.11980818075461 * Marital_StatusDivorced + -0.16572953052582 * Marital_StatusMarried +
0.34617421331983 * Marital_StatusSingle + -0.11159044098264 * Marital_StatusTogether ;
298983    +   H17  = H17  +     0.01575681216702 * Education2n_Cycle
298984    +          +    -0.21038330244472 * EducationBasic  +    -0.13079470098556 *
298985    +        EducationGraduation  +    -0.08509814368676 * EducationMaster
298986    +          +     0.14874886057777 * Marital_StatusDivorced
298987    +          +     -1.0463076915992 * Marital_StatusMarried
298988    +          +     0.72937563672763 * Marital_StatusSingle
298989    +          +    -0.65508763277891 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.01575681216702 * Education2n_Cycle + -0.21038330244472 *
EducationBasic + -0.13079470098556 * EducationGraduation + -0.08509814368676 * EducationMaster
+ 0.14874886057777 * Marital_StatusDivorced + -1.0463076915992 * Marital_StatusMarried +
0.72937563672763 * Marital_StatusSingle + -0.65508763277891 * Marital_StatusTogether ;
298990    +   H11  =     0.01708225019201 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.01708225019201 + H11 ;
298991    +   H12  =    -0.57231824569332 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.57231824569332 + H12 ;
298992    +   H13  =    -1.03595775479654 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.03595775479654 + H13 ;
298993    +   H14  =     0.85578219568815 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.85578219568815 + H14 ;
298994    +   H15  =    -0.42875367789614 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.42875367789614 + H15 ;
298995    +   H16  =     -1.7731593212448 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.7731593212448 + H16 ;
298996    +   H17  =    -1.61118674590008 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = -1.61118674590008 + H17 ;
298997    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
298998    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
298999    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
299000    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
299001    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
299002    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
299003    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
299004    +END;
MPRINT(EM_DIAGRAM):   END;
299005    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
299006    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
299007    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
299008    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
299009    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
299010    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
299011    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
299012    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
299013    +END;
MPRINT(EM_DIAGRAM):   END;
299014    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299015    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
299016    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299017    +
299018    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
299019    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
299020    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
299021    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
299022    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
299023    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299024    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
299025    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
299026    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
299027    +end;
MPRINT(EM_DIAGRAM):   end;
299028    +else do;
MPRINT(EM_DIAGRAM):   else do;
299029    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
299030    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
299031    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
299032    +   end;
MPRINT(EM_DIAGRAM):   end;
299033    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
299034    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
299035    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
299036    +   end;
MPRINT(EM_DIAGRAM):   end;
299037    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299038    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
299039    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
299040    +   end;
MPRINT(EM_DIAGRAM):   end;
299041    +end;
MPRINT(EM_DIAGRAM):   end;
299042    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
299043    +   P_DepVar1  =    -1.64435097572782 * H11  +    -1.62763570310445 * H12
299044    +          +     0.35714449519239 * H13  +     3.29820395171258 * H14
299045    +          +     3.62007777753694 * H15  +     0.58503229487751 * H16
299046    +          +     2.19267705077374 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.64435097572782 * H11 + -1.62763570310445 * H12 +
0.35714449519239 * H13 + 3.29820395171258 * H14 + 3.62007777753694 * H15 + 0.58503229487751 *
H16 + 2.19267705077374 * H17 ;
299047    +   P_DepVar1  =    -2.18043832074058 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.18043832074058 + P_DepVar1 ;
299048    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
299049    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
299050    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
299051    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
299052    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
299053    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
299054    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
299055    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
299056    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
299057    +END;
MPRINT(EM_DIAGRAM):   END;
299058    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
299059    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
299060    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
299061    +END;
MPRINT(EM_DIAGRAM):   END;
299062    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
299063    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
299064    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
299065    +END;
MPRINT(EM_DIAGRAM):   END;
299066    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
299067    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
299068    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
299069    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
299070    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
299071    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
299072    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
299073    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299074    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
299075    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299076    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
299077    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
299078    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
299079    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
299080    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
299081    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
299082    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
299083    +END;
MPRINT(EM_DIAGRAM):   END;
299084    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
299085    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
299086    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
299087    +drop
299088    +H11
299089    +H12
299090    +H13
299091    +H14
299092    +H15
299093    +H16
299094    +H17
299095    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
299096    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
299097     run;
 
NOTE: DATA STEP view saved on file EMWS8.NEURAL10_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
299098     quit;
299099     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
299100     filename emflow
299100   ! "C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural10: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
299101     *------------------------------------------------------------*;
299102     * Neural10: Scoring VALIDATE data;
299103     *------------------------------------------------------------*;
299104     data EMWS8.Neural10_VALIDATE
299105     / view=EMWS8.Neural10_VALIDATE
299106     ;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_VALIDATE / view=EMWS8.Neural10_VALIDATE ;
299107     set EMWS8.Meta_VALIDATE
299108     ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta_VALIDATE ;
299109     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMFLOWSCORE.sas.
299110    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
299111    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
299112    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
299113    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
299114    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
299115    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
299116    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
299117    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
299118    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
299119    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
299120    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
299121    +LENGTH _WARN_ $4
299122    +      F_DepVar  $ 12
299123    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
299124    +      label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
MPRINT(EM_DIAGRAM):   label S_AcceptedCmpTotal = 'Standard: AcceptedCmpTotal' ;
299125    +
299126    +      label S_Age = 'Standard: Age' ;
MPRINT(EM_DIAGRAM):   label S_Age = 'Standard: Age' ;
299127    +
299128    +      label S_Frq = 'Standard: Frq' ;
MPRINT(EM_DIAGRAM):   label S_Frq = 'Standard: Frq' ;
299129    +
299130    +      label S_Income = 'Standard: Income' ;
MPRINT(EM_DIAGRAM):   label S_Income = 'Standard: Income' ;
299131    +
299132    +      label S_Kidhome = 'Standard: Kidhome' ;
MPRINT(EM_DIAGRAM):   label S_Kidhome = 'Standard: Kidhome' ;
299133    +
299134    +      label S_Mnt = 'Standard: Mnt' ;
MPRINT(EM_DIAGRAM):   label S_Mnt = 'Standard: Mnt' ;
299135    +
299136    +      label S_MntFishProducts = 'Standard: MntFishProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntFishProducts = 'Standard: MntFishProducts' ;
299137    +
299138    +      label S_MntFruits = 'Standard: MntFruits' ;
MPRINT(EM_DIAGRAM):   label S_MntFruits = 'Standard: MntFruits' ;
299139    +
299140    +      label S_MntGoldProds = 'Standard: MntGoldProds' ;
MPRINT(EM_DIAGRAM):   label S_MntGoldProds = 'Standard: MntGoldProds' ;
299141    +
299142    +      label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntMeatProducts = 'Standard: MntMeatProducts' ;
299143    +
299144    +      label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
MPRINT(EM_DIAGRAM):   label S_MntSweetProducts = 'Standard: MntSweetProducts' ;
299145    +
299146    +      label S_MntWines = 'Standard: MntWines' ;
MPRINT(EM_DIAGRAM):   label S_MntWines = 'Standard: MntWines' ;
299147    +
299148    +      label S_MonthsAsCustomer = 'Standard: MonthsAsCustomer' ;
MPRINT(EM_DIAGRAM):   label S_MonthsAsCustomer = 'Standard: MonthsAsCustomer' ;
299149    +
299150    +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
299151    +
299152    +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
299153    +
299154    +      label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDistPurchases = 'Standard: NumDistPurchases' ;
299155    +
299156    +      label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumStorePurchases = 'Standard: NumStorePurchases' ;
299157    +
299158    +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
299159    +
299160    +      label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
MPRINT(EM_DIAGRAM):   label S_NumWebVisitsMonth = 'Standard: NumWebVisitsMonth' ;
299161    +
299162    +      label S_RFMstat = 'Standard: RFMstat' ;
MPRINT(EM_DIAGRAM):   label S_RFMstat = 'Standard: RFMstat' ;
299163    +
299164    +      label S_RMntFrq = 'Standard: RMntFrq' ;
MPRINT(EM_DIAGRAM):   label S_RMntFrq = 'Standard: RMntFrq' ;
299165    +
299166    +      label S_Recency = 'Standard: Recency' ;
MPRINT(EM_DIAGRAM):   label S_Recency = 'Standard: Recency' ;
299167    +
299168    +      label S_Teenhome = 'Standard: Teenhome' ;
MPRINT(EM_DIAGRAM):   label S_Teenhome = 'Standard: Teenhome' ;
299169    +
299170    +      label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp10 = 'Dummy: AcceptedCmp1=0' ;
299171    +
299172    +      label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp20 = 'Dummy: AcceptedCmp2=0' ;
299173    +
299174    +      label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp30 = 'Dummy: AcceptedCmp3=0' ;
299175    +
299176    +      label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp40 = 'Dummy: AcceptedCmp4=0' ;
299177    +
299178    +      label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
MPRINT(EM_DIAGRAM):   label AcceptedCmp50 = 'Dummy: AcceptedCmp5=0' ;
299179    +
299180    +      label Complain0 = 'Dummy: Complain=0' ;
MPRINT(EM_DIAGRAM):   label Complain0 = 'Dummy: Complain=0' ;
299181    +
299182    +      label HigherEducationBinary0 = 'Dummy: HigherEducationBinary=0' ;
MPRINT(EM_DIAGRAM):   label HigherEducationBinary0 = 'Dummy: HigherEducationBinary=0' ;
299183    +
299184    +      label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
MPRINT(EM_DIAGRAM):   label Education2n_Cycle = 'Dummy: Education=2n Cycle' ;
299185    +
299186    +      label EducationBasic = 'Dummy: Education=Basic' ;
MPRINT(EM_DIAGRAM):   label EducationBasic = 'Dummy: Education=Basic' ;
299187    +
299188    +      label EducationGraduation = 'Dummy: Education=Graduation' ;
MPRINT(EM_DIAGRAM):   label EducationGraduation = 'Dummy: Education=Graduation' ;
299189    +
299190    +      label EducationMaster = 'Dummy: Education=Master' ;
MPRINT(EM_DIAGRAM):   label EducationMaster = 'Dummy: Education=Master' ;
299191    +
299192    +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
299193    +
299194    +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
299195    +
299196    +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
299197    +
299198    +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
299199    +
299200    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
299201    +
299202    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
299203    +
299204    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
299205    +
299206    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
299207    +
299208    +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
299209    +
299210    +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
299211    +
299212    +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
299213    +
299214    +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
299215    +
299216    +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
299217    +
299218    +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
299219    +
299220    +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
299221    +
299222    +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
299223    +
299224    +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
299225    +
299226    +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
299227    +
299228    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
299229    +
299230    +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
299231    +drop AcceptedCmp10 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp10 ;
299232    +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
299233    +   AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
299234    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299235    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299236    +end;
MPRINT(EM_DIAGRAM):   end;
299237    +else do;
MPRINT(EM_DIAGRAM):   else do;
299238    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
299239    +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
299240    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299241    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
299242    +      AcceptedCmp10 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = 1;
299243    +   end;
MPRINT(EM_DIAGRAM):   end;
299244    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
299245    +      AcceptedCmp10 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = -1;
299246    +   end;
MPRINT(EM_DIAGRAM):   end;
299247    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299248    +      AcceptedCmp10 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp10 = .;
299249    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299250    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299251    +   end;
MPRINT(EM_DIAGRAM):   end;
299252    +end;
MPRINT(EM_DIAGRAM):   end;
299253    +
299254    +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
299255    +drop AcceptedCmp20 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp20 ;
299256    +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
299257    +   AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
299258    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299259    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299260    +end;
MPRINT(EM_DIAGRAM):   end;
299261    +else do;
MPRINT(EM_DIAGRAM):   else do;
299262    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
299263    +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
299264    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299265    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
299266    +      AcceptedCmp20 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = 1;
299267    +   end;
MPRINT(EM_DIAGRAM):   end;
299268    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
299269    +      AcceptedCmp20 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = -1;
299270    +   end;
MPRINT(EM_DIAGRAM):   end;
299271    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299272    +      AcceptedCmp20 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp20 = .;
299273    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299274    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299275    +   end;
MPRINT(EM_DIAGRAM):   end;
299276    +end;
MPRINT(EM_DIAGRAM):   end;
299277    +
299278    +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
299279    +drop AcceptedCmp30 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp30 ;
299280    +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
299281    +   AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
299282    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299283    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299284    +end;
MPRINT(EM_DIAGRAM):   end;
299285    +else do;
MPRINT(EM_DIAGRAM):   else do;
299286    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
299287    +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
299288    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299289    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
299290    +      AcceptedCmp30 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = 1;
299291    +   end;
MPRINT(EM_DIAGRAM):   end;
299292    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
299293    +      AcceptedCmp30 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = -1;
299294    +   end;
MPRINT(EM_DIAGRAM):   end;
299295    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299296    +      AcceptedCmp30 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp30 = .;
299297    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299298    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299299    +   end;
MPRINT(EM_DIAGRAM):   end;
299300    +end;
MPRINT(EM_DIAGRAM):   end;
299301    +
299302    +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
299303    +drop AcceptedCmp40 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp40 ;
299304    +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
299305    +   AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
299306    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299307    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299308    +end;
MPRINT(EM_DIAGRAM):   end;
299309    +else do;
MPRINT(EM_DIAGRAM):   else do;
299310    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
299311    +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
299312    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299313    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
299314    +      AcceptedCmp40 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = 1;
299315    +   end;
MPRINT(EM_DIAGRAM):   end;
299316    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
299317    +      AcceptedCmp40 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = -1;
299318    +   end;
MPRINT(EM_DIAGRAM):   end;
299319    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299320    +      AcceptedCmp40 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp40 = .;
299321    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299322    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299323    +   end;
MPRINT(EM_DIAGRAM):   end;
299324    +end;
MPRINT(EM_DIAGRAM):   end;
299325    +
299326    +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
299327    +drop AcceptedCmp50 ;
MPRINT(EM_DIAGRAM):   drop AcceptedCmp50 ;
299328    +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
299329    +   AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
299330    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299331    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299332    +end;
MPRINT(EM_DIAGRAM):   end;
299333    +else do;
MPRINT(EM_DIAGRAM):   else do;
299334    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
299335    +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
299336    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299337    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
299338    +      AcceptedCmp50 = 1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = 1;
299339    +   end;
MPRINT(EM_DIAGRAM):   end;
299340    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
299341    +      AcceptedCmp50 = -1;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = -1;
299342    +   end;
MPRINT(EM_DIAGRAM):   end;
299343    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299344    +      AcceptedCmp50 = .;
MPRINT(EM_DIAGRAM):   AcceptedCmp50 = .;
299345    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299346    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299347    +   end;
MPRINT(EM_DIAGRAM):   end;
299348    +end;
MPRINT(EM_DIAGRAM):   end;
299349    +
299350    +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
299351    +drop Complain0 ;
MPRINT(EM_DIAGRAM):   drop Complain0 ;
299352    +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
299353    +   Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
299354    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299355    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299356    +end;
MPRINT(EM_DIAGRAM):   end;
299357    +else do;
MPRINT(EM_DIAGRAM):   else do;
299358    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
299359    +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
299360    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299361    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
299362    +      Complain0 = 1;
MPRINT(EM_DIAGRAM):   Complain0 = 1;
299363    +   end;
MPRINT(EM_DIAGRAM):   end;
299364    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
299365    +      Complain0 = -1;
MPRINT(EM_DIAGRAM):   Complain0 = -1;
299366    +   end;
MPRINT(EM_DIAGRAM):   end;
299367    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299368    +      Complain0 = .;
MPRINT(EM_DIAGRAM):   Complain0 = .;
299369    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299370    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299371    +   end;
MPRINT(EM_DIAGRAM):   end;
299372    +end;
MPRINT(EM_DIAGRAM):   end;
299373    +
299374    +*** Generate dummy variables for HigherEducationBinary ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HigherEducationBinary ;
299375    +drop HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   drop HigherEducationBinary0 ;
299376    +if missing( HigherEducationBinary ) then do;
MPRINT(EM_DIAGRAM):   if missing( HigherEducationBinary ) then do;
299377    +   HigherEducationBinary0 = .;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = .;
299378    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299379    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299380    +end;
MPRINT(EM_DIAGRAM):   end;
299381    +else do;
MPRINT(EM_DIAGRAM):   else do;
299382    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
299383    +   _dm12 = put( HigherEducationBinary , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( HigherEducationBinary , BEST12. );
299384    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299385    +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
299386    +      HigherEducationBinary0 = -1;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = -1;
299387    +   end;
MPRINT(EM_DIAGRAM):   end;
299388    +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
299389    +      HigherEducationBinary0 = 1;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = 1;
299390    +   end;
MPRINT(EM_DIAGRAM):   end;
299391    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299392    +      HigherEducationBinary0 = .;
MPRINT(EM_DIAGRAM):   HigherEducationBinary0 = .;
299393    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299394    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299395    +   end;
MPRINT(EM_DIAGRAM):   end;
299396    +end;
MPRINT(EM_DIAGRAM):   end;
299397    +
299398    +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
299399    +drop Education2n_Cycle EducationBasic EducationGraduation EducationMaster ;
MPRINT(EM_DIAGRAM):   drop Education2n_Cycle EducationBasic EducationGraduation
EducationMaster ;
299400    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
299401    +Education2n_Cycle = 0;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 0;
299402    +EducationBasic = 0;
MPRINT(EM_DIAGRAM):   EducationBasic = 0;
299403    +EducationGraduation = 0;
MPRINT(EM_DIAGRAM):   EducationGraduation = 0;
299404    +EducationMaster = 0;
MPRINT(EM_DIAGRAM):   EducationMaster = 0;
299405    +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
299406    +   Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
299407    +   EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
299408    +   EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
299409    +   EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
299410    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299411    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299412    +end;
MPRINT(EM_DIAGRAM):   end;
299413    +else do;
MPRINT(EM_DIAGRAM):   else do;
299414    +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
299415    +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
299416    +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299417    +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
299418    +      EducationGraduation = 1;
MPRINT(EM_DIAGRAM):   EducationGraduation = 1;
299419    +   end;
MPRINT(EM_DIAGRAM):   end;
299420    +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
299421    +      Education2n_Cycle = -1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = -1;
299422    +      EducationBasic = -1;
MPRINT(EM_DIAGRAM):   EducationBasic = -1;
299423    +      EducationGraduation = -1;
MPRINT(EM_DIAGRAM):   EducationGraduation = -1;
299424    +      EducationMaster = -1;
MPRINT(EM_DIAGRAM):   EducationMaster = -1;
299425    +   end;
MPRINT(EM_DIAGRAM):   end;
299426    +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
299427    +      EducationMaster = 1;
MPRINT(EM_DIAGRAM):   EducationMaster = 1;
299428    +   end;
MPRINT(EM_DIAGRAM):   end;
299429    +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
299430    +      Education2n_Cycle = 1;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = 1;
299431    +   end;
MPRINT(EM_DIAGRAM):   end;
299432    +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
299433    +      EducationBasic = 1;
MPRINT(EM_DIAGRAM):   EducationBasic = 1;
299434    +   end;
MPRINT(EM_DIAGRAM):   end;
299435    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299436    +      Education2n_Cycle = .;
MPRINT(EM_DIAGRAM):   Education2n_Cycle = .;
299437    +      EducationBasic = .;
MPRINT(EM_DIAGRAM):   EducationBasic = .;
299438    +      EducationGraduation = .;
MPRINT(EM_DIAGRAM):   EducationGraduation = .;
299439    +      EducationMaster = .;
MPRINT(EM_DIAGRAM):   EducationMaster = .;
299440    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299441    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299442    +   end;
MPRINT(EM_DIAGRAM):   end;
299443    +end;
MPRINT(EM_DIAGRAM):   end;
299444    +
299445    +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
299446    +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
299447    +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
299448    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
299449    +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
299450    +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
299451    +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
299452    +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
299453    +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
299454    +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
299455    +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
299456    +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
299457    +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
299458    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
299459    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299460    +end;
MPRINT(EM_DIAGRAM):   end;
299461    +else do;
MPRINT(EM_DIAGRAM):   else do;
299462    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
299463    +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
299464    +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299465    +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
299466    +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
299467    +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
299468    +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
299469    +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
299470    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
299471    +         end;
MPRINT(EM_DIAGRAM):   end;
299472    +         else do;
MPRINT(EM_DIAGRAM):   else do;
299473    +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
299474    +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
299475    +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
299476    +            end;
MPRINT(EM_DIAGRAM):   end;
299477    +         end;
MPRINT(EM_DIAGRAM):   end;
299478    +      end;
MPRINT(EM_DIAGRAM):   end;
299479    +      else do;
MPRINT(EM_DIAGRAM):   else do;
299480    +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
299481    +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
299482    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
299483    +         end;
MPRINT(EM_DIAGRAM):   end;
299484    +      end;
MPRINT(EM_DIAGRAM):   end;
299485    +   end;
MPRINT(EM_DIAGRAM):   end;
299486    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299487    +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
299488    +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
299489    +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
299490    +      end;
MPRINT(EM_DIAGRAM):   end;
299491    +      else do;
MPRINT(EM_DIAGRAM):   else do;
299492    +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
299493    +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
299494    +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
299495    +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
299496    +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
299497    +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
299498    +         end;
MPRINT(EM_DIAGRAM):   end;
299499    +      end;
MPRINT(EM_DIAGRAM):   end;
299500    +   end;
MPRINT(EM_DIAGRAM):   end;
299501    +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
299502    +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
299503    +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
299504    +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
299505    +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
299506    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
299507    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299508    +   end;
MPRINT(EM_DIAGRAM):   end;
299509    +end;
MPRINT(EM_DIAGRAM):   end;
299510    +
299511    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299512    +*** Checking missing input Interval
299513    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
299514    +
299515    +IF NMISS(
299516    +   AcceptedCmpTotal ,
299517    +   Age ,
299518    +   Frq ,
299519    +   Income ,
299520    +   Kidhome ,
299521    +   Mnt ,
299522    +   MntFishProducts ,
299523    +   MntFruits ,
299524    +   MntGoldProds ,
299525    +   MntMeatProducts ,
299526    +   MntSweetProducts ,
299527    +   MntWines ,
299528    +   MonthsAsCustomer ,
299529    +   NumCatalogPurchases ,
299530    +   NumDealsPurchases ,
299531    +   NumDistPurchases ,
299532    +   NumStorePurchases ,
299533    +   NumWebPurchases ,
299534    +   NumWebVisitsMonth ,
299535    +   RFMstat ,
299536    +   RMntFrq ,
299537    +   Recency ,
299538    +   Teenhome   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AcceptedCmpTotal , Age , Frq , Income , Kidhome , Mnt ,
MntFishProducts , MntFruits , MntGoldProds , MntMeatProducts , MntSweetProducts , MntWines ,
MonthsAsCustomer , NumCatalogPurchases , NumDealsPurchases , NumDistPurchases ,
NumStorePurchases , NumWebPurchases , NumWebVisitsMonth , RFMstat , RMntFrq , Recency ,
Teenhome ) THEN DO;
299539    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
299540    +
299541    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
299542    +END;
MPRINT(EM_DIAGRAM):   END;
299543    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299544    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
299545    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299546    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
299547    +   S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
299548    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
299549    +   S_Age  =    -3.91319138389466 +     0.08289609202857 * Age ;
MPRINT(EM_DIAGRAM):   S_Age = -3.91319138389466 + 0.08289609202857 * Age ;
299550    +   S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
299551    +   S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
299552    +   S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
299553    +   S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
299554    +   S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
299555    +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   S_MntFishProducts = -0.69884925989448 + 0.01914942799914 *
MntFishProducts ;
299556    +   S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits ;
MPRINT(EM_DIAGRAM):   S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
299557    +   S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
299558    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds ;
299559    +   S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
299560    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
299561    +   S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
299562    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 *
MntSweetProducts ;
299563    +   S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
299564    +   S_MonthsAsCustomer  =    -4.93133031507839 +     0.05900664899872 *
299565    +        MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   S_MonthsAsCustomer = -4.93133031507839 + 0.05900664899872 *
MonthsAsCustomer ;
299566    +   S_NumCatalogPurchases  =     -0.9539494374694 +     0.36073207463401 *
299567    +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
299568    +   S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
299569    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
299570    +   S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
299571    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
299572    +   S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
299573    +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 *
NumStorePurchases ;
299574    +   S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
299575    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 *
NumWebPurchases ;
299576    +   S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
299577    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
299578    +   S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
299579    +   S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
299580    +   S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
299581    +   S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
299582    +END;
MPRINT(EM_DIAGRAM):   END;
299583    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
299584    +   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AcceptedCmpTotal ) THEN S_AcceptedCmpTotal = . ;
299585    +   ELSE S_AcceptedCmpTotal  =    -0.46762909508827 +      1.4961610131261 *
299586    +        AcceptedCmpTotal ;
MPRINT(EM_DIAGRAM):   ELSE S_AcceptedCmpTotal = -0.46762909508827 + 1.4961610131261 *
AcceptedCmpTotal ;
299587    +   IF MISSING( Age ) THEN S_Age  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age ) THEN S_Age = . ;
299588    +   ELSE S_Age  =    -3.91319138389466 +     0.08289609202857 * Age ;
MPRINT(EM_DIAGRAM):   ELSE S_Age = -3.91319138389466 + 0.08289609202857 * Age ;
299589    +   IF MISSING( Frq ) THEN S_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Frq ) THEN S_Frq = . ;
299590    +   ELSE S_Frq  =     -1.7674482809159 +     0.13966853800993 * Frq ;
MPRINT(EM_DIAGRAM):   ELSE S_Frq = -1.7674482809159 + 0.13966853800993 * Frq ;
299591    +   IF MISSING( Income ) THEN S_Income  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Income ) THEN S_Income = . ;
299592    +   ELSE S_Income  =    -2.48883438787018 +     0.00004789669836 * Income ;
MPRINT(EM_DIAGRAM):   ELSE S_Income = -2.48883438787018 + 0.00004789669836 * Income ;
299593    +   IF MISSING( Kidhome ) THEN S_Kidhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Kidhome ) THEN S_Kidhome = . ;
299594    +   ELSE S_Kidhome  =    -0.81505958668041 +     1.87132636245581 * Kidhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Kidhome = -0.81505958668041 + 1.87132636245581 * Kidhome ;
299595    +   IF MISSING( Mnt ) THEN S_Mnt  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Mnt ) THEN S_Mnt = . ;
299596    +   ELSE S_Mnt  =    -1.01843471091398 +      0.0016541571108 * Mnt ;
MPRINT(EM_DIAGRAM):   ELSE S_Mnt = -1.01843471091398 + 0.0016541571108 * Mnt ;
299597    +   IF MISSING( MntFishProducts ) THEN S_MntFishProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFishProducts ) THEN S_MntFishProducts = . ;
299598    +   ELSE S_MntFishProducts  =    -0.69884925989448 +     0.01914942799914 *
299599    +        MntFishProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFishProducts = -0.69884925989448 + 0.01914942799914 *
MntFishProducts ;
299600    +   IF MISSING( MntFruits ) THEN S_MntFruits  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntFruits ) THEN S_MntFruits = . ;
299601    +   ELSE S_MntFruits  =    -0.68347542544545 +     0.02517057319714 * MntFruits
299602    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_MntFruits = -0.68347542544545 + 0.02517057319714 * MntFruits ;
299603    +   IF MISSING( MntGoldProds ) THEN S_MntGoldProds  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntGoldProds ) THEN S_MntGoldProds = . ;
299604    +   ELSE S_MntGoldProds  =     -0.8611213764608 +     0.01954474499711 *
299605    +        MntGoldProds ;
MPRINT(EM_DIAGRAM):   ELSE S_MntGoldProds = -0.8611213764608 + 0.01954474499711 * MntGoldProds
;
299606    +   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMeatProducts ) THEN S_MntMeatProducts = . ;
299607    +   ELSE S_MntMeatProducts  =    -0.78623193565931 +     0.00462584508746 *
299608    +        MntMeatProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMeatProducts = -0.78623193565931 + 0.00462584508746 *
MntMeatProducts ;
299609    +   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntSweetProducts ) THEN S_MntSweetProducts = . ;
299610    +   ELSE S_MntSweetProducts  =    -0.69020047720885 +     0.02548703406327 *
299611    +        MntSweetProducts ;
MPRINT(EM_DIAGRAM):   ELSE S_MntSweetProducts = -0.69020047720885 + 0.02548703406327 *
MntSweetProducts ;
299612    +   IF MISSING( MntWines ) THEN S_MntWines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntWines ) THEN S_MntWines = . ;
299613    +   ELSE S_MntWines  =    -0.90995945712571 +     0.00292658058326 * MntWines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntWines = -0.90995945712571 + 0.00292658058326 * MntWines ;
299614    +   IF MISSING( MonthsAsCustomer ) THEN S_MonthsAsCustomer  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MonthsAsCustomer ) THEN S_MonthsAsCustomer = . ;
299615    +   ELSE S_MonthsAsCustomer  =    -4.93133031507839 +     0.05900664899872 *
299616    +        MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   ELSE S_MonthsAsCustomer = -4.93133031507839 + 0.05900664899872 *
MonthsAsCustomer ;
299617    +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
299618    +   ELSE S_NumCatalogPurchases
299619    +          =     -0.9539494374694 +     0.36073207463401 * NumCatalogPurchases
299620    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -0.9539494374694 + 0.36073207463401 *
NumCatalogPurchases ;
299621    +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
299622    +   ELSE S_NumDealsPurchases  =    -1.34788949552081 +     0.59766336614987 *
299623    +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.34788949552081 + 0.59766336614987 *
NumDealsPurchases ;
299624    +   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDistPurchases ) THEN S_NumDistPurchases = . ;
299625    +   ELSE S_NumDistPurchases  =    -1.46347520602971 +     0.21729252230374 *
299626    +        NumDistPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDistPurchases = -1.46347520602971 + 0.21729252230374 *
NumDistPurchases ;
299627    +   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumStorePurchases ) THEN S_NumStorePurchases = . ;
299628    +   ELSE S_NumStorePurchases  =    -1.81825213465822 +     0.30716078899015 *
299629    +        NumStorePurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumStorePurchases = -1.81825213465822 + 0.30716078899015 *
NumStorePurchases ;
299630    +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
299631    +   ELSE S_NumWebPurchases  =    -1.56492430992034 +     0.38256928346729 *
299632    +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -1.56492430992034 + 0.38256928346729 *
NumWebPurchases ;
299633    +   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebVisitsMonth ) THEN S_NumWebVisitsMonth = . ;
299634    +   ELSE S_NumWebVisitsMonth  =    -2.24769875596018 +     0.42876953368015 *
299635    +        NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebVisitsMonth = -2.24769875596018 + 0.42876953368015 *
NumWebVisitsMonth ;
299636    +   IF MISSING( RFMstat ) THEN S_RFMstat  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RFMstat ) THEN S_RFMstat = . ;
299637    +   ELSE S_RFMstat  =    -0.33944380186973 +     0.00063877635032 * RFMstat ;
MPRINT(EM_DIAGRAM):   ELSE S_RFMstat = -0.33944380186973 + 0.00063877635032 * RFMstat ;
299638    +   IF MISSING( RMntFrq ) THEN S_RMntFrq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RMntFrq ) THEN S_RMntFrq = . ;
299639    +   ELSE S_RMntFrq  =    -1.25743573075922 +     0.03326204244626 * RMntFrq ;
MPRINT(EM_DIAGRAM):   ELSE S_RMntFrq = -1.25743573075922 + 0.03326204244626 * RMntFrq ;
299640    +   IF MISSING( Recency ) THEN S_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Recency ) THEN S_Recency = . ;
299641    +   ELSE S_Recency  =    -1.69222845719633 +     0.03469514083585 * Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_Recency = -1.69222845719633 + 0.03469514083585 * Recency ;
299642    +   IF MISSING( Teenhome ) THEN S_Teenhome  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Teenhome ) THEN S_Teenhome = . ;
299643    +   ELSE S_Teenhome  =    -0.88382230606631 +     1.81661831567223 * Teenhome ;
MPRINT(EM_DIAGRAM):   ELSE S_Teenhome = -0.88382230606631 + 1.81661831567223 * Teenhome ;
299644    +END;
MPRINT(EM_DIAGRAM):   END;
299645    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299646    +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
299647    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299648    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299649    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
299650    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299651    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299652    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
299653    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299654    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
299655    +   H11  =    -0.57767711260067 * S_AcceptedCmpTotal  +    -0.24565202115681 *
299656    +        S_Age  +     0.28237167938814 * S_Frq  +    -0.14233074057941 *
299657    +        S_Income  +    -0.48552270697514 * S_Kidhome
299658    +          +     0.01742868253924 * S_Mnt  +     0.40285078623388 *
299659    +        S_MntFishProducts  +    -0.05908477313283 * S_MntFruits
299660    +          +    -0.22243233697782 * S_MntGoldProds  +    -1.17693779318926 *
299661    +        S_MntMeatProducts  +     0.01461501397476 * S_MntSweetProducts
299662    +          +     0.39575970251622 * S_MntWines  +     0.09444807481214 *
299663    +        S_MonthsAsCustomer  +    -0.53872641456476 * S_NumCatalogPurchases
299664    +          +    -0.23083265836869 * S_NumDealsPurchases
299665    +          +     0.18257445063797 * S_NumDistPurchases
299666    +          +     0.38040778765927 * S_NumStorePurchases
299667    +          +     0.25798779223068 * S_NumWebPurchases
299668    +          +    -0.11407865954525 * S_NumWebVisitsMonth
299669    +          +    -0.27830792997478 * S_RFMstat  +    -0.16107125268737 *
299670    +        S_RMntFrq  +     0.39037056980062 * S_Recency
299671    +          +     0.40608185739512 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H11 = -0.57767711260067 * S_AcceptedCmpTotal + -0.24565202115681 * S_Age
+ 0.28237167938814 * S_Frq + -0.14233074057941 * S_Income + -0.48552270697514 * S_Kidhome +
0.01742868253924 * S_Mnt + 0.40285078623388 * S_MntFishProducts + -0.05908477313283 *
S_MntFruits + -0.22243233697782 * S_MntGoldProds + -1.17693779318926 * S_MntMeatProducts +
0.01461501397476 * S_MntSweetProducts + 0.39575970251622 * S_MntWines + 0.09444807481214 *
S_MonthsAsCustomer + -0.53872641456476 * S_NumCatalogPurchases + -0.23083265836869 *
S_NumDealsPurchases + 0.18257445063797 * S_NumDistPurchases + 0.38040778765927 *
S_NumStorePurchases + 0.25798779223068 * S_NumWebPurchases + -0.11407865954525 *
S_NumWebVisitsMonth + -0.27830792997478 * S_RFMstat + -0.16107125268737 * S_RMntFrq +
0.39037056980062 * S_Recency + 0.40608185739512 * S_Teenhome ;
299672    +   H12  =    -0.34424851582147 * S_AcceptedCmpTotal  +     0.13660525926359 *
299673    +        S_Age  +     0.23405883754868 * S_Frq  +    -0.13337059355005 *
299674    +        S_Income  +     0.23694585796773 * S_Kidhome
299675    +          +      0.4901632038269 * S_Mnt  +     0.05999578465889 *
299676    +        S_MntFishProducts  +     0.03082414442522 * S_MntFruits
299677    +          +    -0.24918186130548 * S_MntGoldProds  +    -0.88501518933423 *
299678    +        S_MntMeatProducts  +     0.12858064823466 * S_MntSweetProducts
299679    +          +     0.64920006983604 * S_MntWines  +     0.24344238362884 *
299680    +        S_MonthsAsCustomer  +    -0.13156200891896 * S_NumCatalogPurchases
299681    +          +    -0.07783411363525 * S_NumDealsPurchases
299682    +          +     0.41281579441285 * S_NumDistPurchases
299683    +          +     0.22243606867939 * S_NumStorePurchases
299684    +          +     0.27174952755013 * S_NumWebPurchases
299685    +          +    -0.60083819502794 * S_NumWebVisitsMonth
299686    +          +    -0.13817336671298 * S_RFMstat  +      0.3324108445191 *
299687    +        S_RMntFrq  +     0.36081297418321 * S_Recency
299688    +          +     0.22032899481074 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H12 = -0.34424851582147 * S_AcceptedCmpTotal + 0.13660525926359 * S_Age
+ 0.23405883754868 * S_Frq + -0.13337059355005 * S_Income + 0.23694585796773 * S_Kidhome +
0.4901632038269 * S_Mnt + 0.05999578465889 * S_MntFishProducts + 0.03082414442522 *
S_MntFruits + -0.24918186130548 * S_MntGoldProds + -0.88501518933423 * S_MntMeatProducts +
0.12858064823466 * S_MntSweetProducts + 0.64920006983604 * S_MntWines + 0.24344238362884 *
S_MonthsAsCustomer + -0.13156200891896 * S_NumCatalogPurchases + -0.07783411363525 *
S_NumDealsPurchases + 0.41281579441285 * S_NumDistPurchases + 0.22243606867939 *
S_NumStorePurchases + 0.27174952755013 * S_NumWebPurchases + -0.60083819502794 *
S_NumWebVisitsMonth + -0.13817336671298 * S_RFMstat + 0.3324108445191 * S_RMntFrq +
0.36081297418321 * S_Recency + 0.22032899481074 * S_Teenhome ;
299689    +   H13  =    -0.62755413066471 * S_AcceptedCmpTotal  +    -0.10259881548923 *
299690    +        S_Age  +     0.04904692713298 * S_Frq  +    -0.23224576059777 *
299691    +        S_Income  +     0.20802765248799 * S_Kidhome
299692    +          +    -0.15268411625244 * S_Mnt  +    -0.48987569059027 *
299693    +        S_MntFishProducts  +    -0.14244239893529 * S_MntFruits
299694    +          +     0.10351032202518 * S_MntGoldProds  +     0.32573653231071 *
299695    +        S_MntMeatProducts  +     -0.3175031724236 * S_MntSweetProducts
299696    +          +     0.03692571780893 * S_MntWines  +     0.04373598871023 *
299697    +        S_MonthsAsCustomer  +     0.02008637671067 * S_NumCatalogPurchases
299698    +          +     0.09455783738093 * S_NumDealsPurchases
299699    +          +    -0.06039304909585 * S_NumDistPurchases
299700    +          +    -0.10306611685636 * S_NumStorePurchases
299701    +          +    -0.00323837049664 * S_NumWebPurchases
299702    +          +    -0.02899441658685 * S_NumWebVisitsMonth
299703    +          +    -0.19007543493775 * S_RFMstat  +     -0.0760616923089 *
299704    +        S_RMntFrq  +    -0.10387156664208 * S_Recency
299705    +          +     0.07932105576904 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H13 = -0.62755413066471 * S_AcceptedCmpTotal + -0.10259881548923 * S_Age
+ 0.04904692713298 * S_Frq + -0.23224576059777 * S_Income + 0.20802765248799 * S_Kidhome +
-0.15268411625244 * S_Mnt + -0.48987569059027 * S_MntFishProducts + -0.14244239893529 *
S_MntFruits + 0.10351032202518 * S_MntGoldProds + 0.32573653231071 * S_MntMeatProducts +
-0.3175031724236 * S_MntSweetProducts + 0.03692571780893 * S_MntWines + 0.04373598871023 *
S_MonthsAsCustomer + 0.02008637671067 * S_NumCatalogPurchases + 0.09455783738093 *
S_NumDealsPurchases + -0.06039304909585 * S_NumDistPurchases + -0.10306611685636 *
S_NumStorePurchases + -0.00323837049664 * S_NumWebPurchases + -0.02899441658685 *
S_NumWebVisitsMonth + -0.19007543493775 * S_RFMstat + -0.0760616923089 * S_RMntFrq +
-0.10387156664208 * S_Recency + 0.07932105576904 * S_Teenhome ;
299706    +   H14  =     0.59804906125706 * S_AcceptedCmpTotal  +       0.048025485549 *
299707    +        S_Age  +      0.2385514201746 * S_Frq  +     0.08479106864241 *
299708    +        S_Income  +     0.26381864865425 * S_Kidhome
299709    +          +     0.28889342773086 * S_Mnt  +    -0.21694370369651 *
299710    +        S_MntFishProducts  +    -0.01726780576394 * S_MntFruits
299711    +          +    -0.03596803527884 * S_MntGoldProds  +     2.02178262606311 *
299712    +        S_MntMeatProducts  +     0.28631958927098 * S_MntSweetProducts
299713    +          +    -0.70527934035036 * S_MntWines  +      0.0067588579357 *
299714    +        S_MonthsAsCustomer  +     1.79201675789091 * S_NumCatalogPurchases
299715    +          +      0.8306613243419 * S_NumDealsPurchases
299716    +          +     0.31439474207278 * S_NumDistPurchases
299717    +          +    -0.62131474975756 * S_NumStorePurchases
299718    +          +    -1.04845843654047 * S_NumWebPurchases
299719    +          +     0.13255915506164 * S_NumWebVisitsMonth
299720    +          +     0.37283745370069 * S_RFMstat  +    -0.00709301508027 *
299721    +        S_RMntFrq  +    -0.38407240508995 * S_Recency
299722    +          +    -0.01872338760754 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H14 = 0.59804906125706 * S_AcceptedCmpTotal + 0.048025485549 * S_Age +
0.2385514201746 * S_Frq + 0.08479106864241 * S_Income + 0.26381864865425 * S_Kidhome +
0.28889342773086 * S_Mnt + -0.21694370369651 * S_MntFishProducts + -0.01726780576394 *
S_MntFruits + -0.03596803527884 * S_MntGoldProds + 2.02178262606311 * S_MntMeatProducts +
0.28631958927098 * S_MntSweetProducts + -0.70527934035036 * S_MntWines + 0.0067588579357 *
S_MonthsAsCustomer + 1.79201675789091 * S_NumCatalogPurchases + 0.8306613243419 *
S_NumDealsPurchases + 0.31439474207278 * S_NumDistPurchases + -0.62131474975756 *
S_NumStorePurchases + -1.04845843654047 * S_NumWebPurchases + 0.13255915506164 *
S_NumWebVisitsMonth + 0.37283745370069 * S_RFMstat + -0.00709301508027 * S_RMntFrq +
-0.38407240508995 * S_Recency + -0.01872338760754 * S_Teenhome ;
299723    +   H15  =     0.52947177432466 * S_AcceptedCmpTotal  +    -0.03040503223875 *
299724    +        S_Age  +    -0.18793482590486 * S_Frq  +      0.6935756549022 *
299725    +        S_Income  +    -0.71599192201946 * S_Kidhome
299726    +          +     0.07961196010588 * S_Mnt  +     0.08170851848499 *
299727    +        S_MntFishProducts  +    -0.09701911126913 * S_MntFruits
299728    +          +    -0.10391699524462 * S_MntGoldProds  +     0.90380593073375 *
299729    +        S_MntMeatProducts  +    -0.04455643318364 * S_MntSweetProducts
299730    +          +    -0.40964982046114 * S_MntWines  +     0.01724114428235 *
299731    +        S_MonthsAsCustomer  +     0.68455913387131 * S_NumCatalogPurchases
299732    +          +     0.63537278643623 * S_NumDealsPurchases
299733    +          +     0.00410348485264 * S_NumDistPurchases
299734    +          +    -0.78287523583925 * S_NumStorePurchases
299735    +          +    -0.73614491225189 * S_NumWebPurchases
299736    +          +      1.5997596522354 * S_NumWebVisitsMonth
299737    +          +     0.06183649633006 * S_RFMstat  +    -0.50480588353928 *
299738    +        S_RMntFrq  +    -1.33062648259706 * S_Recency
299739    +          +    -0.30553409454465 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H15 = 0.52947177432466 * S_AcceptedCmpTotal + -0.03040503223875 * S_Age
+ -0.18793482590486 * S_Frq + 0.6935756549022 * S_Income + -0.71599192201946 * S_Kidhome +
0.07961196010588 * S_Mnt + 0.08170851848499 * S_MntFishProducts + -0.09701911126913 *
S_MntFruits + -0.10391699524462 * S_MntGoldProds + 0.90380593073375 * S_MntMeatProducts +
-0.04455643318364 * S_MntSweetProducts + -0.40964982046114 * S_MntWines + 0.01724114428235 *
S_MonthsAsCustomer + 0.68455913387131 * S_NumCatalogPurchases + 0.63537278643623 *
S_NumDealsPurchases + 0.00410348485264 * S_NumDistPurchases + -0.78287523583925 *
S_NumStorePurchases + -0.73614491225189 * S_NumWebPurchases + 1.5997596522354 *
S_NumWebVisitsMonth + 0.06183649633006 * S_RFMstat + -0.50480588353928 * S_RMntFrq +
-1.33062648259706 * S_Recency + -0.30553409454465 * S_Teenhome ;
299740    +   H16  =    -0.14433986599972 * S_AcceptedCmpTotal  +     0.33628191767642 *
299741    +        S_Age  +     0.24327822994895 * S_Frq  +      0.2593103121451 *
299742    +        S_Income  +    -0.23853377939411 * S_Kidhome
299743    +          +     0.01602761388094 * S_Mnt  +    -0.02328787783663 *
299744    +        S_MntFishProducts  +     0.00968922234423 * S_MntFruits
299745    +          +     0.11007108230683 * S_MntGoldProds  +    -0.08340432424598 *
299746    +        S_MntMeatProducts  +    -0.15484304103951 * S_MntSweetProducts
299747    +          +    -0.29018175577267 * S_MntWines  +      0.1806827453054 *
299748    +        S_MonthsAsCustomer  +     0.22550821879825 * S_NumCatalogPurchases
299749    +          +    -0.30899603957269 * S_NumDealsPurchases
299750    +          +     0.11839581082877 * S_NumDistPurchases
299751    +          +     0.20149797391098 * S_NumStorePurchases
299752    +          +      0.1616654107491 * S_NumWebPurchases
299753    +          +    -0.19271225686551 * S_NumWebVisitsMonth
299754    +          +    -0.21711023135071 * S_RFMstat  +    -0.09549242746094 *
299755    +        S_RMntFrq  +     0.01047910170627 * S_Recency
299756    +          +     -0.3020815550654 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H16 = -0.14433986599972 * S_AcceptedCmpTotal + 0.33628191767642 * S_Age
+ 0.24327822994895 * S_Frq + 0.2593103121451 * S_Income + -0.23853377939411 * S_Kidhome +
0.01602761388094 * S_Mnt + -0.02328787783663 * S_MntFishProducts + 0.00968922234423 *
S_MntFruits + 0.11007108230683 * S_MntGoldProds + -0.08340432424598 * S_MntMeatProducts +
-0.15484304103951 * S_MntSweetProducts + -0.29018175577267 * S_MntWines + 0.1806827453054 *
S_MonthsAsCustomer + 0.22550821879825 * S_NumCatalogPurchases + -0.30899603957269 *
S_NumDealsPurchases + 0.11839581082877 * S_NumDistPurchases + 0.20149797391098 *
S_NumStorePurchases + 0.1616654107491 * S_NumWebPurchases + -0.19271225686551 *
S_NumWebVisitsMonth + -0.21711023135071 * S_RFMstat + -0.09549242746094 * S_RMntFrq +
0.01047910170627 * S_Recency + -0.3020815550654 * S_Teenhome ;
299757    +   H17  =     0.16650809883276 * S_AcceptedCmpTotal  +    -0.11521097834811 *
299758    +        S_Age  +     0.03152846916741 * S_Frq  +     0.40983774195025 *
299759    +        S_Income  +    -0.48650790963695 * S_Kidhome
299760    +          +        0.11225072991 * S_Mnt  +    -0.28542831709139 *
299761    +        S_MntFishProducts  +    -0.08029856004002 * S_MntFruits
299762    +          +     0.10583838856319 * S_MntGoldProds  +     -0.0290614813393 *
299763    +        S_MntMeatProducts  +    -0.01096619652537 * S_MntSweetProducts
299764    +          +     0.04262480980522 * S_MntWines  +    -0.11669432787059 *
299765    +        S_MonthsAsCustomer  +     0.33955671970437 * S_NumCatalogPurchases
299766    +          +    -0.18889005468777 * S_NumDealsPurchases
299767    +          +     0.17240918361456 * S_NumDistPurchases
299768    +          +     0.11704610685994 * S_NumStorePurchases
299769    +          +     0.23031393640508 * S_NumWebPurchases
299770    +          +     0.66002859819524 * S_NumWebVisitsMonth
299771    +          +     0.10481676703972 * S_RFMstat  +     0.11650152002645 *
299772    +        S_RMntFrq  +    -1.13361206334881 * S_Recency
299773    +          +    -0.49528314963169 * S_Teenhome ;
MPRINT(EM_DIAGRAM):   H17 = 0.16650809883276 * S_AcceptedCmpTotal + -0.11521097834811 * S_Age
+ 0.03152846916741 * S_Frq + 0.40983774195025 * S_Income + -0.48650790963695 * S_Kidhome +
0.11225072991 * S_Mnt + -0.28542831709139 * S_MntFishProducts + -0.08029856004002 *
S_MntFruits + 0.10583838856319 * S_MntGoldProds + -0.0290614813393 * S_MntMeatProducts +
-0.01096619652537 * S_MntSweetProducts + 0.04262480980522 * S_MntWines + -0.11669432787059 *
S_MonthsAsCustomer + 0.33955671970437 * S_NumCatalogPurchases + -0.18889005468777 *
S_NumDealsPurchases + 0.17240918361456 * S_NumDistPurchases + 0.11704610685994 *
S_NumStorePurchases + 0.23031393640508 * S_NumWebPurchases + 0.66002859819524 *
S_NumWebVisitsMonth + 0.10481676703972 * S_RFMstat + 0.11650152002645 * S_RMntFrq +
-1.13361206334881 * S_Recency + -0.49528314963169 * S_Teenhome ;
299774    +   H11  = H11  +     0.13446791078699 * AcceptedCmp10
299775    +          +     0.04429639307375 * AcceptedCmp20  +    -0.13028621637792 *
299776    +        AcceptedCmp30  +    -0.11510727830726 * AcceptedCmp40
299777    +          +     0.07003922045545 * AcceptedCmp50  +    -0.27409707884649 *
299778    +        Complain0  +    -0.02797941377984 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.13446791078699 * AcceptedCmp10 + 0.04429639307375 *
AcceptedCmp20 + -0.13028621637792 * AcceptedCmp30 + -0.11510727830726 * AcceptedCmp40 +
0.07003922045545 * AcceptedCmp50 + -0.27409707884649 * Complain0 + -0.02797941377984 *
HigherEducationBinary0 ;
299779    +   H12  = H12  +     0.01887281842523 * AcceptedCmp10
299780    +          +     0.17827111339959 * AcceptedCmp20  +      0.3834139334955 *
299781    +        AcceptedCmp30  +    -0.35411645339173 * AcceptedCmp40
299782    +          +      0.3826012381491 * AcceptedCmp50  +    -0.04061443041339 *
299783    +        Complain0  +    -0.39126131137052 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.01887281842523 * AcceptedCmp10 + 0.17827111339959 *
AcceptedCmp20 + 0.3834139334955 * AcceptedCmp30 + -0.35411645339173 * AcceptedCmp40 +
0.3826012381491 * AcceptedCmp50 + -0.04061443041339 * Complain0 + -0.39126131137052 *
HigherEducationBinary0 ;
299784    +   H13  = H13  +    -0.22268259643926 * AcceptedCmp10
299785    +          +     0.06118190510274 * AcceptedCmp20  +    -0.03457087111822 *
299786    +        AcceptedCmp30  +    -0.25288986318995 * AcceptedCmp40
299787    +          +    -0.04364508506974 * AcceptedCmp50  +     0.04941913394343 *
299788    +        Complain0  +    -0.02882050630994 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.22268259643926 * AcceptedCmp10 + 0.06118190510274 *
AcceptedCmp20 + -0.03457087111822 * AcceptedCmp30 + -0.25288986318995 * AcceptedCmp40 +
-0.04364508506974 * AcceptedCmp50 + 0.04941913394343 * Complain0 + -0.02882050630994 *
HigherEducationBinary0 ;
299789    +   H14  = H14  +    -0.32915676878874 * AcceptedCmp10
299790    +          +    -0.10336607872934 * AcceptedCmp20  +      0.1864520200397 *
299791    +        AcceptedCmp30  +      0.2697012880513 * AcceptedCmp40
299792    +          +    -0.09721530691585 * AcceptedCmp50  +     0.08632814308981 *
299793    +        Complain0  +    -0.04468927647522 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.32915676878874 * AcceptedCmp10 + -0.10336607872934 *
AcceptedCmp20 + 0.1864520200397 * AcceptedCmp30 + 0.2697012880513 * AcceptedCmp40 +
-0.09721530691585 * AcceptedCmp50 + 0.08632814308981 * Complain0 + -0.04468927647522 *
HigherEducationBinary0 ;
299794    +   H15  = H15  +    -0.25850522391607 * AcceptedCmp10
299795    +          +    -0.17803227567502 * AcceptedCmp20  +     -0.1568149803523 *
299796    +        AcceptedCmp30  +    -0.36395079518876 * AcceptedCmp40
299797    +          +    -0.34483131403759 * AcceptedCmp50  +     0.01555003563174 *
299798    +        Complain0  +    -0.28594415027284 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.25850522391607 * AcceptedCmp10 + -0.17803227567502 *
AcceptedCmp20 + -0.1568149803523 * AcceptedCmp30 + -0.36395079518876 * AcceptedCmp40 +
-0.34483131403759 * AcceptedCmp50 + 0.01555003563174 * Complain0 + -0.28594415027284 *
HigherEducationBinary0 ;
299799    +   H16  = H16  +     0.01397091810403 * AcceptedCmp10
299800    +          +      0.0463641834644 * AcceptedCmp20  +    -0.03977784328807 *
299801    +        AcceptedCmp30  +     -0.0160913549772 * AcceptedCmp40
299802    +          +    -0.07333292395504 * AcceptedCmp50  +    -0.06469674138589 *
299803    +        Complain0  +     0.23688207596397 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.01397091810403 * AcceptedCmp10 + 0.0463641834644 *
AcceptedCmp20 + -0.03977784328807 * AcceptedCmp30 + -0.0160913549772 * AcceptedCmp40 +
-0.07333292395504 * AcceptedCmp50 + -0.06469674138589 * Complain0 + 0.23688207596397 *
HigherEducationBinary0 ;
299804    +   H17  = H17  +     0.01442797851067 * AcceptedCmp10
299805    +          +    -0.17701474731803 * AcceptedCmp20  +    -0.28388805248716 *
299806    +        AcceptedCmp30  +    -0.27327948779158 * AcceptedCmp40
299807    +          +    -0.13168193470011 * AcceptedCmp50  +    -0.14127010572854 *
299808    +        Complain0  +     0.33010560570117 * HigherEducationBinary0 ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.01442797851067 * AcceptedCmp10 + -0.17701474731803 *
AcceptedCmp20 + -0.28388805248716 * AcceptedCmp30 + -0.27327948779158 * AcceptedCmp40 +
-0.13168193470011 * AcceptedCmp50 + -0.14127010572854 * Complain0 + 0.33010560570117 *
HigherEducationBinary0 ;
299809    +   H11  = H11  +     0.06224136252276 * Education2n_Cycle
299810    +          +     0.29245093750846 * EducationBasic  +     0.31778509227349 *
299811    +        EducationGraduation  +     0.02842294928395 * EducationMaster
299812    +          +     0.43452164349556 * Marital_StatusDivorced
299813    +          +    -0.46042593279944 * Marital_StatusMarried
299814    +          +     0.45533323427801 * Marital_StatusSingle
299815    +          +    -0.35509352048115 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.06224136252276 * Education2n_Cycle + 0.29245093750846 *
EducationBasic + 0.31778509227349 * EducationGraduation + 0.02842294928395 * EducationMaster +
0.43452164349556 * Marital_StatusDivorced + -0.46042593279944 * Marital_StatusMarried +
0.45533323427801 * Marital_StatusSingle + -0.35509352048115 * Marital_StatusTogether ;
299816    +   H12  = H12  +    -0.15299990287677 * Education2n_Cycle
299817    +          +     0.02656890344215 * EducationBasic  +    -0.05706986878494 *
299818    +        EducationGraduation  +     0.29768497071806 * EducationMaster
299819    +          +     0.11002244687305 * Marital_StatusDivorced
299820    +          +     0.52424349905683 * Marital_StatusMarried
299821    +          +     -0.3969250366321 * Marital_StatusSingle
299822    +          +     0.61408135981641 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.15299990287677 * Education2n_Cycle + 0.02656890344215 *
EducationBasic + -0.05706986878494 * EducationGraduation + 0.29768497071806 * EducationMaster
+ 0.11002244687305 * Marital_StatusDivorced + 0.52424349905683 * Marital_StatusMarried +
-0.3969250366321 * Marital_StatusSingle + 0.61408135981641 * Marital_StatusTogether ;
299823    +   H13  = H13  +     0.07276942595416 * Education2n_Cycle
299824    +          +      0.2275172950841 * EducationBasic  +     -0.0976909406084 *
299825    +        EducationGraduation  +     0.19833004850974 * EducationMaster
299826    +          +    -0.05300704180744 * Marital_StatusDivorced
299827    +          +     0.07805487103106 * Marital_StatusMarried
299828    +          +     0.20033339442958 * Marital_StatusSingle
299829    +          +     0.21842395296443 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.07276942595416 * Education2n_Cycle + 0.2275172950841 *
EducationBasic + -0.0976909406084 * EducationGraduation + 0.19833004850974 * EducationMaster +
-0.05300704180744 * Marital_StatusDivorced + 0.07805487103106 * Marital_StatusMarried +
0.20033339442958 * Marital_StatusSingle + 0.21842395296443 * Marital_StatusTogether ;
299830    +   H14  = H14  +    -0.17400384354577 * Education2n_Cycle
299831    +          +     0.11225346861296 * EducationBasic  +     -0.0442458725683 *
299832    +        EducationGraduation  +     0.29409181424889 * EducationMaster
299833    +          +    -0.42379596543146 * Marital_StatusDivorced
299834    +          +     0.66738351478416 * Marital_StatusMarried
299835    +          +    -0.37324277578462 * Marital_StatusSingle
299836    +          +     0.69171114809758 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.17400384354577 * Education2n_Cycle + 0.11225346861296 *
EducationBasic + -0.0442458725683 * EducationGraduation + 0.29409181424889 * EducationMaster +
-0.42379596543146 * Marital_StatusDivorced + 0.66738351478416 * Marital_StatusMarried +
-0.37324277578462 * Marital_StatusSingle + 0.69171114809758 * Marital_StatusTogether ;
299837    +   H15  = H15  +     0.14908434818686 * Education2n_Cycle
299838    +          +    -0.26880623082589 * EducationBasic  +     0.32861255886248 *
299839    +        EducationGraduation  +    -0.20061683006464 * EducationMaster
299840    +          +     0.88761025578489 * Marital_StatusDivorced
299841    +          +    -0.85905539883385 * Marital_StatusMarried
299842    +          +     0.73467737758558 * Marital_StatusSingle
299843    +          +    -0.96025981753604 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.14908434818686 * Education2n_Cycle + -0.26880623082589 *
EducationBasic + 0.32861255886248 * EducationGraduation + -0.20061683006464 * EducationMaster
+ 0.88761025578489 * Marital_StatusDivorced + -0.85905539883385 * Marital_StatusMarried +
0.73467737758558 * Marital_StatusSingle + -0.96025981753604 * Marital_StatusTogether ;
299844    +   H16  = H16  +     0.06300683576162 * Education2n_Cycle
299845    +          +    -0.33042090710562 * EducationBasic  +    -0.11648771701926 *
299846    +        EducationGraduation  +    -0.12214773396989 * EducationMaster
299847    +          +    -0.11980818075461 * Marital_StatusDivorced
299848    +          +    -0.16572953052582 * Marital_StatusMarried
299849    +          +     0.34617421331983 * Marital_StatusSingle
299850    +          +    -0.11159044098264 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + 0.06300683576162 * Education2n_Cycle + -0.33042090710562 *
EducationBasic + -0.11648771701926 * EducationGraduation + -0.12214773396989 * EducationMaster
+ -0.11980818075461 * Marital_StatusDivorced + -0.16572953052582 * Marital_StatusMarried +
0.34617421331983 * Marital_StatusSingle + -0.11159044098264 * Marital_StatusTogether ;
299851    +   H17  = H17  +     0.01575681216702 * Education2n_Cycle
299852    +          +    -0.21038330244472 * EducationBasic  +    -0.13079470098556 *
299853    +        EducationGraduation  +    -0.08509814368676 * EducationMaster
299854    +          +     0.14874886057777 * Marital_StatusDivorced
299855    +          +     -1.0463076915992 * Marital_StatusMarried
299856    +          +     0.72937563672763 * Marital_StatusSingle
299857    +          +    -0.65508763277891 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.01575681216702 * Education2n_Cycle + -0.21038330244472 *
EducationBasic + -0.13079470098556 * EducationGraduation + -0.08509814368676 * EducationMaster
+ 0.14874886057777 * Marital_StatusDivorced + -1.0463076915992 * Marital_StatusMarried +
0.72937563672763 * Marital_StatusSingle + -0.65508763277891 * Marital_StatusTogether ;
299858    +   H11  =     0.01708225019201 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.01708225019201 + H11 ;
299859    +   H12  =    -0.57231824569332 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.57231824569332 + H12 ;
299860    +   H13  =    -1.03595775479654 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.03595775479654 + H13 ;
299861    +   H14  =     0.85578219568815 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 0.85578219568815 + H14 ;
299862    +   H15  =    -0.42875367789614 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -0.42875367789614 + H15 ;
299863    +   H16  =     -1.7731593212448 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = -1.7731593212448 + H16 ;
299864    +   H17  =    -1.61118674590008 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = -1.61118674590008 + H17 ;
299865    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
299866    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
299867    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
299868    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
299869    +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
299870    +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
299871    +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
299872    +END;
MPRINT(EM_DIAGRAM):   END;
299873    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
299874    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
299875    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
299876    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
299877    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
299878    +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
299879    +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
299880    +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
299881    +END;
MPRINT(EM_DIAGRAM):   END;
299882    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299883    +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
299884    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299885    +
299886    +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
299887    +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
299888    +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
299889    +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
299890    +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
299891    +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
299892    +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
299893    +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
299894    +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
299895    +end;
MPRINT(EM_DIAGRAM):   end;
299896    +else do;
MPRINT(EM_DIAGRAM):   else do;
299897    +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
299898    +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
299899    +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
299900    +   end;
MPRINT(EM_DIAGRAM):   end;
299901    +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
299902    +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
299903    +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
299904    +   end;
MPRINT(EM_DIAGRAM):   end;
299905    +   else do;
MPRINT(EM_DIAGRAM):   else do;
299906    +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
299907    +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
299908    +   end;
MPRINT(EM_DIAGRAM):   end;
299909    +end;
MPRINT(EM_DIAGRAM):   end;
299910    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
299911    +   P_DepVar1  =    -1.64435097572782 * H11  +    -1.62763570310445 * H12
299912    +          +     0.35714449519239 * H13  +     3.29820395171258 * H14
299913    +          +     3.62007777753694 * H15  +     0.58503229487751 * H16
299914    +          +     2.19267705077374 * H17 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.64435097572782 * H11 + -1.62763570310445 * H12 +
0.35714449519239 * H13 + 3.29820395171258 * H14 + 3.62007777753694 * H15 + 0.58503229487751 *
H16 + 2.19267705077374 * H17 ;
299915    +   P_DepVar1  =    -2.18043832074058 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -2.18043832074058 + P_DepVar1 ;
299916    +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
299917    +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
299918    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
299919    +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
299920    +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
299921    +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
299922    +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
299923    +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
299924    +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
299925    +END;
MPRINT(EM_DIAGRAM):   END;
299926    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
299927    +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
299928    +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
299929    +END;
MPRINT(EM_DIAGRAM):   END;
299930    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
299931    +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
299932    +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
299933    +END;
MPRINT(EM_DIAGRAM):   END;
299934    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
299935    +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
299936    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
299937    +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
299938    +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
299939    +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
299940    +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
299941    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299942    +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
299943    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
299944    +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
299945    +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
299946    +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
299947    +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
299948    +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
299949    +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
299950    +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
299951    +END;
MPRINT(EM_DIAGRAM):   END;
299952    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
299953    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
299954    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
299955    +drop
299956    +H11
299957    +H12
299958    +H13
299959    +H14
299960    +H15
299961    +H16
299962    +H17
299963    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 ;
299964    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
299965     run;
 
NOTE: DATA STEP view saved on file EMWS8.NEURAL10_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
299966     quit;
299967     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
299968     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
299969     * Neural10: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural10: Computing metadata for TRAIN data;
299970     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.NEURAL10_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Neural10_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Neural10_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Neural10_TRAIN out=WORK.M2F28H31 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2F28H31;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2F28H31(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2F28H31;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2F28H31;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1JNN9ZX NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1JNN9ZX;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1JNN9ZX;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2EEL5VZ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1JNN9ZX;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1JNN9ZX;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1JNN9ZX;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1JNN9ZX;
MPRINT(EMADVISECOLUMNS):   set WORK.M1JNN9ZX;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural10";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural10";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Neural10";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural10: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
300282     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
300283     set EMWS8.Neural10_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMINFO;
300284     where DATA='Neural10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
300285     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.NEURAL10_EMINFO.
      WHERE (DATA='Neural10') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300286     data EMWS8.Neural10_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_EMINFO;
300287     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
300288     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
300289     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.NEURAL10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
300293     run;
300294     data EMWS8.Neural10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMINFO;
300295     set EMWS8.Neural10_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMINFO WORK.MODELTEMP_INFO;
300296     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.NEURAL10_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.NEURAL10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300297     proc sort data = EMWS8.Neural10_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Neural10_EMINFO NOTHREADS;
300298     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
300299     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.NEURAL10_EMINFO.
NOTE: The data set EMWS8.NEURAL10_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300300     proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
300301     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
300302     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
300303     proc sort data = EMWS8.Neural10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Neural10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
300304     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
300305     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.NEURAL10_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300306     data EMWS8.Neural10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMINFO;
300307     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
300308     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
300309     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.NEURAL10_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300310     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
300311     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
300312     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
300313     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS8.NEURAL10_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS8.NEURAL10_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "20. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16.24 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                20. April 2016
Time:                16.24 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O38I0LC8
"C:\\predictive-models-project\Workspaces\EMWS8\Neural10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O38I0LC8 new;
MPRINT(EM_DIAGRAM):   run;
300337     data EMWS8.Neural10_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_EMOUTFIT(rename=(_NAME_=TARGET));
300338     set EMWS8.Neural10_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_OUTFIT(where=(_NAME_ eq 'OVERALL'));
300339     label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
300340     if _NAME_='OVERALL' then _NAME_='DepVar';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='DepVar';
300341     drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
300342     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL10_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS8.NEURAL10_EMOUTFIT has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300343     proc sort data=EMWS8.Neural10_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural10_EMOUTFIT nodupkey;
300344     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
300345     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL10_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS8.NEURAL10_EMOUTFIT has 1 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300346     data EMWS8.Neural10_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_EMOUTFIT;
300347     set EMWS8.Neural10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMOUTFIT;
300348     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
300349     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
300349   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
300350     if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
300351     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL10_EMOUTFIT.
NOTE: The data set EMWS8.NEURAL10_EMOUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
300352     proc sort data=EMWS8.Neural10_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural10_EMREPORTFIT nothreads;
300353     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
300354     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS8.NEURAL10_EMREPORTFIT.
NOTE: The data set EMWS8.NEURAL10_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
300355     %let _EMwarndup = 0;
300356     %let _EMtargetdup =;
300357     %let _EMASEtargetdup =;
300358     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
300359     set EMWS8.Neural10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMOUTFIT;
300360     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
300361     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
300362     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
300363     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
300364     end;
MPRINT(EM_DIAGRAM):   end;
300365     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.NEURAL10_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300366     proc sort data=EMWS8.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
300367     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
300368     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS8.META_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 36 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300369     proc sort data=EMWS8.Neural10_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Neural10_VariableSet
out=WORK.SUBSETVARSET(keep=NAME REPORT);
300370     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
300371     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.NEURAL10_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300372     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
300373     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
300374     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
300375     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 34 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 36 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300376     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
300377     set EMWS8.Neural10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_CMeta_TRAIN;
300378     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
300378   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
300379     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL10_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
300380     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
300381     set EMWS8.Neural10_TRAIN(keep=
300382     F_DepVar
300383     I_DepVar
300384     P_DepVar0
300385     P_DepVar1
300386     R_DepVar0
300387     R_DepVar1
300388     U_DepVar
300389     _WARN_
300390     DepVar
300391     );
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
300392     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.NEURAL10_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.META_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.NEURAL10_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Neural10_0WSDQD6 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural10_0WSDQD6;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural10_0WSDQD6(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural10_0WSDQD6;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural10_0WSDQD6;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 2.0850951E-7 OVLMAX 0.999955171 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
304658     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
304659     set EMWS8.Neural10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_CMeta_TRAIN;
304660     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
304660   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
304661     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL10_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
304662     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
304663     set EMWS8.Neural10_VALIDATE(keep=
304664     F_DepVar
304665     I_DepVar
304666     P_DepVar0
304667     P_DepVar1
304668     R_DepVar0
304669     R_DepVar1
304670     U_DepVar
304671     _WARN_
304672     DepVar
304673     );
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
304674     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.NEURAL10_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.META_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.NEURAL10_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Neural10_32ZRSVU nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural10_32ZRSVU;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural10_32ZRSVU(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMCLASSIFICATION WORK.Neural10_32ZRSVU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural10_32ZRSVU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Neural10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 1.9957056E-7 OVLMAX 0.9999466465 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
308949     %let _cn = %sysfunc(getoption(CENTER));
308950     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
308951     proc print data=EMWS8.Neural10_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural10_EMREPORTFIT noobs label;
308952     var STAT LABEL TRAIN
308953     VALIDATE
308954     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
308955     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
308956     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
308957     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
308958     run;
 
NOTE: There were 21 observations read from the data set EMWS8.NEURAL10_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 222.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
308959     title10;
MPRINT(EM_DIAGRAM):   title10;
308960     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
308961     proc sort data=EMWS8.Neural10_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Neural10_EMCLASSIFICATION nothreads;
308962     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
308963     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL10_EMCLASSIFICATION.
NOTE: The data set EMWS8.NEURAL10_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
308964     %let _cn = %sysfunc(getoption(CENTER));
308965     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
308966     proc print data=EMWS8.Neural10_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural10_EMCLASSIFICATION noobs label;
308967     var from into pct_row pct_col count percent
308968     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
308969     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
308970     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
308971     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
308972     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
308973     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
308974     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
308975     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
308976     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
308977     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
308978     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
308979     run;
 
NOTE: There were 8 observations read from the data set EMWS8.NEURAL10_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 223.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
308980     title9;
MPRINT(EM_DIAGRAM):   title9;
308981     title10;
MPRINT(EM_DIAGRAM):   title10;
308982     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
308983     %let _cn = %sysfunc(getoption(CENTER));
308984     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
308985     data EMWS8.Neural10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Neural10_EMEVENTREPORT;
308986     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
308986   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
308987     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
308987   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
308987   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
308987   ! FALSEEVENT
308988     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
308988   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
308988   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
308989        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
308990     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
308991     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
308992     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
308993     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
308994     set EMWS8.Neural10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Neural10_EMEVENTREPORT;
308995     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.NEURAL10_EMEVENTREPORT.
NOTE: The data set EMWS8.NEURAL10_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
308996     proc print data=EMWS8.Neural10_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural10_EMEVENTREPORT noobs label;
308997     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
308998     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
308999     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
309000     run;
 
NOTE: There were 2 observations read from the data set EMWS8.NEURAL10_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 224.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
309001     title10;
MPRINT(EM_DIAGRAM):   title10;
309002     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
309003     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
309004     modify Neural10_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural10_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
309005     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
309006     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
309006   ! ;
MPRINT(EM_DIAGRAM):   run;
309007     run;
 
NOTE: MODIFY was successful for EMWS8.NEURAL10_EMRANK.DATA.
309008     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
309009     %let _cn = %sysfunc(getoption(CENTER));
309010     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
309011     proc print data=EMWS8.Neural10_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural10_EMRANK label noobs;
309012     var
309013     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
309014     by
309015     notsorted DATAROLE
309016     notsorted TARGET
309017     notsorted TARGETLABEL
309018     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
309019     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
309020     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
309021     run;
 
NOTE: There were 40 observations read from the data set EMWS8.NEURAL10_EMRANK.
NOTE: The PROCEDURE PRINT printed page 225.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
309022     title10;
MPRINT(EM_DIAGRAM):   title10;
309023     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
309024     proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
309025     modify Neural10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
309026     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
309026   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
309027     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
309027   ! ;
MPRINT(EM_DIAGRAM):   run;
309028     run;
 
NOTE: MODIFY was successful for EMWS8.NEURAL10_EMSCOREDIST.DATA.
309029     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Neural10_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
